---
name: agw-workflow

on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - master
      - v1.*
  pull_request:
    branches:
      - master
      - v1.*
    types: [opened, reopened, synchronize]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  DEVCONTAINER_IMAGE: "ghcr.io/magma/magma/devcontainer:latest"
  BAZEL_CACHE: bazel-cache
  BAZEL_CACHE_REPO: bazel-cache-repo

jobs:
  path_filter:
    runs-on: ubuntu-latest
    outputs:
      should_not_skip: ${{ steps.changes.outputs.filesChanged }}
    steps:
      # Need to get git on push event
      - uses: actions/checkout@v2
        if: github.event_name == 'push'
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            filesChanged:
              - '.github/workflows/agw-workflow.yml'
              - 'orc8r/**'
              - 'lte/**'
              - '.bazelrc'
              - 'WORKSPACE.bazel'
              - 'bazel/**'
      - name: Save should_not_skip output
        if: always()
        run: |
          mkdir -p ./pr
          echo -n ${{ steps.changes.outputs.filesChanged == 'false' }} > ./pr/skipped
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: pr
          path: pr/

  lte-test:
    needs: path_filter
    if: ${{ needs.path_filter.outputs.should_not_skip == 'true' }}
    name: lte test job
    runs-on: ubuntu-latest
    env:
      MAGMA_ROOT: "${{ github.workspace }}"
      CODEGEN_ROOT: "${{ github.workspace }}/.codegen"
      PYTHON_BUILD: "${{ github.workspace }}/build"
      PYTHONPATH: "${{ github.workspace }}"
      PIP_CACHE_HOME: "${{ github.workspace }}/.pipcache"
      SWAGGER_CODEGEN_JAR: "${{ github.workspace }}/.codegen/swagger-codegen-cli.jar"
      MAGMA_DEV_MODE: 1
      SKIP_SUDO_TESTS: 1
    steps:
      - uses: actions/checkout@v2
      - name: setup pyenv
        uses: "gabrielfalcao/pyenv-action@v8"
        with:
          default: 3.8.5
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8.5'
      - name: Run apt-focal-install-aioeventlet
        run: |
            cd nms
            # Install python3-aioeventlet from the magma apt repo
            cat ${{ env.MAGMA_ROOT }}/orc8r/tools/ansible/roles/pkgrepo/files/jfrog.pub | sudo -E apt-key add -
            echo "deb https://facebookconnectivity.jfrog.io/artifactory/list/dev-focal/ focal main" | sudo -E tee /etc/apt/sources.list.d/fbc.list
            sudo apt-get update -y
            sudo apt-get install -y python3-aioeventlet
            sudo rm -rf /var/lib/apt/lists/*
      - name: Install libraries and dependecies
        run: |
            mkdir -p /var/tmp/test_results
            mkdir -p /var/tmp/codecovs
            sudo -E apt-get update -y
            sudo -E apt-get install -y libsystemd-dev pkg-config curl zip unzip net-tools
            sudo -E apt-get install -y virtualenv python-babel python-dev build-essential autogen autoconf libtool python3-apt python3-requests python3-pip python-protobuf
      - name: Setup protoc3
        run: |
            pip3 install protobuf
            pip3 install setuptools==49.6.0
            curl -Lfs https://github.com/protocolbuffers/protobuf/releases/download/v3.1.0/protoc-3.1.0-linux-x86_64.zip -o protoc3.zip
            unzip protoc3.zip -d protoc3
            sudo -E mv protoc3/bin/protoc /bin/protoc
            sudo -E chmod a+rx /bin/protoc
            # Workaround: the include files need to be found
            mv ./protoc3/include/google .
            sudo -E rm -rf protoc3.zip protoc3
      - name: Setup Swagger
        run: |
            mkdir ${{ env.CODEGEN_ROOT }}
            wget https://repo1.maven.org/maven2/io/swagger/swagger-codegen-cli/2.2.3/swagger-codegen-cli-2.2.3.jar -O ${{ env.SWAGGER_CODEGEN_JAR }}
      - name: Execute test_all
        run: |
            make -C ${{ env.MAGMA_ROOT }}/lte/gateway/python test_all
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Unit Test Results
          path: /var/tmp/test_results
      - uses: codecov/codecov-action@v1
        with:
          files: /var/tmp/codecovs/cover_lte.xml,/var/tmp/codecovs/cover_orc8r.xml
          flags: lte-test
      - name: Extract commit title
        if: failure() && github.event_name == 'push'
        id: commit
        run: |
            str="$(jq '.head_commit.message' $GITHUB_EVENT_PATH)"    # get the head_commit message
            echo ::set-output name=title::${str%%\\n*} | tr -d '"'
      - name: Notify failure to slack
        if: failure() && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_CI }}
          SLACK_TITLE: "Github action lte-test update failed"
          SLACK_USERNAME: "AGW workflow"
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_ICON_EMOJI: ":boom:"
          SLACK_COLOR: "#FF0000"
          SLACK_FOOTER: ' '

  c_cpp_unit_tests:
    needs: path_filter
    if: ${{ needs.path_filter.outputs.should_not_skip == 'true' }}
    name: C/C++ unit tests with Bazel
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repo
        # This is necessary for overlays into the Docker container below.
        uses: actions/checkout@v2
      - name: Bazel Cache
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/.${{ env.BAZEL_CACHE }}
          key: ${{ runner.os }}-${{ env.BAZEL_CACHE }}-c-cpp-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ env.BAZEL_CACHE }}-c-cpp-
      - name: Bazel Cache Repo
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/.${{ env.BAZEL_CACHE_REPO }}
          key: ${{ runner.os }}-${{ env.BAZEL_CACHE_REPO }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ env.BAZEL_CACHE_REPO }}-
      - name: Ensure cache size (only on master)
        if: github.event_name == 'push'
        env:
          BAZEL_CACHE_DIR: .${{ env.BAZEL_CACHE }}
          BAZEL_CACHE_CUTOFF_MB: 6000
        run: |
          ./.github/workflows/check-bazel-cache-dir-size.sh "$BAZEL_CACHE_DIR" "$BAZEL_CACHE_CUTOFF_MB"
      - name: Setup Devcontainer Image
        uses: addnab/docker-run-action@v2
        with:
          image: ${{ env.DEVCONTAINER_IMAGE }}
          # Run a simple echo command to pull down the image. This makes it a bit more clear how much time is spent on building Magma and not pulling down the image.
          run: |
            echo "Pulled the devontainer image!"
      - name: Create a directory to store XML test results
        uses: addnab/docker-run-action@v2
        with:
          shell: bash
          image: ${{ env.DEVCONTAINER_IMAGE }}
          # TODO: Remove work-around mount of Github workspace to /magma (https://github.com/addnab/docker-run-action/issues/11)
          options: -v ${{ github.workspace }}:/workspaces/magma/ -v ${{ github.workspace }}/lte/gateway/configs:/etc/magma
          run: |
            cd /workspaces/magma
            mkdir -p c-cpp-test-results/
            echo "created c-cpp-test-results/ directory"
      - name: Run `bazel test //orc8r/gateway/c/...:* //lte/gateway/c/...:* --config=asan`
        uses: addnab/docker-run-action@v2
        with:
          shell: bash
          image: ${{ env.DEVCONTAINER_IMAGE }}
          # TODO: Remove work-around mount of Github workspace to /magma (https://github.com/addnab/docker-run-action/issues/11)
          options: -v ${{ github.workspace }}:/workspaces/magma/ -v ${{ github.workspace }}/lte/gateway/configs:/etc/magma
          run: |
            cd /workspaces/magma
            bazel test //orc8r/gateway/c/...:* //lte/gateway/c/...:* --config=asan --test_output=errors --cache_test_results=no
            TEST_RESULT=$?
            # copy out test results
            echo "Copying out test result XMLs for testing with ASAN"
            find bazel-out/k8-dbg/testlogs/ -name "*.xml" | while IFS= read -r f; do cp "$f" "c-cpp-test-results/asan_${f//\//_}"; done
            exit $TEST_RESULT
      - name: Run `bazel test //orc8r/gateway/c/...:* //lte/gateway/c/...:* --config=lsan`
        uses: addnab/docker-run-action@v2
        with:
          shell: bash
          image: ${{ env.DEVCONTAINER_IMAGE }}
          # TODO: Remove work-around mount of Github workspace to /magma (https://github.com/addnab/docker-run-action/issues/11)
          options: -v ${{ github.workspace }}:/workspaces/magma/ -v ${{ github.workspace }}/lte/gateway/configs:/etc/magma
          run: |
            cd /workspaces/magma
            # Clean so that test XML outputs are wiped from the previous run
            bazel clean
            bazel test //orc8r/gateway/c/...:* //lte/gateway/c/...:* --config=lsan --test_output=errors --cache_test_results=no
            TEST_RESULT=$?
            # copy out test results
            echo "Copying out test result XMLs for testing with LSAN"
            find bazel-out/k8-dbg/testlogs/ -name "*.xml" | while IFS= read -r f; do cp "$f" "c-cpp-test-results/lsan_${f//\//_}"; done
            exit $TEST_RESULT
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Unit Test Results
          path: c-cpp-test-results/

  li_agent_test:
    needs: path_filter
    if: ${{ needs.path_filter.outputs.should_not_skip == 'true' }}
    name: li agent test job
    runs-on: ubuntu-latest
    env:
      MAGMA_ROOT: "${{ github.workspace }}"
    steps:
      - uses: actions/checkout@v2
      - name: Run li agent tests
        timeout-minutes: 5
        uses: addnab/docker-run-action@v2
        with:
          image: ${{ env.DEVCONTAINER_IMAGE }}
          # TODO: Remove work-around mount of Github workspace to /magma (https://github.com/addnab/docker-run-action/issues/11)
          options: --volume ${{ env.MAGMA_ROOT }}:/workspaces/magma --volume ${{ env.MAGMA_ROOT }}/lte/gateway/configs:/etc/magma -e ABC=123
          run: |
            cd /workspaces/magma/lte/gateway
            make test_li_agent
      - name: Extract commit title
        # yamllint enable
        if: failure() && github.event_name == 'push'
        id: commit
        run: |
            str="$(jq '.head_commit.message' $GITHUB_EVENT_PATH)"    # get the head_commit message
            echo ::set-output name=title::${str%%\\n*} | tr -d '"'
      - name: Notify failure to slack
        if: failure() && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_CI }}
          SLACK_TITLE: "Github action li_agent_test failed"
          SLACK_USERNAME: "AGW workflow"
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_ICON_EMOJI: ":boom:"
          SLACK_COLOR: "#FF0000"
          SLACK_FOOTER: ' '

  mme_test:
    needs: path_filter
    if: ${{ needs.path_filter.outputs.should_not_skip == 'true' }}
    name: mme test job
    runs-on: ubuntu-latest
    env:
      MAGMA_ROOT: "${{ github.workspace }}"
    steps:
      - uses: actions/checkout@v2
      - name: Run sctpd tests with Debug build type
        uses: addnab/docker-run-action@v2
        with:
          image: ${{ env.DEVCONTAINER_IMAGE }}
          # TODO: Remove work-around mount of Github workspace to /magma (https://github.com/addnab/docker-run-action/issues/11)
          options: --volume ${{ env.MAGMA_ROOT }}:/workspaces/magma --volume ${{ env.MAGMA_ROOT }}/lte/gateway/configs:/etc/magma -e ABC=123
          run: |
            cd /workspaces/magma/lte/gateway
            make test_sctpd BUILD_TYPE=Debug
      - name: Run sctpd tests with RelWithDebInfo build type
        uses: addnab/docker-run-action@v2
        with:
          image: ${{ env.DEVCONTAINER_IMAGE }}
          # TODO: Remove work-around mount of Github workspace to /magma (https://github.com/addnab/docker-run-action/issues/11)
          options: --volume ${{ env.MAGMA_ROOT }}:/workspaces/magma --volume ${{ env.MAGMA_ROOT }}/lte/gateway/configs:/etc/magma -e ABC=123
          run: |
            cd /workspaces/magma/lte/gateway
            make test_sctpd BUILD_TYPE=RelWithDebInfo
      - name: Run mme tests with Debug build type
        uses: addnab/docker-run-action@v2
        with:
          image: ${{ env.DEVCONTAINER_IMAGE }}
          # TODO: Remove work-around mount of Github workspace to /magma (https://github.com/addnab/docker-run-action/issues/11)
          options: --volume ${{ env.MAGMA_ROOT }}:/workspaces/magma --volume ${{ env.MAGMA_ROOT }}/lte/gateway/configs:/etc/magma -e ABC=123
          run: |
            cd /workspaces/magma/lte/gateway
            make test_oai BUILD_TYPE=Debug;
      - name: Run mme tests with RelWithDebInfo build type
        uses: addnab/docker-run-action@v2
        with:
          image: ${{ env.DEVCONTAINER_IMAGE }}
          # TODO: Remove work-around mount of Github workspace to /magma (https://github.com/addnab/docker-run-action/issues/11)
          options: --volume ${{ env.MAGMA_ROOT }}:/workspaces/magma --volume ${{ env.MAGMA_ROOT }}/lte/gateway/configs:/etc/magma -e ABC=123
          run: |
            cd /workspaces/magma/lte/gateway
            make test_oai BUILD_TYPE=RelWithDebInfo;
      - name: Extract commit title
        # yamllint enable
        if: failure() && github.event_name == 'push'
        id: commit
        run: |
            str="$(jq '.head_commit.message' $GITHUB_EVENT_PATH)"    # get the head_commit message
            echo ::set-output name=title::${str%%\\n*} | tr -d '"'
      - name: Notify failure to slack
        if: failure() && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_CI }}
          SLACK_TITLE: "Github action mme_test failed"
          SLACK_USERNAME: "AGW workflow"
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_ICON_EMOJI: ":boom:"
          SLACK_COLOR: "#FF0000"
          SLACK_FOOTER: ' '

  mme-clang-tidy-and-warning:
    needs: path_filter
    if: ${{ needs.path_filter.outputs.should_not_skip == 'true' }}
    name: Upload MME clang-tidy and clang-warning outputs
    runs-on: ubuntu-latest
    env:
      MAGMA_ROOT: "${{ github.workspace }}"
      BRANCH: "${{ github.base_ref }}"
      REVISION: "${{ github.sha }}"
    steps:
      - uses: actions/checkout@v2
      - name: Setup Devcontainer Image
        uses: addnab/docker-run-action@v2
        with:
          image: ${{ env.DEVCONTAINER_IMAGE }}
          # Run a simple echo command to pull down the image. This makes it a bit more clear how much time is spent on building Magma and not pulling down the image.
          run: |
            echo "Pulled the devontainer image!"
      - name: Run mme-clang-tidy
        if: always()
        uses: addnab/docker-run-action@v2
        with:
          image: ${{ env.DEVCONTAINER_IMAGE }}
          # TODO: Remove work-around mount of Github workspace to /magma (https://github.com/addnab/docker-run-action/issues/11)
          options: --env BRANCH=${{ env.BRANCH}} --env REVISION=${{ env.REVISION }} -v ${{ github.workspace }}:/workspaces/magma/ -v ${{ github.workspace }}/lte/gateway/configs:/etc/magma
          run: |
            cd $MAGMA_ROOT/lte/gateway
            make clang_tidy_oai_upload
      - name: Run mme-clang-warnings
        if: always()
        uses: addnab/docker-run-action@v2
        with:
          image: ${{ env.DEVCONTAINER_IMAGE }}
          # TODO: Remove work-around mount of Github workspace to /magma (https://github.com/addnab/docker-run-action/issues/11)
          options: --env BRANCH=${{ env.BRANCH}} --env REVISION=${{ env.REVISION }} -v ${{ github.workspace }}:/workspaces/magma/ -v ${{ github.workspace }}/lte/gateway/configs:/etc/magma
          run: |
            cd $MAGMA_ROOT/lte/gateway
            make clang_warning_oai_upload
      - name: Extract commit title
        # yamllint enable
        if: failure() && github.event_name == 'push'
        id: commit
        run: |
            str="$(jq '.head_commit.message' $GITHUB_EVENT_PATH)"    # get the head_commit message
            echo ::set-output name=title::${str%%\\n*} | tr -d '"'
      - name: Notify failure to slack
        if: steps.mme-clang-warning.outcome=='failure' && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_CI }}
          SLACK_TITLE: "Github action mme-clang-warnings failed"
          SLACK_USERNAME: "AGW workflow"
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_ICON_EMOJI: ":boom:"
          SLACK_COLOR: "#FF0000"
          SLACK_FOOTER: ' '
      - name: Notify failure to slack
        if: steps.mme-clang-tidy.outcome=='failure' && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_CI }}
          SLACK_TITLE: "Github action mme-clang-tidy failed"
          SLACK_USERNAME: "AGW workflow"
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_ICON_EMOJI: ":boom:"
          SLACK_COLOR: "#FF0000"
          SLACK_FOOTER: ' '

  c-cpp-codecov:
    needs: path_filter
    if: ${{ needs.path_filter.outputs.should_not_skip == 'true' }}
    name: C / C++ code coverage
    runs-on: ubuntu-latest
    env:
      MAGMA_ROOT: "${{ github.workspace }}"
      BRANCH: "${{ github.base_ref }}"
      REVISION: "${{ github.sha }}"
    steps:
      - uses: actions/checkout@v2
      - name: Bazel Cache
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/.${{ env.BAZEL_CACHE }}
          key: ${{ runner.os }}-${{ env.BAZEL_CACHE }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ env.BAZEL_CACHE }}-
      - name: Bazel Cache Repo
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/.${{ env.BAZEL_CACHE_REPO }}
          key: ${{ runner.os }}-${{ env.BAZEL_CACHE_REPO }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ env.BAZEL_CACHE_REPO }}-
      - name: Setup Devcontainer Image
        uses: addnab/docker-run-action@v2
        with:
          image: ${{ env.DEVCONTAINER_IMAGE }}
          # Run a simple echo command to pull down the image. This makes it a bit more clear how much time is spent on building Magma and not pulling down the image.
          run: |
            echo "Pulled the devontainer image!"
            bazel # pull down bazel, if bazel download fails we can fail before we do all the lengthy work below
      - name: Run codecov with CMake (MME)
        if: always()
        uses: addnab/docker-run-action@v2
        with:
          image: ${{ env.DEVCONTAINER_IMAGE }}
          # TODO: Remove work-around mount of Github workspace to /magma (https://github.com/addnab/docker-run-action/issues/11)
          options: -v ${{ github.workspace }}:/workspaces/magma/ -v ${{ github.workspace }}/lte/gateway/configs:/etc/magma
          run: |
            cd $MAGMA_ROOT/lte/gateway
            make coverage
            cp $C_BUILD/coverage.info $MAGMA_ROOT
      - name: Run coverage with Bazel (COMMON / SESSIOND / SCTPD / LIAGENT / CONNECTIOND)
        if: always()
        uses: addnab/docker-run-action@v2
        with:
          image: ${{ env.DEVCONTAINER_IMAGE }}
          # TODO: Remove work-around mount of Github workspace to /magma (https://github.com/addnab/docker-run-action/issues/11)
          options: -v ${{ github.workspace }}:/workspaces/magma/ -v ${{ github.workspace }}/lte/gateway/configs:/etc/magma
          run: |
            cd $MAGMA_ROOT
            # Collecting coverage with Bazel can be slow. We can follow this thread to see if this can be improved: https://github.com/bazelbuild/bazel/issues/8178
            # Omit OAI coverage until it is tested. We need to determine what the behavior is for doing both CMake and Bazel based coverage at the same time
            # TODO: GH11936
            bazel coverage -- //orc8r/gateway/c/...:* //lte/gateway/c/...:* -//lte/gateway/c/core/...:*
            # copy out coverage information into magma so that it's accessible from the CI node
            cp bazel-out/_coverage/_coverage_report.dat $MAGMA_ROOT
      - name: Upload code coverage
        if: always()
        id: c-cpp-codecov-upload
        uses: codecov/codecov-action@v1
        with:
          flags: c_cpp
      - name: Extract commit title
        # yamllint enable
        if: failure() && github.event_name == 'push'
        id: commit
        run: |
            str="$(jq '.head_commit.message' $GITHUB_EVENT_PATH)"    # get the head_commit message
            echo ::set-output name=title::${str%%\\n*} | tr -d '"'
      - name: Notify failure to slack
        if: steps.c-cpp-codecov-upload.outcome=='failure' && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_CI }}
          SLACK_TITLE: "Github action c-cpp-codecov-upload failed"
          SLACK_USERNAME: "AGW workflow"
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_ICON_EMOJI: ":boom:"
          SLACK_COLOR: "#FF0000"
          SLACK_FOOTER: ' '

  lint-clang-format:
    needs: path_filter
    if: ${{ needs.path_filter.outputs.should_not_skip == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Check clang-format for orc8r/gateway/c
        uses: DoozyX/clang-format-lint-action@v0.13
        with:
          source: 'orc8r/gateway/c'
          extensions: 'h,hpp,c,cpp'
          clangFormatVersion: 11.1.0
          # taken from .clang-format
          style: file
      - name: Check clang-format for lte/gateway/c
        uses: DoozyX/clang-format-lint-action@v0.13
        with:
          source: 'lte/gateway/c'
          extensions: 'h,hpp,c,cpp'
          clangFormatVersion: 11.1.0
          # taken from .clang-format
          style: file

  session_manager_test:
    needs: path_filter
    if: ${{ needs.path_filter.outputs.should_not_skip == 'true' }}
    name: session manager test job
    runs-on: ubuntu-latest
    env:
      MAGMA_ROOT: "${{ github.workspace }}"
    steps:
      - uses: actions/checkout@v2
      - name: Run session_manager tests
        timeout-minutes: 20
        uses: addnab/docker-run-action@v2
        with:
          image: ${{ env.DEVCONTAINER_IMAGE }}
          # TODO: Remove work-around mount of Github workspace to /magma (https://github.com/addnab/docker-run-action/issues/11)
          options: --volume ${{ env.MAGMA_ROOT }}:/workspaces/magma --volume ${{ env.MAGMA_ROOT }}/lte/gateway/configs:/etc/magma
          run: |
            cd /workspaces/magma/lte/gateway
            make test_session_manager
      - name: Extract commit title
        # yamllint enable
        if: failure() && github.event_name == 'push'
        id: commit
        run: |
            str="$(jq '.head_commit.message' $GITHUB_EVENT_PATH)"    # get the head_commit message
            echo ::set-output name=title::${str%%\\n*} | tr -d '"'
      - name: Notify failure to slack
        if: failure() && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_CI }}
          SLACK_TITLE: "Github action session_manager_test failed"
          SLACK_USERNAME: "AGW workflow"
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_ICON_EMOJI: ":boom:"
          SLACK_COLOR: "#FF0000"
          SLACK_FOOTER: ' '

  jsonlint-mconfig:
    name: jsonlint-mconfig
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          fetch-depth: 0
      - name: jsonlint-mconfig
        run: find . -name gateway.mconfig -print0 | xargs --max-args=1 --null --replace='%' sh -c ">/dev/null jq . % || { echo % is not a valid json file; exit 1; } "
