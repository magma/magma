---
name: reviewdog-workflow
on:  # yamllint disable-line rule:truthy
  pull_request_target:
    types:
      - opened
      - reopened
      - synchronize

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number}}
  cancel-in-progress: true
# Applies on all review jobs below
# See Reviewdog doc provided at https://github.com/reviewdog/reviewdog
# github-pr-check: Adds lint as annotations in the PR that can be toggled by pressing 'a'
# github-pr-review: Adds lint as GitHub comments

permissions: read-all

jobs:
  pre_job_go_determinator:
    runs-on: ubuntu-latest
    outputs:
      should_not_skip: ${{ steps.changes.outputs.filesChanged }}
    steps:
      # Need to get git on push event
      - uses: actions/checkout@v2
        if: github.event_name == 'push'
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            filesChanged:
              - [".github/workflows/reviewdog-workflow.yml", "src/go/**"]

  pre_job_c_cpp_determinator:
    runs-on: ubuntu-latest
    outputs:
      should_not_skip: ${{ steps.changes.outputs.filesChanged }}
    steps:
      # Need to get git on push event
      - uses: actions/checkout@v2
        if: github.event_name == 'push'
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            filesChanged:
              - [".github/workflows/reviewdog-workflow.yml", "lte/gateway/c/**", "orc8r/gateway/c/**"]

  cpplint:
    permissions:
      checks: write  # for reviewdog
      contents: read  # for actions/checkout to fetch code
      pull-requests: write  # for reviewdog
    needs: pre_job_c_cpp_determinator
    if: ${{ needs.pre_job_c_cpp_determinator.outputs.should_not_skip == 'true' }}
    ##
    #  Cpplint aims to lint to the Google Style guide. For detailed
    #  rationale on each linting rule, see
    #  https://google.github.io/styleguide/cppguide.html
    ##
    #  To suppress false-positive errors of a certain category, add a
    #  'NOLINT(category)' comment to the line.  NOLINT or NOLINT(*)
    #  suppresses errors of all categories on that line.
    ##
    #  For details on cpplint optinos see the detailed comments in
    #  https://github.com/google/styleguide/blob/gh-pages/cpplint/cpplint.py
    ##
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          fetch-depth: 0
        name: Install CPP Lint and ReviewDog
      - run: |
          wget -O - -q https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh \
          | sh -s -- -b .
          pip install cpplint
      - name: Run CPP Lint and push Annotations
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cpplint --recursive \
            --filter=-build/include_subdir,-build/c++11,-build/include_what_you_use \
            --linelength=120 ${{ github.workspace }} 2>&1 \
            | ./reviewdog -efm="%f:%l: %m" -name="cpplint" -reporter="github-pr-check" -level="warning"

  golangci-lint:
    permissions:
      contents: read  # for actions/checkout to fetch code
      pull-requests: write  # for reviewdog/action-golangci-lint to report issues using PR comments
    needs: pre_job_go_determinator
    if: ${{ needs.pre_job_go_determinator.outputs.should_not_skip == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          fetch-depth: 0
      - name: golangci-lint
        uses: reviewdog/action-golangci-lint@v2
        with:
          golangci_lint_flags: '--config=../../.golangci.yml'
          reporter: github-pr-review  # Comments on PR with review comments.
          workdir: src/go/

  hadolint:
    name: dockerfile-lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          fetch-depth: 0
      - name: hadolint
        uses: reviewdog/action-hadolint@v1
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-pr-check  # Default is github-pr-check
          # Ignore DL3005-"Do not use apt-get upgrade or dist-upgrade"
          hadolint_ignore: DL3005
          filter_mode: added  # All added or modified lines

  misspell:
    name: misspell
    runs-on: ubuntu-latest
    steps:
      - name: Check out code.
        uses: actions/checkout@v2
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          fetch-depth: 0
      - name: misspell
        uses: reviewdog/action-misspell@v1
        with:
          github_token: ${{ secrets.github_token }}
          filter_mode: added  # Any added or changed content.
          reporter: github-pr-review  # Post code review comments.
          locale: "US"

  shellcheck:
    name: shellcheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          fetch-depth: 0
      - name: shellcheck
        uses: reviewdog/action-shellcheck@v1
        with:
          github_token: ${{ secrets.github_token }}
          filter_mode: added # Any added or changed content.
          reporter: github-pr-check # Post code review comments. Falls back to Annotations.
          pattern: "*.sh" # Optional.
          # Other options omitted here but possible.
          # - fail_on_error
          # - path
          # - exclude
          # - shellcheck_flags

  wemake-python-styleguide:
    name: wemake-python-styleguide
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}
      - name: Get changed files
        id: py-changes
        # Set outputs.py to be a list of modified python files
        run: |
          echo "::set-output name=py::$(git diff --name-only --diff-filter=ACMRT ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep .py$ | xargs)"
      - if: ${{ steps.py-changes.outputs.py }}
        name: wemake-python-styleguide
        uses: wemake-services/wemake-python-styleguide@0.15.2
        with:
          reporter: 'github-pr-check'
          path: ${{ steps.py-changes.outputs.py }}
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}

  yamllint:
    name: yamllint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          fetch-depth: 0
      - name: yamllint
        uses: reviewdog/action-yamllint@v1
        with:
          github_token: ${{ secrets.github_token }}
          level: warning
          filter_mode: added  # Any added or changed content.
          reporter: github-pr-check  # Comments on PR with review comments.
          yamllint_flags: "-d .github/workflows/config/yamllint_config.yml ."
