---

name: Deploy PR build
on:  # yamllint disable-line rule:truthy
  workflow_run:
    workflows:
      - build-all
    types:
      - completed
# Replace registries with new test registries reserved for PR builds
jobs:
  deploy:
    if: github.event.workflow_run.event == 'pull_request'
    name: Deploy artifacts from PR
    runs-on: ubuntu-latest
    env:
      WORKFLOW_NAME: "${{ github.event.workflow.name }}"
      WORKFLOW_STATUS: "${{ github.event.workflow_run.conclusion }}"
    steps:
      - uses: hmarr/debug-action@v2
      # Could be improved, only need the tag push docker and helm rotation script here
      - name: checkout code
        uses: actions/checkout@v2
      # Retrieve Generated artifacts and delete them to keep cache usage low
      - name: Download builds
        uses: actions/github-script@v3.1.0
        with:
          script: |
            var artifacts = await github.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{github.event.workflow_run.id }},
            });
            var fs = require('fs');
            var i =0;
            for (matchMetadataArtifact of artifacts.data.artifacts) {
              if( matchMetadataArtifact.id == undefined || matchMetadataArtifact.id.length === 0){
                console.log(String(matchMetadataArtifact));
                continue;
              }
              var download = await github.actions.downloadArtifact({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            artifact_id: matchMetadataArtifact.id,
                            archive_format: 'zip',
                         });
              fs.writeFileSync('${{github.workspace}}/artifact' + i + '.zip', Buffer.from(download.data));
              console.log('Downloaded ' + matchMetadataArtifact.name + ' and placed it there ${{github.workspace}}/artifact' + i + '.zip');
              github.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: matchMetadataArtifact.id
              });
              console.log(String(matchMetadataArtifact.id));
              i=i+1
            }
      - name: Unzip
        run: |
          for zipped_archive in `ls -a1 *.zip`
          do
            unzip $zipped_archive
            rm $zipped_archive || true
          done
      - name: Save metadata
        id: save_metadata
        uses: actions/github-script@v3.1.0
        with:
          script: |
            var fs = require('fs');
            var issue_number = Number(fs.readFileSync('./pr_number'));
            console.log(String(issue_number))
            core.setOutput('issue_number',issue_number );
      - name: extract images
        id: extract_images
        run: |
          for IMAGES in `ls -a1 *.gz`
          do
            gzip -d $IMAGES
            rm $IMAGES || true
          done
          ls -R
      - name: Tag and push nms docker images to registry
        if: always() && steps.extract_images.outcome=='success'
        env:
          DOCKER_REGISTRY: "orc8r-ci.artifactory.magmacore.org"
          DOCKER_USERNAME: "${{ secrets.JFROG_USERNAME }}"
          DOCKER_PASSWORD: "${{ secrets.JFROG_PASSWORD }}"
          ISSUE_NUMBER: "${{ steps.save_metadata.outputs.issue_number }}"
        run: |
          docker image load --input magmalte.tar
          ./ci-scripts/tag-push-docker.sh --images 'magmalte' --tag "${ISSUE_NUMBER}" --tag-latest true --project magmalte
          rm magmalte.tar
      - name: Tag and push agw docker images to registry
        if: always() && steps.extract_images.outcome=='success'
        env:
          DOCKER_REGISTRY: "agw-ci.artifactory.magmacore.org"
          DOCKER_USERNAME: "${{ secrets.JFROG_USERNAME }}"
          DOCKER_PASSWORD: "${{ secrets.JFROG_PASSWORD }}"
          ISSUE_NUMBER: "${{ steps.save_metadata.outputs.issue_number }}"
        run: |
          docker image load --input ghz_gateway_c.tar
          docker image load --input ghz_gateway_python.tar
          docker image load --input agw_gateway_c.tar
          docker image load --input agw_gateway_python.tar
          ./ci-scripts/tag-push-docker.sh --images 'ghz_gateway_c|ghz_gateway_python|agw_gateway_c|agw_gateway_python' --tag "${ISSUE_NUMBER}" --tag-latest true
          rm ghz_gateway_c.tar ghz_gateway_python.tar agw_gateway_c.tar agw_gateway_python.tar
      - name: Tag and push orc8r docker images to registry
        if: always() && steps.extract_images.outcome=='success'
        env:
          DOCKER_REGISTRY: "orc8r-ci.artifactory.magmacore.org"
          DOCKER_USERNAME: "${{ secrets.JFROG_USERNAME }}"
          DOCKER_PASSWORD: "${{ secrets.JFROG_PASSWORD }}"
          ISSUE_NUMBER: "${{ steps.save_metadata.outputs.issue_number }}"
        run: |
          docker image load --input nginx.tar
          docker image load --input controller.tar
          ./ci-scripts/tag-push-docker.sh --images 'nginx|controller' --tag "${ISSUE_NUMBER}" --tag-latest true --project orc8r
          rm nginx.tar controller.tar
      - name: Tag and push cwf operator image
        if: always() && steps.extract_images.outcome=='success'
        env:
          DOCKER_REGISTRY: "orc8r-ci.artifactory.magmacore.org"
          DOCKER_USERNAME: "${{ secrets.JFROG_USERNAME }}"
          DOCKER_PASSWORD: "${{ secrets.JFROG_PASSWORD }}"
          ISSUE_NUMBER: "${{ steps.save_metadata.outputs.issue_number }}"
        run: |
          docker image load --input operator.tar
          ./ci-scripts/tag-push-docker.sh --images 'operator' --tag "${ISSUE_NUMBER}" --tag-latest true --project cwf
          rm operator.tar
      - name: Tag and push cwag docker images to Regitry
        if: always() && steps.extract_images.outcome=='success'
        env:
          DOCKER_REGISTRY: "cwf-ci.artifactory.magmacore.org"
          DOCKER_USERNAME: "${{ secrets.JFROG_USERNAME }}"
          DOCKER_PASSWORD: "${{ secrets.JFROG_PASSWORD }}"
          ISSUE_NUMBER: "${{ steps.save_metadata.outputs.issue_number }}"
        run: |
          docker image load --input cwag_go.tar
          docker image load --input gateway_go.tar
          docker image load --input gateway_python.tar
          docker image load --input gateway_sessiond.tar
          docker image load --input gateway_pipelined.tar
          ./ci-scripts/tag-push-docker.sh --images 'cwag_go|gateway_go|gateway_python|gateway_sessiond|gateway_pipelined' --tag "${ISSUE_NUMBER}" --tag-latest true --project cwf
          rm cwag_go.tar gateway_go.tar gateway_python.tar gateway_sessiond.tar gateway_pipelined.tar
      - name: Tag and push xwfm docker images
        if: always() && steps.extract_images.outcome=='success'
        env:
          DOCKER_REGISTRY: "orc8r-ci.artifactory.magmacore.org"
          DOCKER_USERNAME: "${{ secrets.JFROG_USERNAME }}"
          DOCKER_PASSWORD: "${{ secrets.JFROG_PASSWORD }}"
          ISSUE_NUMBER: "${{ steps.save_metadata.outputs.issue_number }}"
        run: |
          docker image load --input goradius.tar
          docker image load --input xwfm-integ-tests.tar
          ./ci-scripts/tag-push-docker.sh --images 'goradius|xwfm-integ-tests' --tag "${ISSUE_NUMBER}" --tag-latest true
          rm goradius.tar xwfm-integ-tests.tar
      - name: Tag and push feg docker images
        if: always() && steps.extract_images.outcome=='success'
        env:
          DOCKER_REGISTRY: "feg-ci.artifactory.magmacore.org"
          DOCKER_USERNAME: "${{ secrets.JFROG_USERNAME }}"
          DOCKER_PASSWORD: "${{ secrets.JFROG_PASSWORD }}"
          ISSUE_NUMBER: "${{ steps.save_metadata.outputs.issue_number }}"
        run: |
          docker image load --input feg_gateway_go.tar
          docker image load --input feg_gateway_python.tar
          ./ci-scripts/tag-push-docker.sh --images 'gateway_go|gateway_python' --tag "${ISSUE_NUMBER}" --tag-latest true --project feg
          rm feg_gateway_go.tar feg_gateway_python.tar
      - name: Push Helm charts and verify the push
        if: always() && steps.save_metadata.outcome=='success'
        env:
          HELM_CHART_MUSEUM_API_URL: "https://artifactory.magmacore.org:443/artifactory/api"
          HELM_CHART_MUSEUM_URL: "https://artifactory.magmacore.org:443/artifactory/helm-ci"
          HELM_CHART_MUSEUM_REPO: helm-test
          HELM_CHART_ARTIFACTORY_URL: "https://artifactory.magmacore.org:443/artifactory/"
          HELM_CHART_MUSEUM_USERNAME: "${{ secrets.HELM_CHART_MUSEUM_USERNAME }}"
          HELM_CHART_MUSEUM_TOKEN: "${{ secrets.HELM_CHART_MUSEUM_TOKEN }}"
        run: |
          for ARTIFACT_PATH in `ls -a1 *.tgz`
          do
            MD5_CHECKSUM="$(md5sum "$ARTIFACT_PATH" | awk '{print $1}')"
            SHA1_CHECKSUM="$(shasum -a 1 "$ARTIFACT_PATH" | awk '{ print $1 }')"
            SHA256_CHECKSUM="$(shasum -a 256 "$ARTIFACT_PATH" | awk '{ print $1 }')"
            curl --user "$HELM_CHART_MUSEUM_USERNAME":"$HELM_CHART_MUSEUM_TOKEN" --fail \
            --header "X-Checksum-MD5:${MD5_CHECKSUM}" \
            --header "X-Checksum-Sha1:${SHA1_CHECKSUM}" \
            --header "X-Checksum-Sha256:${SHA256_CHECKSUM}" \
            --upload-file "$ARTIFACT_PATH" "$HELM_CHART_MUSEUM_URL/$(basename "$ARTIFACT_PATH")"
          done
          curl --request POST --user "$HELM_CHART_MUSEUM_USERNAME":"$HELM_CHART_MUSEUM_TOKEN" \
                      "$HELM_CHART_MUSEUM_API_URL/helm/$HELM_CHART_MUSEUM_REPO/reindex"
          # Ensure push was successful
          helm repo add "$(basename "$HELM_CHART_MUSEUM_URL")" "$HELM_CHART_MUSEUM_URL" --username "$HELM_CHART_MUSEUM_USERNAME" --password "$HELM_CHART_MUSEUM_TOKEN"
          helm repo update

          # The Helm command returns 0 even when no results are found. Search for err str
          # instead
          HELM_SEARCH_RESULTS="$(helm search repo "$(basename "$HELM_CHART_MUSEUM_URL")")" # should list the uploaded charts
          if [ "$HELM_SEARCH_RESULTS" == "No results found" ]; then
            exitmsg "Error! Unable to find uploaded orc8r charts"
          fi
          # Only keep last 20 charts
          pip install artifactory
          python ci-scripts/helm_repo_rotation.py
