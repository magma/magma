# Copyright 2022 The Magma Authors.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Magma Build & Publish 3rd Party Dependencies
on:
  push:
    branches:
      - master
      - 'v1.*'
    paths:
      - third_party/**
      - .github/workflows/magma-build-3rd-party.yml
  pull_request:
    types: [ opened, reopened, synchronize ]
    branches:
      - master
      - 'v1.*'
    paths:
      - third_party/**
      - .github/workflows/magma-build-3rd-party.yml
  schedule:
    - cron: 0 4 * * 0
  workflow_dispatch:
    inputs:
      production:
        description: Is production build?
        type: boolean
        default: false
      repository:
        description: Repository to push to?
        type: choice
        default: debian-ci
        options: [ debian-ci, debian-test, debian-prod ]
        required: true
      distribution:
        description: Distribution to set?
        default: 'focal-ci'
        required: true

jobs:
  build_dependencies:
    runs-on: ubuntu-latest
    container: ghcr.io/magma/magma/devcontainer:latest
    env:
      repository: ${{ inputs.repository || 'debian-ci' }}
      distribution: ${{ inputs.distribution || 'focal-ci' }}

    strategy:
      fail-fast: false
      matrix:
        dependency:
          - aioeventlet
          - aioh2
          - asn1c
          - bcc
          - folly
          - freediameter
          - gnutls
          - grpc
          - libfluid
          - liblfds
          - magma-cpp-redis
          - magma-libtacopie
          - nettle
          - prometheus-cpp
          - ryu
          - sentry-native

    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # pin@v3.1.0

      - name: Build debian package
        working-directory: third_party/build
        run: ./build.py --no-install ${{ matrix.dependency }}

      - name: Test installability of the debian package built
        working-directory: third_party/build
        run: sudo apt-get install --yes --allow-downgrades ./*.deb

      - run: echo "repository=debian-test" >> $GITHUB_ENV
        if: github.ref == 'refs/heads/master' && github.event_name != 'workflow_dispatch'

      - run: |
          echo "You have chosen repository ${{ env.repository }} and 'is production' ${{ inputs.production }}."
          echo "ERROR: Production deployment is protected. Abort!"
          exit 1
        if: |
          env.repository == 'debian-prod' &&
          ! (
            inputs.production &&
            contains('["maxhbr", "nstng", "jheidbrink", "lkreutzer", "Neudrino", "MoritzThomasHuebner", "tmdzk", "wolfseb"]', github.actor)
          )

      - name: Setup JFrog CLI
        id: jfrog-setup
        # Workaround because secrets are available in `env` but not in `if`
        if: ${{ env.JF_USER != '' && env.JF_PASSWORD != '' }}
        uses: jfrog/setup-jfrog-cli@d0a59b1cdaeeb16e65b5039fc92b8507337f1559 # pin@v3
        env:
          JF_URL: https://artifactory.magmacore.org
          JF_USER: ${{ secrets.JFROG_USERNAME }}
          JF_PASSWORD: ${{ secrets.JFROG_PASSWORD }}

      - name: Publish debian package
        if: steps.jfrog-setup.conclusion == 'success' && github.event_name == 'workflow_dispatch'
        working-directory: third_party/build
        run: |
          name=$(ls *${{ matrix.dependency }}*.deb) && architecture=${${name%%.deb}##*_}
          jf rt upload \
            --recursive=false \
            --detailed-summary \
            --target-props="deb.component=main;deb.distribution=${{ matrix.distribution }};deb.architecture=${architecture}" \
            "(*${{ matrix.dependency }}*).deb" ${{ env.repository }}/${{ matrix.distribution }}/{1}.deb
