---
name: build-all

on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - master
      - 'v1.*'
  pull_request:
    branches:
      - master
      - 'v1.*'
    types: [opened, reopened, synchronize]

jobs:
  build_publish_helm_charts:
    if: github.repository_owner == 'magma'
    env:
      HELM_CHART_ARTIFACTORY_URL: "https://artifactory.magmacore.org:443/artifactory/"
      HELM_CHART_MUSEUM_REPO: helm-test
      HELM_CHART_MUSEUM_USERNAME: "${{ secrets.HELM_CHART_MUSEUM_USERNAME }}"
      HELM_CHART_MUSEUM_TOKEN: "${{ secrets.HELM_CHART_MUSEUM_TOKEN }}"
      MAGMA_ROOT: "${{ github.workspace }}"
      EVENT_NAME: "${{ github.event_name }}"
      ISSUE_NUMBER: "${{ github.event.number }}"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # Version is github job run number when running on master
      # Or is branch name when on release branch
      - name: Set Helm chart version
        run: |
          if [ "${GITHUB_REF##*/}" = "master" ] ;then
            echo "VERSION=${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
          elif [ "${EVENT_NAME}" = "pull_request" ]; then
            echo "VERSION=${ISSUE_NUMBER}" >> $GITHUB_ENV
          fi
      - name: Launch build and publish script
        run: |
          if [ "${GITHUB_REF##*/}" = "master" ] ;then
            orc8r/tools/helm/package.sh --deployment-type all --version $VERSION  --only-package
          elif [ "${EVENT_NAME}" = "pull_request" ] ;then
            mkdir charts
            orc8r/tools/helm/package.sh --deployment-type all --version $VERSION --only-package
          else
            orc8r/tools/helm/package.sh --deployment-type all
          fi
      - name: Upload charts as artifacts
        uses: actions/upload-artifact@v2
        if: github.event_name == 'pull_request'
        with:
          name: helm-charts
          path: charts
      # Need to save PR number as Github action does not propagate it with workflow_run event
      # Used as version for PR builds
      - name: Save PR number
        run: |
          mkdir -p ./pr
          echo ${{ github.event.number }} > ./pr/pr_number
          echo "false" > ./pr/skipped
      - uses: actions/upload-artifact@v2
        with:
          name: pr
          path: pr/
      - name: Extract commit title
        id: commit
        if: failure() && github.event_name == 'push'
        run: |
          str="$(jq '.head_commit.message' $GITHUB_EVENT_PATH)"    # get the head_commit message
          echo ::set-output name=title::${str%%\\n*} | tr -d '"'
      # Notify ci channel when failing
      # Plugin info: https://github.com/marketplace/actions/slack-notify
      - name: Notify failure to slack
        if: failure() && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_CI }}
          SLACK_TITLE: "Github action Push helm charts to artifactory failed"
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_USERNAME: "Build workflow"
          SLACK_ICON_EMOJI: ":boom:"
          SLACK_COLOR: "#FF0000"
          SLACK_FOOTER: ' '
      # Notify ci channel when push succeeds
      - name: Notify success to Slack
        if: success() && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL_ARTIFACTS }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_OSS }}
          SLACK_TITLE: "*Helm charts have been published*"
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_USERNAME: "Build workflow"
          SLACK_ICON_EMOJI: ":heavy_check_mark:"
          SLACK_COLOR: "#00FF00"
          SLACK_FOOTER: ' '
      - name: Only keep the last 20 uploaded versions
        if: github.event_name == 'push'
        run: |
          pip install artifactory
          python ci-scripts/helm_repo_rotation.py
  agw-build:
    if: github.event_name == 'push' && github.repository_owner == 'magma'
    runs-on: macos-10.15
    outputs:
      artifacts: ${{ steps.publish_packages.outputs.artifacts }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Cache magma dev
        uses: actions/cache@v3
        with:
          path: ~/.vagrant.d/boxes/magmacore-VAGRANTSLASH-magma_dev
          key: vagrant-box-magma-dev
      - name: setup pyenv
        uses: "gabrielfalcao/pyenv-action@v8"
        with:
          default: 3.8.5
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8.5'
      - name: Install pre requisites
        run: |
          pip3 install --upgrade pip
          pip3 install ansible fabric3 jsonpickle requests PyYAML
          vagrant plugin install vagrant-vbguest vagrant-disksize vagrant-vbguest vagrant-mutate
      - name: Open up network interfaces for VM
        run: |
          sudo mkdir -p /etc/vbox/
          sudo touch /etc/vbox/networks.conf
          sudo sh -c "echo '* 192.168.0.0/16' > /etc/vbox/networks.conf"
      - name: Build AGW
        run: |
          cd lte/gateway
          fab release package:destroy_vm=True
          mkdir magma-packages
          vagrant ssh -c "cp -r magma-packages /vagrant"
      - name: Publish debian packages
        id: publish_packages
        if: github.event_name == 'push'
        run: |
          cd lte/gateway/magma-packages
          ARTIFACTS='{"packages":[],"valid":false}'
          PUBLISH_ERROR="false"
          for i in `ls -a1 *.deb`
          do
            echo "Pushing package $i to JFROG artifiactory: https://artifactory.magmacore.org/artifactory/debian-test/pool"
            HTTP_RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" -uci-bot:${{ secrets.JFROG_CIBOT_APIKEYS }} -XPUT "https://artifactory.magmacore.org/artifactory/debian-test/pool/focal-ci/$i;deb.distribution=focal-ci;deb.component=main;deb.architecture=amd64" -T $i)
            echo "$HTTP_RESPONSE"
            # extract the body and download uri
            HTTP_BODY=$(echo $HTTP_RESPONSE | sed -e 's/HTTPSTATUS\:.*//g')
            URI=$(echo $HTTP_BODY | jq -r '.uri')
            if [[ "$URI" != "null" ]]; then
              ARTIFACTS=$(echo $ARTIFACTS | jq --arg uri $URI '.packages += [$uri]')
            else
              PUBLISH_ERROR="true"
            fi
            # extract and check status
            HTTP_STATUS=$(echo $HTTP_RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
            if [[ "$HTTP_STATUS" != "2"* ]]; then
              PUBLISH_ERROR="true"
            fi
          done
          # set output
          if [[ "$PUBLISH_ERROR" != "true" ]]; then
            ARTIFACTS=$(echo $ARTIFACTS | jq '. += {"valid":true}')
          fi
          echo "::set-output name=artifacts::$(echo $ARTIFACTS)"
      - uses: actions/upload-artifact@v2
        if: github.event_name == 'pull_request'
        with:
          name: magma-packages
          path: lte/gateway/magma-packages/*.deb
      - uses: actions/upload-artifact@v2
        name: Export sentry executables
        if: github.event_name == 'push'
        with:
          name: sentry-exec
          path: lte/gateway/magma-packages
      - name: Extract commit title
        # yamllint enable
        if: github.event_name == 'push'
        id: commit
        run: |
          str="$(jq '.head_commit.message' $GITHUB_EVENT_PATH)"    # get the head_commit message
          echo ::set-output name=title::${str%%\\n*} | tr -d '"'
      - name: Notify failure to slack
        if: failure() && github.event_name == 'push'
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: "Github action agw build failed"
          SLACK_AVATAR: ":boom:"
        uses: Ilshidur/action-slack@2.1.0
        with:
          args: "AGW  build failed on [${{github.sha}}](${{github.event.repository.owner.html_url}}/magma/commit/${{github.sha}}): ${{ steps.commit.outputs.title}}"
      # Notify ci channel when push succeeds
      - name: Notify success to Slack
        if: success() && github.event_name == 'push'
        env:
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL_ARTIFACTS }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_OSS }}
          SLACK_USERNAME: "Github action agw build got published"
        uses: Ilshidur/action-slack@2.1.0
        with:
          args: "AGW  build succeeded on [${{github.sha}}](${{github.event.repository.owner.html_url}}/magma/commit/${{github.sha}}): ${{ steps.commit.outputs.title}}"
  sentry_release:
    if: always() && github.event_name == 'push'
    needs: [agw-build]
    env:
      MAGMA_ROOT: "${{ github.workspace }}"
      SENTRY_ENVIRONMENT: "staging"
      SENTRY_ORG: "lf-9c"
      PATH_TO_EXEC: "./executables"
      MAGMA_VERSION: ${{ needs.agw-build.outputs.magma_version }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v2
        with:
          name: sentry-exec
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: sentry-exec
      - run: ls -R
      - run: curl -sL https://sentry.io/get-cli/ | bash
      - uses: ./.github/workflows/composite/sentry-create-and-upload-artifacts
        with:
          EXECUTABLE_NAME: sessiond
          SENTRY_ORG: lf-9c
          PATH_TO_EXEC: "./executables"
          SENTRY_AUTH_TOKEN: "${{ secrets.SENTRY_AUTH_TOKEN }}"
      - uses: ./.github/workflows/composite/sentry-create-and-upload-artifacts
        with:
          EXECUTABLE_NAME: mme
          SENTRY_ORG: lf-9c
          PATH_TO_EXEC: "./executables"
          SENTRY_AUTH_TOKEN: "${{ secrets.SENTRY_AUTH_TOKEN }}"
      - uses: ./.github/workflows/composite/sentry-create-and-upload-artifacts
        with:
          EXECUTABLE_NAME: sctpd
          SENTRY_ORG: lf-9c
          PATH_TO_EXEC: "./executables"
          SENTRY_AUTH_TOKEN: "${{ secrets.SENTRY_AUTH_TOKEN }}"
      - uses: ./.github/workflows/composite/sentry-create-and-upload-artifacts
        with:
          EXECUTABLE_NAME: connectiond
          SENTRY_ORG: lf-9c
          PATH_TO_EXEC: "./executables"
          SENTRY_AUTH_TOKEN: "${{ secrets.SENTRY_AUTH_TOKEN }}"
      - uses: ./.github/workflows/composite/sentry-create-and-upload-artifacts
        with:
          EXECUTABLE_NAME: liagentd
          SENTRY_ORG: lf-9c
          PATH_TO_EXEC: "./executables"
          SENTRY_AUTH_TOKEN: "${{ secrets.SENTRY_AUTH_TOKEN }}"
      - name: Create a release in Sentry.io with the commit hash
        env:
          SENTRY_AUTH_TOKEN: "${{ secrets.SENTRY_AUTH_TOKEN }}"
        run: |
           COMMIT_HASH_WITH_VERSION="magma@1.7.0.$(git rev-list --count HEAD)-${GITHUB_SHA:0:8}"
           sentry-cli --log-level=info releases new -p lab-agws-python -p lab-agws-native -p magma-staging-native ${COMMIT_HASH_WITH_VERSION}
           sentry-cli --log-level=info releases set-commits --auto --ignore-missing ${COMMIT_HASH_WITH_VERSION}
           sentry-cli --log-level=info releases finalize ${COMMIT_HASH_WITH_VERSION}
  orc8r-build:
    if: github.repository_owner == 'magma'
    name: orc8r build job
    runs-on: ubuntu-latest
    outputs:
      artifacts: ${{ steps.publish_artifacts.outputs.artifacts }}
    env:
      MAGMA_ROOT: "${{ github.workspace }}"
    steps:
      - uses: actions/checkout@v2
      - name: Run apt-get update
        run: sudo apt-get update
      - uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - name: Run build.py
        run: |
          cd ${MAGMA_ROOT}/orc8r/cloud/docker
          python3 build.py --all --nocache --parallel
      - name: Export docker images to deploy them
        if: github.event_name == 'pull_request'
        run: |
          mkdir images
          cd images
          docker save orc8r_nginx | gzip > nginx.tar.gz
          docker save orc8r_controller  | gzip > controller.tar.gz
      - uses: actions/upload-artifact@v2
        if: github.event_name == 'pull_request'
        with:
          name: docker-images-orc8r
          path: images
      - name: Create release Tag
        if: github.event_name == 'push'
        run: |
          if [ "$GITHUB_REF" = "refs/heads/master" ]; then
            echo TAG="${GITHUB_SHA:0:8}" >> $GITHUB_ENV
          else
            GIT_BRANCH_VERSION=${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}}
            echo TAG="${GIT_BRANCH_VERSION:1}" >> $GITHUB_ENV
          fi
      - name: Tag and push to Jfrog Registry
        id: publish_artifacts
        if: github.event_name == 'push'
        env:
          DOCKER_REGISTRY: "orc8r-test.artifactory.magmacore.org"
          DOCKER_USERNAME: "${{ secrets.JFROG_USERNAME }}"
          DOCKER_PASSWORD: "${{ secrets.JFROG_PASSWORD }}"
        run: |
          ./ci-scripts/tag-push-docker.sh --images 'nginx|controller' --tag "${TAG}" --tag-latest true --project orc8r
          ARTIFACTS="{\"packages\":[\"$DOCKER_REGISTRY/nginx:${TAG}\", \"$DOCKER_REGISTRY/controller:${TAG}\"],\"valid\":true}"
          echo "::set-output name=artifacts::$(echo $ARTIFACTS)"
      - name: Extract commit title
        if: github.event_name == 'push'
        id: commit
        run: |
          str="$(jq '.head_commit.message' $GITHUB_EVENT_PATH)"    # get the head_commit message
          echo ::set-output name=title::${str%%\\n*} | tr -d '"'
      - name: Notify failure to Slack
        if: failure() && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2.2.0
        # yamllint enable
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_TITLE: "Github action orc8r-build failed"
          SLACK_USERNAME: "Build workflow"
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_ICON_EMOJI: ":boom:"
          SLACK_COLOR: "#FF0000"
          SLACK_FOOTER: ' '
      # Notify ci channel when push succeeds
      - name: Notify success to Slack
        if: success() && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL_ARTIFACTS }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_OSS }}
          SLACK_TITLE: "*Orchestrator images have been published*"
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_USERNAME: "Build workflow"
          SLACK_ICON_EMOJI: ":heavy_check_mark:"
          SLACK_COLOR: "#00FF00"
          SLACK_FOOTER: ' '
  agw-container-build:
    if: github.repository_owner == 'magma'
    name: agw container build
    runs-on: ubuntu-latest
    env:
      MAGMA_ROOT: "${{ github.workspace }}"
      DOCKER_BUILDKIT: 1
    steps:
      - uses: actions/checkout@v2
      - name: Run agw docker compose
        id: agw-docker-compose
        continue-on-error: true
        # yamllint disable rule:line-length
        run: |
          cd ${MAGMA_ROOT}/lte/gateway/docker
          docker-compose --file docker-compose.yaml --file docker-compose.override.yaml build --parallel
      - name: Retry docker agw compose on failure
        id: retry-agw-docker-compose
        continue-on-error: true
        if: steps.agw-docker-compose.outcome=='failure'
        run: |
          cd ${MAGMA_ROOT}/lte/gateway/docker
          docker-compose --file docker-compose.yaml --file docker-compose.override.yaml build --parallel
      - name: Set the agw docker build status
        if: always()
        run: |
          if ${{ steps.agw-docker-compose.outcome=='success' || steps.retry-agw-docker-compose.outcome=='success' }}; then
             echo "AGW Docker compose completed successfully"
          else
             echo "Docker compose failed"
             exit 1
          fi
      - name: Run ghz docker compose
        id: ghz-docker-compose
        continue-on-error: true
        # yamllint disable rule:line-length
        run: |
          cd ${MAGMA_ROOT}/lte/gateway/docker/ghz
          docker-compose --file docker-compose.yaml --file docker-compose.override.yaml build --parallel
      - name: Retry ghz docker compose on failure
        id: retry-ghz-docker-compose
        continue-on-error: true
        if: steps.ghz-docker-compose.outcome=='failure'
        run: |
          cd ${MAGMA_ROOT}/lte/gateway/docker/ghz
          docker-compose --file docker-compose.yaml --file docker-compose.override.yaml build --parallel
      - name: Set the ghz docker build status
        if: always()
        run: |
          if ${{ steps.ghz-docker-compose.outcome=='success' || steps.retry-ghz-docker-compose.outcome=='success' }}; then
             echo "GHZ Docker compose completed successfully"
          else
             echo "Docker compose failed"
             exit 1
          fi
      - name: Export docker images to deploy them on pull_request
        if: github.event_name == 'pull_request'
        run: |
          mkdir images
          cd images
          docker save agw_gateway_c | gzip > agw_gateway_c.tar.gz
          docker save agw_gateway_python | gzip > agw_gateway_python.tar.gz
          docker save ghz_gateway_c | gzip > ghz_gateway_c.tar.gz
          docker save ghz_gateway_python | gzip > ghz_gateway_python.tar.gz
      - name: Upload docker images as artifacts
        uses: actions/upload-artifact@v2
        if: github.event_name == 'pull_request'
        with:
          name: docker-images-agw
          path: images
      # Need to save PR number as Github action does not propagate it with workflow_run event
      # Used as version for PR builds
      - name: Save PR number
        run: |
          mkdir -p ./pr
          echo ${{ github.event.number }} > ./pr/NR
      - uses: actions/upload-artifact@v2
        with:
          name: pr
          path: pr/
      - name: Create release Tag
        if: github.event_name == 'push'
        run: |
          if [ "$GITHUB_REF" = "refs/heads/master" ]; then
            echo TAG="${GITHUB_SHA:0:8}" >> $GITHUB_ENV
          else
            GIT_BRANCH_VERSION=${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}}
            echo TAG="${GIT_BRANCH_VERSION:1}" >> $GITHUB_ENV
          fi
      - name: Tag and push agw containers to Jfrog Registry
        id: publish_artifacts
        if: github.event_name == 'push'
        env:
          DOCKER_REGISTRY: "agw-test.artifactory.magmacore.org"
          DOCKER_USERNAME: "${{ secrets.JFROG_USERNAME }}"
          DOCKER_PASSWORD: "${{ secrets.JFROG_PASSWORD }}"
        run: |
          ./ci-scripts/tag-push-docker.sh --images 'ghz_gateway_c|ghz_gateway_python|agw_gateway_c|agw_gateway_python' --tag "${TAG}" --tag-latest true
  cloud-upload:
    name: cloud upload job
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.repository_owner == 'magma'
    steps:
      - uses: actions/checkout@v2
      - name: Install SwaggerHub CLI
        run: npm install --global swaggerhub-cli
      - name: Publish SwaggerHub API
        env:
          MAGMA_ROOT: "${{ github.workspace }}"
          SWAGGERHUB_API_KEY: "${{ secrets.SWAGGERHUB_API_KEY }}"
        run: |
          swaggerhub api:unpublish MagmaCore/Magma/1.0.0
          swaggerhub api:update MagmaCore/Magma/1.0.0 --file ${MAGMA_ROOT}/orc8r/cloud/go/services/obsidian/swagger/v1/swagger.yml --published=publish --visibility=public --setdefault
      - name: Extract commit title
        id: commit
        if: github.event_name == 'push'
        run: |
          str="$(jq '.head_commit.message' $GITHUB_EVENT_PATH)"    # get the head_commit message
          echo ::set-output name=title::${str%%\\n*} | tr -d '"'
      - name: Notify failure to Slack
        if: failure() && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_CI }}
          SLACK_TITLE: "Github action cloud-upload failed"
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_USERNAME: "Build workflow"
          SLACK_ICON_EMOJI: ":boom:"
          SLACK_COLOR: "#FF0000"
          SLACK_FOOTER: ' '
      # Notify ci channel when push succeeds
      - name: Notify success to Slack
        if: success() && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL_ARTIFACTS }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_OSS }}
          SLACK_TITLE: "*SwaggerHub Updated*"
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_USERNAME: "Build workflow"
          SLACK_ICON_EMOJI: ":heavy_check_mark:"
          SLACK_COLOR: "#00FF00"
          SLACK_FOOTER: ' '
  cwag-deploy:
    if: github.repository_owner == 'magma'
    name: cwag deploy job
    runs-on: ubuntu-latest
    outputs:
      artifacts: ${{ steps.publish_artifacts.outputs.artifacts }}
    env:
      MAGMA_ROOT: "${{ github.workspace }}"
    steps:
      - uses: actions/checkout@v2
      - name: Run docker compose
        id: cwag-docker-compose
        continue-on-error: true
        # yamllint disable rule:line-length
        env:
          DOCKER_REGISTRY: cwf_
        run: |
          cd ${MAGMA_ROOT}/cwf/gateway/docker
          docker-compose --file docker-compose.yml --file docker-compose.override.yml build --parallel
      - name: Retry docker compose on failure
        id: retry-cwag-docker-compose
        continue-on-error: true
        if: steps.cwag-docker-compose.outcome=='failure'
        env:
          DOCKER_REGISTRY: cwf_
        run: |
          cd ${MAGMA_ROOT}/cwf/gateway/docker
          docker-compose --file docker-compose.yml --file docker-compose.override.yml build --parallel
      - name: Set the job status
        if: always()
        run: |
          if ${{ steps.cwag-docker-compose.outcome=='success' || steps.retry-cwag-docker-compose.outcome=='success' }}; then
             echo "Docker compose completed successfully"
          else
             echo "Docker compose failed"
             exit 1
          fi
      - name: Build xwf go radius
        run: |
          cd ${MAGMA_ROOT}/
          docker build --build-arg BUILD_NUM=${TAG} --tag goradius -f feg/radius/src/Dockerfile ./
      - name: Load openvswitch kernel module for xwf integ test
        # yamllint enable
        run: sudo modprobe openvswitch
      - name: Build xwfm-integ-tests
        run: |
          cd ${MAGMA_ROOT}
          docker build --tag xwfm-integ-tests -f xwf/gateway/integ_tests/gw/Dockerfile ./
      - name: Export docker images to deploy them on pull_request
        if: github.event_name == 'pull_request'
        run: |
          mkdir images
          cd images
          docker save cwf_cwag_go | gzip > cwag_go.tar.gz
          docker save cwf_gateway_go | gzip > gateway_go.tar.gz
          docker save cwf_gateway_sessiond | gzip > gateway_sessiond.tar.gz
          docker save cwf_gateway_python | gzip > gateway_python.tar.gz
          docker save cwf_gateway_pipelined | gzip > gateway_pipelined.tar.gz
          docker save goradius | gzip > goradius.tar.gz
          docker save xwfm-integ-tests | gzip > xwfm-integ-tests.tar.gz
      - name: Upload docker images as artifacts
        uses: actions/upload-artifact@v2
        if: github.event_name == 'pull_request'
        with:
          name: docker-images-cwag
          path: images
      # Need to save PR number as Github action does not propagate it with workflow_run event
      # Used as version for PR builds
      - name: Save PR number
        run: |
          mkdir -p ./pr
          echo ${{ github.event.number }} > ./pr/pr_number
      - uses: actions/upload-artifact@v2
        with:
          name: pr
          path: pr/
      - name: Create release Tag
        if: github.event_name == 'push'
        run: |
          if [ "$GITHUB_REF" = "refs/heads/master" ]; then
            echo TAG="${GITHUB_SHA:0:8}" >> $GITHUB_ENV
          else
            GIT_BRANCH_VERSION=${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}}
            echo TAG="${GIT_BRANCH_VERSION:1}" >> $GITHUB_ENV
          fi
      - name: Tag and push to Jfrog Registry
        id: publish_artifacts
        if: github.event_name == 'push'
        env:
          DOCKER_REGISTRY: "cwf-test.artifactory.magmacore.org"
          DOCKER_USERNAME: "${{ secrets.JFROG_USERNAME }}"
          DOCKER_PASSWORD: "${{ secrets.JFROG_PASSWORD }}"
        run: |
          ./ci-scripts/tag-push-docker.sh --images 'cwag_go|gateway_go|gateway_python|gateway_sessiond|gateway_pipelined' --tag "${TAG}" --tag-latest true --project cwf
          ARTIFACTS="{\"packages\":[\"$DOCKER_REGISTRY/cwag_go:${TAG}\", \"$DOCKER_REGISTRY/gateway_go:${TAG}\", \"$DOCKER_REGISTRY/gateway_python:${TAG}\", \"$DOCKER_REGISTRY/gateway_sessiond:${TAG}\",\"$DOCKER_REGISTRY/gateway_pipelined:${TAG}\"],\"valid\":true}"
          echo "::set-output name=artifacts::$(echo $ARTIFACTS)"
      - name: Tag and push to Docker Registry goradius
        if: github.event_name == 'push'
        env:
          DOCKER_REGISTRY: "${{ secrets.DOCKER_REGISTRY }}"
          DOCKER_USERNAME: "${{ secrets.DOCKER_USERNAME }}"
          DOCKER_PASSWORD: "${{ secrets.DOCKER_PASSWORD }}"
        # yamllint disable rule:line-length
        run: |
          ./ci-scripts/tag-push-docker.sh --images 'goradius' --tag "${TAG}" --tag-latest true
      - name: Tag and push to Docker Registry xwfm-integ-tests
        if: github.event_name == 'push'
        env:
          DOCKER_REGISTRY: "${{ secrets.DOCKER_REGISTRY }}"
          DOCKER_USERNAME: "${{ secrets.DOCKER_USERNAME }}"
          DOCKER_PASSWORD: "${{ secrets.DOCKER_PASSWORD }}"
        # yamllint disable rule:line-length
        run: |
          ./ci-scripts/tag-push-docker.sh --images 'xwfm-integ-tests' --tag "${TAG}" --tag-latest true
      - name: Extract commit title
        id: commit
        if: github.event_name == 'push'
        run: |
          str="$(jq '.head_commit.message' $GITHUB_EVENT_PATH)"    # get the head_commit message
          echo ::set-output name=title::${str%%\\n*} | tr -d '"'
      # Notify ci channel when failing
      # Plugin info: https://github.com/marketplace/actions/slack-notify
      # yamllint enable
      - name: Notify failure to slack
        if: failure() && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_CI }}
          SLACK_TITLE: "CWAG/xwfm-deploy failed"
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_USERNAME: "Build workflow"
          SLACK_ICON_EMOJI: ":boom:"
          SLACK_COLOR: "#FF0000"
          SLACK_FOOTER: ' '
      # Notify ci channel when push succeeds
      - name: Notify success to slack
        if: success() && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL_ARTIFACTS }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_OSS }}
          SLACK_TITLE: "*CWAG/xwfm Artifact Has Been Published*"
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_USERNAME: "Build workflow"
          SLACK_ICON_EMOJI: ":heavy_check_mark:"
          SLACK_COLOR: "#00FF00"
          SLACK_FOOTER: ' '
  cwf-operator-build:
    if: github.repository_owner == 'magma'
    name: cwf operator build job
    runs-on: ubuntu-latest
    env:
      MAGMA_ROOT: "${{ github.workspace }}"
    steps:
      - uses: actions/checkout@v2
      - name: Run docker compose build
        env:
          DOCKER_REGISTRY: cwf_
        run: |
          cd ${MAGMA_ROOT}/cwf/k8s/cwf_operator/docker
          DOCKER_REGISTRY=cwf_ docker-compose build --parallel
      - name: Export docker images to deploy them on pull_request
        if: github.event_name == 'pull_request'
        run: |
          mkdir images
          cd images
          docker save cwf_operator | gzip > operator.tar.gz
      - name: Upload docker images as artifacts
        uses: actions/upload-artifact@v2
        if: github.event_name == 'pull_request'
        with:
          name: docker-images-cwf
          path: images
      # Need to save PR number as Github action does not propagate it with workflow_run event
      # Used as version for PR builds
      - name: Save PR number
        run: |
          mkdir -p ./pr
          echo ${{ github.event.number }} > ./pr/pr_number
      - uses: actions/upload-artifact@v2
        with:
          name: pr
          path: pr/
      - name: Create release Tag
        if: github.event_name == 'push'
        run: |
          if [ "$GITHUB_REF" = "refs/heads/master" ]; then
            echo TAG="${GITHUB_SHA:0:8}" >> $GITHUB_ENV
          else
            GIT_BRANCH_VERSION=${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}}
            echo TAG="${GIT_BRANCH_VERSION:1}" >> $GITHUB_ENV
          fi
      - name: Tag and push to Jfrog Registry
        id: publish_artifacts
        if: github.event_name == 'push'
        env:
          DOCKER_REGISTRY: "cwf-test.artifactory.magmacore.org"
          DOCKER_USERNAME: "${{ secrets.JFROG_USERNAME }}"
          DOCKER_PASSWORD: "${{ secrets.JFROG_PASSWORD }}"
        run: |
          ./ci-scripts/tag-push-docker.sh --images 'operator' --tag "${TAG}" --tag-latest true --project cwf
      - name: Extract commit title
        id: commit
        if: github.event_name == 'push'
        run: |
          str="$(jq '.head_commit.message' $GITHUB_EVENT_PATH)"    # get the head_commit message
          echo ::set-output name=title::${str%%\\n*} | tr -d '"'
      # Notify ci channel when failing
      # Plugin info: https://github.com/marketplace/actions/slack-notify
      # yamllint enable
      - name: Notify failure to slack
        if: failure() && github.ref == 'refs/heads/master'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_CI }}
          SLACK_TITLE: "CWF-operator-build failed"
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_USERNAME: "Build workflow"
          SLACK_ICON_EMOJI: ":boom:"
          SLACK_COLOR: "#FF0000"
          SLACK_FOOTER: ''
      # Notify ci channel when push succeeds
      - name: Notify success to slack
        if: success() && github.ref == 'refs/heads/master'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL_ARTIFACTS }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_OSS }}
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_TITLE: "*CWF Artifact Has Been Published*"
          SLACK_USERNAME: "Build workflow"
          SLACK_ICON_EMOJI: ":heavy_check_mark:"
          SLACK_COLOR: "#00FF00"
          SLACK_FOOTER: ''
  feg-build:
    if: github.repository_owner == 'magma'
    name: feg-build
    runs-on: ubuntu-latest
    outputs:
      artifacts: ${{ steps.publish_artifacts.outputs.artifacts }}
    env:
      MAGMA_ROOT: "${{ github.workspace }}"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - name: generate test certs and snowflake
        run: |
          # TODO add rootCA.pem and snowflake files in the ubuntu-1604:201903-01 image
          # create directories
          cd ${MAGMA_ROOT} && mkdir -p .cache/test_certs/ && mkdir -p .cache/feg/
          # create test certs
          cd ${MAGMA_ROOT}/.cache/test_certs/
          openssl genrsa -out rootCA.key 2048
          openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 365000 -out rootCA.pem -subj "/C=US/CN=rootca.magma.test"
          # create snowflake
          cd ${MAGMA_ROOT}/.cache/feg/ && touch snowflake
      - name: Build docker images
        env:
          DOCKER_REGISTRY: feg_
        run: |
          cd ${MAGMA_ROOT}/feg/gateway/docker
          python3 build.py
      - name: run docker containers and check health
        env:
          DOCKER_REGISTRY: feg_
        run: |
          cd ${MAGMA_ROOT}/feg/gateway/docker
          python3 build.py -e
      - name: Export docker images to deploy them on pull_request
        if: github.event_name == 'pull_request'
        run: |
          mkdir images
          cd images
          docker save feg_gateway_go | gzip > feg_gateway_go.tar.gz
          docker save feg_gateway_python | gzip > feg_gateway_python.tar.gz
      - name: Upload docker images as artifacts
        uses: actions/upload-artifact@v2
        if: github.event_name == 'pull_request'
        with:
          name: docker-images-feg
          path: images
      - name: Create release Tag
        run: |
          if [ "$GITHUB_REF" = "refs/heads/master" ]; then
            echo TAG="${GITHUB_SHA:0:8}" >> $GITHUB_ENV
          else
            GIT_BRANCH_VERSION=${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}}
            echo TAG="${GIT_BRANCH_VERSION:1}" >> $GITHUB_ENV
          fi
      - name: Tag and push to Jfrog Registry
        id: publish_artifacts
        if: github.event_name == 'push'
        env:
          DOCKER_REGISTRY: "feg-test.artifactory.magmacore.org"
          DOCKER_USERNAME: "${{ secrets.JFROG_USERNAME }}"
          DOCKER_PASSWORD: "${{ secrets.JFROG_PASSWORD }}"
        run: |
          ./ci-scripts/tag-push-docker.sh --images 'gateway_go|gateway_python' --tag "${TAG}" --tag-latest true --project feg
          ARTIFACTS="{\"packages\":[\"$DOCKER_REGISTRY/gateway_go:${TAG}\", \"$DOCKER_REGISTRY/gateway_python:${TAG}\"],\"valid\":true}"
          echo "::set-output name=artifacts::$(echo $ARTIFACTS)"
      - name: Extract commit title
        if: github.event_name == 'push'
        id: commit
        run: |
          str="$(jq '.head_commit.message' $GITHUB_EVENT_PATH)"    # get the head_commit message
          echo ::set-output name=title::${str%%\\n*} | tr -d '"'
      # Notify ci channel when failing
      # Plugin info: https://github.com/marketplace/actions/slack-notify
      # yamllint enable
      - name: Notify failure to slack
        if: failure() && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_CI }}
          SLACK_TITLE: "FeG-precommit tests failed"
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_USERNAME: "Build workflow"
          SLACK_ICON_EMOJI: ":boom:"
          SLACK_COLOR: "#FF0000"
          SLACK_FOOTER: ' '
      # Notify ci channel when push succeeds
      - name: Notify success to slack
        if: success() && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL_ARTIFACTS }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_OSS }}
          SLACK_TITLE: "*FeG Artifact Has Been Published*"
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_USERNAME: "Build workflow"
          SLACK_ICON_EMOJI: ":heavy_check_mark:"
          SLACK_COLOR: "#00FF00"
          SLACK_FOOTER: ' '
  nms-build:
    if: github.repository_owner == 'magma'
    name: nms-build job
    runs-on: ubuntu-latest
    outputs:
      artifacts: ${{ steps.publish_artifacts.outputs.artifacts }}
    env:
      MAGMA_ROOT: "${{ github.workspace }}"
      NMS_ROOT: "${{ github.workspace }}/nms"
    steps:
      - uses: actions/checkout@v2
      - name: Run docker compose
        id: nms-docker-compose
        # yamllint disable rule:line-length
        run: |
          cd ${MAGMA_ROOT}/nms
          COMPOSE_PROJECT_NAME=magmalte docker-compose build magmalte
      - name: Export docker images to deploy them on pull_request
        if: github.event_name == 'pull_request'
        run: |
          mkdir images
          cd images
          docker save magmalte_magmalte | gzip > magmalte.tar.gz
      - name: Upload docker images as artifacts
        uses: actions/upload-artifact@v2
        if: github.event_name == 'pull_request'
        with:
          name: docker-images-nms
          path: images
      - name: Create release Tag
        if: github.event_name == 'push'
        run: |
          if [ "$GITHUB_REF" = "refs/heads/master" ]; then
            echo TAG="${GITHUB_SHA:0:8}" >> $GITHUB_ENV
          else
            GIT_BRANCH_VERSION=${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}}
            echo TAG="${GIT_BRANCH_VERSION:1}" >> $GITHUB_ENV
          fi
      - name: Tag and push to Jfrog Registry
        id: publish_artifacts
        if: github.event_name == 'push'
        env:
          DOCKER_REGISTRY: "orc8r-test.artifactory.magmacore.org"
          DOCKER_USERNAME: "${{ secrets.JFROG_USERNAME }}"
          DOCKER_PASSWORD: "${{ secrets.JFROG_PASSWORD }}"
        run: |
          ./ci-scripts/tag-push-docker.sh --images 'magmalte' --tag "${TAG}" --tag-latest true --project magmalte
          ARTIFACTS="{\"packages\":[\"$DOCKER_REGISTRY/magmalte:${TAG}\"],\"valid\":true}"
          echo "::set-output name=artifacts::$(echo $ARTIFACTS)"
      - name: Extract commit title
        id: commit
        if: github.event_name == 'push'
        run: |
          str="$(jq '.head_commit.message' $GITHUB_EVENT_PATH)"    # get the head_commit message
          echo ::set-output name=title::${str%%\\n*} | tr -d '"'
      # Notify ci channel when failing
      # Plugin info: https://github.com/marketplace/actions/slack-notify
      # yamllint enable
      - name: Notify failure to slack
        if: failure() && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_TITLE: "Github action nms-build failed"
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_USERNAME: "Build workflow"
          SLACK_ICON_EMOJI: ":boom:"
          SLACK_COLOR: "#FF0000"
          SLACK_FOOTER: ' '
      # Notify ci channel when push succeeds
      - name: Notify success to slack
        if: success() && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL_ARTIFACTS }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_OSS }}
          SLACK_TITLE: "NMS Artifact Has Been Published*"
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_USERNAME: "Build workflow"
          SLACK_ICON_EMOJI: ":heavy_check_mark:"
          SLACK_COLOR: "#00FF00"
          SLACK_FOOTER: ' '
  Publish_to_firebase:
    name: Publish to firebase
    if: always() && github.event_name == 'push' && github.repository_owner == 'magma'
    runs-on: ubuntu-latest
    needs: [agw-build, feg-build, orc8r-build, cwag-deploy, nms-build]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - name: Publish to
        env:
          FIREBASE_CONFIG: ${{ secrets.FIREBASE_CONFIG }}
          WORKERS: "wl_lab_5g"  # all workers for post-merge pipeline. Comma separated
          BUILD_ID: "${{ github.sha }}"
          BUILD_METADATA: '{"github:workflow": "${{ github.workflow }}", "github:run_id": "${{ github.run_id }}", "github:actor": "${{ github.actor }}", "github:repository": "${{ github.repository }}", "github:event_name": "${{ github.event_name }}", "github:sha": "${{ github.sha }}", "github:sha:url": "${{github.event.repository.owner.html_url}}/magma/commit/${{github.sha}}", "github:ref": "${{ github.ref }}"}'
          AGW_ARTIFACTS: ${{ needs.agw-build.outputs.artifacts }}
          FEG_ARTIFACTS: ${{ needs.feg-build.outputs.artifacts }}
          ORC8R_ARTIFACTS: ${{ needs.orc8r-build.outputs.artifacts }}
          CWAG_ARTIFACTS: ${{ needs.cwag-deploy.outputs.artifacts }}
          NMS_ARTIFACTS: ${{ needs.nms-build.outputs.artifacts }}
        run: |
          python -m pip install --upgrade pip
          pip install Pyrebase
          python ci-scripts/firebase_publish.py
  domain-proxy-build:
    if: github.repository_owner == 'magma'
    name: domain proxy build job
    runs-on: ubuntu-latest
    outputs:
      artifacts: ${{ steps.publish_artifacts.outputs.artifacts }}
    env:
      MAGMA_ROOT: "${{ github.workspace }}"
    steps:
      - uses: actions/checkout@v2
      - name: Prepare tools
        working-directory: "${{ github.workspace }}/dp"
        run: |
          make _install_skaffold_ci
      - name: Create release Tag
        if: github.event_name == 'push'
        run: |
          if [ "$GITHUB_REF" = "refs/heads/master" ]; then
            echo TAG="${GITHUB_SHA:0:8}" >> $GITHUB_ENV
          else
            GIT_BRANCH_VERSION=${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}}
            echo TAG="${GIT_BRANCH_VERSION:1}" >> $GITHUB_ENV
          fi
      - name: Tag and push to Jfrog Registry
        if: github.event_name == 'push'
        working-directory: "${{ github.workspace }}/dp"
        env:
          DOCKER_REGISTRY: "orc8r-test.artifactory.magmacore.org"
          DOCKER_USERNAME: "${{ secrets.JFROG_USERNAME }}"
          DOCKER_PASSWORD: "${{ secrets.JFROG_PASSWORD }}"
        run: |
          docker login "${DOCKER_REGISTRY}" -u "${DOCKER_USERNAME}" -p "${DOCKER_PASSWORD}"
          skaffold build --default-repo="${DOCKER_REGISTRY}" --tag="${TAG}" --push --profile=remote-push
      - name: Extract commit title
        if: github.event_name == 'push'
        id: commit
        run: |
          str="$(jq '.head_commit.message' $GITHUB_EVENT_PATH)"    # get the head_commit message
          echo ::set-output name=title::${str%%\\n*} | tr -d '"'
      - name: Notify failure to Slack
        if: failure() && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2.2.0
        # yamllint enable
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_TITLE: "Github action domain-proxy-build failed"
          SLACK_USERNAME: "Build workflow"
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_ICON_EMOJI: ":boom:"
          SLACK_COLOR: "#FF0000"
          SLACK_FOOTER: ' '
      # Notify ci channel when push succeeds
      - name: Notify success to Slack
        if: success() && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL_ARTIFACTS }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_OSS }}
          SLACK_TITLE: "*Domain proxy images have been published*"
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_USERNAME: "Build workflow"
          SLACK_ICON_EMOJI: ":heavy_check_mark:"
          SLACK_COLOR: "#00FF00"
          SLACK_FOOTER: ' '
