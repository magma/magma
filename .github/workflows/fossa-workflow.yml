# Copyright 2022 The Magma Authors.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Orc8r Analyze With Fossa

on:
  push:
    branches:
      - master
      - 'v1.*'
  pull_request:
    branches:
      - master
      - 'v1.*'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  fossa-analyze:
    env:
      MAGMA_ROOT: "${{ github.workspace }}"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # pin@v3.1.0
      - name: Download fossa analyze script
        # yamllint disable rule:line-length
        run: |
          echo "Downloading CLI"
          mkdir -p /tmp/magma && cd /tmp/magma
          wget https://github.com/fossas/fossa-cli/releases/download/v1.0.11/fossa-cli_1.0.11_linux_amd64.tar.gz
          bash -c 'sha256sum fossa-cli_1.0.11_linux_amd64.tar.gz | grep -q 0e20286630a9bc5a17408c81e6ba9003f91a14fdd680b96ca4def400693e028e'
          rm -f /tmp/magma/fossa
          tar xzf fossa-cli_1.0.11_linux_amd64.tar.gz
          sudo cp /tmp/magma/fossa /usr/local/bin/
        # yamllint enable
      - name: Run fossa analyze script
        run: |
          echo "Running fossa-analyze-go.sh"
          sudo ${MAGMA_ROOT}/.github/workflows/scripts/fossa-analyze-go.sh
      - name: Extract commit title
        id: commit
        if: failure() && github.event_name == 'push'
        run: |
          str="$(jq '.head_commit.message' $GITHUB_EVENT_PATH)"    # get the head_commit message
          echo ::set-output name=title::${str%%\\n*} | tr -d '"'
      - name: "Set Slack channel #ci as default"
        run: echo "webhook=${{ secrets.SLACK_WEBHOOK }}" >> $GITHUB_ENV
      - name: "Set Slack channel #ci-info for failures"
        run: echo "webhook=${{ secrets.SLACK_WEBHOOK_CI }}" >> $GITHUB_ENV
        if: failure()
      - name: "Set Slack channel #ci-artifacts for successes"
        run: echo "webhook=${{ secrets.SLACK_WEBHOOK_OSS }}" >> $GITHUB_ENV
        if: success()
      - name: Notify Slack of job status
        uses: ./.github/workflows/composite/notify-slack
        with:
          webhook: ${{ env.webhook }}
          status: ${{ job.status }}
          message: ${{ github.event.head_commit.message || github.event.pull_request.title }}
