---
name: amis-workflow

on:  # yamllint disable-line rule:truthy
  workflow_dispatch:
  schedule:
    - cron: "0 2 * * 0"

env:
  MAGMA_VERSION: "1.7.0"

jobs:
  publish-amis-to-marketplace:
    name: publish-amis-to-marketplace job
    runs-on: ubuntu-latest
    env:
      MAGMA_ROOT: "${{ github.workspace }}"
      CODE_DIR: "${{ github.workspace }}/experimental/cloudstrapper"
      VARS_DIR: "${{ github.workspace }}/experimental/cloudstrapper/playbooks/roles/vars"
      WORK_DIR: "${{ github.workspace }}/experimental/cloudstrapper/playbooks"
    steps:
      - uses: actions/checkout@v2
      - name: Run apt
        run: sudo apt-get update && sudo apt -y upgrade
      - name: setup pyenv
        uses: "gabrielfalcao/pyenv-action@v8"
        with:
          default: 3.7.0
      - uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - name: Install Dependencies
        run: |
            pip install ansible awscli boto3
            sudo apt-get update
      - name: Determine AWS credentials to use
        run: |
            if ${{ github.event_name == 'workflow_dispatch' }}; then
              echo AWS_ACCOUNT="LF" >> $GITHUB_ENV
              echo BASE_REFERENCE=${{ github.base_ref }} >> $GITHUB_ENV
            elif ${{ github.event_name == 'schedule' }}; then
              echo AWS_ACCOUNT="FB" >> $GITHUB_ENV
              echo BASE_REFERENCE="master" >> $GITHUB_ENV
            fi
      - name: Propagate AWS credentials to ansible and create version
        run: |
            if [ "${{ env.AWS_ACCOUNT }}" = "FB" ]; then
              sed -i -e "s@awsAccessKey:@& ${{ secrets.FB_AWS_ACCESS_KEY }}@1"  ${{ env.VARS_DIR }}/secrets.yaml
              sed -i -e "s@awsSecretKey:@& ${{ secrets.FB_AWS_SECRET_ACCESS_KEY }}@1"  ${{ env.VARS_DIR }}/secrets.yaml
              echo VERSION="${{ env.MAGMA_VERSION }}-${{ github.sha }}" >> $GITHUB_ENV
              echo PACKAGE_VERSION="${{ env.MAGMA_VERSION }}" >> $GITHUB_ENV
              # When focal-ci is clean we will be able to dynamically fetch latest ci debian packages
            elif  [ "${{ env.AWS_ACCOUNT }}" = "LF" ]; then
              sed -i -e "s@awsAccessKey:@& ${{ secrets.LF_AWS_ACCESS_KEY }}@1"  ${{ env.VARS_DIR }}/secrets.yaml
              sed -i -e "s@awsSecretKey:@& ${{ secrets.LF_AWS_SECRET_ACCESS_KEY }}@1"  ${{ env.VARS_DIR }}/secrets.yaml
              GIT_BRANCH_VERSION=${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}}
              echo PACKAGE_VERSION="${GIT_BRANCH_VERSION:1}" >> $GITHUB_ENV
              echo VERSION="${GIT_BRANCH_VERSION:1}" >> $GITHUB_ENV
            fi
            echo PACKAGE_REPO_HOST="artifactory.magmacore.org\\\/artifactory\\\/debian" >> $GITHUB_ENV
            echo GIT_REF="${{ github.sha }}" >> $GITHUB_ENV
      - name: Propagate AWS region information
        run: |
            sed -i -e '/^awsAgwRegion: /s/:.*$/: us-east-1/' ${{ env.VARS_DIR }}/cluster.yaml
            sed -i -e '/^awsOrc8rRegion: /s/:.*$/: us-east-1/' ${{ env.VARS_DIR }}/cluster.yaml
            sed -i -e '/^awsAgwAz: /s/:.*$/: us-east-1b/' ${{ env.VARS_DIR }}/cluster.yaml
            sed -i -e '/^buildAwsRegion: /s/:.*$/: us-east-1/' ${{ env.VARS_DIR }}/build.yaml
            sed -i -e '/^buildAwsAz: /s/:.*$/: us-east-1b/' ${{ env.VARS_DIR }}/build.yaml
      - name: Propagate names for AWS essential components
        run: |
            sed -i -e '/^secgroupDefault: /s/:.*$/: publish-amis-to-marketplace-secgroup/' ${{ env.VARS_DIR }}/defaults.yaml
            sed -i -e '/^bucketDefault: /s/:.*$/: publish-amis-to-marketplace-bucket2/' ${{ env.VARS_DIR }}/defaults.yaml
            sed -i -e '/^stackEssentialsDefault: /s/:.*$/: publish-amis-to-marketplace-stack/' ${{ env.VARS_DIR }}/defaults.yaml
            sed -i -e '/^keyBoot: /s/:.*$/: publish-amis-to-marketplace-keyboot/' ${{ env.VARS_DIR }}/defaults.yaml
            sed -i -e '/^keyHost: /s/:.*$/: publish-amis-to-marketplace-keyhost/' ${{ env.VARS_DIR }}/defaults.yaml
      - name: Setup AWS essentials components
        run: |
            ansible-playbook ${{ env.WORK_DIR }}/aws-prerequisites.yaml -e "dirLocalInventory=${{ env.VARS_DIR }}" --tags keyCreate,essentialsCreate
      - name: Propagate Tags for Cloudstrapper instances
        run: |
            sed -i -e '/^devOpsCloudstrapper: /s/:.*$/: publishAmisToMarketplaceDevopsCloudstrapper/' ${{ env.VARS_DIR }}/defaults.yaml
            sed -i -e '/^primaryCloudstrapper: /s/:.*$/: publishAmisToMarketplacePrimaryCloudstrapper/' ${{ env.VARS_DIR }}/defaults.yaml
            sed -i -e '/^stackDevOpsCloudstrapper: /s/:.*$/: publish-amis-to-marketplace-stack-devopscloustrapper/' ${{ env.VARS_DIR }}/defaults.yaml
            sed -i -e '/^stackCloudstrapper: /s/:.*$/: publish-amis-to-marketplace-stack-cloustrapper/' ${{ env.VARS_DIR }}/defaults.yaml
            sed -i -e '/^devOpsAmi: /s/:.*$/: cloudstrapper-'"$VERSION"'/' ${{ env.VARS_DIR }}/defaults.yaml
            sed -i -e '/^buildUbuntuAmi: /s/:.*$/: ami-09e67e426f25ce0d7/' ${{ env.VARS_DIR }}/build.yaml
            sed -i -e '/^buildAgwVersion: /s/:.*$/: '"$GIT_REF"'/' ${{ env.VARS_DIR }}/build.yaml
            sed -i -e '/^buildAgwPackage: /s/:.*$/: '"$PACKAGE_VERSION"'/' ${{ env.VARS_DIR }}/build.yaml
            sed -i -e '/^taggedVersion: /s/:.*$/: '"$VERSION"'/' ${{ env.VARS_DIR }}/build.yaml
      - name: Generate Cloudstrapper AMI
        timeout-minutes: 120
        run: |
            echo "DEFAULTS"
            cat ${{ env.VARS_DIR }}/defaults.yaml
            echo "BUILD"
            cat ${{ env.VARS_DIR }}/build.yaml
            echo "CLUSTER"
            cat ${{ env.VARS_DIR }}/cluster.yaml
            ansible-playbook ${{ env.WORK_DIR }}/devops-provision.yaml -e "dirLocalInventory=${{ env.VARS_DIR }}"
            echo "Waiting one minute for the instance to boot up."
            sleep 60
            ansible-playbook ${{ env.WORK_DIR }}/devops-configure.yaml -e "devops=tag_Name_publishAmisToMarketplaceDevopsCloudstrapper" -e "dirLocalInventory=${{ env.VARS_DIR }}" -i ${{ env.VARS_DIR }}/common_instance_aws_ec2.yaml -u ubuntu --skip-tags usingGitSshKey,buildMagma,pubMagma,helm,pubHelm
            ansible-playbook ${{ env.WORK_DIR }}/devops-init.yaml -e "dirLocalInventory=${{ env.VARS_DIR }}"
      - name: Notify success to Slack
        if: success() && github.ref == 'refs/heads/master'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL_ARTIFACTS }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_OSS }}
          SLACK_TITLE: "*Cloudstrapper AWS AMI artifacts have been published*"
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_USERNAME: "Cloud workflow"
          SLACK_ICON_EMOJI: ":heavy_check_mark:"
          SLACK_COLOR: "#00FF00"
          SLACK_FOOTER: ' '
      - name: Propagate variables for AGW AMI build
        run: |
            sed -i -e '/^buildAgwAmiName: /s/:.*$/: agw-ami-'"$VERSION"'/' ${{ env.VARS_DIR }}/build.yaml
            sed -i -e '/^buildGwTagName: /s/:.*$/: publishAmisToMarketplaceAgw/' ${{ env.VARS_DIR }}/build.yaml
            sed -i -e '/^packageRepoHost: /s/:.*$/: '"${{ env.PACKAGE_REPO_HOST }}"'/' ${{ env.VARS_DIR }}/build.yaml
            sed -i -e '/^awsAgwAmi: /s/:.*$/: ami-09e67e426f25ce0d7/' ${{ env.VARS_DIR }}/cluster.yaml
            # TODO Overwriting the previous buildAgwVersion to the current branch
            sed -i -e '/^buildAgwVersion: /s/:.*$/: '"refs\/heads\/${{ env.BASE_REFERENCE }}"'/' ${{ env.VARS_DIR }}/build.yaml
      - name: Generate AGW AMI
        timeout-minutes: 30
        run: |
            ansible-playbook ${{ env.WORK_DIR }}/agw-provision.yaml -e "idSite=DevOps" -e "idGw=publishAmisToMarketplaceAgw" -e "dirLocalInventory=${{ env.VARS_DIR }}" --tags infra,inventory  -e "agwDevops=1" --skip-tags createBridge,cleanupBridge,cleanupNet
            echo "Waiting one minute for the instance to boot up."
            sleep 60
            ansible-playbook ${{ env.WORK_DIR }}/ami-configure.yaml -i "${{ env.VARS_DIR }}/common_instance_aws_ec2.yaml" -e "dirLocalInventory=${{ env.VARS_DIR }}" -e "aminode=tag_Name_publishAmisToMarketplaceAgw" -e "ansible_python_interpreter=/usr/bin/python3" -u ubuntu
            ansible-playbook ${{ env.WORK_DIR }}/ami-init.yaml -e "dirLocalInventory=${{ env.VARS_DIR }}"
      - name: Export qcow2 image for fb aws account in s3
        timeout-minutes: 30
        run: |
            if [ "${{ env.AWS_ACCOUNT }}" = "FB" ]; then
              ansible-playbook ${{ env.WORK_DIR }}/devops-convert-to-qcow2.yaml -e "dirLocalInventory=${{ env.VARS_DIR }}" -e "agwAmiName=agw-ami-$VERSION"
            fi
      - name: Clean AWS resources
        if: always()
        run: |
            ansible-playbook ${{ env.WORK_DIR }}/cleanup.yaml -e "dirLocalInventory=${{ env.VARS_DIR }}" --tags agw,subnet,secgroup,vpc,keys --skip-tags orc8r  -e "{"deleteStacks": [stackDevOpspublishAmisToMarketplaceAgw, publish-amis-to-marketplace-stack-devopscloustrapper, publish-amis-to-marketplace-stack, stackDevOpsNetwork]}"
      - name: Notify success to Slack
        if: success() && github.ref == 'refs/heads/master'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL_ARTIFACTS }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_OSS }}
          SLACK_TITLE: "*AGW AWS AMI artifacts have been published*"
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_USERNAME: "Cloud workflow"
          SLACK_ICON_EMOJI: ":heavy_check_mark:"
          SLACK_COLOR: "#00FF00"
          SLACK_FOOTER: ' '
  publish-docker-ami:
    name: publish-docker-ami
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch'
    env:
      MAGMA_ROOT: "${{ github.workspace }}"
      CODE_DIR: "${{ github.workspace }}/experimental/cloudstrapper"
      VARS_DIR: "${{ github.workspace }}/experimental/cloudstrapper/playbooks/roles/vars"
      WORK_DIR: "${{ github.workspace }}/experimental/cloudstrapper/playbooks"
      SHA: "${{ github.sha }}"
    steps:
      - uses: actions/checkout@v2
      - name: Run apt
        run: sudo apt-get update && sudo apt -y upgrade
      - name: setup pyenv
        uses: "gabrielfalcao/pyenv-action@v8"
        with:
          default: 3.7.0
      - uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - name: Install Dependencies
        run: |
          pip install ansible awscli boto3 boto
          sudo apt-get update
      - name: Export AWS Credentials
        run: |
          sed -i -e "s@awsAccessKey:@& ${{ secrets.FB_AWS_ACCESS_KEY }}@1"  ${{ env.VARS_DIR }}/secrets.yaml
          sed -i -e "s@awsSecretKey:@& ${{ secrets.FB_AWS_SECRET_ACCESS_KEY }}@1"  ${{ env.VARS_DIR }}/secrets.yaml
      - name: Launch ec2 instance
        run: |
          ansible-playbook ${{ env.WORK_DIR }}/docker-ami-provision.yaml -e "dirLocalInventory=${{ env.VARS_DIR }}"  -e "tag_host=dockerami"   -e "awsAgwRegion=us-east-1"
          sleep 400s
          ls -R ${{ env.VARS_DIR }}
      - name: Install needed components on the remote host
        env:
          ANSIBLE_HOST_KEY_CHECKING: false
        run: |
          ansible-playbook ${{ env.WORK_DIR }}/docker-ami-configure.yaml --key-file "${{ env.VARS_DIR }}/dockerAMI.pem" -e "buildMagmaVersion=${{env.SHA}}" -e "dirLocalInventory=${{ env.VARS_DIR }}" -e "dockerHost=tag_agw_dockerami" -e "awsAgwRegion=us-east-1"  -i ${{ env.VARS_DIR }}/common_instance_aws_ec2.yaml -u ubuntu
      - name: Snapshot the instance
        run: |
          ansible-playbook ${{ env.WORK_DIR }}/docker-ami-init.yaml -e "dirLocalInventory=${{ env.VARS_DIR }}"  -e "awsAgwRegion=us-east-1"  -e "tag_host=dockerami" -e "taggedVersion=${{ env.MAGMA_VERSION }}-${SHA:0:8}" -vv
      - name: Terminate instance
        if: always()
        run: |
          ansible-playbook ${{ env.WORK_DIR }}/docker-cleanup.yaml -e "dirLocalInventory=${{ env.VARS_DIR }}"  -e "tag_host=dockerami"  -e "awsAgwRegion=us-east-1"
