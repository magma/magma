---
name: cwag-workflow

on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - master
      - v1.*
  pull_request:
    branches:
      - master
      - v1.*
    types: [opened, reopened, synchronize]

jobs:
  path_filter:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      should_not_skip: ${{ steps.changes.outputs.filesChanged }}
    steps:
      # Need to get git on push event
      - uses: actions/checkout@v2
        if: github.event_name == 'push'
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            filesChanged:
              - [".github/workflows/cwag-workflow.yml", "orc8r/**", "lte/**", "feg/**", "cwf/**"]
      # Need to save metadata for deploy from PR job
      - name: Save PR number and trigger type
        run: |
          mkdir -p ./pr
          echo ${{ github.event.number }} > ./pr/NR
          echo ${{ !steps.changes.outputs.filesChanged }} > ./pr/skipped
      - name: upload metadata
        uses: actions/upload-artifact@v2
        with:
          name: pr
          path: pr/
  cwag-precommit:
    needs: path_filter
    if: ${{ needs.path_filter.outputs.should_not_skip == 'true' }}
    name: cwag pre-commit job
    runs-on: ubuntu-latest
    env:
      GO111MODULE: on  # yamllint disable-line rule:truthy
      MAGMA_ROOT: "${{ github.workspace }}"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.15.7'
      - name: Run golang_before_install.sh script
        run: ./circleci/golang_before_install.sh
      - name: Run go mod download with retry
        uses: nick-invision/retry@v2
        with:
          command: cd ${MAGMA_ROOT}/cwf/gateway && go mod download
          timeout_minutes: 10
      - name: Run precommit
        run: |
            cd ${MAGMA_ROOT}/cwf/gateway
            make -C ${MAGMA_ROOT}/cwf/gateway precommit
            cd ${MAGMA_ROOT}/cwf/gateway
            make -C ${MAGMA_ROOT}/cwf/gateway/integ_tests precommit
      - name: Extract commit title
        if: failure() && github.event_name == 'push'
        id: commit
        run: |
          str="$(jq '.head_commit.message' $GITHUB_EVENT_PATH)"    # get the head_commit message
          echo ::set-output name=title::${str%%\\n*} | tr -d '"'
      # Notify ci channel when failing
      # Plugin info: https://github.com/marketplace/actions/slack-notify
      - name: Notify failure to slack
        if: failure() && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_CI }}
          SLACK_TITLE: "CWAG-precommit tests failed"
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_USERNAME: "CWAG workflow"
          SLACK_ICON_EMOJI: ":boom:"
          SLACK_COLOR: "#FF0000"
          SLACK_FOOTER: ' '
  cwag-build:
    needs: path_filter
    if: ${{ needs.path_filter.outputs.should_not_skip == 'true' || github.event_name == 'push' }}
    name: cwag build job
    runs-on: ubuntu-latest
    env:
      MAGMA_ROOT: "${{ github.workspace }}"
    steps:
      - uses: actions/checkout@v2
      - name: Run docker compose
        id: cwag-build-docker-compose
        continue-on-error: true
        # yamllint disable rule:line-length
        env:
          DOCKER_REGISTRY: cwf_
        run: |
          cd ${MAGMA_ROOT}/cwf/gateway/docker
          docker-compose build --parallel
      - name: Retry docker compose on failure
        id: retry-cwag-build-docker-compose
        continue-on-error: true
        if: steps.cwag-docker-compose.outcome=='failure'
        env:
          DOCKER_REGISTRY: cwf_
        run: |
          cd ${MAGMA_ROOT}/cwf/gateway/docker
          docker-compose build --parallel
      - name: Set the job status
        if: always()
        run: |
          if ${{ steps.cwag-build-docker-compose.outcome=='success' || steps.retry-cwag-build-docker-compose.outcome=='success' }}; then
             echo "Docker compose completed successfully"
          else
             echo "Docker compose failed"
             exit 1
          fi
        # TODO bring up the containers and check for crashloops
  cwag-deploy:
    needs:
      - path_filter
      - cwag-precommit
    if: ${{ needs.path_filter.outputs.should_not_skip == 'true' }}
    name: cwag deploy job
      # TODO Should also need cwf-integ-test
      # TODO Requires release hold
    runs-on: ubuntu-latest
    env:
      MAGMA_ROOT: "${{ github.workspace }}"
    steps:
      - uses: actions/checkout@v2
      - name: Run docker compose
        id: cwag-docker-compose
        continue-on-error: true
        # yamllint disable rule:line-length
        env:
          DOCKER_REGISTRY: cwf_
        run: |
          cd ${MAGMA_ROOT}/cwf/gateway/docker
          docker-compose --file docker-compose.yml --file docker-compose.override.yml build --parallel
      - name: Retry docker compose on failure
        id: retry-cwag-docker-compose
        continue-on-error: true
        if: steps.cwag-docker-compose.outcome=='failure'
        env:
          DOCKER_REGISTRY: cwf_
        run: |
          cd ${MAGMA_ROOT}/cwf/gateway/docker
          docker-compose --file docker-compose.yml --file docker-compose.override.yml build --parallel
      - name: Set the job status
        if: always()
        run: |
          if ${{ steps.cwag-docker-compose.outcome=='success' || steps.retry-cwag-docker-compose.outcome=='success' }}; then
             echo "Docker compose completed successfully"
          else
             echo "Docker compose failed"
             exit 1
          fi
      - name: Build xwf go radius
        run: |
          cd ${MAGMA_ROOT}/feg
          docker build --build-arg BUILD_NUM=${GITHUB_SHA:0:8} --tag goradius -f radius/src/Dockerfile ./
      - name: Load openvswitch kernel module for xwf integ test
        # yamllint enable
        run: sudo modprobe openvswitch
      - name: Build xwfm-integ-tests
        run: |
          cd ${MAGMA_ROOT}
          docker build --tag xwfm-integ-tests -f xwf/gateway/integ_tests/gw/Dockerfile ./
      - name: Export docker images to deploy them on pull_request
        if: github.event_name == 'pull_request'
        run: |
          mkdir images
          cd images
          docker save cwf_cwag_go | gzip > cwag_go.tar.gz
          docker save cwf_gateway_go | gzip > gateway_go.tar.gz
          docker save cwf_gateway_sessiond | gzip > gateway_sessiond.tar.gz
          docker save cwf_gateway_python | gzip > gateway_python.tar.gz
          docker save cwf_gateway_pipelined | gzip > gateway_pipelined.tar.gz
          docker save goradius | gzip > goradius.tar.gz
          docker save xwfm-integ-tests | gzip > xwfm-integ-tests.tar.gz
      - name: Upload docker images as artifacts
        uses: actions/upload-artifact@v2
        if: github.event_name == 'pull_request'
        with:
          name: docker-images
          path: images
      # Need to save PR number as Github action does not propagate it with workflow_run event
      # Used as version for PR builds
      - name: Save PR number
        run: |
          mkdir -p ./pr
          echo ${{ github.event.number }} > ./pr/NR
      - uses: actions/upload-artifact@v2
        with:
          name: pr
          path: pr/
      - name: Tag and push to Docker Registry
        if: github.event_name == 'push'
        env:
          DOCKER_REGISTRY: "${{ secrets.DOCKER_REGISTRY }}"
          DOCKER_USERNAME: "${{ secrets.DOCKER_USERNAME }}"
          DOCKER_PASSWORD: "${{ secrets.DOCKER_PASSWORD }}"
        run: |
            ./ci-scripts/tag-push-docker.sh --images 'cwag_go|gateway_go|gateway_python|gateway_sessiond|gateway_pipelined' --tag "${GITHUB_SHA:0:8}" --tag-latest true --project cwf
      - name: Tag and push to Jfrog Registry
        if: github.event_name == 'push'
        env:
          DOCKER_REGISTRY: "cwf-test.artifactory.magmacore.org"
          DOCKER_USERNAME: "${{ secrets.JFROG_USERNAME }}"
          DOCKER_PASSWORD: "${{ secrets.JFROG_PASSWORD }}"
        run: |
            ./ci-scripts/tag-push-docker.sh --images 'cwag_go|gateway_go|gateway_python|gateway_sessiond|gateway_pipelined' --tag "${GITHUB_SHA:0:8}" --tag-latest true --project cwf
      - name: Tag and push to Docker Registry goradius
        if: github.event_name == 'push'
        # yamllint disable rule:line-length
        run: |
          ./ci-scripts/tag-push-docker.sh --images 'goradius' --tag "${GITHUB_SHA:0:8}" --tag-latest true
      - name: Tag and push to Docker Registry xwfm-integ-tests
        if: github.event_name == 'push'
        # yamllint disable rule:line-length
        run: |
          ./ci-scripts/tag-push-docker.sh --images 'xwfm-integ-tests' --tag "${GITHUB_SHA:0:8}" --tag-latest true
      - name: Extract commit title
        id: commit
        if: github.event_name == 'push'
        run: |
          str="$(jq '.head_commit.message' $GITHUB_EVENT_PATH)"    # get the head_commit message
          echo ::set-output name=title::${str%%\\n*} | tr -d '"'
      # Notify ci channel when failing
      # Plugin info: https://github.com/marketplace/actions/slack-notify
      # yamllint enable
      - name: Notify failure to slack
        if: failure() && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_CI }}
          SLACK_TITLE: "CWAG/xwfm-deploy failed"
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_USERNAME: "CWAG workflow"
          SLACK_ICON_EMOJI: ":boom:"
          SLACK_COLOR: "#FF0000"
          SLACK_FOOTER: ' '
      # Notify ci channel when push succeeds
      - name: Notify success to slack
        if: success() && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL_ARTIFACTS }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_OSS }}
          SLACK_TITLE: "*CWAG/xwfm Artifact Has Been Published*"
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_USERNAME: "CWAG workflow"
          SLACK_ICON_EMOJI: ":heavy_check_mark:"
          SLACK_COLOR: "#00FF00"
          SLACK_FOOTER: ' '
