# Copyright 2022 The Magma Authors.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# owner: @magma/approvers-infra
# purpose: Centralized workflow to add a comment on a PR based on results of other workflows
# remediation: -

name: PR Generate Comment On Workflow Failure
on:
  workflow_run:
    workflows:
      - PR Check DCO
      - AGW Build & Format Python
      - Docs Lint & Check Generated Files In Sync
    types:
      - completed

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}-${{ github.event.workflow.name }}
  cancel-in-progress: true

jobs:
  skip_check:
    name: Job to check if the workflow ${{ github.event.workflow.name }} can be skipped
    runs-on: ubuntu-20.04
    if: github.event.workflow_run.event == 'pull_request' ||  github.event.workflow_run.event == 'pull_request_target'
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - name: 'Download artifact'
        uses: actions/github-script@d556feaca394842dc55e4734bf3bb9f685482fa0 # pin@v6.3.3
        with:
          script: |
            var artifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "pr"
            })[0];
            var download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/pr.zip', Buffer.from(download.data));
      - run: unzip pr.zip
      - name: Check if the workflow is skipped
        id: skip_check
        uses: actions/github-script@d556feaca394842dc55e4734bf3bb9f685482fa0 # pin@v6.3.3
        with:
          script: |
            var fs = require('fs');
            var skipFlag = fs.readFileSync('./skipped');
            var rprFlag = fs.readFileSync('./is_reverted_pr');
            if( (skipFlag == 'true') || (rprFlag == 'true') ) {
              core.setOutput('should_skip', 'true');
              //console.log("Skipping because should_skip=" + skipFlag);
            }
            else  {
              core.setOutput('should_skip', 'false');
              //console.log("NOT Skipping because should_skip=" + skipFlag);
            }
  comment_pr:
    name: Comment on PR for check ${{ github.event.workflow.name }}
    needs: skip_check
    runs-on: ubuntu-20.04
    if: needs.skip_check.outputs.should_skip == 'false'
    env:
      CHECK_GUIDELINE: "[Guide to the different CI checks and resolution guidelines](https://github.com/magma/magma/wiki/Contributing-Code#continuous-integration-ci--continuous-deployment-cd)"
      WORKFLOW_NAME: "${{ github.event.workflow.name }}"
      WORKFLOW_STATUS: "${{ github.event.workflow_run.conclusion }}"
    steps:
      # Retrieve PR number from triggering workflow artifacts
      - name: 'Download artifact'
        uses: actions/github-script@d556feaca394842dc55e4734bf3bb9f685482fa0 # pin@v6.3.3
        with:
          script: |
            var artifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "pr"
            })[0];
            var download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/pr.zip', Buffer.from(download.data));
      - run: unzip pr.zip
      - name: DCO comment message
        if: ${{ github.event.workflow.name == 'PR Check DCO' }}
        run: |
          echo "Oops! Looks like you failed the \`PR Check DCO\`. Be sure to sign all your commits.
          ### Howto
          - [Magma guidelines on signing commits](https://github.com/magma/magma/wiki/Contributing-Code#signed-off-commits)
          - [About the \`signoff\` feature](https://stackoverflow.com/questions/1962094/what-is-the-sign-off-feature-in-git-for)
          - [Howto: sign-off most-recent commit](https://stackoverflow.com/questions/13043357#answer-15667644)
          - [Howto: sign-off multiple past commits](https://gist.github.com/kwk/d70f20d17b18c4f3296d)
          - $CHECK_GUIDELINE" >> $GITHUB_WORKSPACE/msg
      - name: Python format comment message
        if: ${{ github.event.workflow.name == 'AGW Build & Format Python' }}
        run: |
          echo "Oops! Looks like you failed the \`AGW Build & Format Python\`.
          ### Howto
          - Instructions on running the formatter and linter locally are provided in the [format AGW doc](https://magma.github.io/magma/docs/lte/dev_unit_testing#format-python)
          - $CHECK_GUIDELINE" >> $GITHUB_WORKSPACE/msg
      - name: Semantic PR comment message
        if: ${{ github.event.workflow.name == 'Semantic PR' }}
        run: |
          echo "Oops! Looks like you failed the \`Semantic PR check\`.
          ### Howto
          - [Instructions on formatting your PR title](https://github.com/magma/magma/wiki/Contributing-Code#pull-request-and-commit-message-title-are-following-conventional-commits-format)
          - For PRs with only one commit, the commit message must also be semantic. See [Changing a commit message](https://docs.github.com/en/github/committing-changes-to-your-project/creating-and-editing-commits/changing-a-commit-message) for a howto
          - $CHECK_GUIDELINE" >> $GITHUB_WORKSPACE/msg
      - name: Markdown lint comment message
        if: ${{ github.event.workflow.name == 'Docs Lint & Check Generated Files In Sync' }}
        run: |
          echo "Oops! Looks like you failed the \`Docs Lint & Check Generated Files In Sync\`.
          ### Howto
          - [Instructions on formatting your Markdown changes](https://github.com/magma/magma/wiki/Contributing-Documentation#precommit)
          - $CHECK_GUIDELINE" >> $GITHUB_WORKSPACE/msg
      - name: Comment on PR
        uses: actions/github-script@d556feaca394842dc55e4734bf3bb9f685482fa0 # pin@v6.3.3
        with:
          script: |
            var fs = require('fs');
            var isRevertedPR = fs.readFileSync('./is_reverted_pr');
            if( isRevertedPR == 'true' ) {
              console.log("PR is a reverted PR. So exiting gracefully...");
              process.exit(0);
            }
            var issue_number = Number(fs.readFileSync('./pr_number'));
            const msg = fs.readFileSync('./msg',{encoding: 'utf8'})

            var commentId = 0;
            var oldMsg = '';
            var updMsg = '';
            var newMsg = '';
            //var shortCommitId = process.env.COMMIT_ID.substr(0,8);;

            const commentsList = await github.rest.issues.listComments({
                                        owner: context.repo.owner,
                                        repo: context.repo.repo,
                                        issue_number: issue_number,
                                      });

            for (const c of commentsList['data']) {
              oldMsg = c.body;
              if( oldMsg.includes('Oops! Looks like you failed the `' + process.env.WORKFLOW_NAME) ) {
                  commentId = c.id;
                  if( process.env.WORKFLOW_STATUS == 'failure' )  {
                      updMsg = ":recycle: Updated: :x: The check is still failing the " + process.env.WORKFLOW_NAME + " after the last commit.";
                  }
                  else if( process.env.WORKFLOW_STATUS == 'success' ) {
                      updMsg = ":recycle: Updated: :white_check_mark: The check is passing the " + process.env.WORKFLOW_NAME + " after the last commit.";
                  }
                  newMsg = msg + "\n\n" + updMsg;
                  console.log("UPDATING comment=" + newMsg);
                  github.rest.issues.updateComment({
                                owner: context.repo.owner,
                                repo: context.repo.repo,
                                comment_id: commentId,
                                body: newMsg,
                              });
                  break;
              } // end of if block
            } // end of for loop on commentsList

            if( (commentId == 0) && (process.env.WORKFLOW_STATUS == 'failure') ) {
              console.log("CREATING comment=" + msg);
              github.rest.issues.createComment({
                            issue_number: issue_number,
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            body: msg,
                          });
            }
