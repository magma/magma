---
name: Golang Build & Test
on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - master
      - 'v1.*'
  pull_request:
    branches:
      - master
      - 'v1.*'
    types:
      - opened
      - reopened
      - synchronize

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

permissions: read-all

jobs:
  pre_job_src_go_determinator:
    runs-on: ubuntu-latest
    outputs:
      should_not_skip: ${{ steps.changes.outputs.filesChanged }}
    steps:
      # Need to get git on push event
      - uses: actions/checkout@v2
        if: github.event_name == 'push'
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            filesChanged:
              - [".github/workflows/golang-build-test.yml", "src/go/**"]
      - name: Save should_not_skip output
        if: always()
        run: |
          mkdir -p ./pr
          echo -n ${{ steps.changes.outputs.filesChanged == 'false' }} > ./pr/skipped
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: pr
          path: pr/

  build_src_go:
    needs: pre_job_src_go_determinator
    if: ${{ needs.pre_job_src_go_determinator.outputs.should_not_skip == 'true' }}
    strategy:
      matrix:
        go-version: [1.17.x]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Test
        run: |
          cd src/go/
          go build ./...
      - name: Extract commit title
        id: commit
        if: failure() && github.event_name == 'push'
        run: |
          str="$(jq '.head_commit.message' $GITHUB_EVENT_PATH)"    # get the head_commit message
          echo ::set-output name=title::${str%%\\n*} | tr -d '"'
      - name: Notify failure to slack
        if: failure() && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_CI }}
          SLACK_TITLE: "build_src_go tests failed"
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_USERNAME: "Feg workflow"
          SLACK_ICON_EMOJI: ":boom:"
          SLACK_COLOR: "#FF0000"
          SLACK_FOOTER: ' '

  test_src_go:
    needs: pre_job_src_go_determinator
    if: ${{ needs.pre_job_src_go_determinator.outputs.should_not_skip == 'true' }}
    strategy:
      matrix:
        go-version: [1.17.x]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - name: Setup gotestsum
        uses: autero1/action-gotestsum@v1.0.0
        with:
          gotestsum_version: 1.7.0
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Test
        run: |
          cd src/go/
          gotestsum --format=testname --junitfile test_src_go.xml -- -race ./...
      - name: Upload Test Results
        uses: actions/upload-artifact@v2
        with:
          name: Unit Test Results
          path: "${{ github.workspace }}/src/go/test_src_go.xml"
      - name: Extract commit title
        id: commit
        if: failure() && github.event_name == 'push'
        run: |
          str="$(jq '.head_commit.message' $GITHUB_EVENT_PATH)"    # get the head_commit message
          echo ::set-output name=title::${str%%\\n*} | tr -d '"'
      - name: Notify failure to slack
        if: failure() && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_CI }}
          SLACK_TITLE: "test_src_go tests failed"
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_USERNAME: "Feg workflow"
          SLACK_ICON_EMOJI: ":boom:"
          SLACK_COLOR: "#FF0000"
          SLACK_FOOTER: ' '

  test_src_go_qemu:
    needs: pre_job_src_go_determinator
    if: ${{ needs.pre_job_src_go_determinator.outputs.should_not_skip == 'true' }}
    strategy:
      matrix:
        go-version: [1.17.x]
        arch: [386, arm, arm64]
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - name: Install QEMU
        uses: docker/setup-qemu-action@v1
      - name: Setup gotestsum
        uses: autero1/action-gotestsum@v1.0.0
        with:
          gotestsum_version: 1.7.0
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Run tests via qemu/binfmt
        run: |
          cd src/go/
          gotestsum --format=testname --junitfile test_src_go.xml -- ./...
        env:
          GOARCH: ${{ matrix.arch }}
        # TODO: Upload this test result as a comment on PR
      - name: Upload Test Results
        uses: actions/upload-artifact@v2
        with:
          name: Unit Test Results arm64
          path: "${{ github.workspace }}/src/go/test_src_go.xml"
      - name: Extract commit title
        id: commit
        if: failure() && github.event_name == 'push'
        run: |
          str="$(jq '.head_commit.message' $GITHUB_EVENT_PATH)"    # get the head_commit message
          echo ::set-output name=title::${str%%\\n*} | tr -d '"'
      - name: Notify failure to slack
        if: failure() && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_CI }}
          SLACK_TITLE: "test_src_go_qemu tests failed"
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_USERNAME: "Feg workflow"
          SLACK_ICON_EMOJI: ":boom:"
          SLACK_COLOR: "#FF0000"
          SLACK_FOOTER: ' '


  codecov_src_go:
    needs: pre_job_src_go_determinator
    if: ${{ needs.pre_job_src_go_determinator.outputs.should_not_skip == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Test
        run: |
          cd src/go/
          go test -race -coverprofile=coverage.txt -covermode=atomic ./...
      - name: Codecov.io Upload
        uses: codecov/codecov-action@v2
        with:
          flags: src_go
          fail_ci_if_error: true
          verbose: true
      - name: Extract commit title
        id: commit
        if: failure() && github.event_name == 'push'
        run: |
          str="$(jq '.head_commit.message' $GITHUB_EVENT_PATH)"    # get the head_commit message
          echo ::set-output name=title::${str%%\\n*} | tr -d '"'
      - name: Notify failure to slack
        if: failure() && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_CI }}
          SLACK_TITLE: "codecov_src_go tests failed"
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_USERNAME: "Feg workflow"
          SLACK_ICON_EMOJI: ":boom:"
          SLACK_COLOR: "#FF0000"
          SLACK_FOOTER: ' '
