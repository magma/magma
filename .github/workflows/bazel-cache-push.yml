---
name: Push Bazel Cache To S3
on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - master
    paths:
      - .github/workflows/bazel-cache-push.yml
  schedule:
    # Run once a day at midnight
    - cron: '0 0 * * *'

env:
  BAZEL_CACHE: .bazel-cache
  BAZEL_CACHE_MAGMA_VM_TAR: bazel-cache-magma-vm.tar.gz
  BAZEL_CACHE_DEVCONTAINER_TAR: bazel-cache-devcontainer.tar.gz

  BAZEL_CACHE_REPO: .bazel-cache-repo
  BAZEL_CACHE_REPO_MAGMA_VM_TAR: bazel-cache-repo-magma-vm.tar.gz
  BAZEL_CACHE_REPO_DEVCONTAINER_TAR: bazel-cache-repo-devcontainer.tar.gz

  S3_BUCKET_PATH: s3://magma-cache

  DEVCONTAINER_IMAGE: "ghcr.io/magma/magma/devcontainer:latest"

jobs:
  bazel-build-magma-vm-and-push-cache:
    runs-on: macos-10.15
    steps:
      - run: echo "::set-output name=date::$(date +'%m-%d-%Y--%H-%M-%S')"
        id: date
      - uses: actions/checkout@v2
      - name: Cache magma dev
        uses: actions/cache@v3
        with:
          path: ~/.vagrant.d/boxes/magmacore-VAGRANTSLASH-magma_dev
          key: vagrant-box-magma-dev
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_AMI_BAZEL_CACHE_S3 }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_AMI_BAZEL_CACHE_S3 }}
          aws-region: us-east-1
      - name: setup pyenv
        uses: "gabrielfalcao/pyenv-action@v8"
        with:
          default: 3.8.5
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8.5'
      - name: Install pre requisites
        run: |
          pip3 install --upgrade pip
          pip3 install ansible jsonpickle requests PyYAML
          vagrant plugin install vagrant-vbguest vagrant-disksize
      - name: Open up network interfaces for VM
        run: |
          sudo mkdir -p /etc/vbox/
          sudo touch /etc/vbox/networks.conf
          sudo sh -c "echo '* 192.168.0.0/16' > /etc/vbox/networks.conf"
          sudo sh -c "echo '* 3001::/64' >> /etc/vbox/networks.conf"
      - name: Bring up the Magma VM
        run: |
          cd lte/gateway
          export MAGMA_DEV_CPUS=3
          export MAGMA_DEV_MEMORY_MB=9216
          vagrant up magma
      - name: Build all with production config `bazel build //... --config=production`
        run: |
          cd lte/gateway
          vagrant ssh -c 'cd ~/magma; bazel build --config=limit_mem //... --config=production' magma
      - name: Build all `bazel build //...`
        run: |
          cd lte/gateway
          vagrant ssh -c 'cd ~/magma; bazel build --config=limit_mem //...' magma
      - name: Test all `bazel test //...`
        run: |
          cd lte/gateway
          vagrant ssh -c 'cd ~/magma; bazel test --config=limit_mem //...' magma
      - name: Test C/C++ with ASAN `bazel test //orc8r/gateway/c/... //lte/gateway/c/... --config=asan`
        run: |
          cd lte/gateway
          vagrant ssh -c 'cd ~/magma; bazel test --config=limit_mem //orc8r/gateway/c/... //lte/gateway/c/... --config=asan' magma
      - name: Upload .bazel-cache and .bazel-cache-repo to S3
        run: |
          tar -zcvf ${{ env.BAZEL_CACHE_MAGMA_VM_TAR }} ${{ env.BAZEL_CACHE }}/
          tar -zcvf ${{ env.BAZEL_CACHE_REPO_MAGMA_VM_TAR }} ${{ env.BAZEL_CACHE_REPO }}/

          aws s3 cp ${{ env.BAZEL_CACHE_MAGMA_VM_TAR }} ${{ env.S3_BUCKET_PATH }}/${{ env.BAZEL_CACHE_MAGMA_VM_TAR}}
          aws s3 cp ${{ env.BAZEL_CACHE_REPO_MAGMA_VM_TAR }} ${{ env.S3_BUCKET_PATH }}/${{ env.BAZEL_CACHE_REPO_MAGMA_VM_TAR}}
      - name: Notify failure to slack
        if: failure() && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_BAZEL_CI }}
          SLACK_TITLE: "VM Caches"
          SLACK_USERNAME: "Push Bazel Cache To S3"
          SLACK_ICON_EMOJI: ":boom:"
          SLACK_COLOR: "#FF0000"
          SLACK_FOOTER: ' '
          MSG_MINIMAL: actions url,commit

  bazel-build-devcontainer-and-push-cache:
    runs-on: ubuntu-latest
    steps:
      - name: Maximize build space
        shell: bash
        run: |
          echo "Available storage before:"
          df -h
          echo "Removing /usr/share/dotnet, /usr/local/lib/android, /opt/ghc"
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          echo "Available storage after:"
          df -h
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_AMI_BAZEL_CACHE_S3 }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_AMI_BAZEL_CACHE_S3 }}
          aws-region: us-east-1
      - name: Build all `bazel build //...`
        uses: addnab/docker-run-action@v2
        with:
          image: ${{ env.DEVCONTAINER_IMAGE }}
          # TODO: Remove work-around mount of Github workspace to /magma (https://github.com/addnab/docker-run-action/issues/11)
          options: -v ${{ github.workspace }}:/workspaces/magma/ -v ${{ github.workspace }}/lte/gateway/configs:/etc/magma
          run: |
            cd /workspaces/magma
            bazel build //...
      - name: Test all  `bazel test //...`
        uses: addnab/docker-run-action@v2
        with:
          image: ${{ env.DEVCONTAINER_IMAGE }}
          # TODO: Remove work-around mount of Github workspace to /magma (https://github.com/addnab/docker-run-action/issues/11)
          options: -v ${{ github.workspace }}:/workspaces/magma/ -v ${{ github.workspace }}/lte/gateway/configs:/etc/magma
          run: |
            cd /workspaces/magma
            bazel test //...
      # TODO: It would be good to also populate cache for `bazel test //orc8r/gateway/c/... //lte/gateway/c/... --config=asan` GH12210
      - name: Upload .bazel-cache and .bazel-cache-repo to S3
        run: |
          tar -zcvf ${{ env.BAZEL_CACHE_DEVCONTAINER_TAR }} ${{ env.BAZEL_CACHE }}/
          tar -zcvf ${{ env.BAZEL_CACHE_REPO_DEVCONTAINER_TAR }} ${{ env.BAZEL_CACHE_REPO }}/

          aws s3 cp ${{ env.BAZEL_CACHE_DEVCONTAINER_TAR }} ${{ env.S3_BUCKET_PATH }}/${{ env.BAZEL_CACHE_DEVCONTAINER_TAR}}
          aws s3 cp ${{ env.BAZEL_CACHE_REPO_DEVCONTAINER_TAR }} ${{ env.S3_BUCKET_PATH }}/${{ env.BAZEL_CACHE_REPO_DEVCONTAINER_TAR}}
      - name: Build space left after run
        shell: bash
        run: |
          echo "Available storage:"
          df -h
      - name: Notify failure to slack
        if: failure() && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_BAZEL_CI }}
          SLACK_TITLE: "Devcontainer Caches"
          SLACK_USERNAME: "Push Bazel Cache To S3"
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_ICON_EMOJI: ":boom:"
          SLACK_COLOR: "#FF0000"
          SLACK_FOOTER: ' '
          MSG_MINIMAL: actions url,commit
