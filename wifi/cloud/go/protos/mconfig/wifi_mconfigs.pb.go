// Code generated by protoc-gen-go. DO NOT EDIT.
// source: wifi/protos/mconfig/wifi_mconfigs.proto

package mconfig

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//------------------------------------------------------------------------------
// Wifi configs
//------------------------------------------------------------------------------
type Hostapd struct {
	// SSID of the wifi network
	Ssid string `protobuf:"bytes,1,opt,name=ssid,proto3" json:"ssid,omitempty"`
	// Password of the network
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// Virtual Lighthouse SSID
	VlSsid string `protobuf:"bytes,3,opt,name=vl_ssid,json=vlSsid,proto3" json:"vl_ssid,omitempty"`
	// Virtual Lighthouse auth server params
	VlAuthServerAddr         string `protobuf:"bytes,4,opt,name=vl_auth_server_addr,json=vlAuthServerAddr,proto3" json:"vl_auth_server_addr,omitempty"`
	VlAuthServerPort         int32  `protobuf:"varint,5,opt,name=vl_auth_server_port,json=vlAuthServerPort,proto3" json:"vl_auth_server_port,omitempty"`
	VlAuthServerSharedSecret string `protobuf:"bytes,6,opt,name=vl_auth_server_shared_secret,json=vlAuthServerSharedSecret,proto3" json:"vl_auth_server_shared_secret,omitempty"`
	// disable wifi
	WifiDisabled bool `protobuf:"varint,7,opt,name=wifi_disabled,json=wifiDisabled,proto3" json:"wifi_disabled,omitempty"`
	// client channel
	ClientChannel string `protobuf:"bytes,8,opt,name=client_channel,json=clientChannel,proto3" json:"client_channel,omitempty"`
	// xwf info
	XwfEnabled bool `protobuf:"varint,9,opt,name=xwf_enabled,json=xwfEnabled,proto3" json:"xwf_enabled,omitempty"`
	// for streamer - should be left unused by gateway
	UseOverrideSsid      bool                        `protobuf:"varint,10,opt,name=use_override_ssid,json=useOverrideSsid,proto3" json:"use_override_ssid,omitempty"`
	BaseConfigs          *HostapdOverrideableConfigs `protobuf:"bytes,11,opt,name=base_configs,json=baseConfigs,proto3" json:"base_configs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Hostapd) Reset()         { *m = Hostapd{} }
func (m *Hostapd) String() string { return proto.CompactTextString(m) }
func (*Hostapd) ProtoMessage()    {}
func (*Hostapd) Descriptor() ([]byte, []int) {
	return fileDescriptor_13a583ba5a612c2b, []int{0}
}

func (m *Hostapd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Hostapd.Unmarshal(m, b)
}
func (m *Hostapd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Hostapd.Marshal(b, m, deterministic)
}
func (m *Hostapd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hostapd.Merge(m, src)
}
func (m *Hostapd) XXX_Size() int {
	return xxx_messageInfo_Hostapd.Size(m)
}
func (m *Hostapd) XXX_DiscardUnknown() {
	xxx_messageInfo_Hostapd.DiscardUnknown(m)
}

var xxx_messageInfo_Hostapd proto.InternalMessageInfo

func (m *Hostapd) GetSsid() string {
	if m != nil {
		return m.Ssid
	}
	return ""
}

func (m *Hostapd) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Hostapd) GetVlSsid() string {
	if m != nil {
		return m.VlSsid
	}
	return ""
}

func (m *Hostapd) GetVlAuthServerAddr() string {
	if m != nil {
		return m.VlAuthServerAddr
	}
	return ""
}

func (m *Hostapd) GetVlAuthServerPort() int32 {
	if m != nil {
		return m.VlAuthServerPort
	}
	return 0
}

func (m *Hostapd) GetVlAuthServerSharedSecret() string {
	if m != nil {
		return m.VlAuthServerSharedSecret
	}
	return ""
}

func (m *Hostapd) GetWifiDisabled() bool {
	if m != nil {
		return m.WifiDisabled
	}
	return false
}

func (m *Hostapd) GetClientChannel() string {
	if m != nil {
		return m.ClientChannel
	}
	return ""
}

func (m *Hostapd) GetXwfEnabled() bool {
	if m != nil {
		return m.XwfEnabled
	}
	return false
}

func (m *Hostapd) GetUseOverrideSsid() bool {
	if m != nil {
		return m.UseOverrideSsid
	}
	return false
}

func (m *Hostapd) GetBaseConfigs() *HostapdOverrideableConfigs {
	if m != nil {
		return m.BaseConfigs
	}
	return nil
}

// Base hostapd configuration dervied from the mesh configs. This is here so
// the mconfig stramer knows what values to revert to if the gateway overrides
// are deleted
type HostapdOverrideableConfigs struct {
	Ssid                 string   `protobuf:"bytes,1,opt,name=ssid,proto3" json:"ssid,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XwfEnabled           bool     `protobuf:"varint,3,opt,name=xwf_enabled,json=xwfEnabled,proto3" json:"xwf_enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostapdOverrideableConfigs) Reset()         { *m = HostapdOverrideableConfigs{} }
func (m *HostapdOverrideableConfigs) String() string { return proto.CompactTextString(m) }
func (*HostapdOverrideableConfigs) ProtoMessage()    {}
func (*HostapdOverrideableConfigs) Descriptor() ([]byte, []int) {
	return fileDescriptor_13a583ba5a612c2b, []int{1}
}

func (m *HostapdOverrideableConfigs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostapdOverrideableConfigs.Unmarshal(m, b)
}
func (m *HostapdOverrideableConfigs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostapdOverrideableConfigs.Marshal(b, m, deterministic)
}
func (m *HostapdOverrideableConfigs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostapdOverrideableConfigs.Merge(m, src)
}
func (m *HostapdOverrideableConfigs) XXX_Size() int {
	return xxx_messageInfo_HostapdOverrideableConfigs.Size(m)
}
func (m *HostapdOverrideableConfigs) XXX_DiscardUnknown() {
	xxx_messageInfo_HostapdOverrideableConfigs.DiscardUnknown(m)
}

var xxx_messageInfo_HostapdOverrideableConfigs proto.InternalMessageInfo

func (m *HostapdOverrideableConfigs) GetSsid() string {
	if m != nil {
		return m.Ssid
	}
	return ""
}

func (m *HostapdOverrideableConfigs) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *HostapdOverrideableConfigs) GetXwfEnabled() bool {
	if m != nil {
		return m.XwfEnabled
	}
	return false
}

type Linkstatsd struct {
	// ping stats configuration
	PingHostList         []string `protobuf:"bytes,1,rep,name=ping_host_list,json=pingHostList,proto3" json:"ping_host_list,omitempty"`
	PingNumPackets       int32    `protobuf:"varint,2,opt,name=ping_num_packets,json=pingNumPackets,proto3" json:"ping_num_packets,omitempty"`
	PingTimeoutSecs      int32    `protobuf:"varint,3,opt,name=ping_timeout_secs,json=pingTimeoutSecs,proto3" json:"ping_timeout_secs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Linkstatsd) Reset()         { *m = Linkstatsd{} }
func (m *Linkstatsd) String() string { return proto.CompactTextString(m) }
func (*Linkstatsd) ProtoMessage()    {}
func (*Linkstatsd) Descriptor() ([]byte, []int) {
	return fileDescriptor_13a583ba5a612c2b, []int{2}
}

func (m *Linkstatsd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Linkstatsd.Unmarshal(m, b)
}
func (m *Linkstatsd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Linkstatsd.Marshal(b, m, deterministic)
}
func (m *Linkstatsd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Linkstatsd.Merge(m, src)
}
func (m *Linkstatsd) XXX_Size() int {
	return xxx_messageInfo_Linkstatsd.Size(m)
}
func (m *Linkstatsd) XXX_DiscardUnknown() {
	xxx_messageInfo_Linkstatsd.DiscardUnknown(m)
}

var xxx_messageInfo_Linkstatsd proto.InternalMessageInfo

func (m *Linkstatsd) GetPingHostList() []string {
	if m != nil {
		return m.PingHostList
	}
	return nil
}

func (m *Linkstatsd) GetPingNumPackets() int32 {
	if m != nil {
		return m.PingNumPackets
	}
	return 0
}

func (m *Linkstatsd) GetPingTimeoutSecs() int32 {
	if m != nil {
		return m.PingTimeoutSecs
	}
	return 0
}

type Xwfchilli struct {
	// expresswifi configs
	XwfEnabled      bool   `protobuf:"varint,1,opt,name=xwf_enabled,json=xwfEnabled,proto3" json:"xwf_enabled,omitempty"`
	XwfRadiusServer string `protobuf:"bytes,2,opt,name=xwf_radius_server,json=xwfRadiusServer,proto3" json:"xwf_radius_server,omitempty"`
	// Contents of xwf.conf
	XwfConfig string `protobuf:"bytes,4,opt,name=xwf_config,json=xwfConfig,proto3" json:"xwf_config,omitempty"`
	// DNS IPs for Chilli's DHCP server to hand out
	XwfDhcpDns1 string `protobuf:"bytes,5,opt,name=xwf_dhcp_dns1,json=xwfDhcpDns1,proto3" json:"xwf_dhcp_dns1,omitempty"`
	XwfDhcpDns2 string `protobuf:"bytes,6,opt,name=xwf_dhcp_dns2,json=xwfDhcpDns2,proto3" json:"xwf_dhcp_dns2,omitempty"`
	// PSK for the RADIUS server
	XwfRadiusSharedSecret string `protobuf:"bytes,7,opt,name=xwf_radius_shared_secret,json=xwfRadiusSharedSecret,proto3" json:"xwf_radius_shared_secret,omitempty"`
	// Port number to use for RADIUS auth messages
	XwfRadiusAuthPort int32 `protobuf:"varint,8,opt,name=xwf_radius_auth_port,json=xwfRadiusAuthPort,proto3" json:"xwf_radius_auth_port,omitempty"`
	// Port number to use for RADIUS accounting messages
	XwfRadiusAcctPort int32 `protobuf:"varint,9,opt,name=xwf_radius_acct_port,json=xwfRadiusAcctPort,proto3" json:"xwf_radius_acct_port,omitempty"`
	// PSK for the XWF UAM
	XwfUamSecret string `protobuf:"bytes,10,opt,name=xwf_uam_secret,json=xwfUamSecret,proto3" json:"xwf_uam_secret,omitempty"`
	// XWF parter name as specified in the partner's captive portal url
	// i.e. https://<<xwf_partner_name>>.expresswifi.com/customer/captive_portal/
	XwfPartnerName string `protobuf:"bytes,11,opt,name=xwf_partner_name,json=xwfPartnerName,proto3" json:"xwf_partner_name,omitempty"`
	// used for NAS
	NetworkId string `protobuf:"bytes,12,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	MeshId    string `protobuf:"bytes,13,opt,name=mesh_id,json=meshId,proto3" json:"mesh_id,omitempty"`
	GatewayId string `protobuf:"bytes,14,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	// for streamer - should be left unused by gateway
	UseOverrideXwf bool                          `protobuf:"varint,15,opt,name=use_override_xwf,json=useOverrideXwf,proto3" json:"use_override_xwf,omitempty"`
	BaseConfigs    *XwfchilliOverrideableConfigs `protobuf:"bytes,16,opt,name=base_configs,json=baseConfigs,proto3" json:"base_configs,omitempty"`
	// deprecated fields
	XwfTrafficClasses    []string `protobuf:"bytes,3,rep,name=xwf_traffic_classes,json=xwfTrafficClasses,proto3" json:"xwf_traffic_classes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Xwfchilli) Reset()         { *m = Xwfchilli{} }
func (m *Xwfchilli) String() string { return proto.CompactTextString(m) }
func (*Xwfchilli) ProtoMessage()    {}
func (*Xwfchilli) Descriptor() ([]byte, []int) {
	return fileDescriptor_13a583ba5a612c2b, []int{3}
}

func (m *Xwfchilli) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Xwfchilli.Unmarshal(m, b)
}
func (m *Xwfchilli) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Xwfchilli.Marshal(b, m, deterministic)
}
func (m *Xwfchilli) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Xwfchilli.Merge(m, src)
}
func (m *Xwfchilli) XXX_Size() int {
	return xxx_messageInfo_Xwfchilli.Size(m)
}
func (m *Xwfchilli) XXX_DiscardUnknown() {
	xxx_messageInfo_Xwfchilli.DiscardUnknown(m)
}

var xxx_messageInfo_Xwfchilli proto.InternalMessageInfo

func (m *Xwfchilli) GetXwfEnabled() bool {
	if m != nil {
		return m.XwfEnabled
	}
	return false
}

func (m *Xwfchilli) GetXwfRadiusServer() string {
	if m != nil {
		return m.XwfRadiusServer
	}
	return ""
}

func (m *Xwfchilli) GetXwfConfig() string {
	if m != nil {
		return m.XwfConfig
	}
	return ""
}

func (m *Xwfchilli) GetXwfDhcpDns1() string {
	if m != nil {
		return m.XwfDhcpDns1
	}
	return ""
}

func (m *Xwfchilli) GetXwfDhcpDns2() string {
	if m != nil {
		return m.XwfDhcpDns2
	}
	return ""
}

func (m *Xwfchilli) GetXwfRadiusSharedSecret() string {
	if m != nil {
		return m.XwfRadiusSharedSecret
	}
	return ""
}

func (m *Xwfchilli) GetXwfRadiusAuthPort() int32 {
	if m != nil {
		return m.XwfRadiusAuthPort
	}
	return 0
}

func (m *Xwfchilli) GetXwfRadiusAcctPort() int32 {
	if m != nil {
		return m.XwfRadiusAcctPort
	}
	return 0
}

func (m *Xwfchilli) GetXwfUamSecret() string {
	if m != nil {
		return m.XwfUamSecret
	}
	return ""
}

func (m *Xwfchilli) GetXwfPartnerName() string {
	if m != nil {
		return m.XwfPartnerName
	}
	return ""
}

func (m *Xwfchilli) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *Xwfchilli) GetMeshId() string {
	if m != nil {
		return m.MeshId
	}
	return ""
}

func (m *Xwfchilli) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

func (m *Xwfchilli) GetUseOverrideXwf() bool {
	if m != nil {
		return m.UseOverrideXwf
	}
	return false
}

func (m *Xwfchilli) GetBaseConfigs() *XwfchilliOverrideableConfigs {
	if m != nil {
		return m.BaseConfigs
	}
	return nil
}

func (m *Xwfchilli) GetXwfTrafficClasses() []string {
	if m != nil {
		return m.XwfTrafficClasses
	}
	return nil
}

// Base XWF configuration derived from the mesh and network configs. This is
// here so the mconfig streamer knows what values to revert to if the gateway
// overrides are disabled
type XwfchilliOverrideableConfigs struct {
	// expresswifi configs
	XwfEnabled      bool   `protobuf:"varint,1,opt,name=xwf_enabled,json=xwfEnabled,proto3" json:"xwf_enabled,omitempty"`
	XwfRadiusServer string `protobuf:"bytes,2,opt,name=xwf_radius_server,json=xwfRadiusServer,proto3" json:"xwf_radius_server,omitempty"`
	// Contents of xwf.conf
	XwfConfig string `protobuf:"bytes,3,opt,name=xwf_config,json=xwfConfig,proto3" json:"xwf_config,omitempty"`
	// DNS IPs for Chilli's DHCP server to hand out
	XwfDhcpDns1 string `protobuf:"bytes,4,opt,name=xwf_dhcp_dns1,json=xwfDhcpDns1,proto3" json:"xwf_dhcp_dns1,omitempty"`
	XwfDhcpDns2 string `protobuf:"bytes,5,opt,name=xwf_dhcp_dns2,json=xwfDhcpDns2,proto3" json:"xwf_dhcp_dns2,omitempty"`
	// PSK for the RADIUS server
	XwfRadiusSharedSecret string `protobuf:"bytes,6,opt,name=xwf_radius_shared_secret,json=xwfRadiusSharedSecret,proto3" json:"xwf_radius_shared_secret,omitempty"`
	// Port number to use for RADIUS auth messages
	XwfRadiusAuthPort int32 `protobuf:"varint,7,opt,name=xwf_radius_auth_port,json=xwfRadiusAuthPort,proto3" json:"xwf_radius_auth_port,omitempty"`
	// Port number to use for RADIUS accounting messages
	XwfRadiusAcctPort int32 `protobuf:"varint,8,opt,name=xwf_radius_acct_port,json=xwfRadiusAcctPort,proto3" json:"xwf_radius_acct_port,omitempty"`
	// PSK for the XWF UAM
	XwfUamSecret string `protobuf:"bytes,9,opt,name=xwf_uam_secret,json=xwfUamSecret,proto3" json:"xwf_uam_secret,omitempty"`
	// XWF parter name as specified in the partner's captive portal url
	// i.e. https://<<xwf_partner_name>>.expresswifi.com/customer/captive_portal/
	XwfPartnerName       string   `protobuf:"bytes,10,opt,name=xwf_partner_name,json=xwfPartnerName,proto3" json:"xwf_partner_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *XwfchilliOverrideableConfigs) Reset()         { *m = XwfchilliOverrideableConfigs{} }
func (m *XwfchilliOverrideableConfigs) String() string { return proto.CompactTextString(m) }
func (*XwfchilliOverrideableConfigs) ProtoMessage()    {}
func (*XwfchilliOverrideableConfigs) Descriptor() ([]byte, []int) {
	return fileDescriptor_13a583ba5a612c2b, []int{4}
}

func (m *XwfchilliOverrideableConfigs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XwfchilliOverrideableConfigs.Unmarshal(m, b)
}
func (m *XwfchilliOverrideableConfigs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XwfchilliOverrideableConfigs.Marshal(b, m, deterministic)
}
func (m *XwfchilliOverrideableConfigs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XwfchilliOverrideableConfigs.Merge(m, src)
}
func (m *XwfchilliOverrideableConfigs) XXX_Size() int {
	return xxx_messageInfo_XwfchilliOverrideableConfigs.Size(m)
}
func (m *XwfchilliOverrideableConfigs) XXX_DiscardUnknown() {
	xxx_messageInfo_XwfchilliOverrideableConfigs.DiscardUnknown(m)
}

var xxx_messageInfo_XwfchilliOverrideableConfigs proto.InternalMessageInfo

func (m *XwfchilliOverrideableConfigs) GetXwfEnabled() bool {
	if m != nil {
		return m.XwfEnabled
	}
	return false
}

func (m *XwfchilliOverrideableConfigs) GetXwfRadiusServer() string {
	if m != nil {
		return m.XwfRadiusServer
	}
	return ""
}

func (m *XwfchilliOverrideableConfigs) GetXwfConfig() string {
	if m != nil {
		return m.XwfConfig
	}
	return ""
}

func (m *XwfchilliOverrideableConfigs) GetXwfDhcpDns1() string {
	if m != nil {
		return m.XwfDhcpDns1
	}
	return ""
}

func (m *XwfchilliOverrideableConfigs) GetXwfDhcpDns2() string {
	if m != nil {
		return m.XwfDhcpDns2
	}
	return ""
}

func (m *XwfchilliOverrideableConfigs) GetXwfRadiusSharedSecret() string {
	if m != nil {
		return m.XwfRadiusSharedSecret
	}
	return ""
}

func (m *XwfchilliOverrideableConfigs) GetXwfRadiusAuthPort() int32 {
	if m != nil {
		return m.XwfRadiusAuthPort
	}
	return 0
}

func (m *XwfchilliOverrideableConfigs) GetXwfRadiusAcctPort() int32 {
	if m != nil {
		return m.XwfRadiusAcctPort
	}
	return 0
}

func (m *XwfchilliOverrideableConfigs) GetXwfUamSecret() string {
	if m != nil {
		return m.XwfUamSecret
	}
	return ""
}

func (m *XwfchilliOverrideableConfigs) GetXwfPartnerName() string {
	if m != nil {
		return m.XwfPartnerName
	}
	return ""
}

type Meshd struct {
	// fbmeshd configs
	MeshRssiThreshold    int32    `protobuf:"varint,1,opt,name=mesh_rssi_threshold,json=meshRssiThreshold,proto3" json:"mesh_rssi_threshold,omitempty"`
	MeshSsid             string   `protobuf:"bytes,2,opt,name=mesh_ssid,json=meshSsid,proto3" json:"mesh_ssid,omitempty"`
	MeshFrequency        int32    `protobuf:"varint,3,opt,name=mesh_frequency,json=meshFrequency,proto3" json:"mesh_frequency,omitempty"`
	MeshChannelType      string   `protobuf:"bytes,4,opt,name=mesh_channel_type,json=meshChannelType,proto3" json:"mesh_channel_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Meshd) Reset()         { *m = Meshd{} }
func (m *Meshd) String() string { return proto.CompactTextString(m) }
func (*Meshd) ProtoMessage()    {}
func (*Meshd) Descriptor() ([]byte, []int) {
	return fileDescriptor_13a583ba5a612c2b, []int{5}
}

func (m *Meshd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Meshd.Unmarshal(m, b)
}
func (m *Meshd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Meshd.Marshal(b, m, deterministic)
}
func (m *Meshd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Meshd.Merge(m, src)
}
func (m *Meshd) XXX_Size() int {
	return xxx_messageInfo_Meshd.Size(m)
}
func (m *Meshd) XXX_DiscardUnknown() {
	xxx_messageInfo_Meshd.DiscardUnknown(m)
}

var xxx_messageInfo_Meshd proto.InternalMessageInfo

func (m *Meshd) GetMeshRssiThreshold() int32 {
	if m != nil {
		return m.MeshRssiThreshold
	}
	return 0
}

func (m *Meshd) GetMeshSsid() string {
	if m != nil {
		return m.MeshSsid
	}
	return ""
}

func (m *Meshd) GetMeshFrequency() int32 {
	if m != nil {
		return m.MeshFrequency
	}
	return 0
}

func (m *Meshd) GetMeshChannelType() string {
	if m != nil {
		return m.MeshChannelType
	}
	return ""
}

type Openvpn struct {
	// management vpn configs
	MgmtVpnEnabled       bool     `protobuf:"varint,1,opt,name=mgmt_vpn_enabled,json=mgmtVpnEnabled,proto3" json:"mgmt_vpn_enabled,omitempty"`
	MgmtVpnProto         string   `protobuf:"bytes,2,opt,name=mgmt_vpn_proto,json=mgmtVpnProto,proto3" json:"mgmt_vpn_proto,omitempty"`
	MgmtVpnRemote        string   `protobuf:"bytes,3,opt,name=mgmt_vpn_remote,json=mgmtVpnRemote,proto3" json:"mgmt_vpn_remote,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Openvpn) Reset()         { *m = Openvpn{} }
func (m *Openvpn) String() string { return proto.CompactTextString(m) }
func (*Openvpn) ProtoMessage()    {}
func (*Openvpn) Descriptor() ([]byte, []int) {
	return fileDescriptor_13a583ba5a612c2b, []int{6}
}

func (m *Openvpn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Openvpn.Unmarshal(m, b)
}
func (m *Openvpn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Openvpn.Marshal(b, m, deterministic)
}
func (m *Openvpn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Openvpn.Merge(m, src)
}
func (m *Openvpn) XXX_Size() int {
	return xxx_messageInfo_Openvpn.Size(m)
}
func (m *Openvpn) XXX_DiscardUnknown() {
	xxx_messageInfo_Openvpn.DiscardUnknown(m)
}

var xxx_messageInfo_Openvpn proto.InternalMessageInfo

func (m *Openvpn) GetMgmtVpnEnabled() bool {
	if m != nil {
		return m.MgmtVpnEnabled
	}
	return false
}

func (m *Openvpn) GetMgmtVpnProto() string {
	if m != nil {
		return m.MgmtVpnProto
	}
	return ""
}

func (m *Openvpn) GetMgmtVpnRemote() string {
	if m != nil {
		return m.MgmtVpnRemote
	}
	return ""
}

type Openr struct {
	// open/r configs
	OpenrEnabled         bool     `protobuf:"varint,1,opt,name=openr_enabled,json=openrEnabled,proto3" json:"openr_enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Openr) Reset()         { *m = Openr{} }
func (m *Openr) String() string { return proto.CompactTextString(m) }
func (*Openr) ProtoMessage()    {}
func (*Openr) Descriptor() ([]byte, []int) {
	return fileDescriptor_13a583ba5a612c2b, []int{7}
}

func (m *Openr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Openr.Unmarshal(m, b)
}
func (m *Openr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Openr.Marshal(b, m, deterministic)
}
func (m *Openr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Openr.Merge(m, src)
}
func (m *Openr) XXX_Size() int {
	return xxx_messageInfo_Openr.Size(m)
}
func (m *Openr) XXX_DiscardUnknown() {
	xxx_messageInfo_Openr.DiscardUnknown(m)
}

var xxx_messageInfo_Openr proto.InternalMessageInfo

func (m *Openr) GetOpenrEnabled() bool {
	if m != nil {
		return m.OpenrEnabled
	}
	return false
}

type WifiMetadata struct {
	// device metadata, not consumed by a service but may be useful to have on the device
	Info                 string   `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Latitude             float64  `protobuf:"fixed64,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude            float64  `protobuf:"fixed64,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
	NetworkId            string   `protobuf:"bytes,4,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	MeshId               string   `protobuf:"bytes,5,opt,name=mesh_id,json=meshId,proto3" json:"mesh_id,omitempty"`
	GatewayId            string   `protobuf:"bytes,6,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	MeshPeerGatewayIds   []string `protobuf:"bytes,7,rep,name=mesh_peer_gateway_ids,json=meshPeerGatewayIds,proto3" json:"mesh_peer_gateway_ids,omitempty"`
	IsProduction         bool     `protobuf:"varint,8,opt,name=is_production,json=isProduction,proto3" json:"is_production,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WifiMetadata) Reset()         { *m = WifiMetadata{} }
func (m *WifiMetadata) String() string { return proto.CompactTextString(m) }
func (*WifiMetadata) ProtoMessage()    {}
func (*WifiMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_13a583ba5a612c2b, []int{8}
}

func (m *WifiMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WifiMetadata.Unmarshal(m, b)
}
func (m *WifiMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WifiMetadata.Marshal(b, m, deterministic)
}
func (m *WifiMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WifiMetadata.Merge(m, src)
}
func (m *WifiMetadata) XXX_Size() int {
	return xxx_messageInfo_WifiMetadata.Size(m)
}
func (m *WifiMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_WifiMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_WifiMetadata proto.InternalMessageInfo

func (m *WifiMetadata) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *WifiMetadata) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *WifiMetadata) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *WifiMetadata) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *WifiMetadata) GetMeshId() string {
	if m != nil {
		return m.MeshId
	}
	return ""
}

func (m *WifiMetadata) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

func (m *WifiMetadata) GetMeshPeerGatewayIds() []string {
	if m != nil {
		return m.MeshPeerGatewayIds
	}
	return nil
}

func (m *WifiMetadata) GetIsProduction() bool {
	if m != nil {
		return m.IsProduction
	}
	return false
}

type WifiProperties struct {
	Info                 string            `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	NetworkId            string            `protobuf:"bytes,2,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	MeshId               string            `protobuf:"bytes,3,opt,name=mesh_id,json=meshId,proto3" json:"mesh_id,omitempty"`
	GatewayId            string            `protobuf:"bytes,4,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	MeshPeerGatewayIds   []string          `protobuf:"bytes,5,rep,name=mesh_peer_gateway_ids,json=meshPeerGatewayIds,proto3" json:"mesh_peer_gateway_ids,omitempty"`
	NetworkProps         map[string]string `protobuf:"bytes,6,rep,name=network_props,json=networkProps,proto3" json:"network_props,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MeshProps            map[string]string `protobuf:"bytes,7,rep,name=mesh_props,json=meshProps,proto3" json:"mesh_props,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	GatewayProps         map[string]string `protobuf:"bytes,8,rep,name=gateway_props,json=gatewayProps,proto3" json:"gateway_props,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *WifiProperties) Reset()         { *m = WifiProperties{} }
func (m *WifiProperties) String() string { return proto.CompactTextString(m) }
func (*WifiProperties) ProtoMessage()    {}
func (*WifiProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_13a583ba5a612c2b, []int{9}
}

func (m *WifiProperties) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WifiProperties.Unmarshal(m, b)
}
func (m *WifiProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WifiProperties.Marshal(b, m, deterministic)
}
func (m *WifiProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WifiProperties.Merge(m, src)
}
func (m *WifiProperties) XXX_Size() int {
	return xxx_messageInfo_WifiProperties.Size(m)
}
func (m *WifiProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_WifiProperties.DiscardUnknown(m)
}

var xxx_messageInfo_WifiProperties proto.InternalMessageInfo

func (m *WifiProperties) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *WifiProperties) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *WifiProperties) GetMeshId() string {
	if m != nil {
		return m.MeshId
	}
	return ""
}

func (m *WifiProperties) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

func (m *WifiProperties) GetMeshPeerGatewayIds() []string {
	if m != nil {
		return m.MeshPeerGatewayIds
	}
	return nil
}

func (m *WifiProperties) GetNetworkProps() map[string]string {
	if m != nil {
		return m.NetworkProps
	}
	return nil
}

func (m *WifiProperties) GetMeshProps() map[string]string {
	if m != nil {
		return m.MeshProps
	}
	return nil
}

func (m *WifiProperties) GetGatewayProps() map[string]string {
	if m != nil {
		return m.GatewayProps
	}
	return nil
}

func init() {
	proto.RegisterType((*Hostapd)(nil), "magma.mconfig.Hostapd")
	proto.RegisterType((*HostapdOverrideableConfigs)(nil), "magma.mconfig.HostapdOverrideableConfigs")
	proto.RegisterType((*Linkstatsd)(nil), "magma.mconfig.Linkstatsd")
	proto.RegisterType((*Xwfchilli)(nil), "magma.mconfig.Xwfchilli")
	proto.RegisterType((*XwfchilliOverrideableConfigs)(nil), "magma.mconfig.XwfchilliOverrideableConfigs")
	proto.RegisterType((*Meshd)(nil), "magma.mconfig.Meshd")
	proto.RegisterType((*Openvpn)(nil), "magma.mconfig.Openvpn")
	proto.RegisterType((*Openr)(nil), "magma.mconfig.Openr")
	proto.RegisterType((*WifiMetadata)(nil), "magma.mconfig.WifiMetadata")
	proto.RegisterType((*WifiProperties)(nil), "magma.mconfig.WifiProperties")
	proto.RegisterMapType((map[string]string)(nil), "magma.mconfig.WifiProperties.GatewayPropsEntry")
	proto.RegisterMapType((map[string]string)(nil), "magma.mconfig.WifiProperties.MeshPropsEntry")
	proto.RegisterMapType((map[string]string)(nil), "magma.mconfig.WifiProperties.NetworkPropsEntry")
}

func init() {
	proto.RegisterFile("wifi/protos/mconfig/wifi_mconfigs.proto", fileDescriptor_13a583ba5a612c2b)
}

var fileDescriptor_13a583ba5a612c2b = []byte{
	// 1207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0x96, 0xe3, 0x38, 0xb6, 0x4f, 0x6c, 0x27, 0xd9, 0xb6, 0x62, 0x15, 0x8a, 0x88, 0x4c, 0x0a,
	0x06, 0x4a, 0xac, 0x86, 0x0b, 0x10, 0x42, 0x54, 0xa5, 0x2d, 0x50, 0xd1, 0xa6, 0xd6, 0x26, 0x40,
	0xc5, 0xcd, 0x6a, 0xba, 0x3b, 0x6b, 0x8f, 0xb2, 0x7f, 0xcc, 0xcc, 0x7a, 0x93, 0x4b, 0xee, 0x90,
	0x78, 0x10, 0x2e, 0x78, 0x06, 0x9e, 0x83, 0x47, 0xe0, 0x35, 0xd0, 0x39, 0x33, 0x76, 0xec, 0x6d,
	0xea, 0x26, 0x48, 0xdc, 0xed, 0x7e, 0xe7, 0x7c, 0xb3, 0xe7, 0xe7, 0x3b, 0x67, 0x6c, 0xf8, 0xa0,
	0x14, 0x91, 0x18, 0xe6, 0x32, 0xd3, 0x99, 0x1a, 0x26, 0x41, 0x96, 0x46, 0x62, 0x3c, 0x44, 0xcc,
	0xb7, 0x2f, 0xea, 0x80, 0x8c, 0x4e, 0x37, 0x61, 0xe3, 0x84, 0x1d, 0x58, 0xb4, 0xff, 0x77, 0x1d,
	0x9a, 0xdf, 0x65, 0x4a, 0xb3, 0x3c, 0x74, 0x1c, 0x58, 0x57, 0x4a, 0x84, 0x6e, 0x6d, 0xaf, 0x36,
	0x68, 0x7b, 0xf4, 0xec, 0xec, 0x42, 0x2b, 0x67, 0x4a, 0x95, 0x99, 0x0c, 0xdd, 0x35, 0xc2, 0xe7,
	0xef, 0xce, 0x5b, 0xd0, 0x9c, 0xc6, 0x3e, 0x51, 0xea, 0x64, 0xda, 0x98, 0xc6, 0xc7, 0x48, 0xfa,
	0x04, 0x6e, 0x4c, 0x63, 0x9f, 0x15, 0x7a, 0xe2, 0x2b, 0x2e, 0xa7, 0x5c, 0xfa, 0x2c, 0x0c, 0xa5,
	0xbb, 0x4e, 0x4e, 0xdb, 0xd3, 0xf8, 0x41, 0xa1, 0x27, 0xc7, 0x64, 0x78, 0x10, 0x86, 0xf2, 0x12,
	0xf7, 0x3c, 0x93, 0xda, 0x6d, 0xec, 0xd5, 0x06, 0x8d, 0x65, 0xf7, 0x51, 0x26, 0xb5, 0xf3, 0x15,
	0xdc, 0xae, 0xb8, 0xab, 0x09, 0x93, 0x3c, 0xf4, 0x15, 0x0f, 0x24, 0xd7, 0xee, 0x06, 0x7d, 0xc6,
	0x5d, 0xe4, 0x1d, 0x93, 0xc3, 0x31, 0xd9, 0x9d, 0xf7, 0xa0, 0x4b, 0x85, 0x09, 0x85, 0x62, 0x2f,
	0x63, 0x1e, 0xba, 0xcd, 0xbd, 0xda, 0xa0, 0xe5, 0x75, 0x10, 0x7c, 0x64, 0x31, 0xe7, 0x0e, 0xf4,
	0x82, 0x58, 0xf0, 0x54, 0xfb, 0xc1, 0x84, 0xa5, 0x29, 0x8f, 0xdd, 0x16, 0x1d, 0xdb, 0x35, 0xe8,
	0x43, 0x03, 0x3a, 0xef, 0xc2, 0xe6, 0x59, 0x19, 0xf9, 0x3c, 0x35, 0x27, 0xb5, 0xe9, 0x24, 0x38,
	0x2b, 0xa3, 0xc7, 0x06, 0x71, 0x3e, 0x82, 0x9d, 0x42, 0x71, 0x3f, 0x9b, 0x72, 0x29, 0x45, 0xc8,
	0x4d, 0xb5, 0x80, 0xdc, 0xb6, 0x0a, 0xc5, 0x9f, 0x5b, 0x9c, 0xca, 0xf6, 0x14, 0x3a, 0x2f, 0x99,
	0xe2, 0xbe, 0x6d, 0x98, 0xbb, 0xb9, 0x57, 0x1b, 0x6c, 0x1e, 0x7e, 0x78, 0xb0, 0xd4, 0xb1, 0x03,
	0xdb, 0xad, 0x19, 0x13, 0x3f, 0xf3, 0xd0, 0x10, 0xbc, 0x4d, 0xa4, 0xdb, 0x97, 0x7e, 0x02, 0xbb,
	0xaf, 0x77, 0xbd, 0x76, 0xaf, 0x2b, 0x89, 0xd6, 0xab, 0x89, 0xf6, 0x7f, 0xab, 0x01, 0x3c, 0x15,
	0xe9, 0xa9, 0xd2, 0x4c, 0xab, 0xd0, 0xd9, 0x87, 0x5e, 0x2e, 0xd2, 0xb1, 0x3f, 0xc9, 0x94, 0xf6,
	0x63, 0xa1, 0xb4, 0x5b, 0xdb, 0xab, 0x0f, 0xda, 0x5e, 0x07, 0x51, 0x8c, 0xeb, 0xa9, 0x50, 0xda,
	0x19, 0xc0, 0x36, 0x79, 0xa5, 0x45, 0xe2, 0xe7, 0x2c, 0x38, 0xe5, 0x5a, 0xd1, 0x97, 0x1b, 0x1e,
	0xb1, 0x8f, 0x8a, 0x64, 0x64, 0x50, 0xac, 0x23, 0x79, 0x6a, 0x91, 0xf0, 0xac, 0xd0, 0xd8, 0x6b,
	0x45, 0x51, 0x34, 0xbc, 0x2d, 0x34, 0x9c, 0x18, 0xfc, 0x98, 0x07, 0xaa, 0xff, 0x67, 0x03, 0xda,
	0x2f, 0xca, 0x28, 0x98, 0x88, 0x38, 0x16, 0xd5, 0xc8, 0x6b, 0x97, 0xb5, 0x08, 0x1d, 0x24, 0x0b,
	0x45, 0xa1, 0xac, 0xa4, 0x6c, 0xfe, 0x5b, 0x67, 0x65, 0xe4, 0x11, 0x6e, 0x74, 0xe4, 0xbc, 0x03,
	0xc8, 0xb4, 0x1d, 0xb2, 0x82, 0x6e, 0x9f, 0x95, 0x91, 0x29, 0xab, 0xd3, 0x87, 0x2e, 0x9a, 0xc3,
	0x49, 0x90, 0xfb, 0x61, 0xaa, 0xee, 0x91, 0x86, 0xdb, 0x1e, 0x06, 0xf0, 0x68, 0x12, 0xe4, 0x8f,
	0x52, 0x75, 0xaf, 0xea, 0x73, 0x68, 0xf5, 0xba, 0xe0, 0x73, 0xe8, 0x7c, 0x06, 0xee, 0x62, 0x48,
	0x4b, 0xf2, 0x6e, 0x92, 0xfb, 0xad, 0x8b, 0xc8, 0x16, 0xb5, 0x3d, 0x84, 0x9b, 0x0b, 0x44, 0x9a,
	0x11, 0x9a, 0xa5, 0x16, 0x55, 0x6a, 0x67, 0x4e, 0xc2, 0xd1, 0xa0, 0x61, 0xaa, 0x10, 0x82, 0x40,
	0x1b, 0x42, 0xbb, 0x4a, 0x08, 0x02, 0x4d, 0x84, 0x7d, 0xe8, 0x21, 0xa1, 0x60, 0xc9, 0x2c, 0x20,
	0xa0, 0x80, 0x3a, 0x67, 0x65, 0xf4, 0x03, 0x4b, 0x6c, 0x1c, 0x03, 0xd8, 0x46, 0xaf, 0x9c, 0x49,
	0x9d, 0x72, 0xe9, 0xa7, 0x2c, 0xe1, 0x24, 0xe7, 0xb6, 0x87, 0xec, 0x91, 0x81, 0x8f, 0x58, 0xc2,
	0xb1, 0xa2, 0x29, 0xd7, 0x65, 0x26, 0x4f, 0x7d, 0x11, 0xba, 0x1d, 0x53, 0x51, 0x8b, 0x3c, 0xa1,
	0x1d, 0x93, 0x70, 0x35, 0x41, 0x5b, 0xd7, 0xec, 0x18, 0x7c, 0x7d, 0x12, 0x22, 0x6f, 0xcc, 0x34,
	0x2f, 0xd9, 0x39, 0xda, 0x7a, 0x86, 0x67, 0x91, 0x27, 0x21, 0x06, 0xb0, 0x34, 0x77, 0x67, 0x65,
	0xe4, 0x6e, 0x51, 0xeb, 0x7b, 0x0b, 0x63, 0xf7, 0xa2, 0x8c, 0x9c, 0xa3, 0xca, 0xd4, 0x6d, 0xd3,
	0xd4, 0x7d, 0x5c, 0x99, 0xba, 0xb9, 0x9e, 0xde, 0x34, 0x77, 0xce, 0x01, 0xdc, 0xc0, 0xd4, 0xb5,
	0x64, 0x51, 0x24, 0x02, 0x3f, 0x88, 0x99, 0x52, 0x1c, 0xb5, 0x8a, 0xf2, 0xc7, 0x82, 0x9e, 0x18,
	0xcb, 0x43, 0x63, 0xe8, 0xff, 0x55, 0x87, 0xdb, 0xab, 0x4e, 0xff, 0x3f, 0x05, 0x5c, 0x7f, 0xa3,
	0x80, 0xd7, 0xaf, 0x20, 0xe0, 0xc6, 0xf5, 0x04, 0xbc, 0xf1, 0x5f, 0x04, 0xdc, 0xbc, 0xae, 0x80,
	0x5b, 0x57, 0x17, 0x70, 0xfb, 0x8a, 0x02, 0x86, 0xcb, 0x04, 0xdc, 0xff, 0xa3, 0x06, 0x8d, 0x67,
	0x5c, 0x4d, 0x42, 0xec, 0x3c, 0x69, 0x55, 0x2a, 0x25, 0x7c, 0x3d, 0x91, 0x5c, 0x4d, 0xb2, 0xd8,
	0x34, 0xac, 0xe1, 0xed, 0xa0, 0xc9, 0x53, 0x4a, 0x9c, 0xcc, 0x0c, 0xce, 0xdb, 0xd0, 0x26, 0x7f,
	0x5a, 0xc4, 0x76, 0xe1, 0x22, 0x40, 0x97, 0xc1, 0x1d, 0xe8, 0x91, 0x31, 0x92, 0xfc, 0x97, 0x82,
	0xa7, 0xc1, 0xb9, 0xdd, 0x76, 0x5d, 0x44, 0xbf, 0x99, 0x81, 0xd8, 0x7b, 0x72, 0xb3, 0xb7, 0x94,
	0xaf, 0xcf, 0x73, 0x6e, 0x9b, 0xb6, 0x85, 0x06, 0x7b, 0x51, 0x9d, 0x9c, 0xe7, 0xbc, 0xff, 0x6b,
	0x0d, 0x9a, 0xcf, 0x73, 0x9e, 0x4e, 0xf3, 0x14, 0xf3, 0x4b, 0xc6, 0x89, 0xf6, 0xa7, 0x79, 0x5a,
	0x51, 0x56, 0x0f, 0xf1, 0x1f, 0xf3, 0x74, 0xa6, 0xae, 0x7d, 0xe8, 0xcd, 0x3d, 0xe9, 0x27, 0x84,
	0x0d, 0xb5, 0x63, 0xfd, 0x46, 0xf4, 0xb3, 0xe2, 0x7d, 0xd8, 0x9a, 0x7b, 0x49, 0x9e, 0x64, 0x9a,
	0x5b, 0x71, 0x75, 0xad, 0x9b, 0x47, 0x60, 0xff, 0x2e, 0x34, 0x30, 0x04, 0x89, 0xb7, 0x70, 0x86,
	0x0f, 0x95, 0xaf, 0x77, 0x08, 0x9c, 0x5d, 0x2a, 0xbf, 0xaf, 0x41, 0xe7, 0x27, 0x11, 0x89, 0x67,
	0x5c, 0xb3, 0x90, 0x69, 0x86, 0xd7, 0x96, 0x48, 0xa3, 0x6c, 0x76, 0x6d, 0xe1, 0x33, 0x5e, 0x5b,
	0x31, 0xd3, 0x42, 0x17, 0x21, 0xa7, 0xd0, 0x6a, 0xde, 0xfc, 0xdd, 0xb9, 0x0d, 0xed, 0x38, 0x4b,
	0xc7, 0xc6, 0x58, 0x27, 0xe3, 0x05, 0x50, 0xd9, 0x3d, 0xeb, 0x2b, 0x76, 0x4f, 0x63, 0xc5, 0xee,
	0xd9, 0xa8, 0xee, 0x9e, 0x7b, 0x70, 0x8b, 0x78, 0x39, 0xe7, 0xd2, 0xbf, 0x70, 0x54, 0x6e, 0x93,
	0x76, 0x80, 0x83, 0xc6, 0x11, 0xe7, 0xf2, 0xdb, 0x19, 0x43, 0x61, 0x35, 0x84, 0xc2, 0xf2, 0x86,
	0x45, 0xa0, 0x45, 0x96, 0x92, 0x7c, 0x5b, 0x5e, 0x47, 0xa8, 0xd1, 0x1c, 0xeb, 0xff, 0xb3, 0x0e,
	0x3d, 0xac, 0xc6, 0x48, 0x66, 0x39, 0x97, 0x5a, 0x70, 0x75, 0x69, 0x3d, 0x96, 0xb3, 0x5a, 0x5b,
	0x91, 0x55, 0x7d, 0x45, 0x56, 0xeb, 0x57, 0xce, 0xaa, 0xf1, 0xda, 0xac, 0x4e, 0xa0, 0x3b, 0x8b,
	0x24, 0x97, 0x59, 0xae, 0xdc, 0x8d, 0xbd, 0xfa, 0x60, 0xf3, 0x70, 0x58, 0xd9, 0xad, 0xcb, 0x39,
	0x1d, 0x1c, 0x19, 0x0a, 0x22, 0xea, 0x71, 0xaa, 0xe5, 0xb9, 0xd7, 0x49, 0x17, 0x20, 0xe7, 0x7b,
	0x00, 0x13, 0x08, 0x1d, 0xd9, 0xa4, 0x23, 0xef, 0xae, 0x3e, 0x12, 0xe7, 0x73, 0xe1, 0x3c, 0x1a,
	0x3b, 0x73, 0xd8, 0x09, 0x74, 0x67, 0xb9, 0x98, 0xf3, 0x5a, 0x57, 0x09, 0xd1, 0xe6, 0xb8, 0x18,
	0xe2, 0x78, 0x01, 0xda, 0xbd, 0x0f, 0x3b, 0xaf, 0x64, 0xe1, 0x6c, 0x43, 0xfd, 0x94, 0x9f, 0xdb,
	0x56, 0xe1, 0xa3, 0x73, 0x13, 0x1a, 0x53, 0x16, 0x17, 0xdc, 0x36, 0xc9, 0xbc, 0x7c, 0xb1, 0xf6,
	0x79, 0x6d, 0xf7, 0x4b, 0xe8, 0x2d, 0xc7, 0x7c, 0x2d, 0xf6, 0x7d, 0xd8, 0x79, 0x25, 0xc2, 0xeb,
	0x1c, 0xf0, 0xf5, 0xfe, 0xcf, 0x7d, 0xca, 0x9f, 0xfe, 0x41, 0x0c, 0x83, 0x38, 0x2b, 0xc2, 0xe1,
	0x38, 0xab, 0xfc, 0xbd, 0x78, 0xb9, 0x41, 0xef, 0x9f, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x6b,
	0x5d, 0xbe, 0xbf, 0x7c, 0x0c, 0x00, 0x00,
}
