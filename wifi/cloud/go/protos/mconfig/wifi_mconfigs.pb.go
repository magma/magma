//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: wifi/protos/mconfig/wifi_mconfigs.proto

package mconfig

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//------------------------------------------------------------------------------
// Wifi configs
//------------------------------------------------------------------------------
type Hostapd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SSID of the wifi network
	Ssid string `protobuf:"bytes,1,opt,name=ssid,proto3" json:"ssid,omitempty"`
	// Password of the network
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// Virtual Lighthouse SSID
	VlSsid string `protobuf:"bytes,3,opt,name=vl_ssid,json=vlSsid,proto3" json:"vl_ssid,omitempty"`
	// Virtual Lighthouse auth server params
	VlAuthServerAddr         string `protobuf:"bytes,4,opt,name=vl_auth_server_addr,json=vlAuthServerAddr,proto3" json:"vl_auth_server_addr,omitempty"`
	VlAuthServerPort         int32  `protobuf:"varint,5,opt,name=vl_auth_server_port,json=vlAuthServerPort,proto3" json:"vl_auth_server_port,omitempty"`
	VlAuthServerSharedSecret string `protobuf:"bytes,6,opt,name=vl_auth_server_shared_secret,json=vlAuthServerSharedSecret,proto3" json:"vl_auth_server_shared_secret,omitempty"`
	// disable wifi
	WifiDisabled bool `protobuf:"varint,7,opt,name=wifi_disabled,json=wifiDisabled,proto3" json:"wifi_disabled,omitempty"`
	// client channel
	ClientChannel string `protobuf:"bytes,8,opt,name=client_channel,json=clientChannel,proto3" json:"client_channel,omitempty"`
	// xwf info
	XwfEnabled bool `protobuf:"varint,9,opt,name=xwf_enabled,json=xwfEnabled,proto3" json:"xwf_enabled,omitempty"`
	// for streamer - should be left unused by gateway
	UseOverrideSsid bool                        `protobuf:"varint,10,opt,name=use_override_ssid,json=useOverrideSsid,proto3" json:"use_override_ssid,omitempty"`
	BaseConfigs     *HostapdOverrideableConfigs `protobuf:"bytes,11,opt,name=base_configs,json=baseConfigs,proto3" json:"base_configs,omitempty"`
}

func (x *Hostapd) Reset() {
	*x = Hostapd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wifi_protos_mconfig_wifi_mconfigs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hostapd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hostapd) ProtoMessage() {}

func (x *Hostapd) ProtoReflect() protoreflect.Message {
	mi := &file_wifi_protos_mconfig_wifi_mconfigs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hostapd.ProtoReflect.Descriptor instead.
func (*Hostapd) Descriptor() ([]byte, []int) {
	return file_wifi_protos_mconfig_wifi_mconfigs_proto_rawDescGZIP(), []int{0}
}

func (x *Hostapd) GetSsid() string {
	if x != nil {
		return x.Ssid
	}
	return ""
}

func (x *Hostapd) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Hostapd) GetVlSsid() string {
	if x != nil {
		return x.VlSsid
	}
	return ""
}

func (x *Hostapd) GetVlAuthServerAddr() string {
	if x != nil {
		return x.VlAuthServerAddr
	}
	return ""
}

func (x *Hostapd) GetVlAuthServerPort() int32 {
	if x != nil {
		return x.VlAuthServerPort
	}
	return 0
}

func (x *Hostapd) GetVlAuthServerSharedSecret() string {
	if x != nil {
		return x.VlAuthServerSharedSecret
	}
	return ""
}

func (x *Hostapd) GetWifiDisabled() bool {
	if x != nil {
		return x.WifiDisabled
	}
	return false
}

func (x *Hostapd) GetClientChannel() string {
	if x != nil {
		return x.ClientChannel
	}
	return ""
}

func (x *Hostapd) GetXwfEnabled() bool {
	if x != nil {
		return x.XwfEnabled
	}
	return false
}

func (x *Hostapd) GetUseOverrideSsid() bool {
	if x != nil {
		return x.UseOverrideSsid
	}
	return false
}

func (x *Hostapd) GetBaseConfigs() *HostapdOverrideableConfigs {
	if x != nil {
		return x.BaseConfigs
	}
	return nil
}

// Base hostapd configuration dervied from the mesh configs. This is here so
// the mconfig stramer knows what values to revert to if the gateway overrides
// are deleted
type HostapdOverrideableConfigs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ssid       string `protobuf:"bytes,1,opt,name=ssid,proto3" json:"ssid,omitempty"`
	Password   string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XwfEnabled bool   `protobuf:"varint,3,opt,name=xwf_enabled,json=xwfEnabled,proto3" json:"xwf_enabled,omitempty"`
}

func (x *HostapdOverrideableConfigs) Reset() {
	*x = HostapdOverrideableConfigs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wifi_protos_mconfig_wifi_mconfigs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostapdOverrideableConfigs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostapdOverrideableConfigs) ProtoMessage() {}

func (x *HostapdOverrideableConfigs) ProtoReflect() protoreflect.Message {
	mi := &file_wifi_protos_mconfig_wifi_mconfigs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostapdOverrideableConfigs.ProtoReflect.Descriptor instead.
func (*HostapdOverrideableConfigs) Descriptor() ([]byte, []int) {
	return file_wifi_protos_mconfig_wifi_mconfigs_proto_rawDescGZIP(), []int{1}
}

func (x *HostapdOverrideableConfigs) GetSsid() string {
	if x != nil {
		return x.Ssid
	}
	return ""
}

func (x *HostapdOverrideableConfigs) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *HostapdOverrideableConfigs) GetXwfEnabled() bool {
	if x != nil {
		return x.XwfEnabled
	}
	return false
}

type Linkstatsd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ping stats configuration
	PingHostList    []string `protobuf:"bytes,1,rep,name=ping_host_list,json=pingHostList,proto3" json:"ping_host_list,omitempty"`
	PingNumPackets  int32    `protobuf:"varint,2,opt,name=ping_num_packets,json=pingNumPackets,proto3" json:"ping_num_packets,omitempty"`
	PingTimeoutSecs int32    `protobuf:"varint,3,opt,name=ping_timeout_secs,json=pingTimeoutSecs,proto3" json:"ping_timeout_secs,omitempty"`
}

func (x *Linkstatsd) Reset() {
	*x = Linkstatsd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wifi_protos_mconfig_wifi_mconfigs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Linkstatsd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Linkstatsd) ProtoMessage() {}

func (x *Linkstatsd) ProtoReflect() protoreflect.Message {
	mi := &file_wifi_protos_mconfig_wifi_mconfigs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Linkstatsd.ProtoReflect.Descriptor instead.
func (*Linkstatsd) Descriptor() ([]byte, []int) {
	return file_wifi_protos_mconfig_wifi_mconfigs_proto_rawDescGZIP(), []int{2}
}

func (x *Linkstatsd) GetPingHostList() []string {
	if x != nil {
		return x.PingHostList
	}
	return nil
}

func (x *Linkstatsd) GetPingNumPackets() int32 {
	if x != nil {
		return x.PingNumPackets
	}
	return 0
}

func (x *Linkstatsd) GetPingTimeoutSecs() int32 {
	if x != nil {
		return x.PingTimeoutSecs
	}
	return 0
}

type Xwfchilli struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// expresswifi configs
	XwfEnabled      bool   `protobuf:"varint,1,opt,name=xwf_enabled,json=xwfEnabled,proto3" json:"xwf_enabled,omitempty"`
	XwfRadiusServer string `protobuf:"bytes,2,opt,name=xwf_radius_server,json=xwfRadiusServer,proto3" json:"xwf_radius_server,omitempty"`
	// Contents of xwf.conf
	XwfConfig string `protobuf:"bytes,4,opt,name=xwf_config,json=xwfConfig,proto3" json:"xwf_config,omitempty"`
	// DNS IPs for Chilli's DHCP server to hand out
	XwfDhcpDns1 string `protobuf:"bytes,5,opt,name=xwf_dhcp_dns1,json=xwfDhcpDns1,proto3" json:"xwf_dhcp_dns1,omitempty"`
	XwfDhcpDns2 string `protobuf:"bytes,6,opt,name=xwf_dhcp_dns2,json=xwfDhcpDns2,proto3" json:"xwf_dhcp_dns2,omitempty"`
	// PSK for the RADIUS server
	XwfRadiusSharedSecret string `protobuf:"bytes,7,opt,name=xwf_radius_shared_secret,json=xwfRadiusSharedSecret,proto3" json:"xwf_radius_shared_secret,omitempty"`
	// Port number to use for RADIUS auth messages
	XwfRadiusAuthPort int32 `protobuf:"varint,8,opt,name=xwf_radius_auth_port,json=xwfRadiusAuthPort,proto3" json:"xwf_radius_auth_port,omitempty"`
	// Port number to use for RADIUS accounting messages
	XwfRadiusAcctPort int32 `protobuf:"varint,9,opt,name=xwf_radius_acct_port,json=xwfRadiusAcctPort,proto3" json:"xwf_radius_acct_port,omitempty"`
	// PSK for the XWF UAM
	XwfUamSecret string `protobuf:"bytes,10,opt,name=xwf_uam_secret,json=xwfUamSecret,proto3" json:"xwf_uam_secret,omitempty"`
	// XWF parter name as specified in the partner's captive portal url
	// i.e. https://<<xwf_partner_name>>.expresswifi.com/customer/captive_portal/
	XwfPartnerName string `protobuf:"bytes,11,opt,name=xwf_partner_name,json=xwfPartnerName,proto3" json:"xwf_partner_name,omitempty"`
	// used for NAS
	NetworkId string `protobuf:"bytes,12,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	MeshId    string `protobuf:"bytes,13,opt,name=mesh_id,json=meshId,proto3" json:"mesh_id,omitempty"`
	GatewayId string `protobuf:"bytes,14,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	// for streamer - should be left unused by gateway
	UseOverrideXwf bool                          `protobuf:"varint,15,opt,name=use_override_xwf,json=useOverrideXwf,proto3" json:"use_override_xwf,omitempty"`
	BaseConfigs    *XwfchilliOverrideableConfigs `protobuf:"bytes,16,opt,name=base_configs,json=baseConfigs,proto3" json:"base_configs,omitempty"`
	// deprecated fields
	XwfTrafficClasses []string `protobuf:"bytes,3,rep,name=xwf_traffic_classes,json=xwfTrafficClasses,proto3" json:"xwf_traffic_classes,omitempty"`
}

func (x *Xwfchilli) Reset() {
	*x = Xwfchilli{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wifi_protos_mconfig_wifi_mconfigs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Xwfchilli) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Xwfchilli) ProtoMessage() {}

func (x *Xwfchilli) ProtoReflect() protoreflect.Message {
	mi := &file_wifi_protos_mconfig_wifi_mconfigs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Xwfchilli.ProtoReflect.Descriptor instead.
func (*Xwfchilli) Descriptor() ([]byte, []int) {
	return file_wifi_protos_mconfig_wifi_mconfigs_proto_rawDescGZIP(), []int{3}
}

func (x *Xwfchilli) GetXwfEnabled() bool {
	if x != nil {
		return x.XwfEnabled
	}
	return false
}

func (x *Xwfchilli) GetXwfRadiusServer() string {
	if x != nil {
		return x.XwfRadiusServer
	}
	return ""
}

func (x *Xwfchilli) GetXwfConfig() string {
	if x != nil {
		return x.XwfConfig
	}
	return ""
}

func (x *Xwfchilli) GetXwfDhcpDns1() string {
	if x != nil {
		return x.XwfDhcpDns1
	}
	return ""
}

func (x *Xwfchilli) GetXwfDhcpDns2() string {
	if x != nil {
		return x.XwfDhcpDns2
	}
	return ""
}

func (x *Xwfchilli) GetXwfRadiusSharedSecret() string {
	if x != nil {
		return x.XwfRadiusSharedSecret
	}
	return ""
}

func (x *Xwfchilli) GetXwfRadiusAuthPort() int32 {
	if x != nil {
		return x.XwfRadiusAuthPort
	}
	return 0
}

func (x *Xwfchilli) GetXwfRadiusAcctPort() int32 {
	if x != nil {
		return x.XwfRadiusAcctPort
	}
	return 0
}

func (x *Xwfchilli) GetXwfUamSecret() string {
	if x != nil {
		return x.XwfUamSecret
	}
	return ""
}

func (x *Xwfchilli) GetXwfPartnerName() string {
	if x != nil {
		return x.XwfPartnerName
	}
	return ""
}

func (x *Xwfchilli) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *Xwfchilli) GetMeshId() string {
	if x != nil {
		return x.MeshId
	}
	return ""
}

func (x *Xwfchilli) GetGatewayId() string {
	if x != nil {
		return x.GatewayId
	}
	return ""
}

func (x *Xwfchilli) GetUseOverrideXwf() bool {
	if x != nil {
		return x.UseOverrideXwf
	}
	return false
}

func (x *Xwfchilli) GetBaseConfigs() *XwfchilliOverrideableConfigs {
	if x != nil {
		return x.BaseConfigs
	}
	return nil
}

func (x *Xwfchilli) GetXwfTrafficClasses() []string {
	if x != nil {
		return x.XwfTrafficClasses
	}
	return nil
}

// Base XWF configuration derived from the mesh and network configs. This is
// here so the mconfig streamer knows what values to revert to if the gateway
// overrides are disabled
type XwfchilliOverrideableConfigs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// expresswifi configs
	XwfEnabled      bool   `protobuf:"varint,1,opt,name=xwf_enabled,json=xwfEnabled,proto3" json:"xwf_enabled,omitempty"`
	XwfRadiusServer string `protobuf:"bytes,2,opt,name=xwf_radius_server,json=xwfRadiusServer,proto3" json:"xwf_radius_server,omitempty"`
	// Contents of xwf.conf
	XwfConfig string `protobuf:"bytes,3,opt,name=xwf_config,json=xwfConfig,proto3" json:"xwf_config,omitempty"`
	// DNS IPs for Chilli's DHCP server to hand out
	XwfDhcpDns1 string `protobuf:"bytes,4,opt,name=xwf_dhcp_dns1,json=xwfDhcpDns1,proto3" json:"xwf_dhcp_dns1,omitempty"`
	XwfDhcpDns2 string `protobuf:"bytes,5,opt,name=xwf_dhcp_dns2,json=xwfDhcpDns2,proto3" json:"xwf_dhcp_dns2,omitempty"`
	// PSK for the RADIUS server
	XwfRadiusSharedSecret string `protobuf:"bytes,6,opt,name=xwf_radius_shared_secret,json=xwfRadiusSharedSecret,proto3" json:"xwf_radius_shared_secret,omitempty"`
	// Port number to use for RADIUS auth messages
	XwfRadiusAuthPort int32 `protobuf:"varint,7,opt,name=xwf_radius_auth_port,json=xwfRadiusAuthPort,proto3" json:"xwf_radius_auth_port,omitempty"`
	// Port number to use for RADIUS accounting messages
	XwfRadiusAcctPort int32 `protobuf:"varint,8,opt,name=xwf_radius_acct_port,json=xwfRadiusAcctPort,proto3" json:"xwf_radius_acct_port,omitempty"`
	// PSK for the XWF UAM
	XwfUamSecret string `protobuf:"bytes,9,opt,name=xwf_uam_secret,json=xwfUamSecret,proto3" json:"xwf_uam_secret,omitempty"`
	// XWF parter name as specified in the partner's captive portal url
	// i.e. https://<<xwf_partner_name>>.expresswifi.com/customer/captive_portal/
	XwfPartnerName string `protobuf:"bytes,10,opt,name=xwf_partner_name,json=xwfPartnerName,proto3" json:"xwf_partner_name,omitempty"`
}

func (x *XwfchilliOverrideableConfigs) Reset() {
	*x = XwfchilliOverrideableConfigs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wifi_protos_mconfig_wifi_mconfigs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XwfchilliOverrideableConfigs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XwfchilliOverrideableConfigs) ProtoMessage() {}

func (x *XwfchilliOverrideableConfigs) ProtoReflect() protoreflect.Message {
	mi := &file_wifi_protos_mconfig_wifi_mconfigs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XwfchilliOverrideableConfigs.ProtoReflect.Descriptor instead.
func (*XwfchilliOverrideableConfigs) Descriptor() ([]byte, []int) {
	return file_wifi_protos_mconfig_wifi_mconfigs_proto_rawDescGZIP(), []int{4}
}

func (x *XwfchilliOverrideableConfigs) GetXwfEnabled() bool {
	if x != nil {
		return x.XwfEnabled
	}
	return false
}

func (x *XwfchilliOverrideableConfigs) GetXwfRadiusServer() string {
	if x != nil {
		return x.XwfRadiusServer
	}
	return ""
}

func (x *XwfchilliOverrideableConfigs) GetXwfConfig() string {
	if x != nil {
		return x.XwfConfig
	}
	return ""
}

func (x *XwfchilliOverrideableConfigs) GetXwfDhcpDns1() string {
	if x != nil {
		return x.XwfDhcpDns1
	}
	return ""
}

func (x *XwfchilliOverrideableConfigs) GetXwfDhcpDns2() string {
	if x != nil {
		return x.XwfDhcpDns2
	}
	return ""
}

func (x *XwfchilliOverrideableConfigs) GetXwfRadiusSharedSecret() string {
	if x != nil {
		return x.XwfRadiusSharedSecret
	}
	return ""
}

func (x *XwfchilliOverrideableConfigs) GetXwfRadiusAuthPort() int32 {
	if x != nil {
		return x.XwfRadiusAuthPort
	}
	return 0
}

func (x *XwfchilliOverrideableConfigs) GetXwfRadiusAcctPort() int32 {
	if x != nil {
		return x.XwfRadiusAcctPort
	}
	return 0
}

func (x *XwfchilliOverrideableConfigs) GetXwfUamSecret() string {
	if x != nil {
		return x.XwfUamSecret
	}
	return ""
}

func (x *XwfchilliOverrideableConfigs) GetXwfPartnerName() string {
	if x != nil {
		return x.XwfPartnerName
	}
	return ""
}

type Meshd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// fbmeshd configs
	MeshRssiThreshold int32  `protobuf:"varint,1,opt,name=mesh_rssi_threshold,json=meshRssiThreshold,proto3" json:"mesh_rssi_threshold,omitempty"`
	MeshSsid          string `protobuf:"bytes,2,opt,name=mesh_ssid,json=meshSsid,proto3" json:"mesh_ssid,omitempty"`
	MeshFrequency     int32  `protobuf:"varint,3,opt,name=mesh_frequency,json=meshFrequency,proto3" json:"mesh_frequency,omitempty"`
	MeshChannelType   string `protobuf:"bytes,4,opt,name=mesh_channel_type,json=meshChannelType,proto3" json:"mesh_channel_type,omitempty"`
}

func (x *Meshd) Reset() {
	*x = Meshd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wifi_protos_mconfig_wifi_mconfigs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meshd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meshd) ProtoMessage() {}

func (x *Meshd) ProtoReflect() protoreflect.Message {
	mi := &file_wifi_protos_mconfig_wifi_mconfigs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meshd.ProtoReflect.Descriptor instead.
func (*Meshd) Descriptor() ([]byte, []int) {
	return file_wifi_protos_mconfig_wifi_mconfigs_proto_rawDescGZIP(), []int{5}
}

func (x *Meshd) GetMeshRssiThreshold() int32 {
	if x != nil {
		return x.MeshRssiThreshold
	}
	return 0
}

func (x *Meshd) GetMeshSsid() string {
	if x != nil {
		return x.MeshSsid
	}
	return ""
}

func (x *Meshd) GetMeshFrequency() int32 {
	if x != nil {
		return x.MeshFrequency
	}
	return 0
}

func (x *Meshd) GetMeshChannelType() string {
	if x != nil {
		return x.MeshChannelType
	}
	return ""
}

type Openvpn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// management vpn configs
	MgmtVpnEnabled bool   `protobuf:"varint,1,opt,name=mgmt_vpn_enabled,json=mgmtVpnEnabled,proto3" json:"mgmt_vpn_enabled,omitempty"`
	MgmtVpnProto   string `protobuf:"bytes,2,opt,name=mgmt_vpn_proto,json=mgmtVpnProto,proto3" json:"mgmt_vpn_proto,omitempty"`
	MgmtVpnRemote  string `protobuf:"bytes,3,opt,name=mgmt_vpn_remote,json=mgmtVpnRemote,proto3" json:"mgmt_vpn_remote,omitempty"`
}

func (x *Openvpn) Reset() {
	*x = Openvpn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wifi_protos_mconfig_wifi_mconfigs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Openvpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Openvpn) ProtoMessage() {}

func (x *Openvpn) ProtoReflect() protoreflect.Message {
	mi := &file_wifi_protos_mconfig_wifi_mconfigs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Openvpn.ProtoReflect.Descriptor instead.
func (*Openvpn) Descriptor() ([]byte, []int) {
	return file_wifi_protos_mconfig_wifi_mconfigs_proto_rawDescGZIP(), []int{6}
}

func (x *Openvpn) GetMgmtVpnEnabled() bool {
	if x != nil {
		return x.MgmtVpnEnabled
	}
	return false
}

func (x *Openvpn) GetMgmtVpnProto() string {
	if x != nil {
		return x.MgmtVpnProto
	}
	return ""
}

func (x *Openvpn) GetMgmtVpnRemote() string {
	if x != nil {
		return x.MgmtVpnRemote
	}
	return ""
}

type Openr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// open/r configs
	OpenrEnabled bool `protobuf:"varint,1,opt,name=openr_enabled,json=openrEnabled,proto3" json:"openr_enabled,omitempty"`
}

func (x *Openr) Reset() {
	*x = Openr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wifi_protos_mconfig_wifi_mconfigs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Openr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Openr) ProtoMessage() {}

func (x *Openr) ProtoReflect() protoreflect.Message {
	mi := &file_wifi_protos_mconfig_wifi_mconfigs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Openr.ProtoReflect.Descriptor instead.
func (*Openr) Descriptor() ([]byte, []int) {
	return file_wifi_protos_mconfig_wifi_mconfigs_proto_rawDescGZIP(), []int{7}
}

func (x *Openr) GetOpenrEnabled() bool {
	if x != nil {
		return x.OpenrEnabled
	}
	return false
}

type WifiMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// device metadata, not consumed by a service but may be useful to have on the device
	Info               string   `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Latitude           float64  `protobuf:"fixed64,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude          float64  `protobuf:"fixed64,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
	NetworkId          string   `protobuf:"bytes,4,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	MeshId             string   `protobuf:"bytes,5,opt,name=mesh_id,json=meshId,proto3" json:"mesh_id,omitempty"`
	GatewayId          string   `protobuf:"bytes,6,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	MeshPeerGatewayIds []string `protobuf:"bytes,7,rep,name=mesh_peer_gateway_ids,json=meshPeerGatewayIds,proto3" json:"mesh_peer_gateway_ids,omitempty"`
	IsProduction       bool     `protobuf:"varint,8,opt,name=is_production,json=isProduction,proto3" json:"is_production,omitempty"`
}

func (x *WifiMetadata) Reset() {
	*x = WifiMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wifi_protos_mconfig_wifi_mconfigs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiMetadata) ProtoMessage() {}

func (x *WifiMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_wifi_protos_mconfig_wifi_mconfigs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiMetadata.ProtoReflect.Descriptor instead.
func (*WifiMetadata) Descriptor() ([]byte, []int) {
	return file_wifi_protos_mconfig_wifi_mconfigs_proto_rawDescGZIP(), []int{8}
}

func (x *WifiMetadata) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *WifiMetadata) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *WifiMetadata) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *WifiMetadata) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *WifiMetadata) GetMeshId() string {
	if x != nil {
		return x.MeshId
	}
	return ""
}

func (x *WifiMetadata) GetGatewayId() string {
	if x != nil {
		return x.GatewayId
	}
	return ""
}

func (x *WifiMetadata) GetMeshPeerGatewayIds() []string {
	if x != nil {
		return x.MeshPeerGatewayIds
	}
	return nil
}

func (x *WifiMetadata) GetIsProduction() bool {
	if x != nil {
		return x.IsProduction
	}
	return false
}

type WifiProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info               string            `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	NetworkId          string            `protobuf:"bytes,2,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	MeshId             string            `protobuf:"bytes,3,opt,name=mesh_id,json=meshId,proto3" json:"mesh_id,omitempty"`
	GatewayId          string            `protobuf:"bytes,4,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	MeshPeerGatewayIds []string          `protobuf:"bytes,5,rep,name=mesh_peer_gateway_ids,json=meshPeerGatewayIds,proto3" json:"mesh_peer_gateway_ids,omitempty"`
	NetworkProps       map[string]string `protobuf:"bytes,6,rep,name=network_props,json=networkProps,proto3" json:"network_props,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MeshProps          map[string]string `protobuf:"bytes,7,rep,name=mesh_props,json=meshProps,proto3" json:"mesh_props,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	GatewayProps       map[string]string `protobuf:"bytes,8,rep,name=gateway_props,json=gatewayProps,proto3" json:"gateway_props,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WifiProperties) Reset() {
	*x = WifiProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wifi_protos_mconfig_wifi_mconfigs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiProperties) ProtoMessage() {}

func (x *WifiProperties) ProtoReflect() protoreflect.Message {
	mi := &file_wifi_protos_mconfig_wifi_mconfigs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiProperties.ProtoReflect.Descriptor instead.
func (*WifiProperties) Descriptor() ([]byte, []int) {
	return file_wifi_protos_mconfig_wifi_mconfigs_proto_rawDescGZIP(), []int{9}
}

func (x *WifiProperties) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *WifiProperties) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *WifiProperties) GetMeshId() string {
	if x != nil {
		return x.MeshId
	}
	return ""
}

func (x *WifiProperties) GetGatewayId() string {
	if x != nil {
		return x.GatewayId
	}
	return ""
}

func (x *WifiProperties) GetMeshPeerGatewayIds() []string {
	if x != nil {
		return x.MeshPeerGatewayIds
	}
	return nil
}

func (x *WifiProperties) GetNetworkProps() map[string]string {
	if x != nil {
		return x.NetworkProps
	}
	return nil
}

func (x *WifiProperties) GetMeshProps() map[string]string {
	if x != nil {
		return x.MeshProps
	}
	return nil
}

func (x *WifiProperties) GetGatewayProps() map[string]string {
	if x != nil {
		return x.GatewayProps
	}
	return nil
}

var File_wifi_protos_mconfig_wifi_mconfigs_proto protoreflect.FileDescriptor

var file_wifi_protos_mconfig_wifi_mconfigs_proto_rawDesc = []byte{
	0x0a, 0x27, 0x77, 0x69, 0x66, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x6d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xd7, 0x03, 0x0a, 0x07, 0x48, 0x6f, 0x73,
	0x74, 0x61, 0x70, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x73, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6c, 0x5f, 0x73, 0x73, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6c, 0x53, 0x73, 0x69, 0x64, 0x12, 0x2d, 0x0a,
	0x13, 0x76, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x6c, 0x41, 0x75,
	0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2d, 0x0a, 0x13,
	0x76, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x76, 0x6c, 0x41, 0x75, 0x74,
	0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x3e, 0x0a, 0x1c, 0x76,
	0x6c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x18, 0x76, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x77,
	0x69, 0x66, 0x69, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x77, 0x69, 0x66, 0x69, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x78, 0x77, 0x66, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x78, 0x77,
	0x66, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x73, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x53, 0x73, 0x69, 0x64, 0x12, 0x4c, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x61,
	0x70, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x22, 0x6d, 0x0a, 0x1a, 0x48, 0x6f, 0x73, 0x74, 0x61, 0x70, 0x64, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x73, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x78, 0x77, 0x66, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x78, 0x77, 0x66, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x22, 0x88, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x74, 0x61, 0x74, 0x73, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x48, 0x6f,
	0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6e,
	0x75, 0x6d, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x73, 0x22, 0xab, 0x05, 0x0a,
	0x09, 0x58, 0x77, 0x66, 0x63, 0x68, 0x69, 0x6c, 0x6c, 0x69, 0x12, 0x1f, 0x0a, 0x0b, 0x78, 0x77,
	0x66, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x78, 0x77, 0x66, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x78,
	0x77, 0x66, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x78, 0x77, 0x66, 0x52, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x78, 0x77, 0x66, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x78, 0x77, 0x66,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x78, 0x77, 0x66, 0x5f, 0x64, 0x68,
	0x63, 0x70, 0x5f, 0x64, 0x6e, 0x73, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x78,
	0x77, 0x66, 0x44, 0x68, 0x63, 0x70, 0x44, 0x6e, 0x73, 0x31, 0x12, 0x22, 0x0a, 0x0d, 0x78, 0x77,
	0x66, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x64, 0x6e, 0x73, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x78, 0x77, 0x66, 0x44, 0x68, 0x63, 0x70, 0x44, 0x6e, 0x73, 0x32, 0x12, 0x37,
	0x0a, 0x18, 0x78, 0x77, 0x66, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x78, 0x77, 0x66, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x78, 0x77, 0x66, 0x5f, 0x72,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x78, 0x77, 0x66, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x41, 0x75, 0x74, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x78, 0x77, 0x66, 0x5f,
	0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x78, 0x77, 0x66, 0x52, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x41, 0x63, 0x63, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x78, 0x77, 0x66,
	0x5f, 0x75, 0x61, 0x6d, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x78, 0x77, 0x66, 0x55, 0x61, 0x6d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x78, 0x77, 0x66, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x78, 0x77, 0x66, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x5f, 0x78, 0x77, 0x66, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x58, 0x77, 0x66, 0x12, 0x4e, 0x0a, 0x0c, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x58, 0x77, 0x66, 0x63, 0x68, 0x69, 0x6c, 0x6c, 0x69, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x0b, 0x62,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x78, 0x77,
	0x66, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x78, 0x77, 0x66, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x22, 0xbd, 0x03, 0x0a, 0x1c, 0x58,
	0x77, 0x66, 0x63, 0x68, 0x69, 0x6c, 0x6c, 0x69, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x78,
	0x77, 0x66, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x78, 0x77, 0x66, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x78, 0x77, 0x66, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x78, 0x77, 0x66, 0x52, 0x61, 0x64, 0x69,
	0x75, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x78, 0x77, 0x66, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x78, 0x77,
	0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x78, 0x77, 0x66, 0x5f, 0x64,
	0x68, 0x63, 0x70, 0x5f, 0x64, 0x6e, 0x73, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x78, 0x77, 0x66, 0x44, 0x68, 0x63, 0x70, 0x44, 0x6e, 0x73, 0x31, 0x12, 0x22, 0x0a, 0x0d, 0x78,
	0x77, 0x66, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x64, 0x6e, 0x73, 0x32, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x78, 0x77, 0x66, 0x44, 0x68, 0x63, 0x70, 0x44, 0x6e, 0x73, 0x32, 0x12,
	0x37, 0x0a, 0x18, 0x78, 0x77, 0x66, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x78, 0x77, 0x66, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x78, 0x77, 0x66, 0x5f,
	0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x78, 0x77, 0x66, 0x52, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x41, 0x75, 0x74, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x78, 0x77, 0x66,
	0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x78, 0x77, 0x66, 0x52, 0x61, 0x64, 0x69,
	0x75, 0x73, 0x41, 0x63, 0x63, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x78, 0x77,
	0x66, 0x5f, 0x75, 0x61, 0x6d, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x78, 0x77, 0x66, 0x55, 0x61, 0x6d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x78, 0x77, 0x66, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x78, 0x77, 0x66, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x05, 0x4d,
	0x65, 0x73, 0x68, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x72, 0x73, 0x73,
	0x69, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x68, 0x52, 0x73, 0x73, 0x69, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x73, 0x73, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x68, 0x53, 0x73, 0x69,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x68, 0x46,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x68,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x07, 0x4f, 0x70, 0x65, 0x6e, 0x76, 0x70, 0x6e,
	0x12, 0x28, 0x0a, 0x10, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x76, 0x70, 0x6e, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6d, 0x67, 0x6d, 0x74,
	0x56, 0x70, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x67,
	0x6d, 0x74, 0x5f, 0x76, 0x70, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x67, 0x6d, 0x74, 0x56, 0x70, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x76, 0x70, 0x6e, 0x5f, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x67, 0x6d, 0x74, 0x56,
	0x70, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x22, 0x2c, 0x0a, 0x05, 0x4f, 0x70, 0x65, 0x6e,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x8b, 0x02, 0x0a, 0x0c, 0x57, 0x69, 0x66, 0x69, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15,
	0x6d, 0x65, 0x73, 0x68, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x65, 0x73,
	0x68, 0x50, 0x65, 0x65, 0x72, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe7, 0x04, 0x0a, 0x0e, 0x57, 0x69, 0x66, 0x69, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x73,
	0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x12, 0x6d, 0x65, 0x73, 0x68, 0x50, 0x65, 0x65, 0x72, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x49, 0x64, 0x73, 0x12, 0x54, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x69, 0x66,
	0x69, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x4b, 0x0a, 0x0a, 0x6d,
	0x65, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x57, 0x69, 0x66, 0x69, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4d,
	0x65, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d,
	0x65, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x54, 0x0a, 0x0d, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x57, 0x69, 0x66, 0x69, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x1a, 0x3f,
	0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3c, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a,
	0x11, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x24,
	0x5a, 0x22, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f, 0x77, 0x69, 0x66, 0x69, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wifi_protos_mconfig_wifi_mconfigs_proto_rawDescOnce sync.Once
	file_wifi_protos_mconfig_wifi_mconfigs_proto_rawDescData = file_wifi_protos_mconfig_wifi_mconfigs_proto_rawDesc
)

func file_wifi_protos_mconfig_wifi_mconfigs_proto_rawDescGZIP() []byte {
	file_wifi_protos_mconfig_wifi_mconfigs_proto_rawDescOnce.Do(func() {
		file_wifi_protos_mconfig_wifi_mconfigs_proto_rawDescData = protoimpl.X.CompressGZIP(file_wifi_protos_mconfig_wifi_mconfigs_proto_rawDescData)
	})
	return file_wifi_protos_mconfig_wifi_mconfigs_proto_rawDescData
}

var file_wifi_protos_mconfig_wifi_mconfigs_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_wifi_protos_mconfig_wifi_mconfigs_proto_goTypes = []interface{}{
	(*Hostapd)(nil),                      // 0: magma.mconfig.Hostapd
	(*HostapdOverrideableConfigs)(nil),   // 1: magma.mconfig.HostapdOverrideableConfigs
	(*Linkstatsd)(nil),                   // 2: magma.mconfig.Linkstatsd
	(*Xwfchilli)(nil),                    // 3: magma.mconfig.Xwfchilli
	(*XwfchilliOverrideableConfigs)(nil), // 4: magma.mconfig.XwfchilliOverrideableConfigs
	(*Meshd)(nil),                        // 5: magma.mconfig.Meshd
	(*Openvpn)(nil),                      // 6: magma.mconfig.Openvpn
	(*Openr)(nil),                        // 7: magma.mconfig.Openr
	(*WifiMetadata)(nil),                 // 8: magma.mconfig.WifiMetadata
	(*WifiProperties)(nil),               // 9: magma.mconfig.WifiProperties
	nil,                                  // 10: magma.mconfig.WifiProperties.NetworkPropsEntry
	nil,                                  // 11: magma.mconfig.WifiProperties.MeshPropsEntry
	nil,                                  // 12: magma.mconfig.WifiProperties.GatewayPropsEntry
}
var file_wifi_protos_mconfig_wifi_mconfigs_proto_depIdxs = []int32{
	1,  // 0: magma.mconfig.Hostapd.base_configs:type_name -> magma.mconfig.HostapdOverrideableConfigs
	4,  // 1: magma.mconfig.Xwfchilli.base_configs:type_name -> magma.mconfig.XwfchilliOverrideableConfigs
	10, // 2: magma.mconfig.WifiProperties.network_props:type_name -> magma.mconfig.WifiProperties.NetworkPropsEntry
	11, // 3: magma.mconfig.WifiProperties.mesh_props:type_name -> magma.mconfig.WifiProperties.MeshPropsEntry
	12, // 4: magma.mconfig.WifiProperties.gateway_props:type_name -> magma.mconfig.WifiProperties.GatewayPropsEntry
	5,  // [5:5] is the sub-list for method output_type
	5,  // [5:5] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_wifi_protos_mconfig_wifi_mconfigs_proto_init() }
func file_wifi_protos_mconfig_wifi_mconfigs_proto_init() {
	if File_wifi_protos_mconfig_wifi_mconfigs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wifi_protos_mconfig_wifi_mconfigs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hostapd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wifi_protos_mconfig_wifi_mconfigs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostapdOverrideableConfigs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wifi_protos_mconfig_wifi_mconfigs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Linkstatsd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wifi_protos_mconfig_wifi_mconfigs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Xwfchilli); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wifi_protos_mconfig_wifi_mconfigs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XwfchilliOverrideableConfigs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wifi_protos_mconfig_wifi_mconfigs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meshd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wifi_protos_mconfig_wifi_mconfigs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Openvpn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wifi_protos_mconfig_wifi_mconfigs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Openr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wifi_protos_mconfig_wifi_mconfigs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wifi_protos_mconfig_wifi_mconfigs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wifi_protos_mconfig_wifi_mconfigs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wifi_protos_mconfig_wifi_mconfigs_proto_goTypes,
		DependencyIndexes: file_wifi_protos_mconfig_wifi_mconfigs_proto_depIdxs,
		MessageInfos:      file_wifi_protos_mconfig_wifi_mconfigs_proto_msgTypes,
	}.Build()
	File_wifi_protos_mconfig_wifi_mconfigs_proto = out.File
	file_wifi_protos_mconfig_wifi_mconfigs_proto_rawDesc = nil
	file_wifi_protos_mconfig_wifi_mconfigs_proto_goTypes = nil
	file_wifi_protos_mconfig_wifi_mconfigs_proto_depIdxs = nil
}
