// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	models1 "magma/orc8r/cloud/go/models"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WifiMesh Nodes in a mesh network
// swagger:model wifi_mesh
type WifiMesh struct {

	// config
	// Required: true
	Config *MeshWifiConfigs `json:"config"`

	// gateway ids
	// Required: true
	GatewayIds []models1.GatewayID `json:"gateway_ids"`

	// id
	// Required: true
	ID MeshID `json:"id"`

	// name
	// Required: true
	Name MeshName `json:"name"`
}

// Validate validates this wifi mesh
func (m *WifiMesh) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGatewayIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WifiMesh) validateConfig(formats strfmt.Registry) error {

	if err := validate.Required("config", "body", m.Config); err != nil {
		return err
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *WifiMesh) validateGatewayIds(formats strfmt.Registry) error {

	if err := validate.Required("gateway_ids", "body", m.GatewayIds); err != nil {
		return err
	}

	for i := 0; i < len(m.GatewayIds); i++ {

		if err := m.GatewayIds[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gateway_ids" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *WifiMesh) validateID(formats strfmt.Registry) error {

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *WifiMesh) validateName(formats strfmt.Registry) error {

	if err := m.Name.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("name")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WifiMesh) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WifiMesh) UnmarshalBinary(b []byte) error {
	var res WifiMesh
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
