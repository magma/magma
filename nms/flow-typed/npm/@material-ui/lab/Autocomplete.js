/**
 * Flowtype definitions for Autocomplete
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 */

declare module "@material-ui/lab/Autocomplete" {

    import type { ComponentType, Node } from "react";
    import type { CreateFilterOptions, UseAutocompleteProps } from "./useAutocomplete";
    import type { StandardProps } from "@material-ui/core";
    import type { TextFieldProps } from "@material-ui/core/TextField";

    declare type PopupProps = {
        anchorEl?: HTMLElement,
        open: boolean,
        popperRef: React$Ref<mixed>,
        ...
    } & React$HTMLAttributes<HTMLElement>;

    declare var createFilterOptions: CreateFilterOptions;

    declare interface RenderOptionState {
        inputValue: string;
        selected: boolean;
    }

    declare interface RenderValueState {
        className: string;
        onDelete: (SyntheticEvent<*>) => void;
    }

    declare interface RenderGroupParams {
        key: string;
        children: React$ReactNode;
    }

    declare interface RenderInputParams {
        ref: React.Ref<any>;
        InputLabelProps: { [key: string]: any };
        InputProps: {
            className: string,
            startAdornment: React$ReactNode,
            endAdornment: React$ReactNode,
            ...
        };
        inputProps: { [key: string]: any };
    }

    declare type AutocompleteProps = {
        /**
         * The component used to render the listbox.
         */
        ListboxComponent?: React.ComponentType<React.HTMLAttributes<HTMLElement>>,

        /**
         * If `true`, the component is in a loading state.
         */
        loading?: boolean,

        /**
         * Text to display when in a loading state.
         */
        loadingText?: React$ReactNode,

        /**
         * Text to display when there are no options.
         */
        noOptionsText?: React$ReactNode,

        /**
         * The component used to render the body of the popup.
         */
        PaperComponent?: React.ComponentType<React.HTMLAttributes<HTMLElement>>,

        /**
         * The component used to render the popup.
         */
        PopupComponent?: React.ComponentType<PopupProps>,

        /**
         * Render the group.
         * @param {any} option The group to render.
         * @returns {ReactNode}
         */
        renderGroup?: (params: RenderGroupParams) => React$ReactNode,

        /**
         * Render the input.
         * @param {{[key: string]: any}} params
         * @returns {ReactNode}
         */
        renderInput: (params: RenderInputParams) => React$ReactNode,

        /**
         * Render the option, use `getOptionLabel` by default.
         * @param {any} option The option to render.
         * @param {{[key: string]: any}} state The state of the component.
         * @returns {ReactNode}
         */
        renderOption?: (option: any, state: RenderOptionState) => React$ReactNode,

        /**
         * Render the selected value.
         * @param {any} value The `value` provided to the component.
         * @returns {ReactNode}
         */
        renderTags?: (value: any, state: RenderValueState) => React$ReactNode,

        /**
         * Props applied to the [`TextField`](/api/text-field/) element.
         */
        TextFieldProps?: TextFieldProps,
        ...
    } & UseAutocompleteProps &
        StandardProps<
            React.HTMLAttributes<HTMLDivElement>,
            AutocompleteClassKey,
            "defaultValue" | "onChange" | "children"
        >;

    declare type AutocompleteClassKey =
        | "root"
        | "focused"
        | "tag"
        | "inputRoot"
        | "inputRootOutlined"
        | "inputRootFilled"
        | "input"
        | "inputFocused"
        | "clearIndicator"
        | "clearIndicatorDirty"
        | "popupIndicator"
        | "popupIndicatorOpen"
        | "popup"
        | "paper"
        | "listbox"
        | "option"
        | "loading"
        | "noOptions"
        | "groupLabel"
        | "groupUl";

    declare module.exports: ComponentType<AutocompleteProps>;

}