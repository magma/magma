/*
 *  Copyright 2020 The Magma Authors.
 *
 *  This source code is licensed under the BSD-style license found in the
 *  LICENSE file in the root directory of this source tree.
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"

	sms_ll "magma/lte/cloud/go/sms_ll"
)

// SMSSerde is an autogenerated mock type for the SMSSerde type
type SMSSerde struct {
	mock.Mock
}

// DecodeDelivery provides a mock function with given fields: input
func (_m *SMSSerde) DecodeDelivery(input []byte) (sms_ll.SMSDeliveryReport, error) {
	ret := _m.Called(input)

	var r0 sms_ll.SMSDeliveryReport
	if rf, ok := ret.Get(0).(func([]byte) sms_ll.SMSDeliveryReport); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(sms_ll.SMSDeliveryReport)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EncodeMessage provides a mock function with given fields: message, fromNum, timestamp, references
func (_m *SMSSerde) EncodeMessage(message string, fromNum string, timestamp time.Time, references []uint8) ([][]byte, error) {
	ret := _m.Called(message, fromNum, timestamp, references)

	var r0 [][]byte
	if rf, ok := ret.Get(0).(func(string, string, time.Time, []uint8) [][]byte); ok {
		r0 = rf(message, fromNum, timestamp, references)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, time.Time, []uint8) error); ok {
		r1 = rf(message, fromNum, timestamp, references)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
