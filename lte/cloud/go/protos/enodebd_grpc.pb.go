// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protos "magma/orc8r/lib/go/protos"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EnodebdClient is the client API for Enodebd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnodebdClient interface {
	// Sends GetParameterValues message to ENodeB. TR-069 supports multiple
	// parameter names per message, but only one is supported here.
	GetParameter(ctx context.Context, in *GetParameterRequest, opts ...grpc.CallOption) (*GetParameterResponse, error)
	// Sends SetParameterValues message to ENodeB. TR-069 supports multiple
	// parameter names per message, but only one is supported here.
	SetParameter(ctx context.Context, in *SetParameterRequest, opts ...grpc.CallOption) (*protos.Void, error)
	// Configure eNodeB based on enodebd config file
	Configure(ctx context.Context, in *EnodebIdentity, opts ...grpc.CallOption) (*protos.Void, error)
	// Reboot eNodeB
	Reboot(ctx context.Context, in *EnodebIdentity, opts ...grpc.CallOption) (*protos.Void, error)
	// Reboot every connected eNodeB
	RebootAll(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*protos.Void, error)
	// Get current status
	GetStatus(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*protos.ServiceStatus, error)
	// Get status info for all connected eNodeB devices
	GetAllEnodebStatus(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*AllEnodebStatus, error)
	// Get status info of a single connected eNodeB device
	GetEnodebStatus(ctx context.Context, in *EnodebIdentity, opts ...grpc.CallOption) (*SingleEnodebStatus, error)
}

type enodebdClient struct {
	cc grpc.ClientConnInterface
}

func NewEnodebdClient(cc grpc.ClientConnInterface) EnodebdClient {
	return &enodebdClient{cc}
}

func (c *enodebdClient) GetParameter(ctx context.Context, in *GetParameterRequest, opts ...grpc.CallOption) (*GetParameterResponse, error) {
	out := new(GetParameterResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.Enodebd/GetParameter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enodebdClient) SetParameter(ctx context.Context, in *SetParameterRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.Enodebd/SetParameter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enodebdClient) Configure(ctx context.Context, in *EnodebIdentity, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.Enodebd/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enodebdClient) Reboot(ctx context.Context, in *EnodebIdentity, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.Enodebd/Reboot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enodebdClient) RebootAll(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.Enodebd/RebootAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enodebdClient) GetStatus(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*protos.ServiceStatus, error) {
	out := new(protos.ServiceStatus)
	err := c.cc.Invoke(ctx, "/magma.lte.Enodebd/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enodebdClient) GetAllEnodebStatus(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*AllEnodebStatus, error) {
	out := new(AllEnodebStatus)
	err := c.cc.Invoke(ctx, "/magma.lte.Enodebd/GetAllEnodebStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enodebdClient) GetEnodebStatus(ctx context.Context, in *EnodebIdentity, opts ...grpc.CallOption) (*SingleEnodebStatus, error) {
	out := new(SingleEnodebStatus)
	err := c.cc.Invoke(ctx, "/magma.lte.Enodebd/GetEnodebStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnodebdServer is the server API for Enodebd service.
// All implementations should embed UnimplementedEnodebdServer
// for forward compatibility
type EnodebdServer interface {
	// Sends GetParameterValues message to ENodeB. TR-069 supports multiple
	// parameter names per message, but only one is supported here.
	GetParameter(context.Context, *GetParameterRequest) (*GetParameterResponse, error)
	// Sends SetParameterValues message to ENodeB. TR-069 supports multiple
	// parameter names per message, but only one is supported here.
	SetParameter(context.Context, *SetParameterRequest) (*protos.Void, error)
	// Configure eNodeB based on enodebd config file
	Configure(context.Context, *EnodebIdentity) (*protos.Void, error)
	// Reboot eNodeB
	Reboot(context.Context, *EnodebIdentity) (*protos.Void, error)
	// Reboot every connected eNodeB
	RebootAll(context.Context, *protos.Void) (*protos.Void, error)
	// Get current status
	GetStatus(context.Context, *protos.Void) (*protos.ServiceStatus, error)
	// Get status info for all connected eNodeB devices
	GetAllEnodebStatus(context.Context, *protos.Void) (*AllEnodebStatus, error)
	// Get status info of a single connected eNodeB device
	GetEnodebStatus(context.Context, *EnodebIdentity) (*SingleEnodebStatus, error)
}

// UnimplementedEnodebdServer should be embedded to have forward compatible implementations.
type UnimplementedEnodebdServer struct {
}

func (UnimplementedEnodebdServer) GetParameter(context.Context, *GetParameterRequest) (*GetParameterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParameter not implemented")
}
func (UnimplementedEnodebdServer) SetParameter(context.Context, *SetParameterRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetParameter not implemented")
}
func (UnimplementedEnodebdServer) Configure(context.Context, *EnodebIdentity) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (UnimplementedEnodebdServer) Reboot(context.Context, *EnodebIdentity) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reboot not implemented")
}
func (UnimplementedEnodebdServer) RebootAll(context.Context, *protos.Void) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebootAll not implemented")
}
func (UnimplementedEnodebdServer) GetStatus(context.Context, *protos.Void) (*protos.ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedEnodebdServer) GetAllEnodebStatus(context.Context, *protos.Void) (*AllEnodebStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllEnodebStatus not implemented")
}
func (UnimplementedEnodebdServer) GetEnodebStatus(context.Context, *EnodebIdentity) (*SingleEnodebStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnodebStatus not implemented")
}

// UnsafeEnodebdServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnodebdServer will
// result in compilation errors.
type UnsafeEnodebdServer interface {
	mustEmbedUnimplementedEnodebdServer()
}

func RegisterEnodebdServer(s grpc.ServiceRegistrar, srv EnodebdServer) {
	s.RegisterService(&Enodebd_ServiceDesc, srv)
}

func _Enodebd_GetParameter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParameterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnodebdServer).GetParameter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Enodebd/GetParameter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnodebdServer).GetParameter(ctx, req.(*GetParameterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Enodebd_SetParameter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetParameterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnodebdServer).SetParameter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Enodebd/SetParameter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnodebdServer).SetParameter(ctx, req.(*SetParameterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Enodebd_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnodebIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnodebdServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Enodebd/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnodebdServer).Configure(ctx, req.(*EnodebIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Enodebd_Reboot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnodebIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnodebdServer).Reboot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Enodebd/Reboot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnodebdServer).Reboot(ctx, req.(*EnodebIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Enodebd_RebootAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnodebdServer).RebootAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Enodebd/RebootAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnodebdServer).RebootAll(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Enodebd_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnodebdServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Enodebd/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnodebdServer).GetStatus(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Enodebd_GetAllEnodebStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnodebdServer).GetAllEnodebStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Enodebd/GetAllEnodebStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnodebdServer).GetAllEnodebStatus(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Enodebd_GetEnodebStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnodebIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnodebdServer).GetEnodebStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Enodebd/GetEnodebStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnodebdServer).GetEnodebStatus(ctx, req.(*EnodebIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

// Enodebd_ServiceDesc is the grpc.ServiceDesc for Enodebd service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Enodebd_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.Enodebd",
	HandlerType: (*EnodebdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetParameter",
			Handler:    _Enodebd_GetParameter_Handler,
		},
		{
			MethodName: "SetParameter",
			Handler:    _Enodebd_SetParameter_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _Enodebd_Configure_Handler,
		},
		{
			MethodName: "Reboot",
			Handler:    _Enodebd_Reboot_Handler,
		},
		{
			MethodName: "RebootAll",
			Handler:    _Enodebd_RebootAll_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _Enodebd_GetStatus_Handler,
		},
		{
			MethodName: "GetAllEnodebStatus",
			Handler:    _Enodebd_GetAllEnodebStatus_Handler,
		},
		{
			MethodName: "GetEnodebStatus",
			Handler:    _Enodebd_GetEnodebStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/enodebd.proto",
}
