// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.10.0
// source: lte/protos/eps_authentication.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EPSAuthenticationClient is the client API for EPSAuthentication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EPSAuthenticationClient interface {
	// Authentication-Information (Code 318)
	AuthenticationInformation(ctx context.Context, in *AuthenticationInformationRequest, opts ...grpc.CallOption) (*AuthenticationInformationAnswer, error)
	// Update-Location
	UpdateLocation(ctx context.Context, in *UpdateLocationRequest, opts ...grpc.CallOption) (*UpdateLocationAnswer, error)
	// Purge-UE
	PurgeUE(ctx context.Context, in *PurgeUERequest, opts ...grpc.CallOption) (*PurgeUEAnswer, error)
}

type ePSAuthenticationClient struct {
	cc grpc.ClientConnInterface
}

func NewEPSAuthenticationClient(cc grpc.ClientConnInterface) EPSAuthenticationClient {
	return &ePSAuthenticationClient{cc}
}

func (c *ePSAuthenticationClient) AuthenticationInformation(ctx context.Context, in *AuthenticationInformationRequest, opts ...grpc.CallOption) (*AuthenticationInformationAnswer, error) {
	out := new(AuthenticationInformationAnswer)
	err := c.cc.Invoke(ctx, "/magma.lte.EPSAuthentication/AuthenticationInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePSAuthenticationClient) UpdateLocation(ctx context.Context, in *UpdateLocationRequest, opts ...grpc.CallOption) (*UpdateLocationAnswer, error) {
	out := new(UpdateLocationAnswer)
	err := c.cc.Invoke(ctx, "/magma.lte.EPSAuthentication/UpdateLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePSAuthenticationClient) PurgeUE(ctx context.Context, in *PurgeUERequest, opts ...grpc.CallOption) (*PurgeUEAnswer, error) {
	out := new(PurgeUEAnswer)
	err := c.cc.Invoke(ctx, "/magma.lte.EPSAuthentication/PurgeUE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EPSAuthenticationServer is the server API for EPSAuthentication service.
// All implementations must embed UnimplementedEPSAuthenticationServer
// for forward compatibility
type EPSAuthenticationServer interface {
	// Authentication-Information (Code 318)
	AuthenticationInformation(context.Context, *AuthenticationInformationRequest) (*AuthenticationInformationAnswer, error)
	// Update-Location
	UpdateLocation(context.Context, *UpdateLocationRequest) (*UpdateLocationAnswer, error)
	// Purge-UE
	PurgeUE(context.Context, *PurgeUERequest) (*PurgeUEAnswer, error)
	mustEmbedUnimplementedEPSAuthenticationServer()
}

// UnimplementedEPSAuthenticationServer must be embedded to have forward compatible implementations.
type UnimplementedEPSAuthenticationServer struct {
}

func (UnimplementedEPSAuthenticationServer) AuthenticationInformation(context.Context, *AuthenticationInformationRequest) (*AuthenticationInformationAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticationInformation not implemented")
}
func (UnimplementedEPSAuthenticationServer) UpdateLocation(context.Context, *UpdateLocationRequest) (*UpdateLocationAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLocation not implemented")
}
func (UnimplementedEPSAuthenticationServer) PurgeUE(context.Context, *PurgeUERequest) (*PurgeUEAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeUE not implemented")
}
func (UnimplementedEPSAuthenticationServer) mustEmbedUnimplementedEPSAuthenticationServer() {}

// UnsafeEPSAuthenticationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EPSAuthenticationServer will
// result in compilation errors.
type UnsafeEPSAuthenticationServer interface {
	mustEmbedUnimplementedEPSAuthenticationServer()
}

func RegisterEPSAuthenticationServer(s grpc.ServiceRegistrar, srv EPSAuthenticationServer) {
	s.RegisterService(&EPSAuthentication_ServiceDesc, srv)
}

func _EPSAuthentication_AuthenticationInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPSAuthenticationServer).AuthenticationInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.EPSAuthentication/AuthenticationInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPSAuthenticationServer).AuthenticationInformation(ctx, req.(*AuthenticationInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPSAuthentication_UpdateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPSAuthenticationServer).UpdateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.EPSAuthentication/UpdateLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPSAuthenticationServer).UpdateLocation(ctx, req.(*UpdateLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPSAuthentication_PurgeUE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeUERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPSAuthenticationServer).PurgeUE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.EPSAuthentication/PurgeUE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPSAuthenticationServer).PurgeUE(ctx, req.(*PurgeUERequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EPSAuthentication_ServiceDesc is the grpc.ServiceDesc for EPSAuthentication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EPSAuthentication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.EPSAuthentication",
	HandlerType: (*EPSAuthenticationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthenticationInformation",
			Handler:    _EPSAuthentication_AuthenticationInformation_Handler,
		},
		{
			MethodName: "UpdateLocation",
			Handler:    _EPSAuthentication_UpdateLocation_Handler,
		},
		{
			MethodName: "PurgeUE",
			Handler:    _EPSAuthentication_PurgeUE_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/eps_authentication.proto",
}
