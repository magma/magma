//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: lte/protos/mobilityd.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	protos "magma/orc8r/lib/go/protos"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IPAddress_IPVersion int32

const (
	IPAddress_IPV4 IPAddress_IPVersion = 0
	IPAddress_IPV6 IPAddress_IPVersion = 1
)

// Enum value maps for IPAddress_IPVersion.
var (
	IPAddress_IPVersion_name = map[int32]string{
		0: "IPV4",
		1: "IPV6",
	}
	IPAddress_IPVersion_value = map[string]int32{
		"IPV4": 0,
		"IPV6": 1,
	}
)

func (x IPAddress_IPVersion) Enum() *IPAddress_IPVersion {
	p := new(IPAddress_IPVersion)
	*p = x
	return p
}

func (x IPAddress_IPVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPAddress_IPVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_mobilityd_proto_enumTypes[0].Descriptor()
}

func (IPAddress_IPVersion) Type() protoreflect.EnumType {
	return &file_lte_protos_mobilityd_proto_enumTypes[0]
}

func (x IPAddress_IPVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPAddress_IPVersion.Descriptor instead.
func (IPAddress_IPVersion) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_mobilityd_proto_rawDescGZIP(), []int{0, 0}
}

type IPLookupRequest_IPVersion int32

const (
	IPLookupRequest_IPV4 IPLookupRequest_IPVersion = 0
	IPLookupRequest_IPV6 IPLookupRequest_IPVersion = 1
)

// Enum value maps for IPLookupRequest_IPVersion.
var (
	IPLookupRequest_IPVersion_name = map[int32]string{
		0: "IPV4",
		1: "IPV6",
	}
	IPLookupRequest_IPVersion_value = map[string]int32{
		"IPV4": 0,
		"IPV6": 1,
	}
)

func (x IPLookupRequest_IPVersion) Enum() *IPLookupRequest_IPVersion {
	p := new(IPLookupRequest_IPVersion)
	*p = x
	return p
}

func (x IPLookupRequest_IPVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPLookupRequest_IPVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_mobilityd_proto_enumTypes[1].Descriptor()
}

func (IPLookupRequest_IPVersion) Type() protoreflect.EnumType {
	return &file_lte_protos_mobilityd_proto_enumTypes[1]
}

func (x IPLookupRequest_IPVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPLookupRequest_IPVersion.Descriptor instead.
func (IPLookupRequest_IPVersion) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_mobilityd_proto_rawDescGZIP(), []int{2, 0}
}

type IPBlock_IPVersion int32

const (
	IPBlock_IPV4 IPBlock_IPVersion = 0
	IPBlock_IPV6 IPBlock_IPVersion = 1
)

// Enum value maps for IPBlock_IPVersion.
var (
	IPBlock_IPVersion_name = map[int32]string{
		0: "IPV4",
		1: "IPV6",
	}
	IPBlock_IPVersion_value = map[string]int32{
		"IPV4": 0,
		"IPV6": 1,
	}
)

func (x IPBlock_IPVersion) Enum() *IPBlock_IPVersion {
	p := new(IPBlock_IPVersion)
	*p = x
	return p
}

func (x IPBlock_IPVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPBlock_IPVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_mobilityd_proto_enumTypes[2].Descriptor()
}

func (IPBlock_IPVersion) Type() protoreflect.EnumType {
	return &file_lte_protos_mobilityd_proto_enumTypes[2]
}

func (x IPBlock_IPVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPBlock_IPVersion.Descriptor instead.
func (IPBlock_IPVersion) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_mobilityd_proto_rawDescGZIP(), []int{3, 0}
}

type AllocateIPRequest_IPVersion int32

const (
	AllocateIPRequest_IPV4   AllocateIPRequest_IPVersion = 0
	AllocateIPRequest_IPV6   AllocateIPRequest_IPVersion = 1
	AllocateIPRequest_IPV4V6 AllocateIPRequest_IPVersion = 2
)

// Enum value maps for AllocateIPRequest_IPVersion.
var (
	AllocateIPRequest_IPVersion_name = map[int32]string{
		0: "IPV4",
		1: "IPV6",
		2: "IPV4V6",
	}
	AllocateIPRequest_IPVersion_value = map[string]int32{
		"IPV4":   0,
		"IPV6":   1,
		"IPV4V6": 2,
	}
)

func (x AllocateIPRequest_IPVersion) Enum() *AllocateIPRequest_IPVersion {
	p := new(AllocateIPRequest_IPVersion)
	*p = x
	return p
}

func (x AllocateIPRequest_IPVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllocateIPRequest_IPVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_mobilityd_proto_enumTypes[3].Descriptor()
}

func (AllocateIPRequest_IPVersion) Type() protoreflect.EnumType {
	return &file_lte_protos_mobilityd_proto_enumTypes[3]
}

func (x AllocateIPRequest_IPVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllocateIPRequest_IPVersion.Descriptor instead.
func (AllocateIPRequest_IPVersion) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_mobilityd_proto_rawDescGZIP(), []int{7, 0}
}

// --------------------------------------------------------------------------
// IP Address definition. A generic type for both IPv4 and IPv6 addresses.
// --------------------------------------------------------------------------
type IPAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version IPAddress_IPVersion `protobuf:"varint,1,opt,name=version,proto3,enum=magma.lte.IPAddress_IPVersion" json:"version,omitempty"`
	Address []byte              `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"` // network byte order
}

func (x *IPAddress) Reset() {
	*x = IPAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mobilityd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPAddress) ProtoMessage() {}

func (x *IPAddress) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mobilityd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPAddress.ProtoReflect.Descriptor instead.
func (*IPAddress) Descriptor() ([]byte, []int) {
	return file_lte_protos_mobilityd_proto_rawDescGZIP(), []int{0}
}

func (x *IPAddress) GetVersion() IPAddress_IPVersion {
	if x != nil {
		return x.Version
	}
	return IPAddress_IPV4
}

func (x *IPAddress) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

type AllocateIPAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpList []*IPAddress `protobuf:"bytes,1,rep,name=ip_list,json=ipList,proto3" json:"ip_list,omitempty"`
	Vlan   string       `protobuf:"bytes,2,opt,name=vlan,proto3" json:"vlan,omitempty"`
}

func (x *AllocateIPAddressResponse) Reset() {
	*x = AllocateIPAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mobilityd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocateIPAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocateIPAddressResponse) ProtoMessage() {}

func (x *AllocateIPAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mobilityd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocateIPAddressResponse.ProtoReflect.Descriptor instead.
func (*AllocateIPAddressResponse) Descriptor() ([]byte, []int) {
	return file_lte_protos_mobilityd_proto_rawDescGZIP(), []int{1}
}

func (x *AllocateIPAddressResponse) GetIpList() []*IPAddress {
	if x != nil {
		return x.IpList
	}
	return nil
}

func (x *AllocateIPAddressResponse) GetVlan() string {
	if x != nil {
		return x.Vlan
	}
	return ""
}

type IPLookupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid     *SubscriberID             `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	Apn     string                    `protobuf:"bytes,2,opt,name=apn,proto3" json:"apn,omitempty"`
	Version IPLookupRequest_IPVersion `protobuf:"varint,3,opt,name=version,proto3,enum=magma.lte.IPLookupRequest_IPVersion" json:"version,omitempty"`
}

func (x *IPLookupRequest) Reset() {
	*x = IPLookupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mobilityd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPLookupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPLookupRequest) ProtoMessage() {}

func (x *IPLookupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mobilityd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPLookupRequest.ProtoReflect.Descriptor instead.
func (*IPLookupRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_mobilityd_proto_rawDescGZIP(), []int{2}
}

func (x *IPLookupRequest) GetSid() *SubscriberID {
	if x != nil {
		return x.Sid
	}
	return nil
}

func (x *IPLookupRequest) GetApn() string {
	if x != nil {
		return x.Apn
	}
	return ""
}

func (x *IPLookupRequest) GetVersion() IPLookupRequest_IPVersion {
	if x != nil {
		return x.Version
	}
	return IPLookupRequest_IPV4
}

// --------------------------------------------------------------------------
// IP Block definition.
//
// An IP block is a range of IP addresses specified by a network address and
// a prefix-length of the netmask. For example,
//    IPv4 IP block:      192.168.0.0/24
//    IPv6 IP block:      2401:db00:1116:301b::/64
// --------------------------------------------------------------------------
type IPBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version    IPBlock_IPVersion `protobuf:"varint,1,opt,name=version,proto3,enum=magma.lte.IPBlock_IPVersion" json:"version,omitempty"`
	NetAddress []byte            `protobuf:"bytes,2,opt,name=net_address,json=netAddress,proto3" json:"net_address,omitempty"` // network byte order
	PrefixLen  uint32            `protobuf:"varint,3,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
}

func (x *IPBlock) Reset() {
	*x = IPBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mobilityd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPBlock) ProtoMessage() {}

func (x *IPBlock) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mobilityd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPBlock.ProtoReflect.Descriptor instead.
func (*IPBlock) Descriptor() ([]byte, []int) {
	return file_lte_protos_mobilityd_proto_rawDescGZIP(), []int{3}
}

func (x *IPBlock) GetVersion() IPBlock_IPVersion {
	if x != nil {
		return x.Version
	}
	return IPBlock_IPV4
}

func (x *IPBlock) GetNetAddress() []byte {
	if x != nil {
		return x.NetAddress
	}
	return nil
}

func (x *IPBlock) GetPrefixLen() uint32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

type ListAddedIPBlocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of IP blocks assigned
	IpBlockList []*IPBlock `protobuf:"bytes,1,rep,name=ip_block_list,json=ipBlockList,proto3" json:"ip_block_list,omitempty"`
}

func (x *ListAddedIPBlocksResponse) Reset() {
	*x = ListAddedIPBlocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mobilityd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAddedIPBlocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAddedIPBlocksResponse) ProtoMessage() {}

func (x *ListAddedIPBlocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mobilityd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAddedIPBlocksResponse.ProtoReflect.Descriptor instead.
func (*ListAddedIPBlocksResponse) Descriptor() ([]byte, []int) {
	return file_lte_protos_mobilityd_proto_rawDescGZIP(), []int{4}
}

func (x *ListAddedIPBlocksResponse) GetIpBlockList() []*IPBlock {
	if x != nil {
		return x.IpBlockList
	}
	return nil
}

// --------------------------------------------------------------------------
// Subscriber IP table definition
// --------------------------------------------------------------------------
type SubscriberIPTableEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid *SubscriberID `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	Ip  *IPAddress    `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Apn string        `protobuf:"bytes,3,opt,name=apn,proto3" json:"apn,omitempty"`
}

func (x *SubscriberIPTableEntry) Reset() {
	*x = SubscriberIPTableEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mobilityd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriberIPTableEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriberIPTableEntry) ProtoMessage() {}

func (x *SubscriberIPTableEntry) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mobilityd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriberIPTableEntry.ProtoReflect.Descriptor instead.
func (*SubscriberIPTableEntry) Descriptor() ([]byte, []int) {
	return file_lte_protos_mobilityd_proto_rawDescGZIP(), []int{5}
}

func (x *SubscriberIPTableEntry) GetSid() *SubscriberID {
	if x != nil {
		return x.Sid
	}
	return nil
}

func (x *SubscriberIPTableEntry) GetIp() *IPAddress {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *SubscriberIPTableEntry) GetApn() string {
	if x != nil {
		return x.Apn
	}
	return ""
}

type SubscriberIPTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*SubscriberIPTableEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *SubscriberIPTable) Reset() {
	*x = SubscriberIPTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mobilityd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriberIPTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriberIPTable) ProtoMessage() {}

func (x *SubscriberIPTable) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mobilityd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriberIPTable.ProtoReflect.Descriptor instead.
func (*SubscriberIPTable) Descriptor() ([]byte, []int) {
	return file_lte_protos_mobilityd_proto_rawDescGZIP(), []int{6}
}

func (x *SubscriberIPTable) GetEntries() []*SubscriberIPTableEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

// --------------------------------------------------------------------------
// IP allocation service definition
// --------------------------------------------------------------------------
type AllocateIPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sid: SubscriberID an IP is allocated for
	// version: IP version requested
	// apn: Access Point Name (e.g., "ims", "internet")
	Sid     *SubscriberID               `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	Version AllocateIPRequest_IPVersion `protobuf:"varint,2,opt,name=version,proto3,enum=magma.lte.AllocateIPRequest_IPVersion" json:"version,omitempty"`
	Apn     string                      `protobuf:"bytes,3,opt,name=apn,proto3" json:"apn,omitempty"`
}

func (x *AllocateIPRequest) Reset() {
	*x = AllocateIPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mobilityd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocateIPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocateIPRequest) ProtoMessage() {}

func (x *AllocateIPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mobilityd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocateIPRequest.ProtoReflect.Descriptor instead.
func (*AllocateIPRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_mobilityd_proto_rawDescGZIP(), []int{7}
}

func (x *AllocateIPRequest) GetSid() *SubscriberID {
	if x != nil {
		return x.Sid
	}
	return nil
}

func (x *AllocateIPRequest) GetVersion() AllocateIPRequest_IPVersion {
	if x != nil {
		return x.Version
	}
	return AllocateIPRequest_IPV4
}

func (x *AllocateIPRequest) GetApn() string {
	if x != nil {
		return x.Apn
	}
	return ""
}

type ListAllocatedIPsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of IP addresses allocated from a given IP block
	IpList []*IPAddress `protobuf:"bytes,1,rep,name=ip_list,json=ipList,proto3" json:"ip_list,omitempty"`
}

func (x *ListAllocatedIPsResponse) Reset() {
	*x = ListAllocatedIPsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mobilityd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAllocatedIPsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllocatedIPsResponse) ProtoMessage() {}

func (x *ListAllocatedIPsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mobilityd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllocatedIPsResponse.ProtoReflect.Descriptor instead.
func (*ListAllocatedIPsResponse) Descriptor() ([]byte, []int) {
	return file_lte_protos_mobilityd_proto_rawDescGZIP(), []int{8}
}

func (x *ListAllocatedIPsResponse) GetIpList() []*IPAddress {
	if x != nil {
		return x.IpList
	}
	return nil
}

type ReleaseIPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sid: SubscriberID associated with the IP address
	// ip: IP address to release
	// apn: Access Point Name to release apn-specific IP address
	Sid *SubscriberID `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	Ip  *IPAddress    `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Apn string        `protobuf:"bytes,3,opt,name=apn,proto3" json:"apn,omitempty"`
}

func (x *ReleaseIPRequest) Reset() {
	*x = ReleaseIPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mobilityd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseIPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseIPRequest) ProtoMessage() {}

func (x *ReleaseIPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mobilityd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseIPRequest.ProtoReflect.Descriptor instead.
func (*ReleaseIPRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_mobilityd_proto_rawDescGZIP(), []int{9}
}

func (x *ReleaseIPRequest) GetSid() *SubscriberID {
	if x != nil {
		return x.Sid
	}
	return nil
}

func (x *ReleaseIPRequest) GetIp() *IPAddress {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *ReleaseIPRequest) GetApn() string {
	if x != nil {
		return x.Apn
	}
	return ""
}

type RemoveIPBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ip_blocks: List of IP blocks to remove
	IpBlocks []*IPBlock `protobuf:"bytes,1,rep,name=ip_blocks,json=ipBlocks,proto3" json:"ip_blocks,omitempty"`
	// force: If true, remove all IP blocks regardless of whether IPs have been
	// allocated
	Force bool `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *RemoveIPBlockRequest) Reset() {
	*x = RemoveIPBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mobilityd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveIPBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveIPBlockRequest) ProtoMessage() {}

func (x *RemoveIPBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mobilityd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveIPBlockRequest.ProtoReflect.Descriptor instead.
func (*RemoveIPBlockRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_mobilityd_proto_rawDescGZIP(), []int{10}
}

func (x *RemoveIPBlockRequest) GetIpBlocks() []*IPBlock {
	if x != nil {
		return x.IpBlocks
	}
	return nil
}

func (x *RemoveIPBlockRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type RemoveIPBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ip_blocks: List of IP blocks successfully removed
	IpBlocks []*IPBlock `protobuf:"bytes,1,rep,name=ip_blocks,json=ipBlocks,proto3" json:"ip_blocks,omitempty"`
}

func (x *RemoveIPBlockResponse) Reset() {
	*x = RemoveIPBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mobilityd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveIPBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveIPBlockResponse) ProtoMessage() {}

func (x *RemoveIPBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mobilityd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveIPBlockResponse.ProtoReflect.Descriptor instead.
func (*RemoveIPBlockResponse) Descriptor() ([]byte, []int) {
	return file_lte_protos_mobilityd_proto_rawDescGZIP(), []int{11}
}

func (x *RemoveIPBlockResponse) GetIpBlocks() []*IPBlock {
	if x != nil {
		return x.IpBlocks
	}
	return nil
}

// This msg is used for get/set API for mobilityD UplinkGatewayInfo object
// This object has information about Internet Gateway
type GWInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   *IPAddress `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Mac  string     `protobuf:"bytes,2,opt,name=mac,proto3" json:"mac,omitempty"`
	Vlan string     `protobuf:"bytes,3,opt,name=vlan,proto3" json:"vlan,omitempty"`
}

func (x *GWInfo) Reset() {
	*x = GWInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mobilityd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GWInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GWInfo) ProtoMessage() {}

func (x *GWInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mobilityd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GWInfo.ProtoReflect.Descriptor instead.
func (*GWInfo) Descriptor() ([]byte, []int) {
	return file_lte_protos_mobilityd_proto_rawDescGZIP(), []int{12}
}

func (x *GWInfo) GetIp() *IPAddress {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *GWInfo) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *GWInfo) GetVlan() string {
	if x != nil {
		return x.Vlan
	}
	return ""
}

type ListGWInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of IP addresses allocated from a given IP block
	GwList []*GWInfo `protobuf:"bytes,1,rep,name=gw_list,json=gwList,proto3" json:"gw_list,omitempty"`
}

func (x *ListGWInfoResponse) Reset() {
	*x = ListGWInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mobilityd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGWInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGWInfoResponse) ProtoMessage() {}

func (x *ListGWInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mobilityd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGWInfoResponse.ProtoReflect.Descriptor instead.
func (*ListGWInfoResponse) Descriptor() ([]byte, []int) {
	return file_lte_protos_mobilityd_proto_rawDescGZIP(), []int{13}
}

func (x *ListGWInfoResponse) GetGwList() []*GWInfo {
	if x != nil {
		return x.GwList
	}
	return nil
}

var File_lte_protos_mobilityd_proto protoreflect.FileDescriptor

var file_lte_protos_mobilityd_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x1a, 0x1d, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x64, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x80, 0x01, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x38, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x49, 0x50, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x49, 0x50, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x1f, 0x0a, 0x09, 0x49, 0x50, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x34, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50,
	0x56, 0x36, 0x10, 0x01, 0x22, 0x5e, 0x0a, 0x19, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2d, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x06, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x76, 0x6c, 0x61, 0x6e, 0x22, 0xaf, 0x01, 0x0a, 0x0f, 0x49, 0x50, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x44, 0x52, 0x03,
	0x73, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x61, 0x70, 0x6e, 0x12, 0x3e, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x49, 0x50, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x49, 0x50, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x1f, 0x0a, 0x09, 0x49, 0x50, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x34, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x49, 0x50, 0x56, 0x36, 0x10, 0x01, 0x22, 0xa2, 0x01, 0x0a, 0x07, 0x49, 0x50, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e,
	0x49, 0x50, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x49, 0x50, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x6e, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x22, 0x1f, 0x0a, 0x09, 0x49, 0x50,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x34, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x36, 0x10, 0x01, 0x22, 0x53, 0x0a, 0x19, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x65, 0x64, 0x49, 0x50, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x69, 0x70, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x49, 0x50, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x0b, 0x69, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x7b, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x50,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x03, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x44,
	0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x49, 0x50,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x02, 0x69, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x70, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x6e, 0x22, 0x50, 0x0a,
	0x11, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x50, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x50, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22,
	0xbf, 0x01, 0x0a, 0x11, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x49, 0x50, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x44, 0x52, 0x03, 0x73, 0x69, 0x64,
	0x12, 0x40, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x49, 0x50, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x61, 0x70, 0x6e, 0x22, 0x2b, 0x0a, 0x09, 0x49, 0x50, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x34, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49,
	0x50, 0x56, 0x36, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x50, 0x56, 0x34, 0x56, 0x36, 0x10,
	0x02, 0x22, 0x49, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x50, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a,
	0x07, 0x69, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x06, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x75, 0x0a, 0x10,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x49, 0x44, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x61, 0x70, 0x6e, 0x22, 0x5d, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x50, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x69,
	0x70, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x49, 0x50, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x08, 0x69, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x22, 0x48, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x50, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x69,
	0x70, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x49, 0x50, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x08, 0x69, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x54, 0x0a, 0x06,
	0x47, 0x57, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x02, 0x69, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x12,
	0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x6c,
	0x61, 0x6e, 0x22, 0x40, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x57, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x67, 0x77, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x47, 0x57, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x67, 0x77,
	0x4c, 0x69, 0x73, 0x74, 0x32, 0xaa, 0x06, 0x0a, 0x0f, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x49,
	0x50, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x49, 0x50, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x12, 0x4e, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x65, 0x64, 0x49, 0x50, 0x76, 0x34, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63,
	0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x24, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x65, 0x64, 0x49, 0x50, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a,
	0x10, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x50,
	0x73, 0x12, 0x12, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x49, 0x50,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x23, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49,
	0x50, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x11, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x50,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x50, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63,
	0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x49, 0x50,
	0x46, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x49, 0x50, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x46, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x49, 0x44, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x50, 0x12, 0x14, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x17,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x44, 0x12, 0x47, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x50, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f,
	0x69, 0x64, 0x1a, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x50, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x52, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x50, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x49, 0x50, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x50, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x1d, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x57, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0e, 0x53, 0x65, 0x74,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x11, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x47, 0x57, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x11,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69,
	0x64, 0x42, 0x1b, 0x5a, 0x19, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f, 0x6c, 0x74, 0x65, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lte_protos_mobilityd_proto_rawDescOnce sync.Once
	file_lte_protos_mobilityd_proto_rawDescData = file_lte_protos_mobilityd_proto_rawDesc
)

func file_lte_protos_mobilityd_proto_rawDescGZIP() []byte {
	file_lte_protos_mobilityd_proto_rawDescOnce.Do(func() {
		file_lte_protos_mobilityd_proto_rawDescData = protoimpl.X.CompressGZIP(file_lte_protos_mobilityd_proto_rawDescData)
	})
	return file_lte_protos_mobilityd_proto_rawDescData
}

var file_lte_protos_mobilityd_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_lte_protos_mobilityd_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_lte_protos_mobilityd_proto_goTypes = []interface{}{
	(IPAddress_IPVersion)(0),          // 0: magma.lte.IPAddress.IPVersion
	(IPLookupRequest_IPVersion)(0),    // 1: magma.lte.IPLookupRequest.IPVersion
	(IPBlock_IPVersion)(0),            // 2: magma.lte.IPBlock.IPVersion
	(AllocateIPRequest_IPVersion)(0),  // 3: magma.lte.AllocateIPRequest.IPVersion
	(*IPAddress)(nil),                 // 4: magma.lte.IPAddress
	(*AllocateIPAddressResponse)(nil), // 5: magma.lte.AllocateIPAddressResponse
	(*IPLookupRequest)(nil),           // 6: magma.lte.IPLookupRequest
	(*IPBlock)(nil),                   // 7: magma.lte.IPBlock
	(*ListAddedIPBlocksResponse)(nil), // 8: magma.lte.ListAddedIPBlocksResponse
	(*SubscriberIPTableEntry)(nil),    // 9: magma.lte.SubscriberIPTableEntry
	(*SubscriberIPTable)(nil),         // 10: magma.lte.SubscriberIPTable
	(*AllocateIPRequest)(nil),         // 11: magma.lte.AllocateIPRequest
	(*ListAllocatedIPsResponse)(nil),  // 12: magma.lte.ListAllocatedIPsResponse
	(*ReleaseIPRequest)(nil),          // 13: magma.lte.ReleaseIPRequest
	(*RemoveIPBlockRequest)(nil),      // 14: magma.lte.RemoveIPBlockRequest
	(*RemoveIPBlockResponse)(nil),     // 15: magma.lte.RemoveIPBlockResponse
	(*GWInfo)(nil),                    // 16: magma.lte.GWInfo
	(*ListGWInfoResponse)(nil),        // 17: magma.lte.ListGWInfoResponse
	(*SubscriberID)(nil),              // 18: magma.lte.SubscriberID
	(*protos.Void)(nil),               // 19: magma.orc8r.Void
}
var file_lte_protos_mobilityd_proto_depIdxs = []int32{
	0,  // 0: magma.lte.IPAddress.version:type_name -> magma.lte.IPAddress.IPVersion
	4,  // 1: magma.lte.AllocateIPAddressResponse.ip_list:type_name -> magma.lte.IPAddress
	18, // 2: magma.lte.IPLookupRequest.sid:type_name -> magma.lte.SubscriberID
	1,  // 3: magma.lte.IPLookupRequest.version:type_name -> magma.lte.IPLookupRequest.IPVersion
	2,  // 4: magma.lte.IPBlock.version:type_name -> magma.lte.IPBlock.IPVersion
	7,  // 5: magma.lte.ListAddedIPBlocksResponse.ip_block_list:type_name -> magma.lte.IPBlock
	18, // 6: magma.lte.SubscriberIPTableEntry.sid:type_name -> magma.lte.SubscriberID
	4,  // 7: magma.lte.SubscriberIPTableEntry.ip:type_name -> magma.lte.IPAddress
	9,  // 8: magma.lte.SubscriberIPTable.entries:type_name -> magma.lte.SubscriberIPTableEntry
	18, // 9: magma.lte.AllocateIPRequest.sid:type_name -> magma.lte.SubscriberID
	3,  // 10: magma.lte.AllocateIPRequest.version:type_name -> magma.lte.AllocateIPRequest.IPVersion
	4,  // 11: magma.lte.ListAllocatedIPsResponse.ip_list:type_name -> magma.lte.IPAddress
	18, // 12: magma.lte.ReleaseIPRequest.sid:type_name -> magma.lte.SubscriberID
	4,  // 13: magma.lte.ReleaseIPRequest.ip:type_name -> magma.lte.IPAddress
	7,  // 14: magma.lte.RemoveIPBlockRequest.ip_blocks:type_name -> magma.lte.IPBlock
	7,  // 15: magma.lte.RemoveIPBlockResponse.ip_blocks:type_name -> magma.lte.IPBlock
	4,  // 16: magma.lte.GWInfo.ip:type_name -> magma.lte.IPAddress
	16, // 17: magma.lte.ListGWInfoResponse.gw_list:type_name -> magma.lte.GWInfo
	7,  // 18: magma.lte.MobilityService.AddIPBlock:input_type -> magma.lte.IPBlock
	19, // 19: magma.lte.MobilityService.ListAddedIPv4Blocks:input_type -> magma.orc8r.Void
	7,  // 20: magma.lte.MobilityService.ListAllocatedIPs:input_type -> magma.lte.IPBlock
	11, // 21: magma.lte.MobilityService.AllocateIPAddress:input_type -> magma.lte.AllocateIPRequest
	13, // 22: magma.lte.MobilityService.ReleaseIPAddress:input_type -> magma.lte.ReleaseIPRequest
	6,  // 23: magma.lte.MobilityService.GetIPForSubscriber:input_type -> magma.lte.IPLookupRequest
	4,  // 24: magma.lte.MobilityService.GetSubscriberIDFromIP:input_type -> magma.lte.IPAddress
	19, // 25: magma.lte.MobilityService.GetSubscriberIPTable:input_type -> magma.orc8r.Void
	14, // 26: magma.lte.MobilityService.RemoveIPBlock:input_type -> magma.lte.RemoveIPBlockRequest
	19, // 27: magma.lte.MobilityService.ListGatewayInfo:input_type -> magma.orc8r.Void
	16, // 28: magma.lte.MobilityService.SetGatewayInfo:input_type -> magma.lte.GWInfo
	19, // 29: magma.lte.MobilityService.AddIPBlock:output_type -> magma.orc8r.Void
	8,  // 30: magma.lte.MobilityService.ListAddedIPv4Blocks:output_type -> magma.lte.ListAddedIPBlocksResponse
	12, // 31: magma.lte.MobilityService.ListAllocatedIPs:output_type -> magma.lte.ListAllocatedIPsResponse
	5,  // 32: magma.lte.MobilityService.AllocateIPAddress:output_type -> magma.lte.AllocateIPAddressResponse
	19, // 33: magma.lte.MobilityService.ReleaseIPAddress:output_type -> magma.orc8r.Void
	4,  // 34: magma.lte.MobilityService.GetIPForSubscriber:output_type -> magma.lte.IPAddress
	18, // 35: magma.lte.MobilityService.GetSubscriberIDFromIP:output_type -> magma.lte.SubscriberID
	10, // 36: magma.lte.MobilityService.GetSubscriberIPTable:output_type -> magma.lte.SubscriberIPTable
	15, // 37: magma.lte.MobilityService.RemoveIPBlock:output_type -> magma.lte.RemoveIPBlockResponse
	17, // 38: magma.lte.MobilityService.ListGatewayInfo:output_type -> magma.lte.ListGWInfoResponse
	19, // 39: magma.lte.MobilityService.SetGatewayInfo:output_type -> magma.orc8r.Void
	29, // [29:40] is the sub-list for method output_type
	18, // [18:29] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_lte_protos_mobilityd_proto_init() }
func file_lte_protos_mobilityd_proto_init() {
	if File_lte_protos_mobilityd_proto != nil {
		return
	}
	file_lte_protos_subscriberdb_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_lte_protos_mobilityd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mobilityd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocateIPAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mobilityd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPLookupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mobilityd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mobilityd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAddedIPBlocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mobilityd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriberIPTableEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mobilityd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriberIPTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mobilityd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocateIPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mobilityd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAllocatedIPsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mobilityd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseIPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mobilityd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveIPBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mobilityd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveIPBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mobilityd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GWInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mobilityd_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGWInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lte_protos_mobilityd_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lte_protos_mobilityd_proto_goTypes,
		DependencyIndexes: file_lte_protos_mobilityd_proto_depIdxs,
		EnumInfos:         file_lte_protos_mobilityd_proto_enumTypes,
		MessageInfos:      file_lte_protos_mobilityd_proto_msgTypes,
	}.Build()
	File_lte_protos_mobilityd_proto = out.File
	file_lte_protos_mobilityd_proto_rawDesc = nil
	file_lte_protos_mobilityd_proto_goTypes = nil
	file_lte_protos_mobilityd_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MobilityServiceClient is the client API for MobilityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MobilityServiceClient interface {
	// Add a range of IP addresses into the free IP pool
	// Throws INVALID_ARGUMENT if IPBlock is invalid
	// Throws FAILED_PRECONDITION if IPBlock overlaps with existing ones
	//
	AddIPBlock(ctx context.Context, in *IPBlock, opts ...grpc.CallOption) (*protos.Void, error)
	// Return a list of assigned IP blocks
	//
	ListAddedIPv4Blocks(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*ListAddedIPBlocksResponse, error)
	// Return a list of allocated IPs inside a IP block
	// Throws INVALID_ARGUMENT if IPBlock is invalid
	// Throws FAILED_PRECONDITION if IPBlock is not previously assigned
	//
	ListAllocatedIPs(ctx context.Context, in *IPBlock, opts ...grpc.CallOption) (*ListAllocatedIPsResponse, error)
	// Allocate an IP address from the free IP pool
	// Throws RESOURCE_EXHAUSTED if no free IP available
	// Throws ALREADY_EXISTS if an IP has been allocated for the subscriber
	//
	AllocateIPAddress(ctx context.Context, in *AllocateIPRequest, opts ...grpc.CallOption) (*AllocateIPAddressResponse, error)
	// Release and recycle an allocated IP address
	// Throws NOT_FOUND if the requested (SID, IP) pair is not found
	//
	ReleaseIPAddress(ctx context.Context, in *ReleaseIPRequest, opts ...grpc.CallOption) (*protos.Void, error)
	// Gets subscriber's IP address. Throws NOT_FOUND if it doesn't exist
	GetIPForSubscriber(ctx context.Context, in *IPLookupRequest, opts ...grpc.CallOption) (*IPAddress, error)
	// Gets subscriber's ID from an IP Address.
	// Throws NOT_FOUND if it doesn't exist
	GetSubscriberIDFromIP(ctx context.Context, in *IPAddress, opts ...grpc.CallOption) (*SubscriberID, error)
	// Get the full subscriber table
	GetSubscriberIPTable(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*SubscriberIPTable, error)
	// Remove allocated IP blocks
	// Default behavior is to only remove all IP blocks that have no IP addresses
	// allocated from them. If force is set, then will remove all IP blocks,
	// regardless of whether any IPs have been allocated.
	RemoveIPBlock(ctx context.Context, in *RemoveIPBlockRequest, opts ...grpc.CallOption) (*RemoveIPBlockResponse, error)
	// Get Internet Gateway and  mac addresss
	ListGatewayInfo(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*ListGWInfoResponse, error)
	// Set ip and mac address of def Internet Gateway
	SetGatewayInfo(ctx context.Context, in *GWInfo, opts ...grpc.CallOption) (*protos.Void, error)
}

type mobilityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMobilityServiceClient(cc grpc.ClientConnInterface) MobilityServiceClient {
	return &mobilityServiceClient{cc}
}

func (c *mobilityServiceClient) AddIPBlock(ctx context.Context, in *IPBlock, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.MobilityService/AddIPBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilityServiceClient) ListAddedIPv4Blocks(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*ListAddedIPBlocksResponse, error) {
	out := new(ListAddedIPBlocksResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.MobilityService/ListAddedIPv4Blocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilityServiceClient) ListAllocatedIPs(ctx context.Context, in *IPBlock, opts ...grpc.CallOption) (*ListAllocatedIPsResponse, error) {
	out := new(ListAllocatedIPsResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.MobilityService/ListAllocatedIPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilityServiceClient) AllocateIPAddress(ctx context.Context, in *AllocateIPRequest, opts ...grpc.CallOption) (*AllocateIPAddressResponse, error) {
	out := new(AllocateIPAddressResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.MobilityService/AllocateIPAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilityServiceClient) ReleaseIPAddress(ctx context.Context, in *ReleaseIPRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.MobilityService/ReleaseIPAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilityServiceClient) GetIPForSubscriber(ctx context.Context, in *IPLookupRequest, opts ...grpc.CallOption) (*IPAddress, error) {
	out := new(IPAddress)
	err := c.cc.Invoke(ctx, "/magma.lte.MobilityService/GetIPForSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilityServiceClient) GetSubscriberIDFromIP(ctx context.Context, in *IPAddress, opts ...grpc.CallOption) (*SubscriberID, error) {
	out := new(SubscriberID)
	err := c.cc.Invoke(ctx, "/magma.lte.MobilityService/GetSubscriberIDFromIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilityServiceClient) GetSubscriberIPTable(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*SubscriberIPTable, error) {
	out := new(SubscriberIPTable)
	err := c.cc.Invoke(ctx, "/magma.lte.MobilityService/GetSubscriberIPTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilityServiceClient) RemoveIPBlock(ctx context.Context, in *RemoveIPBlockRequest, opts ...grpc.CallOption) (*RemoveIPBlockResponse, error) {
	out := new(RemoveIPBlockResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.MobilityService/RemoveIPBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilityServiceClient) ListGatewayInfo(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*ListGWInfoResponse, error) {
	out := new(ListGWInfoResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.MobilityService/ListGatewayInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilityServiceClient) SetGatewayInfo(ctx context.Context, in *GWInfo, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.MobilityService/SetGatewayInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MobilityServiceServer is the server API for MobilityService service.
type MobilityServiceServer interface {
	// Add a range of IP addresses into the free IP pool
	// Throws INVALID_ARGUMENT if IPBlock is invalid
	// Throws FAILED_PRECONDITION if IPBlock overlaps with existing ones
	//
	AddIPBlock(context.Context, *IPBlock) (*protos.Void, error)
	// Return a list of assigned IP blocks
	//
	ListAddedIPv4Blocks(context.Context, *protos.Void) (*ListAddedIPBlocksResponse, error)
	// Return a list of allocated IPs inside a IP block
	// Throws INVALID_ARGUMENT if IPBlock is invalid
	// Throws FAILED_PRECONDITION if IPBlock is not previously assigned
	//
	ListAllocatedIPs(context.Context, *IPBlock) (*ListAllocatedIPsResponse, error)
	// Allocate an IP address from the free IP pool
	// Throws RESOURCE_EXHAUSTED if no free IP available
	// Throws ALREADY_EXISTS if an IP has been allocated for the subscriber
	//
	AllocateIPAddress(context.Context, *AllocateIPRequest) (*AllocateIPAddressResponse, error)
	// Release and recycle an allocated IP address
	// Throws NOT_FOUND if the requested (SID, IP) pair is not found
	//
	ReleaseIPAddress(context.Context, *ReleaseIPRequest) (*protos.Void, error)
	// Gets subscriber's IP address. Throws NOT_FOUND if it doesn't exist
	GetIPForSubscriber(context.Context, *IPLookupRequest) (*IPAddress, error)
	// Gets subscriber's ID from an IP Address.
	// Throws NOT_FOUND if it doesn't exist
	GetSubscriberIDFromIP(context.Context, *IPAddress) (*SubscriberID, error)
	// Get the full subscriber table
	GetSubscriberIPTable(context.Context, *protos.Void) (*SubscriberIPTable, error)
	// Remove allocated IP blocks
	// Default behavior is to only remove all IP blocks that have no IP addresses
	// allocated from them. If force is set, then will remove all IP blocks,
	// regardless of whether any IPs have been allocated.
	RemoveIPBlock(context.Context, *RemoveIPBlockRequest) (*RemoveIPBlockResponse, error)
	// Get Internet Gateway and  mac addresss
	ListGatewayInfo(context.Context, *protos.Void) (*ListGWInfoResponse, error)
	// Set ip and mac address of def Internet Gateway
	SetGatewayInfo(context.Context, *GWInfo) (*protos.Void, error)
}

// UnimplementedMobilityServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMobilityServiceServer struct {
}

func (*UnimplementedMobilityServiceServer) AddIPBlock(context.Context, *IPBlock) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIPBlock not implemented")
}
func (*UnimplementedMobilityServiceServer) ListAddedIPv4Blocks(context.Context, *protos.Void) (*ListAddedIPBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAddedIPv4Blocks not implemented")
}
func (*UnimplementedMobilityServiceServer) ListAllocatedIPs(context.Context, *IPBlock) (*ListAllocatedIPsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllocatedIPs not implemented")
}
func (*UnimplementedMobilityServiceServer) AllocateIPAddress(context.Context, *AllocateIPRequest) (*AllocateIPAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateIPAddress not implemented")
}
func (*UnimplementedMobilityServiceServer) ReleaseIPAddress(context.Context, *ReleaseIPRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseIPAddress not implemented")
}
func (*UnimplementedMobilityServiceServer) GetIPForSubscriber(context.Context, *IPLookupRequest) (*IPAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIPForSubscriber not implemented")
}
func (*UnimplementedMobilityServiceServer) GetSubscriberIDFromIP(context.Context, *IPAddress) (*SubscriberID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriberIDFromIP not implemented")
}
func (*UnimplementedMobilityServiceServer) GetSubscriberIPTable(context.Context, *protos.Void) (*SubscriberIPTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriberIPTable not implemented")
}
func (*UnimplementedMobilityServiceServer) RemoveIPBlock(context.Context, *RemoveIPBlockRequest) (*RemoveIPBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIPBlock not implemented")
}
func (*UnimplementedMobilityServiceServer) ListGatewayInfo(context.Context, *protos.Void) (*ListGWInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGatewayInfo not implemented")
}
func (*UnimplementedMobilityServiceServer) SetGatewayInfo(context.Context, *GWInfo) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGatewayInfo not implemented")
}

func RegisterMobilityServiceServer(s *grpc.Server, srv MobilityServiceServer) {
	s.RegisterService(&_MobilityService_serviceDesc, srv)
}

func _MobilityService_AddIPBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilityServiceServer).AddIPBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.MobilityService/AddIPBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilityServiceServer).AddIPBlock(ctx, req.(*IPBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilityService_ListAddedIPv4Blocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilityServiceServer).ListAddedIPv4Blocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.MobilityService/ListAddedIPv4Blocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilityServiceServer).ListAddedIPv4Blocks(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilityService_ListAllocatedIPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilityServiceServer).ListAllocatedIPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.MobilityService/ListAllocatedIPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilityServiceServer).ListAllocatedIPs(ctx, req.(*IPBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilityService_AllocateIPAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilityServiceServer).AllocateIPAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.MobilityService/AllocateIPAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilityServiceServer).AllocateIPAddress(ctx, req.(*AllocateIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilityService_ReleaseIPAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilityServiceServer).ReleaseIPAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.MobilityService/ReleaseIPAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilityServiceServer).ReleaseIPAddress(ctx, req.(*ReleaseIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilityService_GetIPForSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPLookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilityServiceServer).GetIPForSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.MobilityService/GetIPForSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilityServiceServer).GetIPForSubscriber(ctx, req.(*IPLookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilityService_GetSubscriberIDFromIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilityServiceServer).GetSubscriberIDFromIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.MobilityService/GetSubscriberIDFromIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilityServiceServer).GetSubscriberIDFromIP(ctx, req.(*IPAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilityService_GetSubscriberIPTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilityServiceServer).GetSubscriberIPTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.MobilityService/GetSubscriberIPTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilityServiceServer).GetSubscriberIPTable(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilityService_RemoveIPBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIPBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilityServiceServer).RemoveIPBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.MobilityService/RemoveIPBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilityServiceServer).RemoveIPBlock(ctx, req.(*RemoveIPBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilityService_ListGatewayInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilityServiceServer).ListGatewayInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.MobilityService/ListGatewayInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilityServiceServer).ListGatewayInfo(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobilityService_SetGatewayInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GWInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilityServiceServer).SetGatewayInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.MobilityService/SetGatewayInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilityServiceServer).SetGatewayInfo(ctx, req.(*GWInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _MobilityService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.MobilityService",
	HandlerType: (*MobilityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddIPBlock",
			Handler:    _MobilityService_AddIPBlock_Handler,
		},
		{
			MethodName: "ListAddedIPv4Blocks",
			Handler:    _MobilityService_ListAddedIPv4Blocks_Handler,
		},
		{
			MethodName: "ListAllocatedIPs",
			Handler:    _MobilityService_ListAllocatedIPs_Handler,
		},
		{
			MethodName: "AllocateIPAddress",
			Handler:    _MobilityService_AllocateIPAddress_Handler,
		},
		{
			MethodName: "ReleaseIPAddress",
			Handler:    _MobilityService_ReleaseIPAddress_Handler,
		},
		{
			MethodName: "GetIPForSubscriber",
			Handler:    _MobilityService_GetIPForSubscriber_Handler,
		},
		{
			MethodName: "GetSubscriberIDFromIP",
			Handler:    _MobilityService_GetSubscriberIDFromIP_Handler,
		},
		{
			MethodName: "GetSubscriberIPTable",
			Handler:    _MobilityService_GetSubscriberIPTable_Handler,
		},
		{
			MethodName: "RemoveIPBlock",
			Handler:    _MobilityService_RemoveIPBlock_Handler,
		},
		{
			MethodName: "ListGatewayInfo",
			Handler:    _MobilityService_ListGatewayInfo_Handler,
		},
		{
			MethodName: "SetGatewayInfo",
			Handler:    _MobilityService_SetGatewayInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/mobilityd.proto",
}
