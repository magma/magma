//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: lte/protos/sctpd.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InitRes_InitResult int32

const (
	InitRes_INIT_UNKNOWN InitRes_InitResult = 0 // invalid return code
	InitRes_INIT_OK      InitRes_InitResult = 1
	InitRes_INIT_FAIL    InitRes_InitResult = 2
)

// Enum value maps for InitRes_InitResult.
var (
	InitRes_InitResult_name = map[int32]string{
		0: "INIT_UNKNOWN",
		1: "INIT_OK",
		2: "INIT_FAIL",
	}
	InitRes_InitResult_value = map[string]int32{
		"INIT_UNKNOWN": 0,
		"INIT_OK":      1,
		"INIT_FAIL":    2,
	}
)

func (x InitRes_InitResult) Enum() *InitRes_InitResult {
	p := new(InitRes_InitResult)
	*p = x
	return p
}

func (x InitRes_InitResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InitRes_InitResult) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_sctpd_proto_enumTypes[0].Descriptor()
}

func (InitRes_InitResult) Type() protoreflect.EnumType {
	return &file_lte_protos_sctpd_proto_enumTypes[0]
}

func (x InitRes_InitResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InitRes_InitResult.Descriptor instead.
func (InitRes_InitResult) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_sctpd_proto_rawDescGZIP(), []int{1, 0}
}

type SendDlRes_SendDlResult int32

const (
	SendDlRes_SEND_DL_UNKNOWN SendDlRes_SendDlResult = 0 // invalid return code
	SendDlRes_SEND_DL_OK      SendDlRes_SendDlResult = 1
	SendDlRes_SEND_DL_FAIL    SendDlRes_SendDlResult = 2
)

// Enum value maps for SendDlRes_SendDlResult.
var (
	SendDlRes_SendDlResult_name = map[int32]string{
		0: "SEND_DL_UNKNOWN",
		1: "SEND_DL_OK",
		2: "SEND_DL_FAIL",
	}
	SendDlRes_SendDlResult_value = map[string]int32{
		"SEND_DL_UNKNOWN": 0,
		"SEND_DL_OK":      1,
		"SEND_DL_FAIL":    2,
	}
)

func (x SendDlRes_SendDlResult) Enum() *SendDlRes_SendDlResult {
	p := new(SendDlRes_SendDlResult)
	*p = x
	return p
}

func (x SendDlRes_SendDlResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SendDlRes_SendDlResult) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_sctpd_proto_enumTypes[1].Descriptor()
}

func (SendDlRes_SendDlResult) Type() protoreflect.EnumType {
	return &file_lte_protos_sctpd_proto_enumTypes[1]
}

func (x SendDlRes_SendDlResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SendDlRes_SendDlResult.Descriptor instead.
func (SendDlRes_SendDlResult) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_sctpd_proto_rawDescGZIP(), []int{3, 0}
}

// InitReq - request for sctpd to initialize sctp connection
type InitReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseIpv4      bool     `protobuf:"varint,1,opt,name=use_ipv4,json=useIpv4,proto3" json:"use_ipv4,omitempty"`                // whether to use ipv4 for sctp connection
	UseIpv6      bool     `protobuf:"varint,2,opt,name=use_ipv6,json=useIpv6,proto3" json:"use_ipv6,omitempty"`                // whether to use ipv6 for sctp connection
	Ipv4Addrs    []string `protobuf:"bytes,3,rep,name=ipv4_addrs,json=ipv4Addrs,proto3" json:"ipv4_addrs,omitempty"`           // ipv4 addresses to listen on
	Ipv6Addrs    []string `protobuf:"bytes,4,rep,name=ipv6_addrs,json=ipv6Addrs,proto3" json:"ipv6_addrs,omitempty"`           // ipv6 addresses to listen on
	Port         uint32   `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`                                     // port to listen on
	Ppid         uint32   `protobuf:"varint,6,opt,name=ppid,proto3" json:"ppid,omitempty"`                                     // ppid used with new associations
	ForceRestart bool     `protobuf:"varint,7,opt,name=force_restart,json=forceRestart,proto3" json:"force_restart,omitempty"` // whether to force a new sctp connection setup
}

func (x *InitReq) Reset() {
	*x = InitReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_sctpd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitReq) ProtoMessage() {}

func (x *InitReq) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_sctpd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitReq.ProtoReflect.Descriptor instead.
func (*InitReq) Descriptor() ([]byte, []int) {
	return file_lte_protos_sctpd_proto_rawDescGZIP(), []int{0}
}

func (x *InitReq) GetUseIpv4() bool {
	if x != nil {
		return x.UseIpv4
	}
	return false
}

func (x *InitReq) GetUseIpv6() bool {
	if x != nil {
		return x.UseIpv6
	}
	return false
}

func (x *InitReq) GetIpv4Addrs() []string {
	if x != nil {
		return x.Ipv4Addrs
	}
	return nil
}

func (x *InitReq) GetIpv6Addrs() []string {
	if x != nil {
		return x.Ipv6Addrs
	}
	return nil
}

func (x *InitReq) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *InitReq) GetPpid() uint32 {
	if x != nil {
		return x.Ppid
	}
	return 0
}

func (x *InitReq) GetForceRestart() bool {
	if x != nil {
		return x.ForceRestart
	}
	return false
}

// InitRes - response with status of sctp initialization
type InitRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result InitRes_InitResult `protobuf:"varint,1,opt,name=result,proto3,enum=magma.sctpd.InitRes_InitResult" json:"result,omitempty"`
}

func (x *InitRes) Reset() {
	*x = InitRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_sctpd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitRes) ProtoMessage() {}

func (x *InitRes) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_sctpd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitRes.ProtoReflect.Descriptor instead.
func (*InitRes) Descriptor() ([]byte, []int) {
	return file_lte_protos_sctpd_proto_rawDescGZIP(), []int{1}
}

func (x *InitRes) GetResult() InitRes_InitResult {
	if x != nil {
		return x.Result
	}
	return InitRes_INIT_UNKNOWN
}

// SendDlReq - requests a downlink packet to be sent to eNB
type SendDlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssocId uint32 `protobuf:"varint,1,opt,name=assoc_id,json=assocId,proto3" json:"assoc_id,omitempty"` // association ID of eNB
	Stream  uint32 `protobuf:"varint,2,opt,name=stream,proto3" json:"stream,omitempty"`                  // stream id within association
	Payload []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`                 // data to be sent
	Ppid    uint32 `protobuf:"varint,4,opt,name=ppid,proto3" json:"ppid,omitempty"`
}

func (x *SendDlReq) Reset() {
	*x = SendDlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_sctpd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendDlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendDlReq) ProtoMessage() {}

func (x *SendDlReq) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_sctpd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendDlReq.ProtoReflect.Descriptor instead.
func (*SendDlReq) Descriptor() ([]byte, []int) {
	return file_lte_protos_sctpd_proto_rawDescGZIP(), []int{2}
}

func (x *SendDlReq) GetAssocId() uint32 {
	if x != nil {
		return x.AssocId
	}
	return 0
}

func (x *SendDlReq) GetStream() uint32 {
	if x != nil {
		return x.Stream
	}
	return 0
}

func (x *SendDlReq) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *SendDlReq) GetPpid() uint32 {
	if x != nil {
		return x.Ppid
	}
	return 0
}

// SendDlRes - response with status of downlink packet send
type SendDlRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result SendDlRes_SendDlResult `protobuf:"varint,1,opt,name=result,proto3,enum=magma.sctpd.SendDlRes_SendDlResult" json:"result,omitempty"`
}

func (x *SendDlRes) Reset() {
	*x = SendDlRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_sctpd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendDlRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendDlRes) ProtoMessage() {}

func (x *SendDlRes) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_sctpd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendDlRes.ProtoReflect.Descriptor instead.
func (*SendDlRes) Descriptor() ([]byte, []int) {
	return file_lte_protos_sctpd_proto_rawDescGZIP(), []int{3}
}

func (x *SendDlRes) GetResult() SendDlRes_SendDlResult {
	if x != nil {
		return x.Result
	}
	return SendDlRes_SEND_DL_UNKNOWN
}

// SendUlReq - requests an uplink packet to be sent to MME
type SendUlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssocId uint32 `protobuf:"varint,1,opt,name=assoc_id,json=assocId,proto3" json:"assoc_id,omitempty"` // association ID of eNB
	Stream  uint32 `protobuf:"varint,2,opt,name=stream,proto3" json:"stream,omitempty"`                  // stream id within association
	Payload []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`                 // data to be sent
	Ppid    uint32 `protobuf:"varint,4,opt,name=ppid,proto3" json:"ppid,omitempty"`
}

func (x *SendUlReq) Reset() {
	*x = SendUlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_sctpd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendUlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendUlReq) ProtoMessage() {}

func (x *SendUlReq) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_sctpd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendUlReq.ProtoReflect.Descriptor instead.
func (*SendUlReq) Descriptor() ([]byte, []int) {
	return file_lte_protos_sctpd_proto_rawDescGZIP(), []int{4}
}

func (x *SendUlReq) GetAssocId() uint32 {
	if x != nil {
		return x.AssocId
	}
	return 0
}

func (x *SendUlReq) GetStream() uint32 {
	if x != nil {
		return x.Stream
	}
	return 0
}

func (x *SendUlReq) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *SendUlReq) GetPpid() uint32 {
	if x != nil {
		return x.Ppid
	}
	return 0
}

// SendUlRes - response for SendUlReq, present for forwards compat
type SendUlRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SendUlRes) Reset() {
	*x = SendUlRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_sctpd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendUlRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendUlRes) ProtoMessage() {}

func (x *SendUlRes) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_sctpd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendUlRes.ProtoReflect.Descriptor instead.
func (*SendUlRes) Descriptor() ([]byte, []int) {
	return file_lte_protos_sctpd_proto_rawDescGZIP(), []int{5}
}

// NewAssocReq - request to notify MME of new eNB association
type NewAssocReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssocId     uint32 `protobuf:"varint,1,opt,name=assoc_id,json=assocId,proto3" json:"assoc_id,omitempty"`              // association ID of eNB
	Instreams   uint32 `protobuf:"varint,2,opt,name=instreams,proto3" json:"instreams,omitempty"`                         // number of instreams for eNB
	Outstreams  uint32 `protobuf:"varint,3,opt,name=outstreams,proto3" json:"outstreams,omitempty"`                       // number of outstreams for eNB
	RanCpIpaddr []byte `protobuf:"bytes,4,opt,name=ran_cp_ipaddr,json=ranCpIpaddr,proto3" json:"ran_cp_ipaddr,omitempty"` // sctp ran end point IP address
	Ppid        uint32 `protobuf:"varint,5,opt,name=ppid,proto3" json:"ppid,omitempty"`
}

func (x *NewAssocReq) Reset() {
	*x = NewAssocReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_sctpd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewAssocReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewAssocReq) ProtoMessage() {}

func (x *NewAssocReq) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_sctpd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewAssocReq.ProtoReflect.Descriptor instead.
func (*NewAssocReq) Descriptor() ([]byte, []int) {
	return file_lte_protos_sctpd_proto_rawDescGZIP(), []int{6}
}

func (x *NewAssocReq) GetAssocId() uint32 {
	if x != nil {
		return x.AssocId
	}
	return 0
}

func (x *NewAssocReq) GetInstreams() uint32 {
	if x != nil {
		return x.Instreams
	}
	return 0
}

func (x *NewAssocReq) GetOutstreams() uint32 {
	if x != nil {
		return x.Outstreams
	}
	return 0
}

func (x *NewAssocReq) GetRanCpIpaddr() []byte {
	if x != nil {
		return x.RanCpIpaddr
	}
	return nil
}

func (x *NewAssocReq) GetPpid() uint32 {
	if x != nil {
		return x.Ppid
	}
	return 0
}

// NewAssocRes - response for NewAssocReq, present for forwards compat
type NewAssocRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NewAssocRes) Reset() {
	*x = NewAssocRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_sctpd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewAssocRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewAssocRes) ProtoMessage() {}

func (x *NewAssocRes) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_sctpd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewAssocRes.ProtoReflect.Descriptor instead.
func (*NewAssocRes) Descriptor() ([]byte, []int) {
	return file_lte_protos_sctpd_proto_rawDescGZIP(), []int{7}
}

// CloseAssocReq - request to notify MME of a closing/resetting assocation
type CloseAssocReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssocId uint32 `protobuf:"varint,1,opt,name=assoc_id,json=assocId,proto3" json:"assoc_id,omitempty"` // association ID of eNB
	IsReset bool   `protobuf:"varint,2,opt,name=is_reset,json=isReset,proto3" json:"is_reset,omitempty"` // whether the request represents a reset or shutdown
	Ppid    uint32 `protobuf:"varint,3,opt,name=ppid,proto3" json:"ppid,omitempty"`
}

func (x *CloseAssocReq) Reset() {
	*x = CloseAssocReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_sctpd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseAssocReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseAssocReq) ProtoMessage() {}

func (x *CloseAssocReq) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_sctpd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseAssocReq.ProtoReflect.Descriptor instead.
func (*CloseAssocReq) Descriptor() ([]byte, []int) {
	return file_lte_protos_sctpd_proto_rawDescGZIP(), []int{8}
}

func (x *CloseAssocReq) GetAssocId() uint32 {
	if x != nil {
		return x.AssocId
	}
	return 0
}

func (x *CloseAssocReq) GetIsReset() bool {
	if x != nil {
		return x.IsReset
	}
	return false
}

func (x *CloseAssocReq) GetPpid() uint32 {
	if x != nil {
		return x.Ppid
	}
	return 0
}

// CloseAssocRes - response for CloseAssocReq, present for forwards compat
type CloseAssocRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CloseAssocRes) Reset() {
	*x = CloseAssocRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_sctpd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseAssocRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseAssocRes) ProtoMessage() {}

func (x *CloseAssocRes) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_sctpd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseAssocRes.ProtoReflect.Descriptor instead.
func (*CloseAssocRes) Descriptor() ([]byte, []int) {
	return file_lte_protos_sctpd_proto_rawDescGZIP(), []int{9}
}

var File_lte_protos_sctpd_proto protoreflect.FileDescriptor

var file_lte_protos_sctpd_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x74,
	0x70, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x73, 0x63, 0x74, 0x70, 0x64, 0x22, 0xca, 0x01, 0x0a, 0x07, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x75, 0x73, 0x65, 0x49, 0x70, 0x76, 0x34, 0x12, 0x19, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x49, 0x70, 0x76, 0x36, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x76,
	0x34, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x76, 0x36,
	0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x70, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x70, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x22, 0x7e, 0x0a, 0x07, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x12, 0x37, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x73, 0x63, 0x74, 0x70, 0x64, 0x2e, 0x49, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x3a, 0x0a, 0x0a, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x4f,
	0x4b, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x10, 0x02, 0x22, 0x6c, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x6c, 0x52, 0x65, 0x71, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x70, 0x69, 0x64,
	0x22, 0x8f, 0x01, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x6c, 0x52, 0x65, 0x73, 0x12, 0x3b,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x73, 0x63, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x44, 0x6c, 0x52, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x6c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x45, 0x0a, 0x0c, 0x53,
	0x65, 0x6e, 0x64, 0x44, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x45, 0x4e, 0x44, 0x5f, 0x44, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x44, 0x4c, 0x5f, 0x4f, 0x4b, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x44, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x10, 0x02, 0x22, 0x6c, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x55, 0x6c, 0x52, 0x65, 0x71, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x70, 0x69, 0x64,
	0x22, 0x0b, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x55, 0x6c, 0x52, 0x65, 0x73, 0x22, 0x9e, 0x01,
	0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x5f, 0x63, 0x70,
	0x5f, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72,
	0x61, 0x6e, 0x43, 0x70, 0x49, 0x70, 0x61, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x70,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x70, 0x69, 0x64, 0x22, 0x0d,
	0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x52, 0x65, 0x73, 0x22, 0x59, 0x0a,
	0x0d, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x70, 0x70, 0x69, 0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x52, 0x65, 0x73, 0x32, 0x81, 0x01, 0x0a, 0x0d, 0x53, 0x63,
	0x74, 0x70, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x34, 0x0a, 0x04, 0x49,
	0x6e, 0x69, 0x74, 0x12, 0x14, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x73, 0x63, 0x74, 0x70,
	0x64, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x73, 0x63, 0x74, 0x70, 0x64, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x3a, 0x0a, 0x06, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x6c, 0x12, 0x16, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x73, 0x63, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x6c,
	0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x73, 0x63, 0x74, 0x70,
	0x64, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x6c, 0x52, 0x65, 0x73, 0x22, 0x00, 0x32, 0xd3, 0x01,
	0x0a, 0x0b, 0x53, 0x63, 0x74, 0x70, 0x64, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x3a, 0x0a,
	0x06, 0x53, 0x65, 0x6e, 0x64, 0x55, 0x6c, 0x12, 0x16, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x73, 0x63, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x55, 0x6c, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x73, 0x63, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x55, 0x6c, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x08, 0x4e, 0x65, 0x77,
	0x41, 0x73, 0x73, 0x6f, 0x63, 0x12, 0x18, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x73, 0x63,
	0x74, 0x70, 0x64, 0x2e, 0x4e, 0x65, 0x77, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x1a,
	0x18, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x73, 0x63, 0x74, 0x70, 0x64, 0x2e, 0x4e, 0x65,
	0x77, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0a, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x12, 0x1a, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x73, 0x63, 0x74, 0x70, 0x64, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x73, 0x73,
	0x6f, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x73, 0x63,
	0x74, 0x70, 0x64, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x42, 0x1b, 0x5a, 0x19, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f, 0x6c, 0x74, 0x65,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lte_protos_sctpd_proto_rawDescOnce sync.Once
	file_lte_protos_sctpd_proto_rawDescData = file_lte_protos_sctpd_proto_rawDesc
)

func file_lte_protos_sctpd_proto_rawDescGZIP() []byte {
	file_lte_protos_sctpd_proto_rawDescOnce.Do(func() {
		file_lte_protos_sctpd_proto_rawDescData = protoimpl.X.CompressGZIP(file_lte_protos_sctpd_proto_rawDescData)
	})
	return file_lte_protos_sctpd_proto_rawDescData
}

var file_lte_protos_sctpd_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_lte_protos_sctpd_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_lte_protos_sctpd_proto_goTypes = []interface{}{
	(InitRes_InitResult)(0),     // 0: magma.sctpd.InitRes.InitResult
	(SendDlRes_SendDlResult)(0), // 1: magma.sctpd.SendDlRes.SendDlResult
	(*InitReq)(nil),             // 2: magma.sctpd.InitReq
	(*InitRes)(nil),             // 3: magma.sctpd.InitRes
	(*SendDlReq)(nil),           // 4: magma.sctpd.SendDlReq
	(*SendDlRes)(nil),           // 5: magma.sctpd.SendDlRes
	(*SendUlReq)(nil),           // 6: magma.sctpd.SendUlReq
	(*SendUlRes)(nil),           // 7: magma.sctpd.SendUlRes
	(*NewAssocReq)(nil),         // 8: magma.sctpd.NewAssocReq
	(*NewAssocRes)(nil),         // 9: magma.sctpd.NewAssocRes
	(*CloseAssocReq)(nil),       // 10: magma.sctpd.CloseAssocReq
	(*CloseAssocRes)(nil),       // 11: magma.sctpd.CloseAssocRes
}
var file_lte_protos_sctpd_proto_depIdxs = []int32{
	0,  // 0: magma.sctpd.InitRes.result:type_name -> magma.sctpd.InitRes.InitResult
	1,  // 1: magma.sctpd.SendDlRes.result:type_name -> magma.sctpd.SendDlRes.SendDlResult
	2,  // 2: magma.sctpd.SctpdDownlink.Init:input_type -> magma.sctpd.InitReq
	4,  // 3: magma.sctpd.SctpdDownlink.SendDl:input_type -> magma.sctpd.SendDlReq
	6,  // 4: magma.sctpd.SctpdUplink.SendUl:input_type -> magma.sctpd.SendUlReq
	8,  // 5: magma.sctpd.SctpdUplink.NewAssoc:input_type -> magma.sctpd.NewAssocReq
	10, // 6: magma.sctpd.SctpdUplink.CloseAssoc:input_type -> magma.sctpd.CloseAssocReq
	3,  // 7: magma.sctpd.SctpdDownlink.Init:output_type -> magma.sctpd.InitRes
	5,  // 8: magma.sctpd.SctpdDownlink.SendDl:output_type -> magma.sctpd.SendDlRes
	7,  // 9: magma.sctpd.SctpdUplink.SendUl:output_type -> magma.sctpd.SendUlRes
	9,  // 10: magma.sctpd.SctpdUplink.NewAssoc:output_type -> magma.sctpd.NewAssocRes
	11, // 11: magma.sctpd.SctpdUplink.CloseAssoc:output_type -> magma.sctpd.CloseAssocRes
	7,  // [7:12] is the sub-list for method output_type
	2,  // [2:7] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_lte_protos_sctpd_proto_init() }
func file_lte_protos_sctpd_proto_init() {
	if File_lte_protos_sctpd_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lte_protos_sctpd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_sctpd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_sctpd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendDlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_sctpd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendDlRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_sctpd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendUlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_sctpd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendUlRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_sctpd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewAssocReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_sctpd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewAssocRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_sctpd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseAssocReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_sctpd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseAssocRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lte_protos_sctpd_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_lte_protos_sctpd_proto_goTypes,
		DependencyIndexes: file_lte_protos_sctpd_proto_depIdxs,
		EnumInfos:         file_lte_protos_sctpd_proto_enumTypes,
		MessageInfos:      file_lte_protos_sctpd_proto_msgTypes,
	}.Build()
	File_lte_protos_sctpd_proto = out.File
	file_lte_protos_sctpd_proto_rawDesc = nil
	file_lte_protos_sctpd_proto_goTypes = nil
	file_lte_protos_sctpd_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SctpdDownlinkClient is the client API for SctpdDownlink service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SctpdDownlinkClient interface {
	// Init - initialize sctp connection according to InitReq
	// @param InitReq request specifying desired sctp configuration
	// @return InitRes response w/ init success status
	Init(ctx context.Context, in *InitReq, opts ...grpc.CallOption) (*InitRes, error)
	// SendDl - send a downlink packet to eNB
	// @param SendDlReq request specifying packet data and destination
	// @return SendDlRes response w/ send success status
	SendDl(ctx context.Context, in *SendDlReq, opts ...grpc.CallOption) (*SendDlRes, error)
}

type sctpdDownlinkClient struct {
	cc grpc.ClientConnInterface
}

func NewSctpdDownlinkClient(cc grpc.ClientConnInterface) SctpdDownlinkClient {
	return &sctpdDownlinkClient{cc}
}

func (c *sctpdDownlinkClient) Init(ctx context.Context, in *InitReq, opts ...grpc.CallOption) (*InitRes, error) {
	out := new(InitRes)
	err := c.cc.Invoke(ctx, "/magma.sctpd.SctpdDownlink/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sctpdDownlinkClient) SendDl(ctx context.Context, in *SendDlReq, opts ...grpc.CallOption) (*SendDlRes, error) {
	out := new(SendDlRes)
	err := c.cc.Invoke(ctx, "/magma.sctpd.SctpdDownlink/SendDl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SctpdDownlinkServer is the server API for SctpdDownlink service.
type SctpdDownlinkServer interface {
	// Init - initialize sctp connection according to InitReq
	// @param InitReq request specifying desired sctp configuration
	// @return InitRes response w/ init success status
	Init(context.Context, *InitReq) (*InitRes, error)
	// SendDl - send a downlink packet to eNB
	// @param SendDlReq request specifying packet data and destination
	// @return SendDlRes response w/ send success status
	SendDl(context.Context, *SendDlReq) (*SendDlRes, error)
}

// UnimplementedSctpdDownlinkServer can be embedded to have forward compatible implementations.
type UnimplementedSctpdDownlinkServer struct {
}

func (*UnimplementedSctpdDownlinkServer) Init(context.Context, *InitReq) (*InitRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (*UnimplementedSctpdDownlinkServer) SendDl(context.Context, *SendDlReq) (*SendDlRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDl not implemented")
}

func RegisterSctpdDownlinkServer(s *grpc.Server, srv SctpdDownlinkServer) {
	s.RegisterService(&_SctpdDownlink_serviceDesc, srv)
}

func _SctpdDownlink_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SctpdDownlinkServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.sctpd.SctpdDownlink/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SctpdDownlinkServer).Init(ctx, req.(*InitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SctpdDownlink_SendDl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendDlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SctpdDownlinkServer).SendDl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.sctpd.SctpdDownlink/SendDl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SctpdDownlinkServer).SendDl(ctx, req.(*SendDlReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _SctpdDownlink_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.sctpd.SctpdDownlink",
	HandlerType: (*SctpdDownlinkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _SctpdDownlink_Init_Handler,
		},
		{
			MethodName: "SendDl",
			Handler:    _SctpdDownlink_SendDl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/sctpd.proto",
}

// SctpdUplinkClient is the client API for SctpdUplink service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SctpdUplinkClient interface {
	// SendUl - send an uplink packet to MME
	// @param SendUlReq request specifying packet data and destination
	// @return SendUlRes void response object
	SendUl(ctx context.Context, in *SendUlReq, opts ...grpc.CallOption) (*SendUlRes, error)
	// NewAssoc - notify MME of new eNB association
	// @param NewAssocReq request specifying new association's information
	// @return NewAssocRes void response object
	NewAssoc(ctx context.Context, in *NewAssocReq, opts ...grpc.CallOption) (*NewAssocRes, error)
	// CloseAssoc - notify MME of closing/resetting eNB association
	// @param CloseAssocReq request specifying closing association and close type
	// @return CloseAssocRes void response object
	CloseAssoc(ctx context.Context, in *CloseAssocReq, opts ...grpc.CallOption) (*CloseAssocRes, error)
}

type sctpdUplinkClient struct {
	cc grpc.ClientConnInterface
}

func NewSctpdUplinkClient(cc grpc.ClientConnInterface) SctpdUplinkClient {
	return &sctpdUplinkClient{cc}
}

func (c *sctpdUplinkClient) SendUl(ctx context.Context, in *SendUlReq, opts ...grpc.CallOption) (*SendUlRes, error) {
	out := new(SendUlRes)
	err := c.cc.Invoke(ctx, "/magma.sctpd.SctpdUplink/SendUl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sctpdUplinkClient) NewAssoc(ctx context.Context, in *NewAssocReq, opts ...grpc.CallOption) (*NewAssocRes, error) {
	out := new(NewAssocRes)
	err := c.cc.Invoke(ctx, "/magma.sctpd.SctpdUplink/NewAssoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sctpdUplinkClient) CloseAssoc(ctx context.Context, in *CloseAssocReq, opts ...grpc.CallOption) (*CloseAssocRes, error) {
	out := new(CloseAssocRes)
	err := c.cc.Invoke(ctx, "/magma.sctpd.SctpdUplink/CloseAssoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SctpdUplinkServer is the server API for SctpdUplink service.
type SctpdUplinkServer interface {
	// SendUl - send an uplink packet to MME
	// @param SendUlReq request specifying packet data and destination
	// @return SendUlRes void response object
	SendUl(context.Context, *SendUlReq) (*SendUlRes, error)
	// NewAssoc - notify MME of new eNB association
	// @param NewAssocReq request specifying new association's information
	// @return NewAssocRes void response object
	NewAssoc(context.Context, *NewAssocReq) (*NewAssocRes, error)
	// CloseAssoc - notify MME of closing/resetting eNB association
	// @param CloseAssocReq request specifying closing association and close type
	// @return CloseAssocRes void response object
	CloseAssoc(context.Context, *CloseAssocReq) (*CloseAssocRes, error)
}

// UnimplementedSctpdUplinkServer can be embedded to have forward compatible implementations.
type UnimplementedSctpdUplinkServer struct {
}

func (*UnimplementedSctpdUplinkServer) SendUl(context.Context, *SendUlReq) (*SendUlRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendUl not implemented")
}
func (*UnimplementedSctpdUplinkServer) NewAssoc(context.Context, *NewAssocReq) (*NewAssocRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewAssoc not implemented")
}
func (*UnimplementedSctpdUplinkServer) CloseAssoc(context.Context, *CloseAssocReq) (*CloseAssocRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseAssoc not implemented")
}

func RegisterSctpdUplinkServer(s *grpc.Server, srv SctpdUplinkServer) {
	s.RegisterService(&_SctpdUplink_serviceDesc, srv)
}

func _SctpdUplink_SendUl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendUlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SctpdUplinkServer).SendUl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.sctpd.SctpdUplink/SendUl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SctpdUplinkServer).SendUl(ctx, req.(*SendUlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SctpdUplink_NewAssoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAssocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SctpdUplinkServer).NewAssoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.sctpd.SctpdUplink/NewAssoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SctpdUplinkServer).NewAssoc(ctx, req.(*NewAssocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SctpdUplink_CloseAssoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseAssocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SctpdUplinkServer).CloseAssoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.sctpd.SctpdUplink/CloseAssoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SctpdUplinkServer).CloseAssoc(ctx, req.(*CloseAssocReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _SctpdUplink_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.sctpd.SctpdUplink",
	HandlerType: (*SctpdUplinkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendUl",
			Handler:    _SctpdUplink_SendUl_Handler,
		},
		{
			MethodName: "NewAssoc",
			Handler:    _SctpdUplink_NewAssoc_Handler,
		},
		{
			MethodName: "CloseAssoc",
			Handler:    _SctpdUplink_CloseAssoc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/sctpd.proto",
}
