//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: lte/protos/policydb.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	protos "magma/orc8r/lib/go/protos"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PolicyRule_TrackingType int32

const (
	PolicyRule_ONLY_OCS     PolicyRule_TrackingType = 0 // rating_group required
	PolicyRule_ONLY_PCRF    PolicyRule_TrackingType = 1 // monitoring_key required
	PolicyRule_OCS_AND_PCRF PolicyRule_TrackingType = 2 // rating_group & monitoring_key required
	PolicyRule_NO_TRACKING  PolicyRule_TrackingType = 3
)

// Enum value maps for PolicyRule_TrackingType.
var (
	PolicyRule_TrackingType_name = map[int32]string{
		0: "ONLY_OCS",
		1: "ONLY_PCRF",
		2: "OCS_AND_PCRF",
		3: "NO_TRACKING",
	}
	PolicyRule_TrackingType_value = map[string]int32{
		"ONLY_OCS":     0,
		"ONLY_PCRF":    1,
		"OCS_AND_PCRF": 2,
		"NO_TRACKING":  3,
	}
)

func (x PolicyRule_TrackingType) Enum() *PolicyRule_TrackingType {
	p := new(PolicyRule_TrackingType)
	*p = x
	return p
}

func (x PolicyRule_TrackingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicyRule_TrackingType) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_policydb_proto_enumTypes[0].Descriptor()
}

func (PolicyRule_TrackingType) Type() protoreflect.EnumType {
	return &file_lte_protos_policydb_proto_enumTypes[0]
}

func (x PolicyRule_TrackingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicyRule_TrackingType.Descriptor instead.
func (PolicyRule_TrackingType) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_policydb_proto_rawDescGZIP(), []int{1, 0}
}

type PolicyRule_AppName int32

const (
	PolicyRule_NO_APP_NAME        PolicyRule_AppName = 0
	PolicyRule_FACEBOOK           PolicyRule_AppName = 1
	PolicyRule_FACEBOOK_MESSENGER PolicyRule_AppName = 2
	PolicyRule_INSTAGRAM          PolicyRule_AppName = 3
	PolicyRule_YOUTUBE            PolicyRule_AppName = 4
	PolicyRule_GOOGLE             PolicyRule_AppName = 5
	PolicyRule_GMAIL              PolicyRule_AppName = 6
	PolicyRule_GOOGLE_DOCS        PolicyRule_AppName = 7
	PolicyRule_NETFLIX            PolicyRule_AppName = 8
	PolicyRule_APPLE              PolicyRule_AppName = 9
	PolicyRule_MICROSOFT          PolicyRule_AppName = 10
	PolicyRule_REDDIT             PolicyRule_AppName = 11
	PolicyRule_WHATSAPP           PolicyRule_AppName = 12
	PolicyRule_GOOGLE_PLAY        PolicyRule_AppName = 13
	PolicyRule_APPSTORE           PolicyRule_AppName = 14
	PolicyRule_AMAZON             PolicyRule_AppName = 15
	PolicyRule_WECHAT             PolicyRule_AppName = 16
	PolicyRule_TIKTOK             PolicyRule_AppName = 17
	PolicyRule_TWITTER            PolicyRule_AppName = 18
	PolicyRule_WIKIPEDIA          PolicyRule_AppName = 19
	PolicyRule_GOOGLE_MAPS        PolicyRule_AppName = 20
	PolicyRule_YAHOO              PolicyRule_AppName = 21
	PolicyRule_IMO                PolicyRule_AppName = 22
)

// Enum value maps for PolicyRule_AppName.
var (
	PolicyRule_AppName_name = map[int32]string{
		0:  "NO_APP_NAME",
		1:  "FACEBOOK",
		2:  "FACEBOOK_MESSENGER",
		3:  "INSTAGRAM",
		4:  "YOUTUBE",
		5:  "GOOGLE",
		6:  "GMAIL",
		7:  "GOOGLE_DOCS",
		8:  "NETFLIX",
		9:  "APPLE",
		10: "MICROSOFT",
		11: "REDDIT",
		12: "WHATSAPP",
		13: "GOOGLE_PLAY",
		14: "APPSTORE",
		15: "AMAZON",
		16: "WECHAT",
		17: "TIKTOK",
		18: "TWITTER",
		19: "WIKIPEDIA",
		20: "GOOGLE_MAPS",
		21: "YAHOO",
		22: "IMO",
	}
	PolicyRule_AppName_value = map[string]int32{
		"NO_APP_NAME":        0,
		"FACEBOOK":           1,
		"FACEBOOK_MESSENGER": 2,
		"INSTAGRAM":          3,
		"YOUTUBE":            4,
		"GOOGLE":             5,
		"GMAIL":              6,
		"GOOGLE_DOCS":        7,
		"NETFLIX":            8,
		"APPLE":              9,
		"MICROSOFT":          10,
		"REDDIT":             11,
		"WHATSAPP":           12,
		"GOOGLE_PLAY":        13,
		"APPSTORE":           14,
		"AMAZON":             15,
		"WECHAT":             16,
		"TIKTOK":             17,
		"TWITTER":            18,
		"WIKIPEDIA":          19,
		"GOOGLE_MAPS":        20,
		"YAHOO":              21,
		"IMO":                22,
	}
)

func (x PolicyRule_AppName) Enum() *PolicyRule_AppName {
	p := new(PolicyRule_AppName)
	*p = x
	return p
}

func (x PolicyRule_AppName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicyRule_AppName) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_policydb_proto_enumTypes[1].Descriptor()
}

func (PolicyRule_AppName) Type() protoreflect.EnumType {
	return &file_lte_protos_policydb_proto_enumTypes[1]
}

func (x PolicyRule_AppName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicyRule_AppName.Descriptor instead.
func (PolicyRule_AppName) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_policydb_proto_rawDescGZIP(), []int{1, 1}
}

type PolicyRule_AppServiceType int32

const (
	PolicyRule_NO_SERVICE_TYPE PolicyRule_AppServiceType = 0
	PolicyRule_CHAT            PolicyRule_AppServiceType = 1
	PolicyRule_AUDIO           PolicyRule_AppServiceType = 2
	PolicyRule_VIDEO           PolicyRule_AppServiceType = 3
)

// Enum value maps for PolicyRule_AppServiceType.
var (
	PolicyRule_AppServiceType_name = map[int32]string{
		0: "NO_SERVICE_TYPE",
		1: "CHAT",
		2: "AUDIO",
		3: "VIDEO",
	}
	PolicyRule_AppServiceType_value = map[string]int32{
		"NO_SERVICE_TYPE": 0,
		"CHAT":            1,
		"AUDIO":           2,
		"VIDEO":           3,
	}
)

func (x PolicyRule_AppServiceType) Enum() *PolicyRule_AppServiceType {
	p := new(PolicyRule_AppServiceType)
	*p = x
	return p
}

func (x PolicyRule_AppServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicyRule_AppServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_policydb_proto_enumTypes[2].Descriptor()
}

func (PolicyRule_AppServiceType) Type() protoreflect.EnumType {
	return &file_lte_protos_policydb_proto_enumTypes[2]
}

func (x PolicyRule_AppServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicyRule_AppServiceType.Descriptor instead.
func (PolicyRule_AppServiceType) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_policydb_proto_rawDescGZIP(), []int{1, 2}
}

type FlowDescription_Action int32

const (
	FlowDescription_PERMIT FlowDescription_Action = 0
	FlowDescription_DENY   FlowDescription_Action = 1
)

// Enum value maps for FlowDescription_Action.
var (
	FlowDescription_Action_name = map[int32]string{
		0: "PERMIT",
		1: "DENY",
	}
	FlowDescription_Action_value = map[string]int32{
		"PERMIT": 0,
		"DENY":   1,
	}
)

func (x FlowDescription_Action) Enum() *FlowDescription_Action {
	p := new(FlowDescription_Action)
	*p = x
	return p
}

func (x FlowDescription_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowDescription_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_policydb_proto_enumTypes[3].Descriptor()
}

func (FlowDescription_Action) Type() protoreflect.EnumType {
	return &file_lte_protos_policydb_proto_enumTypes[3]
}

func (x FlowDescription_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowDescription_Action.Descriptor instead.
func (FlowDescription_Action) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_policydb_proto_rawDescGZIP(), []int{3, 0}
}

type FlowMatch_IPProto int32

const (
	FlowMatch_IPPROTO_IP       FlowMatch_IPProto = 0
	FlowMatch_IPPROTO_HOPOPTS  FlowMatch_IPProto = 0
	FlowMatch_IPPROTO_ICMP     FlowMatch_IPProto = 1
	FlowMatch_IPPROTO_IGMP     FlowMatch_IPProto = 2
	FlowMatch_IPPROTO_TCP      FlowMatch_IPProto = 6
	FlowMatch_IPPROTO_UDP      FlowMatch_IPProto = 17
	FlowMatch_IPPROTO_ROUTING  FlowMatch_IPProto = 43
	FlowMatch_IPPROTO_FRAGMENT FlowMatch_IPProto = 44
	FlowMatch_IPPROTO_GRE      FlowMatch_IPProto = 47
	FlowMatch_IPPROTO_AH       FlowMatch_IPProto = 51
	FlowMatch_IPPROTO_ICMPV6   FlowMatch_IPProto = 58
	FlowMatch_IPPROTO_NONE     FlowMatch_IPProto = 59
	FlowMatch_IPPROTO_DSTOPTS  FlowMatch_IPProto = 60
	FlowMatch_IPPROTO_OSPF     FlowMatch_IPProto = 89
	FlowMatch_IPPROTO_VRRP     FlowMatch_IPProto = 112
	FlowMatch_IPPROTO_SCTP     FlowMatch_IPProto = 132
)

// Enum value maps for FlowMatch_IPProto.
var (
	FlowMatch_IPProto_name = map[int32]string{
		0: "IPPROTO_IP",
		// Duplicate value: 0: "IPPROTO_HOPOPTS",
		1:   "IPPROTO_ICMP",
		2:   "IPPROTO_IGMP",
		6:   "IPPROTO_TCP",
		17:  "IPPROTO_UDP",
		43:  "IPPROTO_ROUTING",
		44:  "IPPROTO_FRAGMENT",
		47:  "IPPROTO_GRE",
		51:  "IPPROTO_AH",
		58:  "IPPROTO_ICMPV6",
		59:  "IPPROTO_NONE",
		60:  "IPPROTO_DSTOPTS",
		89:  "IPPROTO_OSPF",
		112: "IPPROTO_VRRP",
		132: "IPPROTO_SCTP",
	}
	FlowMatch_IPProto_value = map[string]int32{
		"IPPROTO_IP":       0,
		"IPPROTO_HOPOPTS":  0,
		"IPPROTO_ICMP":     1,
		"IPPROTO_IGMP":     2,
		"IPPROTO_TCP":      6,
		"IPPROTO_UDP":      17,
		"IPPROTO_ROUTING":  43,
		"IPPROTO_FRAGMENT": 44,
		"IPPROTO_GRE":      47,
		"IPPROTO_AH":       51,
		"IPPROTO_ICMPV6":   58,
		"IPPROTO_NONE":     59,
		"IPPROTO_DSTOPTS":  60,
		"IPPROTO_OSPF":     89,
		"IPPROTO_VRRP":     112,
		"IPPROTO_SCTP":     132,
	}
)

func (x FlowMatch_IPProto) Enum() *FlowMatch_IPProto {
	p := new(FlowMatch_IPProto)
	*p = x
	return p
}

func (x FlowMatch_IPProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowMatch_IPProto) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_policydb_proto_enumTypes[4].Descriptor()
}

func (FlowMatch_IPProto) Type() protoreflect.EnumType {
	return &file_lte_protos_policydb_proto_enumTypes[4]
}

func (x FlowMatch_IPProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowMatch_IPProto.Descriptor instead.
func (FlowMatch_IPProto) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_policydb_proto_rawDescGZIP(), []int{4, 0}
}

type FlowMatch_Direction int32

const (
	FlowMatch_UPLINK   FlowMatch_Direction = 0 // UE (src) -> Internet (dst)
	FlowMatch_DOWNLINK FlowMatch_Direction = 1 // Internet (src) -> UE (dst)
)

// Enum value maps for FlowMatch_Direction.
var (
	FlowMatch_Direction_name = map[int32]string{
		0: "UPLINK",
		1: "DOWNLINK",
	}
	FlowMatch_Direction_value = map[string]int32{
		"UPLINK":   0,
		"DOWNLINK": 1,
	}
)

func (x FlowMatch_Direction) Enum() *FlowMatch_Direction {
	p := new(FlowMatch_Direction)
	*p = x
	return p
}

func (x FlowMatch_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowMatch_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_policydb_proto_enumTypes[5].Descriptor()
}

func (FlowMatch_Direction) Type() protoreflect.EnumType {
	return &file_lte_protos_policydb_proto_enumTypes[5]
}

func (x FlowMatch_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowMatch_Direction.Descriptor instead.
func (FlowMatch_Direction) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_policydb_proto_rawDescGZIP(), []int{4, 1}
}

type QosArp_PreCap int32

const (
	QosArp_PRE_CAP_ENABLED  QosArp_PreCap = 0
	QosArp_PRE_CAP_DISABLED QosArp_PreCap = 1
)

// Enum value maps for QosArp_PreCap.
var (
	QosArp_PreCap_name = map[int32]string{
		0: "PRE_CAP_ENABLED",
		1: "PRE_CAP_DISABLED",
	}
	QosArp_PreCap_value = map[string]int32{
		"PRE_CAP_ENABLED":  0,
		"PRE_CAP_DISABLED": 1,
	}
)

func (x QosArp_PreCap) Enum() *QosArp_PreCap {
	p := new(QosArp_PreCap)
	*p = x
	return p
}

func (x QosArp_PreCap) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QosArp_PreCap) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_policydb_proto_enumTypes[6].Descriptor()
}

func (QosArp_PreCap) Type() protoreflect.EnumType {
	return &file_lte_protos_policydb_proto_enumTypes[6]
}

func (x QosArp_PreCap) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QosArp_PreCap.Descriptor instead.
func (QosArp_PreCap) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_policydb_proto_rawDescGZIP(), []int{5, 0}
}

type QosArp_PreVul int32

const (
	QosArp_PRE_VUL_ENABLED  QosArp_PreVul = 0
	QosArp_PRE_VUL_DISABLED QosArp_PreVul = 1
)

// Enum value maps for QosArp_PreVul.
var (
	QosArp_PreVul_name = map[int32]string{
		0: "PRE_VUL_ENABLED",
		1: "PRE_VUL_DISABLED",
	}
	QosArp_PreVul_value = map[string]int32{
		"PRE_VUL_ENABLED":  0,
		"PRE_VUL_DISABLED": 1,
	}
)

func (x QosArp_PreVul) Enum() *QosArp_PreVul {
	p := new(QosArp_PreVul)
	*p = x
	return p
}

func (x QosArp_PreVul) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QosArp_PreVul) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_policydb_proto_enumTypes[7].Descriptor()
}

func (QosArp_PreVul) Type() protoreflect.EnumType {
	return &file_lte_protos_policydb_proto_enumTypes[7]
}

func (x QosArp_PreVul) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QosArp_PreVul.Descriptor instead.
func (QosArp_PreVul) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_policydb_proto_rawDescGZIP(), []int{5, 1}
}

type FlowQos_Qci int32

const (
	FlowQos_QCI_0  FlowQos_Qci = 0
	FlowQos_QCI_1  FlowQos_Qci = 1
	FlowQos_QCI_2  FlowQos_Qci = 2
	FlowQos_QCI_3  FlowQos_Qci = 3
	FlowQos_QCI_4  FlowQos_Qci = 4
	FlowQos_QCI_5  FlowQos_Qci = 5
	FlowQos_QCI_6  FlowQos_Qci = 6
	FlowQos_QCI_7  FlowQos_Qci = 7
	FlowQos_QCI_8  FlowQos_Qci = 8
	FlowQos_QCI_9  FlowQos_Qci = 9
	FlowQos_QCI_65 FlowQos_Qci = 65
	FlowQos_QCI_66 FlowQos_Qci = 66
	FlowQos_QCI_67 FlowQos_Qci = 67
	FlowQos_QCI_70 FlowQos_Qci = 70
	FlowQos_QCI_75 FlowQos_Qci = 75
	FlowQos_QCI_79 FlowQos_Qci = 79
)

// Enum value maps for FlowQos_Qci.
var (
	FlowQos_Qci_name = map[int32]string{
		0:  "QCI_0",
		1:  "QCI_1",
		2:  "QCI_2",
		3:  "QCI_3",
		4:  "QCI_4",
		5:  "QCI_5",
		6:  "QCI_6",
		7:  "QCI_7",
		8:  "QCI_8",
		9:  "QCI_9",
		65: "QCI_65",
		66: "QCI_66",
		67: "QCI_67",
		70: "QCI_70",
		75: "QCI_75",
		79: "QCI_79",
	}
	FlowQos_Qci_value = map[string]int32{
		"QCI_0":  0,
		"QCI_1":  1,
		"QCI_2":  2,
		"QCI_3":  3,
		"QCI_4":  4,
		"QCI_5":  5,
		"QCI_6":  6,
		"QCI_7":  7,
		"QCI_8":  8,
		"QCI_9":  9,
		"QCI_65": 65,
		"QCI_66": 66,
		"QCI_67": 67,
		"QCI_70": 70,
		"QCI_75": 75,
		"QCI_79": 79,
	}
)

func (x FlowQos_Qci) Enum() *FlowQos_Qci {
	p := new(FlowQos_Qci)
	*p = x
	return p
}

func (x FlowQos_Qci) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowQos_Qci) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_policydb_proto_enumTypes[8].Descriptor()
}

func (FlowQos_Qci) Type() protoreflect.EnumType {
	return &file_lte_protos_policydb_proto_enumTypes[8]
}

func (x FlowQos_Qci) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowQos_Qci.Descriptor instead.
func (FlowQos_Qci) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_policydb_proto_rawDescGZIP(), []int{6, 0}
}

type RedirectInformation_Support int32

const (
	RedirectInformation_DISABLED RedirectInformation_Support = 0
	RedirectInformation_ENABLED  RedirectInformation_Support = 1
)

// Enum value maps for RedirectInformation_Support.
var (
	RedirectInformation_Support_name = map[int32]string{
		0: "DISABLED",
		1: "ENABLED",
	}
	RedirectInformation_Support_value = map[string]int32{
		"DISABLED": 0,
		"ENABLED":  1,
	}
)

func (x RedirectInformation_Support) Enum() *RedirectInformation_Support {
	p := new(RedirectInformation_Support)
	*p = x
	return p
}

func (x RedirectInformation_Support) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedirectInformation_Support) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_policydb_proto_enumTypes[9].Descriptor()
}

func (RedirectInformation_Support) Type() protoreflect.EnumType {
	return &file_lte_protos_policydb_proto_enumTypes[9]
}

func (x RedirectInformation_Support) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedirectInformation_Support.Descriptor instead.
func (RedirectInformation_Support) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_policydb_proto_rawDescGZIP(), []int{7, 0}
}

type RedirectInformation_AddressType int32

const (
	RedirectInformation_IPv4    RedirectInformation_AddressType = 0
	RedirectInformation_IPv6    RedirectInformation_AddressType = 1
	RedirectInformation_URL     RedirectInformation_AddressType = 2
	RedirectInformation_SIP_URI RedirectInformation_AddressType = 3
)

// Enum value maps for RedirectInformation_AddressType.
var (
	RedirectInformation_AddressType_name = map[int32]string{
		0: "IPv4",
		1: "IPv6",
		2: "URL",
		3: "SIP_URI",
	}
	RedirectInformation_AddressType_value = map[string]int32{
		"IPv4":    0,
		"IPv6":    1,
		"URL":     2,
		"SIP_URI": 3,
	}
)

func (x RedirectInformation_AddressType) Enum() *RedirectInformation_AddressType {
	p := new(RedirectInformation_AddressType)
	*p = x
	return p
}

func (x RedirectInformation_AddressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedirectInformation_AddressType) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_policydb_proto_enumTypes[10].Descriptor()
}

func (RedirectInformation_AddressType) Type() protoreflect.EnumType {
	return &file_lte_protos_policydb_proto_enumTypes[10]
}

func (x RedirectInformation_AddressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedirectInformation_AddressType.Descriptor instead.
func (RedirectInformation_AddressType) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_policydb_proto_rawDescGZIP(), []int{7, 1}
}

type RatingGroup_LimitType int32

const (
	RatingGroup_FINITE             RatingGroup_LimitType = 0
	RatingGroup_INFINITE_METERED   RatingGroup_LimitType = 1
	RatingGroup_INFINITE_UNMETERED RatingGroup_LimitType = 2
)

// Enum value maps for RatingGroup_LimitType.
var (
	RatingGroup_LimitType_name = map[int32]string{
		0: "FINITE",
		1: "INFINITE_METERED",
		2: "INFINITE_UNMETERED",
	}
	RatingGroup_LimitType_value = map[string]int32{
		"FINITE":             0,
		"INFINITE_METERED":   1,
		"INFINITE_UNMETERED": 2,
	}
)

func (x RatingGroup_LimitType) Enum() *RatingGroup_LimitType {
	p := new(RatingGroup_LimitType)
	*p = x
	return p
}

func (x RatingGroup_LimitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RatingGroup_LimitType) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_policydb_proto_enumTypes[11].Descriptor()
}

func (RatingGroup_LimitType) Type() protoreflect.EnumType {
	return &file_lte_protos_policydb_proto_enumTypes[11]
}

func (x RatingGroup_LimitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RatingGroup_LimitType.Descriptor instead.
func (RatingGroup_LimitType) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_policydb_proto_rawDescGZIP(), []int{10, 0}
}

type HeaderEnrichment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Urls []string `protobuf:"bytes,1,rep,name=urls,proto3" json:"urls,omitempty"`
}

func (x *HeaderEnrichment) Reset() {
	*x = HeaderEnrichment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_policydb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderEnrichment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderEnrichment) ProtoMessage() {}

func (x *HeaderEnrichment) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_policydb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderEnrichment.ProtoReflect.Descriptor instead.
func (*HeaderEnrichment) Descriptor() ([]byte, []int) {
	return file_lte_protos_policydb_proto_rawDescGZIP(), []int{0}
}

func (x *HeaderEnrichment) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

// --------------------------------------------------------------------------
// Policy flow rules
//
// A rule is a named policy that defines a type of traffic to meter.
// Each rule has a unique human readable ID associated with the traffic
// it meters such as "All TCP Traffic to Facebook". They are classified
// using FlowMatch, and if two rules intersect, the one with the highest
// priority takes precedence. These are defined on the cloud and are streamed
// to the gateway Metering application.
//
// A match is an extensible reflection of Ryu OFPMatch which is used by rules
// to classify flows for each subscriber. For new fields and definitons see:
// http://ryu.readthedocs.io/en/latest/ofproto_v1_4_ref.html#flow-match-structure
// --------------------------------------------------------------------------
type PolicyRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The precedence for the flow. Same definition as 3GPP.
	Priority          uint32                    `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	RatingGroup       uint32                    `protobuf:"varint,4,opt,name=rating_group,json=ratingGroup,proto3" json:"rating_group,omitempty"`      // optional
	MonitoringKey     []byte                    `protobuf:"bytes,6,opt,name=monitoring_key,json=monitoringKey,proto3" json:"monitoring_key,omitempty"` // optional
	Redirect          *RedirectInformation      `protobuf:"bytes,9,opt,name=redirect,proto3" json:"redirect,omitempty"`
	FlowList          []*FlowDescription        `protobuf:"bytes,7,rep,name=flow_list,json=flowList,proto3" json:"flow_list,omitempty"`
	Qos               *FlowQos                  `protobuf:"bytes,8,opt,name=qos,proto3" json:"qos,omitempty"`
	TrackingType      PolicyRule_TrackingType   `protobuf:"varint,10,opt,name=tracking_type,json=trackingType,proto3,enum=magma.lte.PolicyRule_TrackingType" json:"tracking_type,omitempty"`
	HardTimeout       uint32                    `protobuf:"varint,11,opt,name=hard_timeout,json=hardTimeout,proto3" json:"hard_timeout,omitempty"`                                                     // optional
	ServiceIdentifier *ServiceIdentifier        `protobuf:"bytes,12,opt,name=service_identifier,json=serviceIdentifier,proto3" json:"service_identifier,omitempty"`                                    // optional
	AppName           PolicyRule_AppName        `protobuf:"varint,13,opt,name=app_name,json=appName,proto3,enum=magma.lte.PolicyRule_AppName" json:"app_name,omitempty"`                               // optional
	AppServiceType    PolicyRule_AppServiceType `protobuf:"varint,14,opt,name=app_service_type,json=appServiceType,proto3,enum=magma.lte.PolicyRule_AppServiceType" json:"app_service_type,omitempty"` // optional
	He                *HeaderEnrichment         `protobuf:"bytes,15,opt,name=he,proto3" json:"he,omitempty"`
	Online            bool                      `protobuf:"varint,16,opt,name=online,proto3" json:"online,omitempty"`
	Offline           bool                      `protobuf:"varint,17,opt,name=offline,proto3" json:"offline,omitempty"`
}

func (x *PolicyRule) Reset() {
	*x = PolicyRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_policydb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyRule) ProtoMessage() {}

func (x *PolicyRule) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_policydb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyRule.ProtoReflect.Descriptor instead.
func (*PolicyRule) Descriptor() ([]byte, []int) {
	return file_lte_protos_policydb_proto_rawDescGZIP(), []int{1}
}

func (x *PolicyRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PolicyRule) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *PolicyRule) GetRatingGroup() uint32 {
	if x != nil {
		return x.RatingGroup
	}
	return 0
}

func (x *PolicyRule) GetMonitoringKey() []byte {
	if x != nil {
		return x.MonitoringKey
	}
	return nil
}

func (x *PolicyRule) GetRedirect() *RedirectInformation {
	if x != nil {
		return x.Redirect
	}
	return nil
}

func (x *PolicyRule) GetFlowList() []*FlowDescription {
	if x != nil {
		return x.FlowList
	}
	return nil
}

func (x *PolicyRule) GetQos() *FlowQos {
	if x != nil {
		return x.Qos
	}
	return nil
}

func (x *PolicyRule) GetTrackingType() PolicyRule_TrackingType {
	if x != nil {
		return x.TrackingType
	}
	return PolicyRule_ONLY_OCS
}

func (x *PolicyRule) GetHardTimeout() uint32 {
	if x != nil {
		return x.HardTimeout
	}
	return 0
}

func (x *PolicyRule) GetServiceIdentifier() *ServiceIdentifier {
	if x != nil {
		return x.ServiceIdentifier
	}
	return nil
}

func (x *PolicyRule) GetAppName() PolicyRule_AppName {
	if x != nil {
		return x.AppName
	}
	return PolicyRule_NO_APP_NAME
}

func (x *PolicyRule) GetAppServiceType() PolicyRule_AppServiceType {
	if x != nil {
		return x.AppServiceType
	}
	return PolicyRule_NO_SERVICE_TYPE
}

func (x *PolicyRule) GetHe() *HeaderEnrichment {
	if x != nil {
		return x.He
	}
	return nil
}

func (x *PolicyRule) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *PolicyRule) GetOffline() bool {
	if x != nil {
		return x.Offline
	}
	return false
}

type ServiceIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ServiceIdentifier) Reset() {
	*x = ServiceIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_policydb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceIdentifier) ProtoMessage() {}

func (x *ServiceIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_policydb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceIdentifier.ProtoReflect.Descriptor instead.
func (*ServiceIdentifier) Descriptor() ([]byte, []int) {
	return file_lte_protos_policydb_proto_rawDescGZIP(), []int{2}
}

func (x *ServiceIdentifier) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type FlowDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match  *FlowMatch             `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	Action FlowDescription_Action `protobuf:"varint,2,opt,name=action,proto3,enum=magma.lte.FlowDescription_Action" json:"action,omitempty"`
}

func (x *FlowDescription) Reset() {
	*x = FlowDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_policydb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowDescription) ProtoMessage() {}

func (x *FlowDescription) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_policydb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowDescription.ProtoReflect.Descriptor instead.
func (*FlowDescription) Descriptor() ([]byte, []int) {
	return file_lte_protos_policydb_proto_rawDescGZIP(), []int{3}
}

func (x *FlowDescription) GetMatch() *FlowMatch {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *FlowDescription) GetAction() FlowDescription_Action {
	if x != nil {
		return x.Action
	}
	return FlowDescription_PERMIT
}

type FlowMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TcpSrc    uint32              `protobuf:"varint,3,opt,name=tcp_src,json=tcpSrc,proto3" json:"tcp_src,omitempty"`
	TcpDst    uint32              `protobuf:"varint,4,opt,name=tcp_dst,json=tcpDst,proto3" json:"tcp_dst,omitempty"`
	UdpSrc    uint32              `protobuf:"varint,5,opt,name=udp_src,json=udpSrc,proto3" json:"udp_src,omitempty"`
	UdpDst    uint32              `protobuf:"varint,6,opt,name=udp_dst,json=udpDst,proto3" json:"udp_dst,omitempty"`
	IpProto   FlowMatch_IPProto   `protobuf:"varint,7,opt,name=ip_proto,json=ipProto,proto3,enum=magma.lte.FlowMatch_IPProto" json:"ip_proto,omitempty"`
	Direction FlowMatch_Direction `protobuf:"varint,8,opt,name=direction,proto3,enum=magma.lte.FlowMatch_Direction" json:"direction,omitempty"`
	AppName   string              `protobuf:"bytes,9,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	IpSrc     *IPAddress          `protobuf:"bytes,10,opt,name=ip_src,json=ipSrc,proto3" json:"ip_src,omitempty"`
	IpDst     *IPAddress          `protobuf:"bytes,11,opt,name=ip_dst,json=ipDst,proto3" json:"ip_dst,omitempty"`
	// TODO deprecate these after safe move to ip_sr/ip_dst vars
	//reserved 1, 2;
	Ipv4Src string `protobuf:"bytes,1,opt,name=ipv4_src,json=ipv4Src,proto3" json:"ipv4_src,omitempty"`
	Ipv4Dst string `protobuf:"bytes,2,opt,name=ipv4_dst,json=ipv4Dst,proto3" json:"ipv4_dst,omitempty"`
}

func (x *FlowMatch) Reset() {
	*x = FlowMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_policydb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowMatch) ProtoMessage() {}

func (x *FlowMatch) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_policydb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowMatch.ProtoReflect.Descriptor instead.
func (*FlowMatch) Descriptor() ([]byte, []int) {
	return file_lte_protos_policydb_proto_rawDescGZIP(), []int{4}
}

func (x *FlowMatch) GetTcpSrc() uint32 {
	if x != nil {
		return x.TcpSrc
	}
	return 0
}

func (x *FlowMatch) GetTcpDst() uint32 {
	if x != nil {
		return x.TcpDst
	}
	return 0
}

func (x *FlowMatch) GetUdpSrc() uint32 {
	if x != nil {
		return x.UdpSrc
	}
	return 0
}

func (x *FlowMatch) GetUdpDst() uint32 {
	if x != nil {
		return x.UdpDst
	}
	return 0
}

func (x *FlowMatch) GetIpProto() FlowMatch_IPProto {
	if x != nil {
		return x.IpProto
	}
	return FlowMatch_IPPROTO_IP
}

func (x *FlowMatch) GetDirection() FlowMatch_Direction {
	if x != nil {
		return x.Direction
	}
	return FlowMatch_UPLINK
}

func (x *FlowMatch) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *FlowMatch) GetIpSrc() *IPAddress {
	if x != nil {
		return x.IpSrc
	}
	return nil
}

func (x *FlowMatch) GetIpDst() *IPAddress {
	if x != nil {
		return x.IpDst
	}
	return nil
}

func (x *FlowMatch) GetIpv4Src() string {
	if x != nil {
		return x.Ipv4Src
	}
	return ""
}

func (x *FlowMatch) GetIpv4Dst() string {
	if x != nil {
		return x.Ipv4Dst
	}
	return ""
}

type QosArp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriorityLevel    uint32        `protobuf:"varint,1,opt,name=priority_level,json=priorityLevel,proto3" json:"priority_level,omitempty"`
	PreCapability    QosArp_PreCap `protobuf:"varint,2,opt,name=pre_capability,json=preCapability,proto3,enum=magma.lte.QosArp_PreCap" json:"pre_capability,omitempty"`
	PreVulnerability QosArp_PreVul `protobuf:"varint,3,opt,name=pre_vulnerability,json=preVulnerability,proto3,enum=magma.lte.QosArp_PreVul" json:"pre_vulnerability,omitempty"`
}

func (x *QosArp) Reset() {
	*x = QosArp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_policydb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QosArp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QosArp) ProtoMessage() {}

func (x *QosArp) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_policydb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QosArp.ProtoReflect.Descriptor instead.
func (*QosArp) Descriptor() ([]byte, []int) {
	return file_lte_protos_policydb_proto_rawDescGZIP(), []int{5}
}

func (x *QosArp) GetPriorityLevel() uint32 {
	if x != nil {
		return x.PriorityLevel
	}
	return 0
}

func (x *QosArp) GetPreCapability() QosArp_PreCap {
	if x != nil {
		return x.PreCapability
	}
	return QosArp_PRE_CAP_ENABLED
}

func (x *QosArp) GetPreVulnerability() QosArp_PreVul {
	if x != nil {
		return x.PreVulnerability
	}
	return QosArp_PRE_VUL_ENABLED
}

type FlowQos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxReqBwUl uint32      `protobuf:"varint,1,opt,name=max_req_bw_ul,json=maxReqBwUl,proto3" json:"max_req_bw_ul,omitempty"`
	MaxReqBwDl uint32      `protobuf:"varint,2,opt,name=max_req_bw_dl,json=maxReqBwDl,proto3" json:"max_req_bw_dl,omitempty"`
	GbrUl      uint32      `protobuf:"varint,3,opt,name=gbr_ul,json=gbrUl,proto3" json:"gbr_ul,omitempty"`
	GbrDl      uint32      `protobuf:"varint,4,opt,name=gbr_dl,json=gbrDl,proto3" json:"gbr_dl,omitempty"`
	Qci        FlowQos_Qci `protobuf:"varint,5,opt,name=qci,proto3,enum=magma.lte.FlowQos_Qci" json:"qci,omitempty"`
	Arp        *QosArp     `protobuf:"bytes,6,opt,name=arp,proto3" json:"arp,omitempty"`
}

func (x *FlowQos) Reset() {
	*x = FlowQos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_policydb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowQos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowQos) ProtoMessage() {}

func (x *FlowQos) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_policydb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowQos.ProtoReflect.Descriptor instead.
func (*FlowQos) Descriptor() ([]byte, []int) {
	return file_lte_protos_policydb_proto_rawDescGZIP(), []int{6}
}

func (x *FlowQos) GetMaxReqBwUl() uint32 {
	if x != nil {
		return x.MaxReqBwUl
	}
	return 0
}

func (x *FlowQos) GetMaxReqBwDl() uint32 {
	if x != nil {
		return x.MaxReqBwDl
	}
	return 0
}

func (x *FlowQos) GetGbrUl() uint32 {
	if x != nil {
		return x.GbrUl
	}
	return 0
}

func (x *FlowQos) GetGbrDl() uint32 {
	if x != nil {
		return x.GbrDl
	}
	return 0
}

func (x *FlowQos) GetQci() FlowQos_Qci {
	if x != nil {
		return x.Qci
	}
	return FlowQos_QCI_0
}

func (x *FlowQos) GetArp() *QosArp {
	if x != nil {
		return x.Arp
	}
	return nil
}

type RedirectInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Support       RedirectInformation_Support     `protobuf:"varint,1,opt,name=support,proto3,enum=magma.lte.RedirectInformation_Support" json:"support,omitempty"`
	AddressType   RedirectInformation_AddressType `protobuf:"varint,2,opt,name=address_type,json=addressType,proto3,enum=magma.lte.RedirectInformation_AddressType" json:"address_type,omitempty"`
	ServerAddress string                          `protobuf:"bytes,3,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"`
}

func (x *RedirectInformation) Reset() {
	*x = RedirectInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_policydb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedirectInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedirectInformation) ProtoMessage() {}

func (x *RedirectInformation) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_policydb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedirectInformation.ProtoReflect.Descriptor instead.
func (*RedirectInformation) Descriptor() ([]byte, []int) {
	return file_lte_protos_policydb_proto_rawDescGZIP(), []int{7}
}

func (x *RedirectInformation) GetSupport() RedirectInformation_Support {
	if x != nil {
		return x.Support
	}
	return RedirectInformation_DISABLED
}

func (x *RedirectInformation) GetAddressType() RedirectInformation_AddressType {
	if x != nil {
		return x.AddressType
	}
	return RedirectInformation_IPv4
}

func (x *RedirectInformation) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

type ChargingRuleNameSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleNames []string `protobuf:"bytes,2,rep,name=RuleNames,proto3" json:"RuleNames,omitempty"`
}

func (x *ChargingRuleNameSet) Reset() {
	*x = ChargingRuleNameSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_policydb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargingRuleNameSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargingRuleNameSet) ProtoMessage() {}

func (x *ChargingRuleNameSet) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_policydb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargingRuleNameSet.ProtoReflect.Descriptor instead.
func (*ChargingRuleNameSet) Descriptor() ([]byte, []int) {
	return file_lte_protos_policydb_proto_rawDescGZIP(), []int{8}
}

func (x *ChargingRuleNameSet) GetRuleNames() []string {
	if x != nil {
		return x.RuleNames
	}
	return nil
}

type ChargingRuleBaseNameRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string               `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	RuleNamesSet *ChargingRuleNameSet `protobuf:"bytes,2,opt,name=RuleNamesSet,proto3" json:"RuleNamesSet,omitempty"`
}

func (x *ChargingRuleBaseNameRecord) Reset() {
	*x = ChargingRuleBaseNameRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_policydb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargingRuleBaseNameRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargingRuleBaseNameRecord) ProtoMessage() {}

func (x *ChargingRuleBaseNameRecord) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_policydb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargingRuleBaseNameRecord.ProtoReflect.Descriptor instead.
func (*ChargingRuleBaseNameRecord) Descriptor() ([]byte, []int) {
	return file_lte_protos_policydb_proto_rawDescGZIP(), []int{9}
}

func (x *ChargingRuleBaseNameRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChargingRuleBaseNameRecord) GetRuleNamesSet() *ChargingRuleNameSet {
	if x != nil {
		return x.RuleNamesSet
	}
	return nil
}

type RatingGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint32                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	LimitType RatingGroup_LimitType `protobuf:"varint,2,opt,name=limit_type,json=limitType,proto3,enum=magma.lte.RatingGroup_LimitType" json:"limit_type,omitempty"`
}

func (x *RatingGroup) Reset() {
	*x = RatingGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_policydb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatingGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatingGroup) ProtoMessage() {}

func (x *RatingGroup) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_policydb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatingGroup.ProtoReflect.Descriptor instead.
func (*RatingGroup) Descriptor() ([]byte, []int) {
	return file_lte_protos_policydb_proto_rawDescGZIP(), []int{10}
}

func (x *RatingGroup) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RatingGroup) GetLimitType() RatingGroup_LimitType {
	if x != nil {
		return x.LimitType
	}
	return RatingGroup_FINITE
}

// AssignedPolicies contains the base names and policy rules currently assigned
// for a subscriber
type AssignedPolicies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssignedBaseNames []string `protobuf:"bytes,10,rep,name=assigned_base_names,json=assignedBaseNames,proto3" json:"assigned_base_names,omitempty"`
	AssignedPolicies  []string `protobuf:"bytes,11,rep,name=assigned_policies,json=assignedPolicies,proto3" json:"assigned_policies,omitempty"`
}

func (x *AssignedPolicies) Reset() {
	*x = AssignedPolicies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_policydb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedPolicies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedPolicies) ProtoMessage() {}

func (x *AssignedPolicies) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_policydb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedPolicies.ProtoReflect.Descriptor instead.
func (*AssignedPolicies) Descriptor() ([]byte, []int) {
	return file_lte_protos_policydb_proto_rawDescGZIP(), []int{11}
}

func (x *AssignedPolicies) GetAssignedBaseNames() []string {
	if x != nil {
		return x.AssignedBaseNames
	}
	return nil
}

func (x *AssignedPolicies) GetAssignedPolicies() []string {
	if x != nil {
		return x.AssignedPolicies
	}
	return nil
}

// InstalledPolicies contains the base names and policy rules currently active
// for a subscriber
type InstalledPolicies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstalledBaseNames []string `protobuf:"bytes,10,rep,name=installed_base_names,json=installedBaseNames,proto3" json:"installed_base_names,omitempty"`
	InstalledPolicies  []string `protobuf:"bytes,11,rep,name=installed_policies,json=installedPolicies,proto3" json:"installed_policies,omitempty"`
}

func (x *InstalledPolicies) Reset() {
	*x = InstalledPolicies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_policydb_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstalledPolicies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstalledPolicies) ProtoMessage() {}

func (x *InstalledPolicies) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_policydb_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstalledPolicies.ProtoReflect.Descriptor instead.
func (*InstalledPolicies) Descriptor() ([]byte, []int) {
	return file_lte_protos_policydb_proto_rawDescGZIP(), []int{12}
}

func (x *InstalledPolicies) GetInstalledBaseNames() []string {
	if x != nil {
		return x.InstalledBaseNames
	}
	return nil
}

func (x *InstalledPolicies) GetInstalledPolicies() []string {
	if x != nil {
		return x.InstalledPolicies
	}
	return nil
}

// SubscriberPolicySet contains the base names and policy rules currently
// assigned to a subscriber, keyed by APN
// NOTE: This does not include the policy used to define the default bearer
//       flow
type SubscriberPolicySet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RulesPerApn     []*ApnPolicySet `protobuf:"bytes,1,rep,name=rules_per_apn,json=rulesPerApn,proto3" json:"rules_per_apn,omitempty"`
	GlobalBaseNames []string        `protobuf:"bytes,2,rep,name=global_base_names,json=globalBaseNames,proto3" json:"global_base_names,omitempty"`
	GlobalPolicies  []string        `protobuf:"bytes,3,rep,name=global_policies,json=globalPolicies,proto3" json:"global_policies,omitempty"`
}

func (x *SubscriberPolicySet) Reset() {
	*x = SubscriberPolicySet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_policydb_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriberPolicySet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriberPolicySet) ProtoMessage() {}

func (x *SubscriberPolicySet) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_policydb_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriberPolicySet.ProtoReflect.Descriptor instead.
func (*SubscriberPolicySet) Descriptor() ([]byte, []int) {
	return file_lte_protos_policydb_proto_rawDescGZIP(), []int{13}
}

func (x *SubscriberPolicySet) GetRulesPerApn() []*ApnPolicySet {
	if x != nil {
		return x.RulesPerApn
	}
	return nil
}

func (x *SubscriberPolicySet) GetGlobalBaseNames() []string {
	if x != nil {
		return x.GlobalBaseNames
	}
	return nil
}

func (x *SubscriberPolicySet) GetGlobalPolicies() []string {
	if x != nil {
		return x.GlobalPolicies
	}
	return nil
}

// ApnPolicySet contains the base names and policy rules currently assigned to
// a (subscriber, APN) tuple
// NOTE: This does not include the policy used to define the default bearer
//       flow
type ApnPolicySet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apn               string   `protobuf:"bytes,1,opt,name=apn,proto3" json:"apn,omitempty"`
	AssignedBaseNames []string `protobuf:"bytes,2,rep,name=assigned_base_names,json=assignedBaseNames,proto3" json:"assigned_base_names,omitempty"`
	AssignedPolicies  []string `protobuf:"bytes,3,rep,name=assigned_policies,json=assignedPolicies,proto3" json:"assigned_policies,omitempty"`
}

func (x *ApnPolicySet) Reset() {
	*x = ApnPolicySet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_policydb_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApnPolicySet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApnPolicySet) ProtoMessage() {}

func (x *ApnPolicySet) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_policydb_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApnPolicySet.ProtoReflect.Descriptor instead.
func (*ApnPolicySet) Descriptor() ([]byte, []int) {
	return file_lte_protos_policydb_proto_rawDescGZIP(), []int{14}
}

func (x *ApnPolicySet) GetApn() string {
	if x != nil {
		return x.Apn
	}
	return ""
}

func (x *ApnPolicySet) GetAssignedBaseNames() []string {
	if x != nil {
		return x.AssignedBaseNames
	}
	return nil
}

func (x *ApnPolicySet) GetAssignedPolicies() []string {
	if x != nil {
		return x.AssignedPolicies
	}
	return nil
}

// --------------------------------------------------------------------------
// PolicyAssignment controller definition.
// --------------------------------------------------------------------------
type EnableStaticRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imsi      string   `protobuf:"bytes,1,opt,name=imsi,proto3" json:"imsi,omitempty"`
	RuleIds   []string `protobuf:"bytes,2,rep,name=rule_ids,json=ruleIds,proto3" json:"rule_ids,omitempty"` // Static rule IDs
	BaseNames []string `protobuf:"bytes,3,rep,name=base_names,json=baseNames,proto3" json:"base_names,omitempty"`
}

func (x *EnableStaticRuleRequest) Reset() {
	*x = EnableStaticRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_policydb_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableStaticRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableStaticRuleRequest) ProtoMessage() {}

func (x *EnableStaticRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_policydb_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableStaticRuleRequest.ProtoReflect.Descriptor instead.
func (*EnableStaticRuleRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_policydb_proto_rawDescGZIP(), []int{15}
}

func (x *EnableStaticRuleRequest) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *EnableStaticRuleRequest) GetRuleIds() []string {
	if x != nil {
		return x.RuleIds
	}
	return nil
}

func (x *EnableStaticRuleRequest) GetBaseNames() []string {
	if x != nil {
		return x.BaseNames
	}
	return nil
}

type DisableStaticRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imsi      string   `protobuf:"bytes,1,opt,name=imsi,proto3" json:"imsi,omitempty"`
	RuleIds   []string `protobuf:"bytes,2,rep,name=rule_ids,json=ruleIds,proto3" json:"rule_ids,omitempty"` // Static rule IDs
	BaseNames []string `protobuf:"bytes,3,rep,name=base_names,json=baseNames,proto3" json:"base_names,omitempty"`
}

func (x *DisableStaticRuleRequest) Reset() {
	*x = DisableStaticRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_policydb_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableStaticRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableStaticRuleRequest) ProtoMessage() {}

func (x *DisableStaticRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_policydb_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableStaticRuleRequest.ProtoReflect.Descriptor instead.
func (*DisableStaticRuleRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_policydb_proto_rawDescGZIP(), []int{16}
}

func (x *DisableStaticRuleRequest) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *DisableStaticRuleRequest) GetRuleIds() []string {
	if x != nil {
		return x.RuleIds
	}
	return nil
}

func (x *DisableStaticRuleRequest) GetBaseNames() []string {
	if x != nil {
		return x.BaseNames
	}
	return nil
}

var File_lte_protos_policydb_proto protoreflect.FileDescriptor

var file_lte_protos_policydb_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x1a, 0x19, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1a, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x26, 0x0a,
	0x10, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x72, 0x6c, 0x73, 0x22, 0xa2, 0x09, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x08, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x03, 0x71, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x6f, 0x73,
	0x52, 0x03, 0x71, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x75, 0x6c, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x68, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x4b, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x11, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x38,
	0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x68, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x02, 0x68, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x4e, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x4e, 0x4c, 0x59, 0x5f,
	0x4f, 0x43, 0x53, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x50, 0x43,
	0x52, 0x46, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x43, 0x53, 0x5f, 0x41, 0x4e, 0x44, 0x5f,
	0x50, 0x43, 0x52, 0x46, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x5f, 0x54, 0x52, 0x41,
	0x43, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x22, 0xc9, 0x02, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x41, 0x43, 0x45, 0x42, 0x4f, 0x4f, 0x4b,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x41, 0x43, 0x45, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x45, 0x4e, 0x47, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x59, 0x4f, 0x55,
	0x54, 0x55, 0x42, 0x45, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45,
	0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x06, 0x12, 0x0f, 0x0a,
	0x0b, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x53, 0x10, 0x07, 0x12, 0x0b,
	0x0a, 0x07, 0x4e, 0x45, 0x54, 0x46, 0x4c, 0x49, 0x58, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x41,
	0x50, 0x50, 0x4c, 0x45, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53,
	0x4f, 0x46, 0x54, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x44, 0x44, 0x49, 0x54, 0x10,
	0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x48, 0x41, 0x54, 0x53, 0x41, 0x50, 0x50, 0x10, 0x0c, 0x12,
	0x0f, 0x0a, 0x0b, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x0d,
	0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x0e, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x4d, 0x41, 0x5a, 0x4f, 0x4e, 0x10, 0x0f, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x45,
	0x43, 0x48, 0x41, 0x54, 0x10, 0x10, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x49, 0x4b, 0x54, 0x4f, 0x4b,
	0x10, 0x11, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x57, 0x49, 0x54, 0x54, 0x45, 0x52, 0x10, 0x12, 0x12,
	0x0d, 0x0a, 0x09, 0x57, 0x49, 0x4b, 0x49, 0x50, 0x45, 0x44, 0x49, 0x41, 0x10, 0x13, 0x12, 0x0f,
	0x0a, 0x0b, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x53, 0x10, 0x14, 0x12,
	0x09, 0x0a, 0x05, 0x59, 0x41, 0x48, 0x4f, 0x4f, 0x10, 0x15, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4d,
	0x4f, 0x10, 0x16, 0x22, 0x45, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x48,
	0x41, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x03, 0x22, 0x29, 0x0a, 0x11, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x0f, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x05, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x39, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x1e, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x45,
	0x52, 0x4d, 0x49, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x4e, 0x59, 0x10, 0x01,
	0x22, 0xf1, 0x05, 0x0a, 0x09, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x63, 0x70, 0x5f, 0x73, 0x72, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x74, 0x63, 0x70, 0x53, 0x72, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x63, 0x70, 0x5f, 0x64,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x63, 0x70, 0x44, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x64, 0x70, 0x5f, 0x73, 0x72, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x75, 0x64, 0x70, 0x53, 0x72, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x64, 0x70,
	0x5f, 0x64, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x64, 0x70, 0x44,
	0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x49, 0x50, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x07, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3c, 0x0a, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x69, 0x70, 0x5f, 0x73, 0x72, 0x63, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x05, 0x69, 0x70, 0x53, 0x72,
	0x63, 0x12, 0x2b, 0x0a, 0x06, 0x69, 0x70, 0x5f, 0x64, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x49, 0x50,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x05, 0x69, 0x70, 0x44, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x73, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x69, 0x70, 0x76, 0x34, 0x53, 0x72, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x64, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x70, 0x76,
	0x34, 0x44, 0x73, 0x74, 0x22, 0xb6, 0x02, 0x0a, 0x07, 0x49, 0x50, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x49, 0x50, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x48, 0x4f, 0x50, 0x4f,
	0x50, 0x54, 0x53, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x49, 0x43, 0x4d, 0x50, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x50, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x49, 0x47, 0x4d, 0x50, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x50, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x54, 0x43, 0x50, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x50,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x55, 0x44, 0x50, 0x10, 0x11, 0x12, 0x13, 0x0a, 0x0f, 0x49,
	0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x2b,
	0x12, 0x14, 0x0a, 0x10, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x46, 0x52, 0x41, 0x47,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x2c, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x47, 0x52, 0x45, 0x10, 0x2f, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x50, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x41, 0x48, 0x10, 0x33, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x50, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x10, 0x3a, 0x12, 0x10, 0x0a, 0x0c, 0x49,
	0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x3b, 0x12, 0x13, 0x0a,
	0x0f, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x44, 0x53, 0x54, 0x4f, 0x50, 0x54, 0x53,
	0x10, 0x3c, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x53,
	0x50, 0x46, 0x10, 0x59, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x56, 0x52, 0x52, 0x50, 0x10, 0x70, 0x12, 0x11, 0x0a, 0x0c, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x53, 0x43, 0x54, 0x50, 0x10, 0x84, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x25, 0x0a,
	0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50,
	0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x49,
	0x4e, 0x4b, 0x10, 0x01, 0x22, 0xa1, 0x02, 0x0a, 0x06, 0x51, 0x6f, 0x73, 0x41, 0x72, 0x70, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3f, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x5f, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x41, 0x72,
	0x70, 0x2e, 0x50, 0x72, 0x65, 0x43, 0x61, 0x70, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x5f, 0x76,
	0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x51,
	0x6f, 0x73, 0x41, 0x72, 0x70, 0x2e, 0x50, 0x72, 0x65, 0x56, 0x75, 0x6c, 0x52, 0x10, 0x70, 0x72,
	0x65, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x33,
	0x0a, 0x06, 0x50, 0x72, 0x65, 0x43, 0x61, 0x70, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x45, 0x5f,
	0x43, 0x41, 0x50, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x50, 0x52, 0x45, 0x5f, 0x43, 0x41, 0x50, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45,
	0x44, 0x10, 0x01, 0x22, 0x33, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x56, 0x75, 0x6c, 0x12, 0x13, 0x0a,
	0x0f, 0x50, 0x52, 0x45, 0x5f, 0x56, 0x55, 0x4c, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x45, 0x5f, 0x56, 0x55, 0x4c, 0x5f, 0x44, 0x49,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x22, 0x8a, 0x03, 0x0a, 0x07, 0x46, 0x6c, 0x6f,
	0x77, 0x51, 0x6f, 0x73, 0x12, 0x21, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x71, 0x5f,
	0x62, 0x77, 0x5f, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78,
	0x52, 0x65, 0x71, 0x42, 0x77, 0x55, 0x6c, 0x12, 0x21, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x72,
	0x65, 0x71, 0x5f, 0x62, 0x77, 0x5f, 0x64, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x42, 0x77, 0x44, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x62,
	0x72, 0x5f, 0x75, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x67, 0x62, 0x72, 0x55,
	0x6c, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x62, 0x72, 0x5f, 0x64, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x67, 0x62, 0x72, 0x44, 0x6c, 0x12, 0x28, 0x0a, 0x03, 0x71, 0x63, 0x69, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x63, 0x69, 0x52, 0x03, 0x71,
	0x63, 0x69, 0x12, 0x23, 0x0a, 0x03, 0x61, 0x72, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x41,
	0x72, 0x70, 0x52, 0x03, 0x61, 0x72, 0x70, 0x22, 0xbb, 0x01, 0x0a, 0x03, 0x51, 0x63, 0x69, 0x12,
	0x09, 0x0a, 0x05, 0x51, 0x43, 0x49, 0x5f, 0x30, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x43,
	0x49, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x43, 0x49, 0x5f, 0x32, 0x10, 0x02,
	0x12, 0x09, 0x0a, 0x05, 0x51, 0x43, 0x49, 0x5f, 0x33, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x51,
	0x43, 0x49, 0x5f, 0x34, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x43, 0x49, 0x5f, 0x35, 0x10,
	0x05, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x43, 0x49, 0x5f, 0x36, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05,
	0x51, 0x43, 0x49, 0x5f, 0x37, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x43, 0x49, 0x5f, 0x38,
	0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x43, 0x49, 0x5f, 0x39, 0x10, 0x09, 0x12, 0x0a, 0x0a,
	0x06, 0x51, 0x43, 0x49, 0x5f, 0x36, 0x35, 0x10, 0x41, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x43, 0x49,
	0x5f, 0x36, 0x36, 0x10, 0x42, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x43, 0x49, 0x5f, 0x36, 0x37, 0x10,
	0x43, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x43, 0x49, 0x5f, 0x37, 0x30, 0x10, 0x46, 0x12, 0x0a, 0x0a,
	0x06, 0x51, 0x43, 0x49, 0x5f, 0x37, 0x35, 0x10, 0x4b, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x43, 0x49,
	0x5f, 0x37, 0x39, 0x10, 0x4f, 0x22, 0xac, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a,
	0x07, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x4d, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x24, 0x0a, 0x07, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x22, 0x37, 0x0a, 0x0b, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50,
	0x76, 0x34, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x76, 0x36, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x55, 0x52, 0x4c, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x49, 0x50, 0x5f, 0x55,
	0x52, 0x49, 0x10, 0x03, 0x22, 0x33, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67,
	0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52,
	0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x74, 0x0a, 0x1a, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x52,
	0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x53, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65,
	0x74, 0x52, 0x0c, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x53, 0x65, 0x74, 0x22,
	0xa5, 0x01, 0x0a, 0x0b, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x45, 0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x46,
	0x49, 0x4e, 0x49, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x49, 0x4e, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4d, 0x45,
	0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x02, 0x22, 0x6f, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x74, 0x0a, 0x11, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0xa7,
	0x01, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x41, 0x70, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x52, 0x0b, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x50, 0x65, 0x72,
	0x41, 0x70, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x7d, 0x0a, 0x0c, 0x41, 0x70, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x67, 0x0a, 0x17, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x22, 0x68, 0x0a, 0x18, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x6d, 0x73, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x32, 0xba, 0x01, 0x0a, 0x1a, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x11, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x22,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72,
	0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72,
	0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x32, 0xa8, 0x01, 0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x44, 0x42, 0x12, 0x4c, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64,
	0x22, 0x00, 0x12, 0x4e, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64,
	0x22, 0x00, 0x42, 0x1b, 0x5a, 0x19, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f, 0x6c, 0x74, 0x65, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lte_protos_policydb_proto_rawDescOnce sync.Once
	file_lte_protos_policydb_proto_rawDescData = file_lte_protos_policydb_proto_rawDesc
)

func file_lte_protos_policydb_proto_rawDescGZIP() []byte {
	file_lte_protos_policydb_proto_rawDescOnce.Do(func() {
		file_lte_protos_policydb_proto_rawDescData = protoimpl.X.CompressGZIP(file_lte_protos_policydb_proto_rawDescData)
	})
	return file_lte_protos_policydb_proto_rawDescData
}

var file_lte_protos_policydb_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_lte_protos_policydb_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_lte_protos_policydb_proto_goTypes = []interface{}{
	(PolicyRule_TrackingType)(0),         // 0: magma.lte.PolicyRule.TrackingType
	(PolicyRule_AppName)(0),              // 1: magma.lte.PolicyRule.AppName
	(PolicyRule_AppServiceType)(0),       // 2: magma.lte.PolicyRule.AppServiceType
	(FlowDescription_Action)(0),          // 3: magma.lte.FlowDescription.Action
	(FlowMatch_IPProto)(0),               // 4: magma.lte.FlowMatch.IPProto
	(FlowMatch_Direction)(0),             // 5: magma.lte.FlowMatch.Direction
	(QosArp_PreCap)(0),                   // 6: magma.lte.QosArp.PreCap
	(QosArp_PreVul)(0),                   // 7: magma.lte.QosArp.PreVul
	(FlowQos_Qci)(0),                     // 8: magma.lte.FlowQos.Qci
	(RedirectInformation_Support)(0),     // 9: magma.lte.RedirectInformation.Support
	(RedirectInformation_AddressType)(0), // 10: magma.lte.RedirectInformation.AddressType
	(RatingGroup_LimitType)(0),           // 11: magma.lte.RatingGroup.LimitType
	(*HeaderEnrichment)(nil),             // 12: magma.lte.HeaderEnrichment
	(*PolicyRule)(nil),                   // 13: magma.lte.PolicyRule
	(*ServiceIdentifier)(nil),            // 14: magma.lte.ServiceIdentifier
	(*FlowDescription)(nil),              // 15: magma.lte.FlowDescription
	(*FlowMatch)(nil),                    // 16: magma.lte.FlowMatch
	(*QosArp)(nil),                       // 17: magma.lte.QosArp
	(*FlowQos)(nil),                      // 18: magma.lte.FlowQos
	(*RedirectInformation)(nil),          // 19: magma.lte.RedirectInformation
	(*ChargingRuleNameSet)(nil),          // 20: magma.lte.ChargingRuleNameSet
	(*ChargingRuleBaseNameRecord)(nil),   // 21: magma.lte.ChargingRuleBaseNameRecord
	(*RatingGroup)(nil),                  // 22: magma.lte.RatingGroup
	(*AssignedPolicies)(nil),             // 23: magma.lte.AssignedPolicies
	(*InstalledPolicies)(nil),            // 24: magma.lte.InstalledPolicies
	(*SubscriberPolicySet)(nil),          // 25: magma.lte.SubscriberPolicySet
	(*ApnPolicySet)(nil),                 // 26: magma.lte.ApnPolicySet
	(*EnableStaticRuleRequest)(nil),      // 27: magma.lte.EnableStaticRuleRequest
	(*DisableStaticRuleRequest)(nil),     // 28: magma.lte.DisableStaticRuleRequest
	(*IPAddress)(nil),                    // 29: magma.lte.IPAddress
	(*protos.Void)(nil),                  // 30: magma.orc8r.Void
}
var file_lte_protos_policydb_proto_depIdxs = []int32{
	19, // 0: magma.lte.PolicyRule.redirect:type_name -> magma.lte.RedirectInformation
	15, // 1: magma.lte.PolicyRule.flow_list:type_name -> magma.lte.FlowDescription
	18, // 2: magma.lte.PolicyRule.qos:type_name -> magma.lte.FlowQos
	0,  // 3: magma.lte.PolicyRule.tracking_type:type_name -> magma.lte.PolicyRule.TrackingType
	14, // 4: magma.lte.PolicyRule.service_identifier:type_name -> magma.lte.ServiceIdentifier
	1,  // 5: magma.lte.PolicyRule.app_name:type_name -> magma.lte.PolicyRule.AppName
	2,  // 6: magma.lte.PolicyRule.app_service_type:type_name -> magma.lte.PolicyRule.AppServiceType
	12, // 7: magma.lte.PolicyRule.he:type_name -> magma.lte.HeaderEnrichment
	16, // 8: magma.lte.FlowDescription.match:type_name -> magma.lte.FlowMatch
	3,  // 9: magma.lte.FlowDescription.action:type_name -> magma.lte.FlowDescription.Action
	4,  // 10: magma.lte.FlowMatch.ip_proto:type_name -> magma.lte.FlowMatch.IPProto
	5,  // 11: magma.lte.FlowMatch.direction:type_name -> magma.lte.FlowMatch.Direction
	29, // 12: magma.lte.FlowMatch.ip_src:type_name -> magma.lte.IPAddress
	29, // 13: magma.lte.FlowMatch.ip_dst:type_name -> magma.lte.IPAddress
	6,  // 14: magma.lte.QosArp.pre_capability:type_name -> magma.lte.QosArp.PreCap
	7,  // 15: magma.lte.QosArp.pre_vulnerability:type_name -> magma.lte.QosArp.PreVul
	8,  // 16: magma.lte.FlowQos.qci:type_name -> magma.lte.FlowQos.Qci
	17, // 17: magma.lte.FlowQos.arp:type_name -> magma.lte.QosArp
	9,  // 18: magma.lte.RedirectInformation.support:type_name -> magma.lte.RedirectInformation.Support
	10, // 19: magma.lte.RedirectInformation.address_type:type_name -> magma.lte.RedirectInformation.AddressType
	20, // 20: magma.lte.ChargingRuleBaseNameRecord.RuleNamesSet:type_name -> magma.lte.ChargingRuleNameSet
	11, // 21: magma.lte.RatingGroup.limit_type:type_name -> magma.lte.RatingGroup.LimitType
	26, // 22: magma.lte.SubscriberPolicySet.rules_per_apn:type_name -> magma.lte.ApnPolicySet
	27, // 23: magma.lte.PolicyAssignmentController.EnableStaticRules:input_type -> magma.lte.EnableStaticRuleRequest
	28, // 24: magma.lte.PolicyAssignmentController.DisableStaticRules:input_type -> magma.lte.DisableStaticRuleRequest
	27, // 25: magma.lte.PolicyDB.EnableStaticRules:input_type -> magma.lte.EnableStaticRuleRequest
	28, // 26: magma.lte.PolicyDB.DisableStaticRules:input_type -> magma.lte.DisableStaticRuleRequest
	30, // 27: magma.lte.PolicyAssignmentController.EnableStaticRules:output_type -> magma.orc8r.Void
	30, // 28: magma.lte.PolicyAssignmentController.DisableStaticRules:output_type -> magma.orc8r.Void
	30, // 29: magma.lte.PolicyDB.EnableStaticRules:output_type -> magma.orc8r.Void
	30, // 30: magma.lte.PolicyDB.DisableStaticRules:output_type -> magma.orc8r.Void
	27, // [27:31] is the sub-list for method output_type
	23, // [23:27] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_lte_protos_policydb_proto_init() }
func file_lte_protos_policydb_proto_init() {
	if File_lte_protos_policydb_proto != nil {
		return
	}
	file_lte_protos_mobilityd_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_lte_protos_policydb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeaderEnrichment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_policydb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_policydb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_policydb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_policydb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_policydb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QosArp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_policydb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowQos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_policydb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedirectInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_policydb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargingRuleNameSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_policydb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargingRuleBaseNameRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_policydb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatingGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_policydb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedPolicies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_policydb_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstalledPolicies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_policydb_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriberPolicySet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_policydb_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApnPolicySet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_policydb_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableStaticRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_policydb_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableStaticRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lte_protos_policydb_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_lte_protos_policydb_proto_goTypes,
		DependencyIndexes: file_lte_protos_policydb_proto_depIdxs,
		EnumInfos:         file_lte_protos_policydb_proto_enumTypes,
		MessageInfos:      file_lte_protos_policydb_proto_msgTypes,
	}.Build()
	File_lte_protos_policydb_proto = out.File
	file_lte_protos_policydb_proto_rawDesc = nil
	file_lte_protos_policydb_proto_goTypes = nil
	file_lte_protos_policydb_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PolicyAssignmentControllerClient is the client API for PolicyAssignmentController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PolicyAssignmentControllerClient interface {
	// Associate the static rule with the IMSI
	//
	EnableStaticRules(ctx context.Context, in *EnableStaticRuleRequest, opts ...grpc.CallOption) (*protos.Void, error)
	// Unassociate the static rule with the IMSI
	//
	DisableStaticRules(ctx context.Context, in *DisableStaticRuleRequest, opts ...grpc.CallOption) (*protos.Void, error)
}

type policyAssignmentControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewPolicyAssignmentControllerClient(cc grpc.ClientConnInterface) PolicyAssignmentControllerClient {
	return &policyAssignmentControllerClient{cc}
}

func (c *policyAssignmentControllerClient) EnableStaticRules(ctx context.Context, in *EnableStaticRuleRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.PolicyAssignmentController/EnableStaticRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyAssignmentControllerClient) DisableStaticRules(ctx context.Context, in *DisableStaticRuleRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.PolicyAssignmentController/DisableStaticRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicyAssignmentControllerServer is the server API for PolicyAssignmentController service.
type PolicyAssignmentControllerServer interface {
	// Associate the static rule with the IMSI
	//
	EnableStaticRules(context.Context, *EnableStaticRuleRequest) (*protos.Void, error)
	// Unassociate the static rule with the IMSI
	//
	DisableStaticRules(context.Context, *DisableStaticRuleRequest) (*protos.Void, error)
}

// UnimplementedPolicyAssignmentControllerServer can be embedded to have forward compatible implementations.
type UnimplementedPolicyAssignmentControllerServer struct {
}

func (*UnimplementedPolicyAssignmentControllerServer) EnableStaticRules(context.Context, *EnableStaticRuleRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableStaticRules not implemented")
}
func (*UnimplementedPolicyAssignmentControllerServer) DisableStaticRules(context.Context, *DisableStaticRuleRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableStaticRules not implemented")
}

func RegisterPolicyAssignmentControllerServer(s *grpc.Server, srv PolicyAssignmentControllerServer) {
	s.RegisterService(&_PolicyAssignmentController_serviceDesc, srv)
}

func _PolicyAssignmentController_EnableStaticRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableStaticRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyAssignmentControllerServer).EnableStaticRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.PolicyAssignmentController/EnableStaticRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyAssignmentControllerServer).EnableStaticRules(ctx, req.(*EnableStaticRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyAssignmentController_DisableStaticRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableStaticRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyAssignmentControllerServer).DisableStaticRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.PolicyAssignmentController/DisableStaticRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyAssignmentControllerServer).DisableStaticRules(ctx, req.(*DisableStaticRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PolicyAssignmentController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.PolicyAssignmentController",
	HandlerType: (*PolicyAssignmentControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnableStaticRules",
			Handler:    _PolicyAssignmentController_EnableStaticRules_Handler,
		},
		{
			MethodName: "DisableStaticRules",
			Handler:    _PolicyAssignmentController_DisableStaticRules_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/policydb.proto",
}

// PolicyDBClient is the client API for PolicyDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PolicyDBClient interface {
	// Immediately install the static policy for the IMSI
	// Also unassociate the static rule with the IMSI on orc8r
	//
	EnableStaticRules(ctx context.Context, in *EnableStaticRuleRequest, opts ...grpc.CallOption) (*protos.Void, error)
	// Immediately uninstall the static policy for the IMSI
	// Also unassociate the static rule with the IMSI on orc8r
	//
	DisableStaticRules(ctx context.Context, in *DisableStaticRuleRequest, opts ...grpc.CallOption) (*protos.Void, error)
}

type policyDBClient struct {
	cc grpc.ClientConnInterface
}

func NewPolicyDBClient(cc grpc.ClientConnInterface) PolicyDBClient {
	return &policyDBClient{cc}
}

func (c *policyDBClient) EnableStaticRules(ctx context.Context, in *EnableStaticRuleRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.PolicyDB/EnableStaticRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyDBClient) DisableStaticRules(ctx context.Context, in *DisableStaticRuleRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.PolicyDB/DisableStaticRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicyDBServer is the server API for PolicyDB service.
type PolicyDBServer interface {
	// Immediately install the static policy for the IMSI
	// Also unassociate the static rule with the IMSI on orc8r
	//
	EnableStaticRules(context.Context, *EnableStaticRuleRequest) (*protos.Void, error)
	// Immediately uninstall the static policy for the IMSI
	// Also unassociate the static rule with the IMSI on orc8r
	//
	DisableStaticRules(context.Context, *DisableStaticRuleRequest) (*protos.Void, error)
}

// UnimplementedPolicyDBServer can be embedded to have forward compatible implementations.
type UnimplementedPolicyDBServer struct {
}

func (*UnimplementedPolicyDBServer) EnableStaticRules(context.Context, *EnableStaticRuleRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableStaticRules not implemented")
}
func (*UnimplementedPolicyDBServer) DisableStaticRules(context.Context, *DisableStaticRuleRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableStaticRules not implemented")
}

func RegisterPolicyDBServer(s *grpc.Server, srv PolicyDBServer) {
	s.RegisterService(&_PolicyDB_serviceDesc, srv)
}

func _PolicyDB_EnableStaticRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableStaticRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyDBServer).EnableStaticRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.PolicyDB/EnableStaticRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyDBServer).EnableStaticRules(ctx, req.(*EnableStaticRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyDB_DisableStaticRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableStaticRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyDBServer).DisableStaticRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.PolicyDB/DisableStaticRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyDBServer).DisableStaticRules(ctx, req.(*DisableStaticRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PolicyDB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.PolicyDB",
	HandlerType: (*PolicyDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnableStaticRules",
			Handler:    _PolicyDB_EnableStaticRules_Handler,
		},
		{
			MethodName: "DisableStaticRules",
			Handler:    _PolicyDB_DisableStaticRules_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/policydb.proto",
}
