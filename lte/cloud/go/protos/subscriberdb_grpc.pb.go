// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protos "magma/orc8r/lib/go/protos"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SubscriberDBClient is the client API for SubscriberDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriberDBClient interface {
	// Adds a new subscriber to the store.
	// Throws ALREADY_EXISTS if the subscriber already exists.
	//
	AddSubscriber(ctx context.Context, in *SubscriberData, opts ...grpc.CallOption) (*protos.Void, error)
	// Deletes an existing subscriber.
	// If the subscriber is not already present, this request is ignored.
	//
	DeleteSubscriber(ctx context.Context, in *SubscriberID, opts ...grpc.CallOption) (*protos.Void, error)
	// Updates an existing subscriber.
	// Throws NOT_FOUND if the subscriber is missing.
	//
	UpdateSubscriber(ctx context.Context, in *SubscriberUpdate, opts ...grpc.CallOption) (*protos.Void, error)
	// Returns the SubscriberData for a subscriber.
	// Throws NOT_FOUND if the subscriber is missing.
	//
	GetSubscriberData(ctx context.Context, in *SubscriberID, opts ...grpc.CallOption) (*SubscriberData, error)
	// List the subscribers in the store.
	//
	ListSubscribers(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*SubscriberIDSet, error)
}

type subscriberDBClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriberDBClient(cc grpc.ClientConnInterface) SubscriberDBClient {
	return &subscriberDBClient{cc}
}

func (c *subscriberDBClient) AddSubscriber(ctx context.Context, in *SubscriberData, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDB/AddSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberDBClient) DeleteSubscriber(ctx context.Context, in *SubscriberID, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDB/DeleteSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberDBClient) UpdateSubscriber(ctx context.Context, in *SubscriberUpdate, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDB/UpdateSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberDBClient) GetSubscriberData(ctx context.Context, in *SubscriberID, opts ...grpc.CallOption) (*SubscriberData, error) {
	out := new(SubscriberData)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDB/GetSubscriberData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberDBClient) ListSubscribers(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*SubscriberIDSet, error) {
	out := new(SubscriberIDSet)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDB/ListSubscribers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriberDBServer is the server API for SubscriberDB service.
// All implementations should embed UnimplementedSubscriberDBServer
// for forward compatibility
type SubscriberDBServer interface {
	// Adds a new subscriber to the store.
	// Throws ALREADY_EXISTS if the subscriber already exists.
	//
	AddSubscriber(context.Context, *SubscriberData) (*protos.Void, error)
	// Deletes an existing subscriber.
	// If the subscriber is not already present, this request is ignored.
	//
	DeleteSubscriber(context.Context, *SubscriberID) (*protos.Void, error)
	// Updates an existing subscriber.
	// Throws NOT_FOUND if the subscriber is missing.
	//
	UpdateSubscriber(context.Context, *SubscriberUpdate) (*protos.Void, error)
	// Returns the SubscriberData for a subscriber.
	// Throws NOT_FOUND if the subscriber is missing.
	//
	GetSubscriberData(context.Context, *SubscriberID) (*SubscriberData, error)
	// List the subscribers in the store.
	//
	ListSubscribers(context.Context, *protos.Void) (*SubscriberIDSet, error)
}

// UnimplementedSubscriberDBServer should be embedded to have forward compatible implementations.
type UnimplementedSubscriberDBServer struct {
}

func (UnimplementedSubscriberDBServer) AddSubscriber(context.Context, *SubscriberData) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSubscriber not implemented")
}
func (UnimplementedSubscriberDBServer) DeleteSubscriber(context.Context, *SubscriberID) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubscriber not implemented")
}
func (UnimplementedSubscriberDBServer) UpdateSubscriber(context.Context, *SubscriberUpdate) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscriber not implemented")
}
func (UnimplementedSubscriberDBServer) GetSubscriberData(context.Context, *SubscriberID) (*SubscriberData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriberData not implemented")
}
func (UnimplementedSubscriberDBServer) ListSubscribers(context.Context, *protos.Void) (*SubscriberIDSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscribers not implemented")
}

// UnsafeSubscriberDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriberDBServer will
// result in compilation errors.
type UnsafeSubscriberDBServer interface {
	mustEmbedUnimplementedSubscriberDBServer()
}

func RegisterSubscriberDBServer(s grpc.ServiceRegistrar, srv SubscriberDBServer) {
	s.RegisterService(&SubscriberDB_ServiceDesc, srv)
}

func _SubscriberDB_AddSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriberData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBServer).AddSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDB/AddSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBServer).AddSubscriber(ctx, req.(*SubscriberData))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberDB_DeleteSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriberID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBServer).DeleteSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDB/DeleteSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBServer).DeleteSubscriber(ctx, req.(*SubscriberID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberDB_UpdateSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriberUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBServer).UpdateSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDB/UpdateSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBServer).UpdateSubscriber(ctx, req.(*SubscriberUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberDB_GetSubscriberData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriberID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBServer).GetSubscriberData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDB/GetSubscriberData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBServer).GetSubscriberData(ctx, req.(*SubscriberID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberDB_ListSubscribers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBServer).ListSubscribers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDB/ListSubscribers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBServer).ListSubscribers(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscriberDB_ServiceDesc is the grpc.ServiceDesc for SubscriberDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriberDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.SubscriberDB",
	HandlerType: (*SubscriberDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSubscriber",
			Handler:    _SubscriberDB_AddSubscriber_Handler,
		},
		{
			MethodName: "DeleteSubscriber",
			Handler:    _SubscriberDB_DeleteSubscriber_Handler,
		},
		{
			MethodName: "UpdateSubscriber",
			Handler:    _SubscriberDB_UpdateSubscriber_Handler,
		},
		{
			MethodName: "GetSubscriberData",
			Handler:    _SubscriberDB_GetSubscriberData_Handler,
		},
		{
			MethodName: "ListSubscribers",
			Handler:    _SubscriberDB_ListSubscribers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/subscriberdb.proto",
}

// SubscriberDBCloudClient is the client API for SubscriberDBCloud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriberDBCloudClient interface {
	// CheckSubscribersInSync checks whether the client subscribers flat digest
	// is up-to-date.
	CheckInSync(ctx context.Context, in *CheckInSyncRequest, opts ...grpc.CallOption) (*CheckInSyncResponse, error)
	// SyncSubscribers returns the changeset of subscribers between client and
	// cloud if the set is small; if the set is large, returns signal to resync.
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
	// ListSubscribers lists pages of subscribers stored.
	ListSubscribers(ctx context.Context, in *ListSubscribersRequest, opts ...grpc.CallOption) (*ListSubscribersResponse, error)
	// List SuciProfiles per Network
	ListSuciProfiles(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*SuciProfileList, error)
}

type subscriberDBCloudClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriberDBCloudClient(cc grpc.ClientConnInterface) SubscriberDBCloudClient {
	return &subscriberDBCloudClient{cc}
}

func (c *subscriberDBCloudClient) CheckInSync(ctx context.Context, in *CheckInSyncRequest, opts ...grpc.CallOption) (*CheckInSyncResponse, error) {
	out := new(CheckInSyncResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDBCloud/CheckInSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberDBCloudClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDBCloud/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberDBCloudClient) ListSubscribers(ctx context.Context, in *ListSubscribersRequest, opts ...grpc.CallOption) (*ListSubscribersResponse, error) {
	out := new(ListSubscribersResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDBCloud/ListSubscribers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberDBCloudClient) ListSuciProfiles(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*SuciProfileList, error) {
	out := new(SuciProfileList)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDBCloud/ListSuciProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriberDBCloudServer is the server API for SubscriberDBCloud service.
// All implementations should embed UnimplementedSubscriberDBCloudServer
// for forward compatibility
type SubscriberDBCloudServer interface {
	// CheckSubscribersInSync checks whether the client subscribers flat digest
	// is up-to-date.
	CheckInSync(context.Context, *CheckInSyncRequest) (*CheckInSyncResponse, error)
	// SyncSubscribers returns the changeset of subscribers between client and
	// cloud if the set is small; if the set is large, returns signal to resync.
	Sync(context.Context, *SyncRequest) (*SyncResponse, error)
	// ListSubscribers lists pages of subscribers stored.
	ListSubscribers(context.Context, *ListSubscribersRequest) (*ListSubscribersResponse, error)
	// List SuciProfiles per Network
	ListSuciProfiles(context.Context, *protos.Void) (*SuciProfileList, error)
}

// UnimplementedSubscriberDBCloudServer should be embedded to have forward compatible implementations.
type UnimplementedSubscriberDBCloudServer struct {
}

func (UnimplementedSubscriberDBCloudServer) CheckInSync(context.Context, *CheckInSyncRequest) (*CheckInSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckInSync not implemented")
}
func (UnimplementedSubscriberDBCloudServer) Sync(context.Context, *SyncRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedSubscriberDBCloudServer) ListSubscribers(context.Context, *ListSubscribersRequest) (*ListSubscribersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscribers not implemented")
}
func (UnimplementedSubscriberDBCloudServer) ListSuciProfiles(context.Context, *protos.Void) (*SuciProfileList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSuciProfiles not implemented")
}

// UnsafeSubscriberDBCloudServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriberDBCloudServer will
// result in compilation errors.
type UnsafeSubscriberDBCloudServer interface {
	mustEmbedUnimplementedSubscriberDBCloudServer()
}

func RegisterSubscriberDBCloudServer(s grpc.ServiceRegistrar, srv SubscriberDBCloudServer) {
	s.RegisterService(&SubscriberDBCloud_ServiceDesc, srv)
}

func _SubscriberDBCloud_CheckInSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckInSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBCloudServer).CheckInSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDBCloud/CheckInSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBCloudServer).CheckInSync(ctx, req.(*CheckInSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberDBCloud_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBCloudServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDBCloud/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBCloudServer).Sync(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberDBCloud_ListSubscribers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubscribersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBCloudServer).ListSubscribers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDBCloud/ListSubscribers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBCloudServer).ListSubscribers(ctx, req.(*ListSubscribersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberDBCloud_ListSuciProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBCloudServer).ListSuciProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDBCloud/ListSuciProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBCloudServer).ListSuciProfiles(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscriberDBCloud_ServiceDesc is the grpc.ServiceDesc for SubscriberDBCloud service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriberDBCloud_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.SubscriberDBCloud",
	HandlerType: (*SubscriberDBCloudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckInSync",
			Handler:    _SubscriberDBCloud_CheckInSync_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _SubscriberDBCloud_Sync_Handler,
		},
		{
			MethodName: "ListSubscribers",
			Handler:    _SubscriberDBCloud_ListSubscribers_Handler,
		},
		{
			MethodName: "ListSuciProfiles",
			Handler:    _SubscriberDBCloud_ListSuciProfiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/subscriberdb.proto",
}

// SuciProfileDBClient is the client API for SuciProfileDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SuciProfileDBClient interface {
	// Adds a new suciprofile to the store.
	// Throws ALREADY_EXISTS if the suciprofile already exists.
	AddSuciProfile(ctx context.Context, in *SuciProfile, opts ...grpc.CallOption) (*protos.Void, error)
	// Deletes an existing suciprofile.
	// If the suciprofile is not already present, this request is ignored.
	DeleteSuciProfile(ctx context.Context, in *SuciProfile, opts ...grpc.CallOption) (*protos.Void, error)
	// List the suciprofile in the store.
	ListSuciProfile(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*SuciProfileList, error)
}

type suciProfileDBClient struct {
	cc grpc.ClientConnInterface
}

func NewSuciProfileDBClient(cc grpc.ClientConnInterface) SuciProfileDBClient {
	return &suciProfileDBClient{cc}
}

func (c *suciProfileDBClient) AddSuciProfile(ctx context.Context, in *SuciProfile, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.SuciProfileDB/AddSuciProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suciProfileDBClient) DeleteSuciProfile(ctx context.Context, in *SuciProfile, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.SuciProfileDB/DeleteSuciProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suciProfileDBClient) ListSuciProfile(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*SuciProfileList, error) {
	out := new(SuciProfileList)
	err := c.cc.Invoke(ctx, "/magma.lte.SuciProfileDB/ListSuciProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuciProfileDBServer is the server API for SuciProfileDB service.
// All implementations should embed UnimplementedSuciProfileDBServer
// for forward compatibility
type SuciProfileDBServer interface {
	// Adds a new suciprofile to the store.
	// Throws ALREADY_EXISTS if the suciprofile already exists.
	AddSuciProfile(context.Context, *SuciProfile) (*protos.Void, error)
	// Deletes an existing suciprofile.
	// If the suciprofile is not already present, this request is ignored.
	DeleteSuciProfile(context.Context, *SuciProfile) (*protos.Void, error)
	// List the suciprofile in the store.
	ListSuciProfile(context.Context, *protos.Void) (*SuciProfileList, error)
}

// UnimplementedSuciProfileDBServer should be embedded to have forward compatible implementations.
type UnimplementedSuciProfileDBServer struct {
}

func (UnimplementedSuciProfileDBServer) AddSuciProfile(context.Context, *SuciProfile) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSuciProfile not implemented")
}
func (UnimplementedSuciProfileDBServer) DeleteSuciProfile(context.Context, *SuciProfile) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSuciProfile not implemented")
}
func (UnimplementedSuciProfileDBServer) ListSuciProfile(context.Context, *protos.Void) (*SuciProfileList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSuciProfile not implemented")
}

// UnsafeSuciProfileDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SuciProfileDBServer will
// result in compilation errors.
type UnsafeSuciProfileDBServer interface {
	mustEmbedUnimplementedSuciProfileDBServer()
}

func RegisterSuciProfileDBServer(s grpc.ServiceRegistrar, srv SuciProfileDBServer) {
	s.RegisterService(&SuciProfileDB_ServiceDesc, srv)
}

func _SuciProfileDB_AddSuciProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuciProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuciProfileDBServer).AddSuciProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SuciProfileDB/AddSuciProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuciProfileDBServer).AddSuciProfile(ctx, req.(*SuciProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuciProfileDB_DeleteSuciProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuciProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuciProfileDBServer).DeleteSuciProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SuciProfileDB/DeleteSuciProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuciProfileDBServer).DeleteSuciProfile(ctx, req.(*SuciProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuciProfileDB_ListSuciProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuciProfileDBServer).ListSuciProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SuciProfileDB/ListSuciProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuciProfileDBServer).ListSuciProfile(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

// SuciProfileDB_ServiceDesc is the grpc.ServiceDesc for SuciProfileDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SuciProfileDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.SuciProfileDB",
	HandlerType: (*SuciProfileDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSuciProfile",
			Handler:    _SuciProfileDB_AddSuciProfile_Handler,
		},
		{
			MethodName: "DeleteSuciProfile",
			Handler:    _SuciProfileDB_DeleteSuciProfile_Handler,
		},
		{
			MethodName: "ListSuciProfile",
			Handler:    _SuciProfileDB_ListSuciProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/subscriberdb.proto",
}

// M5GSUCIRegistrationClient is the client API for M5GSUCIRegistration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type M5GSUCIRegistrationClient interface {
	M5GDecryptMsinSUCIRegistration(ctx context.Context, in *M5GSUCIRegistrationRequest, opts ...grpc.CallOption) (*M5GSUCIRegistrationAnswer, error)
}

type m5GSUCIRegistrationClient struct {
	cc grpc.ClientConnInterface
}

func NewM5GSUCIRegistrationClient(cc grpc.ClientConnInterface) M5GSUCIRegistrationClient {
	return &m5GSUCIRegistrationClient{cc}
}

func (c *m5GSUCIRegistrationClient) M5GDecryptMsinSUCIRegistration(ctx context.Context, in *M5GSUCIRegistrationRequest, opts ...grpc.CallOption) (*M5GSUCIRegistrationAnswer, error) {
	out := new(M5GSUCIRegistrationAnswer)
	err := c.cc.Invoke(ctx, "/magma.lte.M5GSUCIRegistration/M5GDecryptMsinSUCIRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// M5GSUCIRegistrationServer is the server API for M5GSUCIRegistration service.
// All implementations should embed UnimplementedM5GSUCIRegistrationServer
// for forward compatibility
type M5GSUCIRegistrationServer interface {
	M5GDecryptMsinSUCIRegistration(context.Context, *M5GSUCIRegistrationRequest) (*M5GSUCIRegistrationAnswer, error)
}

// UnimplementedM5GSUCIRegistrationServer should be embedded to have forward compatible implementations.
type UnimplementedM5GSUCIRegistrationServer struct {
}

func (UnimplementedM5GSUCIRegistrationServer) M5GDecryptMsinSUCIRegistration(context.Context, *M5GSUCIRegistrationRequest) (*M5GSUCIRegistrationAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method M5GDecryptMsinSUCIRegistration not implemented")
}

// UnsafeM5GSUCIRegistrationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to M5GSUCIRegistrationServer will
// result in compilation errors.
type UnsafeM5GSUCIRegistrationServer interface {
	mustEmbedUnimplementedM5GSUCIRegistrationServer()
}

func RegisterM5GSUCIRegistrationServer(s grpc.ServiceRegistrar, srv M5GSUCIRegistrationServer) {
	s.RegisterService(&M5GSUCIRegistration_ServiceDesc, srv)
}

func _M5GSUCIRegistration_M5GDecryptMsinSUCIRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(M5GSUCIRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(M5GSUCIRegistrationServer).M5GDecryptMsinSUCIRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.M5GSUCIRegistration/M5GDecryptMsinSUCIRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(M5GSUCIRegistrationServer).M5GDecryptMsinSUCIRegistration(ctx, req.(*M5GSUCIRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// M5GSUCIRegistration_ServiceDesc is the grpc.ServiceDesc for M5GSUCIRegistration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var M5GSUCIRegistration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.M5GSUCIRegistration",
	HandlerType: (*M5GSUCIRegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "M5GDecryptMsinSUCIRegistration",
			Handler:    _M5GSUCIRegistration_M5GDecryptMsinSUCIRegistration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/subscriberdb.proto",
}
