// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.10.0
// source: lte/protos/ha_service.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HaServiceClient is the client API for HaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HaServiceClient interface {
	StartAgwOffload(ctx context.Context, in *StartAgwOffloadRequest, opts ...grpc.CallOption) (*StartAgwOffloadResponse, error)
}

type haServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHaServiceClient(cc grpc.ClientConnInterface) HaServiceClient {
	return &haServiceClient{cc}
}

func (c *haServiceClient) StartAgwOffload(ctx context.Context, in *StartAgwOffloadRequest, opts ...grpc.CallOption) (*StartAgwOffloadResponse, error) {
	out := new(StartAgwOffloadResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.HaService/StartAgwOffload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HaServiceServer is the server API for HaService service.
// All implementations must embed UnimplementedHaServiceServer
// for forward compatibility
type HaServiceServer interface {
	StartAgwOffload(context.Context, *StartAgwOffloadRequest) (*StartAgwOffloadResponse, error)
	mustEmbedUnimplementedHaServiceServer()
}

// UnimplementedHaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHaServiceServer struct {
}

func (UnimplementedHaServiceServer) StartAgwOffload(context.Context, *StartAgwOffloadRequest) (*StartAgwOffloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAgwOffload not implemented")
}
func (UnimplementedHaServiceServer) mustEmbedUnimplementedHaServiceServer() {}

// UnsafeHaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HaServiceServer will
// result in compilation errors.
type UnsafeHaServiceServer interface {
	mustEmbedUnimplementedHaServiceServer()
}

func RegisterHaServiceServer(s grpc.ServiceRegistrar, srv HaServiceServer) {
	s.RegisterService(&HaService_ServiceDesc, srv)
}

func _HaService_StartAgwOffload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartAgwOffloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HaServiceServer).StartAgwOffload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.HaService/StartAgwOffload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HaServiceServer).StartAgwOffload(ctx, req.(*StartAgwOffloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HaService_ServiceDesc is the grpc.ServiceDesc for HaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.HaService",
	HandlerType: (*HaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartAgwOffload",
			Handler:    _HaService_StartAgwOffload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/ha_service.proto",
}
