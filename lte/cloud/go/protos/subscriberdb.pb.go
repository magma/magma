// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lte/protos/subscriberdb.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protos "magma/orc8r/lib/go/protos"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// For details about values read 3GPP 24.302
type AccessNetworkIdentifier int32

const (
	AccessNetworkIdentifier_HRPD     AccessNetworkIdentifier = 0
	AccessNetworkIdentifier_WIMAX    AccessNetworkIdentifier = 1
	AccessNetworkIdentifier_WLAN     AccessNetworkIdentifier = 2
	AccessNetworkIdentifier_ETHERNET AccessNetworkIdentifier = 3
)

var AccessNetworkIdentifier_name = map[int32]string{
	0: "HRPD",
	1: "WIMAX",
	2: "WLAN",
	3: "ETHERNET",
}

var AccessNetworkIdentifier_value = map[string]int32{
	"HRPD":     0,
	"WIMAX":    1,
	"WLAN":     2,
	"ETHERNET": 3,
}

func (x AccessNetworkIdentifier) String() string {
	return proto.EnumName(AccessNetworkIdentifier_name, int32(x))
}

func (AccessNetworkIdentifier) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d870e4203d378ec0, []int{0}
}

type SubscriberID_IDType int32

const (
	SubscriberID_IMSI SubscriberID_IDType = 0
)

var SubscriberID_IDType_name = map[int32]string{
	0: "IMSI",
}

var SubscriberID_IDType_value = map[string]int32{
	"IMSI": 0,
}

func (x SubscriberID_IDType) String() string {
	return proto.EnumName(SubscriberID_IDType_name, int32(x))
}

func (SubscriberID_IDType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d870e4203d378ec0, []int{0, 0}
}

type GSMSubscription_GSMSubscriptionState int32

const (
	GSMSubscription_INACTIVE GSMSubscription_GSMSubscriptionState = 0
	GSMSubscription_ACTIVE   GSMSubscription_GSMSubscriptionState = 1
)

var GSMSubscription_GSMSubscriptionState_name = map[int32]string{
	0: "INACTIVE",
	1: "ACTIVE",
}

var GSMSubscription_GSMSubscriptionState_value = map[string]int32{
	"INACTIVE": 0,
	"ACTIVE":   1,
}

func (x GSMSubscription_GSMSubscriptionState) String() string {
	return proto.EnumName(GSMSubscription_GSMSubscriptionState_name, int32(x))
}

func (GSMSubscription_GSMSubscriptionState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d870e4203d378ec0, []int{2, 0}
}

type GSMSubscription_GSMAuthAlgo int32

const (
	GSMSubscription_PRECOMPUTED_AUTH_TUPLES GSMSubscription_GSMAuthAlgo = 0
)

var GSMSubscription_GSMAuthAlgo_name = map[int32]string{
	0: "PRECOMPUTED_AUTH_TUPLES",
}

var GSMSubscription_GSMAuthAlgo_value = map[string]int32{
	"PRECOMPUTED_AUTH_TUPLES": 0,
}

func (x GSMSubscription_GSMAuthAlgo) String() string {
	return proto.EnumName(GSMSubscription_GSMAuthAlgo_name, int32(x))
}

func (GSMSubscription_GSMAuthAlgo) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d870e4203d378ec0, []int{2, 1}
}

type LTESubscription_LTESubscriptionState int32

const (
	LTESubscription_INACTIVE LTESubscription_LTESubscriptionState = 0
	LTESubscription_ACTIVE   LTESubscription_LTESubscriptionState = 1
)

var LTESubscription_LTESubscriptionState_name = map[int32]string{
	0: "INACTIVE",
	1: "ACTIVE",
}

var LTESubscription_LTESubscriptionState_value = map[string]int32{
	"INACTIVE": 0,
	"ACTIVE":   1,
}

func (x LTESubscription_LTESubscriptionState) String() string {
	return proto.EnumName(LTESubscription_LTESubscriptionState_name, int32(x))
}

func (LTESubscription_LTESubscriptionState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d870e4203d378ec0, []int{3, 0}
}

type LTESubscription_LTEAuthAlgo int32

const (
	LTESubscription_MILENAGE LTESubscription_LTEAuthAlgo = 0
)

var LTESubscription_LTEAuthAlgo_name = map[int32]string{
	0: "MILENAGE",
}

var LTESubscription_LTEAuthAlgo_value = map[string]int32{
	"MILENAGE": 0,
}

func (x LTESubscription_LTEAuthAlgo) String() string {
	return proto.EnumName(LTESubscription_LTEAuthAlgo_name, int32(x))
}

func (LTESubscription_LTEAuthAlgo) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d870e4203d378ec0, []int{3, 1}
}

type Non3GPPUserProfile_Non3GPPIPAccess int32

const (
	// Subscriber has non-3GPP subscription access to EPC network
	Non3GPPUserProfile_NON_3GPP_SUBSCRIPTION_ALLOWED Non3GPPUserProfile_Non3GPPIPAccess = 0
	// Subscriber has no non-3GPP subscription access to EPC network
	Non3GPPUserProfile_NON_3GPP_SUBSCRIPTION_BARRED Non3GPPUserProfile_Non3GPPIPAccess = 1
)

var Non3GPPUserProfile_Non3GPPIPAccess_name = map[int32]string{
	0: "NON_3GPP_SUBSCRIPTION_ALLOWED",
	1: "NON_3GPP_SUBSCRIPTION_BARRED",
}

var Non3GPPUserProfile_Non3GPPIPAccess_value = map[string]int32{
	"NON_3GPP_SUBSCRIPTION_ALLOWED": 0,
	"NON_3GPP_SUBSCRIPTION_BARRED":  1,
}

func (x Non3GPPUserProfile_Non3GPPIPAccess) String() string {
	return proto.EnumName(Non3GPPUserProfile_Non3GPPIPAccess_name, int32(x))
}

func (Non3GPPUserProfile_Non3GPPIPAccess) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d870e4203d378ec0, []int{6, 0}
}

type Non3GPPUserProfile_Non3GPPIPAccessAPN int32

const (
	// Enable all APNs for a subscriber
	Non3GPPUserProfile_NON_3GPP_APNS_ENABLE Non3GPPUserProfile_Non3GPPIPAccessAPN = 0
	// Disable all APNs for a subscriber
	Non3GPPUserProfile_NON_3GPP_APNS_DISABLE Non3GPPUserProfile_Non3GPPIPAccessAPN = 1
)

var Non3GPPUserProfile_Non3GPPIPAccessAPN_name = map[int32]string{
	0: "NON_3GPP_APNS_ENABLE",
	1: "NON_3GPP_APNS_DISABLE",
}

var Non3GPPUserProfile_Non3GPPIPAccessAPN_value = map[string]int32{
	"NON_3GPP_APNS_ENABLE":  0,
	"NON_3GPP_APNS_DISABLE": 1,
}

func (x Non3GPPUserProfile_Non3GPPIPAccessAPN) String() string {
	return proto.EnumName(Non3GPPUserProfile_Non3GPPIPAccessAPN_name, int32(x))
}

func (Non3GPPUserProfile_Non3GPPIPAccessAPN) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d870e4203d378ec0, []int{6, 1}
}

// --------------------------------------------------------------------------
// SubscriberID (or SID) uniquely identifies the subscriber across the system
// --------------------------------------------------------------------------
type SubscriberID struct {
	Id                   string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 SubscriberID_IDType `protobuf:"varint,2,opt,name=type,proto3,enum=magma.lte.SubscriberID_IDType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SubscriberID) Reset()         { *m = SubscriberID{} }
func (m *SubscriberID) String() string { return proto.CompactTextString(m) }
func (*SubscriberID) ProtoMessage()    {}
func (*SubscriberID) Descriptor() ([]byte, []int) {
	return fileDescriptor_d870e4203d378ec0, []int{0}
}

func (m *SubscriberID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriberID.Unmarshal(m, b)
}
func (m *SubscriberID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriberID.Marshal(b, m, deterministic)
}
func (m *SubscriberID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriberID.Merge(m, src)
}
func (m *SubscriberID) XXX_Size() int {
	return xxx_messageInfo_SubscriberID.Size(m)
}
func (m *SubscriberID) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriberID.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriberID proto.InternalMessageInfo

func (m *SubscriberID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SubscriberID) GetType() SubscriberID_IDType {
	if m != nil {
		return m.Type
	}
	return SubscriberID_IMSI
}

type SubscriberIDSet struct {
	Sids                 []*SubscriberID `protobuf:"bytes,1,rep,name=sids,proto3" json:"sids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SubscriberIDSet) Reset()         { *m = SubscriberIDSet{} }
func (m *SubscriberIDSet) String() string { return proto.CompactTextString(m) }
func (*SubscriberIDSet) ProtoMessage()    {}
func (*SubscriberIDSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_d870e4203d378ec0, []int{1}
}

func (m *SubscriberIDSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriberIDSet.Unmarshal(m, b)
}
func (m *SubscriberIDSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriberIDSet.Marshal(b, m, deterministic)
}
func (m *SubscriberIDSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriberIDSet.Merge(m, src)
}
func (m *SubscriberIDSet) XXX_Size() int {
	return xxx_messageInfo_SubscriberIDSet.Size(m)
}
func (m *SubscriberIDSet) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriberIDSet.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriberIDSet proto.InternalMessageInfo

func (m *SubscriberIDSet) GetSids() []*SubscriberID {
	if m != nil {
		return m.Sids
	}
	return nil
}

// --------------------------------------------------------------------------
// GSM/LTE subscription info
// --------------------------------------------------------------------------
type GSMSubscription struct {
	State    GSMSubscription_GSMSubscriptionState `protobuf:"varint,1,opt,name=state,proto3,enum=magma.lte.GSMSubscription_GSMSubscriptionState" json:"state,omitempty"`
	AuthAlgo GSMSubscription_GSMAuthAlgo          `protobuf:"varint,2,opt,name=auth_algo,json=authAlgo,proto3,enum=magma.lte.GSMSubscription_GSMAuthAlgo" json:"auth_algo,omitempty"`
	// Authentication key (ki). Need for A3/A8 algos. This is not used
	// when the auth_algo is PRECOMPUTED_AUTH_TUPLES.
	AuthKey []byte `protobuf:"bytes,3,opt,name=auth_key,json=authKey,proto3" json:"auth_key,omitempty"`
	// Precomputed (rand, sres, kc) tuples. Used when the auth_algo is
	// PRECOMPUTED_AUTH_TUPLES.
	AuthTuples           [][]byte `protobuf:"bytes,4,rep,name=auth_tuples,json=authTuples,proto3" json:"auth_tuples,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GSMSubscription) Reset()         { *m = GSMSubscription{} }
func (m *GSMSubscription) String() string { return proto.CompactTextString(m) }
func (*GSMSubscription) ProtoMessage()    {}
func (*GSMSubscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_d870e4203d378ec0, []int{2}
}

func (m *GSMSubscription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GSMSubscription.Unmarshal(m, b)
}
func (m *GSMSubscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GSMSubscription.Marshal(b, m, deterministic)
}
func (m *GSMSubscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GSMSubscription.Merge(m, src)
}
func (m *GSMSubscription) XXX_Size() int {
	return xxx_messageInfo_GSMSubscription.Size(m)
}
func (m *GSMSubscription) XXX_DiscardUnknown() {
	xxx_messageInfo_GSMSubscription.DiscardUnknown(m)
}

var xxx_messageInfo_GSMSubscription proto.InternalMessageInfo

func (m *GSMSubscription) GetState() GSMSubscription_GSMSubscriptionState {
	if m != nil {
		return m.State
	}
	return GSMSubscription_INACTIVE
}

func (m *GSMSubscription) GetAuthAlgo() GSMSubscription_GSMAuthAlgo {
	if m != nil {
		return m.AuthAlgo
	}
	return GSMSubscription_PRECOMPUTED_AUTH_TUPLES
}

func (m *GSMSubscription) GetAuthKey() []byte {
	if m != nil {
		return m.AuthKey
	}
	return nil
}

func (m *GSMSubscription) GetAuthTuples() [][]byte {
	if m != nil {
		return m.AuthTuples
	}
	return nil
}

type LTESubscription struct {
	State    LTESubscription_LTESubscriptionState `protobuf:"varint,1,opt,name=state,proto3,enum=magma.lte.LTESubscription_LTESubscriptionState" json:"state,omitempty"`
	AuthAlgo LTESubscription_LTEAuthAlgo          `protobuf:"varint,2,opt,name=auth_algo,json=authAlgo,proto3,enum=magma.lte.LTESubscription_LTEAuthAlgo" json:"auth_algo,omitempty"`
	// Authentication key (k).
	AuthKey []byte `protobuf:"bytes,3,opt,name=auth_key,json=authKey,proto3" json:"auth_key,omitempty"`
	// Operator configuration field (Op) signed with authentication key (k)
	AuthOpc              []byte   `protobuf:"bytes,4,opt,name=auth_opc,json=authOpc,proto3" json:"auth_opc,omitempty"`
	AssignedBaseNames    []string `protobuf:"bytes,10,rep,name=assigned_base_names,json=assignedBaseNames,proto3" json:"assigned_base_names,omitempty"`
	AssignedPolicies     []string `protobuf:"bytes,11,rep,name=assigned_policies,json=assignedPolicies,proto3" json:"assigned_policies,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LTESubscription) Reset()         { *m = LTESubscription{} }
func (m *LTESubscription) String() string { return proto.CompactTextString(m) }
func (*LTESubscription) ProtoMessage()    {}
func (*LTESubscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_d870e4203d378ec0, []int{3}
}

func (m *LTESubscription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LTESubscription.Unmarshal(m, b)
}
func (m *LTESubscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LTESubscription.Marshal(b, m, deterministic)
}
func (m *LTESubscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LTESubscription.Merge(m, src)
}
func (m *LTESubscription) XXX_Size() int {
	return xxx_messageInfo_LTESubscription.Size(m)
}
func (m *LTESubscription) XXX_DiscardUnknown() {
	xxx_messageInfo_LTESubscription.DiscardUnknown(m)
}

var xxx_messageInfo_LTESubscription proto.InternalMessageInfo

func (m *LTESubscription) GetState() LTESubscription_LTESubscriptionState {
	if m != nil {
		return m.State
	}
	return LTESubscription_INACTIVE
}

func (m *LTESubscription) GetAuthAlgo() LTESubscription_LTEAuthAlgo {
	if m != nil {
		return m.AuthAlgo
	}
	return LTESubscription_MILENAGE
}

func (m *LTESubscription) GetAuthKey() []byte {
	if m != nil {
		return m.AuthKey
	}
	return nil
}

func (m *LTESubscription) GetAuthOpc() []byte {
	if m != nil {
		return m.AuthOpc
	}
	return nil
}

func (m *LTESubscription) GetAssignedBaseNames() []string {
	if m != nil {
		return m.AssignedBaseNames
	}
	return nil
}

func (m *LTESubscription) GetAssignedPolicies() []string {
	if m != nil {
		return m.AssignedPolicies
	}
	return nil
}

type SubscriberState struct {
	// Next SEQ to be used for calculating the AUTN.
	LteAuthNextSeq uint64 `protobuf:"varint,1,opt,name=lte_auth_next_seq,json=lteAuthNextSeq,proto3" json:"lte_auth_next_seq,omitempty"`
	// The Diameter address of the 3GPP AAA Server which is serving the user.
	// An empty string indicates that no server is currently serving the user.
	TgppAaaServerName string `protobuf:"bytes,2,opt,name=tgpp_aaa_server_name,json=tgppAaaServerName,proto3" json:"tgpp_aaa_server_name,omitempty"`
	// Whether the subscribers User Status is REGISTERED or NOT_REGISTERED.
	TgppAaaServerRegistered bool     `protobuf:"varint,3,opt,name=tgpp_aaa_server_registered,json=tgppAaaServerRegistered,proto3" json:"tgpp_aaa_server_registered,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *SubscriberState) Reset()         { *m = SubscriberState{} }
func (m *SubscriberState) String() string { return proto.CompactTextString(m) }
func (*SubscriberState) ProtoMessage()    {}
func (*SubscriberState) Descriptor() ([]byte, []int) {
	return fileDescriptor_d870e4203d378ec0, []int{4}
}

func (m *SubscriberState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriberState.Unmarshal(m, b)
}
func (m *SubscriberState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriberState.Marshal(b, m, deterministic)
}
func (m *SubscriberState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriberState.Merge(m, src)
}
func (m *SubscriberState) XXX_Size() int {
	return xxx_messageInfo_SubscriberState.Size(m)
}
func (m *SubscriberState) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriberState.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriberState proto.InternalMessageInfo

func (m *SubscriberState) GetLteAuthNextSeq() uint64 {
	if m != nil {
		return m.LteAuthNextSeq
	}
	return 0
}

func (m *SubscriberState) GetTgppAaaServerName() string {
	if m != nil {
		return m.TgppAaaServerName
	}
	return ""
}

func (m *SubscriberState) GetTgppAaaServerRegistered() bool {
	if m != nil {
		return m.TgppAaaServerRegistered
	}
	return false
}

type SubscriberAPNConfig struct {
	ApnId                uint32   `protobuf:"varint,1,opt,name=apn_id,json=apnId,proto3" json:"apn_id,omitempty"`
	AssignedStaticIp     string   `protobuf:"bytes,2,opt,name=assigned_static_ip,json=assignedStaticIp,proto3" json:"assigned_static_ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscriberAPNConfig) Reset()         { *m = SubscriberAPNConfig{} }
func (m *SubscriberAPNConfig) String() string { return proto.CompactTextString(m) }
func (*SubscriberAPNConfig) ProtoMessage()    {}
func (*SubscriberAPNConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_d870e4203d378ec0, []int{5}
}

func (m *SubscriberAPNConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriberAPNConfig.Unmarshal(m, b)
}
func (m *SubscriberAPNConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriberAPNConfig.Marshal(b, m, deterministic)
}
func (m *SubscriberAPNConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriberAPNConfig.Merge(m, src)
}
func (m *SubscriberAPNConfig) XXX_Size() int {
	return xxx_messageInfo_SubscriberAPNConfig.Size(m)
}
func (m *SubscriberAPNConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriberAPNConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriberAPNConfig proto.InternalMessageInfo

func (m *SubscriberAPNConfig) GetApnId() uint32 {
	if m != nil {
		return m.ApnId
	}
	return 0
}

func (m *SubscriberAPNConfig) GetAssignedStaticIp() string {
	if m != nil {
		return m.AssignedStaticIp
	}
	return ""
}

type Non3GPPUserProfile struct {
	Msisdn              string                                `protobuf:"bytes,1,opt,name=msisdn,proto3" json:"msisdn,omitempty"`
	Non_3GppIpAccess    Non3GPPUserProfile_Non3GPPIPAccess    `protobuf:"varint,2,opt,name=non_3gpp_ip_access,json=non3gppIpAccess,proto3,enum=magma.lte.Non3GPPUserProfile_Non3GPPIPAccess" json:"non_3gpp_ip_access,omitempty"`
	Non_3GppIpAccessApn Non3GPPUserProfile_Non3GPPIPAccessAPN `protobuf:"varint,3,opt,name=non_3gpp_ip_access_apn,json=non3gppIpAccessApn,proto3,enum=magma.lte.Non3GPPUserProfile_Non3GPPIPAccessAPN" json:"non_3gpp_ip_access_apn,omitempty"`
	Ambr                *AggregatedMaximumBitrate             `protobuf:"bytes,4,opt,name=ambr,proto3" json:"ambr,omitempty"`
	ApnConfig           []*APNConfiguration                   `protobuf:"bytes,5,rep,name=apn_config,json=apnConfig,proto3" json:"apn_config,omitempty"`
	AccessNetId         AccessNetworkIdentifier               `protobuf:"varint,6,opt,name=access_net_id,json=accessNetId,proto3,enum=magma.lte.AccessNetworkIdentifier" json:"access_net_id,omitempty"`
	// subscriber specific APN config
	SubscriberApnConfig  []*SubscriberAPNConfig `protobuf:"bytes,7,rep,name=subscriber_apn_config,json=subscriberApnConfig,proto3" json:"subscriber_apn_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Non3GPPUserProfile) Reset()         { *m = Non3GPPUserProfile{} }
func (m *Non3GPPUserProfile) String() string { return proto.CompactTextString(m) }
func (*Non3GPPUserProfile) ProtoMessage()    {}
func (*Non3GPPUserProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_d870e4203d378ec0, []int{6}
}

func (m *Non3GPPUserProfile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Non3GPPUserProfile.Unmarshal(m, b)
}
func (m *Non3GPPUserProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Non3GPPUserProfile.Marshal(b, m, deterministic)
}
func (m *Non3GPPUserProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Non3GPPUserProfile.Merge(m, src)
}
func (m *Non3GPPUserProfile) XXX_Size() int {
	return xxx_messageInfo_Non3GPPUserProfile.Size(m)
}
func (m *Non3GPPUserProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_Non3GPPUserProfile.DiscardUnknown(m)
}

var xxx_messageInfo_Non3GPPUserProfile proto.InternalMessageInfo

func (m *Non3GPPUserProfile) GetMsisdn() string {
	if m != nil {
		return m.Msisdn
	}
	return ""
}

func (m *Non3GPPUserProfile) GetNon_3GppIpAccess() Non3GPPUserProfile_Non3GPPIPAccess {
	if m != nil {
		return m.Non_3GppIpAccess
	}
	return Non3GPPUserProfile_NON_3GPP_SUBSCRIPTION_ALLOWED
}

func (m *Non3GPPUserProfile) GetNon_3GppIpAccessApn() Non3GPPUserProfile_Non3GPPIPAccessAPN {
	if m != nil {
		return m.Non_3GppIpAccessApn
	}
	return Non3GPPUserProfile_NON_3GPP_APNS_ENABLE
}

func (m *Non3GPPUserProfile) GetAmbr() *AggregatedMaximumBitrate {
	if m != nil {
		return m.Ambr
	}
	return nil
}

func (m *Non3GPPUserProfile) GetApnConfig() []*APNConfiguration {
	if m != nil {
		return m.ApnConfig
	}
	return nil
}

func (m *Non3GPPUserProfile) GetAccessNetId() AccessNetworkIdentifier {
	if m != nil {
		return m.AccessNetId
	}
	return AccessNetworkIdentifier_HRPD
}

func (m *Non3GPPUserProfile) GetSubscriberApnConfig() []*SubscriberAPNConfig {
	if m != nil {
		return m.SubscriberApnConfig
	}
	return nil
}

// --------------------------------------------------------------------------
// User subscription record. This record is serialized and stored in the DB.
// --------------------------------------------------------------------------
type SubscriberData struct {
	// Unique indentifier for the subscriber
	Sid       *SubscriberID     `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	Gsm       *GSMSubscription  `protobuf:"bytes,2,opt,name=gsm,proto3" json:"gsm,omitempty"`
	Lte       *LTESubscription  `protobuf:"bytes,3,opt,name=lte,proto3" json:"lte,omitempty"`
	NetworkId *protos.NetworkID `protobuf:"bytes,4,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	State     *SubscriberState  `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	// Subscription profile
	SubProfile           string              `protobuf:"bytes,6,opt,name=sub_profile,json=subProfile,proto3" json:"sub_profile,omitempty"`
	Non_3Gpp             *Non3GPPUserProfile `protobuf:"bytes,7,opt,name=non_3gpp,json=non3gpp,proto3" json:"non_3gpp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SubscriberData) Reset()         { *m = SubscriberData{} }
func (m *SubscriberData) String() string { return proto.CompactTextString(m) }
func (*SubscriberData) ProtoMessage()    {}
func (*SubscriberData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d870e4203d378ec0, []int{7}
}

func (m *SubscriberData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriberData.Unmarshal(m, b)
}
func (m *SubscriberData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriberData.Marshal(b, m, deterministic)
}
func (m *SubscriberData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriberData.Merge(m, src)
}
func (m *SubscriberData) XXX_Size() int {
	return xxx_messageInfo_SubscriberData.Size(m)
}
func (m *SubscriberData) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriberData.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriberData proto.InternalMessageInfo

func (m *SubscriberData) GetSid() *SubscriberID {
	if m != nil {
		return m.Sid
	}
	return nil
}

func (m *SubscriberData) GetGsm() *GSMSubscription {
	if m != nil {
		return m.Gsm
	}
	return nil
}

func (m *SubscriberData) GetLte() *LTESubscription {
	if m != nil {
		return m.Lte
	}
	return nil
}

func (m *SubscriberData) GetNetworkId() *protos.NetworkID {
	if m != nil {
		return m.NetworkId
	}
	return nil
}

func (m *SubscriberData) GetState() *SubscriberState {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *SubscriberData) GetSubProfile() string {
	if m != nil {
		return m.SubProfile
	}
	return ""
}

func (m *SubscriberData) GetNon_3Gpp() *Non3GPPUserProfile {
	if m != nil {
		return m.Non_3Gpp
	}
	return nil
}

type SubscriberUpdate struct {
	// Updated subscription data
	Data *SubscriberData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Specifies the fields to be updated
	// The mask can be individual subscription elements (Eg: 'lte.auth_key') or
	// entire subset in the SubscriberData (Eg: 'lte' to update all lte.* fields)
	Mask                 *field_mask.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SubscriberUpdate) Reset()         { *m = SubscriberUpdate{} }
func (m *SubscriberUpdate) String() string { return proto.CompactTextString(m) }
func (*SubscriberUpdate) ProtoMessage()    {}
func (*SubscriberUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_d870e4203d378ec0, []int{8}
}

func (m *SubscriberUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriberUpdate.Unmarshal(m, b)
}
func (m *SubscriberUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriberUpdate.Marshal(b, m, deterministic)
}
func (m *SubscriberUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriberUpdate.Merge(m, src)
}
func (m *SubscriberUpdate) XXX_Size() int {
	return xxx_messageInfo_SubscriberUpdate.Size(m)
}
func (m *SubscriberUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriberUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriberUpdate proto.InternalMessageInfo

func (m *SubscriberUpdate) GetData() *SubscriberData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SubscriberUpdate) GetMask() *field_mask.FieldMask {
	if m != nil {
		return m.Mask
	}
	return nil
}

type CheckInSyncRequest struct {
	// root_digest is the deterministic digest of the full set of config
	// objects stored on the client side.
	RootDigest           *protos.Digest `protobuf:"bytes,1,opt,name=root_digest,json=rootDigest,proto3" json:"root_digest,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CheckInSyncRequest) Reset()         { *m = CheckInSyncRequest{} }
func (m *CheckInSyncRequest) String() string { return proto.CompactTextString(m) }
func (*CheckInSyncRequest) ProtoMessage()    {}
func (*CheckInSyncRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d870e4203d378ec0, []int{9}
}

func (m *CheckInSyncRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckInSyncRequest.Unmarshal(m, b)
}
func (m *CheckInSyncRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckInSyncRequest.Marshal(b, m, deterministic)
}
func (m *CheckInSyncRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckInSyncRequest.Merge(m, src)
}
func (m *CheckInSyncRequest) XXX_Size() int {
	return xxx_messageInfo_CheckInSyncRequest.Size(m)
}
func (m *CheckInSyncRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckInSyncRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckInSyncRequest proto.InternalMessageInfo

func (m *CheckInSyncRequest) GetRootDigest() *protos.Digest {
	if m != nil {
		return m.RootDigest
	}
	return nil
}

type CheckInSyncResponse struct {
	// in_sync is true if client's existing configs match those on the cloud.
	InSync               bool     `protobuf:"varint,1,opt,name=in_sync,json=inSync,proto3" json:"in_sync,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckInSyncResponse) Reset()         { *m = CheckInSyncResponse{} }
func (m *CheckInSyncResponse) String() string { return proto.CompactTextString(m) }
func (*CheckInSyncResponse) ProtoMessage()    {}
func (*CheckInSyncResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d870e4203d378ec0, []int{10}
}

func (m *CheckInSyncResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckInSyncResponse.Unmarshal(m, b)
}
func (m *CheckInSyncResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckInSyncResponse.Marshal(b, m, deterministic)
}
func (m *CheckInSyncResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckInSyncResponse.Merge(m, src)
}
func (m *CheckInSyncResponse) XXX_Size() int {
	return xxx_messageInfo_CheckInSyncResponse.Size(m)
}
func (m *CheckInSyncResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckInSyncResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckInSyncResponse proto.InternalMessageInfo

func (m *CheckInSyncResponse) GetInSync() bool {
	if m != nil {
		return m.InSync
	}
	return false
}

type SyncRequest struct {
	// leaf_digests contains a list of digests for each client-side config object,
	// ordered by their IDs.
	LeafDigests          []*protos.LeafDigest `protobuf:"bytes,1,rep,name=leaf_digests,json=leafDigests,proto3" json:"leaf_digests,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SyncRequest) Reset()         { *m = SyncRequest{} }
func (m *SyncRequest) String() string { return proto.CompactTextString(m) }
func (*SyncRequest) ProtoMessage()    {}
func (*SyncRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d870e4203d378ec0, []int{11}
}

func (m *SyncRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncRequest.Unmarshal(m, b)
}
func (m *SyncRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncRequest.Marshal(b, m, deterministic)
}
func (m *SyncRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncRequest.Merge(m, src)
}
func (m *SyncRequest) XXX_Size() int {
	return xxx_messageInfo_SyncRequest.Size(m)
}
func (m *SyncRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SyncRequest proto.InternalMessageInfo

func (m *SyncRequest) GetLeafDigests() []*protos.LeafDigest {
	if m != nil {
		return m.LeafDigests
	}
	return nil
}

type SyncResponse struct {
	// resync is true if the client-server data difference is too big and an
	// overall resync is needed. If true, all subscriber changesets will be empty.
	Resync bool `protobuf:"varint,1,opt,name=resync,proto3" json:"resync,omitempty"`
	// digests contains all digests for the network.
	Digests *protos.DigestTree `protobuf:"bytes,2,opt,name=digests,proto3" json:"digests,omitempty"`
	// changeset contains the client-server data difference.
	Changeset            *protos.Changeset `protobuf:"bytes,3,opt,name=changeset,proto3" json:"changeset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SyncResponse) Reset()         { *m = SyncResponse{} }
func (m *SyncResponse) String() string { return proto.CompactTextString(m) }
func (*SyncResponse) ProtoMessage()    {}
func (*SyncResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d870e4203d378ec0, []int{12}
}

func (m *SyncResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncResponse.Unmarshal(m, b)
}
func (m *SyncResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncResponse.Marshal(b, m, deterministic)
}
func (m *SyncResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncResponse.Merge(m, src)
}
func (m *SyncResponse) XXX_Size() int {
	return xxx_messageInfo_SyncResponse.Size(m)
}
func (m *SyncResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SyncResponse proto.InternalMessageInfo

func (m *SyncResponse) GetResync() bool {
	if m != nil {
		return m.Resync
	}
	return false
}

func (m *SyncResponse) GetDigests() *protos.DigestTree {
	if m != nil {
		return m.Digests
	}
	return nil
}

func (m *SyncResponse) GetChangeset() *protos.Changeset {
	if m != nil {
		return m.Changeset
	}
	return nil
}

type ListSubscribersRequest struct {
	// page_size is the maximum number of entities returned per request.
	PageSize uint32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// page_token is a serialized entity page token for paginated loads.
	PageToken            string   `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListSubscribersRequest) Reset()         { *m = ListSubscribersRequest{} }
func (m *ListSubscribersRequest) String() string { return proto.CompactTextString(m) }
func (*ListSubscribersRequest) ProtoMessage()    {}
func (*ListSubscribersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d870e4203d378ec0, []int{13}
}

func (m *ListSubscribersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSubscribersRequest.Unmarshal(m, b)
}
func (m *ListSubscribersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSubscribersRequest.Marshal(b, m, deterministic)
}
func (m *ListSubscribersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSubscribersRequest.Merge(m, src)
}
func (m *ListSubscribersRequest) XXX_Size() int {
	return xxx_messageInfo_ListSubscribersRequest.Size(m)
}
func (m *ListSubscribersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSubscribersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListSubscribersRequest proto.InternalMessageInfo

func (m *ListSubscribersRequest) GetPageSize() uint32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListSubscribersRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListSubscribersResponse struct {
	Subscribers []*SubscriberData `protobuf:"bytes,1,rep,name=subscribers,proto3" json:"subscribers,omitempty"`
	// next_page_token is a serialized entity page token for subsequent paginated
	// loads.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// digests contains all digests for the network.
	Digests              *protos.DigestTree `protobuf:"bytes,3,opt,name=digests,proto3" json:"digests,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ListSubscribersResponse) Reset()         { *m = ListSubscribersResponse{} }
func (m *ListSubscribersResponse) String() string { return proto.CompactTextString(m) }
func (*ListSubscribersResponse) ProtoMessage()    {}
func (*ListSubscribersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d870e4203d378ec0, []int{14}
}

func (m *ListSubscribersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSubscribersResponse.Unmarshal(m, b)
}
func (m *ListSubscribersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSubscribersResponse.Marshal(b, m, deterministic)
}
func (m *ListSubscribersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSubscribersResponse.Merge(m, src)
}
func (m *ListSubscribersResponse) XXX_Size() int {
	return xxx_messageInfo_ListSubscribersResponse.Size(m)
}
func (m *ListSubscribersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSubscribersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListSubscribersResponse proto.InternalMessageInfo

func (m *ListSubscribersResponse) GetSubscribers() []*SubscriberData {
	if m != nil {
		return m.Subscribers
	}
	return nil
}

func (m *ListSubscribersResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func (m *ListSubscribersResponse) GetDigests() *protos.DigestTree {
	if m != nil {
		return m.Digests
	}
	return nil
}

func init() {
	proto.RegisterEnum("magma.lte.AccessNetworkIdentifier", AccessNetworkIdentifier_name, AccessNetworkIdentifier_value)
	proto.RegisterEnum("magma.lte.SubscriberID_IDType", SubscriberID_IDType_name, SubscriberID_IDType_value)
	proto.RegisterEnum("magma.lte.GSMSubscription_GSMSubscriptionState", GSMSubscription_GSMSubscriptionState_name, GSMSubscription_GSMSubscriptionState_value)
	proto.RegisterEnum("magma.lte.GSMSubscription_GSMAuthAlgo", GSMSubscription_GSMAuthAlgo_name, GSMSubscription_GSMAuthAlgo_value)
	proto.RegisterEnum("magma.lte.LTESubscription_LTESubscriptionState", LTESubscription_LTESubscriptionState_name, LTESubscription_LTESubscriptionState_value)
	proto.RegisterEnum("magma.lte.LTESubscription_LTEAuthAlgo", LTESubscription_LTEAuthAlgo_name, LTESubscription_LTEAuthAlgo_value)
	proto.RegisterEnum("magma.lte.Non3GPPUserProfile_Non3GPPIPAccess", Non3GPPUserProfile_Non3GPPIPAccess_name, Non3GPPUserProfile_Non3GPPIPAccess_value)
	proto.RegisterEnum("magma.lte.Non3GPPUserProfile_Non3GPPIPAccessAPN", Non3GPPUserProfile_Non3GPPIPAccessAPN_name, Non3GPPUserProfile_Non3GPPIPAccessAPN_value)
	proto.RegisterType((*SubscriberID)(nil), "magma.lte.SubscriberID")
	proto.RegisterType((*SubscriberIDSet)(nil), "magma.lte.SubscriberIDSet")
	proto.RegisterType((*GSMSubscription)(nil), "magma.lte.GSMSubscription")
	proto.RegisterType((*LTESubscription)(nil), "magma.lte.LTESubscription")
	proto.RegisterType((*SubscriberState)(nil), "magma.lte.SubscriberState")
	proto.RegisterType((*SubscriberAPNConfig)(nil), "magma.lte.SubscriberAPNConfig")
	proto.RegisterType((*Non3GPPUserProfile)(nil), "magma.lte.Non3GPPUserProfile")
	proto.RegisterType((*SubscriberData)(nil), "magma.lte.SubscriberData")
	proto.RegisterType((*SubscriberUpdate)(nil), "magma.lte.SubscriberUpdate")
	proto.RegisterType((*CheckInSyncRequest)(nil), "magma.lte.CheckInSyncRequest")
	proto.RegisterType((*CheckInSyncResponse)(nil), "magma.lte.CheckInSyncResponse")
	proto.RegisterType((*SyncRequest)(nil), "magma.lte.SyncRequest")
	proto.RegisterType((*SyncResponse)(nil), "magma.lte.SyncResponse")
	proto.RegisterType((*ListSubscribersRequest)(nil), "magma.lte.ListSubscribersRequest")
	proto.RegisterType((*ListSubscribersResponse)(nil), "magma.lte.ListSubscribersResponse")
}

func init() { proto.RegisterFile("lte/protos/subscriberdb.proto", fileDescriptor_d870e4203d378ec0) }

var fileDescriptor_d870e4203d378ec0 = []byte{
	// 1532 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0x5b, 0x53, 0xe3, 0xc8,
	0x15, 0xf6, 0x0d, 0x83, 0x8f, 0x19, 0x30, 0x0d, 0x03, 0xc6, 0x84, 0x5d, 0xaf, 0x52, 0xb5, 0xc5,
	0xde, 0xcc, 0xc4, 0xb3, 0xa9, 0x6c, 0x76, 0xab, 0x92, 0xc8, 0x97, 0x61, 0x94, 0x18, 0xe1, 0x6a,
	0x99, 0x99, 0x14, 0x2f, 0xaa, 0xb6, 0xd5, 0x16, 0x2a, 0x64, 0x49, 0xa8, 0xdb, 0xc9, 0xb0, 0x7f,
	0x22, 0xff, 0x21, 0x8f, 0x79, 0xcb, 0x53, 0x7e, 0x4c, 0xde, 0xf3, 0x23, 0xf2, 0x92, 0x54, 0xb7,
	0x24, 0x5b, 0xbe, 0x51, 0x33, 0x4f, 0x56, 0x9f, 0xf3, 0x9d, 0xaf, 0xcf, 0xad, 0x4f, 0xb7, 0xe1,
	0xdc, 0xe5, 0xf4, 0x32, 0x08, 0x7d, 0xee, 0xb3, 0x4b, 0x36, 0x1d, 0xb2, 0x51, 0xe8, 0x0c, 0x69,
	0x68, 0x0d, 0x1b, 0x52, 0x86, 0x4a, 0x13, 0x62, 0x4f, 0x48, 0xc3, 0xe5, 0xb4, 0x76, 0xea, 0x87,
	0xa3, 0x1f, 0xc2, 0x04, 0x3b, 0xf2, 0x27, 0x13, 0xdf, 0x8b, 0x50, 0x4b, 0x2a, 0xcb, 0xb1, 0x29,
	0xe3, 0xb1, 0xea, 0x28, 0xc5, 0x4f, 0x82, 0xc4, 0xa0, 0x6e, 0xfb, 0xbe, 0xed, 0xc6, 0x8a, 0xe1,
	0x74, 0x7c, 0x39, 0x76, 0xa8, 0x6b, 0x99, 0x13, 0xc2, 0x1e, 0x22, 0x84, 0x32, 0x86, 0x5d, 0x63,
	0xe6, 0x8e, 0xd6, 0x41, 0x7b, 0x90, 0x73, 0xac, 0x6a, 0xb6, 0x9e, 0xbd, 0x28, 0xe1, 0x9c, 0x63,
	0xa1, 0x26, 0x14, 0xf8, 0x53, 0x40, 0xab, 0xb9, 0x7a, 0xf6, 0x62, 0xaf, 0xf9, 0x59, 0x63, 0xe6,
	0x67, 0x23, 0x6d, 0xd6, 0xd0, 0x3a, 0x83, 0xa7, 0x80, 0x62, 0x89, 0x55, 0x10, 0x14, 0xa3, 0x35,
	0xda, 0x81, 0x82, 0x76, 0x6d, 0x68, 0x95, 0x8c, 0xf2, 0x3b, 0xd8, 0x4f, 0x1b, 0x18, 0x94, 0xa3,
	0x6f, 0xa0, 0xc0, 0x1c, 0x8b, 0x55, 0xb3, 0xf5, 0xfc, 0x45, 0xb9, 0x79, 0xb2, 0x81, 0x1a, 0x4b,
	0x90, 0xf2, 0xaf, 0x1c, 0xec, 0x5f, 0x19, 0xd7, 0xb1, 0x26, 0xe0, 0x8e, 0xef, 0xa1, 0x2e, 0x6c,
	0x31, 0x4e, 0x38, 0x95, 0xee, 0xee, 0x35, 0x2f, 0x53, 0x0c, 0x4b, 0xd0, 0xe5, 0xb5, 0x21, 0xcc,
	0x70, 0x64, 0x8d, 0xda, 0x50, 0x22, 0x53, 0x7e, 0x6f, 0x12, 0xd7, 0xf6, 0xe3, 0x38, 0xbf, 0x7c,
	0x9e, 0x4a, 0x9d, 0xf2, 0x7b, 0xd5, 0xb5, 0x7d, 0xbc, 0x43, 0xe2, 0x2f, 0x74, 0x0a, 0xf2, 0xdb,
	0x7c, 0xa0, 0x4f, 0xd5, 0x7c, 0x3d, 0x7b, 0xb1, 0x8b, 0xb7, 0xc5, 0xfa, 0x4f, 0xf4, 0x09, 0x7d,
	0x0e, 0x65, 0xa9, 0xe2, 0xd3, 0xc0, 0xa5, 0xac, 0x5a, 0xa8, 0xe7, 0x2f, 0x76, 0x31, 0x08, 0xd1,
	0x40, 0x4a, 0x94, 0x57, 0x70, 0xb4, 0xce, 0x3f, 0xb4, 0x0b, 0x3b, 0x9a, 0xae, 0xb6, 0x07, 0xda,
	0xbb, 0x6e, 0x25, 0x83, 0x00, 0x8a, 0xf1, 0x77, 0x56, 0xf9, 0x1a, 0xca, 0x29, 0x37, 0xd0, 0x19,
	0x9c, 0xf4, 0x71, 0xb7, 0x7d, 0x73, 0xdd, 0xbf, 0x1d, 0x74, 0x3b, 0xa6, 0x7a, 0x3b, 0x78, 0x6b,
	0x0e, 0x6e, 0xfb, 0xbd, 0xae, 0x51, 0xc9, 0x28, 0xff, 0xcb, 0xc1, 0x7e, 0x6f, 0xd0, 0xfd, 0xd8,
	0xcc, 0x2d, 0x41, 0x97, 0xd7, 0x9f, 0x92, 0xb9, 0x35, 0x54, 0x9f, 0x96, 0xb9, 0x44, 0xe5, 0x07,
	0xa3, 0x6a, 0x61, 0xae, 0xba, 0x09, 0x46, 0xa8, 0x01, 0x87, 0x84, 0x31, 0xc7, 0xf6, 0xa8, 0x65,
	0x0e, 0x09, 0xa3, 0xa6, 0x47, 0x26, 0x94, 0x55, 0xa1, 0x9e, 0xbf, 0x28, 0xe1, 0x83, 0x44, 0xd5,
	0x22, 0x8c, 0xea, 0x42, 0x81, 0xbe, 0x81, 0x99, 0xd0, 0x0c, 0x7c, 0xd7, 0x19, 0x39, 0x94, 0x55,
	0xcb, 0x12, 0x5d, 0x49, 0x14, 0xfd, 0x58, 0x2e, 0x0a, 0xb2, 0x2e, 0xec, 0x67, 0x0a, 0x72, 0x06,
	0xe5, 0x54, 0x74, 0x02, 0x78, 0xad, 0xf5, 0xba, 0xba, 0x7a, 0xd5, 0xad, 0x64, 0x94, 0x7f, 0x64,
	0xd3, 0xcd, 0x1f, 0x51, 0x7d, 0x05, 0x07, 0x2e, 0xa7, 0xa6, 0x0c, 0xcf, 0xa3, 0x1f, 0xb8, 0xc9,
	0xe8, 0xa3, 0xac, 0x46, 0x01, 0xef, 0xb9, 0x9c, 0x0a, 0x26, 0x9d, 0x7e, 0xe0, 0x06, 0x7d, 0x44,
	0x97, 0x70, 0xc4, 0xed, 0x20, 0x30, 0x09, 0x21, 0x26, 0xa3, 0xe1, 0x5f, 0x68, 0x28, 0x83, 0x95,
	0x09, 0x2f, 0xe1, 0x03, 0xa1, 0x53, 0x09, 0x31, 0xa4, 0x46, 0x04, 0x8b, 0x7e, 0x82, 0xda, 0xb2,
	0x41, 0x48, 0x6d, 0x87, 0x71, 0x1a, 0x52, 0x4b, 0xe6, 0x78, 0x07, 0x9f, 0x2c, 0x98, 0xe1, 0x99,
	0x5a, 0xb9, 0x83, 0xc3, 0xb9, 0xaf, 0x6a, 0x5f, 0x6f, 0xfb, 0xde, 0xd8, 0xb1, 0xd1, 0x4b, 0x28,
	0x92, 0xc0, 0x33, 0xe3, 0xd9, 0xf0, 0x02, 0x6f, 0x91, 0xc0, 0xd3, 0x2c, 0xf4, 0x2d, 0xa0, 0x59,
	0x5a, 0x45, 0x4f, 0x38, 0x23, 0xd3, 0x09, 0x62, 0xcf, 0x66, 0x79, 0x35, 0xa4, 0x42, 0x0b, 0x94,
	0xbf, 0x6f, 0x01, 0xd2, 0x7d, 0xef, 0xf5, 0x55, 0xbf, 0x7f, 0xcb, 0x68, 0xd8, 0x0f, 0xfd, 0xb1,
	0xe3, 0x52, 0x74, 0x0c, 0xc5, 0x09, 0x73, 0x98, 0xe5, 0xc5, 0x73, 0x27, 0x5e, 0xa1, 0x3b, 0x40,
	0x9e, 0xef, 0x99, 0xaf, 0x45, 0x2c, 0x4e, 0x60, 0x92, 0xd1, 0x88, 0x32, 0x16, 0xf7, 0xd9, 0x77,
	0xa9, 0x3e, 0x5b, 0xa5, 0x4c, 0x44, 0x5a, 0x5f, 0x95, 0x46, 0x78, 0xdf, 0xf3, 0x3d, 0xc1, 0xa3,
	0x05, 0x91, 0x00, 0x59, 0x70, 0xbc, 0xca, 0x6d, 0x92, 0xc0, 0x93, 0xf9, 0xd9, 0x6b, 0xbe, 0xfa,
	0x24, 0x7e, 0xb5, 0xaf, 0x63, 0xb4, 0xb4, 0x85, 0x1a, 0x78, 0xe8, 0x37, 0x50, 0x20, 0x93, 0x61,
	0x28, 0x9b, 0xb7, 0xdc, 0xfc, 0x65, 0x8a, 0x53, 0xb5, 0xed, 0x90, 0xda, 0x84, 0x53, 0xeb, 0x9a,
	0x7c, 0x70, 0x26, 0xd3, 0x49, 0xcb, 0xe1, 0xa1, 0x38, 0x5a, 0xd2, 0x00, 0xfd, 0x08, 0x20, 0xd2,
	0x3d, 0x92, 0xc9, 0xaf, 0x6e, 0xc9, 0x09, 0x79, 0x96, 0x36, 0x4f, 0x0a, 0x33, 0x0d, 0x89, 0xe8,
	0x4f, 0x5c, 0x22, 0x81, 0x17, 0x97, 0xea, 0x0d, 0xbc, 0x88, 0xc3, 0xf1, 0x28, 0x17, 0x15, 0x2b,
	0xca, 0x88, 0x94, 0xb4, 0xb9, 0xd4, 0xeb, 0x94, 0xff, 0xd5, 0x0f, 0x1f, 0x34, 0x8b, 0x7a, 0xdc,
	0x19, 0x3b, 0x34, 0xc4, 0x65, 0x92, 0x28, 0x34, 0x0b, 0x61, 0x78, 0x39, 0xbf, 0xa9, 0xcc, 0x94,
	0x3b, 0xdb, 0xd2, 0x9d, 0xf5, 0x77, 0xc1, 0xcc, 0x31, 0x7c, 0x38, 0x37, 0x56, 0x13, 0xdf, 0x94,
	0x77, 0xb0, 0xbf, 0x94, 0x3a, 0xf4, 0x05, 0x9c, 0xeb, 0x37, 0xba, 0x29, 0x64, 0xa6, 0x71, 0xdb,
	0x32, 0xda, 0x58, 0xeb, 0x0f, 0xb4, 0x1b, 0xdd, 0x54, 0x7b, 0xbd, 0x9b, 0xf7, 0xdd, 0x4e, 0x25,
	0x83, 0xea, 0xf0, 0x8b, 0xf5, 0x90, 0x96, 0x8a, 0x71, 0xb7, 0x53, 0xc9, 0x2a, 0xda, 0xac, 0xb1,
	0x52, 0x25, 0x41, 0x55, 0x38, 0x9a, 0xd9, 0xa9, 0x7d, 0xdd, 0x30, 0xbb, 0xba, 0xda, 0xea, 0x89,
	0xb3, 0x7b, 0x0a, 0x2f, 0x17, 0x35, 0x1d, 0xcd, 0x90, 0xaa, 0xac, 0xf2, 0xef, 0x1c, 0xec, 0xcd,
	0xe3, 0xe9, 0x10, 0x4e, 0xd0, 0x57, 0x90, 0x67, 0x71, 0xe7, 0x3f, 0x73, 0x51, 0x09, 0x0c, 0xfa,
	0x16, 0xf2, 0x36, 0x9b, 0xc8, 0x26, 0x2d, 0x37, 0x6b, 0x9b, 0xaf, 0x11, 0x2c, 0x60, 0x02, 0xed,
	0x72, 0x2a, 0x5b, 0x6e, 0x11, 0xbd, 0x34, 0x7e, 0xb0, 0x80, 0xa1, 0x5f, 0x03, 0x78, 0x51, 0xc9,
	0x44, 0x55, 0xa3, 0x9e, 0x3a, 0x8e, 0x8d, 0xe4, 0xcb, 0xa0, 0x91, 0x54, 0xb4, 0x83, 0x4b, 0x5e,
	0x52, 0x5c, 0xf4, 0x2a, 0x19, 0xf6, 0x5b, 0x2b, 0xdb, 0x2c, 0x4d, 0xa5, 0x64, 0xae, 0x7f, 0x0e,
	0x65, 0x36, 0x1d, 0x9a, 0x41, 0xd4, 0xec, 0xb2, 0x7f, 0x4a, 0x18, 0xd8, 0x74, 0x98, 0x9c, 0xd8,
	0x1f, 0x60, 0x27, 0x39, 0x3d, 0xd5, 0x6d, 0xc9, 0x7a, 0xfe, 0xec, 0x79, 0xc1, 0xdb, 0xf1, 0xe1,
	0x50, 0x1e, 0xa1, 0x32, 0xdf, 0xf4, 0x36, 0xb0, 0xc4, 0x76, 0xdf, 0x41, 0xc1, 0x22, 0x9c, 0xc4,
	0xf9, 0x3d, 0x5d, 0xeb, 0x9f, 0xa8, 0x03, 0x96, 0x30, 0xd4, 0x80, 0x82, 0x78, 0xc0, 0xcc, 0x72,
	0x1c, 0xbd, 0x71, 0x1a, 0xc9, 0x1b, 0xa7, 0xf1, 0x46, 0xbc, 0x71, 0xae, 0x09, 0x7b, 0xc0, 0x12,
	0xa7, 0xfc, 0x11, 0x50, 0xfb, 0x9e, 0x8e, 0x1e, 0x34, 0xcf, 0x78, 0xf2, 0x46, 0x98, 0x3e, 0x4e,
	0x29, 0xe3, 0xe8, 0x7b, 0x28, 0x87, 0xbe, 0xcf, 0xcd, 0xe8, 0x15, 0x15, 0xef, 0x7d, 0xb8, 0x90,
	0xcd, 0x8e, 0x54, 0x61, 0x10, 0xb8, 0xe8, 0x5b, 0x69, 0xc0, 0xe1, 0x02, 0x17, 0x0b, 0x7c, 0x8f,
	0x51, 0x74, 0x02, 0xdb, 0x8e, 0x67, 0xb2, 0x27, 0x6f, 0x24, 0x89, 0x76, 0x70, 0xd1, 0x91, 0x00,
	0x45, 0x83, 0x72, 0x7a, 0xd3, 0x1f, 0x61, 0xd7, 0xa5, 0x64, 0x1c, 0x6f, 0xba, 0xfc, 0xf4, 0x89,
	0x76, 0xed, 0x51, 0x32, 0x8e, 0x77, 0x2e, 0xbb, 0xb3, 0x6f, 0xa6, 0xfc, 0x2d, 0x0b, 0xbb, 0x0b,
	0x9b, 0x1e, 0x43, 0x31, 0xa4, 0xe9, 0x3d, 0xa3, 0x15, 0xfa, 0x15, 0x6c, 0x27, 0xfc, 0xb9, 0x85,
	0x8e, 0x4d, 0x47, 0x35, 0x08, 0x29, 0xc5, 0x09, 0x0e, 0x7d, 0x0f, 0xa5, 0xd1, 0x3d, 0xf1, 0x6c,
	0xca, 0x28, 0x8f, 0xbb, 0x71, 0xb1, 0xb1, 0xda, 0x89, 0x16, 0xcf, 0x81, 0xca, 0x00, 0x8e, 0x7b,
	0x0e, 0xe3, 0xf3, 0x22, 0xb1, 0x24, 0xce, 0x33, 0x28, 0x05, 0xc4, 0xa6, 0x26, 0x73, 0x7e, 0xa6,
	0xf1, 0x85, 0xb1, 0x23, 0x04, 0x86, 0xf3, 0x33, 0x45, 0xe7, 0x00, 0x52, 0xc9, 0xfd, 0x07, 0xea,
	0xc5, 0x77, 0x85, 0x84, 0x0f, 0x84, 0x40, 0xf9, 0x67, 0x16, 0x4e, 0x56, 0x68, 0xe3, 0x90, 0x7f,
	0x92, 0x8d, 0x99, 0x88, 0xe3, 0xf4, 0x3d, 0xd3, 0x30, 0x69, 0x34, 0xfa, 0x12, 0xf6, 0xe5, 0x4d,
	0xbb, 0xb2, 0xf9, 0x0b, 0x21, 0xee, 0x27, 0x0e, 0xa4, 0xf3, 0x97, 0xff, 0xb8, 0xfc, 0x7d, 0xfd,
	0x06, 0x4e, 0x36, 0x8c, 0x54, 0xf1, 0x04, 0x7e, 0x8b, 0xfb, 0x62, 0x8a, 0x95, 0x60, 0xeb, 0xbd,
	0x76, 0xad, 0xfe, 0xb9, 0x92, 0x15, 0xc2, 0xf7, 0x3d, 0x55, 0xaf, 0xe4, 0xc4, 0x4b, 0xa1, 0x3b,
	0x78, 0xdb, 0xc5, 0x7a, 0x77, 0x50, 0xc9, 0x37, 0xff, 0x93, 0x4b, 0x3f, 0xc7, 0x3b, 0x2d, 0xf4,
	0x7b, 0x78, 0xa1, 0x5a, 0xd6, 0x5c, 0x84, 0x36, 0x07, 0x5b, 0x3b, 0x58, 0x70, 0xf3, 0x9d, 0xef,
	0x58, 0x4a, 0x06, 0xfd, 0x01, 0x2a, 0x1d, 0xea, 0x52, 0x4e, 0x53, 0x1c, 0x9b, 0x26, 0xd8, 0x7a,
	0x86, 0x0e, 0x54, 0xa2, 0x73, 0x9a, 0x62, 0x38, 0x5b, 0xcb, 0x10, 0xc1, 0xd6, 0xb3, 0x68, 0x70,
	0x70, 0x45, 0xf9, 0xd2, 0x5c, 0xdd, 0xe8, 0xc8, 0xe6, 0x28, 0x95, 0x0c, 0x6a, 0xc1, 0xfe, 0x52,
	0x7f, 0xa0, 0xd5, 0x2d, 0x6b, 0xb5, 0x0d, 0xdc, 0x06, 0xe5, 0x4a, 0xa6, 0xf9, 0xdf, 0x2c, 0x1c,
	0xa4, 0x13, 0xdd, 0x76, 0xfd, 0xa9, 0x85, 0x74, 0x28, 0xa7, 0x4e, 0x37, 0x4a, 0xcf, 0xb4, 0xd5,
	0x09, 0x52, 0xfb, 0x6c, 0x93, 0x3a, 0x6a, 0x56, 0x25, 0x83, 0x7e, 0x0b, 0x05, 0x49, 0x74, 0x9c,
	0xf6, 0x25, 0xc5, 0x70, 0xb2, 0x22, 0x9f, 0x99, 0xde, 0xad, 0x06, 0xf9, 0x45, 0xfa, 0x7e, 0x58,
	0x7b, 0xee, 0x6a, 0xca, 0x73, 0x90, 0x84, 0xbb, 0x75, 0x76, 0x77, 0x2a, 0x61, 0x97, 0xe2, 0x3f,
	0xe3, 0x48, 0x44, 0x7e, 0x69, 0xfb, 0xf1, 0x9f, 0xc7, 0x61, 0x51, 0xfe, 0xbe, 0xfe, 0x7f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x74, 0x04, 0x15, 0xd1, 0xb1, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SubscriberDBClient is the client API for SubscriberDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SubscriberDBClient interface {
	// Adds a new subscriber to the store.
	// Throws ALREADY_EXISTS if the subscriber already exists.
	//
	AddSubscriber(ctx context.Context, in *SubscriberData, opts ...grpc.CallOption) (*protos.Void, error)
	// Deletes an existing subscriber.
	// If the subscriber is not already present, this request is ignored.
	//
	DeleteSubscriber(ctx context.Context, in *SubscriberID, opts ...grpc.CallOption) (*protos.Void, error)
	// Updates an existing subscriber.
	// Throws NOT_FOUND if the subscriber is missing.
	//
	UpdateSubscriber(ctx context.Context, in *SubscriberUpdate, opts ...grpc.CallOption) (*protos.Void, error)
	// Returns the SubscriberData for a subscriber.
	// Throws NOT_FOUND if the subscriber is missing.
	//
	GetSubscriberData(ctx context.Context, in *SubscriberID, opts ...grpc.CallOption) (*SubscriberData, error)
	// List the subscribers in the store.
	//
	ListSubscribers(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*SubscriberIDSet, error)
}

type subscriberDBClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriberDBClient(cc grpc.ClientConnInterface) SubscriberDBClient {
	return &subscriberDBClient{cc}
}

func (c *subscriberDBClient) AddSubscriber(ctx context.Context, in *SubscriberData, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDB/AddSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberDBClient) DeleteSubscriber(ctx context.Context, in *SubscriberID, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDB/DeleteSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberDBClient) UpdateSubscriber(ctx context.Context, in *SubscriberUpdate, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDB/UpdateSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberDBClient) GetSubscriberData(ctx context.Context, in *SubscriberID, opts ...grpc.CallOption) (*SubscriberData, error) {
	out := new(SubscriberData)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDB/GetSubscriberData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberDBClient) ListSubscribers(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*SubscriberIDSet, error) {
	out := new(SubscriberIDSet)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDB/ListSubscribers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriberDBServer is the server API for SubscriberDB service.
type SubscriberDBServer interface {
	// Adds a new subscriber to the store.
	// Throws ALREADY_EXISTS if the subscriber already exists.
	//
	AddSubscriber(context.Context, *SubscriberData) (*protos.Void, error)
	// Deletes an existing subscriber.
	// If the subscriber is not already present, this request is ignored.
	//
	DeleteSubscriber(context.Context, *SubscriberID) (*protos.Void, error)
	// Updates an existing subscriber.
	// Throws NOT_FOUND if the subscriber is missing.
	//
	UpdateSubscriber(context.Context, *SubscriberUpdate) (*protos.Void, error)
	// Returns the SubscriberData for a subscriber.
	// Throws NOT_FOUND if the subscriber is missing.
	//
	GetSubscriberData(context.Context, *SubscriberID) (*SubscriberData, error)
	// List the subscribers in the store.
	//
	ListSubscribers(context.Context, *protos.Void) (*SubscriberIDSet, error)
}

// UnimplementedSubscriberDBServer can be embedded to have forward compatible implementations.
type UnimplementedSubscriberDBServer struct {
}

func (*UnimplementedSubscriberDBServer) AddSubscriber(ctx context.Context, req *SubscriberData) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSubscriber not implemented")
}
func (*UnimplementedSubscriberDBServer) DeleteSubscriber(ctx context.Context, req *SubscriberID) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubscriber not implemented")
}
func (*UnimplementedSubscriberDBServer) UpdateSubscriber(ctx context.Context, req *SubscriberUpdate) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscriber not implemented")
}
func (*UnimplementedSubscriberDBServer) GetSubscriberData(ctx context.Context, req *SubscriberID) (*SubscriberData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriberData not implemented")
}
func (*UnimplementedSubscriberDBServer) ListSubscribers(ctx context.Context, req *protos.Void) (*SubscriberIDSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscribers not implemented")
}

func RegisterSubscriberDBServer(s *grpc.Server, srv SubscriberDBServer) {
	s.RegisterService(&_SubscriberDB_serviceDesc, srv)
}

func _SubscriberDB_AddSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriberData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBServer).AddSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDB/AddSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBServer).AddSubscriber(ctx, req.(*SubscriberData))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberDB_DeleteSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriberID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBServer).DeleteSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDB/DeleteSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBServer).DeleteSubscriber(ctx, req.(*SubscriberID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberDB_UpdateSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriberUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBServer).UpdateSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDB/UpdateSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBServer).UpdateSubscriber(ctx, req.(*SubscriberUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberDB_GetSubscriberData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriberID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBServer).GetSubscriberData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDB/GetSubscriberData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBServer).GetSubscriberData(ctx, req.(*SubscriberID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberDB_ListSubscribers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBServer).ListSubscribers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDB/ListSubscribers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBServer).ListSubscribers(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubscriberDB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.SubscriberDB",
	HandlerType: (*SubscriberDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSubscriber",
			Handler:    _SubscriberDB_AddSubscriber_Handler,
		},
		{
			MethodName: "DeleteSubscriber",
			Handler:    _SubscriberDB_DeleteSubscriber_Handler,
		},
		{
			MethodName: "UpdateSubscriber",
			Handler:    _SubscriberDB_UpdateSubscriber_Handler,
		},
		{
			MethodName: "GetSubscriberData",
			Handler:    _SubscriberDB_GetSubscriberData_Handler,
		},
		{
			MethodName: "ListSubscribers",
			Handler:    _SubscriberDB_ListSubscribers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/subscriberdb.proto",
}

// SubscriberDBCloudClient is the client API for SubscriberDBCloud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SubscriberDBCloudClient interface {
	// CheckSubscribersInSync checks whether the client subscribers flat digest
	// is up-to-date.
	CheckInSync(ctx context.Context, in *CheckInSyncRequest, opts ...grpc.CallOption) (*CheckInSyncResponse, error)
	// SyncSubscribers returns the changeset of subscribers between client and
	// cloud if the set is small; if the set is large, returns signal to resync.
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
	// ListSubscribers lists pages of subscribers stored.
	ListSubscribers(ctx context.Context, in *ListSubscribersRequest, opts ...grpc.CallOption) (*ListSubscribersResponse, error)
}

type subscriberDBCloudClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriberDBCloudClient(cc grpc.ClientConnInterface) SubscriberDBCloudClient {
	return &subscriberDBCloudClient{cc}
}

func (c *subscriberDBCloudClient) CheckInSync(ctx context.Context, in *CheckInSyncRequest, opts ...grpc.CallOption) (*CheckInSyncResponse, error) {
	out := new(CheckInSyncResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDBCloud/CheckInSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberDBCloudClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDBCloud/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberDBCloudClient) ListSubscribers(ctx context.Context, in *ListSubscribersRequest, opts ...grpc.CallOption) (*ListSubscribersResponse, error) {
	out := new(ListSubscribersResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDBCloud/ListSubscribers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriberDBCloudServer is the server API for SubscriberDBCloud service.
type SubscriberDBCloudServer interface {
	// CheckSubscribersInSync checks whether the client subscribers flat digest
	// is up-to-date.
	CheckInSync(context.Context, *CheckInSyncRequest) (*CheckInSyncResponse, error)
	// SyncSubscribers returns the changeset of subscribers between client and
	// cloud if the set is small; if the set is large, returns signal to resync.
	Sync(context.Context, *SyncRequest) (*SyncResponse, error)
	// ListSubscribers lists pages of subscribers stored.
	ListSubscribers(context.Context, *ListSubscribersRequest) (*ListSubscribersResponse, error)
}

// UnimplementedSubscriberDBCloudServer can be embedded to have forward compatible implementations.
type UnimplementedSubscriberDBCloudServer struct {
}

func (*UnimplementedSubscriberDBCloudServer) CheckInSync(ctx context.Context, req *CheckInSyncRequest) (*CheckInSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckInSync not implemented")
}
func (*UnimplementedSubscriberDBCloudServer) Sync(ctx context.Context, req *SyncRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (*UnimplementedSubscriberDBCloudServer) ListSubscribers(ctx context.Context, req *ListSubscribersRequest) (*ListSubscribersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscribers not implemented")
}

func RegisterSubscriberDBCloudServer(s *grpc.Server, srv SubscriberDBCloudServer) {
	s.RegisterService(&_SubscriberDBCloud_serviceDesc, srv)
}

func _SubscriberDBCloud_CheckInSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckInSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBCloudServer).CheckInSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDBCloud/CheckInSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBCloudServer).CheckInSync(ctx, req.(*CheckInSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberDBCloud_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBCloudServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDBCloud/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBCloudServer).Sync(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberDBCloud_ListSubscribers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubscribersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBCloudServer).ListSubscribers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDBCloud/ListSubscribers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBCloudServer).ListSubscribers(ctx, req.(*ListSubscribersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubscriberDBCloud_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.SubscriberDBCloud",
	HandlerType: (*SubscriberDBCloudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckInSync",
			Handler:    _SubscriberDBCloud_CheckInSync_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _SubscriberDBCloud_Sync_Handler,
		},
		{
			MethodName: "ListSubscribers",
			Handler:    _SubscriberDBCloud_ListSubscribers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/subscriberdb.proto",
}
