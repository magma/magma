//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.10.0
// source: lte/protos/subscriberdb.proto

package protos

import (
	context "context"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	protos "magma/orc8r/lib/go/protos"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// For details about values read 3GPP 24.302
type AccessNetworkIdentifier int32

const (
	AccessNetworkIdentifier_HRPD     AccessNetworkIdentifier = 0
	AccessNetworkIdentifier_WIMAX    AccessNetworkIdentifier = 1
	AccessNetworkIdentifier_WLAN     AccessNetworkIdentifier = 2
	AccessNetworkIdentifier_ETHERNET AccessNetworkIdentifier = 3
)

// Enum value maps for AccessNetworkIdentifier.
var (
	AccessNetworkIdentifier_name = map[int32]string{
		0: "HRPD",
		1: "WIMAX",
		2: "WLAN",
		3: "ETHERNET",
	}
	AccessNetworkIdentifier_value = map[string]int32{
		"HRPD":     0,
		"WIMAX":    1,
		"WLAN":     2,
		"ETHERNET": 3,
	}
)

func (x AccessNetworkIdentifier) Enum() *AccessNetworkIdentifier {
	p := new(AccessNetworkIdentifier)
	*p = x
	return p
}

func (x AccessNetworkIdentifier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessNetworkIdentifier) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_subscriberdb_proto_enumTypes[0].Descriptor()
}

func (AccessNetworkIdentifier) Type() protoreflect.EnumType {
	return &file_lte_protos_subscriberdb_proto_enumTypes[0]
}

func (x AccessNetworkIdentifier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessNetworkIdentifier.Descriptor instead.
func (AccessNetworkIdentifier) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{0}
}

type SubscriberID_IDType int32

const (
	SubscriberID_IMSI SubscriberID_IDType = 0
)

// Enum value maps for SubscriberID_IDType.
var (
	SubscriberID_IDType_name = map[int32]string{
		0: "IMSI",
	}
	SubscriberID_IDType_value = map[string]int32{
		"IMSI": 0,
	}
)

func (x SubscriberID_IDType) Enum() *SubscriberID_IDType {
	p := new(SubscriberID_IDType)
	*p = x
	return p
}

func (x SubscriberID_IDType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriberID_IDType) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_subscriberdb_proto_enumTypes[1].Descriptor()
}

func (SubscriberID_IDType) Type() protoreflect.EnumType {
	return &file_lte_protos_subscriberdb_proto_enumTypes[1]
}

func (x SubscriberID_IDType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscriberID_IDType.Descriptor instead.
func (SubscriberID_IDType) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{0, 0}
}

type GSMSubscription_GSMSubscriptionState int32

const (
	GSMSubscription_INACTIVE GSMSubscription_GSMSubscriptionState = 0
	GSMSubscription_ACTIVE   GSMSubscription_GSMSubscriptionState = 1
)

// Enum value maps for GSMSubscription_GSMSubscriptionState.
var (
	GSMSubscription_GSMSubscriptionState_name = map[int32]string{
		0: "INACTIVE",
		1: "ACTIVE",
	}
	GSMSubscription_GSMSubscriptionState_value = map[string]int32{
		"INACTIVE": 0,
		"ACTIVE":   1,
	}
)

func (x GSMSubscription_GSMSubscriptionState) Enum() *GSMSubscription_GSMSubscriptionState {
	p := new(GSMSubscription_GSMSubscriptionState)
	*p = x
	return p
}

func (x GSMSubscription_GSMSubscriptionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GSMSubscription_GSMSubscriptionState) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_subscriberdb_proto_enumTypes[2].Descriptor()
}

func (GSMSubscription_GSMSubscriptionState) Type() protoreflect.EnumType {
	return &file_lte_protos_subscriberdb_proto_enumTypes[2]
}

func (x GSMSubscription_GSMSubscriptionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GSMSubscription_GSMSubscriptionState.Descriptor instead.
func (GSMSubscription_GSMSubscriptionState) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{3, 0}
}

type GSMSubscription_GSMAuthAlgo int32

const (
	GSMSubscription_PRECOMPUTED_AUTH_TUPLES GSMSubscription_GSMAuthAlgo = 0 // default
)

// Enum value maps for GSMSubscription_GSMAuthAlgo.
var (
	GSMSubscription_GSMAuthAlgo_name = map[int32]string{
		0: "PRECOMPUTED_AUTH_TUPLES",
	}
	GSMSubscription_GSMAuthAlgo_value = map[string]int32{
		"PRECOMPUTED_AUTH_TUPLES": 0,
	}
)

func (x GSMSubscription_GSMAuthAlgo) Enum() *GSMSubscription_GSMAuthAlgo {
	p := new(GSMSubscription_GSMAuthAlgo)
	*p = x
	return p
}

func (x GSMSubscription_GSMAuthAlgo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GSMSubscription_GSMAuthAlgo) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_subscriberdb_proto_enumTypes[3].Descriptor()
}

func (GSMSubscription_GSMAuthAlgo) Type() protoreflect.EnumType {
	return &file_lte_protos_subscriberdb_proto_enumTypes[3]
}

func (x GSMSubscription_GSMAuthAlgo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GSMSubscription_GSMAuthAlgo.Descriptor instead.
func (GSMSubscription_GSMAuthAlgo) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{3, 1}
}

type LTESubscription_LTESubscriptionState int32

const (
	LTESubscription_INACTIVE LTESubscription_LTESubscriptionState = 0
	LTESubscription_ACTIVE   LTESubscription_LTESubscriptionState = 1
)

// Enum value maps for LTESubscription_LTESubscriptionState.
var (
	LTESubscription_LTESubscriptionState_name = map[int32]string{
		0: "INACTIVE",
		1: "ACTIVE",
	}
	LTESubscription_LTESubscriptionState_value = map[string]int32{
		"INACTIVE": 0,
		"ACTIVE":   1,
	}
)

func (x LTESubscription_LTESubscriptionState) Enum() *LTESubscription_LTESubscriptionState {
	p := new(LTESubscription_LTESubscriptionState)
	*p = x
	return p
}

func (x LTESubscription_LTESubscriptionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LTESubscription_LTESubscriptionState) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_subscriberdb_proto_enumTypes[4].Descriptor()
}

func (LTESubscription_LTESubscriptionState) Type() protoreflect.EnumType {
	return &file_lte_protos_subscriberdb_proto_enumTypes[4]
}

func (x LTESubscription_LTESubscriptionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LTESubscription_LTESubscriptionState.Descriptor instead.
func (LTESubscription_LTESubscriptionState) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{4, 0}
}

type LTESubscription_LTEAuthAlgo int32

const (
	LTESubscription_MILENAGE LTESubscription_LTEAuthAlgo = 0 // default
)

// Enum value maps for LTESubscription_LTEAuthAlgo.
var (
	LTESubscription_LTEAuthAlgo_name = map[int32]string{
		0: "MILENAGE",
	}
	LTESubscription_LTEAuthAlgo_value = map[string]int32{
		"MILENAGE": 0,
	}
)

func (x LTESubscription_LTEAuthAlgo) Enum() *LTESubscription_LTEAuthAlgo {
	p := new(LTESubscription_LTEAuthAlgo)
	*p = x
	return p
}

func (x LTESubscription_LTEAuthAlgo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LTESubscription_LTEAuthAlgo) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_subscriberdb_proto_enumTypes[5].Descriptor()
}

func (LTESubscription_LTEAuthAlgo) Type() protoreflect.EnumType {
	return &file_lte_protos_subscriberdb_proto_enumTypes[5]
}

func (x LTESubscription_LTEAuthAlgo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LTESubscription_LTEAuthAlgo.Descriptor instead.
func (LTESubscription_LTEAuthAlgo) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{4, 1}
}

type Non3GPPUserProfile_Non3GPPIPAccess int32

const (
	// Subscriber has non-3GPP subscription access to EPC network
	Non3GPPUserProfile_NON_3GPP_SUBSCRIPTION_ALLOWED Non3GPPUserProfile_Non3GPPIPAccess = 0
	// Subscriber has no non-3GPP subscription access to EPC network
	Non3GPPUserProfile_NON_3GPP_SUBSCRIPTION_BARRED Non3GPPUserProfile_Non3GPPIPAccess = 1
)

// Enum value maps for Non3GPPUserProfile_Non3GPPIPAccess.
var (
	Non3GPPUserProfile_Non3GPPIPAccess_name = map[int32]string{
		0: "NON_3GPP_SUBSCRIPTION_ALLOWED",
		1: "NON_3GPP_SUBSCRIPTION_BARRED",
	}
	Non3GPPUserProfile_Non3GPPIPAccess_value = map[string]int32{
		"NON_3GPP_SUBSCRIPTION_ALLOWED": 0,
		"NON_3GPP_SUBSCRIPTION_BARRED":  1,
	}
)

func (x Non3GPPUserProfile_Non3GPPIPAccess) Enum() *Non3GPPUserProfile_Non3GPPIPAccess {
	p := new(Non3GPPUserProfile_Non3GPPIPAccess)
	*p = x
	return p
}

func (x Non3GPPUserProfile_Non3GPPIPAccess) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Non3GPPUserProfile_Non3GPPIPAccess) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_subscriberdb_proto_enumTypes[6].Descriptor()
}

func (Non3GPPUserProfile_Non3GPPIPAccess) Type() protoreflect.EnumType {
	return &file_lte_protos_subscriberdb_proto_enumTypes[6]
}

func (x Non3GPPUserProfile_Non3GPPIPAccess) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Non3GPPUserProfile_Non3GPPIPAccess.Descriptor instead.
func (Non3GPPUserProfile_Non3GPPIPAccess) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{7, 0}
}

type Non3GPPUserProfile_Non3GPPIPAccessAPN int32

const (
	// Enable all APNs for a subscriber
	Non3GPPUserProfile_NON_3GPP_APNS_ENABLE Non3GPPUserProfile_Non3GPPIPAccessAPN = 0
	// Disable all APNs for a subscriber
	Non3GPPUserProfile_NON_3GPP_APNS_DISABLE Non3GPPUserProfile_Non3GPPIPAccessAPN = 1
)

// Enum value maps for Non3GPPUserProfile_Non3GPPIPAccessAPN.
var (
	Non3GPPUserProfile_Non3GPPIPAccessAPN_name = map[int32]string{
		0: "NON_3GPP_APNS_ENABLE",
		1: "NON_3GPP_APNS_DISABLE",
	}
	Non3GPPUserProfile_Non3GPPIPAccessAPN_value = map[string]int32{
		"NON_3GPP_APNS_ENABLE":  0,
		"NON_3GPP_APNS_DISABLE": 1,
	}
)

func (x Non3GPPUserProfile_Non3GPPIPAccessAPN) Enum() *Non3GPPUserProfile_Non3GPPIPAccessAPN {
	p := new(Non3GPPUserProfile_Non3GPPIPAccessAPN)
	*p = x
	return p
}

func (x Non3GPPUserProfile_Non3GPPIPAccessAPN) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Non3GPPUserProfile_Non3GPPIPAccessAPN) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_subscriberdb_proto_enumTypes[7].Descriptor()
}

func (Non3GPPUserProfile_Non3GPPIPAccessAPN) Type() protoreflect.EnumType {
	return &file_lte_protos_subscriberdb_proto_enumTypes[7]
}

func (x Non3GPPUserProfile_Non3GPPIPAccessAPN) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Non3GPPUserProfile_Non3GPPIPAccessAPN.Descriptor instead.
func (Non3GPPUserProfile_Non3GPPIPAccessAPN) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{7, 1}
}

type CoreNetworkType_CoreNetworkTypes int32

const (
	CoreNetworkType_NT_EPC CoreNetworkType_CoreNetworkTypes = 0
	CoreNetworkType_NT_5GC CoreNetworkType_CoreNetworkTypes = 1
)

// Enum value maps for CoreNetworkType_CoreNetworkTypes.
var (
	CoreNetworkType_CoreNetworkTypes_name = map[int32]string{
		0: "NT_EPC",
		1: "NT_5GC",
	}
	CoreNetworkType_CoreNetworkTypes_value = map[string]int32{
		"NT_EPC": 0,
		"NT_5GC": 1,
	}
)

func (x CoreNetworkType_CoreNetworkTypes) Enum() *CoreNetworkType_CoreNetworkTypes {
	p := new(CoreNetworkType_CoreNetworkTypes)
	*p = x
	return p
}

func (x CoreNetworkType_CoreNetworkTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoreNetworkType_CoreNetworkTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_subscriberdb_proto_enumTypes[8].Descriptor()
}

func (CoreNetworkType_CoreNetworkTypes) Type() protoreflect.EnumType {
	return &file_lte_protos_subscriberdb_proto_enumTypes[8]
}

func (x CoreNetworkType_CoreNetworkTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CoreNetworkType_CoreNetworkTypes.Descriptor instead.
func (CoreNetworkType_CoreNetworkTypes) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{9, 0}
}

type SuciProfile_ECIESProtectionScheme int32

const (
	SuciProfile_ProfileA SuciProfile_ECIESProtectionScheme = 0
	SuciProfile_ProfileB SuciProfile_ECIESProtectionScheme = 1
)

// Enum value maps for SuciProfile_ECIESProtectionScheme.
var (
	SuciProfile_ECIESProtectionScheme_name = map[int32]string{
		0: "ProfileA",
		1: "ProfileB",
	}
	SuciProfile_ECIESProtectionScheme_value = map[string]int32{
		"ProfileA": 0,
		"ProfileB": 1,
	}
)

func (x SuciProfile_ECIESProtectionScheme) Enum() *SuciProfile_ECIESProtectionScheme {
	p := new(SuciProfile_ECIESProtectionScheme)
	*p = x
	return p
}

func (x SuciProfile_ECIESProtectionScheme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SuciProfile_ECIESProtectionScheme) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_subscriberdb_proto_enumTypes[9].Descriptor()
}

func (SuciProfile_ECIESProtectionScheme) Type() protoreflect.EnumType {
	return &file_lte_protos_subscriberdb_proto_enumTypes[9]
}

func (x SuciProfile_ECIESProtectionScheme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SuciProfile_ECIESProtectionScheme.Descriptor instead.
func (SuciProfile_ECIESProtectionScheme) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{17, 0}
}

// --------------------------------------------------------------------------
// SubscriberID (or SID) uniquely identifies the subscriber across the system
// --------------------------------------------------------------------------
type SubscriberID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type SubscriberID_IDType `protobuf:"varint,2,opt,name=type,proto3,enum=magma.lte.SubscriberID_IDType" json:"type,omitempty"`
}

func (x *SubscriberID) Reset() {
	*x = SubscriberID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_subscriberdb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriberID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriberID) ProtoMessage() {}

func (x *SubscriberID) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_subscriberdb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriberID.ProtoReflect.Descriptor instead.
func (*SubscriberID) Descriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{0}
}

func (x *SubscriberID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SubscriberID) GetType() SubscriberID_IDType {
	if x != nil {
		return x.Type
	}
	return SubscriberID_IMSI
}

type SubscriberIDSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sids []*SubscriberID `protobuf:"bytes,1,rep,name=sids,proto3" json:"sids,omitempty"`
}

func (x *SubscriberIDSet) Reset() {
	*x = SubscriberIDSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_subscriberdb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriberIDSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriberIDSet) ProtoMessage() {}

func (x *SubscriberIDSet) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_subscriberdb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriberIDSet.ProtoReflect.Descriptor instead.
func (*SubscriberIDSet) Descriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{1}
}

func (x *SubscriberIDSet) GetSids() []*SubscriberID {
	if x != nil {
		return x.Sids
	}
	return nil
}

type SuciProfileList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SuciProfiles []*SuciProfile `protobuf:"bytes,1,rep,name=suci_profiles,json=suciProfiles,proto3" json:"suci_profiles,omitempty"`
}

func (x *SuciProfileList) Reset() {
	*x = SuciProfileList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_subscriberdb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuciProfileList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuciProfileList) ProtoMessage() {}

func (x *SuciProfileList) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_subscriberdb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuciProfileList.ProtoReflect.Descriptor instead.
func (*SuciProfileList) Descriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{2}
}

func (x *SuciProfileList) GetSuciProfiles() []*SuciProfile {
	if x != nil {
		return x.SuciProfiles
	}
	return nil
}

// --------------------------------------------------------------------------
// GSM/LTE subscription info
// --------------------------------------------------------------------------
type GSMSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State    GSMSubscription_GSMSubscriptionState `protobuf:"varint,1,opt,name=state,proto3,enum=magma.lte.GSMSubscription_GSMSubscriptionState" json:"state,omitempty"`
	AuthAlgo GSMSubscription_GSMAuthAlgo          `protobuf:"varint,2,opt,name=auth_algo,json=authAlgo,proto3,enum=magma.lte.GSMSubscription_GSMAuthAlgo" json:"auth_algo,omitempty"`
	// Authentication key (ki). Need for A3/A8 algos. This is not used
	// when the auth_algo is PRECOMPUTED_AUTH_TUPLES.
	AuthKey []byte `protobuf:"bytes,3,opt,name=auth_key,json=authKey,proto3" json:"auth_key,omitempty"`
	// Precomputed (rand, sres, kc) tuples. Used when the auth_algo is
	// PRECOMPUTED_AUTH_TUPLES.
	AuthTuples [][]byte `protobuf:"bytes,4,rep,name=auth_tuples,json=authTuples,proto3" json:"auth_tuples,omitempty"`
}

func (x *GSMSubscription) Reset() {
	*x = GSMSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_subscriberdb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GSMSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GSMSubscription) ProtoMessage() {}

func (x *GSMSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_subscriberdb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GSMSubscription.ProtoReflect.Descriptor instead.
func (*GSMSubscription) Descriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{3}
}

func (x *GSMSubscription) GetState() GSMSubscription_GSMSubscriptionState {
	if x != nil {
		return x.State
	}
	return GSMSubscription_INACTIVE
}

func (x *GSMSubscription) GetAuthAlgo() GSMSubscription_GSMAuthAlgo {
	if x != nil {
		return x.AuthAlgo
	}
	return GSMSubscription_PRECOMPUTED_AUTH_TUPLES
}

func (x *GSMSubscription) GetAuthKey() []byte {
	if x != nil {
		return x.AuthKey
	}
	return nil
}

func (x *GSMSubscription) GetAuthTuples() [][]byte {
	if x != nil {
		return x.AuthTuples
	}
	return nil
}

type LTESubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State    LTESubscription_LTESubscriptionState `protobuf:"varint,1,opt,name=state,proto3,enum=magma.lte.LTESubscription_LTESubscriptionState" json:"state,omitempty"`
	AuthAlgo LTESubscription_LTEAuthAlgo          `protobuf:"varint,2,opt,name=auth_algo,json=authAlgo,proto3,enum=magma.lte.LTESubscription_LTEAuthAlgo" json:"auth_algo,omitempty"`
	// Authentication key (k).
	AuthKey []byte `protobuf:"bytes,3,opt,name=auth_key,json=authKey,proto3" json:"auth_key,omitempty"`
	// Operator configuration field (Op) signed with authentication key (k)
	AuthOpc           []byte   `protobuf:"bytes,4,opt,name=auth_opc,json=authOpc,proto3" json:"auth_opc,omitempty"`
	AssignedBaseNames []string `protobuf:"bytes,10,rep,name=assigned_base_names,json=assignedBaseNames,proto3" json:"assigned_base_names,omitempty"`
	AssignedPolicies  []string `protobuf:"bytes,11,rep,name=assigned_policies,json=assignedPolicies,proto3" json:"assigned_policies,omitempty"`
}

func (x *LTESubscription) Reset() {
	*x = LTESubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_subscriberdb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LTESubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LTESubscription) ProtoMessage() {}

func (x *LTESubscription) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_subscriberdb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LTESubscription.ProtoReflect.Descriptor instead.
func (*LTESubscription) Descriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{4}
}

func (x *LTESubscription) GetState() LTESubscription_LTESubscriptionState {
	if x != nil {
		return x.State
	}
	return LTESubscription_INACTIVE
}

func (x *LTESubscription) GetAuthAlgo() LTESubscription_LTEAuthAlgo {
	if x != nil {
		return x.AuthAlgo
	}
	return LTESubscription_MILENAGE
}

func (x *LTESubscription) GetAuthKey() []byte {
	if x != nil {
		return x.AuthKey
	}
	return nil
}

func (x *LTESubscription) GetAuthOpc() []byte {
	if x != nil {
		return x.AuthOpc
	}
	return nil
}

func (x *LTESubscription) GetAssignedBaseNames() []string {
	if x != nil {
		return x.AssignedBaseNames
	}
	return nil
}

func (x *LTESubscription) GetAssignedPolicies() []string {
	if x != nil {
		return x.AssignedPolicies
	}
	return nil
}

type SubscriberState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next SEQ to be used for calculating the AUTN.
	LteAuthNextSeq uint64 `protobuf:"varint,1,opt,name=lte_auth_next_seq,json=lteAuthNextSeq,proto3" json:"lte_auth_next_seq,omitempty"`
	// The Diameter address of the 3GPP AAA Server which is serving the user.
	// An empty string indicates that no server is currently serving the user.
	TgppAaaServerName string `protobuf:"bytes,2,opt,name=tgpp_aaa_server_name,json=tgppAaaServerName,proto3" json:"tgpp_aaa_server_name,omitempty"`
	// Whether the subscribers User Status is REGISTERED or NOT_REGISTERED.
	TgppAaaServerRegistered bool `protobuf:"varint,3,opt,name=tgpp_aaa_server_registered,json=tgppAaaServerRegistered,proto3" json:"tgpp_aaa_server_registered,omitempty"`
}

func (x *SubscriberState) Reset() {
	*x = SubscriberState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_subscriberdb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriberState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriberState) ProtoMessage() {}

func (x *SubscriberState) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_subscriberdb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriberState.ProtoReflect.Descriptor instead.
func (*SubscriberState) Descriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{5}
}

func (x *SubscriberState) GetLteAuthNextSeq() uint64 {
	if x != nil {
		return x.LteAuthNextSeq
	}
	return 0
}

func (x *SubscriberState) GetTgppAaaServerName() string {
	if x != nil {
		return x.TgppAaaServerName
	}
	return ""
}

func (x *SubscriberState) GetTgppAaaServerRegistered() bool {
	if x != nil {
		return x.TgppAaaServerRegistered
	}
	return false
}

type SubscriberAPNConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApnId            uint32 `protobuf:"varint,1,opt,name=apn_id,json=apnId,proto3" json:"apn_id,omitempty"`
	AssignedStaticIp string `protobuf:"bytes,2,opt,name=assigned_static_ip,json=assignedStaticIp,proto3" json:"assigned_static_ip,omitempty"`
}

func (x *SubscriberAPNConfig) Reset() {
	*x = SubscriberAPNConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_subscriberdb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriberAPNConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriberAPNConfig) ProtoMessage() {}

func (x *SubscriberAPNConfig) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_subscriberdb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriberAPNConfig.ProtoReflect.Descriptor instead.
func (*SubscriberAPNConfig) Descriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{6}
}

func (x *SubscriberAPNConfig) GetApnId() uint32 {
	if x != nil {
		return x.ApnId
	}
	return 0
}

func (x *SubscriberAPNConfig) GetAssignedStaticIp() string {
	if x != nil {
		return x.AssignedStaticIp
	}
	return ""
}

type Non3GPPUserProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msisdn              string                                `protobuf:"bytes,1,opt,name=msisdn,proto3" json:"msisdn,omitempty"`
	Non_3GppIpAccess    Non3GPPUserProfile_Non3GPPIPAccess    `protobuf:"varint,2,opt,name=non_3gpp_ip_access,json=non3gppIpAccess,proto3,enum=magma.lte.Non3GPPUserProfile_Non3GPPIPAccess" json:"non_3gpp_ip_access,omitempty"`
	Non_3GppIpAccessApn Non3GPPUserProfile_Non3GPPIPAccessAPN `protobuf:"varint,3,opt,name=non_3gpp_ip_access_apn,json=non3gppIpAccessApn,proto3,enum=magma.lte.Non3GPPUserProfile_Non3GPPIPAccessAPN" json:"non_3gpp_ip_access_apn,omitempty"`
	Ambr                *AggregatedMaximumBitrate             `protobuf:"bytes,4,opt,name=ambr,proto3" json:"ambr,omitempty"`
	ApnConfig           []*APNConfiguration                   `protobuf:"bytes,5,rep,name=apn_config,json=apnConfig,proto3" json:"apn_config,omitempty"`
	AccessNetId         AccessNetworkIdentifier               `protobuf:"varint,6,opt,name=access_net_id,json=accessNetId,proto3,enum=magma.lte.AccessNetworkIdentifier" json:"access_net_id,omitempty"`
	// subscriber specific APN config
	SubscriberApnConfig []*SubscriberAPNConfig `protobuf:"bytes,7,rep,name=subscriber_apn_config,json=subscriberApnConfig,proto3" json:"subscriber_apn_config,omitempty"`
}

func (x *Non3GPPUserProfile) Reset() {
	*x = Non3GPPUserProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_subscriberdb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Non3GPPUserProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Non3GPPUserProfile) ProtoMessage() {}

func (x *Non3GPPUserProfile) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_subscriberdb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Non3GPPUserProfile.ProtoReflect.Descriptor instead.
func (*Non3GPPUserProfile) Descriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{7}
}

func (x *Non3GPPUserProfile) GetMsisdn() string {
	if x != nil {
		return x.Msisdn
	}
	return ""
}

func (x *Non3GPPUserProfile) GetNon_3GppIpAccess() Non3GPPUserProfile_Non3GPPIPAccess {
	if x != nil {
		return x.Non_3GppIpAccess
	}
	return Non3GPPUserProfile_NON_3GPP_SUBSCRIPTION_ALLOWED
}

func (x *Non3GPPUserProfile) GetNon_3GppIpAccessApn() Non3GPPUserProfile_Non3GPPIPAccessAPN {
	if x != nil {
		return x.Non_3GppIpAccessApn
	}
	return Non3GPPUserProfile_NON_3GPP_APNS_ENABLE
}

func (x *Non3GPPUserProfile) GetAmbr() *AggregatedMaximumBitrate {
	if x != nil {
		return x.Ambr
	}
	return nil
}

func (x *Non3GPPUserProfile) GetApnConfig() []*APNConfiguration {
	if x != nil {
		return x.ApnConfig
	}
	return nil
}

func (x *Non3GPPUserProfile) GetAccessNetId() AccessNetworkIdentifier {
	if x != nil {
		return x.AccessNetId
	}
	return AccessNetworkIdentifier_HRPD
}

func (x *Non3GPPUserProfile) GetSubscriberApnConfig() []*SubscriberAPNConfig {
	if x != nil {
		return x.SubscriberApnConfig
	}
	return nil
}

// --------------------------------------------------------------------------
// User subscription record. This record is serialized and stored in the DB.
// --------------------------------------------------------------------------
type SubscriberData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique indentifier for the subscriber
	Sid       *SubscriberID     `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	Gsm       *GSMSubscription  `protobuf:"bytes,2,opt,name=gsm,proto3" json:"gsm,omitempty"`
	Lte       *LTESubscription  `protobuf:"bytes,3,opt,name=lte,proto3" json:"lte,omitempty"`
	NetworkId *protos.NetworkID `protobuf:"bytes,4,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	State     *SubscriberState  `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	// Subscription profile
	SubProfile string              `protobuf:"bytes,6,opt,name=sub_profile,json=subProfile,proto3" json:"sub_profile,omitempty"`
	Non_3Gpp   *Non3GPPUserProfile `protobuf:"bytes,7,opt,name=non_3gpp,json=non3gpp,proto3" json:"non_3gpp,omitempty"`
	SubNetwork *CoreNetworkType    `protobuf:"bytes,8,opt,name=sub_network,json=subNetwork,proto3" json:"sub_network,omitempty"`
}

func (x *SubscriberData) Reset() {
	*x = SubscriberData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_subscriberdb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriberData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriberData) ProtoMessage() {}

func (x *SubscriberData) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_subscriberdb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriberData.ProtoReflect.Descriptor instead.
func (*SubscriberData) Descriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{8}
}

func (x *SubscriberData) GetSid() *SubscriberID {
	if x != nil {
		return x.Sid
	}
	return nil
}

func (x *SubscriberData) GetGsm() *GSMSubscription {
	if x != nil {
		return x.Gsm
	}
	return nil
}

func (x *SubscriberData) GetLte() *LTESubscription {
	if x != nil {
		return x.Lte
	}
	return nil
}

func (x *SubscriberData) GetNetworkId() *protos.NetworkID {
	if x != nil {
		return x.NetworkId
	}
	return nil
}

func (x *SubscriberData) GetState() *SubscriberState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *SubscriberData) GetSubProfile() string {
	if x != nil {
		return x.SubProfile
	}
	return ""
}

func (x *SubscriberData) GetNon_3Gpp() *Non3GPPUserProfile {
	if x != nil {
		return x.Non_3Gpp
	}
	return nil
}

func (x *SubscriberData) GetSubNetwork() *CoreNetworkType {
	if x != nil {
		return x.SubNetwork
	}
	return nil
}

type CoreNetworkType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Network Types to be restricted per subscriber. If not configured, Subscriber will have access to all Network Types by default.
	ForbiddenNetworkTypes []CoreNetworkType_CoreNetworkTypes `protobuf:"varint,1,rep,packed,name=forbidden_network_types,json=forbiddenNetworkTypes,proto3,enum=magma.lte.CoreNetworkType_CoreNetworkTypes" json:"forbidden_network_types,omitempty"`
}

func (x *CoreNetworkType) Reset() {
	*x = CoreNetworkType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_subscriberdb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoreNetworkType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoreNetworkType) ProtoMessage() {}

func (x *CoreNetworkType) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_subscriberdb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoreNetworkType.ProtoReflect.Descriptor instead.
func (*CoreNetworkType) Descriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{9}
}

func (x *CoreNetworkType) GetForbiddenNetworkTypes() []CoreNetworkType_CoreNetworkTypes {
	if x != nil {
		return x.ForbiddenNetworkTypes
	}
	return nil
}

type SubscriberUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Updated subscription data
	Data *SubscriberData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Specifies the fields to be updated
	// The mask can be individual subscription elements (Eg: 'lte.auth_key') or
	// entire subset in the SubscriberData (Eg: 'lte' to update all lte.* fields)
	Mask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *SubscriberUpdate) Reset() {
	*x = SubscriberUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_subscriberdb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriberUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriberUpdate) ProtoMessage() {}

func (x *SubscriberUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_subscriberdb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriberUpdate.ProtoReflect.Descriptor instead.
func (*SubscriberUpdate) Descriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{10}
}

func (x *SubscriberUpdate) GetData() *SubscriberData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SubscriberUpdate) GetMask() *field_mask.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

type CheckInSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// root_digest is the deterministic digest of the full set of config
	// objects stored on the client side.
	RootDigest *protos.Digest `protobuf:"bytes,1,opt,name=root_digest,json=rootDigest,proto3" json:"root_digest,omitempty"`
}

func (x *CheckInSyncRequest) Reset() {
	*x = CheckInSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_subscriberdb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckInSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckInSyncRequest) ProtoMessage() {}

func (x *CheckInSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_subscriberdb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckInSyncRequest.ProtoReflect.Descriptor instead.
func (*CheckInSyncRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{11}
}

func (x *CheckInSyncRequest) GetRootDigest() *protos.Digest {
	if x != nil {
		return x.RootDigest
	}
	return nil
}

type CheckInSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// in_sync is true if client's existing configs match those on the cloud.
	InSync bool `protobuf:"varint,1,opt,name=in_sync,json=inSync,proto3" json:"in_sync,omitempty"`
}

func (x *CheckInSyncResponse) Reset() {
	*x = CheckInSyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_subscriberdb_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckInSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckInSyncResponse) ProtoMessage() {}

func (x *CheckInSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_subscriberdb_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckInSyncResponse.ProtoReflect.Descriptor instead.
func (*CheckInSyncResponse) Descriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{12}
}

func (x *CheckInSyncResponse) GetInSync() bool {
	if x != nil {
		return x.InSync
	}
	return false
}

type SyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// leaf_digests contains a list of digests for each client-side config object,
	// ordered by their IDs.
	LeafDigests []*protos.LeafDigest `protobuf:"bytes,1,rep,name=leaf_digests,json=leafDigests,proto3" json:"leaf_digests,omitempty"`
}

func (x *SyncRequest) Reset() {
	*x = SyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_subscriberdb_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncRequest) ProtoMessage() {}

func (x *SyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_subscriberdb_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncRequest.ProtoReflect.Descriptor instead.
func (*SyncRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{13}
}

func (x *SyncRequest) GetLeafDigests() []*protos.LeafDigest {
	if x != nil {
		return x.LeafDigests
	}
	return nil
}

type SyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resync is true if the client-server data difference is too big and an
	// overall resync is needed. If true, all subscriber changesets will be empty.
	Resync bool `protobuf:"varint,1,opt,name=resync,proto3" json:"resync,omitempty"`
	// digests contains all digests for the network.
	Digests *protos.DigestTree `protobuf:"bytes,2,opt,name=digests,proto3" json:"digests,omitempty"`
	// changeset contains the client-server data difference.
	Changeset *protos.Changeset `protobuf:"bytes,3,opt,name=changeset,proto3" json:"changeset,omitempty"`
}

func (x *SyncResponse) Reset() {
	*x = SyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_subscriberdb_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncResponse) ProtoMessage() {}

func (x *SyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_subscriberdb_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncResponse.ProtoReflect.Descriptor instead.
func (*SyncResponse) Descriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{14}
}

func (x *SyncResponse) GetResync() bool {
	if x != nil {
		return x.Resync
	}
	return false
}

func (x *SyncResponse) GetDigests() *protos.DigestTree {
	if x != nil {
		return x.Digests
	}
	return nil
}

func (x *SyncResponse) GetChangeset() *protos.Changeset {
	if x != nil {
		return x.Changeset
	}
	return nil
}

type ListSubscribersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// page_size is the maximum number of entities returned per request.
	PageSize uint32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// page_token is a serialized entity page token for paginated loads.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListSubscribersRequest) Reset() {
	*x = ListSubscribersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_subscriberdb_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSubscribersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubscribersRequest) ProtoMessage() {}

func (x *ListSubscribersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_subscriberdb_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubscribersRequest.ProtoReflect.Descriptor instead.
func (*ListSubscribersRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{15}
}

func (x *ListSubscribersRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSubscribersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListSubscribersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscribers []*SubscriberData `protobuf:"bytes,1,rep,name=subscribers,proto3" json:"subscribers,omitempty"`
	// next_page_token is a serialized entity page token for subsequent paginated
	// loads.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// digests contains all digests for the network.
	Digests *protos.DigestTree `protobuf:"bytes,5,opt,name=digests,proto3" json:"digests,omitempty"`
}

func (x *ListSubscribersResponse) Reset() {
	*x = ListSubscribersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_subscriberdb_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSubscribersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubscribersResponse) ProtoMessage() {}

func (x *ListSubscribersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_subscriberdb_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubscribersResponse.ProtoReflect.Descriptor instead.
func (*ListSubscribersResponse) Descriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{16}
}

func (x *ListSubscribersResponse) GetSubscribers() []*SubscriberData {
	if x != nil {
		return x.Subscribers
	}
	return nil
}

func (x *ListSubscribersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListSubscribersResponse) GetDigests() *protos.DigestTree {
	if x != nil {
		return x.Digests
	}
	return nil
}

type SuciProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HPLMN Public Key Identifier
	HomeNetPublicKeyId uint32                            `protobuf:"varint,1,opt,name=home_net_public_key_id,json=homeNetPublicKeyId,proto3" json:"home_net_public_key_id,omitempty"`
	ProtectionScheme   SuciProfile_ECIESProtectionScheme `protobuf:"varint,2,opt,name=protection_scheme,json=protectionScheme,proto3,enum=magma.lte.SuciProfile_ECIESProtectionScheme" json:"protection_scheme,omitempty"`
	// HPLMN Public Key
	HomeNetPublicKey []byte `protobuf:"bytes,3,opt,name=home_net_public_key,json=homeNetPublicKey,proto3" json:"home_net_public_key,omitempty"`
	// HPLMN Private Key
	HomeNetPrivateKey []byte `protobuf:"bytes,4,opt,name=home_net_private_key,json=homeNetPrivateKey,proto3" json:"home_net_private_key,omitempty"`
}

func (x *SuciProfile) Reset() {
	*x = SuciProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_subscriberdb_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuciProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuciProfile) ProtoMessage() {}

func (x *SuciProfile) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_subscriberdb_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuciProfile.ProtoReflect.Descriptor instead.
func (*SuciProfile) Descriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{17}
}

func (x *SuciProfile) GetHomeNetPublicKeyId() uint32 {
	if x != nil {
		return x.HomeNetPublicKeyId
	}
	return 0
}

func (x *SuciProfile) GetProtectionScheme() SuciProfile_ECIESProtectionScheme {
	if x != nil {
		return x.ProtectionScheme
	}
	return SuciProfile_ProfileA
}

func (x *SuciProfile) GetHomeNetPublicKey() []byte {
	if x != nil {
		return x.HomeNetPublicKey
	}
	return nil
}

func (x *SuciProfile) GetHomeNetPrivateKey() []byte {
	if x != nil {
		return x.HomeNetPrivateKey
	}
	return nil
}

type M5GSUCIRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//Home network public key identifier
	UePubkeyIdentifier uint32 `protobuf:"varint,1,opt,name=ue_pubkey_identifier,json=uePubkeyIdentifier,proto3" json:"ue_pubkey_identifier,omitempty"`
	//UE public key
	UePubkey []byte `protobuf:"bytes,2,opt,name=ue_pubkey,json=uePubkey,proto3" json:"ue_pubkey,omitempty"`
	//UE ciphertext
	UeCiphertext []byte `protobuf:"bytes,3,opt,name=ue_ciphertext,json=ueCiphertext,proto3" json:"ue_ciphertext,omitempty"`
	//Protection scheme output
	UeEncryptedMac []byte `protobuf:"bytes,4,opt,name=ue_encrypted_mac,json=ueEncryptedMac,proto3" json:"ue_encrypted_mac,omitempty"`
}

func (x *M5GSUCIRegistrationRequest) Reset() {
	*x = M5GSUCIRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_subscriberdb_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M5GSUCIRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M5GSUCIRegistrationRequest) ProtoMessage() {}

func (x *M5GSUCIRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_subscriberdb_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M5GSUCIRegistrationRequest.ProtoReflect.Descriptor instead.
func (*M5GSUCIRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{18}
}

func (x *M5GSUCIRegistrationRequest) GetUePubkeyIdentifier() uint32 {
	if x != nil {
		return x.UePubkeyIdentifier
	}
	return 0
}

func (x *M5GSUCIRegistrationRequest) GetUePubkey() []byte {
	if x != nil {
		return x.UePubkey
	}
	return nil
}

func (x *M5GSUCIRegistrationRequest) GetUeCiphertext() []byte {
	if x != nil {
		return x.UeCiphertext
	}
	return nil
}

func (x *M5GSUCIRegistrationRequest) GetUeEncryptedMac() []byte {
	if x != nil {
		return x.UeEncryptedMac
	}
	return nil
}

type M5GSUCIRegistrationAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//UE de concealed msin
	UeMsinRecv []byte `protobuf:"bytes,1,opt,name=ue_msin_recv,json=ueMsinRecv,proto3" json:"ue_msin_recv,omitempty"`
}

func (x *M5GSUCIRegistrationAnswer) Reset() {
	*x = M5GSUCIRegistrationAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_subscriberdb_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M5GSUCIRegistrationAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M5GSUCIRegistrationAnswer) ProtoMessage() {}

func (x *M5GSUCIRegistrationAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_subscriberdb_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M5GSUCIRegistrationAnswer.ProtoReflect.Descriptor instead.
func (*M5GSUCIRegistrationAnswer) Descriptor() ([]byte, []int) {
	return file_lte_protos_subscriberdb_proto_rawDescGZIP(), []int{19}
}

func (x *M5GSUCIRegistrationAnswer) GetUeMsinRecv() []byte {
	if x != nil {
		return x.UeMsinRecv
	}
	return nil
}

var File_lte_protos_subscriberdb_proto protoreflect.FileDescriptor

var file_lte_protos_subscriberdb_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x09, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x1a, 0x19, 0x6f, 0x72, 0x63, 0x38,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x14, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x61, 0x70, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x66, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x44, 0x2e,
	0x49, 0x44, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x12, 0x0a, 0x06,
	0x49, 0x44, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4d, 0x53, 0x49, 0x10, 0x00,
	0x22, 0x3e, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x44,
	0x53, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x44, 0x52, 0x04, 0x73, 0x69, 0x64, 0x73,
	0x22, 0x4e, 0x0a, 0x0f, 0x53, 0x75, 0x63, 0x69, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x73, 0x75, 0x63, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x63, 0x69, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x63, 0x69, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x22, 0xb7, 0x02, 0x0a, 0x0f, 0x47, 0x53, 0x4d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e,
	0x47, 0x53, 0x4d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x47, 0x53, 0x4d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x47, 0x53, 0x4d, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x53, 0x4d, 0x41, 0x75,
	0x74, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x41, 0x6c, 0x67, 0x6f,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x22, 0x30, 0x0a, 0x14,
	0x47, 0x53, 0x4d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x22, 0x2a,
	0x0a, 0x0b, 0x47, 0x53, 0x4d, 0x41, 0x75, 0x74, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x12, 0x1b, 0x0a,
	0x17, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x55, 0x54,
	0x48, 0x5f, 0x54, 0x55, 0x50, 0x4c, 0x45, 0x53, 0x10, 0x00, 0x22, 0xff, 0x02, 0x0a, 0x0f, 0x4c,
	0x54, 0x45, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x4c, 0x54, 0x45, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x54, 0x45, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x61, 0x6c,
	0x67, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x4c, 0x54, 0x45, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x54, 0x45, 0x41, 0x75, 0x74, 0x68, 0x41, 0x6c, 0x67, 0x6f,
	0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x75,
	0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6f, 0x70,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x4f, 0x70, 0x63,
	0x12, 0x2e, 0x0a, 0x13, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x30, 0x0a,
	0x14, 0x4c, 0x54, 0x45, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x22,
	0x1b, 0x0a, 0x0b, 0x4c, 0x54, 0x45, 0x41, 0x75, 0x74, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x12, 0x0c,
	0x0a, 0x08, 0x4d, 0x49, 0x4c, 0x45, 0x4e, 0x41, 0x47, 0x45, 0x10, 0x00, 0x22, 0xaa, 0x01, 0x0a,
	0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x29, 0x0a, 0x11, 0x6c, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6c, 0x74, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x71, 0x12, 0x2f, 0x0a, 0x14, 0x74,
	0x67, 0x70, 0x70, 0x5f, 0x61, 0x61, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x67, 0x70, 0x70, 0x41,
	0x61, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x1a,
	0x74, 0x67, 0x70, 0x70, 0x5f, 0x61, 0x61, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x17, 0x74, 0x67, 0x70, 0x70, 0x41, 0x61, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x22, 0x5a, 0x0a, 0x13, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x41, 0x50, 0x4e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x61, 0x70, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x49, 0x70, 0x22, 0xa2, 0x05, 0x0a, 0x12, 0x4e, 0x6f, 0x6e, 0x33, 0x47, 0x50,
	0x50, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x73,
	0x69, 0x73, 0x64, 0x6e, 0x12, 0x5a, 0x0a, 0x12, 0x6e, 0x6f, 0x6e, 0x5f, 0x33, 0x67, 0x70, 0x70,
	0x5f, 0x69, 0x70, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x4e, 0x6f, 0x6e,
	0x33, 0x47, 0x50, 0x50, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x4e, 0x6f, 0x6e, 0x33, 0x47, 0x50, 0x50, 0x49, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x0f, 0x6e, 0x6f, 0x6e, 0x33, 0x67, 0x70, 0x70, 0x49, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x64, 0x0a, 0x16, 0x6e, 0x6f, 0x6e, 0x5f, 0x33, 0x67, 0x70, 0x70, 0x5f, 0x69, 0x70, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x70, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x30, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x4e, 0x6f, 0x6e,
	0x33, 0x47, 0x50, 0x50, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x4e, 0x6f, 0x6e, 0x33, 0x47, 0x50, 0x50, 0x49, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41,
	0x50, 0x4e, 0x52, 0x12, 0x6e, 0x6f, 0x6e, 0x33, 0x67, 0x70, 0x70, 0x49, 0x70, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x41, 0x70, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x61, 0x6d, 0x62, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x52, 0x04, 0x61, 0x6d, 0x62, 0x72, 0x12,
	0x3a, 0x0a, 0x0a, 0x61, 0x70, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e,
	0x41, 0x50, 0x4e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x61, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x0d, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x15, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x41, 0x50, 0x4e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x41, 0x70,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x56, 0x0a, 0x0f, 0x4e, 0x6f, 0x6e, 0x33, 0x47,
	0x50, 0x50, 0x49, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x4f,
	0x4e, 0x5f, 0x33, 0x47, 0x50, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a,
	0x1c, 0x4e, 0x4f, 0x4e, 0x5f, 0x33, 0x47, 0x50, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52,
	0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x52, 0x52, 0x45, 0x44, 0x10, 0x01, 0x22,
	0x49, 0x0a, 0x12, 0x4e, 0x6f, 0x6e, 0x33, 0x47, 0x50, 0x50, 0x49, 0x50, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x41, 0x50, 0x4e, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x4f, 0x4e, 0x5f, 0x33, 0x47, 0x50,
	0x50, 0x5f, 0x41, 0x50, 0x4e, 0x53, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x4e, 0x4f, 0x4e, 0x5f, 0x33, 0x47, 0x50, 0x50, 0x5f, 0x41, 0x50, 0x4e, 0x53,
	0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x98, 0x03, 0x0a, 0x0e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a,
	0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x49, 0x44, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x03, 0x67, 0x73, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x47, 0x53, 0x4d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x03, 0x67, 0x73, 0x6d, 0x12, 0x2c, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e,
	0x4c, 0x54, 0x45, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x03, 0x6c, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44,
	0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x38,
	0x0a, 0x08, 0x6e, 0x6f, 0x6e, 0x5f, 0x33, 0x67, 0x70, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x4e, 0x6f, 0x6e,
	0x33, 0x47, 0x50, 0x50, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x07, 0x6e, 0x6f, 0x6e, 0x33, 0x67, 0x70, 0x70, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0xa2, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x72, 0x65, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x63, 0x0a, 0x17, 0x66, 0x6f, 0x72,
	0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x15, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x2a,
	0x0a, 0x10, 0x43, 0x6f, 0x72, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x54, 0x5f, 0x45, 0x50, 0x43, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x4e, 0x54, 0x5f, 0x35, 0x47, 0x43, 0x10, 0x01, 0x22, 0x71, 0x0a, 0x10, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2d,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a,
	0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x4a, 0x0a,
	0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x72,
	0x6f, 0x6f, 0x74, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x2e, 0x0a, 0x13, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x22, 0x49, 0x0a, 0x0b, 0x53, 0x79, 0x6e,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x66,
	0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4c, 0x65, 0x61,
	0x66, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x66, 0x44, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x0c, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x31, 0x0a,
	0x07, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x44, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x54, 0x72, 0x65, 0x65, 0x52, 0x07, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73,
	0x12, 0x34, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38,
	0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x22, 0x54, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xbd, 0x01, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x31, 0x0a,
	0x07, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x44, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x54, 0x72, 0x65, 0x65, 0x52, 0x07, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73,
	0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0xb1, 0x02, 0x0a,
	0x0b, 0x53, 0x75, 0x63, 0x69, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x16,
	0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x68, 0x6f,
	0x6d, 0x65, 0x4e, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x59, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x63, 0x69, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x45, 0x43, 0x49, 0x45, 0x53, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x68,
	0x6f, 0x6d, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x68, 0x6f, 0x6d, 0x65, 0x4e, 0x65,
	0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x14, 0x68, 0x6f,
	0x6d, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x68, 0x6f, 0x6d, 0x65, 0x4e, 0x65,
	0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x33, 0x0a, 0x15, 0x45,
	0x43, 0x49, 0x45, 0x53, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x10, 0x01,
	0x22, 0xba, 0x01, 0x0a, 0x1a, 0x4d, 0x35, 0x47, 0x53, 0x55, 0x43, 0x49, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x14, 0x75, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x75,
	0x65, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x75, 0x65, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x23,
	0x0a, 0x0d, 0x75, 0x65, 0x5f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x75, 0x65, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x75,
	0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x63, 0x22, 0x3d, 0x0a,
	0x19, 0x4d, 0x35, 0x47, 0x53, 0x55, 0x43, 0x49, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x65,
	0x5f, 0x6d, 0x73, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x75, 0x65, 0x4d, 0x73, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x76, 0x2a, 0x46, 0x0a, 0x17,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x52, 0x50, 0x44, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x49, 0x4d, 0x41, 0x58, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x57, 0x4c, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e,
	0x45, 0x54, 0x10, 0x03, 0x32, 0xe6, 0x02, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x44, 0x42, 0x12, 0x3f, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e,
	0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x49, 0x44, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38,
	0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x49,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x44, 0x1a, 0x19, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0f, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x12, 0x11, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a,
	0x1a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x44, 0x53, 0x65, 0x74, 0x22, 0x00, 0x32, 0xbf, 0x02,
	0x0a, 0x11, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x44, 0x42, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x12, 0x4e, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x53, 0x79,
	0x6e, 0x63, 0x12, 0x1d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x49, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x04, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x16, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a,
	0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x21, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x75, 0x63, 0x69, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x11,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69,
	0x64, 0x1a, 0x1a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75,
	0x63, 0x69, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x32,
	0xd4, 0x01, 0x0a, 0x0d, 0x53, 0x75, 0x63, 0x69, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44,
	0x42, 0x12, 0x3d, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x53, 0x75, 0x63, 0x69, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x16, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e,
	0x53, 0x75, 0x63, 0x69, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x1a, 0x11, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00,
	0x12, 0x40, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x63, 0x69, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x53, 0x75, 0x63, 0x69, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x1a, 0x11, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64,
	0x22, 0x00, 0x12, 0x42, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x63, 0x69, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72,
	0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x1a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x63, 0x69, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x32, 0x86, 0x01, 0x0a, 0x13, 0x4d, 0x35, 0x47, 0x53, 0x55,
	0x43, 0x49, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6f,
	0x0a, 0x1e, 0x4d, 0x35, 0x47, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4d, 0x73, 0x69, 0x6e,
	0x53, 0x55, 0x43, 0x49, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x4d, 0x35, 0x47,
	0x53, 0x55, 0x43, 0x49, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x4d, 0x35, 0x47, 0x53, 0x55, 0x43, 0x49, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x00, 0x42,
	0x1b, 0x5a, 0x19, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f, 0x6c, 0x74, 0x65, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lte_protos_subscriberdb_proto_rawDescOnce sync.Once
	file_lte_protos_subscriberdb_proto_rawDescData = file_lte_protos_subscriberdb_proto_rawDesc
)

func file_lte_protos_subscriberdb_proto_rawDescGZIP() []byte {
	file_lte_protos_subscriberdb_proto_rawDescOnce.Do(func() {
		file_lte_protos_subscriberdb_proto_rawDescData = protoimpl.X.CompressGZIP(file_lte_protos_subscriberdb_proto_rawDescData)
	})
	return file_lte_protos_subscriberdb_proto_rawDescData
}

var file_lte_protos_subscriberdb_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_lte_protos_subscriberdb_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_lte_protos_subscriberdb_proto_goTypes = []interface{}{
	(AccessNetworkIdentifier)(0),               // 0: magma.lte.AccessNetworkIdentifier
	(SubscriberID_IDType)(0),                   // 1: magma.lte.SubscriberID.IDType
	(GSMSubscription_GSMSubscriptionState)(0),  // 2: magma.lte.GSMSubscription.GSMSubscriptionState
	(GSMSubscription_GSMAuthAlgo)(0),           // 3: magma.lte.GSMSubscription.GSMAuthAlgo
	(LTESubscription_LTESubscriptionState)(0),  // 4: magma.lte.LTESubscription.LTESubscriptionState
	(LTESubscription_LTEAuthAlgo)(0),           // 5: magma.lte.LTESubscription.LTEAuthAlgo
	(Non3GPPUserProfile_Non3GPPIPAccess)(0),    // 6: magma.lte.Non3GPPUserProfile.Non3GPPIPAccess
	(Non3GPPUserProfile_Non3GPPIPAccessAPN)(0), // 7: magma.lte.Non3GPPUserProfile.Non3GPPIPAccessAPN
	(CoreNetworkType_CoreNetworkTypes)(0),      // 8: magma.lte.CoreNetworkType.CoreNetworkTypes
	(SuciProfile_ECIESProtectionScheme)(0),     // 9: magma.lte.SuciProfile.ECIESProtectionScheme
	(*SubscriberID)(nil),                       // 10: magma.lte.SubscriberID
	(*SubscriberIDSet)(nil),                    // 11: magma.lte.SubscriberIDSet
	(*SuciProfileList)(nil),                    // 12: magma.lte.SuciProfileList
	(*GSMSubscription)(nil),                    // 13: magma.lte.GSMSubscription
	(*LTESubscription)(nil),                    // 14: magma.lte.LTESubscription
	(*SubscriberState)(nil),                    // 15: magma.lte.SubscriberState
	(*SubscriberAPNConfig)(nil),                // 16: magma.lte.SubscriberAPNConfig
	(*Non3GPPUserProfile)(nil),                 // 17: magma.lte.Non3GPPUserProfile
	(*SubscriberData)(nil),                     // 18: magma.lte.SubscriberData
	(*CoreNetworkType)(nil),                    // 19: magma.lte.CoreNetworkType
	(*SubscriberUpdate)(nil),                   // 20: magma.lte.SubscriberUpdate
	(*CheckInSyncRequest)(nil),                 // 21: magma.lte.CheckInSyncRequest
	(*CheckInSyncResponse)(nil),                // 22: magma.lte.CheckInSyncResponse
	(*SyncRequest)(nil),                        // 23: magma.lte.SyncRequest
	(*SyncResponse)(nil),                       // 24: magma.lte.SyncResponse
	(*ListSubscribersRequest)(nil),             // 25: magma.lte.ListSubscribersRequest
	(*ListSubscribersResponse)(nil),            // 26: magma.lte.ListSubscribersResponse
	(*SuciProfile)(nil),                        // 27: magma.lte.SuciProfile
	(*M5GSUCIRegistrationRequest)(nil),         // 28: magma.lte.M5GSUCIRegistrationRequest
	(*M5GSUCIRegistrationAnswer)(nil),          // 29: magma.lte.M5GSUCIRegistrationAnswer
	(*AggregatedMaximumBitrate)(nil),           // 30: magma.lte.AggregatedMaximumBitrate
	(*APNConfiguration)(nil),                   // 31: magma.lte.APNConfiguration
	(*protos.NetworkID)(nil),                   // 32: magma.orc8r.NetworkID
	(*field_mask.FieldMask)(nil),               // 33: google.protobuf.FieldMask
	(*protos.Digest)(nil),                      // 34: magma.orc8r.Digest
	(*protos.LeafDigest)(nil),                  // 35: magma.orc8r.LeafDigest
	(*protos.DigestTree)(nil),                  // 36: magma.orc8r.DigestTree
	(*protos.Changeset)(nil),                   // 37: magma.orc8r.Changeset
	(*protos.Void)(nil),                        // 38: magma.orc8r.Void
}
var file_lte_protos_subscriberdb_proto_depIdxs = []int32{
	1,  // 0: magma.lte.SubscriberID.type:type_name -> magma.lte.SubscriberID.IDType
	10, // 1: magma.lte.SubscriberIDSet.sids:type_name -> magma.lte.SubscriberID
	27, // 2: magma.lte.SuciProfileList.suci_profiles:type_name -> magma.lte.SuciProfile
	2,  // 3: magma.lte.GSMSubscription.state:type_name -> magma.lte.GSMSubscription.GSMSubscriptionState
	3,  // 4: magma.lte.GSMSubscription.auth_algo:type_name -> magma.lte.GSMSubscription.GSMAuthAlgo
	4,  // 5: magma.lte.LTESubscription.state:type_name -> magma.lte.LTESubscription.LTESubscriptionState
	5,  // 6: magma.lte.LTESubscription.auth_algo:type_name -> magma.lte.LTESubscription.LTEAuthAlgo
	6,  // 7: magma.lte.Non3GPPUserProfile.non_3gpp_ip_access:type_name -> magma.lte.Non3GPPUserProfile.Non3GPPIPAccess
	7,  // 8: magma.lte.Non3GPPUserProfile.non_3gpp_ip_access_apn:type_name -> magma.lte.Non3GPPUserProfile.Non3GPPIPAccessAPN
	30, // 9: magma.lte.Non3GPPUserProfile.ambr:type_name -> magma.lte.AggregatedMaximumBitrate
	31, // 10: magma.lte.Non3GPPUserProfile.apn_config:type_name -> magma.lte.APNConfiguration
	0,  // 11: magma.lte.Non3GPPUserProfile.access_net_id:type_name -> magma.lte.AccessNetworkIdentifier
	16, // 12: magma.lte.Non3GPPUserProfile.subscriber_apn_config:type_name -> magma.lte.SubscriberAPNConfig
	10, // 13: magma.lte.SubscriberData.sid:type_name -> magma.lte.SubscriberID
	13, // 14: magma.lte.SubscriberData.gsm:type_name -> magma.lte.GSMSubscription
	14, // 15: magma.lte.SubscriberData.lte:type_name -> magma.lte.LTESubscription
	32, // 16: magma.lte.SubscriberData.network_id:type_name -> magma.orc8r.NetworkID
	15, // 17: magma.lte.SubscriberData.state:type_name -> magma.lte.SubscriberState
	17, // 18: magma.lte.SubscriberData.non_3gpp:type_name -> magma.lte.Non3GPPUserProfile
	19, // 19: magma.lte.SubscriberData.sub_network:type_name -> magma.lte.CoreNetworkType
	8,  // 20: magma.lte.CoreNetworkType.forbidden_network_types:type_name -> magma.lte.CoreNetworkType.CoreNetworkTypes
	18, // 21: magma.lte.SubscriberUpdate.data:type_name -> magma.lte.SubscriberData
	33, // 22: magma.lte.SubscriberUpdate.mask:type_name -> google.protobuf.FieldMask
	34, // 23: magma.lte.CheckInSyncRequest.root_digest:type_name -> magma.orc8r.Digest
	35, // 24: magma.lte.SyncRequest.leaf_digests:type_name -> magma.orc8r.LeafDigest
	36, // 25: magma.lte.SyncResponse.digests:type_name -> magma.orc8r.DigestTree
	37, // 26: magma.lte.SyncResponse.changeset:type_name -> magma.orc8r.Changeset
	18, // 27: magma.lte.ListSubscribersResponse.subscribers:type_name -> magma.lte.SubscriberData
	36, // 28: magma.lte.ListSubscribersResponse.digests:type_name -> magma.orc8r.DigestTree
	9,  // 29: magma.lte.SuciProfile.protection_scheme:type_name -> magma.lte.SuciProfile.ECIESProtectionScheme
	18, // 30: magma.lte.SubscriberDB.AddSubscriber:input_type -> magma.lte.SubscriberData
	10, // 31: magma.lte.SubscriberDB.DeleteSubscriber:input_type -> magma.lte.SubscriberID
	20, // 32: magma.lte.SubscriberDB.UpdateSubscriber:input_type -> magma.lte.SubscriberUpdate
	10, // 33: magma.lte.SubscriberDB.GetSubscriberData:input_type -> magma.lte.SubscriberID
	38, // 34: magma.lte.SubscriberDB.ListSubscribers:input_type -> magma.orc8r.Void
	21, // 35: magma.lte.SubscriberDBCloud.CheckInSync:input_type -> magma.lte.CheckInSyncRequest
	23, // 36: magma.lte.SubscriberDBCloud.Sync:input_type -> magma.lte.SyncRequest
	25, // 37: magma.lte.SubscriberDBCloud.ListSubscribers:input_type -> magma.lte.ListSubscribersRequest
	38, // 38: magma.lte.SubscriberDBCloud.ListSuciProfiles:input_type -> magma.orc8r.Void
	27, // 39: magma.lte.SuciProfileDB.AddSuciProfile:input_type -> magma.lte.SuciProfile
	27, // 40: magma.lte.SuciProfileDB.DeleteSuciProfile:input_type -> magma.lte.SuciProfile
	38, // 41: magma.lte.SuciProfileDB.ListSuciProfile:input_type -> magma.orc8r.Void
	28, // 42: magma.lte.M5GSUCIRegistration.M5GDecryptMsinSUCIRegistration:input_type -> magma.lte.M5GSUCIRegistrationRequest
	38, // 43: magma.lte.SubscriberDB.AddSubscriber:output_type -> magma.orc8r.Void
	38, // 44: magma.lte.SubscriberDB.DeleteSubscriber:output_type -> magma.orc8r.Void
	38, // 45: magma.lte.SubscriberDB.UpdateSubscriber:output_type -> magma.orc8r.Void
	18, // 46: magma.lte.SubscriberDB.GetSubscriberData:output_type -> magma.lte.SubscriberData
	11, // 47: magma.lte.SubscriberDB.ListSubscribers:output_type -> magma.lte.SubscriberIDSet
	22, // 48: magma.lte.SubscriberDBCloud.CheckInSync:output_type -> magma.lte.CheckInSyncResponse
	24, // 49: magma.lte.SubscriberDBCloud.Sync:output_type -> magma.lte.SyncResponse
	26, // 50: magma.lte.SubscriberDBCloud.ListSubscribers:output_type -> magma.lte.ListSubscribersResponse
	12, // 51: magma.lte.SubscriberDBCloud.ListSuciProfiles:output_type -> magma.lte.SuciProfileList
	38, // 52: magma.lte.SuciProfileDB.AddSuciProfile:output_type -> magma.orc8r.Void
	38, // 53: magma.lte.SuciProfileDB.DeleteSuciProfile:output_type -> magma.orc8r.Void
	12, // 54: magma.lte.SuciProfileDB.ListSuciProfile:output_type -> magma.lte.SuciProfileList
	29, // 55: magma.lte.M5GSUCIRegistration.M5GDecryptMsinSUCIRegistration:output_type -> magma.lte.M5GSUCIRegistrationAnswer
	43, // [43:56] is the sub-list for method output_type
	30, // [30:43] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_lte_protos_subscriberdb_proto_init() }
func file_lte_protos_subscriberdb_proto_init() {
	if File_lte_protos_subscriberdb_proto != nil {
		return
	}
	file_lte_protos_apn_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_lte_protos_subscriberdb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriberID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_subscriberdb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriberIDSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_subscriberdb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuciProfileList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_subscriberdb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GSMSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_subscriberdb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LTESubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_subscriberdb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriberState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_subscriberdb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriberAPNConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_subscriberdb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Non3GPPUserProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_subscriberdb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriberData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_subscriberdb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoreNetworkType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_subscriberdb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriberUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_subscriberdb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckInSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_subscriberdb_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckInSyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_subscriberdb_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_subscriberdb_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_subscriberdb_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSubscribersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_subscriberdb_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSubscribersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_subscriberdb_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuciProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_subscriberdb_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*M5GSUCIRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_subscriberdb_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*M5GSUCIRegistrationAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lte_protos_subscriberdb_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_lte_protos_subscriberdb_proto_goTypes,
		DependencyIndexes: file_lte_protos_subscriberdb_proto_depIdxs,
		EnumInfos:         file_lte_protos_subscriberdb_proto_enumTypes,
		MessageInfos:      file_lte_protos_subscriberdb_proto_msgTypes,
	}.Build()
	File_lte_protos_subscriberdb_proto = out.File
	file_lte_protos_subscriberdb_proto_rawDesc = nil
	file_lte_protos_subscriberdb_proto_goTypes = nil
	file_lte_protos_subscriberdb_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SubscriberDBClient is the client API for SubscriberDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SubscriberDBClient interface {
	// Adds a new subscriber to the store.
	// Throws ALREADY_EXISTS if the subscriber already exists.
	//
	AddSubscriber(ctx context.Context, in *SubscriberData, opts ...grpc.CallOption) (*protos.Void, error)
	// Deletes an existing subscriber.
	// If the subscriber is not already present, this request is ignored.
	//
	DeleteSubscriber(ctx context.Context, in *SubscriberID, opts ...grpc.CallOption) (*protos.Void, error)
	// Updates an existing subscriber.
	// Throws NOT_FOUND if the subscriber is missing.
	//
	UpdateSubscriber(ctx context.Context, in *SubscriberUpdate, opts ...grpc.CallOption) (*protos.Void, error)
	// Returns the SubscriberData for a subscriber.
	// Throws NOT_FOUND if the subscriber is missing.
	//
	GetSubscriberData(ctx context.Context, in *SubscriberID, opts ...grpc.CallOption) (*SubscriberData, error)
	// List the subscribers in the store.
	//
	ListSubscribers(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*SubscriberIDSet, error)
}

type subscriberDBClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriberDBClient(cc grpc.ClientConnInterface) SubscriberDBClient {
	return &subscriberDBClient{cc}
}

func (c *subscriberDBClient) AddSubscriber(ctx context.Context, in *SubscriberData, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDB/AddSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberDBClient) DeleteSubscriber(ctx context.Context, in *SubscriberID, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDB/DeleteSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberDBClient) UpdateSubscriber(ctx context.Context, in *SubscriberUpdate, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDB/UpdateSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberDBClient) GetSubscriberData(ctx context.Context, in *SubscriberID, opts ...grpc.CallOption) (*SubscriberData, error) {
	out := new(SubscriberData)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDB/GetSubscriberData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberDBClient) ListSubscribers(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*SubscriberIDSet, error) {
	out := new(SubscriberIDSet)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDB/ListSubscribers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriberDBServer is the server API for SubscriberDB service.
type SubscriberDBServer interface {
	// Adds a new subscriber to the store.
	// Throws ALREADY_EXISTS if the subscriber already exists.
	//
	AddSubscriber(context.Context, *SubscriberData) (*protos.Void, error)
	// Deletes an existing subscriber.
	// If the subscriber is not already present, this request is ignored.
	//
	DeleteSubscriber(context.Context, *SubscriberID) (*protos.Void, error)
	// Updates an existing subscriber.
	// Throws NOT_FOUND if the subscriber is missing.
	//
	UpdateSubscriber(context.Context, *SubscriberUpdate) (*protos.Void, error)
	// Returns the SubscriberData for a subscriber.
	// Throws NOT_FOUND if the subscriber is missing.
	//
	GetSubscriberData(context.Context, *SubscriberID) (*SubscriberData, error)
	// List the subscribers in the store.
	//
	ListSubscribers(context.Context, *protos.Void) (*SubscriberIDSet, error)
}

// UnimplementedSubscriberDBServer can be embedded to have forward compatible implementations.
type UnimplementedSubscriberDBServer struct {
}

func (*UnimplementedSubscriberDBServer) AddSubscriber(context.Context, *SubscriberData) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSubscriber not implemented")
}
func (*UnimplementedSubscriberDBServer) DeleteSubscriber(context.Context, *SubscriberID) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubscriber not implemented")
}
func (*UnimplementedSubscriberDBServer) UpdateSubscriber(context.Context, *SubscriberUpdate) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscriber not implemented")
}
func (*UnimplementedSubscriberDBServer) GetSubscriberData(context.Context, *SubscriberID) (*SubscriberData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriberData not implemented")
}
func (*UnimplementedSubscriberDBServer) ListSubscribers(context.Context, *protos.Void) (*SubscriberIDSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscribers not implemented")
}

func RegisterSubscriberDBServer(s *grpc.Server, srv SubscriberDBServer) {
	s.RegisterService(&_SubscriberDB_serviceDesc, srv)
}

func _SubscriberDB_AddSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriberData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBServer).AddSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDB/AddSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBServer).AddSubscriber(ctx, req.(*SubscriberData))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberDB_DeleteSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriberID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBServer).DeleteSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDB/DeleteSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBServer).DeleteSubscriber(ctx, req.(*SubscriberID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberDB_UpdateSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriberUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBServer).UpdateSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDB/UpdateSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBServer).UpdateSubscriber(ctx, req.(*SubscriberUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberDB_GetSubscriberData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriberID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBServer).GetSubscriberData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDB/GetSubscriberData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBServer).GetSubscriberData(ctx, req.(*SubscriberID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberDB_ListSubscribers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBServer).ListSubscribers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDB/ListSubscribers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBServer).ListSubscribers(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubscriberDB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.SubscriberDB",
	HandlerType: (*SubscriberDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSubscriber",
			Handler:    _SubscriberDB_AddSubscriber_Handler,
		},
		{
			MethodName: "DeleteSubscriber",
			Handler:    _SubscriberDB_DeleteSubscriber_Handler,
		},
		{
			MethodName: "UpdateSubscriber",
			Handler:    _SubscriberDB_UpdateSubscriber_Handler,
		},
		{
			MethodName: "GetSubscriberData",
			Handler:    _SubscriberDB_GetSubscriberData_Handler,
		},
		{
			MethodName: "ListSubscribers",
			Handler:    _SubscriberDB_ListSubscribers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/subscriberdb.proto",
}

// SubscriberDBCloudClient is the client API for SubscriberDBCloud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SubscriberDBCloudClient interface {
	// CheckSubscribersInSync checks whether the client subscribers flat digest
	// is up-to-date.
	CheckInSync(ctx context.Context, in *CheckInSyncRequest, opts ...grpc.CallOption) (*CheckInSyncResponse, error)
	// SyncSubscribers returns the changeset of subscribers between client and
	// cloud if the set is small; if the set is large, returns signal to resync.
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
	// ListSubscribers lists pages of subscribers stored.
	ListSubscribers(ctx context.Context, in *ListSubscribersRequest, opts ...grpc.CallOption) (*ListSubscribersResponse, error)
	// List SuciProfiles per Network
	ListSuciProfiles(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*SuciProfileList, error)
}

type subscriberDBCloudClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriberDBCloudClient(cc grpc.ClientConnInterface) SubscriberDBCloudClient {
	return &subscriberDBCloudClient{cc}
}

func (c *subscriberDBCloudClient) CheckInSync(ctx context.Context, in *CheckInSyncRequest, opts ...grpc.CallOption) (*CheckInSyncResponse, error) {
	out := new(CheckInSyncResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDBCloud/CheckInSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberDBCloudClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDBCloud/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberDBCloudClient) ListSubscribers(ctx context.Context, in *ListSubscribersRequest, opts ...grpc.CallOption) (*ListSubscribersResponse, error) {
	out := new(ListSubscribersResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDBCloud/ListSubscribers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberDBCloudClient) ListSuciProfiles(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*SuciProfileList, error) {
	out := new(SuciProfileList)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDBCloud/ListSuciProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriberDBCloudServer is the server API for SubscriberDBCloud service.
type SubscriberDBCloudServer interface {
	// CheckSubscribersInSync checks whether the client subscribers flat digest
	// is up-to-date.
	CheckInSync(context.Context, *CheckInSyncRequest) (*CheckInSyncResponse, error)
	// SyncSubscribers returns the changeset of subscribers between client and
	// cloud if the set is small; if the set is large, returns signal to resync.
	Sync(context.Context, *SyncRequest) (*SyncResponse, error)
	// ListSubscribers lists pages of subscribers stored.
	ListSubscribers(context.Context, *ListSubscribersRequest) (*ListSubscribersResponse, error)
	// List SuciProfiles per Network
	ListSuciProfiles(context.Context, *protos.Void) (*SuciProfileList, error)
}

// UnimplementedSubscriberDBCloudServer can be embedded to have forward compatible implementations.
type UnimplementedSubscriberDBCloudServer struct {
}

func (*UnimplementedSubscriberDBCloudServer) CheckInSync(context.Context, *CheckInSyncRequest) (*CheckInSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckInSync not implemented")
}
func (*UnimplementedSubscriberDBCloudServer) Sync(context.Context, *SyncRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (*UnimplementedSubscriberDBCloudServer) ListSubscribers(context.Context, *ListSubscribersRequest) (*ListSubscribersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscribers not implemented")
}
func (*UnimplementedSubscriberDBCloudServer) ListSuciProfiles(context.Context, *protos.Void) (*SuciProfileList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSuciProfiles not implemented")
}

func RegisterSubscriberDBCloudServer(s *grpc.Server, srv SubscriberDBCloudServer) {
	s.RegisterService(&_SubscriberDBCloud_serviceDesc, srv)
}

func _SubscriberDBCloud_CheckInSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckInSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBCloudServer).CheckInSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDBCloud/CheckInSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBCloudServer).CheckInSync(ctx, req.(*CheckInSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberDBCloud_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBCloudServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDBCloud/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBCloudServer).Sync(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberDBCloud_ListSubscribers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubscribersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBCloudServer).ListSubscribers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDBCloud/ListSubscribers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBCloudServer).ListSubscribers(ctx, req.(*ListSubscribersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberDBCloud_ListSuciProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBCloudServer).ListSuciProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDBCloud/ListSuciProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBCloudServer).ListSuciProfiles(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubscriberDBCloud_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.SubscriberDBCloud",
	HandlerType: (*SubscriberDBCloudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckInSync",
			Handler:    _SubscriberDBCloud_CheckInSync_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _SubscriberDBCloud_Sync_Handler,
		},
		{
			MethodName: "ListSubscribers",
			Handler:    _SubscriberDBCloud_ListSubscribers_Handler,
		},
		{
			MethodName: "ListSuciProfiles",
			Handler:    _SubscriberDBCloud_ListSuciProfiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/subscriberdb.proto",
}

// SuciProfileDBClient is the client API for SuciProfileDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SuciProfileDBClient interface {
	// Adds a new suciprofile to the store.
	// Throws ALREADY_EXISTS if the suciprofile already exists.
	AddSuciProfile(ctx context.Context, in *SuciProfile, opts ...grpc.CallOption) (*protos.Void, error)
	// Deletes an existing suciprofile.
	// If the suciprofile is not already present, this request is ignored.
	DeleteSuciProfile(ctx context.Context, in *SuciProfile, opts ...grpc.CallOption) (*protos.Void, error)
	// List the suciprofile in the store.
	ListSuciProfile(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*SuciProfileList, error)
}

type suciProfileDBClient struct {
	cc grpc.ClientConnInterface
}

func NewSuciProfileDBClient(cc grpc.ClientConnInterface) SuciProfileDBClient {
	return &suciProfileDBClient{cc}
}

func (c *suciProfileDBClient) AddSuciProfile(ctx context.Context, in *SuciProfile, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.SuciProfileDB/AddSuciProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suciProfileDBClient) DeleteSuciProfile(ctx context.Context, in *SuciProfile, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.SuciProfileDB/DeleteSuciProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suciProfileDBClient) ListSuciProfile(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*SuciProfileList, error) {
	out := new(SuciProfileList)
	err := c.cc.Invoke(ctx, "/magma.lte.SuciProfileDB/ListSuciProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuciProfileDBServer is the server API for SuciProfileDB service.
type SuciProfileDBServer interface {
	// Adds a new suciprofile to the store.
	// Throws ALREADY_EXISTS if the suciprofile already exists.
	AddSuciProfile(context.Context, *SuciProfile) (*protos.Void, error)
	// Deletes an existing suciprofile.
	// If the suciprofile is not already present, this request is ignored.
	DeleteSuciProfile(context.Context, *SuciProfile) (*protos.Void, error)
	// List the suciprofile in the store.
	ListSuciProfile(context.Context, *protos.Void) (*SuciProfileList, error)
}

// UnimplementedSuciProfileDBServer can be embedded to have forward compatible implementations.
type UnimplementedSuciProfileDBServer struct {
}

func (*UnimplementedSuciProfileDBServer) AddSuciProfile(context.Context, *SuciProfile) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSuciProfile not implemented")
}
func (*UnimplementedSuciProfileDBServer) DeleteSuciProfile(context.Context, *SuciProfile) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSuciProfile not implemented")
}
func (*UnimplementedSuciProfileDBServer) ListSuciProfile(context.Context, *protos.Void) (*SuciProfileList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSuciProfile not implemented")
}

func RegisterSuciProfileDBServer(s *grpc.Server, srv SuciProfileDBServer) {
	s.RegisterService(&_SuciProfileDB_serviceDesc, srv)
}

func _SuciProfileDB_AddSuciProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuciProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuciProfileDBServer).AddSuciProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SuciProfileDB/AddSuciProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuciProfileDBServer).AddSuciProfile(ctx, req.(*SuciProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuciProfileDB_DeleteSuciProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuciProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuciProfileDBServer).DeleteSuciProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SuciProfileDB/DeleteSuciProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuciProfileDBServer).DeleteSuciProfile(ctx, req.(*SuciProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuciProfileDB_ListSuciProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuciProfileDBServer).ListSuciProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SuciProfileDB/ListSuciProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuciProfileDBServer).ListSuciProfile(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _SuciProfileDB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.SuciProfileDB",
	HandlerType: (*SuciProfileDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSuciProfile",
			Handler:    _SuciProfileDB_AddSuciProfile_Handler,
		},
		{
			MethodName: "DeleteSuciProfile",
			Handler:    _SuciProfileDB_DeleteSuciProfile_Handler,
		},
		{
			MethodName: "ListSuciProfile",
			Handler:    _SuciProfileDB_ListSuciProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/subscriberdb.proto",
}

// M5GSUCIRegistrationClient is the client API for M5GSUCIRegistration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type M5GSUCIRegistrationClient interface {
	M5GDecryptMsinSUCIRegistration(ctx context.Context, in *M5GSUCIRegistrationRequest, opts ...grpc.CallOption) (*M5GSUCIRegistrationAnswer, error)
}

type m5GSUCIRegistrationClient struct {
	cc grpc.ClientConnInterface
}

func NewM5GSUCIRegistrationClient(cc grpc.ClientConnInterface) M5GSUCIRegistrationClient {
	return &m5GSUCIRegistrationClient{cc}
}

func (c *m5GSUCIRegistrationClient) M5GDecryptMsinSUCIRegistration(ctx context.Context, in *M5GSUCIRegistrationRequest, opts ...grpc.CallOption) (*M5GSUCIRegistrationAnswer, error) {
	out := new(M5GSUCIRegistrationAnswer)
	err := c.cc.Invoke(ctx, "/magma.lte.M5GSUCIRegistration/M5GDecryptMsinSUCIRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// M5GSUCIRegistrationServer is the server API for M5GSUCIRegistration service.
type M5GSUCIRegistrationServer interface {
	M5GDecryptMsinSUCIRegistration(context.Context, *M5GSUCIRegistrationRequest) (*M5GSUCIRegistrationAnswer, error)
}

// UnimplementedM5GSUCIRegistrationServer can be embedded to have forward compatible implementations.
type UnimplementedM5GSUCIRegistrationServer struct {
}

func (*UnimplementedM5GSUCIRegistrationServer) M5GDecryptMsinSUCIRegistration(context.Context, *M5GSUCIRegistrationRequest) (*M5GSUCIRegistrationAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method M5GDecryptMsinSUCIRegistration not implemented")
}

func RegisterM5GSUCIRegistrationServer(s *grpc.Server, srv M5GSUCIRegistrationServer) {
	s.RegisterService(&_M5GSUCIRegistration_serviceDesc, srv)
}

func _M5GSUCIRegistration_M5GDecryptMsinSUCIRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(M5GSUCIRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(M5GSUCIRegistrationServer).M5GDecryptMsinSUCIRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.M5GSUCIRegistration/M5GDecryptMsinSUCIRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(M5GSUCIRegistrationServer).M5GDecryptMsinSUCIRegistration(ctx, req.(*M5GSUCIRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _M5GSUCIRegistration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.M5GSUCIRegistration",
	HandlerType: (*M5GSUCIRegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "M5GDecryptMsinSUCIRegistration",
			Handler:    _M5GSUCIRegistration_M5GDecryptMsinSUCIRegistration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/subscriberdb.proto",
}
