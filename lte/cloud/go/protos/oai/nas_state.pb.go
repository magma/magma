// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: lte/protos/oai/nas_state.proto

package oai

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Timers for MME and Nas
// mme_app_timer_t and nas_timer_t
type Timer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`   // long
	Sec uint64 `protobuf:"varint,2,opt,name=sec,proto3" json:"sec,omitempty"` // long
}

func (x *Timer) Reset() {
	*x = Timer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timer) ProtoMessage() {}

func (x *Timer) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timer.ProtoReflect.Descriptor instead.
func (*Timer) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{0}
}

func (x *Timer) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Timer) GetSec() uint64 {
	if x != nil {
		return x.Sec
	}
	return 0
}

// imsi_t or imei_t or imeisv_t
type IdentityTuple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	NumDigits uint32 `protobuf:"varint,2,opt,name=num_digits,json=numDigits,proto3" json:"num_digits,omitempty"`
}

func (x *IdentityTuple) Reset() {
	*x = IdentityTuple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityTuple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityTuple) ProtoMessage() {}

func (x *IdentityTuple) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityTuple.ProtoReflect.Descriptor instead.
func (*IdentityTuple) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{1}
}

func (x *IdentityTuple) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *IdentityTuple) GetNumDigits() uint32 {
	if x != nil {
		return x.NumDigits
	}
	return 0
}

// partial_tai_list_t
type PartialTaiList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeOfList                uint32   `protobuf:"varint,1,opt,name=type_of_list,json=typeOfList,proto3" json:"type_of_list,omitempty"`
	NumberOfElements          uint32   `protobuf:"varint,2,opt,name=number_of_elements,json=numberOfElements,proto3" json:"number_of_elements,omitempty"`
	TaiManyPlmn               []*Tai   `protobuf:"bytes,3,rep,name=tai_many_plmn,json=taiManyPlmn,proto3" json:"tai_many_plmn,omitempty"`
	TaiOnePlmnConsecutiveTacs *Tai     `protobuf:"bytes,4,opt,name=tai_one_plmn_consecutive_tacs,json=taiOnePlmnConsecutiveTacs,proto3" json:"tai_one_plmn_consecutive_tacs,omitempty"`
	Plmn                      []byte   `protobuf:"bytes,5,opt,name=plmn,proto3" json:"plmn,omitempty"`
	Tac                       []uint32 `protobuf:"varint,6,rep,packed,name=tac,proto3" json:"tac,omitempty"`
}

func (x *PartialTaiList) Reset() {
	*x = PartialTaiList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartialTaiList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartialTaiList) ProtoMessage() {}

func (x *PartialTaiList) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartialTaiList.ProtoReflect.Descriptor instead.
func (*PartialTaiList) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{2}
}

func (x *PartialTaiList) GetTypeOfList() uint32 {
	if x != nil {
		return x.TypeOfList
	}
	return 0
}

func (x *PartialTaiList) GetNumberOfElements() uint32 {
	if x != nil {
		return x.NumberOfElements
	}
	return 0
}

func (x *PartialTaiList) GetTaiManyPlmn() []*Tai {
	if x != nil {
		return x.TaiManyPlmn
	}
	return nil
}

func (x *PartialTaiList) GetTaiOnePlmnConsecutiveTacs() *Tai {
	if x != nil {
		return x.TaiOnePlmnConsecutiveTacs
	}
	return nil
}

func (x *PartialTaiList) GetPlmn() []byte {
	if x != nil {
		return x.Plmn
	}
	return nil
}

func (x *PartialTaiList) GetTac() []uint32 {
	if x != nil {
		return x.Tac
	}
	return nil
}

// tai_list_t
type TaiList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Numberoflists   uint32            `protobuf:"varint,1,opt,name=numberoflists,proto3" json:"numberoflists,omitempty"`
	PartialTaiLists []*PartialTaiList `protobuf:"bytes,2,rep,name=partial_tai_lists,json=partialTaiLists,proto3" json:"partial_tai_lists,omitempty"`
}

func (x *TaiList) Reset() {
	*x = TaiList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaiList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaiList) ProtoMessage() {}

func (x *TaiList) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaiList.ProtoReflect.Descriptor instead.
func (*TaiList) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{3}
}

func (x *TaiList) GetNumberoflists() uint32 {
	if x != nil {
		return x.Numberoflists
	}
	return 0
}

func (x *TaiList) GetPartialTaiLists() []*PartialTaiList {
	if x != nil {
		return x.PartialTaiLists
	}
	return nil
}

// tai_t
type Tai struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MccMnc []byte `protobuf:"bytes,1,opt,name=mcc_mnc,json=mccMnc,proto3" json:"mcc_mnc,omitempty"` // 6 digits representing mcc and mnc
	Tac    uint32 `protobuf:"varint,2,opt,name=tac,proto3" json:"tac,omitempty"`
}

func (x *Tai) Reset() {
	*x = Tai{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tai) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tai) ProtoMessage() {}

func (x *Tai) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tai.ProtoReflect.Descriptor instead.
func (*Tai) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{4}
}

func (x *Tai) GetMccMnc() []byte {
	if x != nil {
		return x.MccMnc
	}
	return nil
}

func (x *Tai) GetTac() uint32 {
	if x != nil {
		return x.Tac
	}
	return 0
}

// nas_base_proc_t
type NasBaseProc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NasPuid uint64 `protobuf:"varint,1,opt,name=nas_puid,json=nasPuid,proto3" json:"nas_puid,omitempty"`
	Type    uint32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *NasBaseProc) Reset() {
	*x = NasBaseProc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NasBaseProc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NasBaseProc) ProtoMessage() {}

func (x *NasBaseProc) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NasBaseProc.ProtoReflect.Descriptor instead.
func (*NasBaseProc) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{5}
}

func (x *NasBaseProc) GetNasPuid() uint64 {
	if x != nil {
		return x.NasPuid
	}
	return 0
}

func (x *NasBaseProc) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

// nas_emm_proc_t
type NasEmmProc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseProc            *NasBaseProc `protobuf:"bytes,1,opt,name=base_proc,json=baseProc,proto3" json:"base_proc,omitempty"`
	Type                uint32       `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	PreviousEmmFsmState uint32       `protobuf:"varint,3,opt,name=previous_emm_fsm_state,json=previousEmmFsmState,proto3" json:"previous_emm_fsm_state,omitempty"`
}

func (x *NasEmmProc) Reset() {
	*x = NasEmmProc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NasEmmProc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NasEmmProc) ProtoMessage() {}

func (x *NasEmmProc) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NasEmmProc.ProtoReflect.Descriptor instead.
func (*NasEmmProc) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{6}
}

func (x *NasEmmProc) GetBaseProc() *NasBaseProc {
	if x != nil {
		return x.BaseProc
	}
	return nil
}

func (x *NasEmmProc) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *NasEmmProc) GetPreviousEmmFsmState() uint32 {
	if x != nil {
		return x.PreviousEmmFsmState
	}
	return 0
}

// nas_auth_info_proc_t
type AuthInfoProc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestSent bool          `protobuf:"varint,1,opt,name=request_sent,json=requestSent,proto3" json:"request_sent,omitempty"`
	Vector      []*AuthVector `protobuf:"bytes,2,rep,name=vector,proto3" json:"vector,omitempty"`
	NasCause    uint32        `protobuf:"varint,3,opt,name=nas_cause,json=nasCause,proto3" json:"nas_cause,omitempty"`
	UeId        uint32        `protobuf:"varint,4,opt,name=ue_id,json=ueId,proto3" json:"ue_id,omitempty"`
	Resync      bool          `protobuf:"varint,5,opt,name=resync,proto3" json:"resync,omitempty"`
	TimerS6A    *Timer        `protobuf:"bytes,200,opt,name=timer_s6a,json=timerS6a,proto3" json:"timer_s6a,omitempty"`
}

func (x *AuthInfoProc) Reset() {
	*x = AuthInfoProc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthInfoProc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthInfoProc) ProtoMessage() {}

func (x *AuthInfoProc) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthInfoProc.ProtoReflect.Descriptor instead.
func (*AuthInfoProc) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{7}
}

func (x *AuthInfoProc) GetRequestSent() bool {
	if x != nil {
		return x.RequestSent
	}
	return false
}

func (x *AuthInfoProc) GetVector() []*AuthVector {
	if x != nil {
		return x.Vector
	}
	return nil
}

func (x *AuthInfoProc) GetNasCause() uint32 {
	if x != nil {
		return x.NasCause
	}
	return 0
}

func (x *AuthInfoProc) GetUeId() uint32 {
	if x != nil {
		return x.UeId
	}
	return 0
}

func (x *AuthInfoProc) GetResync() bool {
	if x != nil {
		return x.Resync
	}
	return false
}

func (x *AuthInfoProc) GetTimerS6A() *Timer {
	if x != nil {
		return x.TimerS6A
	}
	return nil
}

// nas_cn_proc_t
type NasCnProc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseProc *NasBaseProc `protobuf:"bytes,1,opt,name=base_proc,json=baseProc,proto3" json:"base_proc,omitempty"`
	// Types that are assignable to MessageTypes:
	//	*NasCnProc_AuthInfoProc
	MessageTypes isNasCnProc_MessageTypes `protobuf_oneof:"MessageTypes"`
}

func (x *NasCnProc) Reset() {
	*x = NasCnProc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NasCnProc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NasCnProc) ProtoMessage() {}

func (x *NasCnProc) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NasCnProc.ProtoReflect.Descriptor instead.
func (*NasCnProc) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{8}
}

func (x *NasCnProc) GetBaseProc() *NasBaseProc {
	if x != nil {
		return x.BaseProc
	}
	return nil
}

func (m *NasCnProc) GetMessageTypes() isNasCnProc_MessageTypes {
	if m != nil {
		return m.MessageTypes
	}
	return nil
}

func (x *NasCnProc) GetAuthInfoProc() *AuthInfoProc {
	if x, ok := x.GetMessageTypes().(*NasCnProc_AuthInfoProc); ok {
		return x.AuthInfoProc
	}
	return nil
}

type isNasCnProc_MessageTypes interface {
	isNasCnProc_MessageTypes()
}

type NasCnProc_AuthInfoProc struct {
	AuthInfoProc *AuthInfoProc `protobuf:"bytes,2,opt,name=auth_info_proc,json=authInfoProc,proto3,oneof"`
}

func (*NasCnProc_AuthInfoProc) isNasCnProc_MessageTypes() {}

// MobileStationClassmark2
type MobileStaClassmark2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MobileStaClassmark2) Reset() {
	*x = MobileStaClassmark2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MobileStaClassmark2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MobileStaClassmark2) ProtoMessage() {}

func (x *MobileStaClassmark2) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MobileStaClassmark2.ProtoReflect.Descriptor instead.
func (*MobileStaClassmark2) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{9}
}

// voice_domain_preference_and_ue_usage_setting_t
type VoicePreference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VoicePreference) Reset() {
	*x = VoicePreference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoicePreference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoicePreference) ProtoMessage() {}

func (x *VoicePreference) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoicePreference.ProtoReflect.Descriptor instead.
func (*VoicePreference) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{10}
}

// nas_message_decode_status_t
type NasMsgDecodeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntegrityProtectedMessage uint32 `protobuf:"varint,1,opt,name=integrity_protected_message,json=integrityProtectedMessage,proto3" json:"integrity_protected_message,omitempty"`
	CipheredMessage           uint32 `protobuf:"varint,2,opt,name=ciphered_message,json=cipheredMessage,proto3" json:"ciphered_message,omitempty"`
	MacMatched                uint32 `protobuf:"varint,3,opt,name=mac_matched,json=macMatched,proto3" json:"mac_matched,omitempty"`
	SecurityContextAvailable  uint32 `protobuf:"varint,4,opt,name=security_context_available,json=securityContextAvailable,proto3" json:"security_context_available,omitempty"`
	EmmCause                  uint32 `protobuf:"varint,5,opt,name=emm_cause,json=emmCause,proto3" json:"emm_cause,omitempty"`
}

func (x *NasMsgDecodeStatus) Reset() {
	*x = NasMsgDecodeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NasMsgDecodeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NasMsgDecodeStatus) ProtoMessage() {}

func (x *NasMsgDecodeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NasMsgDecodeStatus.ProtoReflect.Descriptor instead.
func (*NasMsgDecodeStatus) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{11}
}

func (x *NasMsgDecodeStatus) GetIntegrityProtectedMessage() uint32 {
	if x != nil {
		return x.IntegrityProtectedMessage
	}
	return 0
}

func (x *NasMsgDecodeStatus) GetCipheredMessage() uint32 {
	if x != nil {
		return x.CipheredMessage
	}
	return 0
}

func (x *NasMsgDecodeStatus) GetMacMatched() uint32 {
	if x != nil {
		return x.MacMatched
	}
	return 0
}

func (x *NasMsgDecodeStatus) GetSecurityContextAvailable() uint32 {
	if x != nil {
		return x.SecurityContextAvailable
	}
	return 0
}

func (x *NasMsgDecodeStatus) GetEmmCause() uint32 {
	if x != nil {
		return x.EmmCause
	}
	return 0
}

// drx_parameter_t
type DrxParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Splitpgcyclecode uint32 `protobuf:"varint,1,opt,name=splitpgcyclecode,proto3" json:"splitpgcyclecode,omitempty"`
	Cndrx            uint32 `protobuf:"varint,2,opt,name=cndrx,proto3" json:"cndrx,omitempty"`
	Splitonccch      uint32 `protobuf:"varint,3,opt,name=splitonccch,proto3" json:"splitonccch,omitempty"`
	Nondrxtimer      uint32 `protobuf:"varint,4,opt,name=nondrxtimer,proto3" json:"nondrxtimer,omitempty"`
}

func (x *DrxParameter) Reset() {
	*x = DrxParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrxParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrxParameter) ProtoMessage() {}

func (x *DrxParameter) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrxParameter.ProtoReflect.Descriptor instead.
func (*DrxParameter) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{12}
}

func (x *DrxParameter) GetSplitpgcyclecode() uint32 {
	if x != nil {
		return x.Splitpgcyclecode
	}
	return 0
}

func (x *DrxParameter) GetCndrx() uint32 {
	if x != nil {
		return x.Cndrx
	}
	return 0
}

func (x *DrxParameter) GetSplitonccch() uint32 {
	if x != nil {
		return x.Splitonccch
	}
	return 0
}

func (x *DrxParameter) GetNondrxtimer() uint32 {
	if x != nil {
		return x.Nondrxtimer
	}
	return 0
}

// emm_attach_request_ies_t
type AttachRequestIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsInitial                      bool                            `protobuf:"varint,1,opt,name=is_initial,json=isInitial,proto3" json:"is_initial,omitempty"`
	Type                           uint32                          `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	AdditionalUpdateType           uint32                          `protobuf:"varint,3,opt,name=additional_update_type,json=additionalUpdateType,proto3" json:"additional_update_type,omitempty"`
	IsNativeSc                     bool                            `protobuf:"varint,4,opt,name=is_native_sc,json=isNativeSc,proto3" json:"is_native_sc,omitempty"`
	Ksi                            uint32                          `protobuf:"varint,5,opt,name=ksi,proto3" json:"ksi,omitempty"`
	IsNativeGuti                   bool                            `protobuf:"varint,6,opt,name=is_native_guti,json=isNativeGuti,proto3" json:"is_native_guti,omitempty"`
	Guti                           *Guti                           `protobuf:"bytes,7,opt,name=guti,proto3" json:"guti,omitempty"`
	Imsi                           *IdentityTuple                  `protobuf:"bytes,8,opt,name=imsi,proto3" json:"imsi,omitempty"` // imsi_t
	Imei                           *IdentityTuple                  `protobuf:"bytes,9,opt,name=imei,proto3" json:"imei,omitempty"` // imei_t
	LastVisitedTai                 *Tai                            `protobuf:"bytes,10,opt,name=last_visited_tai,json=lastVisitedTai,proto3" json:"last_visited_tai,omitempty"`
	OriginTai                      *Tai                            `protobuf:"bytes,11,opt,name=origin_tai,json=originTai,proto3" json:"origin_tai,omitempty"`
	OriginEcgi                     *Ecgi                           `protobuf:"bytes,12,opt,name=origin_ecgi,json=originEcgi,proto3" json:"origin_ecgi,omitempty"`
	UeNwCapability                 *UeNetworkCapability            `protobuf:"bytes,13,opt,name=ue_nw_capability,json=ueNwCapability,proto3" json:"ue_nw_capability,omitempty"`
	DrxParameter                   *DrxParameter                   `protobuf:"bytes,14,opt,name=drx_parameter,json=drxParameter,proto3" json:"drx_parameter,omitempty"`
	EsmMsg                         []byte                          `protobuf:"bytes,15,opt,name=esm_msg,json=esmMsg,proto3" json:"esm_msg,omitempty"`
	DecodeStatus                   *NasMsgDecodeStatus             `protobuf:"bytes,16,opt,name=decode_status,json=decodeStatus,proto3" json:"decode_status,omitempty"`
	Classmark2                     *MobileStaClassmark2            `protobuf:"bytes,17,opt,name=classmark2,proto3" json:"classmark2,omitempty"`
	VoicePreference                *VoicePreference                `protobuf:"bytes,18,opt,name=voice_preference,json=voicePreference,proto3" json:"voice_preference,omitempty"`
	UeAdditionalSecurityCapability *UeAdditionalSecurityCapability `protobuf:"bytes,19,opt,name=ue_additional_security_capability,json=ueAdditionalSecurityCapability,proto3" json:"ue_additional_security_capability,omitempty"`
}

func (x *AttachRequestIes) Reset() {
	*x = AttachRequestIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachRequestIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachRequestIes) ProtoMessage() {}

func (x *AttachRequestIes) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachRequestIes.ProtoReflect.Descriptor instead.
func (*AttachRequestIes) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{13}
}

func (x *AttachRequestIes) GetIsInitial() bool {
	if x != nil {
		return x.IsInitial
	}
	return false
}

func (x *AttachRequestIes) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *AttachRequestIes) GetAdditionalUpdateType() uint32 {
	if x != nil {
		return x.AdditionalUpdateType
	}
	return 0
}

func (x *AttachRequestIes) GetIsNativeSc() bool {
	if x != nil {
		return x.IsNativeSc
	}
	return false
}

func (x *AttachRequestIes) GetKsi() uint32 {
	if x != nil {
		return x.Ksi
	}
	return 0
}

func (x *AttachRequestIes) GetIsNativeGuti() bool {
	if x != nil {
		return x.IsNativeGuti
	}
	return false
}

func (x *AttachRequestIes) GetGuti() *Guti {
	if x != nil {
		return x.Guti
	}
	return nil
}

func (x *AttachRequestIes) GetImsi() *IdentityTuple {
	if x != nil {
		return x.Imsi
	}
	return nil
}

func (x *AttachRequestIes) GetImei() *IdentityTuple {
	if x != nil {
		return x.Imei
	}
	return nil
}

func (x *AttachRequestIes) GetLastVisitedTai() *Tai {
	if x != nil {
		return x.LastVisitedTai
	}
	return nil
}

func (x *AttachRequestIes) GetOriginTai() *Tai {
	if x != nil {
		return x.OriginTai
	}
	return nil
}

func (x *AttachRequestIes) GetOriginEcgi() *Ecgi {
	if x != nil {
		return x.OriginEcgi
	}
	return nil
}

func (x *AttachRequestIes) GetUeNwCapability() *UeNetworkCapability {
	if x != nil {
		return x.UeNwCapability
	}
	return nil
}

func (x *AttachRequestIes) GetDrxParameter() *DrxParameter {
	if x != nil {
		return x.DrxParameter
	}
	return nil
}

func (x *AttachRequestIes) GetEsmMsg() []byte {
	if x != nil {
		return x.EsmMsg
	}
	return nil
}

func (x *AttachRequestIes) GetDecodeStatus() *NasMsgDecodeStatus {
	if x != nil {
		return x.DecodeStatus
	}
	return nil
}

func (x *AttachRequestIes) GetClassmark2() *MobileStaClassmark2 {
	if x != nil {
		return x.Classmark2
	}
	return nil
}

func (x *AttachRequestIes) GetVoicePreference() *VoicePreference {
	if x != nil {
		return x.VoicePreference
	}
	return nil
}

func (x *AttachRequestIes) GetUeAdditionalSecurityCapability() *UeAdditionalSecurityCapability {
	if x != nil {
		return x.UeAdditionalSecurityCapability
	}
	return nil
}

// nas_emm_attach_proc_t
type AttachProc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttachAcceptSent       uint32            `protobuf:"varint,1,opt,name=attach_accept_sent,json=attachAcceptSent,proto3" json:"attach_accept_sent,omitempty"`
	AttachRejectSent       bool              `protobuf:"varint,2,opt,name=attach_reject_sent,json=attachRejectSent,proto3" json:"attach_reject_sent,omitempty"`
	AttachCompleteReceived bool              `protobuf:"varint,3,opt,name=attach_complete_received,json=attachCompleteReceived,proto3" json:"attach_complete_received,omitempty"`
	Guti                   *Guti             `protobuf:"bytes,4,opt,name=guti,proto3" json:"guti,omitempty"`
	EsmMsgOut              []byte            `protobuf:"bytes,5,opt,name=esm_msg_out,json=esmMsgOut,proto3" json:"esm_msg_out,omitempty"`
	Ies                    *AttachRequestIes `protobuf:"bytes,6,opt,name=ies,proto3" json:"ies,omitempty"`
	UeId                   uint32            `protobuf:"varint,7,opt,name=ue_id,json=ueId,proto3" json:"ue_id,omitempty"`
	Ksi                    uint32            `protobuf:"varint,8,opt,name=ksi,proto3" json:"ksi,omitempty"`
	EmmCause               uint32            `protobuf:"varint,9,opt,name=emm_cause,json=emmCause,proto3" json:"emm_cause,omitempty"`
	T3450                  *Timer            `protobuf:"bytes,200,opt,name=t3450,proto3" json:"t3450,omitempty"`
}

func (x *AttachProc) Reset() {
	*x = AttachProc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachProc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachProc) ProtoMessage() {}

func (x *AttachProc) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachProc.ProtoReflect.Descriptor instead.
func (*AttachProc) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{14}
}

func (x *AttachProc) GetAttachAcceptSent() uint32 {
	if x != nil {
		return x.AttachAcceptSent
	}
	return 0
}

func (x *AttachProc) GetAttachRejectSent() bool {
	if x != nil {
		return x.AttachRejectSent
	}
	return false
}

func (x *AttachProc) GetAttachCompleteReceived() bool {
	if x != nil {
		return x.AttachCompleteReceived
	}
	return false
}

func (x *AttachProc) GetGuti() *Guti {
	if x != nil {
		return x.Guti
	}
	return nil
}

func (x *AttachProc) GetEsmMsgOut() []byte {
	if x != nil {
		return x.EsmMsgOut
	}
	return nil
}

func (x *AttachProc) GetIes() *AttachRequestIes {
	if x != nil {
		return x.Ies
	}
	return nil
}

func (x *AttachProc) GetUeId() uint32 {
	if x != nil {
		return x.UeId
	}
	return 0
}

func (x *AttachProc) GetKsi() uint32 {
	if x != nil {
		return x.Ksi
	}
	return 0
}

func (x *AttachProc) GetEmmCause() uint32 {
	if x != nil {
		return x.EmmCause
	}
	return 0
}

func (x *AttachProc) GetT3450() *Timer {
	if x != nil {
		return x.T3450
	}
	return nil
}

// emm_detach_request_ies_t
type DetachRequestIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         uint32              `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	SwitchOff    bool                `protobuf:"varint,2,opt,name=switch_off,json=switchOff,proto3" json:"switch_off,omitempty"`
	IsNativeSc   bool                `protobuf:"varint,3,opt,name=is_native_sc,json=isNativeSc,proto3" json:"is_native_sc,omitempty"`
	Ksi          uint32              `protobuf:"varint,4,opt,name=ksi,proto3" json:"ksi,omitempty"`
	Guti         *Guti               `protobuf:"bytes,5,opt,name=guti,proto3" json:"guti,omitempty"`
	Imsi         *IdentityTuple      `protobuf:"bytes,6,opt,name=imsi,proto3" json:"imsi,omitempty"`
	Imei         *IdentityTuple      `protobuf:"bytes,7,opt,name=imei,proto3" json:"imei,omitempty"`
	DecodeStatus *NasMsgDecodeStatus `protobuf:"bytes,8,opt,name=decode_status,json=decodeStatus,proto3" json:"decode_status,omitempty"`
}

func (x *DetachRequestIes) Reset() {
	*x = DetachRequestIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetachRequestIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetachRequestIes) ProtoMessage() {}

func (x *DetachRequestIes) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetachRequestIes.ProtoReflect.Descriptor instead.
func (*DetachRequestIes) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{15}
}

func (x *DetachRequestIes) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DetachRequestIes) GetSwitchOff() bool {
	if x != nil {
		return x.SwitchOff
	}
	return false
}

func (x *DetachRequestIes) GetIsNativeSc() bool {
	if x != nil {
		return x.IsNativeSc
	}
	return false
}

func (x *DetachRequestIes) GetKsi() uint32 {
	if x != nil {
		return x.Ksi
	}
	return 0
}

func (x *DetachRequestIes) GetGuti() *Guti {
	if x != nil {
		return x.Guti
	}
	return nil
}

func (x *DetachRequestIes) GetImsi() *IdentityTuple {
	if x != nil {
		return x.Imsi
	}
	return nil
}

func (x *DetachRequestIes) GetImei() *IdentityTuple {
	if x != nil {
		return x.Imei
	}
	return nil
}

func (x *DetachRequestIes) GetDecodeStatus() *NasMsgDecodeStatus {
	if x != nil {
		return x.DecodeStatus
	}
	return nil
}

// emm_tau_request_ies_t
type TauRequestIes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TauRequestIes) Reset() {
	*x = TauRequestIes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TauRequestIes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TauRequestIes) ProtoMessage() {}

func (x *TauRequestIes) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TauRequestIes.ProtoReflect.Descriptor instead.
func (*TauRequestIes) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{16}
}

// nas_emm_tau_proc_t
type NasTauProc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NasTauProc) Reset() {
	*x = NasTauProc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NasTauProc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NasTauProc) ProtoMessage() {}

func (x *NasTauProc) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NasTauProc.ProtoReflect.Descriptor instead.
func (*NasTauProc) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{17}
}

// nas_emm_auth_proc_t
type AuthProc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetransmissionCount uint32         `protobuf:"varint,1,opt,name=retransmission_count,json=retransmissionCount,proto3" json:"retransmission_count,omitempty"`
	SyncFailCount       uint32         `protobuf:"varint,2,opt,name=sync_fail_count,json=syncFailCount,proto3" json:"sync_fail_count,omitempty"`
	MacFailCount        uint32         `protobuf:"varint,3,opt,name=mac_fail_count,json=macFailCount,proto3" json:"mac_fail_count,omitempty"`
	UeId                uint32         `protobuf:"varint,4,opt,name=ue_id,json=ueId,proto3" json:"ue_id,omitempty"`
	IsCauseIsAttach     bool           `protobuf:"varint,5,opt,name=is_cause_is_attach,json=isCauseIsAttach,proto3" json:"is_cause_is_attach,omitempty"`
	Ksi                 uint32         `protobuf:"varint,6,opt,name=ksi,proto3" json:"ksi,omitempty"`
	Rand                []byte         `protobuf:"bytes,7,opt,name=rand,proto3" json:"rand,omitempty"`
	Autn                []byte         `protobuf:"bytes,8,opt,name=autn,proto3" json:"autn,omitempty"`
	UncheckedImsi       *IdentityTuple `protobuf:"bytes,9,opt,name=unchecked_imsi,json=uncheckedImsi,proto3" json:"unchecked_imsi,omitempty"`
	EmmCause            uint32         `protobuf:"varint,10,opt,name=emm_cause,json=emmCause,proto3" json:"emm_cause,omitempty"`
	T3460               *Timer         `protobuf:"bytes,200,opt,name=T3460,proto3" json:"T3460,omitempty"`
}

func (x *AuthProc) Reset() {
	*x = AuthProc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthProc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthProc) ProtoMessage() {}

func (x *AuthProc) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthProc.ProtoReflect.Descriptor instead.
func (*AuthProc) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{18}
}

func (x *AuthProc) GetRetransmissionCount() uint32 {
	if x != nil {
		return x.RetransmissionCount
	}
	return 0
}

func (x *AuthProc) GetSyncFailCount() uint32 {
	if x != nil {
		return x.SyncFailCount
	}
	return 0
}

func (x *AuthProc) GetMacFailCount() uint32 {
	if x != nil {
		return x.MacFailCount
	}
	return 0
}

func (x *AuthProc) GetUeId() uint32 {
	if x != nil {
		return x.UeId
	}
	return 0
}

func (x *AuthProc) GetIsCauseIsAttach() bool {
	if x != nil {
		return x.IsCauseIsAttach
	}
	return false
}

func (x *AuthProc) GetKsi() uint32 {
	if x != nil {
		return x.Ksi
	}
	return 0
}

func (x *AuthProc) GetRand() []byte {
	if x != nil {
		return x.Rand
	}
	return nil
}

func (x *AuthProc) GetAutn() []byte {
	if x != nil {
		return x.Autn
	}
	return nil
}

func (x *AuthProc) GetUncheckedImsi() *IdentityTuple {
	if x != nil {
		return x.UncheckedImsi
	}
	return nil
}

func (x *AuthProc) GetEmmCause() uint32 {
	if x != nil {
		return x.EmmCause
	}
	return 0
}

func (x *AuthProc) GetT3460() *Timer {
	if x != nil {
		return x.T3460
	}
	return nil
}

// nas_emm_smc_proc_t
type SmcProc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UeId                uint32 `protobuf:"varint,1,opt,name=ue_id,json=ueId,proto3" json:"ue_id,omitempty"`
	RetransmissionCount uint32 `protobuf:"varint,2,opt,name=retransmission_count,json=retransmissionCount,proto3" json:"retransmission_count,omitempty"`
	Ksi                 uint32 `protobuf:"varint,3,opt,name=ksi,proto3" json:"ksi,omitempty"`
	Eea                 uint32 `protobuf:"varint,4,opt,name=eea,proto3" json:"eea,omitempty"`
	Eia                 uint32 `protobuf:"varint,5,opt,name=eia,proto3" json:"eia,omitempty"`
	Ucs2                uint32 `protobuf:"varint,6,opt,name=ucs2,proto3" json:"ucs2,omitempty"`
	Uea                 uint32 `protobuf:"varint,7,opt,name=uea,proto3" json:"uea,omitempty"`
	Uia                 uint32 `protobuf:"varint,8,opt,name=uia,proto3" json:"uia,omitempty"`
	Gea                 uint32 `protobuf:"varint,9,opt,name=gea,proto3" json:"gea,omitempty"`
	UmtsPresent         bool   `protobuf:"varint,10,opt,name=umts_present,json=umtsPresent,proto3" json:"umts_present,omitempty"`
	GprsPresent         bool   `protobuf:"varint,11,opt,name=gprs_present,json=gprsPresent,proto3" json:"gprs_present,omitempty"`
	SelectedEea         uint32 `protobuf:"varint,12,opt,name=selected_eea,json=selectedEea,proto3" json:"selected_eea,omitempty"`
	SelectedEia         uint32 `protobuf:"varint,13,opt,name=selected_eia,json=selectedEia,proto3" json:"selected_eia,omitempty"`
	SavedSelectedEea    uint32 `protobuf:"varint,14,opt,name=saved_selected_eea,json=savedSelectedEea,proto3" json:"saved_selected_eea,omitempty"`
	SavedSelectedEia    uint32 `protobuf:"varint,15,opt,name=saved_selected_eia,json=savedSelectedEia,proto3" json:"saved_selected_eia,omitempty"`
	SavedEksi           uint32 `protobuf:"varint,16,opt,name=saved_eksi,json=savedEksi,proto3" json:"saved_eksi,omitempty"`
	SavedOverflow       uint32 `protobuf:"varint,17,opt,name=saved_overflow,json=savedOverflow,proto3" json:"saved_overflow,omitempty"`
	SavedSeqNum         uint32 `protobuf:"varint,18,opt,name=saved_seq_num,json=savedSeqNum,proto3" json:"saved_seq_num,omitempty"`
	SavedScType         uint32 `protobuf:"varint,19,opt,name=saved_sc_type,json=savedScType,proto3" json:"saved_sc_type,omitempty"`
	NotifyFailure       bool   `protobuf:"varint,20,opt,name=notify_failure,json=notifyFailure,proto3" json:"notify_failure,omitempty"`
	IsNew               bool   `protobuf:"varint,21,opt,name=is_new,json=isNew,proto3" json:"is_new,omitempty"`
	ImeisvRequest       bool   `protobuf:"varint,22,opt,name=imeisv_request,json=imeisvRequest,proto3" json:"imeisv_request,omitempty"`
}

func (x *SmcProc) Reset() {
	*x = SmcProc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmcProc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmcProc) ProtoMessage() {}

func (x *SmcProc) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmcProc.ProtoReflect.Descriptor instead.
func (*SmcProc) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{19}
}

func (x *SmcProc) GetUeId() uint32 {
	if x != nil {
		return x.UeId
	}
	return 0
}

func (x *SmcProc) GetRetransmissionCount() uint32 {
	if x != nil {
		return x.RetransmissionCount
	}
	return 0
}

func (x *SmcProc) GetKsi() uint32 {
	if x != nil {
		return x.Ksi
	}
	return 0
}

func (x *SmcProc) GetEea() uint32 {
	if x != nil {
		return x.Eea
	}
	return 0
}

func (x *SmcProc) GetEia() uint32 {
	if x != nil {
		return x.Eia
	}
	return 0
}

func (x *SmcProc) GetUcs2() uint32 {
	if x != nil {
		return x.Ucs2
	}
	return 0
}

func (x *SmcProc) GetUea() uint32 {
	if x != nil {
		return x.Uea
	}
	return 0
}

func (x *SmcProc) GetUia() uint32 {
	if x != nil {
		return x.Uia
	}
	return 0
}

func (x *SmcProc) GetGea() uint32 {
	if x != nil {
		return x.Gea
	}
	return 0
}

func (x *SmcProc) GetUmtsPresent() bool {
	if x != nil {
		return x.UmtsPresent
	}
	return false
}

func (x *SmcProc) GetGprsPresent() bool {
	if x != nil {
		return x.GprsPresent
	}
	return false
}

func (x *SmcProc) GetSelectedEea() uint32 {
	if x != nil {
		return x.SelectedEea
	}
	return 0
}

func (x *SmcProc) GetSelectedEia() uint32 {
	if x != nil {
		return x.SelectedEia
	}
	return 0
}

func (x *SmcProc) GetSavedSelectedEea() uint32 {
	if x != nil {
		return x.SavedSelectedEea
	}
	return 0
}

func (x *SmcProc) GetSavedSelectedEia() uint32 {
	if x != nil {
		return x.SavedSelectedEia
	}
	return 0
}

func (x *SmcProc) GetSavedEksi() uint32 {
	if x != nil {
		return x.SavedEksi
	}
	return 0
}

func (x *SmcProc) GetSavedOverflow() uint32 {
	if x != nil {
		return x.SavedOverflow
	}
	return 0
}

func (x *SmcProc) GetSavedSeqNum() uint32 {
	if x != nil {
		return x.SavedSeqNum
	}
	return 0
}

func (x *SmcProc) GetSavedScType() uint32 {
	if x != nil {
		return x.SavedScType
	}
	return 0
}

func (x *SmcProc) GetNotifyFailure() bool {
	if x != nil {
		return x.NotifyFailure
	}
	return false
}

func (x *SmcProc) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

func (x *SmcProc) GetImeisvRequest() bool {
	if x != nil {
		return x.ImeisvRequest
	}
	return false
}

// nas_emm_specific_proc_t, nas_emm_common_proc_t, nas_emm_con_mngt_proc_t
type NasEmmProcWithType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmmProc *NasEmmProc `protobuf:"bytes,1,opt,name=emm_proc,json=emmProc,proto3" json:"emm_proc,omitempty"`
	// Types that are assignable to MessageTypes:
	//	*NasEmmProcWithType_AttachProc
	//	*NasEmmProcWithType_DetachProc
	//	*NasEmmProcWithType_SmcProc
	//	*NasEmmProcWithType_AuthProc
	MessageTypes isNasEmmProcWithType_MessageTypes `protobuf_oneof:"MessageTypes"`
}

func (x *NasEmmProcWithType) Reset() {
	*x = NasEmmProcWithType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NasEmmProcWithType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NasEmmProcWithType) ProtoMessage() {}

func (x *NasEmmProcWithType) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NasEmmProcWithType.ProtoReflect.Descriptor instead.
func (*NasEmmProcWithType) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{20}
}

func (x *NasEmmProcWithType) GetEmmProc() *NasEmmProc {
	if x != nil {
		return x.EmmProc
	}
	return nil
}

func (m *NasEmmProcWithType) GetMessageTypes() isNasEmmProcWithType_MessageTypes {
	if m != nil {
		return m.MessageTypes
	}
	return nil
}

func (x *NasEmmProcWithType) GetAttachProc() *AttachProc {
	if x, ok := x.GetMessageTypes().(*NasEmmProcWithType_AttachProc); ok {
		return x.AttachProc
	}
	return nil
}

func (x *NasEmmProcWithType) GetDetachProc() *DetachRequestIes {
	if x, ok := x.GetMessageTypes().(*NasEmmProcWithType_DetachProc); ok {
		return x.DetachProc
	}
	return nil
}

func (x *NasEmmProcWithType) GetSmcProc() *SmcProc {
	if x, ok := x.GetMessageTypes().(*NasEmmProcWithType_SmcProc); ok {
		return x.SmcProc
	}
	return nil
}

func (x *NasEmmProcWithType) GetAuthProc() *AuthProc {
	if x, ok := x.GetMessageTypes().(*NasEmmProcWithType_AuthProc); ok {
		return x.AuthProc
	}
	return nil
}

type isNasEmmProcWithType_MessageTypes interface {
	isNasEmmProcWithType_MessageTypes()
}

type NasEmmProcWithType_AttachProc struct {
	AttachProc *AttachProc `protobuf:"bytes,2,opt,name=attach_proc,json=attachProc,proto3,oneof"`
}

type NasEmmProcWithType_DetachProc struct {
	DetachProc *DetachRequestIes `protobuf:"bytes,3,opt,name=detach_proc,json=detachProc,proto3,oneof"`
}

type NasEmmProcWithType_SmcProc struct {
	SmcProc *SmcProc `protobuf:"bytes,4,opt,name=smc_proc,json=smcProc,proto3,oneof"`
}

type NasEmmProcWithType_AuthProc struct {
	AuthProc *AuthProc `protobuf:"bytes,5,opt,name=auth_proc,json=authProc,proto3,oneof"`
}

func (*NasEmmProcWithType_AttachProc) isNasEmmProcWithType_MessageTypes() {}

func (*NasEmmProcWithType_DetachProc) isNasEmmProcWithType_MessageTypes() {}

func (*NasEmmProcWithType_SmcProc) isNasEmmProcWithType_MessageTypes() {}

func (*NasEmmProcWithType_AuthProc) isNasEmmProcWithType_MessageTypes() {}

// nas_proc_mess_sign_t
type NasProcMessSign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Puid         uint64 `protobuf:"varint,1,opt,name=puid,proto3" json:"puid,omitempty"`
	Digest       []byte `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
	DigestLength uint64 `protobuf:"varint,3,opt,name=digest_length,json=digestLength,proto3" json:"digest_length,omitempty"`
	NasMsgLength uint64 `protobuf:"varint,4,opt,name=nas_msg_length,json=nasMsgLength,proto3" json:"nas_msg_length,omitempty"`
}

func (x *NasProcMessSign) Reset() {
	*x = NasProcMessSign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NasProcMessSign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NasProcMessSign) ProtoMessage() {}

func (x *NasProcMessSign) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NasProcMessSign.ProtoReflect.Descriptor instead.
func (*NasProcMessSign) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{21}
}

func (x *NasProcMessSign) GetPuid() uint64 {
	if x != nil {
		return x.Puid
	}
	return 0
}

func (x *NasProcMessSign) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

func (x *NasProcMessSign) GetDigestLength() uint64 {
	if x != nil {
		return x.DigestLength
	}
	return 0
}

func (x *NasProcMessSign) GetNasMsgLength() uint64 {
	if x != nil {
		return x.NasMsgLength
	}
	return 0
}

// emm_procedures_t
type EmmProcedures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmmSpecificProc             *NasEmmProcWithType   `protobuf:"bytes,1,opt,name=emm_specific_proc,json=emmSpecificProc,proto3" json:"emm_specific_proc,omitempty"`
	EmmCommonProc               []*NasEmmProcWithType `protobuf:"bytes,2,rep,name=emm_common_proc,json=emmCommonProc,proto3" json:"emm_common_proc,omitempty"`
	CnProc                      []*NasCnProc          `protobuf:"bytes,3,rep,name=cn_proc,json=cnProc,proto3" json:"cn_proc,omitempty"`
	EmmConMngtProc              *NasEmmProcWithType   `protobuf:"bytes,4,opt,name=emm_con_mngt_proc,json=emmConMngtProc,proto3" json:"emm_con_mngt_proc,omitempty"`
	NasProcMessSignNextLocation uint32                `protobuf:"varint,5,opt,name=nas_proc_mess_sign_next_location,json=nasProcMessSignNextLocation,proto3" json:"nas_proc_mess_sign_next_location,omitempty"`
	NasProcMessSign             []*NasProcMessSign    `protobuf:"bytes,6,rep,name=nas_proc_mess_sign,json=nasProcMessSign,proto3" json:"nas_proc_mess_sign,omitempty"`
}

func (x *EmmProcedures) Reset() {
	*x = EmmProcedures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmmProcedures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmmProcedures) ProtoMessage() {}

func (x *EmmProcedures) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmmProcedures.ProtoReflect.Descriptor instead.
func (*EmmProcedures) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{22}
}

func (x *EmmProcedures) GetEmmSpecificProc() *NasEmmProcWithType {
	if x != nil {
		return x.EmmSpecificProc
	}
	return nil
}

func (x *EmmProcedures) GetEmmCommonProc() []*NasEmmProcWithType {
	if x != nil {
		return x.EmmCommonProc
	}
	return nil
}

func (x *EmmProcedures) GetCnProc() []*NasCnProc {
	if x != nil {
		return x.CnProc
	}
	return nil
}

func (x *EmmProcedures) GetEmmConMngtProc() *NasEmmProcWithType {
	if x != nil {
		return x.EmmConMngtProc
	}
	return nil
}

func (x *EmmProcedures) GetNasProcMessSignNextLocation() uint32 {
	if x != nil {
		return x.NasProcMessSignNextLocation
	}
	return 0
}

func (x *EmmProcedures) GetNasProcMessSign() []*NasProcMessSign {
	if x != nil {
		return x.NasProcMessSign
	}
	return nil
}

// emm_common_data_t
type EmmCommonData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pointer uint64 `protobuf:"varint,200,opt,name=pointer,proto3" json:"pointer,omitempty"`
}

func (x *EmmCommonData) Reset() {
	*x = EmmCommonData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmmCommonData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmmCommonData) ProtoMessage() {}

func (x *EmmCommonData) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmmCommonData.ProtoReflect.Descriptor instead.
func (*EmmCommonData) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{23}
}

func (x *EmmCommonData) GetPointer() uint64 {
	if x != nil {
		return x.Pointer
	}
	return 0
}

// emm_security_context_t
type EmmSecurityContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScType               uint32                                 `protobuf:"varint,1,opt,name=sc_type,json=scType,proto3" json:"sc_type,omitempty"`
	Eksi                 uint32                                 `protobuf:"varint,2,opt,name=eksi,proto3" json:"eksi,omitempty"`
	VectorIndex          uint32                                 `protobuf:"varint,3,opt,name=vector_index,json=vectorIndex,proto3" json:"vector_index,omitempty"`
	KnasEnc              []byte                                 `protobuf:"bytes,4,opt,name=knas_enc,json=knasEnc,proto3" json:"knas_enc,omitempty"`
	KnasInt              []byte                                 `protobuf:"bytes,5,opt,name=knas_int,json=knasInt,proto3" json:"knas_int,omitempty"`
	DlCount              *EmmSecurityContext_Count              `protobuf:"bytes,6,opt,name=dl_count,json=dlCount,proto3" json:"dl_count,omitempty"`
	UlCount              *EmmSecurityContext_Count              `protobuf:"bytes,7,opt,name=ul_count,json=ulCount,proto3" json:"ul_count,omitempty"`
	KenbUlCount          *EmmSecurityContext_Count              `protobuf:"bytes,8,opt,name=kenb_ul_count,json=kenbUlCount,proto3" json:"kenb_ul_count,omitempty"`
	Capability           *EmmSecurityContext_Capability         `protobuf:"bytes,9,opt,name=capability,proto3" json:"capability,omitempty"`
	SelectedAlgos        *EmmSecurityContext_SelectedAlgorithms `protobuf:"bytes,10,opt,name=selected_algos,json=selectedAlgos,proto3" json:"selected_algos,omitempty"`
	Activated            uint32                                 `protobuf:"varint,11,opt,name=activated,proto3" json:"activated,omitempty"`
	DirectionEncode      uint32                                 `protobuf:"varint,12,opt,name=direction_encode,json=directionEncode,proto3" json:"direction_encode,omitempty"` // SECU_DIRECTION_DOWNLINK, SECU_DIRECTION_UPLINK
	DirectionDecode      uint32                                 `protobuf:"varint,13,opt,name=direction_decode,json=directionDecode,proto3" json:"direction_decode,omitempty"`
	NextHop              []byte                                 `protobuf:"bytes,14,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	NextHopChainingCount uint32                                 `protobuf:"varint,15,opt,name=next_hop_chaining_count,json=nextHopChainingCount,proto3" json:"next_hop_chaining_count,omitempty"`
}

func (x *EmmSecurityContext) Reset() {
	*x = EmmSecurityContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmmSecurityContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmmSecurityContext) ProtoMessage() {}

func (x *EmmSecurityContext) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmmSecurityContext.ProtoReflect.Descriptor instead.
func (*EmmSecurityContext) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{24}
}

func (x *EmmSecurityContext) GetScType() uint32 {
	if x != nil {
		return x.ScType
	}
	return 0
}

func (x *EmmSecurityContext) GetEksi() uint32 {
	if x != nil {
		return x.Eksi
	}
	return 0
}

func (x *EmmSecurityContext) GetVectorIndex() uint32 {
	if x != nil {
		return x.VectorIndex
	}
	return 0
}

func (x *EmmSecurityContext) GetKnasEnc() []byte {
	if x != nil {
		return x.KnasEnc
	}
	return nil
}

func (x *EmmSecurityContext) GetKnasInt() []byte {
	if x != nil {
		return x.KnasInt
	}
	return nil
}

func (x *EmmSecurityContext) GetDlCount() *EmmSecurityContext_Count {
	if x != nil {
		return x.DlCount
	}
	return nil
}

func (x *EmmSecurityContext) GetUlCount() *EmmSecurityContext_Count {
	if x != nil {
		return x.UlCount
	}
	return nil
}

func (x *EmmSecurityContext) GetKenbUlCount() *EmmSecurityContext_Count {
	if x != nil {
		return x.KenbUlCount
	}
	return nil
}

func (x *EmmSecurityContext) GetCapability() *EmmSecurityContext_Capability {
	if x != nil {
		return x.Capability
	}
	return nil
}

func (x *EmmSecurityContext) GetSelectedAlgos() *EmmSecurityContext_SelectedAlgorithms {
	if x != nil {
		return x.SelectedAlgos
	}
	return nil
}

func (x *EmmSecurityContext) GetActivated() uint32 {
	if x != nil {
		return x.Activated
	}
	return 0
}

func (x *EmmSecurityContext) GetDirectionEncode() uint32 {
	if x != nil {
		return x.DirectionEncode
	}
	return 0
}

func (x *EmmSecurityContext) GetDirectionDecode() uint32 {
	if x != nil {
		return x.DirectionDecode
	}
	return 0
}

func (x *EmmSecurityContext) GetNextHop() []byte {
	if x != nil {
		return x.NextHop
	}
	return nil
}

func (x *EmmSecurityContext) GetNextHopChainingCount() uint32 {
	if x != nil {
		return x.NextHopChainingCount
	}
	return 0
}

// auth_vector_t
type AuthVector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kasme []byte `protobuf:"bytes,1,opt,name=kasme,proto3" json:"kasme,omitempty"`
	Rand  []byte `protobuf:"bytes,2,opt,name=rand,proto3" json:"rand,omitempty"`
	Autn  []byte `protobuf:"bytes,3,opt,name=autn,proto3" json:"autn,omitempty"`
	Xres  []byte `protobuf:"bytes,4,opt,name=xres,proto3" json:"xres,omitempty"`
}

func (x *AuthVector) Reset() {
	*x = AuthVector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthVector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthVector) ProtoMessage() {}

func (x *AuthVector) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthVector.ProtoReflect.Descriptor instead.
func (*AuthVector) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{25}
}

func (x *AuthVector) GetKasme() []byte {
	if x != nil {
		return x.Kasme
	}
	return nil
}

func (x *AuthVector) GetRand() []byte {
	if x != nil {
		return x.Rand
	}
	return nil
}

func (x *AuthVector) GetAutn() []byte {
	if x != nil {
		return x.Autn
	}
	return nil
}

func (x *AuthVector) GetXres() []byte {
	if x != nil {
		return x.Xres
	}
	return nil
}

// ue_network_capability_t
type UeNetworkCapability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eea  uint32 `protobuf:"varint,1,opt,name=eea,proto3" json:"eea,omitempty"`
	Eia  uint32 `protobuf:"varint,2,opt,name=eia,proto3" json:"eia,omitempty"`
	Uea  uint32 `protobuf:"varint,3,opt,name=uea,proto3" json:"uea,omitempty"`
	Ucs2 uint32 `protobuf:"varint,4,opt,name=ucs2,proto3" json:"ucs2,omitempty"`
	Uia  uint32 `protobuf:"varint,5,opt,name=uia,proto3" json:"uia,omitempty"`
	// Deprecated: Do not use.
	Spare       uint32 `protobuf:"varint,6,opt,name=spare,proto3" json:"spare,omitempty"`
	Csfb        uint32 `protobuf:"varint,7,opt,name=csfb,proto3" json:"csfb,omitempty"`
	Lpp         uint32 `protobuf:"varint,8,opt,name=lpp,proto3" json:"lpp,omitempty"`
	Lcs         uint32 `protobuf:"varint,9,opt,name=lcs,proto3" json:"lcs,omitempty"`
	Srvcc       uint32 `protobuf:"varint,10,opt,name=srvcc,proto3" json:"srvcc,omitempty"`
	Nf          uint32 `protobuf:"varint,11,opt,name=nf,proto3" json:"nf,omitempty"`
	Prosedd     uint32 `protobuf:"varint,12,opt,name=prosedd,proto3" json:"prosedd,omitempty"`
	Prose       uint32 `protobuf:"varint,13,opt,name=prose,proto3" json:"prose,omitempty"`
	H245Ash     uint32 `protobuf:"varint,14,opt,name=h245ash,proto3" json:"h245ash,omitempty"`
	Epco        uint32 `protobuf:"varint,15,opt,name=epco,proto3" json:"epco,omitempty"`
	Hccpciot    uint32 `protobuf:"varint,16,opt,name=hccpciot,proto3" json:"hccpciot,omitempty"`
	Erwfopdn    uint32 `protobuf:"varint,17,opt,name=erwfopdn,proto3" json:"erwfopdn,omitempty"`
	S1Udata     uint32 `protobuf:"varint,18,opt,name=s1udata,proto3" json:"s1udata,omitempty"`
	Upciot      uint32 `protobuf:"varint,19,opt,name=upciot,proto3" json:"upciot,omitempty"`
	UmtsPresent bool   `protobuf:"varint,20,opt,name=umts_present,json=umtsPresent,proto3" json:"umts_present,omitempty"`
	// Deprecated: Do not use.
	MiscPresent bool   `protobuf:"varint,21,opt,name=misc_present,json=miscPresent,proto3" json:"misc_present,omitempty"`
	Cpciot      uint32 `protobuf:"varint,22,opt,name=cpciot,proto3" json:"cpciot,omitempty"`
	Proserelay  uint32 `protobuf:"varint,23,opt,name=proserelay,proto3" json:"proserelay,omitempty"`
	Prosedc     uint32 `protobuf:"varint,24,opt,name=prosedc,proto3" json:"prosedc,omitempty"`
	Bearer      uint32 `protobuf:"varint,25,opt,name=bearer,proto3" json:"bearer,omitempty"`
	Sgc         uint32 `protobuf:"varint,26,opt,name=sgc,proto3" json:"sgc,omitempty"`
	N1Mod       uint32 `protobuf:"varint,27,opt,name=n1mod,proto3" json:"n1mod,omitempty"`
	Dcnr        uint32 `protobuf:"varint,28,opt,name=dcnr,proto3" json:"dcnr,omitempty"`
	Cpbackoff   uint32 `protobuf:"varint,29,opt,name=cpbackoff,proto3" json:"cpbackoff,omitempty"`
	Restrictec  uint32 `protobuf:"varint,30,opt,name=restrictec,proto3" json:"restrictec,omitempty"`
	V2Xpc5      uint32 `protobuf:"varint,31,opt,name=v2xpc5,proto3" json:"v2xpc5,omitempty"`
	Multipledrb uint32 `protobuf:"varint,32,opt,name=multipledrb,proto3" json:"multipledrb,omitempty"`
	Length      uint32 `protobuf:"varint,33,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *UeNetworkCapability) Reset() {
	*x = UeNetworkCapability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UeNetworkCapability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UeNetworkCapability) ProtoMessage() {}

func (x *UeNetworkCapability) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UeNetworkCapability.ProtoReflect.Descriptor instead.
func (*UeNetworkCapability) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{26}
}

func (x *UeNetworkCapability) GetEea() uint32 {
	if x != nil {
		return x.Eea
	}
	return 0
}

func (x *UeNetworkCapability) GetEia() uint32 {
	if x != nil {
		return x.Eia
	}
	return 0
}

func (x *UeNetworkCapability) GetUea() uint32 {
	if x != nil {
		return x.Uea
	}
	return 0
}

func (x *UeNetworkCapability) GetUcs2() uint32 {
	if x != nil {
		return x.Ucs2
	}
	return 0
}

func (x *UeNetworkCapability) GetUia() uint32 {
	if x != nil {
		return x.Uia
	}
	return 0
}

// Deprecated: Do not use.
func (x *UeNetworkCapability) GetSpare() uint32 {
	if x != nil {
		return x.Spare
	}
	return 0
}

func (x *UeNetworkCapability) GetCsfb() uint32 {
	if x != nil {
		return x.Csfb
	}
	return 0
}

func (x *UeNetworkCapability) GetLpp() uint32 {
	if x != nil {
		return x.Lpp
	}
	return 0
}

func (x *UeNetworkCapability) GetLcs() uint32 {
	if x != nil {
		return x.Lcs
	}
	return 0
}

func (x *UeNetworkCapability) GetSrvcc() uint32 {
	if x != nil {
		return x.Srvcc
	}
	return 0
}

func (x *UeNetworkCapability) GetNf() uint32 {
	if x != nil {
		return x.Nf
	}
	return 0
}

func (x *UeNetworkCapability) GetProsedd() uint32 {
	if x != nil {
		return x.Prosedd
	}
	return 0
}

func (x *UeNetworkCapability) GetProse() uint32 {
	if x != nil {
		return x.Prose
	}
	return 0
}

func (x *UeNetworkCapability) GetH245Ash() uint32 {
	if x != nil {
		return x.H245Ash
	}
	return 0
}

func (x *UeNetworkCapability) GetEpco() uint32 {
	if x != nil {
		return x.Epco
	}
	return 0
}

func (x *UeNetworkCapability) GetHccpciot() uint32 {
	if x != nil {
		return x.Hccpciot
	}
	return 0
}

func (x *UeNetworkCapability) GetErwfopdn() uint32 {
	if x != nil {
		return x.Erwfopdn
	}
	return 0
}

func (x *UeNetworkCapability) GetS1Udata() uint32 {
	if x != nil {
		return x.S1Udata
	}
	return 0
}

func (x *UeNetworkCapability) GetUpciot() uint32 {
	if x != nil {
		return x.Upciot
	}
	return 0
}

func (x *UeNetworkCapability) GetUmtsPresent() bool {
	if x != nil {
		return x.UmtsPresent
	}
	return false
}

// Deprecated: Do not use.
func (x *UeNetworkCapability) GetMiscPresent() bool {
	if x != nil {
		return x.MiscPresent
	}
	return false
}

func (x *UeNetworkCapability) GetCpciot() uint32 {
	if x != nil {
		return x.Cpciot
	}
	return 0
}

func (x *UeNetworkCapability) GetProserelay() uint32 {
	if x != nil {
		return x.Proserelay
	}
	return 0
}

func (x *UeNetworkCapability) GetProsedc() uint32 {
	if x != nil {
		return x.Prosedc
	}
	return 0
}

func (x *UeNetworkCapability) GetBearer() uint32 {
	if x != nil {
		return x.Bearer
	}
	return 0
}

func (x *UeNetworkCapability) GetSgc() uint32 {
	if x != nil {
		return x.Sgc
	}
	return 0
}

func (x *UeNetworkCapability) GetN1Mod() uint32 {
	if x != nil {
		return x.N1Mod
	}
	return 0
}

func (x *UeNetworkCapability) GetDcnr() uint32 {
	if x != nil {
		return x.Dcnr
	}
	return 0
}

func (x *UeNetworkCapability) GetCpbackoff() uint32 {
	if x != nil {
		return x.Cpbackoff
	}
	return 0
}

func (x *UeNetworkCapability) GetRestrictec() uint32 {
	if x != nil {
		return x.Restrictec
	}
	return 0
}

func (x *UeNetworkCapability) GetV2Xpc5() uint32 {
	if x != nil {
		return x.V2Xpc5
	}
	return 0
}

func (x *UeNetworkCapability) GetMultipledrb() uint32 {
	if x != nil {
		return x.Multipledrb
	}
	return 0
}

func (x *UeNetworkCapability) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

// ue_additional_security_capability_t
type UeAdditionalSecurityCapability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ea uint32 `protobuf:"varint,1,opt,name=ea,proto3" json:"ea,omitempty"`
	Ia uint32 `protobuf:"varint,2,opt,name=ia,proto3" json:"ia,omitempty"`
}

func (x *UeAdditionalSecurityCapability) Reset() {
	*x = UeAdditionalSecurityCapability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UeAdditionalSecurityCapability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UeAdditionalSecurityCapability) ProtoMessage() {}

func (x *UeAdditionalSecurityCapability) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UeAdditionalSecurityCapability.ProtoReflect.Descriptor instead.
func (*UeAdditionalSecurityCapability) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{27}
}

func (x *UeAdditionalSecurityCapability) GetEa() uint32 {
	if x != nil {
		return x.Ea
	}
	return 0
}

func (x *UeAdditionalSecurityCapability) GetIa() uint32 {
	if x != nil {
		return x.Ia
	}
	return 0
}

// bearer_qos_t
type BearerQos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pci uint32 `protobuf:"varint,1,opt,name=pci,proto3" json:"pci,omitempty"`
	Pl  uint32 `protobuf:"varint,2,opt,name=pl,proto3" json:"pl,omitempty"`
	Pvi uint32 `protobuf:"varint,3,opt,name=pvi,proto3" json:"pvi,omitempty"`
	Qci uint32 `protobuf:"varint,4,opt,name=qci,proto3" json:"qci,omitempty"`
	Gbr *Ambr  `protobuf:"bytes,5,opt,name=gbr,proto3" json:"gbr,omitempty"`
	Mbr *Ambr  `protobuf:"bytes,6,opt,name=mbr,proto3" json:"mbr,omitempty"`
}

func (x *BearerQos) Reset() {
	*x = BearerQos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BearerQos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BearerQos) ProtoMessage() {}

func (x *BearerQos) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BearerQos.ProtoReflect.Descriptor instead.
func (*BearerQos) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{28}
}

func (x *BearerQos) GetPci() uint32 {
	if x != nil {
		return x.Pci
	}
	return 0
}

func (x *BearerQos) GetPl() uint32 {
	if x != nil {
		return x.Pl
	}
	return 0
}

func (x *BearerQos) GetPvi() uint32 {
	if x != nil {
		return x.Pvi
	}
	return 0
}

func (x *BearerQos) GetQci() uint32 {
	if x != nil {
		return x.Qci
	}
	return 0
}

func (x *BearerQos) GetGbr() *Ambr {
	if x != nil {
		return x.Gbr
	}
	return nil
}

func (x *BearerQos) GetMbr() *Ambr {
	if x != nil {
		return x.Mbr
	}
	return nil
}

// pco_protocol_or_container_id_t
type PcoProtocolOrContainerId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Length   uint32 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	Contents []byte `protobuf:"bytes,3,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *PcoProtocolOrContainerId) Reset() {
	*x = PcoProtocolOrContainerId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PcoProtocolOrContainerId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PcoProtocolOrContainerId) ProtoMessage() {}

func (x *PcoProtocolOrContainerId) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PcoProtocolOrContainerId.ProtoReflect.Descriptor instead.
func (*PcoProtocolOrContainerId) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{29}
}

func (x *PcoProtocolOrContainerId) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PcoProtocolOrContainerId) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *PcoProtocolOrContainerId) GetContents() []byte {
	if x != nil {
		return x.Contents
	}
	return nil
}

// protocol_configuration_options_t
type ProtocolConfigurationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ext                      uint32                      `protobuf:"varint,1,opt,name=ext,proto3" json:"ext,omitempty"`
	Spare                    uint32                      `protobuf:"varint,2,opt,name=spare,proto3" json:"spare,omitempty"`
	ConfigProtocol           uint32                      `protobuf:"varint,3,opt,name=config_protocol,json=configProtocol,proto3" json:"config_protocol,omitempty"`
	NumProtocolOrContainerId uint32                      `protobuf:"varint,4,opt,name=num_protocol_or_container_id,json=numProtocolOrContainerId,proto3" json:"num_protocol_or_container_id,omitempty"`
	ProtoOrContainerId       []*PcoProtocolOrContainerId `protobuf:"bytes,5,rep,name=proto_or_container_id,json=protoOrContainerId,proto3" json:"proto_or_container_id,omitempty"`
}

func (x *ProtocolConfigurationOptions) Reset() {
	*x = ProtocolConfigurationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolConfigurationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolConfigurationOptions) ProtoMessage() {}

func (x *ProtocolConfigurationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolConfigurationOptions.ProtoReflect.Descriptor instead.
func (*ProtocolConfigurationOptions) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{30}
}

func (x *ProtocolConfigurationOptions) GetExt() uint32 {
	if x != nil {
		return x.Ext
	}
	return 0
}

func (x *ProtocolConfigurationOptions) GetSpare() uint32 {
	if x != nil {
		return x.Spare
	}
	return 0
}

func (x *ProtocolConfigurationOptions) GetConfigProtocol() uint32 {
	if x != nil {
		return x.ConfigProtocol
	}
	return 0
}

func (x *ProtocolConfigurationOptions) GetNumProtocolOrContainerId() uint32 {
	if x != nil {
		return x.NumProtocolOrContainerId
	}
	return 0
}

func (x *ProtocolConfigurationOptions) GetProtoOrContainerId() []*PcoProtocolOrContainerId {
	if x != nil {
		return x.ProtoOrContainerId
	}
	return nil
}

// 3485 and 3495 Timer argument
type EsmEbrTimerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UeId   uint32 `protobuf:"varint,1,opt,name=ue_id,json=ueId,proto3" json:"ue_id,omitempty"`
	Ebi    uint32 `protobuf:"varint,2,opt,name=ebi,proto3" json:"ebi,omitempty"`
	Count  uint32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	EsmMsg []byte `protobuf:"bytes,4,opt,name=esm_msg,json=esmMsg,proto3" json:"esm_msg,omitempty"`
}

func (x *EsmEbrTimerData) Reset() {
	*x = EsmEbrTimerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EsmEbrTimerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EsmEbrTimerData) ProtoMessage() {}

func (x *EsmEbrTimerData) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EsmEbrTimerData.ProtoReflect.Descriptor instead.
func (*EsmEbrTimerData) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{31}
}

func (x *EsmEbrTimerData) GetUeId() uint32 {
	if x != nil {
		return x.UeId
	}
	return 0
}

func (x *EsmEbrTimerData) GetEbi() uint32 {
	if x != nil {
		return x.Ebi
	}
	return 0
}

func (x *EsmEbrTimerData) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *EsmEbrTimerData) GetEsmMsg() []byte {
	if x != nil {
		return x.EsmMsg
	}
	return nil
}

// esm_proc_data_t
type EsmProcData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pti         uint32                        `protobuf:"varint,1,opt,name=pti,proto3" json:"pti,omitempty"`
	RequestType uint32                        `protobuf:"varint,2,opt,name=request_type,json=requestType,proto3" json:"request_type,omitempty"`
	Apn         string                        `protobuf:"bytes,3,opt,name=apn,proto3" json:"apn,omitempty"`
	PdnCid      uint32                        `protobuf:"varint,4,opt,name=pdn_cid,json=pdnCid,proto3" json:"pdn_cid,omitempty"`
	PdnType     uint32                        `protobuf:"varint,5,opt,name=pdn_type,json=pdnType,proto3" json:"pdn_type,omitempty"` // esm_proc_pdn_type_t
	PdnAddr     string                        `protobuf:"bytes,6,opt,name=pdn_addr,json=pdnAddr,proto3" json:"pdn_addr,omitempty"`
	BearerQos   *BearerQos                    `protobuf:"bytes,7,opt,name=bearer_qos,json=bearerQos,proto3" json:"bearer_qos,omitempty"`
	Pco         *ProtocolConfigurationOptions `protobuf:"bytes,8,opt,name=pco,proto3" json:"pco,omitempty"`
}

func (x *EsmProcData) Reset() {
	*x = EsmProcData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EsmProcData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EsmProcData) ProtoMessage() {}

func (x *EsmProcData) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EsmProcData.ProtoReflect.Descriptor instead.
func (*EsmProcData) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{32}
}

func (x *EsmProcData) GetPti() uint32 {
	if x != nil {
		return x.Pti
	}
	return 0
}

func (x *EsmProcData) GetRequestType() uint32 {
	if x != nil {
		return x.RequestType
	}
	return 0
}

func (x *EsmProcData) GetApn() string {
	if x != nil {
		return x.Apn
	}
	return ""
}

func (x *EsmProcData) GetPdnCid() uint32 {
	if x != nil {
		return x.PdnCid
	}
	return 0
}

func (x *EsmProcData) GetPdnType() uint32 {
	if x != nil {
		return x.PdnType
	}
	return 0
}

func (x *EsmProcData) GetPdnAddr() string {
	if x != nil {
		return x.PdnAddr
	}
	return ""
}

func (x *EsmProcData) GetBearerQos() *BearerQos {
	if x != nil {
		return x.BearerQos
	}
	return nil
}

func (x *EsmProcData) GetPco() *ProtocolConfigurationOptions {
	if x != nil {
		return x.Pco
	}
	return nil
}

// esm_context_t
type EsmContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NActiveEbrs uint32 `protobuf:"varint,1,opt,name=n_active_ebrs,json=nActiveEbrs,proto3" json:"n_active_ebrs,omitempty"`
	// field 2 and 3 are deprecated
	IsEmergency bool         `protobuf:"varint,4,opt,name=is_emergency,json=isEmergency,proto3" json:"is_emergency,omitempty"`
	EsmProcData *EsmProcData `protobuf:"bytes,5,opt,name=esm_proc_data,json=esmProcData,proto3" json:"esm_proc_data,omitempty"`
	T3489       *Timer       `protobuf:"bytes,199,opt,name=t3489,proto3" json:"t3489,omitempty"`
	// Deprecated: Do not use.
	IsStandalone      bool  `protobuf:"varint,200,opt,name=is_standalone,json=isStandalone,proto3" json:"is_standalone,omitempty"`
	IsPdnDisconnect   bool  `protobuf:"varint,201,opt,name=is_pdn_disconnect,json=isPdnDisconnect,proto3" json:"is_pdn_disconnect,omitempty"`
	PendingStandalone int32 `protobuf:"varint,202,opt,name=pending_standalone,json=pendingStandalone,proto3" json:"pending_standalone,omitempty"`
}

func (x *EsmContext) Reset() {
	*x = EsmContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EsmContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EsmContext) ProtoMessage() {}

func (x *EsmContext) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EsmContext.ProtoReflect.Descriptor instead.
func (*EsmContext) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{33}
}

func (x *EsmContext) GetNActiveEbrs() uint32 {
	if x != nil {
		return x.NActiveEbrs
	}
	return 0
}

func (x *EsmContext) GetIsEmergency() bool {
	if x != nil {
		return x.IsEmergency
	}
	return false
}

func (x *EsmContext) GetEsmProcData() *EsmProcData {
	if x != nil {
		return x.EsmProcData
	}
	return nil
}

func (x *EsmContext) GetT3489() *Timer {
	if x != nil {
		return x.T3489
	}
	return nil
}

// Deprecated: Do not use.
func (x *EsmContext) GetIsStandalone() bool {
	if x != nil {
		return x.IsStandalone
	}
	return false
}

func (x *EsmContext) GetIsPdnDisconnect() bool {
	if x != nil {
		return x.IsPdnDisconnect
	}
	return false
}

func (x *EsmContext) GetPendingStandalone() int32 {
	if x != nil {
		return x.PendingStandalone
	}
	return 0
}

// esm_ebr_context_t
type EsmEbrContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          uint32                        `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"` // esm_ebr_state
	GbrDl           uint64                        `protobuf:"varint,2,opt,name=gbr_dl,json=gbrDl,proto3" json:"gbr_dl,omitempty"`
	GbrUl           uint64                        `protobuf:"varint,3,opt,name=gbr_ul,json=gbrUl,proto3" json:"gbr_ul,omitempty"`
	MbrDl           uint64                        `protobuf:"varint,4,opt,name=mbr_dl,json=mbrDl,proto3" json:"mbr_dl,omitempty"`
	MbrUl           uint64                        `protobuf:"varint,5,opt,name=mbr_ul,json=mbrUl,proto3" json:"mbr_ul,omitempty"`
	Tft             *TrafficFlowTemplate          `protobuf:"bytes,6,opt,name=tft,proto3" json:"tft,omitempty"`
	Pco             *ProtocolConfigurationOptions `protobuf:"bytes,7,opt,name=pco,proto3" json:"pco,omitempty"`
	Timer           *Timer                        `protobuf:"bytes,100,opt,name=timer,proto3" json:"timer,omitempty"` // nas_timer_t
	EsmEbrTimerData *EsmEbrTimerData              `protobuf:"bytes,101,opt,name=esm_ebr_timer_data,json=esmEbrTimerData,proto3" json:"esm_ebr_timer_data,omitempty"`
}

func (x *EsmEbrContext) Reset() {
	*x = EsmEbrContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EsmEbrContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EsmEbrContext) ProtoMessage() {}

func (x *EsmEbrContext) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EsmEbrContext.ProtoReflect.Descriptor instead.
func (*EsmEbrContext) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{34}
}

func (x *EsmEbrContext) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *EsmEbrContext) GetGbrDl() uint64 {
	if x != nil {
		return x.GbrDl
	}
	return 0
}

func (x *EsmEbrContext) GetGbrUl() uint64 {
	if x != nil {
		return x.GbrUl
	}
	return 0
}

func (x *EsmEbrContext) GetMbrDl() uint64 {
	if x != nil {
		return x.MbrDl
	}
	return 0
}

func (x *EsmEbrContext) GetMbrUl() uint64 {
	if x != nil {
		return x.MbrUl
	}
	return 0
}

func (x *EsmEbrContext) GetTft() *TrafficFlowTemplate {
	if x != nil {
		return x.Tft
	}
	return nil
}

func (x *EsmEbrContext) GetPco() *ProtocolConfigurationOptions {
	if x != nil {
		return x.Pco
	}
	return nil
}

func (x *EsmEbrContext) GetTimer() *Timer {
	if x != nil {
		return x.Timer
	}
	return nil
}

func (x *EsmEbrContext) GetEsmEbrTimerData() *EsmEbrTimerData {
	if x != nil {
		return x.EsmEbrTimerData
	}
	return nil
}

// t3422_arg is nw_detach_data_t
type NwDetachData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UeId                uint32 `protobuf:"varint,1,opt,name=ue_id,json=ueId,proto3" json:"ue_id,omitempty"`
	RetransmissionCount uint32 `protobuf:"varint,2,opt,name=retransmission_count,json=retransmissionCount,proto3" json:"retransmission_count,omitempty"`
	DetachType          uint32 `protobuf:"varint,3,opt,name=detach_type,json=detachType,proto3" json:"detach_type,omitempty"`
}

func (x *NwDetachData) Reset() {
	*x = NwDetachData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NwDetachData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NwDetachData) ProtoMessage() {}

func (x *NwDetachData) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NwDetachData.ProtoReflect.Descriptor instead.
func (*NwDetachData) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{35}
}

func (x *NwDetachData) GetUeId() uint32 {
	if x != nil {
		return x.UeId
	}
	return 0
}

func (x *NwDetachData) GetRetransmissionCount() uint32 {
	if x != nil {
		return x.RetransmissionCount
	}
	return 0
}

func (x *NwDetachData) GetDetachType() uint32 {
	if x != nil {
		return x.DetachType
	}
	return 0
}

// Re-transmitted Attach Req info
type NewAttachInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MmeUeS1ApId uint32            `protobuf:"varint,1,opt,name=mme_ue_s1ap_id,json=mmeUeS1apId,proto3" json:"mme_ue_s1ap_id,omitempty"`
	IsMmCtxNew  bool              `protobuf:"varint,2,opt,name=is_mm_ctx_new,json=isMmCtxNew,proto3" json:"is_mm_ctx_new,omitempty"`
	Ies         *AttachRequestIes `protobuf:"bytes,3,opt,name=ies,proto3" json:"ies,omitempty"`
}

func (x *NewAttachInfo) Reset() {
	*x = NewAttachInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewAttachInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewAttachInfo) ProtoMessage() {}

func (x *NewAttachInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewAttachInfo.ProtoReflect.Descriptor instead.
func (*NewAttachInfo) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{36}
}

func (x *NewAttachInfo) GetMmeUeS1ApId() uint32 {
	if x != nil {
		return x.MmeUeS1ApId
	}
	return 0
}

func (x *NewAttachInfo) GetIsMmCtxNew() bool {
	if x != nil {
		return x.IsMmCtxNew
	}
	return false
}

func (x *NewAttachInfo) GetIes() *AttachRequestIes {
	if x != nil {
		return x.Ies
	}
	return nil
}

// emm_context_t
type EmmContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imsi64                         uint64                          `protobuf:"varint,1,opt,name=imsi64,proto3" json:"imsi64,omitempty"` //imsi64_t
	Imsi                           *IdentityTuple                  `protobuf:"bytes,2,opt,name=imsi,proto3" json:"imsi,omitempty"`      // imsi_t
	SavedImsi64                    uint64                          `protobuf:"varint,3,opt,name=saved_imsi64,json=savedImsi64,proto3" json:"saved_imsi64,omitempty"`
	Imei                           *IdentityTuple                  `protobuf:"bytes,4,opt,name=imei,proto3" json:"imei,omitempty"`     //imei_t
	Imeisv                         *IdentityTuple                  `protobuf:"bytes,5,opt,name=imeisv,proto3" json:"imeisv,omitempty"` // imeisv_t
	EmmCause                       uint32                          `protobuf:"varint,6,opt,name=emm_cause,json=emmCause,proto3" json:"emm_cause,omitempty"`
	EmmFsmState                    uint32                          `protobuf:"varint,7,opt,name=emm_fsm_state,json=emmFsmState,proto3" json:"emm_fsm_state,omitempty"` // emm_fsm_state_t
	AttachType                     uint32                          `protobuf:"varint,8,opt,name=attach_type,json=attachType,proto3" json:"attach_type,omitempty"`
	EmmProcedures                  *EmmProcedures                  `protobuf:"bytes,11,opt,name=emm_procedures,json=emmProcedures,proto3" json:"emm_procedures,omitempty"`
	CommonProcMask                 uint32                          `protobuf:"varint,12,opt,name=common_proc_mask,json=commonProcMask,proto3" json:"common_proc_mask,omitempty"`
	EsmCtx                         *EsmContext                     `protobuf:"bytes,13,opt,name=esm_ctx,json=esmCtx,proto3" json:"esm_ctx,omitempty"`
	MemberPresentMask              uint32                          `protobuf:"varint,21,opt,name=member_present_mask,json=memberPresentMask,proto3" json:"member_present_mask,omitempty"`
	MemberValidMask                uint32                          `protobuf:"varint,22,opt,name=member_valid_mask,json=memberValidMask,proto3" json:"member_valid_mask,omitempty"`
	Vector                         []*AuthVector                   `protobuf:"bytes,23,rep,name=vector,proto3" json:"vector,omitempty"`
	Security                       *EmmSecurityContext             `protobuf:"bytes,24,opt,name=security,proto3" json:"security,omitempty"`
	XNonCurrentSecurity            *EmmSecurityContext             `protobuf:"bytes,25,opt,name=_non_current_security,json=NonCurrentSecurity,proto3" json:"_non_current_security,omitempty"`
	IsDynamic                      bool                            `protobuf:"varint,31,opt,name=is_dynamic,json=isDynamic,proto3" json:"is_dynamic,omitempty"`
	IsAttached                     bool                            `protobuf:"varint,32,opt,name=is_attached,json=isAttached,proto3" json:"is_attached,omitempty"`
	IsInitialIdentityImsi          bool                            `protobuf:"varint,33,opt,name=is_initial_identity_imsi,json=isInitialIdentityImsi,proto3" json:"is_initial_identity_imsi,omitempty"`
	IsGutiBasedAttach              bool                            `protobuf:"varint,34,opt,name=is_guti_based_attach,json=isGutiBasedAttach,proto3" json:"is_guti_based_attach,omitempty"`
	IsGutiSet                      bool                            `protobuf:"varint,35,opt,name=is_guti_set,json=isGutiSet,proto3" json:"is_guti_set,omitempty"`
	IsImsiOnlyDetach               bool                            `protobuf:"varint,36,opt,name=is_imsi_only_detach,json=isImsiOnlyDetach,proto3" json:"is_imsi_only_detach,omitempty"`
	IsEmergency                    bool                            `protobuf:"varint,37,opt,name=is_emergency,json=isEmergency,proto3" json:"is_emergency,omitempty"`
	AdditionalUpdateType           uint32                          `protobuf:"varint,41,opt,name=additional_update_type,json=additionalUpdateType,proto3" json:"additional_update_type,omitempty"`
	TauUpdtType                    uint32                          `protobuf:"varint,42,opt,name=tau_updt_type,json=tauUpdtType,proto3" json:"tau_updt_type,omitempty"`
	NumAttachRequest               uint32                          `protobuf:"varint,43,opt,name=num_attach_request,json=numAttachRequest,proto3" json:"num_attach_request,omitempty"`
	Guti                           *Guti                           `protobuf:"bytes,51,opt,name=guti,proto3" json:"guti,omitempty"`
	OldGuti                        *Guti                           `protobuf:"bytes,52,opt,name=old_guti,json=oldGuti,proto3" json:"old_guti,omitempty"`
	TaiList                        *TaiList                        `protobuf:"bytes,61,opt,name=tai_list,json=taiList,proto3" json:"tai_list,omitempty"`
	LvrTai                         *Tai                            `protobuf:"bytes,62,opt,name=lvr_tai,json=lvrTai,proto3" json:"lvr_tai,omitempty"`
	OriginatingTai                 *Tai                            `protobuf:"bytes,63,opt,name=originating_tai,json=originatingTai,proto3" json:"originating_tai,omitempty"`
	Ksi                            uint32                          `protobuf:"varint,64,opt,name=ksi,proto3" json:"ksi,omitempty"`
	UeNetworkCapability            *UeNetworkCapability            `protobuf:"bytes,65,opt,name=ue_network_capability,json=ueNetworkCapability,proto3" json:"ue_network_capability,omitempty"`
	NwDetachData                   *NwDetachData                   `protobuf:"bytes,66,opt,name=nw_detach_data,json=nwDetachData,proto3" json:"nw_detach_data,omitempty"`
	NewAttachInfo                  *NewAttachInfo                  `protobuf:"bytes,67,opt,name=new_attach_info,json=newAttachInfo,proto3" json:"new_attach_info,omitempty"`
	UeAdditionalSecurityCapability *UeAdditionalSecurityCapability `protobuf:"bytes,68,opt,name=ue_additional_security_capability,json=ueAdditionalSecurityCapability,proto3" json:"ue_additional_security_capability,omitempty"` // TODO: add remaining emm_context elements
}

func (x *EmmContext) Reset() {
	*x = EmmContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmmContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmmContext) ProtoMessage() {}

func (x *EmmContext) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmmContext.ProtoReflect.Descriptor instead.
func (*EmmContext) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{37}
}

func (x *EmmContext) GetImsi64() uint64 {
	if x != nil {
		return x.Imsi64
	}
	return 0
}

func (x *EmmContext) GetImsi() *IdentityTuple {
	if x != nil {
		return x.Imsi
	}
	return nil
}

func (x *EmmContext) GetSavedImsi64() uint64 {
	if x != nil {
		return x.SavedImsi64
	}
	return 0
}

func (x *EmmContext) GetImei() *IdentityTuple {
	if x != nil {
		return x.Imei
	}
	return nil
}

func (x *EmmContext) GetImeisv() *IdentityTuple {
	if x != nil {
		return x.Imeisv
	}
	return nil
}

func (x *EmmContext) GetEmmCause() uint32 {
	if x != nil {
		return x.EmmCause
	}
	return 0
}

func (x *EmmContext) GetEmmFsmState() uint32 {
	if x != nil {
		return x.EmmFsmState
	}
	return 0
}

func (x *EmmContext) GetAttachType() uint32 {
	if x != nil {
		return x.AttachType
	}
	return 0
}

func (x *EmmContext) GetEmmProcedures() *EmmProcedures {
	if x != nil {
		return x.EmmProcedures
	}
	return nil
}

func (x *EmmContext) GetCommonProcMask() uint32 {
	if x != nil {
		return x.CommonProcMask
	}
	return 0
}

func (x *EmmContext) GetEsmCtx() *EsmContext {
	if x != nil {
		return x.EsmCtx
	}
	return nil
}

func (x *EmmContext) GetMemberPresentMask() uint32 {
	if x != nil {
		return x.MemberPresentMask
	}
	return 0
}

func (x *EmmContext) GetMemberValidMask() uint32 {
	if x != nil {
		return x.MemberValidMask
	}
	return 0
}

func (x *EmmContext) GetVector() []*AuthVector {
	if x != nil {
		return x.Vector
	}
	return nil
}

func (x *EmmContext) GetSecurity() *EmmSecurityContext {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *EmmContext) GetXNonCurrentSecurity() *EmmSecurityContext {
	if x != nil {
		return x.XNonCurrentSecurity
	}
	return nil
}

func (x *EmmContext) GetIsDynamic() bool {
	if x != nil {
		return x.IsDynamic
	}
	return false
}

func (x *EmmContext) GetIsAttached() bool {
	if x != nil {
		return x.IsAttached
	}
	return false
}

func (x *EmmContext) GetIsInitialIdentityImsi() bool {
	if x != nil {
		return x.IsInitialIdentityImsi
	}
	return false
}

func (x *EmmContext) GetIsGutiBasedAttach() bool {
	if x != nil {
		return x.IsGutiBasedAttach
	}
	return false
}

func (x *EmmContext) GetIsGutiSet() bool {
	if x != nil {
		return x.IsGutiSet
	}
	return false
}

func (x *EmmContext) GetIsImsiOnlyDetach() bool {
	if x != nil {
		return x.IsImsiOnlyDetach
	}
	return false
}

func (x *EmmContext) GetIsEmergency() bool {
	if x != nil {
		return x.IsEmergency
	}
	return false
}

func (x *EmmContext) GetAdditionalUpdateType() uint32 {
	if x != nil {
		return x.AdditionalUpdateType
	}
	return 0
}

func (x *EmmContext) GetTauUpdtType() uint32 {
	if x != nil {
		return x.TauUpdtType
	}
	return 0
}

func (x *EmmContext) GetNumAttachRequest() uint32 {
	if x != nil {
		return x.NumAttachRequest
	}
	return 0
}

func (x *EmmContext) GetGuti() *Guti {
	if x != nil {
		return x.Guti
	}
	return nil
}

func (x *EmmContext) GetOldGuti() *Guti {
	if x != nil {
		return x.OldGuti
	}
	return nil
}

func (x *EmmContext) GetTaiList() *TaiList {
	if x != nil {
		return x.TaiList
	}
	return nil
}

func (x *EmmContext) GetLvrTai() *Tai {
	if x != nil {
		return x.LvrTai
	}
	return nil
}

func (x *EmmContext) GetOriginatingTai() *Tai {
	if x != nil {
		return x.OriginatingTai
	}
	return nil
}

func (x *EmmContext) GetKsi() uint32 {
	if x != nil {
		return x.Ksi
	}
	return 0
}

func (x *EmmContext) GetUeNetworkCapability() *UeNetworkCapability {
	if x != nil {
		return x.UeNetworkCapability
	}
	return nil
}

func (x *EmmContext) GetNwDetachData() *NwDetachData {
	if x != nil {
		return x.NwDetachData
	}
	return nil
}

func (x *EmmContext) GetNewAttachInfo() *NewAttachInfo {
	if x != nil {
		return x.NewAttachInfo
	}
	return nil
}

func (x *EmmContext) GetUeAdditionalSecurityCapability() *UeAdditionalSecurityCapability {
	if x != nil {
		return x.UeAdditionalSecurityCapability
	}
	return nil
}

// count_s
type EmmSecurityContext_Count struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spare    uint32 `protobuf:"varint,1,opt,name=spare,proto3" json:"spare,omitempty"`
	Overflow uint32 `protobuf:"varint,2,opt,name=overflow,proto3" json:"overflow,omitempty"`
	SeqNum   uint32 `protobuf:"varint,3,opt,name=seq_num,json=seqNum,proto3" json:"seq_num,omitempty"`
}

func (x *EmmSecurityContext_Count) Reset() {
	*x = EmmSecurityContext_Count{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmmSecurityContext_Count) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmmSecurityContext_Count) ProtoMessage() {}

func (x *EmmSecurityContext_Count) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmmSecurityContext_Count.ProtoReflect.Descriptor instead.
func (*EmmSecurityContext_Count) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{24, 0}
}

func (x *EmmSecurityContext_Count) GetSpare() uint32 {
	if x != nil {
		return x.Spare
	}
	return 0
}

func (x *EmmSecurityContext_Count) GetOverflow() uint32 {
	if x != nil {
		return x.Overflow
	}
	return 0
}

func (x *EmmSecurityContext_Count) GetSeqNum() uint32 {
	if x != nil {
		return x.SeqNum
	}
	return 0
}

// capability_s
type EmmSecurityContext_Capability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpsEncryption  uint32 `protobuf:"varint,1,opt,name=eps_encryption,json=epsEncryption,proto3" json:"eps_encryption,omitempty"`
	EpsIntegirty   uint32 `protobuf:"varint,2,opt,name=eps_integirty,json=epsIntegirty,proto3" json:"eps_integirty,omitempty"`
	UmtsEncryption uint32 `protobuf:"varint,3,opt,name=umts_encryption,json=umtsEncryption,proto3" json:"umts_encryption,omitempty"`
	UmtsIntegirty  uint32 `protobuf:"varint,4,opt,name=umts_integirty,json=umtsIntegirty,proto3" json:"umts_integirty,omitempty"`
	GprsEncryption uint32 `protobuf:"varint,5,opt,name=gprs_encryption,json=gprsEncryption,proto3" json:"gprs_encryption,omitempty"`
	UmtsPresent    bool   `protobuf:"varint,6,opt,name=umts_present,json=umtsPresent,proto3" json:"umts_present,omitempty"`
	GprsPresent    bool   `protobuf:"varint,7,opt,name=gprs_present,json=gprsPresent,proto3" json:"gprs_present,omitempty"`
}

func (x *EmmSecurityContext_Capability) Reset() {
	*x = EmmSecurityContext_Capability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmmSecurityContext_Capability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmmSecurityContext_Capability) ProtoMessage() {}

func (x *EmmSecurityContext_Capability) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmmSecurityContext_Capability.ProtoReflect.Descriptor instead.
func (*EmmSecurityContext_Capability) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{24, 1}
}

func (x *EmmSecurityContext_Capability) GetEpsEncryption() uint32 {
	if x != nil {
		return x.EpsEncryption
	}
	return 0
}

func (x *EmmSecurityContext_Capability) GetEpsIntegirty() uint32 {
	if x != nil {
		return x.EpsIntegirty
	}
	return 0
}

func (x *EmmSecurityContext_Capability) GetUmtsEncryption() uint32 {
	if x != nil {
		return x.UmtsEncryption
	}
	return 0
}

func (x *EmmSecurityContext_Capability) GetUmtsIntegirty() uint32 {
	if x != nil {
		return x.UmtsIntegirty
	}
	return 0
}

func (x *EmmSecurityContext_Capability) GetGprsEncryption() uint32 {
	if x != nil {
		return x.GprsEncryption
	}
	return 0
}

func (x *EmmSecurityContext_Capability) GetUmtsPresent() bool {
	if x != nil {
		return x.UmtsPresent
	}
	return false
}

func (x *EmmSecurityContext_Capability) GetGprsPresent() bool {
	if x != nil {
		return x.GprsPresent
	}
	return false
}

// selected_algorithms_s
type EmmSecurityContext_SelectedAlgorithms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Encryption uint32 `protobuf:"varint,1,opt,name=encryption,proto3" json:"encryption,omitempty"`
	Integrity  uint32 `protobuf:"varint,2,opt,name=integrity,proto3" json:"integrity,omitempty"`
}

func (x *EmmSecurityContext_SelectedAlgorithms) Reset() {
	*x = EmmSecurityContext_SelectedAlgorithms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_nas_state_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmmSecurityContext_SelectedAlgorithms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmmSecurityContext_SelectedAlgorithms) ProtoMessage() {}

func (x *EmmSecurityContext_SelectedAlgorithms) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_nas_state_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmmSecurityContext_SelectedAlgorithms.ProtoReflect.Descriptor instead.
func (*EmmSecurityContext_SelectedAlgorithms) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_nas_state_proto_rawDescGZIP(), []int{24, 2}
}

func (x *EmmSecurityContext_SelectedAlgorithms) GetEncryption() uint32 {
	if x != nil {
		return x.Encryption
	}
	return 0
}

func (x *EmmSecurityContext_SelectedAlgorithms) GetIntegrity() uint32 {
	if x != nil {
		return x.Integrity
	}
	return 0
}

var File_lte_protos_oai_nas_state_proto protoreflect.FileDescriptor

var file_lte_protos_oai_nas_state_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6f, 0x61, 0x69,
	0x2f, 0x6e, 0x61, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0d, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x1a,
	0x21, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6f, 0x61, 0x69, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6f,
	0x61, 0x69, 0x2f, 0x73, 0x70, 0x67, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x29, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x65, 0x63, 0x22, 0x44,
	0x0a, 0x0d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x44, 0x69,
	0x67, 0x69, 0x74, 0x73, 0x22, 0x94, 0x02, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x54, 0x61, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6f, 0x66, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74,
	0x79, 0x70, 0x65, 0x4f, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x0d, 0x74, 0x61, 0x69, 0x5f, 0x6d,
	0x61, 0x6e, 0x79, 0x5f, 0x70, 0x6c, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x54,
	0x61, 0x69, 0x52, 0x0b, 0x74, 0x61, 0x69, 0x4d, 0x61, 0x6e, 0x79, 0x50, 0x6c, 0x6d, 0x6e, 0x12,
	0x54, 0x0a, 0x1d, 0x74, 0x61, 0x69, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x6c, 0x6d, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x61, 0x63, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x69, 0x52, 0x19, 0x74, 0x61, 0x69, 0x4f,
	0x6e, 0x65, 0x50, 0x6c, 0x6d, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76,
	0x65, 0x54, 0x61, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x6d, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x6c, 0x6d, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x63,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x61, 0x63, 0x22, 0x7a, 0x0a, 0x07, 0x54,
	0x61, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x6f, 0x66, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x6f, 0x66, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x11,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x54,
	0x61, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x54,
	0x61, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x22, 0x30, 0x0a, 0x03, 0x54, 0x61, 0x69, 0x12, 0x17,
	0x0a, 0x07, 0x6d, 0x63, 0x63, 0x5f, 0x6d, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x6d, 0x63, 0x63, 0x4d, 0x6e, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x61, 0x63, 0x22, 0x3c, 0x0a, 0x0b, 0x4e, 0x61, 0x73,
	0x42, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x61, 0x73, 0x5f,
	0x70, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6e, 0x61, 0x73, 0x50,
	0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x0a, 0x4e, 0x61, 0x73, 0x45,
	0x6d, 0x6d, 0x50, 0x72, 0x6f, 0x63, 0x12, 0x37, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x4e, 0x61, 0x73, 0x42, 0x61, 0x73,
	0x65, 0x50, 0x72, 0x6f, 0x63, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f,
	0x65, 0x6d, 0x6d, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x45, 0x6d, 0x6d,
	0x46, 0x73, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xe2, 0x01, 0x0a, 0x0c, 0x41, 0x75, 0x74,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x06,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x61, 0x73, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6e, 0x61, 0x73, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x05,
	0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x75, 0x65, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x32, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x72, 0x5f, 0x73, 0x36, 0x61, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x72, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x53, 0x36, 0x61, 0x22, 0x99, 0x01,
	0x0a, 0x09, 0x4e, 0x61, 0x73, 0x43, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x12, 0x37, 0x0a, 0x09, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x4e,
	0x61, 0x73, 0x42, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x50, 0x72, 0x6f, 0x63, 0x12, 0x43, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x75, 0x74,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x42, 0x0e, 0x0a, 0x0c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x6d, 0x61, 0x72, 0x6b, 0x32,
	0x22, 0x11, 0x0a, 0x0f, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x22, 0xfb, 0x01, 0x0a, 0x12, 0x4e, 0x61, 0x73, 0x4d, 0x73, 0x67, 0x44, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x19, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6d, 0x6d, 0x5f, 0x63, 0x61, 0x75, 0x73,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x6d, 0x6d, 0x43, 0x61, 0x75, 0x73,
	0x65, 0x22, 0x94, 0x01, 0x0a, 0x0c, 0x44, 0x72, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x70, 0x67, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x70, 0x67, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6e, 0x64, 0x72, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63,
	0x6e, 0x64, 0x72, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x6f, 0x6e, 0x63,
	0x63, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x6f, 0x6e, 0x63, 0x63, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f, 0x6e, 0x64, 0x72, 0x78,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x6e,
	0x64, 0x72, 0x78, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x22, 0x83, 0x08, 0x0a, 0x10, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x34, 0x0a, 0x16, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x73, 0x69, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x73, 0x69, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73,
	0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x67, 0x75, 0x74, 0x69, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x47, 0x75, 0x74, 0x69,
	0x12, 0x27, 0x0a, 0x04, 0x67, 0x75, 0x74, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x47,
	0x75, 0x74, 0x69, 0x52, 0x04, 0x67, 0x75, 0x74, 0x69, 0x12, 0x30, 0x0a, 0x04, 0x69, 0x6d, 0x73,
	0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x12, 0x30, 0x0a, 0x04, 0x69,
	0x6d, 0x65, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x12, 0x3c, 0x0a,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61,
	0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x69, 0x52, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x54, 0x61, 0x69, 0x12, 0x31, 0x0a, 0x0a, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x61, 0x69, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e,
	0x54, 0x61, 0x69, 0x52, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x61, 0x69, 0x12, 0x34,
	0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x65, 0x63, 0x67, 0x69, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e,
	0x6f, 0x61, 0x69, 0x2e, 0x45, 0x63, 0x67, 0x69, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x45, 0x63, 0x67, 0x69, 0x12, 0x4c, 0x0a, 0x10, 0x75, 0x65, 0x5f, 0x6e, 0x77, 0x5f, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x55,
	0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x0e, 0x75, 0x65, 0x4e, 0x77, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x40, 0x0a, 0x0d, 0x64, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x44, 0x72, 0x78, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x64, 0x72, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x73, 0x6d, 0x5f, 0x6d, 0x73, 0x67, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x65, 0x73, 0x6d, 0x4d, 0x73, 0x67, 0x12, 0x46, 0x0a,
	0x0d, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x4e, 0x61, 0x73, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x6d, 0x61,
	0x72, 0x6b, 0x32, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x6d, 0x61, 0x72, 0x6b, 0x32, 0x52, 0x0a, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x6d, 0x61, 0x72, 0x6b, 0x32, 0x12, 0x49, 0x0a, 0x10, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e,
	0x6f, 0x61, 0x69, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x78, 0x0a, 0x21, 0x75, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e,
	0x55, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x1e,
	0x75, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x8f,
	0x03, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x63, 0x12, 0x2c, 0x0a,
	0x12, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x73,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x67, 0x75, 0x74, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61,
	0x69, 0x2e, 0x47, 0x75, 0x74, 0x69, 0x52, 0x04, 0x67, 0x75, 0x74, 0x69, 0x12, 0x1e, 0x0a, 0x0b,
	0x65, 0x73, 0x6d, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x65, 0x73, 0x6d, 0x4d, 0x73, 0x67, 0x4f, 0x75, 0x74, 0x12, 0x31, 0x0a, 0x03,
	0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x65, 0x73, 0x52, 0x03, 0x69, 0x65, 0x73, 0x12,
	0x13, 0x0a, 0x05, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x75, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x73, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x73, 0x69, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6d, 0x6d, 0x5f, 0x63, 0x61,
	0x75, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x6d, 0x6d, 0x43, 0x61,
	0x75, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x74, 0x33, 0x34, 0x35, 0x30, 0x18, 0xc8, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e,
	0x6f, 0x61, 0x69, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x05, 0x74, 0x33, 0x34, 0x35, 0x30,
	0x22, 0xce, 0x02, 0x0a, 0x10, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x4f, 0x66, 0x66, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x73,
	0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x73, 0x69, 0x12, 0x27, 0x0a, 0x04,
	0x67, 0x75, 0x74, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x47, 0x75, 0x74, 0x69, 0x52,
	0x04, 0x67, 0x75, 0x74, 0x69, 0x12, 0x30, 0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e,
	0x6f, 0x61, 0x69, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x75, 0x70, 0x6c,
	0x65, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x12, 0x30, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x75,
	0x70, 0x6c, 0x65, 0x52, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x12, 0x46, 0x0a, 0x0d, 0x64, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69,
	0x2e, 0x4e, 0x61, 0x73, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x0f, 0x0a, 0x0d, 0x54, 0x61, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x65, 0x73, 0x22, 0x0c, 0x0a, 0x0a, 0x4e, 0x61, 0x73, 0x54, 0x61, 0x75, 0x50, 0x72, 0x6f, 0x63,
	0x22, 0x96, 0x03, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x63, 0x12, 0x31, 0x0a,
	0x14, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x65, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x79, 0x6e, 0x63, 0x46,
	0x61, 0x69, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x63, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x6d, 0x61, 0x63, 0x46, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x13,
	0x0a, 0x05, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x75,
	0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x5f,
	0x69, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x69, 0x73, 0x43, 0x61, 0x75, 0x73, 0x65, 0x49, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x73, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x73, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x61, 0x75, 0x74, 0x6e, 0x12, 0x43, 0x0a, 0x0e, 0x75, 0x6e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f,
	0x61, 0x69, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65,
	0x52, 0x0d, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x49, 0x6d, 0x73, 0x69, 0x12,
	0x1b, 0x0a, 0x09, 0x65, 0x6d, 0x6d, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x65, 0x6d, 0x6d, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05,
	0x54, 0x33, 0x34, 0x36, 0x30, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x52, 0x05, 0x54, 0x33, 0x34, 0x36, 0x30, 0x22, 0xac, 0x05, 0x0a, 0x07, 0x53, 0x6d,
	0x63, 0x50, 0x72, 0x6f, 0x63, 0x12, 0x13, 0x0a, 0x05, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x75, 0x65, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x72, 0x65,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x73, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x73, 0x69, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x65, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x65,
	0x61, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x69, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x65, 0x69, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x63, 0x73, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x75, 0x63, 0x73, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x65, 0x61, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x65, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x61,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x67,
	0x65, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x67, 0x65, 0x61, 0x12, 0x21, 0x0a,
	0x0c, 0x75, 0x6d, 0x74, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x6d, 0x74, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x67, 0x70, 0x72, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x67, 0x70, 0x72, 0x73, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x65, 0x65, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x45, 0x65, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x65, 0x69, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x69, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x61, 0x76,
	0x65, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x65, 0x61, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x45, 0x65, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x61, 0x76, 0x65, 0x64,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x69, 0x61, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x45, 0x69, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x65,
	0x6b, 0x73, 0x69, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x61, 0x76, 0x65, 0x64,
	0x45, 0x6b, 0x73, 0x69, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x61,
	0x76, 0x65, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x22, 0x0a, 0x0d, 0x73,
	0x61, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x73, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12,
	0x22, 0x0a, 0x0d, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x61, 0x76, 0x65, 0x64, 0x53, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73,
	0x5f, 0x6e, 0x65, 0x77, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4e, 0x65,
	0x77, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6d, 0x65, 0x69, 0x73, 0x76, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6d, 0x65, 0x69, 0x73,
	0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc9, 0x02, 0x0a, 0x12, 0x4e, 0x61, 0x73,
	0x45, 0x6d, 0x6d, 0x50, 0x72, 0x6f, 0x63, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x34, 0x0a, 0x08, 0x65, 0x6d, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61,
	0x69, 0x2e, 0x4e, 0x61, 0x73, 0x45, 0x6d, 0x6d, 0x50, 0x72, 0x6f, 0x63, 0x52, 0x07, 0x65, 0x6d,
	0x6d, 0x50, 0x72, 0x6f, 0x63, 0x12, 0x3c, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x50, 0x72, 0x6f, 0x63, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x50,
	0x72, 0x6f, 0x63, 0x12, 0x42, 0x0a, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x74,
	0x61, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x63, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x6d, 0x63, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x53, 0x6d, 0x63, 0x50, 0x72, 0x6f,
	0x63, 0x48, 0x00, 0x52, 0x07, 0x73, 0x6d, 0x63, 0x50, 0x72, 0x6f, 0x63, 0x12, 0x36, 0x0a, 0x09,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x63, 0x48, 0x00, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68,
	0x50, 0x72, 0x6f, 0x63, 0x42, 0x0e, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x0f, 0x4e, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x63,
	0x4d, 0x65, 0x73, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x61, 0x73,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x6e, 0x61, 0x73, 0x4d, 0x73, 0x67, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22,
	0xbe, 0x03, 0x0a, 0x0d, 0x45, 0x6d, 0x6d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x73, 0x12, 0x4d, 0x0a, 0x11, 0x65, 0x6d, 0x6d, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x4e, 0x61, 0x73,
	0x45, 0x6d, 0x6d, 0x50, 0x72, 0x6f, 0x63, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0f, 0x65, 0x6d, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x63,
	0x12, 0x49, 0x0a, 0x0f, 0x65, 0x6d, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x4e, 0x61, 0x73, 0x45, 0x6d, 0x6d,
	0x50, 0x72, 0x6f, 0x63, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x65, 0x6d,
	0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x12, 0x31, 0x0a, 0x07, 0x63,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x4e, 0x61, 0x73,
	0x43, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x52, 0x06, 0x63, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x12, 0x4c,
	0x0a, 0x11, 0x65, 0x6d, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x5f, 0x6d, 0x6e, 0x67, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x4e, 0x61, 0x73, 0x45, 0x6d, 0x6d,
	0x50, 0x72, 0x6f, 0x63, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x6d,
	0x6d, 0x43, 0x6f, 0x6e, 0x4d, 0x6e, 0x67, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x12, 0x45, 0x0a, 0x20,
	0x6e, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6e, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x4d,
	0x65, 0x73, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x12, 0x6e, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e,
	0x4e, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x52,
	0x0f, 0x6e, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x53, 0x69, 0x67, 0x6e,
	0x22, 0x2a, 0x0a, 0x0d, 0x45, 0x6d, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x19, 0x0a, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0xc8, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x22, 0xa2, 0x09, 0x0a,
	0x12, 0x45, 0x6d, 0x6d, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x65, 0x6b, 0x73, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x65, 0x6b, 0x73, 0x69,
	0x12, 0x21, 0x0a, 0x0c, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x6e, 0x61, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6b, 0x6e, 0x61, 0x73, 0x45, 0x6e, 0x63, 0x12, 0x19,
	0x0a, 0x08, 0x6b, 0x6e, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x6b, 0x6e, 0x61, 0x73, 0x49, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x08, 0x64, 0x6c, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x45, 0x6d, 0x6d, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x64, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a,
	0x08, 0x75, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e,
	0x45, 0x6d, 0x6d, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x75, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x4b, 0x0a, 0x0d, 0x6b, 0x65, 0x6e, 0x62, 0x5f, 0x75, 0x6c, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x45, 0x6d, 0x6d, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x0b, 0x6b, 0x65, 0x6e, 0x62, 0x55, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c,
	0x0a, 0x0a, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f,
	0x61, 0x69, 0x2e, 0x45, 0x6d, 0x6d, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x0a, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x5b, 0x0a, 0x0e,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x45, 0x6d, 0x6d, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x41, 0x6c, 0x67, 0x6f, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x35, 0x0a, 0x17, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a,
	0x52, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x61, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x70, 0x61, 0x72, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65,
	0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x71,
	0x4e, 0x75, 0x6d, 0x1a, 0x97, 0x02, 0x0a, 0x0a, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x70, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x70, 0x73, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x70, 0x73,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x69, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x65, 0x70, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x69, 0x72, 0x74, 0x79, 0x12, 0x27,
	0x0a, 0x0f, 0x75, 0x6d, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x75, 0x6d, 0x74, 0x73, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6d, 0x74, 0x73, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x69, 0x72, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x75, 0x6d, 0x74, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x69, 0x72, 0x74, 0x79, 0x12, 0x27,
	0x0a, 0x0f, 0x67, 0x70, 0x72, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x67, 0x70, 0x72, 0x73, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6d, 0x74, 0x73, 0x5f,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75,
	0x6d, 0x74, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x70,
	0x72, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x67, 0x70, 0x72, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x1a, 0x52, 0x0a,
	0x12, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74,
	0x79, 0x22, 0x5e, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x6b, 0x61, 0x73, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x6b, 0x61, 0x73, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x61, 0x75, 0x74, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x78, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x78, 0x72, 0x65,
	0x73, 0x22, 0xb1, 0x06, 0x0a, 0x13, 0x55, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x65, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x65, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x69, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x69, 0x61, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x65, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x65, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x63, 0x73, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x75,
	0x63, 0x73, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x75, 0x69, 0x61, 0x12, 0x18, 0x0a, 0x05, 0x73, 0x70, 0x61, 0x72, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x73, 0x70, 0x61, 0x72, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x73, 0x66, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63,
	0x73, 0x66, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x70, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6c, 0x70, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x63, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6c, 0x63, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x72, 0x76, 0x63, 0x63,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x72, 0x76, 0x63, 0x63, 0x12, 0x0e, 0x0a,
	0x02, 0x6e, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x6e, 0x66, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x73, 0x65, 0x64, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x73, 0x65, 0x64, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x73, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x68, 0x32, 0x34, 0x35, 0x61, 0x73, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x68, 0x32, 0x34, 0x35, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x70, 0x63, 0x6f, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x65, 0x70, 0x63, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x63, 0x63, 0x70, 0x63, 0x69, 0x6f, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68,
	0x63, 0x63, 0x70, 0x63, 0x69, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x77, 0x66, 0x6f,
	0x70, 0x64, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x72, 0x77, 0x66, 0x6f,
	0x70, 0x64, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x31, 0x75, 0x64, 0x61, 0x74, 0x61, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x31, 0x75, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x70, 0x63, 0x69, 0x6f, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75,
	0x70, 0x63, 0x69, 0x6f, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6d, 0x74, 0x73, 0x5f, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x6d, 0x74,
	0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0c, 0x6d, 0x69, 0x73, 0x63,
	0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x0b, 0x6d, 0x69, 0x73, 0x63, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x70, 0x63, 0x69, 0x6f, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x63, 0x70, 0x63, 0x69, 0x6f, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x73, 0x65,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x73, 0x65, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x73, 0x65,
	0x64, 0x63, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x73, 0x65, 0x64,
	0x63, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x67, 0x63,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x67, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x31, 0x6d, 0x6f, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x31, 0x6d, 0x6f,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x63, 0x6e, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x64, 0x63, 0x6e, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x6f,
	0x66, 0x66, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x70, 0x62, 0x61, 0x63, 0x6b,
	0x6f, 0x66, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65,
	0x63, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x32, 0x78, 0x70, 0x63, 0x35, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x32, 0x78, 0x70, 0x63, 0x35, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x64, 0x72, 0x62, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x64, 0x72, 0x62, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x40, 0x0a, 0x1e, 0x55, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x65, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x61, 0x22, 0x9f, 0x01, 0x0a, 0x09, 0x42, 0x65, 0x61, 0x72,
	0x65, 0x72, 0x51, 0x6f, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x63, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x70, 0x63, 0x69, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x70, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x76, 0x69, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x76, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x63, 0x69,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x71, 0x63, 0x69, 0x12, 0x25, 0x0a, 0x03, 0x67,
	0x62, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x41, 0x6d, 0x62, 0x72, 0x52, 0x03, 0x67,
	0x62, 0x72, 0x12, 0x25, 0x0a, 0x03, 0x6d, 0x62, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e,
	0x41, 0x6d, 0x62, 0x72, 0x52, 0x03, 0x6d, 0x62, 0x72, 0x22, 0x5e, 0x0a, 0x18, 0x50, 0x63, 0x6f,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x8b, 0x02, 0x0a, 0x1c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x70, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x70, 0x61,
	0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x3e, 0x0a, 0x1c, 0x6e,
	0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x18, 0x6e, 0x75, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x15, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x50, 0x63, 0x6f, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x0f, 0x45, 0x73, 0x6d, 0x45, 0x62,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x13, 0x0a, 0x05, 0x75, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x75, 0x65, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x62, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x62,
	0x69, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x73, 0x6d, 0x5f, 0x6d,
	0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x65, 0x73, 0x6d, 0x4d, 0x73, 0x67,
	0x22, 0x9b, 0x02, 0x0a, 0x0b, 0x45, 0x73, 0x6d, 0x50, 0x72, 0x6f, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70,
	0x74, 0x69, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x64, 0x6e, 0x5f, 0x63,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x64, 0x6e, 0x43, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x64, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x70, 0x64, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x64, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x64, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x12, 0x37, 0x0a, 0x0a, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72,
	0x5f, 0x71, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x42, 0x65, 0x61, 0x72, 0x65,
	0x72, 0x51, 0x6f, 0x73, 0x52, 0x09, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x51, 0x6f, 0x73, 0x12,
	0x3d, 0x0a, 0x03, 0x70, 0x63, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03, 0x70, 0x63, 0x6f, 0x22, 0xc7,
	0x02, 0x0a, 0x0a, 0x45, 0x73, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x22, 0x0a,
	0x0d, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x62, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x62, 0x72,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x45, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x3e, 0x0a, 0x0d, 0x65, 0x73, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x45, 0x73, 0x6d, 0x50,
	0x72, 0x6f, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x65, 0x73, 0x6d, 0x50, 0x72, 0x6f, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x05, 0x74, 0x33, 0x34, 0x38, 0x39, 0x18, 0xc7, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x05, 0x74, 0x33, 0x34, 0x38,
	0x39, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f,
	0x6e, 0x65, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x69,
	0x73, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x69,
	0x73, 0x5f, 0x70, 0x64, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x50, 0x64, 0x6e, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x18, 0xca,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x22, 0xf1, 0x02, 0x0a, 0x0d, 0x45, 0x73, 0x6d,
	0x45, 0x62, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x62, 0x72, 0x5f, 0x64, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x67, 0x62, 0x72, 0x44, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x62, 0x72,
	0x5f, 0x75, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x67, 0x62, 0x72, 0x55, 0x6c,
	0x12, 0x15, 0x0a, 0x06, 0x6d, 0x62, 0x72, 0x5f, 0x64, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x6d, 0x62, 0x72, 0x44, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x62, 0x72, 0x5f, 0x75,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6d, 0x62, 0x72, 0x55, 0x6c, 0x12, 0x34,
	0x0a, 0x03, 0x74, 0x66, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x03, 0x74, 0x66, 0x74, 0x12, 0x3d, 0x0a, 0x03, 0x70, 0x63, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61,
	0x69, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03,
	0x70, 0x63, 0x6f, 0x12, 0x2a, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f,
	0x61, 0x69, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x12,
	0x4b, 0x0a, 0x12, 0x65, 0x73, 0x6d, 0x5f, 0x65, 0x62, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x45, 0x73, 0x6d, 0x45,
	0x62, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x65, 0x73, 0x6d,
	0x45, 0x62, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x77, 0x0a, 0x0c,
	0x4e, 0x77, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x13, 0x0a, 0x05,
	0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x75, 0x65, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x14, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x61, 0x63,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0e, 0x6d, 0x6d, 0x65, 0x5f, 0x75,
	0x65, 0x5f, 0x73, 0x31, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6d, 0x6d, 0x65, 0x55, 0x65, 0x53, 0x31, 0x61, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x6d, 0x6d, 0x5f, 0x63, 0x74, 0x78, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4d, 0x6d, 0x43, 0x74, 0x78, 0x4e, 0x65, 0x77, 0x12,
	0x31, 0x0a, 0x03, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x65, 0x73, 0x52, 0x03, 0x69,
	0x65, 0x73, 0x22, 0x91, 0x0e, 0x0a, 0x0a, 0x45, 0x6d, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x73, 0x69, 0x36, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x69, 0x6d, 0x73, 0x69, 0x36, 0x34, 0x12, 0x30, 0x0a, 0x04, 0x69, 0x6d, 0x73,
	0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x61, 0x76, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x73, 0x69, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x73, 0x61, 0x76, 0x65, 0x64, 0x49, 0x6d, 0x73, 0x69, 0x36, 0x34, 0x12, 0x30,
	0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x04, 0x69, 0x6d, 0x65, 0x69,
	0x12, 0x34, 0x0a, 0x06, 0x69, 0x6d, 0x65, 0x69, 0x73, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x06,
	0x69, 0x6d, 0x65, 0x69, 0x73, 0x76, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6d, 0x6d, 0x5f, 0x63, 0x61,
	0x75, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x6d, 0x6d, 0x43, 0x61,
	0x75, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x6d, 0x6d, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x6d, 0x6d, 0x46,
	0x73, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x65, 0x6d, 0x6d, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69,
	0x2e, 0x45, 0x6d, 0x6d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x52, 0x0d,
	0x65, 0x6d, 0x6d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x63, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x32, 0x0a, 0x07, 0x65, 0x73, 0x6d, 0x5f, 0x63,
	0x74, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x45, 0x73, 0x6d, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x06, 0x65, 0x73, 0x6d, 0x43, 0x74, 0x78, 0x12, 0x2e, 0x0a, 0x13, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x2a, 0x0a, 0x11, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x31, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x08, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x45, 0x6d, 0x6d,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x15, 0x5f, 0x6e, 0x6f,
	0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x45, 0x6d, 0x6d, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x12, 0x4e, 0x6f, 0x6e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12,
	0x37, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x69, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x73, 0x69, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x67,
	0x75, 0x74, 0x69, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x47, 0x75, 0x74, 0x69, 0x42, 0x61,
	0x73, 0x65, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x67, 0x75, 0x74, 0x69, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x47, 0x75, 0x74, 0x69, 0x53, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f,
	0x69, 0x6d, 0x73, 0x69, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x49, 0x6d, 0x73, 0x69, 0x4f, 0x6e,
	0x6c, 0x79, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x65,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x61, 0x75, 0x5f, 0x75, 0x70, 0x64, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x61, 0x75, 0x55, 0x70, 0x64,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x67, 0x75, 0x74, 0x69, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61,
	0x69, 0x2e, 0x47, 0x75, 0x74, 0x69, 0x52, 0x04, 0x67, 0x75, 0x74, 0x69, 0x12, 0x2e, 0x0a, 0x08,
	0x6f, 0x6c, 0x64, 0x5f, 0x67, 0x75, 0x74, 0x69, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x47,
	0x75, 0x74, 0x69, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x47, 0x75, 0x74, 0x69, 0x12, 0x31, 0x0a, 0x08,
	0x74, 0x61, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x54,
	0x61, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x07, 0x74, 0x61, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x07, 0x6c, 0x76, 0x72, 0x5f, 0x74, 0x61, 0x69, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69,
	0x2e, 0x54, 0x61, 0x69, 0x52, 0x06, 0x6c, 0x76, 0x72, 0x54, 0x61, 0x69, 0x12, 0x3b, 0x0a, 0x0f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x69, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x69, 0x52, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x73, 0x69,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x73, 0x69, 0x12, 0x56, 0x0a, 0x15, 0x75,
	0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x55, 0x65, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x13,
	0x75, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x0e, 0x6e, 0x77, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x4e, 0x77, 0x44, 0x65,
	0x74, 0x61, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x6e, 0x77, 0x44, 0x65, 0x74, 0x61,
	0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e,
	0x4e, 0x65, 0x77, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6e,
	0x65, 0x77, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x78, 0x0a, 0x21,
	0x75, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x55, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x1e, 0x75, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x1f, 0x5a, 0x1d, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f,
	0x6c, 0x74, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x6f, 0x61, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lte_protos_oai_nas_state_proto_rawDescOnce sync.Once
	file_lte_protos_oai_nas_state_proto_rawDescData = file_lte_protos_oai_nas_state_proto_rawDesc
)

func file_lte_protos_oai_nas_state_proto_rawDescGZIP() []byte {
	file_lte_protos_oai_nas_state_proto_rawDescOnce.Do(func() {
		file_lte_protos_oai_nas_state_proto_rawDescData = protoimpl.X.CompressGZIP(file_lte_protos_oai_nas_state_proto_rawDescData)
	})
	return file_lte_protos_oai_nas_state_proto_rawDescData
}

var file_lte_protos_oai_nas_state_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_lte_protos_oai_nas_state_proto_goTypes = []interface{}{
	(*Timer)(nil),                                 // 0: magma.lte.oai.Timer
	(*IdentityTuple)(nil),                         // 1: magma.lte.oai.IdentityTuple
	(*PartialTaiList)(nil),                        // 2: magma.lte.oai.PartialTaiList
	(*TaiList)(nil),                               // 3: magma.lte.oai.TaiList
	(*Tai)(nil),                                   // 4: magma.lte.oai.Tai
	(*NasBaseProc)(nil),                           // 5: magma.lte.oai.NasBaseProc
	(*NasEmmProc)(nil),                            // 6: magma.lte.oai.NasEmmProc
	(*AuthInfoProc)(nil),                          // 7: magma.lte.oai.AuthInfoProc
	(*NasCnProc)(nil),                             // 8: magma.lte.oai.NasCnProc
	(*MobileStaClassmark2)(nil),                   // 9: magma.lte.oai.MobileStaClassmark2
	(*VoicePreference)(nil),                       // 10: magma.lte.oai.VoicePreference
	(*NasMsgDecodeStatus)(nil),                    // 11: magma.lte.oai.NasMsgDecodeStatus
	(*DrxParameter)(nil),                          // 12: magma.lte.oai.DrxParameter
	(*AttachRequestIes)(nil),                      // 13: magma.lte.oai.AttachRequestIes
	(*AttachProc)(nil),                            // 14: magma.lte.oai.AttachProc
	(*DetachRequestIes)(nil),                      // 15: magma.lte.oai.DetachRequestIes
	(*TauRequestIes)(nil),                         // 16: magma.lte.oai.TauRequestIes
	(*NasTauProc)(nil),                            // 17: magma.lte.oai.NasTauProc
	(*AuthProc)(nil),                              // 18: magma.lte.oai.AuthProc
	(*SmcProc)(nil),                               // 19: magma.lte.oai.SmcProc
	(*NasEmmProcWithType)(nil),                    // 20: magma.lte.oai.NasEmmProcWithType
	(*NasProcMessSign)(nil),                       // 21: magma.lte.oai.NasProcMessSign
	(*EmmProcedures)(nil),                         // 22: magma.lte.oai.EmmProcedures
	(*EmmCommonData)(nil),                         // 23: magma.lte.oai.EmmCommonData
	(*EmmSecurityContext)(nil),                    // 24: magma.lte.oai.EmmSecurityContext
	(*AuthVector)(nil),                            // 25: magma.lte.oai.AuthVector
	(*UeNetworkCapability)(nil),                   // 26: magma.lte.oai.UeNetworkCapability
	(*UeAdditionalSecurityCapability)(nil),        // 27: magma.lte.oai.UeAdditionalSecurityCapability
	(*BearerQos)(nil),                             // 28: magma.lte.oai.BearerQos
	(*PcoProtocolOrContainerId)(nil),              // 29: magma.lte.oai.PcoProtocolOrContainerId
	(*ProtocolConfigurationOptions)(nil),          // 30: magma.lte.oai.ProtocolConfigurationOptions
	(*EsmEbrTimerData)(nil),                       // 31: magma.lte.oai.EsmEbrTimerData
	(*EsmProcData)(nil),                           // 32: magma.lte.oai.EsmProcData
	(*EsmContext)(nil),                            // 33: magma.lte.oai.EsmContext
	(*EsmEbrContext)(nil),                         // 34: magma.lte.oai.EsmEbrContext
	(*NwDetachData)(nil),                          // 35: magma.lte.oai.NwDetachData
	(*NewAttachInfo)(nil),                         // 36: magma.lte.oai.NewAttachInfo
	(*EmmContext)(nil),                            // 37: magma.lte.oai.EmmContext
	(*EmmSecurityContext_Count)(nil),              // 38: magma.lte.oai.EmmSecurityContext.Count
	(*EmmSecurityContext_Capability)(nil),         // 39: magma.lte.oai.EmmSecurityContext.Capability
	(*EmmSecurityContext_SelectedAlgorithms)(nil), // 40: magma.lte.oai.EmmSecurityContext.SelectedAlgorithms
	(*Guti)(nil),                                  // 41: magma.lte.oai.Guti
	(*Ecgi)(nil),                                  // 42: magma.lte.oai.Ecgi
	(*Ambr)(nil),                                  // 43: magma.lte.oai.Ambr
	(*TrafficFlowTemplate)(nil),                   // 44: magma.lte.oai.TrafficFlowTemplate
}
var file_lte_protos_oai_nas_state_proto_depIdxs = []int32{
	4,  // 0: magma.lte.oai.PartialTaiList.tai_many_plmn:type_name -> magma.lte.oai.Tai
	4,  // 1: magma.lte.oai.PartialTaiList.tai_one_plmn_consecutive_tacs:type_name -> magma.lte.oai.Tai
	2,  // 2: magma.lte.oai.TaiList.partial_tai_lists:type_name -> magma.lte.oai.PartialTaiList
	5,  // 3: magma.lte.oai.NasEmmProc.base_proc:type_name -> magma.lte.oai.NasBaseProc
	25, // 4: magma.lte.oai.AuthInfoProc.vector:type_name -> magma.lte.oai.AuthVector
	0,  // 5: magma.lte.oai.AuthInfoProc.timer_s6a:type_name -> magma.lte.oai.Timer
	5,  // 6: magma.lte.oai.NasCnProc.base_proc:type_name -> magma.lte.oai.NasBaseProc
	7,  // 7: magma.lte.oai.NasCnProc.auth_info_proc:type_name -> magma.lte.oai.AuthInfoProc
	41, // 8: magma.lte.oai.AttachRequestIes.guti:type_name -> magma.lte.oai.Guti
	1,  // 9: magma.lte.oai.AttachRequestIes.imsi:type_name -> magma.lte.oai.IdentityTuple
	1,  // 10: magma.lte.oai.AttachRequestIes.imei:type_name -> magma.lte.oai.IdentityTuple
	4,  // 11: magma.lte.oai.AttachRequestIes.last_visited_tai:type_name -> magma.lte.oai.Tai
	4,  // 12: magma.lte.oai.AttachRequestIes.origin_tai:type_name -> magma.lte.oai.Tai
	42, // 13: magma.lte.oai.AttachRequestIes.origin_ecgi:type_name -> magma.lte.oai.Ecgi
	26, // 14: magma.lte.oai.AttachRequestIes.ue_nw_capability:type_name -> magma.lte.oai.UeNetworkCapability
	12, // 15: magma.lte.oai.AttachRequestIes.drx_parameter:type_name -> magma.lte.oai.DrxParameter
	11, // 16: magma.lte.oai.AttachRequestIes.decode_status:type_name -> magma.lte.oai.NasMsgDecodeStatus
	9,  // 17: magma.lte.oai.AttachRequestIes.classmark2:type_name -> magma.lte.oai.MobileStaClassmark2
	10, // 18: magma.lte.oai.AttachRequestIes.voice_preference:type_name -> magma.lte.oai.VoicePreference
	27, // 19: magma.lte.oai.AttachRequestIes.ue_additional_security_capability:type_name -> magma.lte.oai.UeAdditionalSecurityCapability
	41, // 20: magma.lte.oai.AttachProc.guti:type_name -> magma.lte.oai.Guti
	13, // 21: magma.lte.oai.AttachProc.ies:type_name -> magma.lte.oai.AttachRequestIes
	0,  // 22: magma.lte.oai.AttachProc.t3450:type_name -> magma.lte.oai.Timer
	41, // 23: magma.lte.oai.DetachRequestIes.guti:type_name -> magma.lte.oai.Guti
	1,  // 24: magma.lte.oai.DetachRequestIes.imsi:type_name -> magma.lte.oai.IdentityTuple
	1,  // 25: magma.lte.oai.DetachRequestIes.imei:type_name -> magma.lte.oai.IdentityTuple
	11, // 26: magma.lte.oai.DetachRequestIes.decode_status:type_name -> magma.lte.oai.NasMsgDecodeStatus
	1,  // 27: magma.lte.oai.AuthProc.unchecked_imsi:type_name -> magma.lte.oai.IdentityTuple
	0,  // 28: magma.lte.oai.AuthProc.T3460:type_name -> magma.lte.oai.Timer
	6,  // 29: magma.lte.oai.NasEmmProcWithType.emm_proc:type_name -> magma.lte.oai.NasEmmProc
	14, // 30: magma.lte.oai.NasEmmProcWithType.attach_proc:type_name -> magma.lte.oai.AttachProc
	15, // 31: magma.lte.oai.NasEmmProcWithType.detach_proc:type_name -> magma.lte.oai.DetachRequestIes
	19, // 32: magma.lte.oai.NasEmmProcWithType.smc_proc:type_name -> magma.lte.oai.SmcProc
	18, // 33: magma.lte.oai.NasEmmProcWithType.auth_proc:type_name -> magma.lte.oai.AuthProc
	20, // 34: magma.lte.oai.EmmProcedures.emm_specific_proc:type_name -> magma.lte.oai.NasEmmProcWithType
	20, // 35: magma.lte.oai.EmmProcedures.emm_common_proc:type_name -> magma.lte.oai.NasEmmProcWithType
	8,  // 36: magma.lte.oai.EmmProcedures.cn_proc:type_name -> magma.lte.oai.NasCnProc
	20, // 37: magma.lte.oai.EmmProcedures.emm_con_mngt_proc:type_name -> magma.lte.oai.NasEmmProcWithType
	21, // 38: magma.lte.oai.EmmProcedures.nas_proc_mess_sign:type_name -> magma.lte.oai.NasProcMessSign
	38, // 39: magma.lte.oai.EmmSecurityContext.dl_count:type_name -> magma.lte.oai.EmmSecurityContext.Count
	38, // 40: magma.lte.oai.EmmSecurityContext.ul_count:type_name -> magma.lte.oai.EmmSecurityContext.Count
	38, // 41: magma.lte.oai.EmmSecurityContext.kenb_ul_count:type_name -> magma.lte.oai.EmmSecurityContext.Count
	39, // 42: magma.lte.oai.EmmSecurityContext.capability:type_name -> magma.lte.oai.EmmSecurityContext.Capability
	40, // 43: magma.lte.oai.EmmSecurityContext.selected_algos:type_name -> magma.lte.oai.EmmSecurityContext.SelectedAlgorithms
	43, // 44: magma.lte.oai.BearerQos.gbr:type_name -> magma.lte.oai.Ambr
	43, // 45: magma.lte.oai.BearerQos.mbr:type_name -> magma.lte.oai.Ambr
	29, // 46: magma.lte.oai.ProtocolConfigurationOptions.proto_or_container_id:type_name -> magma.lte.oai.PcoProtocolOrContainerId
	28, // 47: magma.lte.oai.EsmProcData.bearer_qos:type_name -> magma.lte.oai.BearerQos
	30, // 48: magma.lte.oai.EsmProcData.pco:type_name -> magma.lte.oai.ProtocolConfigurationOptions
	32, // 49: magma.lte.oai.EsmContext.esm_proc_data:type_name -> magma.lte.oai.EsmProcData
	0,  // 50: magma.lte.oai.EsmContext.t3489:type_name -> magma.lte.oai.Timer
	44, // 51: magma.lte.oai.EsmEbrContext.tft:type_name -> magma.lte.oai.TrafficFlowTemplate
	30, // 52: magma.lte.oai.EsmEbrContext.pco:type_name -> magma.lte.oai.ProtocolConfigurationOptions
	0,  // 53: magma.lte.oai.EsmEbrContext.timer:type_name -> magma.lte.oai.Timer
	31, // 54: magma.lte.oai.EsmEbrContext.esm_ebr_timer_data:type_name -> magma.lte.oai.EsmEbrTimerData
	13, // 55: magma.lte.oai.NewAttachInfo.ies:type_name -> magma.lte.oai.AttachRequestIes
	1,  // 56: magma.lte.oai.EmmContext.imsi:type_name -> magma.lte.oai.IdentityTuple
	1,  // 57: magma.lte.oai.EmmContext.imei:type_name -> magma.lte.oai.IdentityTuple
	1,  // 58: magma.lte.oai.EmmContext.imeisv:type_name -> magma.lte.oai.IdentityTuple
	22, // 59: magma.lte.oai.EmmContext.emm_procedures:type_name -> magma.lte.oai.EmmProcedures
	33, // 60: magma.lte.oai.EmmContext.esm_ctx:type_name -> magma.lte.oai.EsmContext
	25, // 61: magma.lte.oai.EmmContext.vector:type_name -> magma.lte.oai.AuthVector
	24, // 62: magma.lte.oai.EmmContext.security:type_name -> magma.lte.oai.EmmSecurityContext
	24, // 63: magma.lte.oai.EmmContext._non_current_security:type_name -> magma.lte.oai.EmmSecurityContext
	41, // 64: magma.lte.oai.EmmContext.guti:type_name -> magma.lte.oai.Guti
	41, // 65: magma.lte.oai.EmmContext.old_guti:type_name -> magma.lte.oai.Guti
	3,  // 66: magma.lte.oai.EmmContext.tai_list:type_name -> magma.lte.oai.TaiList
	4,  // 67: magma.lte.oai.EmmContext.lvr_tai:type_name -> magma.lte.oai.Tai
	4,  // 68: magma.lte.oai.EmmContext.originating_tai:type_name -> magma.lte.oai.Tai
	26, // 69: magma.lte.oai.EmmContext.ue_network_capability:type_name -> magma.lte.oai.UeNetworkCapability
	35, // 70: magma.lte.oai.EmmContext.nw_detach_data:type_name -> magma.lte.oai.NwDetachData
	36, // 71: magma.lte.oai.EmmContext.new_attach_info:type_name -> magma.lte.oai.NewAttachInfo
	27, // 72: magma.lte.oai.EmmContext.ue_additional_security_capability:type_name -> magma.lte.oai.UeAdditionalSecurityCapability
	73, // [73:73] is the sub-list for method output_type
	73, // [73:73] is the sub-list for method input_type
	73, // [73:73] is the sub-list for extension type_name
	73, // [73:73] is the sub-list for extension extendee
	0,  // [0:73] is the sub-list for field type_name
}

func init() { file_lte_protos_oai_nas_state_proto_init() }
func file_lte_protos_oai_nas_state_proto_init() {
	if File_lte_protos_oai_nas_state_proto != nil {
		return
	}
	file_lte_protos_oai_common_types_proto_init()
	file_lte_protos_oai_spgw_state_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_lte_protos_oai_nas_state_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityTuple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartialTaiList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaiList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tai); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NasBaseProc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NasEmmProc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthInfoProc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NasCnProc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MobileStaClassmark2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoicePreference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NasMsgDecodeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrxParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachRequestIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachProc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetachRequestIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TauRequestIes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NasTauProc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthProc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmcProc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NasEmmProcWithType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NasProcMessSign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmmProcedures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmmCommonData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmmSecurityContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthVector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UeNetworkCapability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UeAdditionalSecurityCapability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BearerQos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PcoProtocolOrContainerId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolConfigurationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EsmEbrTimerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EsmProcData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EsmContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EsmEbrContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NwDetachData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewAttachInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmmContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmmSecurityContext_Count); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmmSecurityContext_Capability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_nas_state_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmmSecurityContext_SelectedAlgorithms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_lte_protos_oai_nas_state_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*NasCnProc_AuthInfoProc)(nil),
	}
	file_lte_protos_oai_nas_state_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*NasEmmProcWithType_AttachProc)(nil),
		(*NasEmmProcWithType_DetachProc)(nil),
		(*NasEmmProcWithType_SmcProc)(nil),
		(*NasEmmProcWithType_AuthProc)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lte_protos_oai_nas_state_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_lte_protos_oai_nas_state_proto_goTypes,
		DependencyIndexes: file_lte_protos_oai_nas_state_proto_depIdxs,
		MessageInfos:      file_lte_protos_oai_nas_state_proto_msgTypes,
	}.Build()
	File_lte_protos_oai_nas_state_proto = out.File
	file_lte_protos_oai_nas_state_proto_rawDesc = nil
	file_lte_protos_oai_nas_state_proto_goTypes = nil
	file_lte_protos_oai_nas_state_proto_depIdxs = nil
}
