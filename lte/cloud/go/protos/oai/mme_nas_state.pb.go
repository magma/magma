// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.10.0
// source: lte/protos/oai/mme_nas_state.proto

package oai

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BearerContext_Validity int32

const (
	BearerContext_INVALID BearerContext_Validity = 0
	BearerContext_VALID   BearerContext_Validity = 1
)

// Enum value maps for BearerContext_Validity.
var (
	BearerContext_Validity_name = map[int32]string{
		0: "INVALID",
		1: "VALID",
	}
	BearerContext_Validity_value = map[string]int32{
		"INVALID": 0,
		"VALID":   1,
	}
)

func (x BearerContext_Validity) Enum() *BearerContext_Validity {
	p := new(BearerContext_Validity)
	*p = x
	return p
}

func (x BearerContext_Validity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BearerContext_Validity) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_oai_mme_nas_state_proto_enumTypes[0].Descriptor()
}

func (BearerContext_Validity) Type() protoreflect.EnumType {
	return &file_lte_protos_oai_mme_nas_state_proto_enumTypes[0]
}

func (x BearerContext_Validity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BearerContext_Validity.Descriptor instead.
func (BearerContext_Validity) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_oai_mme_nas_state_proto_rawDescGZIP(), []int{1, 0}
}

// sgs_context_t
type SgsContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SgsContext) Reset() {
	*x = SgsContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_mme_nas_state_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SgsContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SgsContext) ProtoMessage() {}

func (x *SgsContext) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_mme_nas_state_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SgsContext.ProtoReflect.Descriptor instead.
func (*SgsContext) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_mme_nas_state_proto_rawDescGZIP(), []int{0}
}

// bearer_context_t
type BearerContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ebi                     uint32                 `protobuf:"varint,1,opt,name=ebi,proto3" json:"ebi,omitempty"`                                                                  // ebi_t
	TransactionIdentifier   uint32                 `protobuf:"varint,2,opt,name=transaction_identifier,json=transactionIdentifier,proto3" json:"transaction_identifier,omitempty"` // proc_tid_t
	SGwFteidS1U             *Fteid                 `protobuf:"bytes,3,opt,name=s_gw_fteid_s1u,json=sGwFteidS1u,proto3" json:"s_gw_fteid_s1u,omitempty"`                            // fteid_t
	PGwFteidS5S8Up          *Fteid                 `protobuf:"bytes,4,opt,name=p_gw_fteid_s5_s8_up,json=pGwFteidS5S8Up,proto3" json:"p_gw_fteid_s5_s8_up,omitempty"`               // fteid_t
	Qci                     uint32                 `protobuf:"varint,5,opt,name=qci,proto3" json:"qci,omitempty"`                                                                  // qci_t
	PdnCxId                 uint32                 `protobuf:"varint,6,opt,name=pdn_cx_id,json=pdnCxId,proto3" json:"pdn_cx_id,omitempty"`                                         // pdn_cid_t
	EsmEbrContext           *EsmEbrContext         `protobuf:"bytes,8,opt,name=esm_ebr_context,json=esmEbrContext,proto3" json:"esm_ebr_context,omitempty"`
	EnbFteidS1U             *Fteid                 `protobuf:"bytes,9,opt,name=enb_fteid_s1u,json=enbFteidS1u,proto3" json:"enb_fteid_s1u,omitempty"`
	PriorityLevel           uint32                 `protobuf:"varint,10,opt,name=priority_level,json=priorityLevel,proto3" json:"priority_level,omitempty"` // priority_level_t
	PreemptionVulnerability uint32                 `protobuf:"varint,11,opt,name=preemption_vulnerability,json=preemptionVulnerability,proto3" json:"preemption_vulnerability,omitempty"`
	PreemptionCapability    uint32                 `protobuf:"varint,12,opt,name=preemption_capability,json=preemptionCapability,proto3" json:"preemption_capability,omitempty"`
	SavedTft                *TrafficFlowTemplate   `protobuf:"bytes,13,opt,name=saved_tft,json=savedTft,proto3" json:"saved_tft,omitempty"`
	SavedQos                *BearerQos             `protobuf:"bytes,14,opt,name=saved_qos,json=savedQos,proto3" json:"saved_qos,omitempty"`
	Validity                BearerContext_Validity `protobuf:"varint,15,opt,name=validity,proto3,enum=magma.lte.oai.BearerContext_Validity" json:"validity,omitempty"`
}

func (x *BearerContext) Reset() {
	*x = BearerContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_mme_nas_state_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BearerContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BearerContext) ProtoMessage() {}

func (x *BearerContext) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_mme_nas_state_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BearerContext.ProtoReflect.Descriptor instead.
func (*BearerContext) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_mme_nas_state_proto_rawDescGZIP(), []int{1}
}

func (x *BearerContext) GetEbi() uint32 {
	if x != nil {
		return x.Ebi
	}
	return 0
}

func (x *BearerContext) GetTransactionIdentifier() uint32 {
	if x != nil {
		return x.TransactionIdentifier
	}
	return 0
}

func (x *BearerContext) GetSGwFteidS1U() *Fteid {
	if x != nil {
		return x.SGwFteidS1U
	}
	return nil
}

func (x *BearerContext) GetPGwFteidS5S8Up() *Fteid {
	if x != nil {
		return x.PGwFteidS5S8Up
	}
	return nil
}

func (x *BearerContext) GetQci() uint32 {
	if x != nil {
		return x.Qci
	}
	return 0
}

func (x *BearerContext) GetPdnCxId() uint32 {
	if x != nil {
		return x.PdnCxId
	}
	return 0
}

func (x *BearerContext) GetEsmEbrContext() *EsmEbrContext {
	if x != nil {
		return x.EsmEbrContext
	}
	return nil
}

func (x *BearerContext) GetEnbFteidS1U() *Fteid {
	if x != nil {
		return x.EnbFteidS1U
	}
	return nil
}

func (x *BearerContext) GetPriorityLevel() uint32 {
	if x != nil {
		return x.PriorityLevel
	}
	return 0
}

func (x *BearerContext) GetPreemptionVulnerability() uint32 {
	if x != nil {
		return x.PreemptionVulnerability
	}
	return 0
}

func (x *BearerContext) GetPreemptionCapability() uint32 {
	if x != nil {
		return x.PreemptionCapability
	}
	return 0
}

func (x *BearerContext) GetSavedTft() *TrafficFlowTemplate {
	if x != nil {
		return x.SavedTft
	}
	return nil
}

func (x *BearerContext) GetSavedQos() *BearerQos {
	if x != nil {
		return x.SavedQos
	}
	return nil
}

func (x *BearerContext) GetValidity() BearerContext_Validity {
	if x != nil {
		return x.Validity
	}
	return BearerContext_INVALID
}

// esm_pdn_t
type EsmPdn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pti         uint32 `protobuf:"varint,1,opt,name=pti,proto3" json:"pti,omitempty"`
	IsEmergency bool   `protobuf:"varint,2,opt,name=is_emergency,json=isEmergency,proto3" json:"is_emergency,omitempty"`
	Ambr        uint32 `protobuf:"varint,3,opt,name=ambr,proto3" json:"ambr,omitempty"`
	AddrRealloc uint32 `protobuf:"varint,4,opt,name=addr_realloc,json=addrRealloc,proto3" json:"addr_realloc,omitempty"`
	NBearers    uint32 `protobuf:"varint,5,opt,name=n_bearers,json=nBearers,proto3" json:"n_bearers,omitempty"`
	PtState     uint32 `protobuf:"varint,6,opt,name=pt_state,json=ptState,proto3" json:"pt_state,omitempty"` // esm_pt_state_e enum
}

func (x *EsmPdn) Reset() {
	*x = EsmPdn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_mme_nas_state_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EsmPdn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EsmPdn) ProtoMessage() {}

func (x *EsmPdn) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_mme_nas_state_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EsmPdn.ProtoReflect.Descriptor instead.
func (*EsmPdn) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_mme_nas_state_proto_rawDescGZIP(), []int{2}
}

func (x *EsmPdn) GetPti() uint32 {
	if x != nil {
		return x.Pti
	}
	return 0
}

func (x *EsmPdn) GetIsEmergency() bool {
	if x != nil {
		return x.IsEmergency
	}
	return false
}

func (x *EsmPdn) GetAmbr() uint32 {
	if x != nil {
		return x.Ambr
	}
	return 0
}

func (x *EsmPdn) GetAddrRealloc() uint32 {
	if x != nil {
		return x.AddrRealloc
	}
	return 0
}

func (x *EsmPdn) GetNBearers() uint32 {
	if x != nil {
		return x.NBearers
	}
	return 0
}

func (x *EsmPdn) GetPtState() uint32 {
	if x != nil {
		return x.PtState
	}
	return 0
}

// pdn_context_t
type PdnContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContextIdentifier       uint32                        `protobuf:"varint,1,opt,name=context_identifier,json=contextIdentifier,proto3" json:"context_identifier,omitempty"` // context_identifier_t
	ApnInUse                string                        `protobuf:"bytes,2,opt,name=apn_in_use,json=apnInUse,proto3" json:"apn_in_use,omitempty"`
	ApnSubscribed           string                        `protobuf:"bytes,3,opt,name=apn_subscribed,json=apnSubscribed,proto3" json:"apn_subscribed,omitempty"`
	PdnType                 uint32                        `protobuf:"varint,4,opt,name=pdn_type,json=pdnType,proto3" json:"pdn_type,omitempty"` // pdn_type_t
	Paa                     []byte                        `protobuf:"bytes,5,opt,name=paa,proto3" json:"paa,omitempty"`                         // paa_t
	ApnOiReplacement        string                        `protobuf:"bytes,6,opt,name=apn_oi_replacement,json=apnOiReplacement,proto3" json:"apn_oi_replacement,omitempty"`
	PGwAddressS5S8Cp        string                        `protobuf:"bytes,7,opt,name=p_gw_address_s5_s8_cp,json=pGwAddressS5S8Cp,proto3" json:"p_gw_address_s5_s8_cp,omitempty"` // ip_address_t
	PGwTeidS5S8Cp           uint32                        `protobuf:"varint,8,opt,name=p_gw_teid_s5_s8_cp,json=pGwTeidS5S8Cp,proto3" json:"p_gw_teid_s5_s8_cp,omitempty"`         // teid_t
	DefaultBearerQosProfile *EpsSubscribedQosProfile      `protobuf:"bytes,9,opt,name=default_bearer_qos_profile,json=defaultBearerQosProfile,proto3" json:"default_bearer_qos_profile,omitempty"`
	SubscribedApnAmbr       *Ambr                         `protobuf:"bytes,10,opt,name=subscribed_apn_ambr,json=subscribedApnAmbr,proto3" json:"subscribed_apn_ambr,omitempty"`
	PGwApnAmbr              *Ambr                         `protobuf:"bytes,11,opt,name=p_gw_apn_ambr,json=pGwApnAmbr,proto3" json:"p_gw_apn_ambr,omitempty"`
	DefaultEbi              uint32                        `protobuf:"varint,12,opt,name=default_ebi,json=defaultEbi,proto3" json:"default_ebi,omitempty"` // ebi_t
	BearerContexts          []uint32                      `protobuf:"varint,13,rep,packed,name=bearer_contexts,json=bearerContexts,proto3" json:"bearer_contexts,omitempty"`
	SGwAddressS11S4         string                        `protobuf:"bytes,14,opt,name=s_gw_address_s11_s4,json=sGwAddressS11S4,proto3" json:"s_gw_address_s11_s4,omitempty"` // ip_address_t
	SGwTeidS11S4            uint32                        `protobuf:"varint,15,opt,name=s_gw_teid_s11_s4,json=sGwTeidS11S4,proto3" json:"s_gw_teid_s11_s4,omitempty"`
	EsmData                 *EsmPdn                       `protobuf:"bytes,16,opt,name=esm_data,json=esmData,proto3" json:"esm_data,omitempty"`
	IsActive                bool                          `protobuf:"varint,17,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	Pco                     *ProtocolConfigurationOptions `protobuf:"bytes,18,opt,name=pco,proto3" json:"pco,omitempty"`
}

func (x *PdnContext) Reset() {
	*x = PdnContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_mme_nas_state_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdnContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdnContext) ProtoMessage() {}

func (x *PdnContext) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_mme_nas_state_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdnContext.ProtoReflect.Descriptor instead.
func (*PdnContext) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_mme_nas_state_proto_rawDescGZIP(), []int{3}
}

func (x *PdnContext) GetContextIdentifier() uint32 {
	if x != nil {
		return x.ContextIdentifier
	}
	return 0
}

func (x *PdnContext) GetApnInUse() string {
	if x != nil {
		return x.ApnInUse
	}
	return ""
}

func (x *PdnContext) GetApnSubscribed() string {
	if x != nil {
		return x.ApnSubscribed
	}
	return ""
}

func (x *PdnContext) GetPdnType() uint32 {
	if x != nil {
		return x.PdnType
	}
	return 0
}

func (x *PdnContext) GetPaa() []byte {
	if x != nil {
		return x.Paa
	}
	return nil
}

func (x *PdnContext) GetApnOiReplacement() string {
	if x != nil {
		return x.ApnOiReplacement
	}
	return ""
}

func (x *PdnContext) GetPGwAddressS5S8Cp() string {
	if x != nil {
		return x.PGwAddressS5S8Cp
	}
	return ""
}

func (x *PdnContext) GetPGwTeidS5S8Cp() uint32 {
	if x != nil {
		return x.PGwTeidS5S8Cp
	}
	return 0
}

func (x *PdnContext) GetDefaultBearerQosProfile() *EpsSubscribedQosProfile {
	if x != nil {
		return x.DefaultBearerQosProfile
	}
	return nil
}

func (x *PdnContext) GetSubscribedApnAmbr() *Ambr {
	if x != nil {
		return x.SubscribedApnAmbr
	}
	return nil
}

func (x *PdnContext) GetPGwApnAmbr() *Ambr {
	if x != nil {
		return x.PGwApnAmbr
	}
	return nil
}

func (x *PdnContext) GetDefaultEbi() uint32 {
	if x != nil {
		return x.DefaultEbi
	}
	return 0
}

func (x *PdnContext) GetBearerContexts() []uint32 {
	if x != nil {
		return x.BearerContexts
	}
	return nil
}

func (x *PdnContext) GetSGwAddressS11S4() string {
	if x != nil {
		return x.SGwAddressS11S4
	}
	return ""
}

func (x *PdnContext) GetSGwTeidS11S4() uint32 {
	if x != nil {
		return x.SGwTeidS11S4
	}
	return 0
}

func (x *PdnContext) GetEsmData() *EsmPdn {
	if x != nil {
		return x.EsmData
	}
	return nil
}

func (x *PdnContext) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *PdnContext) GetPco() *ProtocolConfigurationOptions {
	if x != nil {
		return x.Pco
	}
	return nil
}

type RegionalSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneCode string `protobuf:"bytes,1,opt,name=zone_code,json=zoneCode,proto3" json:"zone_code,omitempty"`
}

func (x *RegionalSubscription) Reset() {
	*x = RegionalSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_mme_nas_state_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionalSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionalSubscription) ProtoMessage() {}

func (x *RegionalSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_mme_nas_state_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionalSubscription.ProtoReflect.Descriptor instead.
func (*RegionalSubscription) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_mme_nas_state_proto_rawDescGZIP(), []int{4}
}

func (x *RegionalSubscription) GetZoneCode() string {
	if x != nil {
		return x.ZoneCode
	}
	return ""
}

// ue_mm_context_t
type UeContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msisdn         []byte      `protobuf:"bytes,1,opt,name=msisdn,proto3" json:"msisdn,omitempty"`
	RelCause       uint32      `protobuf:"varint,2,opt,name=rel_cause,json=relCause,proto3" json:"rel_cause,omitempty"` //enum s1cause
	MmState        uint32      `protobuf:"varint,3,opt,name=mm_state,json=mmState,proto3" json:"mm_state,omitempty"`    // mm_state_t
	EcmState       uint32      `protobuf:"varint,4,opt,name=ecm_state,json=ecmState,proto3" json:"ecm_state,omitempty"` // ecm_state_t
	EmmContext     *EmmContext `protobuf:"bytes,5,opt,name=emm_context,json=emmContext,proto3" json:"emm_context,omitempty"`
	SctpAssocIdKey uint32      `protobuf:"varint,6,opt,name=sctp_assoc_id_key,json=sctpAssocIdKey,proto3" json:"sctp_assoc_id_key,omitempty"`
	EnbUeS1ApId    uint32      `protobuf:"varint,7,opt,name=enb_ue_s1ap_id,json=enbUeS1apId,proto3" json:"enb_ue_s1ap_id,omitempty"`
	EnbS1ApIdKey   uint64      `protobuf:"varint,8,opt,name=enb_s1ap_id_key,json=enbS1apIdKey,proto3" json:"enb_s1ap_id_key,omitempty"`
	MmeUeS1ApId    uint32      `protobuf:"varint,9,opt,name=mme_ue_s1ap_id,json=mmeUeS1apId,proto3" json:"mme_ue_s1ap_id,omitempty"`
	AttachType     uint32      `protobuf:"varint,10,opt,name=attach_type,json=attachType,proto3" json:"attach_type,omitempty"`
	SgsDetachType  uint32      `protobuf:"varint,11,opt,name=sgs_detach_type,json=sgsDetachType,proto3" json:"sgs_detach_type,omitempty"`
	// eNB information
	EUtranCgi *Ecgi  `protobuf:"bytes,20,opt,name=e_utran_cgi,json=eUtranCgi,proto3" json:"e_utran_cgi,omitempty"`
	CellAge   uint64 `protobuf:"varint,21,opt,name=cell_age,json=cellAge,proto3" json:"cell_age,omitempty"`
	// location information
	Lai []byte `protobuf:"bytes,25,opt,name=lai,proto3" json:"lai,omitempty"` // lai_t
	// PDN information
	ApnConfig             *ApnConfigProfile `protobuf:"bytes,30,opt,name=apn_config,json=apnConfig,proto3" json:"apn_config,omitempty"`
	SubStatus             uint32            `protobuf:"varint,31,opt,name=sub_status,json=subStatus,proto3" json:"sub_status,omitempty"`                                       // subscriber_status_t
	SubscriberStatus      uint32            `protobuf:"varint,32,opt,name=subscriber_status,json=subscriberStatus,proto3" json:"subscriber_status,omitempty"`                  // subscriber_status_t
	NetworkAccessMode     uint32            `protobuf:"varint,33,opt,name=network_access_mode,json=networkAccessMode,proto3" json:"network_access_mode,omitempty"`             // network_access_mode_t
	AccessRestrictionData uint32            `protobuf:"varint,34,opt,name=access_restriction_data,json=accessRestrictionData,proto3" json:"access_restriction_data,omitempty"` // ard_t
	ApnOiReplacement      string            `protobuf:"bytes,35,opt,name=apn_oi_replacement,json=apnOiReplacement,proto3" json:"apn_oi_replacement,omitempty"`
	MmeTeidS11            uint32            `protobuf:"varint,36,opt,name=mme_teid_s11,json=mmeTeidS11,proto3" json:"mme_teid_s11,omitempty"`                  // teid_t
	SubscribedUeAmbr      *Ambr             `protobuf:"bytes,37,opt,name=subscribed_ue_ambr,json=subscribedUeAmbr,proto3" json:"subscribed_ue_ambr,omitempty"` //ambr_t
	UsedUeAmbr            *Ambr             `protobuf:"bytes,38,opt,name=used_ue_ambr,json=usedUeAmbr,proto3" json:"used_ue_ambr,omitempty"`                   // ambr_t
	UsedAmbr              *Ambr             `protobuf:"bytes,39,opt,name=used_ambr,json=usedAmbr,proto3" json:"used_ambr,omitempty"`                           //ambr_t
	NbActivePdnContexts   uint32            `protobuf:"varint,40,opt,name=nb_active_pdn_contexts,json=nbActivePdnContexts,proto3" json:"nb_active_pdn_contexts,omitempty"`
	PdnContexts           []*PdnContext     `protobuf:"bytes,41,rep,name=pdn_contexts,json=pdnContexts,proto3" json:"pdn_contexts,omitempty"`          //pdn_context_t
	BearerContexts        []*BearerContext  `protobuf:"bytes,42,rep,name=bearer_contexts,json=bearerContexts,proto3" json:"bearer_contexts,omitempty"` // bearer_context_t
	UeRadioCapability     []byte            `protobuf:"bytes,43,opt,name=ue_radio_capability,json=ueRadioCapability,proto3" json:"ue_radio_capability,omitempty"`
	// Regional subscription
	NumRegSub uint32                  `protobuf:"varint,44,opt,name=num_reg_sub,json=numRegSub,proto3" json:"num_reg_sub,omitempty"`
	RegSub    []*RegionalSubscription `protobuf:"bytes,45,rep,name=reg_sub,json=regSub,proto3" json:"reg_sub,omitempty"`
	// flags
	SendUePurgeRequest         bool `protobuf:"varint,60,opt,name=send_ue_purge_request,json=sendUePurgeRequest,proto3" json:"send_ue_purge_request,omitempty"`
	HssInitiatedDetach         bool `protobuf:"varint,61,opt,name=hss_initiated_detach,json=hssInitiatedDetach,proto3" json:"hss_initiated_detach,omitempty"`
	LocationInfoConfirmedInHss bool `protobuf:"varint,62,opt,name=location_info_confirmed_in_hss,json=locationInfoConfirmedInHss,proto3" json:"location_info_confirmed_in_hss,omitempty"`
	Ppf                        bool `protobuf:"varint,63,opt,name=ppf,proto3" json:"ppf,omitempty"`
	SubscriptionKnown          bool `protobuf:"varint,64,opt,name=subscription_known,json=subscriptionKnown,proto3" json:"subscription_known,omitempty"`
	PathSwitchReq              bool `protobuf:"varint,65,opt,name=path_switch_req,json=pathSwitchReq,proto3" json:"path_switch_req,omitempty"`
	// CSFB
	GrantedService                    uint32      `protobuf:"varint,100,opt,name=granted_service,json=grantedService,proto3" json:"granted_service,omitempty"` // granted_service_t
	CsFallbackIndicator               uint32      `protobuf:"varint,101,opt,name=cs_fallback_indicator,json=csFallbackIndicator,proto3" json:"cs_fallback_indicator,omitempty"`
	SgsContext                        *SgsContext `protobuf:"bytes,102,opt,name=sgs_context,json=sgsContext,proto3" json:"sgs_context,omitempty"`
	TauAcceptEpsBerCntxStatus         uint32      `protobuf:"varint,103,opt,name=tau_accept_eps_ber_cntx_status,json=tauAcceptEpsBerCntxStatus,proto3" json:"tau_accept_eps_ber_cntx_status,omitempty"`
	NbDeleteSessions                  uint32      `protobuf:"varint,104,opt,name=nb_delete_sessions,json=nbDeleteSessions,proto3" json:"nb_delete_sessions,omitempty"`
	NbDeleteBearerCmd                 uint32      `protobuf:"varint,105,opt,name=nb_delete_bearer_cmd,json=nbDeleteBearerCmd,proto3" json:"nb_delete_bearer_cmd,omitempty"`
	MmeInitiatedDedBearerDeactivation bool        `protobuf:"varint,106,opt,name=mme_initiated_ded_bearer_deactivation,json=mmeInitiatedDedBearerDeactivation,proto3" json:"mme_initiated_ded_bearer_deactivation,omitempty"`
	NbRabs                            uint32      `protobuf:"varint,107,opt,name=nb_rabs,json=nbRabs,proto3" json:"nb_rabs,omitempty"`
	// Deprecated: Do not use.
	MobileReachabilityTimer *Timer `protobuf:"bytes,200,opt,name=mobile_reachability_timer,json=mobileReachabilityTimer,proto3" json:"mobile_reachability_timer,omitempty"`
	// Deprecated: Do not use.
	ImplicitDetachTimer *Timer `protobuf:"bytes,201,opt,name=implicit_detach_timer,json=implicitDetachTimer,proto3" json:"implicit_detach_timer,omitempty"`
	// Deprecated: Do not use.
	InitialContextSetupRspTimer *Timer `protobuf:"bytes,202,opt,name=initial_context_setup_rsp_timer,json=initialContextSetupRspTimer,proto3" json:"initial_context_setup_rsp_timer,omitempty"`
	// Deprecated: Do not use.
	UeContextModificationTimer *Timer `protobuf:"bytes,203,opt,name=ue_context_modification_timer,json=ueContextModificationTimer,proto3" json:"ue_context_modification_timer,omitempty"`
	// Deprecated: Do not use.
	PagingResponseTimer *Timer `protobuf:"bytes,204,opt,name=paging_response_timer,json=pagingResponseTimer,proto3" json:"paging_response_timer,omitempty"`
	RauTauTimer         uint32 `protobuf:"varint,205,opt,name=rau_tau_timer,json=rauTauTimer,proto3" json:"rau_tau_timer,omitempty"`
	// Deprecated: Do not use.
	UlrResponseTimer                   *Timer               `protobuf:"bytes,206,opt,name=ulr_response_timer,json=ulrResponseTimer,proto3" json:"ulr_response_timer,omitempty"`
	TimeMobileReachabilityTimerStarted *timestamp.Timestamp `protobuf:"bytes,207,opt,name=time_mobile_reachability_timer_started,json=timeMobileReachabilityTimerStarted,proto3" json:"time_mobile_reachability_timer_started,omitempty"`
	TimeImplicitDetachTimerStarted     *timestamp.Timestamp `protobuf:"bytes,208,opt,name=time_implicit_detach_timer_started,json=timeImplicitDetachTimerStarted,proto3" json:"time_implicit_detach_timer_started,omitempty"`
	TimePagingResponseTimerStarted     *timestamp.Timestamp `protobuf:"bytes,209,opt,name=time_paging_response_timer_started,json=timePagingResponseTimerStarted,proto3" json:"time_paging_response_timer_started,omitempty"`
	PagingRetxCount                    uint32               `protobuf:"varint,210,opt,name=paging_retx_count,json=pagingRetxCount,proto3" json:"paging_retx_count,omitempty"`
	TimeIcsRspTimerStarted             *timestamp.Timestamp `protobuf:"bytes,211,opt,name=time_ics_rsp_timer_started,json=timeIcsRspTimerStarted,proto3" json:"time_ics_rsp_timer_started,omitempty"`
	// 5G protos
	// AMF UE NGAP ID, Unique identity of UE within AMF
	AmfUeNgapId uint32 `protobuf:"varint,221,opt,name=amf_ue_ngap_id,json=amfUeNgapId,proto3" json:"amf_ue_ngap_id,omitempty"`
	// UEContextRequest in  INITIAL UE MESSAGE
	UeContextRequest uint32 `protobuf:"varint,222,opt,name=ue_context_request,json=ueContextRequest,proto3" json:"ue_context_request,omitempty"`
	GnbUeNgapId      uint32 `protobuf:"varint,223,opt,name=gnb_ue_ngap_id,json=gnbUeNgapId,proto3" json:"gnb_ue_ngap_id,omitempty"`
	GnbNgapIdKey     uint64 `protobuf:"varint,224,opt,name=gnb_ngap_id_key,json=gnbNgapIdKey,proto3" json:"gnb_ngap_id_key,omitempty"`
	AmfTeidN11       uint32 `protobuf:"varint,225,opt,name=amf_teid_n11,json=amfTeidN11,proto3" json:"amf_teid_n11,omitempty"` //teid_t
}

func (x *UeContext) Reset() {
	*x = UeContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_mme_nas_state_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UeContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UeContext) ProtoMessage() {}

func (x *UeContext) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_mme_nas_state_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UeContext.ProtoReflect.Descriptor instead.
func (*UeContext) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_mme_nas_state_proto_rawDescGZIP(), []int{5}
}

func (x *UeContext) GetMsisdn() []byte {
	if x != nil {
		return x.Msisdn
	}
	return nil
}

func (x *UeContext) GetRelCause() uint32 {
	if x != nil {
		return x.RelCause
	}
	return 0
}

func (x *UeContext) GetMmState() uint32 {
	if x != nil {
		return x.MmState
	}
	return 0
}

func (x *UeContext) GetEcmState() uint32 {
	if x != nil {
		return x.EcmState
	}
	return 0
}

func (x *UeContext) GetEmmContext() *EmmContext {
	if x != nil {
		return x.EmmContext
	}
	return nil
}

func (x *UeContext) GetSctpAssocIdKey() uint32 {
	if x != nil {
		return x.SctpAssocIdKey
	}
	return 0
}

func (x *UeContext) GetEnbUeS1ApId() uint32 {
	if x != nil {
		return x.EnbUeS1ApId
	}
	return 0
}

func (x *UeContext) GetEnbS1ApIdKey() uint64 {
	if x != nil {
		return x.EnbS1ApIdKey
	}
	return 0
}

func (x *UeContext) GetMmeUeS1ApId() uint32 {
	if x != nil {
		return x.MmeUeS1ApId
	}
	return 0
}

func (x *UeContext) GetAttachType() uint32 {
	if x != nil {
		return x.AttachType
	}
	return 0
}

func (x *UeContext) GetSgsDetachType() uint32 {
	if x != nil {
		return x.SgsDetachType
	}
	return 0
}

func (x *UeContext) GetEUtranCgi() *Ecgi {
	if x != nil {
		return x.EUtranCgi
	}
	return nil
}

func (x *UeContext) GetCellAge() uint64 {
	if x != nil {
		return x.CellAge
	}
	return 0
}

func (x *UeContext) GetLai() []byte {
	if x != nil {
		return x.Lai
	}
	return nil
}

func (x *UeContext) GetApnConfig() *ApnConfigProfile {
	if x != nil {
		return x.ApnConfig
	}
	return nil
}

func (x *UeContext) GetSubStatus() uint32 {
	if x != nil {
		return x.SubStatus
	}
	return 0
}

func (x *UeContext) GetSubscriberStatus() uint32 {
	if x != nil {
		return x.SubscriberStatus
	}
	return 0
}

func (x *UeContext) GetNetworkAccessMode() uint32 {
	if x != nil {
		return x.NetworkAccessMode
	}
	return 0
}

func (x *UeContext) GetAccessRestrictionData() uint32 {
	if x != nil {
		return x.AccessRestrictionData
	}
	return 0
}

func (x *UeContext) GetApnOiReplacement() string {
	if x != nil {
		return x.ApnOiReplacement
	}
	return ""
}

func (x *UeContext) GetMmeTeidS11() uint32 {
	if x != nil {
		return x.MmeTeidS11
	}
	return 0
}

func (x *UeContext) GetSubscribedUeAmbr() *Ambr {
	if x != nil {
		return x.SubscribedUeAmbr
	}
	return nil
}

func (x *UeContext) GetUsedUeAmbr() *Ambr {
	if x != nil {
		return x.UsedUeAmbr
	}
	return nil
}

func (x *UeContext) GetUsedAmbr() *Ambr {
	if x != nil {
		return x.UsedAmbr
	}
	return nil
}

func (x *UeContext) GetNbActivePdnContexts() uint32 {
	if x != nil {
		return x.NbActivePdnContexts
	}
	return 0
}

func (x *UeContext) GetPdnContexts() []*PdnContext {
	if x != nil {
		return x.PdnContexts
	}
	return nil
}

func (x *UeContext) GetBearerContexts() []*BearerContext {
	if x != nil {
		return x.BearerContexts
	}
	return nil
}

func (x *UeContext) GetUeRadioCapability() []byte {
	if x != nil {
		return x.UeRadioCapability
	}
	return nil
}

func (x *UeContext) GetNumRegSub() uint32 {
	if x != nil {
		return x.NumRegSub
	}
	return 0
}

func (x *UeContext) GetRegSub() []*RegionalSubscription {
	if x != nil {
		return x.RegSub
	}
	return nil
}

func (x *UeContext) GetSendUePurgeRequest() bool {
	if x != nil {
		return x.SendUePurgeRequest
	}
	return false
}

func (x *UeContext) GetHssInitiatedDetach() bool {
	if x != nil {
		return x.HssInitiatedDetach
	}
	return false
}

func (x *UeContext) GetLocationInfoConfirmedInHss() bool {
	if x != nil {
		return x.LocationInfoConfirmedInHss
	}
	return false
}

func (x *UeContext) GetPpf() bool {
	if x != nil {
		return x.Ppf
	}
	return false
}

func (x *UeContext) GetSubscriptionKnown() bool {
	if x != nil {
		return x.SubscriptionKnown
	}
	return false
}

func (x *UeContext) GetPathSwitchReq() bool {
	if x != nil {
		return x.PathSwitchReq
	}
	return false
}

func (x *UeContext) GetGrantedService() uint32 {
	if x != nil {
		return x.GrantedService
	}
	return 0
}

func (x *UeContext) GetCsFallbackIndicator() uint32 {
	if x != nil {
		return x.CsFallbackIndicator
	}
	return 0
}

func (x *UeContext) GetSgsContext() *SgsContext {
	if x != nil {
		return x.SgsContext
	}
	return nil
}

func (x *UeContext) GetTauAcceptEpsBerCntxStatus() uint32 {
	if x != nil {
		return x.TauAcceptEpsBerCntxStatus
	}
	return 0
}

func (x *UeContext) GetNbDeleteSessions() uint32 {
	if x != nil {
		return x.NbDeleteSessions
	}
	return 0
}

func (x *UeContext) GetNbDeleteBearerCmd() uint32 {
	if x != nil {
		return x.NbDeleteBearerCmd
	}
	return 0
}

func (x *UeContext) GetMmeInitiatedDedBearerDeactivation() bool {
	if x != nil {
		return x.MmeInitiatedDedBearerDeactivation
	}
	return false
}

func (x *UeContext) GetNbRabs() uint32 {
	if x != nil {
		return x.NbRabs
	}
	return 0
}

// Deprecated: Do not use.
func (x *UeContext) GetMobileReachabilityTimer() *Timer {
	if x != nil {
		return x.MobileReachabilityTimer
	}
	return nil
}

// Deprecated: Do not use.
func (x *UeContext) GetImplicitDetachTimer() *Timer {
	if x != nil {
		return x.ImplicitDetachTimer
	}
	return nil
}

// Deprecated: Do not use.
func (x *UeContext) GetInitialContextSetupRspTimer() *Timer {
	if x != nil {
		return x.InitialContextSetupRspTimer
	}
	return nil
}

// Deprecated: Do not use.
func (x *UeContext) GetUeContextModificationTimer() *Timer {
	if x != nil {
		return x.UeContextModificationTimer
	}
	return nil
}

// Deprecated: Do not use.
func (x *UeContext) GetPagingResponseTimer() *Timer {
	if x != nil {
		return x.PagingResponseTimer
	}
	return nil
}

func (x *UeContext) GetRauTauTimer() uint32 {
	if x != nil {
		return x.RauTauTimer
	}
	return 0
}

// Deprecated: Do not use.
func (x *UeContext) GetUlrResponseTimer() *Timer {
	if x != nil {
		return x.UlrResponseTimer
	}
	return nil
}

func (x *UeContext) GetTimeMobileReachabilityTimerStarted() *timestamp.Timestamp {
	if x != nil {
		return x.TimeMobileReachabilityTimerStarted
	}
	return nil
}

func (x *UeContext) GetTimeImplicitDetachTimerStarted() *timestamp.Timestamp {
	if x != nil {
		return x.TimeImplicitDetachTimerStarted
	}
	return nil
}

func (x *UeContext) GetTimePagingResponseTimerStarted() *timestamp.Timestamp {
	if x != nil {
		return x.TimePagingResponseTimerStarted
	}
	return nil
}

func (x *UeContext) GetPagingRetxCount() uint32 {
	if x != nil {
		return x.PagingRetxCount
	}
	return 0
}

func (x *UeContext) GetTimeIcsRspTimerStarted() *timestamp.Timestamp {
	if x != nil {
		return x.TimeIcsRspTimerStarted
	}
	return nil
}

func (x *UeContext) GetAmfUeNgapId() uint32 {
	if x != nil {
		return x.AmfUeNgapId
	}
	return 0
}

func (x *UeContext) GetUeContextRequest() uint32 {
	if x != nil {
		return x.UeContextRequest
	}
	return 0
}

func (x *UeContext) GetGnbUeNgapId() uint32 {
	if x != nil {
		return x.GnbUeNgapId
	}
	return 0
}

func (x *UeContext) GetGnbNgapIdKey() uint64 {
	if x != nil {
		return x.GnbNgapIdKey
	}
	return 0
}

func (x *UeContext) GetAmfTeidN11() uint32 {
	if x != nil {
		return x.AmfTeidN11
	}
	return 0
}

// mme_ue_context_t
type MmeUeContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImsiUeIdHtbl    map[uint64]uint64 `protobuf:"bytes,4,rep,name=imsi_ue_id_htbl,json=imsiUeIdHtbl,proto3" json:"imsi_ue_id_htbl,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`              // imsi -> mme_ue_id
	Tun11UeIdHtbl   map[uint64]uint64 `protobuf:"bytes,5,rep,name=tun11_ue_id_htbl,json=tun11UeIdHtbl,proto3" json:"tun11_ue_id_htbl,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`           // tun_id -> mme_ue_id
	EnbUeIdUeIdHtbl map[uint64]uint64 `protobuf:"bytes,7,rep,name=enb_ue_id_ue_id_htbl,json=enbUeIdUeIdHtbl,proto3" json:"enb_ue_id_ue_id_htbl,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // enb_ue_id -> mme_ue_id
	GutiUeIdHtbl    map[string]uint64 `protobuf:"bytes,8,rep,name=guti_ue_id_htbl,json=gutiUeIdHtbl,proto3" json:"guti_ue_id_htbl,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`               // guti -> mme_ue_id
}

func (x *MmeUeContext) Reset() {
	*x = MmeUeContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_mme_nas_state_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MmeUeContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmeUeContext) ProtoMessage() {}

func (x *MmeUeContext) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_mme_nas_state_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmeUeContext.ProtoReflect.Descriptor instead.
func (*MmeUeContext) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_mme_nas_state_proto_rawDescGZIP(), []int{6}
}

func (x *MmeUeContext) GetImsiUeIdHtbl() map[uint64]uint64 {
	if x != nil {
		return x.ImsiUeIdHtbl
	}
	return nil
}

func (x *MmeUeContext) GetTun11UeIdHtbl() map[uint64]uint64 {
	if x != nil {
		return x.Tun11UeIdHtbl
	}
	return nil
}

func (x *MmeUeContext) GetEnbUeIdUeIdHtbl() map[uint64]uint64 {
	if x != nil {
		return x.EnbUeIdUeIdHtbl
	}
	return nil
}

func (x *MmeUeContext) GetGutiUeIdHtbl() map[string]uint64 {
	if x != nil {
		return x.GutiUeIdHtbl
	}
	return nil
}

// mme_app_desc_t
type MmeNasState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MmeUeContexts *MmeUeContext `protobuf:"bytes,1,opt,name=mme_ue_contexts,json=mmeUeContexts,proto3" json:"mme_ue_contexts,omitempty"` // mme_ue_context_t
	// Deprecated: Do not use.
	NbEnbConnected          uint32 `protobuf:"varint,2,opt,name=nb_enb_connected,json=nbEnbConnected,proto3" json:"nb_enb_connected,omitempty"`
	NbUeAttached            uint32 `protobuf:"varint,3,opt,name=nb_ue_attached,json=nbUeAttached,proto3" json:"nb_ue_attached,omitempty"`
	NbUeConnected           uint32 `protobuf:"varint,4,opt,name=nb_ue_connected,json=nbUeConnected,proto3" json:"nb_ue_connected,omitempty"`
	NbDefaultEpsBearers     uint32 `protobuf:"varint,5,opt,name=nb_default_eps_bearers,json=nbDefaultEpsBearers,proto3" json:"nb_default_eps_bearers,omitempty"`
	NbS1UBearers            uint32 `protobuf:"varint,6,opt,name=nb_s1u_bearers,json=nbS1uBearers,proto3" json:"nb_s1u_bearers,omitempty"`
	StatisticTimerId        uint64 `protobuf:"varint,7,opt,name=statistic_timer_id,json=statisticTimerId,proto3" json:"statistic_timer_id,omitempty"`
	NbUeManaged             uint32 `protobuf:"varint,8,opt,name=nb_ue_managed,json=nbUeManaged,proto3" json:"nb_ue_managed,omitempty"`
	NbUeIdle                uint32 `protobuf:"varint,9,opt,name=nb_ue_idle,json=nbUeIdle,proto3" json:"nb_ue_idle,omitempty"`
	NbBearersManaged        uint32 `protobuf:"varint,10,opt,name=nb_bearers_managed,json=nbBearersManaged,proto3" json:"nb_bearers_managed,omitempty"`
	NbUeSinceLastStat       uint32 `protobuf:"varint,11,opt,name=nb_ue_since_last_stat,json=nbUeSinceLastStat,proto3" json:"nb_ue_since_last_stat,omitempty"`                //TODO: remove
	NbBearersSinceLastStat  uint32 `protobuf:"varint,12,opt,name=nb_bearers_since_last_stat,json=nbBearersSinceLastStat,proto3" json:"nb_bearers_since_last_stat,omitempty"` //TODO: remove
	MmeAppUeS1ApIdGenerator uint32 `protobuf:"varint,20,opt,name=mme_app_ue_s1ap_id_generator,json=mmeAppUeS1apIdGenerator,proto3" json:"mme_app_ue_s1ap_id_generator,omitempty"`
}

func (x *MmeNasState) Reset() {
	*x = MmeNasState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_mme_nas_state_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MmeNasState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmeNasState) ProtoMessage() {}

func (x *MmeNasState) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_mme_nas_state_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmeNasState.ProtoReflect.Descriptor instead.
func (*MmeNasState) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_mme_nas_state_proto_rawDescGZIP(), []int{7}
}

func (x *MmeNasState) GetMmeUeContexts() *MmeUeContext {
	if x != nil {
		return x.MmeUeContexts
	}
	return nil
}

// Deprecated: Do not use.
func (x *MmeNasState) GetNbEnbConnected() uint32 {
	if x != nil {
		return x.NbEnbConnected
	}
	return 0
}

func (x *MmeNasState) GetNbUeAttached() uint32 {
	if x != nil {
		return x.NbUeAttached
	}
	return 0
}

func (x *MmeNasState) GetNbUeConnected() uint32 {
	if x != nil {
		return x.NbUeConnected
	}
	return 0
}

func (x *MmeNasState) GetNbDefaultEpsBearers() uint32 {
	if x != nil {
		return x.NbDefaultEpsBearers
	}
	return 0
}

func (x *MmeNasState) GetNbS1UBearers() uint32 {
	if x != nil {
		return x.NbS1UBearers
	}
	return 0
}

func (x *MmeNasState) GetStatisticTimerId() uint64 {
	if x != nil {
		return x.StatisticTimerId
	}
	return 0
}

func (x *MmeNasState) GetNbUeManaged() uint32 {
	if x != nil {
		return x.NbUeManaged
	}
	return 0
}

func (x *MmeNasState) GetNbUeIdle() uint32 {
	if x != nil {
		return x.NbUeIdle
	}
	return 0
}

func (x *MmeNasState) GetNbBearersManaged() uint32 {
	if x != nil {
		return x.NbBearersManaged
	}
	return 0
}

func (x *MmeNasState) GetNbUeSinceLastStat() uint32 {
	if x != nil {
		return x.NbUeSinceLastStat
	}
	return 0
}

func (x *MmeNasState) GetNbBearersSinceLastStat() uint32 {
	if x != nil {
		return x.NbBearersSinceLastStat
	}
	return 0
}

func (x *MmeNasState) GetMmeAppUeS1ApIdGenerator() uint32 {
	if x != nil {
		return x.MmeAppUeS1ApIdGenerator
	}
	return 0
}

type ImsiList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imsi []uint64 `protobuf:"varint,1,rep,packed,name=imsi,proto3" json:"imsi,omitempty"`
}

func (x *ImsiList) Reset() {
	*x = ImsiList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_mme_nas_state_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImsiList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImsiList) ProtoMessage() {}

func (x *ImsiList) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_mme_nas_state_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImsiList.ProtoReflect.Descriptor instead.
func (*ImsiList) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_mme_nas_state_proto_rawDescGZIP(), []int{8}
}

func (x *ImsiList) GetImsi() []uint64 {
	if x != nil {
		return x.Imsi
	}
	return nil
}

type MmeUeIpImsiMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ue_ip is allocated at multiple PGWs, so there are chances to have same
	// ueip for different UEs
	MmeUeipImsiMap map[string]*ImsiList `protobuf:"bytes,1,rep,name=mme_ueip_imsi_map,json=mmeUeipImsiMap,proto3" json:"mme_ueip_imsi_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // ue_ip => list of imsi64
}

func (x *MmeUeIpImsiMap) Reset() {
	*x = MmeUeIpImsiMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_mme_nas_state_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MmeUeIpImsiMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmeUeIpImsiMap) ProtoMessage() {}

func (x *MmeUeIpImsiMap) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_mme_nas_state_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmeUeIpImsiMap.ProtoReflect.Descriptor instead.
func (*MmeUeIpImsiMap) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_mme_nas_state_proto_rawDescGZIP(), []int{9}
}

func (x *MmeUeIpImsiMap) GetMmeUeipImsiMap() map[string]*ImsiList {
	if x != nil {
		return x.MmeUeipImsiMap
	}
	return nil
}

var File_lte_protos_oai_mme_nas_state_proto protoreflect.FileDescriptor

var file_lte_protos_oai_mme_nas_state_proto_rawDesc = []byte{
	0x0a, 0x22, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6f, 0x61, 0x69,
	0x2f, 0x6d, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e,
	0x6f, 0x61, 0x69, 0x1a, 0x23, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x6f, 0x61, 0x69, 0x2f, 0x73, 0x74, 0x64, 0x5f, 0x33, 0x67, 0x70, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6f, 0x61, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6c, 0x74, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6f, 0x61, 0x69, 0x2f, 0x6e, 0x61, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x6c, 0x74, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6f, 0x61, 0x69, 0x2f, 0x73, 0x70, 0x67, 0x77,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0c, 0x0a,
	0x0a, 0x53, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xfa, 0x05, 0x0a, 0x0d,
	0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x62, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x62, 0x69, 0x12,
	0x35, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0e, 0x73, 0x5f, 0x67, 0x77, 0x5f, 0x66,
	0x74, 0x65, 0x69, 0x64, 0x5f, 0x73, 0x31, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x46,
	0x74, 0x65, 0x69, 0x64, 0x52, 0x0b, 0x73, 0x47, 0x77, 0x46, 0x74, 0x65, 0x69, 0x64, 0x53, 0x31,
	0x75, 0x12, 0x41, 0x0a, 0x13, 0x70, 0x5f, 0x67, 0x77, 0x5f, 0x66, 0x74, 0x65, 0x69, 0x64, 0x5f,
	0x73, 0x35, 0x5f, 0x73, 0x38, 0x5f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x46,
	0x74, 0x65, 0x69, 0x64, 0x52, 0x0e, 0x70, 0x47, 0x77, 0x46, 0x74, 0x65, 0x69, 0x64, 0x53, 0x35,
	0x53, 0x38, 0x55, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x63, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x71, 0x63, 0x69, 0x12, 0x1a, 0x0a, 0x09, 0x70, 0x64, 0x6e, 0x5f, 0x63, 0x78,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x64, 0x6e, 0x43, 0x78,
	0x49, 0x64, 0x12, 0x44, 0x0a, 0x0f, 0x65, 0x73, 0x6d, 0x5f, 0x65, 0x62, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x45, 0x73, 0x6d, 0x45,
	0x62, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0d, 0x65, 0x73, 0x6d, 0x45, 0x62,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x65, 0x6e, 0x62, 0x5f,
	0x66, 0x74, 0x65, 0x69, 0x64, 0x5f, 0x73, 0x31, 0x75, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e,
	0x46, 0x74, 0x65, 0x69, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x62, 0x46, 0x74, 0x65, 0x69, 0x64, 0x53,
	0x31, 0x75, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x39, 0x0a, 0x18, 0x70, 0x72, 0x65,
	0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x70, 0x72, 0x65,
	0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x09, 0x73, 0x61, 0x76,
	0x65, 0x64, 0x5f, 0x74, 0x66, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x08, 0x73, 0x61, 0x76, 0x65, 0x64, 0x54, 0x66, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x73, 0x61,
	0x76, 0x65, 0x64, 0x5f, 0x71, 0x6f, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x42, 0x65,
	0x61, 0x72, 0x65, 0x72, 0x51, 0x6f, 0x73, 0x52, 0x08, 0x73, 0x61, 0x76, 0x65, 0x64, 0x51, 0x6f,
	0x73, 0x12, 0x41, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e,
	0x6f, 0x61, 0x69, 0x2e, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x22, 0x22, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x01, 0x22, 0xac, 0x01, 0x0a, 0x06, 0x45, 0x73, 0x6d,
	0x50, 0x64, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x70, 0x74, 0x69, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x65, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x45,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x6d, 0x62, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x61, 0x6d, 0x62, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x64, 0x64, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x52, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x5f, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6e, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xc7, 0x06, 0x0a, 0x0a, 0x50, 0x64, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x0a, 0x61, 0x70, 0x6e, 0x5f, 0x69, 0x6e, 0x5f,
	0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x6e, 0x49, 0x6e,
	0x55, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x6e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x64,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x64,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x61, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x70, 0x61, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x70, 0x6e, 0x5f, 0x6f,
	0x69, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x70, 0x6e, 0x4f, 0x69, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x15, 0x70, 0x5f, 0x67, 0x77, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x35, 0x5f, 0x73, 0x38, 0x5f, 0x63, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x47, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x35, 0x53, 0x38, 0x43, 0x70, 0x12, 0x29, 0x0a, 0x12, 0x70, 0x5f, 0x67, 0x77, 0x5f, 0x74,
	0x65, 0x69, 0x64, 0x5f, 0x73, 0x35, 0x5f, 0x73, 0x38, 0x5f, 0x63, 0x70, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x70, 0x47, 0x77, 0x54, 0x65, 0x69, 0x64, 0x53, 0x35, 0x53, 0x38, 0x43,
	0x70, 0x12, 0x63, 0x0a, 0x1a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x62, 0x65, 0x61,
	0x72, 0x65, 0x72, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x45, 0x70, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x64, 0x51, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x17, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x51, 0x6f, 0x73, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x6e, 0x5f, 0x61, 0x6d, 0x62, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e,
	0x6f, 0x61, 0x69, 0x2e, 0x41, 0x6d, 0x62, 0x72, 0x52, 0x11, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x64, 0x41, 0x70, 0x6e, 0x41, 0x6d, 0x62, 0x72, 0x12, 0x36, 0x0a, 0x0d, 0x70,
	0x5f, 0x67, 0x77, 0x5f, 0x61, 0x70, 0x6e, 0x5f, 0x61, 0x6d, 0x62, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f,
	0x61, 0x69, 0x2e, 0x41, 0x6d, 0x62, 0x72, 0x52, 0x0a, 0x70, 0x47, 0x77, 0x41, 0x70, 0x6e, 0x41,
	0x6d, 0x62, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x65,
	0x62, 0x69, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x45, 0x62, 0x69, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x62,
	0x65, 0x61, 0x72, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x2c, 0x0a,
	0x13, 0x73, 0x5f, 0x67, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x31,
	0x31, 0x5f, 0x73, 0x34, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x47, 0x77, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x31, 0x31, 0x53, 0x34, 0x12, 0x26, 0x0a, 0x10, 0x73,
	0x5f, 0x67, 0x77, 0x5f, 0x74, 0x65, 0x69, 0x64, 0x5f, 0x73, 0x31, 0x31, 0x5f, 0x73, 0x34, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x47, 0x77, 0x54, 0x65, 0x69, 0x64, 0x53, 0x31,
	0x31, 0x53, 0x34, 0x12, 0x30, 0x0a, 0x08, 0x65, 0x73, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x45, 0x73, 0x6d, 0x50, 0x64, 0x6e, 0x52, 0x07, 0x65, 0x73,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x3d, 0x0a, 0x03, 0x70, 0x63, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03, 0x70, 0x63,
	0x6f, 0x22, 0x34, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x7a, 0x6f,
	0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x7a,
	0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9d, 0x19, 0x0a, 0x09, 0x55, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x6c, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x72, 0x65, 0x6c, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6d,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x63, 0x6d, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x63, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x65, 0x6d, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x45, 0x6d, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x0a, 0x65, 0x6d, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x29,
	0x0a, 0x11, 0x73, 0x63, 0x74, 0x70, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x63, 0x74, 0x70, 0x41,
	0x73, 0x73, 0x6f, 0x63, 0x49, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0e, 0x65, 0x6e, 0x62,
	0x5f, 0x75, 0x65, 0x5f, 0x73, 0x31, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x65, 0x6e, 0x62, 0x55, 0x65, 0x53, 0x31, 0x61, 0x70, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0f, 0x65, 0x6e, 0x62, 0x5f, 0x73, 0x31, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x6e, 0x62, 0x53, 0x31, 0x61, 0x70,
	0x49, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0e, 0x6d, 0x6d, 0x65, 0x5f, 0x75, 0x65, 0x5f,
	0x73, 0x31, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d,
	0x6d, 0x65, 0x55, 0x65, 0x53, 0x31, 0x61, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73,
	0x67, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x67, 0x73, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x65, 0x5f, 0x75, 0x74, 0x72, 0x61, 0x6e, 0x5f, 0x63,
	0x67, 0x69, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x45, 0x63, 0x67, 0x69, 0x52, 0x09, 0x65,
	0x55, 0x74, 0x72, 0x61, 0x6e, 0x43, 0x67, 0x69, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x65, 0x6c, 0x6c,
	0x5f, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x65, 0x6c, 0x6c,
	0x41, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x69, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x6c, 0x61, 0x69, 0x12, 0x3e, 0x0a, 0x0a, 0x61, 0x70, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x41, 0x70, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x09, 0x61, 0x70, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x75, 0x62, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x70, 0x6e,
	0x5f, 0x6f, 0x69, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x70, 0x6e, 0x4f, 0x69, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x6d, 0x65, 0x5f, 0x74,
	0x65, 0x69, 0x64, 0x5f, 0x73, 0x31, 0x31, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d,
	0x6d, 0x65, 0x54, 0x65, 0x69, 0x64, 0x53, 0x31, 0x31, 0x12, 0x41, 0x0a, 0x12, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x5f, 0x75, 0x65, 0x5f, 0x61, 0x6d, 0x62, 0x72, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x41, 0x6d, 0x62, 0x72, 0x52, 0x10, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x55, 0x65, 0x41, 0x6d, 0x62, 0x72, 0x12, 0x35, 0x0a, 0x0c,
	0x75, 0x73, 0x65, 0x64, 0x5f, 0x75, 0x65, 0x5f, 0x61, 0x6d, 0x62, 0x72, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f,
	0x61, 0x69, 0x2e, 0x41, 0x6d, 0x62, 0x72, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x55, 0x65, 0x41,
	0x6d, 0x62, 0x72, 0x12, 0x30, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x62, 0x72,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x41, 0x6d, 0x62, 0x72, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x64, 0x41, 0x6d, 0x62, 0x72, 0x12, 0x33, 0x0a, 0x16, 0x6e, 0x62, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x70, 0x64, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6e, 0x62, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50,
	0x64, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x70, 0x64,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69,
	0x2e, 0x50, 0x64, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x70, 0x64, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x62, 0x65, 0x61, 0x72,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x2a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61,
	0x69, 0x2e, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x0e, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x75, 0x65, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x75, 0x65,
	0x52, 0x61, 0x64, 0x69, 0x6f, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x1e, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x67, 0x5f, 0x73, 0x75, 0x62, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x67, 0x53, 0x75, 0x62, 0x12,
	0x3d, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x5f, 0x73, 0x75, 0x62, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67, 0x53, 0x75, 0x62, 0x12, 0x31,
	0x0a, 0x15, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x75, 0x65, 0x5f, 0x70, 0x75, 0x72, 0x67, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73,
	0x65, 0x6e, 0x64, 0x55, 0x65, 0x50, 0x75, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x68, 0x73, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x74,
	0x61, 0x63, 0x68, 0x12, 0x42, 0x0a, 0x1e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x5f, 0x68, 0x73, 0x73, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x65, 0x64, 0x49, 0x6e, 0x48, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x70, 0x66, 0x18, 0x3f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x70, 0x70, 0x66, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18,
	0x40, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x41, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x70, 0x61, 0x74, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x12, 0x27, 0x0a, 0x0f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x73, 0x5f,
	0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x73, 0x46, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3a, 0x0a,
	0x0b, 0x73, 0x67, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f,
	0x61, 0x69, 0x2e, 0x53, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x73,
	0x67, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x41, 0x0a, 0x1e, 0x74, 0x61, 0x75,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x65, 0x70, 0x73, 0x5f, 0x62, 0x65, 0x72, 0x5f,
	0x63, 0x6e, 0x74, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x67, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x19, 0x74, 0x61, 0x75, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x45, 0x70, 0x73, 0x42,
	0x65, 0x72, 0x43, 0x6e, 0x74, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x6e, 0x62, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x62, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x62,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x5f, 0x63,
	0x6d, 0x64, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6e, 0x62, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x50, 0x0a, 0x25, 0x6d,
	0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x64,
	0x5f, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x6d, 0x6d, 0x65, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x64, 0x42, 0x65, 0x61, 0x72, 0x65,
	0x72, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x62, 0x5f, 0x72, 0x61, 0x62, 0x73, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6e, 0x62, 0x52, 0x61, 0x62, 0x73, 0x12, 0x55, 0x0a, 0x19, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x17, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x63,
	0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x4d, 0x0a,
	0x15, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x72, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x5f, 0x0a, 0x1f,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x72, 0x73, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18,
	0xca, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x1b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x73, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x5c, 0x0a,
	0x1d, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xcb,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x1a, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x15, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x18, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x61,
	0x75, 0x5f, 0x74, 0x61, 0x75, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xcd, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x72, 0x61, 0x75, 0x54, 0x61, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12,
	0x47, 0x0a, 0x12, 0x75, 0x6c, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0xce, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x75, 0x6c, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x6f, 0x0a, 0x26, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x18, 0xcf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x22, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x67, 0x0a, 0x22, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x63,
	0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18,
	0xd0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x1e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x67, 0x0a, 0x22, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0xd1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1e, 0x74, 0x69, 0x6d,
	0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x74, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x1a, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x69, 0x63, 0x73, 0x5f, 0x72, 0x73, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x49,
	0x63, 0x73, 0x52, 0x73, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x6d, 0x66, 0x5f, 0x75, 0x65, 0x5f, 0x6e, 0x67, 0x61, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0xdd, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x6d, 0x66, 0x55,
	0x65, 0x4e, 0x67, 0x61, 0x70, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x75, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xde, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x6e, 0x62, 0x5f, 0x75, 0x65,
	0x5f, 0x6e, 0x67, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0xdf, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x67, 0x6e, 0x62, 0x55, 0x65, 0x4e, 0x67, 0x61, 0x70, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x67, 0x6e, 0x62, 0x5f, 0x6e, 0x67, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0xe0, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x67, 0x6e, 0x62, 0x4e, 0x67, 0x61, 0x70, 0x49,
	0x64, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6d, 0x66, 0x5f, 0x74, 0x65, 0x69, 0x64,
	0x5f, 0x6e, 0x31, 0x31, 0x18, 0xe1, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x6d, 0x66,
	0x54, 0x65, 0x69, 0x64, 0x4e, 0x31, 0x31, 0x22, 0xfc, 0x04, 0x0a, 0x0c, 0x4d, 0x6d, 0x65, 0x55,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x54, 0x0a, 0x0f, 0x69, 0x6d, 0x73, 0x69,
	0x5f, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x68, 0x74, 0x62, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61,
	0x69, 0x2e, 0x4d, 0x6d, 0x65, 0x55, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x49,
	0x6d, 0x73, 0x69, 0x55, 0x65, 0x49, 0x64, 0x48, 0x74, 0x62, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x69, 0x6d, 0x73, 0x69, 0x55, 0x65, 0x49, 0x64, 0x48, 0x74, 0x62, 0x6c, 0x12, 0x57,
	0x0a, 0x10, 0x74, 0x75, 0x6e, 0x31, 0x31, 0x5f, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x68, 0x74,
	0x62, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x4d, 0x6d, 0x65, 0x55, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x54, 0x75, 0x6e, 0x31, 0x31, 0x55, 0x65, 0x49, 0x64, 0x48,
	0x74, 0x62, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x74, 0x75, 0x6e, 0x31, 0x31, 0x55,
	0x65, 0x49, 0x64, 0x48, 0x74, 0x62, 0x6c, 0x12, 0x5f, 0x0a, 0x14, 0x65, 0x6e, 0x62, 0x5f, 0x75,
	0x65, 0x5f, 0x69, 0x64, 0x5f, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x68, 0x74, 0x62, 0x6c, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x4d, 0x6d, 0x65, 0x55, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x2e, 0x45, 0x6e, 0x62, 0x55, 0x65, 0x49, 0x64, 0x55, 0x65, 0x49, 0x64, 0x48, 0x74,
	0x62, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x65, 0x6e, 0x62, 0x55, 0x65, 0x49, 0x64,
	0x55, 0x65, 0x49, 0x64, 0x48, 0x74, 0x62, 0x6c, 0x12, 0x54, 0x0a, 0x0f, 0x67, 0x75, 0x74, 0x69,
	0x5f, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x68, 0x74, 0x62, 0x6c, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61,
	0x69, 0x2e, 0x4d, 0x6d, 0x65, 0x55, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x47,
	0x75, 0x74, 0x69, 0x55, 0x65, 0x49, 0x64, 0x48, 0x74, 0x62, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x67, 0x75, 0x74, 0x69, 0x55, 0x65, 0x49, 0x64, 0x48, 0x74, 0x62, 0x6c, 0x1a, 0x3f,
	0x0a, 0x11, 0x49, 0x6d, 0x73, 0x69, 0x55, 0x65, 0x49, 0x64, 0x48, 0x74, 0x62, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x40, 0x0a, 0x12, 0x54, 0x75, 0x6e, 0x31, 0x31, 0x55, 0x65, 0x49, 0x64, 0x48, 0x74, 0x62, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x42, 0x0a, 0x14, 0x45, 0x6e, 0x62, 0x55, 0x65, 0x49, 0x64, 0x55, 0x65, 0x49, 0x64,
	0x48, 0x74, 0x62, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x47, 0x75, 0x74, 0x69, 0x55, 0x65, 0x49,
	0x64, 0x48, 0x74, 0x62, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf4, 0x04, 0x0a, 0x0b, 0x4d, 0x6d, 0x65, 0x4e, 0x61,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x6d, 0x6d, 0x65, 0x5f, 0x75, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e,
	0x4d, 0x6d, 0x65, 0x55, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0d, 0x6d, 0x6d,
	0x65, 0x55, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x10, 0x6e,
	0x62, 0x5f, 0x65, 0x6e, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x6e, 0x62, 0x45, 0x6e, 0x62,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x62, 0x5f,
	0x75, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x6e, 0x62, 0x55, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x62, 0x5f, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x62, 0x55, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x6e, 0x62, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x65, 0x70, 0x73, 0x5f, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6e, 0x62, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x45, 0x70, 0x73, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0e,
	0x6e, 0x62, 0x5f, 0x73, 0x31, 0x75, 0x5f, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x62, 0x53, 0x31, 0x75, 0x42, 0x65, 0x61, 0x72, 0x65,
	0x72, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x62, 0x5f, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x62, 0x55, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6e, 0x62, 0x5f, 0x75, 0x65, 0x5f, 0x69, 0x64,
	0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x62, 0x55, 0x65, 0x49, 0x64,
	0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x62, 0x5f, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x73,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x6e, 0x62, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x12, 0x30, 0x0a, 0x15, 0x6e, 0x62, 0x5f, 0x75, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x6e, 0x62, 0x55, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x12, 0x3a, 0x0a, 0x1a, 0x6e, 0x62, 0x5f, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x73,
	0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6e, 0x62, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72,
	0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x12, 0x3d,
	0x0a, 0x1c, 0x6d, 0x6d, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x75, 0x65, 0x5f, 0x73, 0x31, 0x61,
	0x70, 0x5f, 0x69, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6d, 0x6d, 0x65, 0x41, 0x70, 0x70, 0x55, 0x65, 0x53, 0x31,
	0x61, 0x70, 0x49, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x1f, 0x0a,
	0x09, 0x69, 0x6d, 0x73, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d,
	0x73, 0x69, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x22, 0xcb,
	0x01, 0x0a, 0x0e, 0x4d, 0x6d, 0x65, 0x55, 0x65, 0x49, 0x70, 0x49, 0x6d, 0x73, 0x69, 0x4d, 0x61,
	0x70, 0x12, 0x5c, 0x0a, 0x11, 0x6d, 0x6d, 0x65, 0x5f, 0x75, 0x65, 0x69, 0x70, 0x5f, 0x69, 0x6d,
	0x73, 0x69, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x4d, 0x6d, 0x65,
	0x55, 0x65, 0x49, 0x70, 0x49, 0x6d, 0x73, 0x69, 0x4d, 0x61, 0x70, 0x2e, 0x4d, 0x6d, 0x65, 0x55,
	0x65, 0x69, 0x70, 0x49, 0x6d, 0x73, 0x69, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0e, 0x6d, 0x6d, 0x65, 0x55, 0x65, 0x69, 0x70, 0x49, 0x6d, 0x73, 0x69, 0x4d, 0x61, 0x70, 0x1a,
	0x5b, 0x0a, 0x13, 0x4d, 0x6d, 0x65, 0x55, 0x65, 0x69, 0x70, 0x49, 0x6d, 0x73, 0x69, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x69, 0x6d, 0x73, 0x69, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x1f, 0x5a, 0x1d,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f, 0x6c, 0x74, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6f, 0x61, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lte_protos_oai_mme_nas_state_proto_rawDescOnce sync.Once
	file_lte_protos_oai_mme_nas_state_proto_rawDescData = file_lte_protos_oai_mme_nas_state_proto_rawDesc
)

func file_lte_protos_oai_mme_nas_state_proto_rawDescGZIP() []byte {
	file_lte_protos_oai_mme_nas_state_proto_rawDescOnce.Do(func() {
		file_lte_protos_oai_mme_nas_state_proto_rawDescData = protoimpl.X.CompressGZIP(file_lte_protos_oai_mme_nas_state_proto_rawDescData)
	})
	return file_lte_protos_oai_mme_nas_state_proto_rawDescData
}

var file_lte_protos_oai_mme_nas_state_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_lte_protos_oai_mme_nas_state_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_lte_protos_oai_mme_nas_state_proto_goTypes = []interface{}{
	(BearerContext_Validity)(0),          // 0: magma.lte.oai.BearerContext.Validity
	(*SgsContext)(nil),                   // 1: magma.lte.oai.SgsContext
	(*BearerContext)(nil),                // 2: magma.lte.oai.BearerContext
	(*EsmPdn)(nil),                       // 3: magma.lte.oai.EsmPdn
	(*PdnContext)(nil),                   // 4: magma.lte.oai.PdnContext
	(*RegionalSubscription)(nil),         // 5: magma.lte.oai.Regional_subscription
	(*UeContext)(nil),                    // 6: magma.lte.oai.UeContext
	(*MmeUeContext)(nil),                 // 7: magma.lte.oai.MmeUeContext
	(*MmeNasState)(nil),                  // 8: magma.lte.oai.MmeNasState
	(*ImsiList)(nil),                     // 9: magma.lte.oai.imsi_list
	(*MmeUeIpImsiMap)(nil),               // 10: magma.lte.oai.MmeUeIpImsiMap
	nil,                                  // 11: magma.lte.oai.MmeUeContext.ImsiUeIdHtblEntry
	nil,                                  // 12: magma.lte.oai.MmeUeContext.Tun11UeIdHtblEntry
	nil,                                  // 13: magma.lte.oai.MmeUeContext.EnbUeIdUeIdHtblEntry
	nil,                                  // 14: magma.lte.oai.MmeUeContext.GutiUeIdHtblEntry
	nil,                                  // 15: magma.lte.oai.MmeUeIpImsiMap.MmeUeipImsiMapEntry
	(*Fteid)(nil),                        // 16: magma.lte.oai.Fteid
	(*EsmEbrContext)(nil),                // 17: magma.lte.oai.EsmEbrContext
	(*TrafficFlowTemplate)(nil),          // 18: magma.lte.oai.TrafficFlowTemplate
	(*BearerQos)(nil),                    // 19: magma.lte.oai.BearerQos
	(*EpsSubscribedQosProfile)(nil),      // 20: magma.lte.oai.EpsSubscribedQosProfile
	(*Ambr)(nil),                         // 21: magma.lte.oai.Ambr
	(*ProtocolConfigurationOptions)(nil), // 22: magma.lte.oai.ProtocolConfigurationOptions
	(*EmmContext)(nil),                   // 23: magma.lte.oai.EmmContext
	(*Ecgi)(nil),                         // 24: magma.lte.oai.Ecgi
	(*ApnConfigProfile)(nil),             // 25: magma.lte.oai.ApnConfigProfile
	(*Timer)(nil),                        // 26: magma.lte.oai.Timer
	(*timestamp.Timestamp)(nil),          // 27: google.protobuf.Timestamp
}
var file_lte_protos_oai_mme_nas_state_proto_depIdxs = []int32{
	16, // 0: magma.lte.oai.BearerContext.s_gw_fteid_s1u:type_name -> magma.lte.oai.Fteid
	16, // 1: magma.lte.oai.BearerContext.p_gw_fteid_s5_s8_up:type_name -> magma.lte.oai.Fteid
	17, // 2: magma.lte.oai.BearerContext.esm_ebr_context:type_name -> magma.lte.oai.EsmEbrContext
	16, // 3: magma.lte.oai.BearerContext.enb_fteid_s1u:type_name -> magma.lte.oai.Fteid
	18, // 4: magma.lte.oai.BearerContext.saved_tft:type_name -> magma.lte.oai.TrafficFlowTemplate
	19, // 5: magma.lte.oai.BearerContext.saved_qos:type_name -> magma.lte.oai.BearerQos
	0,  // 6: magma.lte.oai.BearerContext.validity:type_name -> magma.lte.oai.BearerContext.Validity
	20, // 7: magma.lte.oai.PdnContext.default_bearer_qos_profile:type_name -> magma.lte.oai.EpsSubscribedQosProfile
	21, // 8: magma.lte.oai.PdnContext.subscribed_apn_ambr:type_name -> magma.lte.oai.Ambr
	21, // 9: magma.lte.oai.PdnContext.p_gw_apn_ambr:type_name -> magma.lte.oai.Ambr
	3,  // 10: magma.lte.oai.PdnContext.esm_data:type_name -> magma.lte.oai.EsmPdn
	22, // 11: magma.lte.oai.PdnContext.pco:type_name -> magma.lte.oai.ProtocolConfigurationOptions
	23, // 12: magma.lte.oai.UeContext.emm_context:type_name -> magma.lte.oai.EmmContext
	24, // 13: magma.lte.oai.UeContext.e_utran_cgi:type_name -> magma.lte.oai.Ecgi
	25, // 14: magma.lte.oai.UeContext.apn_config:type_name -> magma.lte.oai.ApnConfigProfile
	21, // 15: magma.lte.oai.UeContext.subscribed_ue_ambr:type_name -> magma.lte.oai.Ambr
	21, // 16: magma.lte.oai.UeContext.used_ue_ambr:type_name -> magma.lte.oai.Ambr
	21, // 17: magma.lte.oai.UeContext.used_ambr:type_name -> magma.lte.oai.Ambr
	4,  // 18: magma.lte.oai.UeContext.pdn_contexts:type_name -> magma.lte.oai.PdnContext
	2,  // 19: magma.lte.oai.UeContext.bearer_contexts:type_name -> magma.lte.oai.BearerContext
	5,  // 20: magma.lte.oai.UeContext.reg_sub:type_name -> magma.lte.oai.Regional_subscription
	1,  // 21: magma.lte.oai.UeContext.sgs_context:type_name -> magma.lte.oai.SgsContext
	26, // 22: magma.lte.oai.UeContext.mobile_reachability_timer:type_name -> magma.lte.oai.Timer
	26, // 23: magma.lte.oai.UeContext.implicit_detach_timer:type_name -> magma.lte.oai.Timer
	26, // 24: magma.lte.oai.UeContext.initial_context_setup_rsp_timer:type_name -> magma.lte.oai.Timer
	26, // 25: magma.lte.oai.UeContext.ue_context_modification_timer:type_name -> magma.lte.oai.Timer
	26, // 26: magma.lte.oai.UeContext.paging_response_timer:type_name -> magma.lte.oai.Timer
	26, // 27: magma.lte.oai.UeContext.ulr_response_timer:type_name -> magma.lte.oai.Timer
	27, // 28: magma.lte.oai.UeContext.time_mobile_reachability_timer_started:type_name -> google.protobuf.Timestamp
	27, // 29: magma.lte.oai.UeContext.time_implicit_detach_timer_started:type_name -> google.protobuf.Timestamp
	27, // 30: magma.lte.oai.UeContext.time_paging_response_timer_started:type_name -> google.protobuf.Timestamp
	27, // 31: magma.lte.oai.UeContext.time_ics_rsp_timer_started:type_name -> google.protobuf.Timestamp
	11, // 32: magma.lte.oai.MmeUeContext.imsi_ue_id_htbl:type_name -> magma.lte.oai.MmeUeContext.ImsiUeIdHtblEntry
	12, // 33: magma.lte.oai.MmeUeContext.tun11_ue_id_htbl:type_name -> magma.lte.oai.MmeUeContext.Tun11UeIdHtblEntry
	13, // 34: magma.lte.oai.MmeUeContext.enb_ue_id_ue_id_htbl:type_name -> magma.lte.oai.MmeUeContext.EnbUeIdUeIdHtblEntry
	14, // 35: magma.lte.oai.MmeUeContext.guti_ue_id_htbl:type_name -> magma.lte.oai.MmeUeContext.GutiUeIdHtblEntry
	7,  // 36: magma.lte.oai.MmeNasState.mme_ue_contexts:type_name -> magma.lte.oai.MmeUeContext
	15, // 37: magma.lte.oai.MmeUeIpImsiMap.mme_ueip_imsi_map:type_name -> magma.lte.oai.MmeUeIpImsiMap.MmeUeipImsiMapEntry
	9,  // 38: magma.lte.oai.MmeUeIpImsiMap.MmeUeipImsiMapEntry.value:type_name -> magma.lte.oai.imsi_list
	39, // [39:39] is the sub-list for method output_type
	39, // [39:39] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_lte_protos_oai_mme_nas_state_proto_init() }
func file_lte_protos_oai_mme_nas_state_proto_init() {
	if File_lte_protos_oai_mme_nas_state_proto != nil {
		return
	}
	file_lte_protos_oai_std_3gpp_types_proto_init()
	file_lte_protos_oai_common_types_proto_init()
	file_lte_protos_oai_nas_state_proto_init()
	file_lte_protos_oai_spgw_state_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_lte_protos_oai_mme_nas_state_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SgsContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_mme_nas_state_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BearerContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_mme_nas_state_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EsmPdn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_mme_nas_state_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdnContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_mme_nas_state_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionalSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_mme_nas_state_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UeContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_mme_nas_state_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MmeUeContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_mme_nas_state_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MmeNasState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_mme_nas_state_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImsiList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_mme_nas_state_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MmeUeIpImsiMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lte_protos_oai_mme_nas_state_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_lte_protos_oai_mme_nas_state_proto_goTypes,
		DependencyIndexes: file_lte_protos_oai_mme_nas_state_proto_depIdxs,
		EnumInfos:         file_lte_protos_oai_mme_nas_state_proto_enumTypes,
		MessageInfos:      file_lte_protos_oai_mme_nas_state_proto_msgTypes,
	}.Build()
	File_lte_protos_oai_mme_nas_state_proto = out.File
	file_lte_protos_oai_mme_nas_state_proto_rawDesc = nil
	file_lte_protos_oai_mme_nas_state_proto_goTypes = nil
	file_lte_protos_oai_mme_nas_state_proto_depIdxs = nil
}
