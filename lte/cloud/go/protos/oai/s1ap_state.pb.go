// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: lte/protos/oai/s1ap_state.proto

package oai

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type S1ApTimer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`   // long
	Sec int32 `protobuf:"varint,2,opt,name=sec,proto3" json:"sec,omitempty"` // long
}

func (x *S1ApTimer) Reset() {
	*x = S1ApTimer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_s1ap_state_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S1ApTimer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S1ApTimer) ProtoMessage() {}

func (x *S1ApTimer) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_s1ap_state_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S1ApTimer.ProtoReflect.Descriptor instead.
func (*S1ApTimer) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_s1ap_state_proto_rawDescGZIP(), []int{0}
}

func (x *S1ApTimer) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *S1ApTimer) GetSec() int32 {
	if x != nil {
		return x.Sec
	}
	return 0
}

type SupportedTaiItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tac            uint32   `protobuf:"varint,1,opt,name=tac,proto3" json:"tac,omitempty"`
	BplmnlistCount uint32   `protobuf:"varint,2,opt,name=bplmnlist_count,json=bplmnlistCount,proto3" json:"bplmnlist_count,omitempty"`
	Bplmns         [][]byte `protobuf:"bytes,3,rep,name=bplmns,proto3" json:"bplmns,omitempty"`
}

func (x *SupportedTaiItems) Reset() {
	*x = SupportedTaiItems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_s1ap_state_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedTaiItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedTaiItems) ProtoMessage() {}

func (x *SupportedTaiItems) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_s1ap_state_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedTaiItems.ProtoReflect.Descriptor instead.
func (*SupportedTaiItems) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_s1ap_state_proto_rawDescGZIP(), []int{1}
}

func (x *SupportedTaiItems) GetTac() uint32 {
	if x != nil {
		return x.Tac
	}
	return 0
}

func (x *SupportedTaiItems) GetBplmnlistCount() uint32 {
	if x != nil {
		return x.BplmnlistCount
	}
	return 0
}

func (x *SupportedTaiItems) GetBplmns() [][]byte {
	if x != nil {
		return x.Bplmns
	}
	return nil
}

// supported_ta_list_t
type SupportedTaList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListCount         uint32               `protobuf:"varint,1,opt,name=list_count,json=listCount,proto3" json:"list_count,omitempty"`
	SupportedTaiItems []*SupportedTaiItems `protobuf:"bytes,2,rep,name=supported_tai_items,json=supportedTaiItems,proto3" json:"supported_tai_items,omitempty"`
}

func (x *SupportedTaList) Reset() {
	*x = SupportedTaList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_s1ap_state_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedTaList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedTaList) ProtoMessage() {}

func (x *SupportedTaList) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_s1ap_state_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedTaList.ProtoReflect.Descriptor instead.
func (*SupportedTaList) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_s1ap_state_proto_rawDescGZIP(), []int{2}
}

func (x *SupportedTaList) GetListCount() uint32 {
	if x != nil {
		return x.ListCount
	}
	return 0
}

func (x *SupportedTaList) GetSupportedTaiItems() []*SupportedTaiItems {
	if x != nil {
		return x.SupportedTaiItems
	}
	return nil
}

type EnbDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnbId            uint32            `protobuf:"varint,1,opt,name=enb_id,json=enbId,proto3" json:"enb_id,omitempty"`
	S1State          int32             `protobuf:"varint,2,opt,name=s1_state,json=s1State,proto3" json:"s1_state,omitempty"`                              // enum mme_s1_enb_state_s
	EnbName          []byte            `protobuf:"bytes,3,opt,name=enb_name,json=enbName,proto3" json:"enb_name,omitempty"`                               // char[]
	DefaultPagingDrx uint32            `protobuf:"varint,4,opt,name=default_paging_drx,json=defaultPagingDrx,proto3" json:"default_paging_drx,omitempty"` // uint8_t
	NbUeAssociated   uint32            `protobuf:"varint,5,opt,name=nb_ue_associated,json=nbUeAssociated,proto3" json:"nb_ue_associated,omitempty"`
	SctpAssocId      uint32            `protobuf:"varint,6,opt,name=sctp_assoc_id,json=sctpAssocId,proto3" json:"sctp_assoc_id,omitempty"`                                                                       // sctp_assoc_id_t
	NextSctpStream   uint32            `protobuf:"varint,7,opt,name=next_sctp_stream,json=nextSctpStream,proto3" json:"next_sctp_stream,omitempty"`                                                              // sctp_stream_id_t
	Instreams        uint32            `protobuf:"varint,8,opt,name=instreams,proto3" json:"instreams,omitempty"`                                                                                                // sctp_stream_id_t
	Outstreams       uint32            `protobuf:"varint,9,opt,name=outstreams,proto3" json:"outstreams,omitempty"`                                                                                              // sctp_stream_id_t
	UeIds            map[uint64]uint64 `protobuf:"bytes,10,rep,name=ue_ids,json=ueIds,proto3" json:"ue_ids,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // mme_ue_s1ap_id -> comp_s1ap_id
	SupportedTaList  *SupportedTaList  `protobuf:"bytes,11,opt,name=supported_ta_list,json=supportedTaList,proto3" json:"supported_ta_list,omitempty"`                                                           // TAs supported by eNB
	RanCpIpaddr      []byte            `protobuf:"bytes,12,opt,name=ran_cp_ipaddr,json=ranCpIpaddr,proto3" json:"ran_cp_ipaddr,omitempty"`                                                                       // eNB sctp end point IP addr
	RanCpIpaddrSz    uint32            `protobuf:"varint,13,opt,name=ran_cp_ipaddr_sz,json=ranCpIpaddrSz,proto3" json:"ran_cp_ipaddr_sz,omitempty"`                                                              // eNB sctp end point IP addr size
}

func (x *EnbDescription) Reset() {
	*x = EnbDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_s1ap_state_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnbDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnbDescription) ProtoMessage() {}

func (x *EnbDescription) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_s1ap_state_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnbDescription.ProtoReflect.Descriptor instead.
func (*EnbDescription) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_s1ap_state_proto_rawDescGZIP(), []int{3}
}

func (x *EnbDescription) GetEnbId() uint32 {
	if x != nil {
		return x.EnbId
	}
	return 0
}

func (x *EnbDescription) GetS1State() int32 {
	if x != nil {
		return x.S1State
	}
	return 0
}

func (x *EnbDescription) GetEnbName() []byte {
	if x != nil {
		return x.EnbName
	}
	return nil
}

func (x *EnbDescription) GetDefaultPagingDrx() uint32 {
	if x != nil {
		return x.DefaultPagingDrx
	}
	return 0
}

func (x *EnbDescription) GetNbUeAssociated() uint32 {
	if x != nil {
		return x.NbUeAssociated
	}
	return 0
}

func (x *EnbDescription) GetSctpAssocId() uint32 {
	if x != nil {
		return x.SctpAssocId
	}
	return 0
}

func (x *EnbDescription) GetNextSctpStream() uint32 {
	if x != nil {
		return x.NextSctpStream
	}
	return 0
}

func (x *EnbDescription) GetInstreams() uint32 {
	if x != nil {
		return x.Instreams
	}
	return 0
}

func (x *EnbDescription) GetOutstreams() uint32 {
	if x != nil {
		return x.Outstreams
	}
	return 0
}

func (x *EnbDescription) GetUeIds() map[uint64]uint64 {
	if x != nil {
		return x.UeIds
	}
	return nil
}

func (x *EnbDescription) GetSupportedTaList() *SupportedTaList {
	if x != nil {
		return x.SupportedTaList
	}
	return nil
}

func (x *EnbDescription) GetRanCpIpaddr() []byte {
	if x != nil {
		return x.RanCpIpaddr
	}
	return nil
}

func (x *EnbDescription) GetRanCpIpaddrSz() uint32 {
	if x != nil {
		return x.RanCpIpaddrSz
	}
	return 0
}

type UeDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S1UeState             int32              `protobuf:"varint,2,opt,name=s1_ue_state,json=s1UeState,proto3" json:"s1_ue_state,omitempty"`                                        // enum s1_ue_state_s
	EnbUeS1ApId           uint32             `protobuf:"varint,3,opt,name=enb_ue_s1ap_id,json=enbUeS1apId,proto3" json:"enb_ue_s1ap_id,omitempty"`                                // enb_ue_s1ap_id_t
	MmeUeS1ApId           uint32             `protobuf:"varint,4,opt,name=mme_ue_s1ap_id,json=mmeUeS1apId,proto3" json:"mme_ue_s1ap_id,omitempty"`                                // mme_ue_s1ap_id_t
	SctpStreamRecv        uint32             `protobuf:"varint,5,opt,name=sctp_stream_recv,json=sctpStreamRecv,proto3" json:"sctp_stream_recv,omitempty"`                         // sctp_stream_id_t
	SctpStreamSend        uint32             `protobuf:"varint,6,opt,name=sctp_stream_send,json=sctpStreamSend,proto3" json:"sctp_stream_send,omitempty"`                         // sctp_stream_id_t
	S1ApUeContextRelTimer *S1ApTimer         `protobuf:"bytes,7,opt,name=s1ap_ue_context_rel_timer,json=s1apUeContextRelTimer,proto3" json:"s1ap_ue_context_rel_timer,omitempty"` // struct s1ap_timer_t
	SctpAssocId           uint32             `protobuf:"varint,8,opt,name=sctp_assoc_id,json=sctpAssocId,proto3" json:"sctp_assoc_id,omitempty"`                                  // sctp_assoc_id_t
	S1ApHandoverState     *S1ApHandoverState `protobuf:"bytes,9,opt,name=s1ap_handover_state,json=s1apHandoverState,proto3" json:"s1ap_handover_state,omitempty"`                 // s1ap_handover_state_t
}

func (x *UeDescription) Reset() {
	*x = UeDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_s1ap_state_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UeDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UeDescription) ProtoMessage() {}

func (x *UeDescription) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_s1ap_state_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UeDescription.ProtoReflect.Descriptor instead.
func (*UeDescription) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_s1ap_state_proto_rawDescGZIP(), []int{4}
}

func (x *UeDescription) GetS1UeState() int32 {
	if x != nil {
		return x.S1UeState
	}
	return 0
}

func (x *UeDescription) GetEnbUeS1ApId() uint32 {
	if x != nil {
		return x.EnbUeS1ApId
	}
	return 0
}

func (x *UeDescription) GetMmeUeS1ApId() uint32 {
	if x != nil {
		return x.MmeUeS1ApId
	}
	return 0
}

func (x *UeDescription) GetSctpStreamRecv() uint32 {
	if x != nil {
		return x.SctpStreamRecv
	}
	return 0
}

func (x *UeDescription) GetSctpStreamSend() uint32 {
	if x != nil {
		return x.SctpStreamSend
	}
	return 0
}

func (x *UeDescription) GetS1ApUeContextRelTimer() *S1ApTimer {
	if x != nil {
		return x.S1ApUeContextRelTimer
	}
	return nil
}

func (x *UeDescription) GetSctpAssocId() uint32 {
	if x != nil {
		return x.SctpAssocId
	}
	return 0
}

func (x *UeDescription) GetS1ApHandoverState() *S1ApHandoverState {
	if x != nil {
		return x.S1ApHandoverState
	}
	return nil
}

type S1ApState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enbs          map[uint32]*EnbDescription `protobuf:"bytes,1,rep,name=enbs,proto3" json:"enbs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                    // enbid -> EnbDescription
	Mmeid2Associd map[uint32]uint32          `protobuf:"bytes,2,rep,name=mmeid2associd,proto3" json:"mmeid2associd,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // mmeueid -> ue associd
	NumEnbs       uint32                     `protobuf:"varint,3,opt,name=num_enbs,json=numEnbs,proto3" json:"num_enbs,omitempty"`
}

func (x *S1ApState) Reset() {
	*x = S1ApState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_s1ap_state_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S1ApState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S1ApState) ProtoMessage() {}

func (x *S1ApState) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_s1ap_state_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S1ApState.ProtoReflect.Descriptor instead.
func (*S1ApState) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_s1ap_state_proto_rawDescGZIP(), []int{5}
}

func (x *S1ApState) GetEnbs() map[uint32]*EnbDescription {
	if x != nil {
		return x.Enbs
	}
	return nil
}

func (x *S1ApState) GetMmeid2Associd() map[uint32]uint32 {
	if x != nil {
		return x.Mmeid2Associd
	}
	return nil
}

func (x *S1ApState) GetNumEnbs() uint32 {
	if x != nil {
		return x.NumEnbs
	}
	return 0
}

type S1ApImsiMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MmeUeIdImsiMap map[uint64]uint64 `protobuf:"bytes,1,rep,name=mme_ue_id_imsi_map,json=mmeUeIdImsiMap,proto3" json:"mme_ue_id_imsi_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // mme_s1ap_ue_id => IMSI64
}

func (x *S1ApImsiMap) Reset() {
	*x = S1ApImsiMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_s1ap_state_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S1ApImsiMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S1ApImsiMap) ProtoMessage() {}

func (x *S1ApImsiMap) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_s1ap_state_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S1ApImsiMap.ProtoReflect.Descriptor instead.
func (*S1ApImsiMap) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_s1ap_state_proto_rawDescGZIP(), []int{6}
}

func (x *S1ApImsiMap) GetMmeUeIdImsiMap() map[uint64]uint64 {
	if x != nil {
		return x.MmeUeIdImsiMap
	}
	return nil
}

type S1ApHandoverState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MmeUeS1ApId          uint32 `protobuf:"varint,1,opt,name=mme_ue_s1ap_id,json=mmeUeS1apId,proto3" json:"mme_ue_s1ap_id,omitempty"`
	SourceEnbId          uint32 `protobuf:"varint,2,opt,name=source_enb_id,json=sourceEnbId,proto3" json:"source_enb_id,omitempty"`
	TargetEnbId          uint32 `protobuf:"varint,3,opt,name=target_enb_id,json=targetEnbId,proto3" json:"target_enb_id,omitempty"`
	TargetEnbUeS1ApId    uint32 `protobuf:"varint,4,opt,name=target_enb_ue_s1ap_id,json=targetEnbUeS1apId,proto3" json:"target_enb_ue_s1ap_id,omitempty"`        // enb_ue_s1ap_id_t
	TargetSctpStreamRecv uint32 `protobuf:"varint,5,opt,name=target_sctp_stream_recv,json=targetSctpStreamRecv,proto3" json:"target_sctp_stream_recv,omitempty"` // sctp_stream_id_t
	TargetSctpStreamSend uint32 `protobuf:"varint,6,opt,name=target_sctp_stream_send,json=targetSctpStreamSend,proto3" json:"target_sctp_stream_send,omitempty"` // sctp_stream_id_t
}

func (x *S1ApHandoverState) Reset() {
	*x = S1ApHandoverState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_oai_s1ap_state_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S1ApHandoverState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S1ApHandoverState) ProtoMessage() {}

func (x *S1ApHandoverState) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_oai_s1ap_state_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S1ApHandoverState.ProtoReflect.Descriptor instead.
func (*S1ApHandoverState) Descriptor() ([]byte, []int) {
	return file_lte_protos_oai_s1ap_state_proto_rawDescGZIP(), []int{7}
}

func (x *S1ApHandoverState) GetMmeUeS1ApId() uint32 {
	if x != nil {
		return x.MmeUeS1ApId
	}
	return 0
}

func (x *S1ApHandoverState) GetSourceEnbId() uint32 {
	if x != nil {
		return x.SourceEnbId
	}
	return 0
}

func (x *S1ApHandoverState) GetTargetEnbId() uint32 {
	if x != nil {
		return x.TargetEnbId
	}
	return 0
}

func (x *S1ApHandoverState) GetTargetEnbUeS1ApId() uint32 {
	if x != nil {
		return x.TargetEnbUeS1ApId
	}
	return 0
}

func (x *S1ApHandoverState) GetTargetSctpStreamRecv() uint32 {
	if x != nil {
		return x.TargetSctpStreamRecv
	}
	return 0
}

func (x *S1ApHandoverState) GetTargetSctpStreamSend() uint32 {
	if x != nil {
		return x.TargetSctpStreamSend
	}
	return 0
}

var File_lte_protos_oai_s1ap_state_proto protoreflect.FileDescriptor

var file_lte_protos_oai_s1ap_state_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6f, 0x61, 0x69,
	0x2f, 0x73, 0x31, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0d, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69,
	0x22, 0x2d, 0x0a, 0x09, 0x53, 0x31, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x63, 0x22,
	0x66, 0x0a, 0x11, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x61, 0x69, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x74, 0x61, 0x63, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x70, 0x6c, 0x6d, 0x6e, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x62, 0x70, 0x6c, 0x6d, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x70, 0x6c, 0x6d, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x06, 0x62, 0x70, 0x6c, 0x6d, 0x6e, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x0f, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x13, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x69, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x54, 0x61, 0x69, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x54, 0x61, 0x69, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xd5, 0x04, 0x0a,
	0x0e, 0x45, 0x6e, 0x62, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x15, 0x0a, 0x06, 0x65, 0x6e, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x65, 0x6e, 0x62, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x31, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x31, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x65, 0x6e, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x72, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x44, 0x72, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x62,
	0x5f, 0x75, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x62, 0x55, 0x65, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x63, 0x74, 0x70, 0x5f, 0x61, 0x73, 0x73,
	0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x63, 0x74,
	0x70, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x73, 0x63, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x63, 0x74, 0x70, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,
	0x12, 0x3f, 0x0a, 0x06, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69,
	0x2e, 0x45, 0x6e, 0x62, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x55, 0x65, 0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x75, 0x65, 0x49, 0x64,
	0x73, 0x12, 0x4a, 0x0a, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0d, 0x72, 0x61, 0x6e, 0x5f, 0x63, 0x70, 0x5f, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x43, 0x70, 0x49, 0x70, 0x61, 0x64, 0x64,
	0x72, 0x12, 0x27, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x5f, 0x63, 0x70, 0x5f, 0x69, 0x70, 0x61, 0x64,
	0x64, 0x72, 0x5f, 0x73, 0x7a, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x61, 0x6e,
	0x43, 0x70, 0x49, 0x70, 0x61, 0x64, 0x64, 0x72, 0x53, 0x7a, 0x1a, 0x38, 0x0a, 0x0a, 0x55, 0x65,
	0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x97, 0x03, 0x0a, 0x0d, 0x55, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x31, 0x5f, 0x75, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x31, 0x55,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0e, 0x65, 0x6e, 0x62, 0x5f, 0x75, 0x65,
	0x5f, 0x73, 0x31, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x65, 0x6e, 0x62, 0x55, 0x65, 0x53, 0x31, 0x61, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0e, 0x6d,
	0x6d, 0x65, 0x5f, 0x75, 0x65, 0x5f, 0x73, 0x31, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x6d, 0x65, 0x55, 0x65, 0x53, 0x31, 0x61, 0x70, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x63, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x72, 0x65, 0x63, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x63, 0x74, 0x70,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x63, 0x76, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x63,
	0x74, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x63, 0x74, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x53, 0x65, 0x6e, 0x64, 0x12, 0x52, 0x0a, 0x19, 0x73, 0x31, 0x61, 0x70, 0x5f, 0x75, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x53, 0x31, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x52, 0x15, 0x73, 0x31, 0x61, 0x70, 0x55, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x63, 0x74, 0x70,
	0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x73, 0x63, 0x74, 0x70, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x13,
	0x73, 0x31, 0x61, 0x70, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x53, 0x31, 0x61, 0x70, 0x48, 0x61,
	0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x11, 0x73, 0x31, 0x61,
	0x70, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xcb,
	0x02, 0x0a, 0x09, 0x53, 0x31, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x04,
	0x65, 0x6e, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x53, 0x31, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x62, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x65, 0x6e, 0x62, 0x73, 0x12, 0x51, 0x0a, 0x0d, 0x6d, 0x6d, 0x65, 0x69, 0x64, 0x32, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x53, 0x31, 0x61, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x6d, 0x65, 0x69, 0x64, 0x32, 0x61, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x6d, 0x65, 0x69, 0x64, 0x32,
	0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x65,
	0x6e, 0x62, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x45, 0x6e,
	0x62, 0x73, 0x1a, 0x56, 0x0a, 0x09, 0x45, 0x6e, 0x62, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69,
	0x2e, 0x45, 0x6e, 0x62, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x6d,
	0x65, 0x69, 0x64, 0x32, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xac, 0x01, 0x0a,
	0x0b, 0x53, 0x31, 0x61, 0x70, 0x49, 0x6d, 0x73, 0x69, 0x4d, 0x61, 0x70, 0x12, 0x5a, 0x0a, 0x12,
	0x6d, 0x6d, 0x65, 0x5f, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x69, 0x6d, 0x73, 0x69, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69, 0x2e, 0x53, 0x31, 0x61, 0x70, 0x49, 0x6d, 0x73,
	0x69, 0x4d, 0x61, 0x70, 0x2e, 0x4d, 0x6d, 0x65, 0x55, 0x65, 0x49, 0x64, 0x49, 0x6d, 0x73, 0x69,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x6d, 0x65, 0x55, 0x65, 0x49,
	0x64, 0x49, 0x6d, 0x73, 0x69, 0x4d, 0x61, 0x70, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x6d, 0x65, 0x55,
	0x65, 0x49, 0x64, 0x49, 0x6d, 0x73, 0x69, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa0, 0x02, 0x0a, 0x11,
	0x53, 0x31, 0x61, 0x70, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x23, 0x0a, 0x0e, 0x6d, 0x6d, 0x65, 0x5f, 0x75, 0x65, 0x5f, 0x73, 0x31, 0x61, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x6d, 0x65, 0x55, 0x65,
	0x53, 0x31, 0x61, 0x70, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x65, 0x6e, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x62, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x62, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x62, 0x5f, 0x75, 0x65, 0x5f,
	0x73, 0x31, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x62, 0x55, 0x65, 0x53, 0x31, 0x61, 0x70, 0x49, 0x64,
	0x12, 0x35, 0x0a, 0x17, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x63, 0x74, 0x70, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x63, 0x74, 0x70, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x63, 0x76, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x73, 0x63, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x53, 0x63, 0x74, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x1f,
	0x5a, 0x1d, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f, 0x6c, 0x74, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6f, 0x61, 0x69, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lte_protos_oai_s1ap_state_proto_rawDescOnce sync.Once
	file_lte_protos_oai_s1ap_state_proto_rawDescData = file_lte_protos_oai_s1ap_state_proto_rawDesc
)

func file_lte_protos_oai_s1ap_state_proto_rawDescGZIP() []byte {
	file_lte_protos_oai_s1ap_state_proto_rawDescOnce.Do(func() {
		file_lte_protos_oai_s1ap_state_proto_rawDescData = protoimpl.X.CompressGZIP(file_lte_protos_oai_s1ap_state_proto_rawDescData)
	})
	return file_lte_protos_oai_s1ap_state_proto_rawDescData
}

var file_lte_protos_oai_s1ap_state_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_lte_protos_oai_s1ap_state_proto_goTypes = []interface{}{
	(*S1ApTimer)(nil),         // 0: magma.lte.oai.S1apTimer
	(*SupportedTaiItems)(nil), // 1: magma.lte.oai.SupportedTaiItems
	(*SupportedTaList)(nil),   // 2: magma.lte.oai.SupportedTaList
	(*EnbDescription)(nil),    // 3: magma.lte.oai.EnbDescription
	(*UeDescription)(nil),     // 4: magma.lte.oai.UeDescription
	(*S1ApState)(nil),         // 5: magma.lte.oai.S1apState
	(*S1ApImsiMap)(nil),       // 6: magma.lte.oai.S1apImsiMap
	(*S1ApHandoverState)(nil), // 7: magma.lte.oai.S1apHandoverState
	nil,                       // 8: magma.lte.oai.EnbDescription.UeIdsEntry
	nil,                       // 9: magma.lte.oai.S1apState.EnbsEntry
	nil,                       // 10: magma.lte.oai.S1apState.Mmeid2associdEntry
	nil,                       // 11: magma.lte.oai.S1apImsiMap.MmeUeIdImsiMapEntry
}
var file_lte_protos_oai_s1ap_state_proto_depIdxs = []int32{
	1,  // 0: magma.lte.oai.SupportedTaList.supported_tai_items:type_name -> magma.lte.oai.SupportedTaiItems
	8,  // 1: magma.lte.oai.EnbDescription.ue_ids:type_name -> magma.lte.oai.EnbDescription.UeIdsEntry
	2,  // 2: magma.lte.oai.EnbDescription.supported_ta_list:type_name -> magma.lte.oai.SupportedTaList
	0,  // 3: magma.lte.oai.UeDescription.s1ap_ue_context_rel_timer:type_name -> magma.lte.oai.S1apTimer
	7,  // 4: magma.lte.oai.UeDescription.s1ap_handover_state:type_name -> magma.lte.oai.S1apHandoverState
	9,  // 5: magma.lte.oai.S1apState.enbs:type_name -> magma.lte.oai.S1apState.EnbsEntry
	10, // 6: magma.lte.oai.S1apState.mmeid2associd:type_name -> magma.lte.oai.S1apState.Mmeid2associdEntry
	11, // 7: magma.lte.oai.S1apImsiMap.mme_ue_id_imsi_map:type_name -> magma.lte.oai.S1apImsiMap.MmeUeIdImsiMapEntry
	3,  // 8: magma.lte.oai.S1apState.EnbsEntry.value:type_name -> magma.lte.oai.EnbDescription
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_lte_protos_oai_s1ap_state_proto_init() }
func file_lte_protos_oai_s1ap_state_proto_init() {
	if File_lte_protos_oai_s1ap_state_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lte_protos_oai_s1ap_state_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S1ApTimer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_s1ap_state_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedTaiItems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_s1ap_state_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedTaList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_s1ap_state_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnbDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_s1ap_state_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UeDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_s1ap_state_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S1ApState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_s1ap_state_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S1ApImsiMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_oai_s1ap_state_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S1ApHandoverState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lte_protos_oai_s1ap_state_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_lte_protos_oai_s1ap_state_proto_goTypes,
		DependencyIndexes: file_lte_protos_oai_s1ap_state_proto_depIdxs,
		MessageInfos:      file_lte_protos_oai_s1ap_state_proto_msgTypes,
	}.Build()
	File_lte_protos_oai_s1ap_state_proto = out.File
	file_lte_protos_oai_s1ap_state_proto_rawDesc = nil
	file_lte_protos_oai_s1ap_state_proto_goTypes = nil
	file_lte_protos_oai_s1ap_state_proto_depIdxs = nil
}
