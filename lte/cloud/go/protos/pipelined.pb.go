//
//Copyright 2020 The Magma Authors.
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: lte/protos/pipelined.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	protos "magma/orc8r/lib/go/protos"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 8.2.26
type Action int32

const (
	Action_DROP Action = 0
	Action_FORW Action = 1
	//Below will be required in future use case
	Action_BUFF Action = 2
	Action_NOCP Action = 3
	Action_DUPL Action = 4
)

// Enum value maps for Action.
var (
	Action_name = map[int32]string{
		0: "DROP",
		1: "FORW",
		2: "BUFF",
		3: "NOCP",
		4: "DUPL",
	}
	Action_value = map[string]int32{
		"DROP": 0,
		"FORW": 1,
		"BUFF": 2,
		"NOCP": 3,
		"DUPL": 4,
	}
)

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}

func (x Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_pipelined_proto_enumTypes[0].Descriptor()
}

func (Action) Type() protoreflect.EnumType {
	return &file_lte_protos_pipelined_proto_enumTypes[0]
}

func (x Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action.Descriptor instead.
func (Action) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{0}
}

type SourceInterfaceType int32

const (
	SourceInterfaceType_ACCESS SourceInterfaceType = 0
	SourceInterfaceType_CORE   SourceInterfaceType = 1
	SourceInterfaceType_SGiLAN SourceInterfaceType = 2
)

// Enum value maps for SourceInterfaceType.
var (
	SourceInterfaceType_name = map[int32]string{
		0: "ACCESS",
		1: "CORE",
		2: "SGiLAN",
	}
	SourceInterfaceType_value = map[string]int32{
		"ACCESS": 0,
		"CORE":   1,
		"SGiLAN": 2,
	}
)

func (x SourceInterfaceType) Enum() *SourceInterfaceType {
	p := new(SourceInterfaceType)
	*p = x
	return p
}

func (x SourceInterfaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceInterfaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_pipelined_proto_enumTypes[1].Descriptor()
}

func (SourceInterfaceType) Type() protoreflect.EnumType {
	return &file_lte_protos_pipelined_proto_enumTypes[1]
}

func (x SourceInterfaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SourceInterfaceType.Descriptor instead.
func (SourceInterfaceType) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{1}
}

// pdr_state variable for SessionSet message per PDR.
type PdrState int32

const (
	PdrState_INSTALL PdrState = 0
	PdrState_REMOVE  PdrState = 1
	PdrState_IDLE    PdrState = 2
)

// Enum value maps for PdrState.
var (
	PdrState_name = map[int32]string{
		0: "INSTALL",
		1: "REMOVE",
		2: "IDLE",
	}
	PdrState_value = map[string]int32{
		"INSTALL": 0,
		"REMOVE":  1,
		"IDLE":    2,
	}
)

func (x PdrState) Enum() *PdrState {
	p := new(PdrState)
	*p = x
	return p
}

func (x PdrState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PdrState) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_pipelined_proto_enumTypes[2].Descriptor()
}

func (PdrState) Type() protoreflect.EnumType {
	return &file_lte_protos_pipelined_proto_enumTypes[2]
}

func (x PdrState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PdrState.Descriptor instead.
func (PdrState) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{2}
}

type SetupFlowsResult_Result int32

const (
	SetupFlowsResult_SUCCESS        SetupFlowsResult_Result = 0
	SetupFlowsResult_FAILURE        SetupFlowsResult_Result = 1
	SetupFlowsResult_OUTDATED_EPOCH SetupFlowsResult_Result = 2
)

// Enum value maps for SetupFlowsResult_Result.
var (
	SetupFlowsResult_Result_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
		2: "OUTDATED_EPOCH",
	}
	SetupFlowsResult_Result_value = map[string]int32{
		"SUCCESS":        0,
		"FAILURE":        1,
		"OUTDATED_EPOCH": 2,
	}
)

func (x SetupFlowsResult_Result) Enum() *SetupFlowsResult_Result {
	p := new(SetupFlowsResult_Result)
	*p = x
	return p
}

func (x SetupFlowsResult_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetupFlowsResult_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_pipelined_proto_enumTypes[3].Descriptor()
}

func (SetupFlowsResult_Result) Type() protoreflect.EnumType {
	return &file_lte_protos_pipelined_proto_enumTypes[3]
}

func (x SetupFlowsResult_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetupFlowsResult_Result.Descriptor instead.
func (SetupFlowsResult_Result) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{5, 0}
}

type RequestOriginType_OriginType int32

const (
	RequestOriginType_GX       RequestOriginType_OriginType = 0
	RequestOriginType_GY       RequestOriginType_OriginType = 1
	RequestOriginType_N4       RequestOriginType_OriginType = 2
	RequestOriginType_WILDCARD RequestOriginType_OriginType = 3 //  should only be used for deactivation
)

// Enum value maps for RequestOriginType_OriginType.
var (
	RequestOriginType_OriginType_name = map[int32]string{
		0: "GX",
		1: "GY",
		2: "N4",
		3: "WILDCARD",
	}
	RequestOriginType_OriginType_value = map[string]int32{
		"GX":       0,
		"GY":       1,
		"N4":       2,
		"WILDCARD": 3,
	}
)

func (x RequestOriginType_OriginType) Enum() *RequestOriginType_OriginType {
	p := new(RequestOriginType_OriginType)
	*p = x
	return p
}

func (x RequestOriginType_OriginType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestOriginType_OriginType) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_pipelined_proto_enumTypes[4].Descriptor()
}

func (RequestOriginType_OriginType) Type() protoreflect.EnumType {
	return &file_lte_protos_pipelined_proto_enumTypes[4]
}

func (x RequestOriginType_OriginType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestOriginType_OriginType.Descriptor instead.
func (RequestOriginType_OriginType) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{6, 0}
}

type RuleModResult_Result int32

const (
	RuleModResult_SUCCESS         RuleModResult_Result = 0
	RuleModResult_PARTIAL_SUCCESS RuleModResult_Result = 1
	RuleModResult_FAILURE         RuleModResult_Result = 2
)

// Enum value maps for RuleModResult_Result.
var (
	RuleModResult_Result_name = map[int32]string{
		0: "SUCCESS",
		1: "PARTIAL_SUCCESS",
		2: "FAILURE",
	}
	RuleModResult_Result_value = map[string]int32{
		"SUCCESS":         0,
		"PARTIAL_SUCCESS": 1,
		"FAILURE":         2,
	}
)

func (x RuleModResult_Result) Enum() *RuleModResult_Result {
	p := new(RuleModResult_Result)
	*p = x
	return p
}

func (x RuleModResult_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuleModResult_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_pipelined_proto_enumTypes[5].Descriptor()
}

func (RuleModResult_Result) Type() protoreflect.EnumType {
	return &file_lte_protos_pipelined_proto_enumTypes[5]
}

func (x RuleModResult_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuleModResult_Result.Descriptor instead.
func (RuleModResult_Result) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{11, 0}
}

type DeactivateFlowsResult_Result int32

const (
	DeactivateFlowsResult_SUCCESS        DeactivateFlowsResult_Result = 0
	DeactivateFlowsResult_FAILURE        DeactivateFlowsResult_Result = 1
	DeactivateFlowsResult_OUTDATED_EPOCH DeactivateFlowsResult_Result = 2
)

// Enum value maps for DeactivateFlowsResult_Result.
var (
	DeactivateFlowsResult_Result_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
		2: "OUTDATED_EPOCH",
	}
	DeactivateFlowsResult_Result_value = map[string]int32{
		"SUCCESS":        0,
		"FAILURE":        1,
		"OUTDATED_EPOCH": 2,
	}
)

func (x DeactivateFlowsResult_Result) Enum() *DeactivateFlowsResult_Result {
	p := new(DeactivateFlowsResult_Result)
	*p = x
	return p
}

func (x DeactivateFlowsResult_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeactivateFlowsResult_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_pipelined_proto_enumTypes[6].Descriptor()
}

func (DeactivateFlowsResult_Result) Type() protoreflect.EnumType {
	return &file_lte_protos_pipelined_proto_enumTypes[6]
}

func (x DeactivateFlowsResult_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeactivateFlowsResult_Result.Descriptor instead.
func (DeactivateFlowsResult_Result) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{13, 0}
}

type FlowRequest_FlowState int32

const (
	FlowRequest_FLOW_CREATED                FlowRequest_FlowState = 0
	FlowRequest_FLOW_PARTIAL_CLASSIFICATION FlowRequest_FlowState = 1
	FlowRequest_FLOW_FINAL_CLASSIFICATION   FlowRequest_FlowState = 2
	FlowRequest_FLOW_EXPIRED                FlowRequest_FlowState = 3
)

// Enum value maps for FlowRequest_FlowState.
var (
	FlowRequest_FlowState_name = map[int32]string{
		0: "FLOW_CREATED",
		1: "FLOW_PARTIAL_CLASSIFICATION",
		2: "FLOW_FINAL_CLASSIFICATION",
		3: "FLOW_EXPIRED",
	}
	FlowRequest_FlowState_value = map[string]int32{
		"FLOW_CREATED":                0,
		"FLOW_PARTIAL_CLASSIFICATION": 1,
		"FLOW_FINAL_CLASSIFICATION":   2,
		"FLOW_EXPIRED":                3,
	}
)

func (x FlowRequest_FlowState) Enum() *FlowRequest_FlowState {
	p := new(FlowRequest_FlowState)
	*p = x
	return p
}

func (x FlowRequest_FlowState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowRequest_FlowState) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_pipelined_proto_enumTypes[7].Descriptor()
}

func (FlowRequest_FlowState) Type() protoreflect.EnumType {
	return &file_lte_protos_pipelined_proto_enumTypes[7]
}

func (x FlowRequest_FlowState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowRequest_FlowState.Descriptor instead.
func (FlowRequest_FlowState) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{14, 0}
}

type FlowResponse_Result int32

const (
	FlowResponse_SUCCESS        FlowResponse_Result = 0
	FlowResponse_FAILURE        FlowResponse_Result = 1
	FlowResponse_OUTDATED_EPOCH FlowResponse_Result = 2
)

// Enum value maps for FlowResponse_Result.
var (
	FlowResponse_Result_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
		2: "OUTDATED_EPOCH",
	}
	FlowResponse_Result_value = map[string]int32{
		"SUCCESS":        0,
		"FAILURE":        1,
		"OUTDATED_EPOCH": 2,
	}
)

func (x FlowResponse_Result) Enum() *FlowResponse_Result {
	p := new(FlowResponse_Result)
	*p = x
	return p
}

func (x FlowResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_pipelined_proto_enumTypes[8].Descriptor()
}

func (FlowResponse_Result) Type() protoreflect.EnumType {
	return &file_lte_protos_pipelined_proto_enumTypes[8]
}

func (x FlowResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowResponse_Result.Descriptor instead.
func (FlowResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{15, 0}
}

type SubscriberQuotaUpdate_Type int32

const (
	SubscriberQuotaUpdate_VALID_QUOTA SubscriberQuotaUpdate_Type = 0
	SubscriberQuotaUpdate_NO_QUOTA    SubscriberQuotaUpdate_Type = 1
	SubscriberQuotaUpdate_TERMINATE   SubscriberQuotaUpdate_Type = 2
)

// Enum value maps for SubscriberQuotaUpdate_Type.
var (
	SubscriberQuotaUpdate_Type_name = map[int32]string{
		0: "VALID_QUOTA",
		1: "NO_QUOTA",
		2: "TERMINATE",
	}
	SubscriberQuotaUpdate_Type_value = map[string]int32{
		"VALID_QUOTA": 0,
		"NO_QUOTA":    1,
		"TERMINATE":   2,
	}
)

func (x SubscriberQuotaUpdate_Type) Enum() *SubscriberQuotaUpdate_Type {
	p := new(SubscriberQuotaUpdate_Type)
	*p = x
	return p
}

func (x SubscriberQuotaUpdate_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriberQuotaUpdate_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_pipelined_proto_enumTypes[9].Descriptor()
}

func (SubscriberQuotaUpdate_Type) Type() protoreflect.EnumType {
	return &file_lte_protos_pipelined_proto_enumTypes[9]
}

func (x SubscriberQuotaUpdate_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscriberQuotaUpdate_Type.Descriptor instead.
func (SubscriberQuotaUpdate_Type) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{17, 0}
}

type FsmState_FsmState int32

const (
	FsmState_SESSION_ACTIVE                FsmState_FsmState = 0
	FsmState_SESSION_TERMINATED            FsmState_FsmState = 4
	FsmState_SESSION_TERMINATION_SCHEDULED FsmState_FsmState = 5
	FsmState_SESSION_RELEASED              FsmState_FsmState = 6
	FsmState_CREATING                      FsmState_FsmState = 7
	FsmState_CREATED                       FsmState_FsmState = 8
	FsmState_ACTIVE                        FsmState_FsmState = 9
	FsmState_INACTIVE                      FsmState_FsmState = 10
	FsmState_RELEASE                       FsmState_FsmState = 11
)

// Enum value maps for FsmState_FsmState.
var (
	FsmState_FsmState_name = map[int32]string{
		0:  "SESSION_ACTIVE",
		4:  "SESSION_TERMINATED",
		5:  "SESSION_TERMINATION_SCHEDULED",
		6:  "SESSION_RELEASED",
		7:  "CREATING",
		8:  "CREATED",
		9:  "ACTIVE",
		10: "INACTIVE",
		11: "RELEASE",
	}
	FsmState_FsmState_value = map[string]int32{
		"SESSION_ACTIVE":                0,
		"SESSION_TERMINATED":            4,
		"SESSION_TERMINATION_SCHEDULED": 5,
		"SESSION_RELEASED":              6,
		"CREATING":                      7,
		"CREATED":                       8,
		"ACTIVE":                        9,
		"INACTIVE":                      10,
		"RELEASE":                       11,
	}
)

func (x FsmState_FsmState) Enum() *FsmState_FsmState {
	p := new(FsmState_FsmState)
	*p = x
	return p
}

func (x FsmState_FsmState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FsmState_FsmState) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_pipelined_proto_enumTypes[10].Descriptor()
}

func (FsmState_FsmState) Type() protoreflect.EnumType {
	return &file_lte_protos_pipelined_proto_enumTypes[10]
}

func (x FsmState_FsmState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FsmState_FsmState.Descriptor instead.
func (FsmState_FsmState) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{23, 0}
}

type RedirectInfo_RedirectAddrType int32

const (
	RedirectInfo_IPV4   RedirectInfo_RedirectAddrType = 0
	RedirectInfo_IPV6   RedirectInfo_RedirectAddrType = 1
	RedirectInfo_URL    RedirectInfo_RedirectAddrType = 2
	RedirectInfo_SIPURI RedirectInfo_RedirectAddrType = 3
	RedirectInfo_IPV4V6 RedirectInfo_RedirectAddrType = 4
)

// Enum value maps for RedirectInfo_RedirectAddrType.
var (
	RedirectInfo_RedirectAddrType_name = map[int32]string{
		0: "IPV4",
		1: "IPV6",
		2: "URL",
		3: "SIPURI",
		4: "IPV4V6",
	}
	RedirectInfo_RedirectAddrType_value = map[string]int32{
		"IPV4":   0,
		"IPV6":   1,
		"URL":    2,
		"SIPURI": 3,
		"IPV4V6": 4,
	}
)

func (x RedirectInfo_RedirectAddrType) Enum() *RedirectInfo_RedirectAddrType {
	p := new(RedirectInfo_RedirectAddrType)
	*p = x
	return p
}

func (x RedirectInfo_RedirectAddrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedirectInfo_RedirectAddrType) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_pipelined_proto_enumTypes[11].Descriptor()
}

func (RedirectInfo_RedirectAddrType) Type() protoreflect.EnumType {
	return &file_lte_protos_pipelined_proto_enumTypes[11]
}

func (x RedirectInfo_RedirectAddrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedirectInfo_RedirectAddrType.Descriptor instead.
func (RedirectInfo_RedirectAddrType) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{27, 0}
}

// 15.8, Table 8.2.1-1
type CauseIE_CauseValues int32

const (
	CauseIE_RESERVED                              CauseIE_CauseValues = 0
	CauseIE_REQUEST_ACCEPTED                      CauseIE_CauseValues = 1
	CauseIE_REQUEST_REJECTED_NO_REASON            CauseIE_CauseValues = 2
	CauseIE_SESSION_CONTEXT_NOT_FOUND             CauseIE_CauseValues = 3
	CauseIE_MANDATORY_IE_MISSING                  CauseIE_CauseValues = 4
	CauseIE_CONDITIONAL_IE_MISSING                CauseIE_CauseValues = 5
	CauseIE_INVALID_LENGTH                        CauseIE_CauseValues = 6
	CauseIE_MANDATORY_IE_INCORRECT                CauseIE_CauseValues = 7
	CauseIE_INVALID_FORWARDING_POLICY             CauseIE_CauseValues = 8
	CauseIE_INVALID_F_TEID_ALLOCATION_OPTION      CauseIE_CauseValues = 9
	CauseIE_NO_ESTABLISHED_PFCP_ASSOCIATION       CauseIE_CauseValues = 10
	CauseIE_RULE_CREATION_OR_MODIFICATION_FAILURE CauseIE_CauseValues = 11
	CauseIE_PFCP_ENTRY_IN_CONGESTION              CauseIE_CauseValues = 12
	CauseIE_NO_RESOURCES_AVAILABLE                CauseIE_CauseValues = 13
	CauseIE_SERVICE_NOT_SUPPORTED                 CauseIE_CauseValues = 14
	CauseIE_SYSTEM_FAILURE                        CauseIE_CauseValues = 15
)

// Enum value maps for CauseIE_CauseValues.
var (
	CauseIE_CauseValues_name = map[int32]string{
		0:  "RESERVED",
		1:  "REQUEST_ACCEPTED",
		2:  "REQUEST_REJECTED_NO_REASON",
		3:  "SESSION_CONTEXT_NOT_FOUND",
		4:  "MANDATORY_IE_MISSING",
		5:  "CONDITIONAL_IE_MISSING",
		6:  "INVALID_LENGTH",
		7:  "MANDATORY_IE_INCORRECT",
		8:  "INVALID_FORWARDING_POLICY",
		9:  "INVALID_F_TEID_ALLOCATION_OPTION",
		10: "NO_ESTABLISHED_PFCP_ASSOCIATION",
		11: "RULE_CREATION_OR_MODIFICATION_FAILURE",
		12: "PFCP_ENTRY_IN_CONGESTION",
		13: "NO_RESOURCES_AVAILABLE",
		14: "SERVICE_NOT_SUPPORTED",
		15: "SYSTEM_FAILURE",
	}
	CauseIE_CauseValues_value = map[string]int32{
		"RESERVED":                              0,
		"REQUEST_ACCEPTED":                      1,
		"REQUEST_REJECTED_NO_REASON":            2,
		"SESSION_CONTEXT_NOT_FOUND":             3,
		"MANDATORY_IE_MISSING":                  4,
		"CONDITIONAL_IE_MISSING":                5,
		"INVALID_LENGTH":                        6,
		"MANDATORY_IE_INCORRECT":                7,
		"INVALID_FORWARDING_POLICY":             8,
		"INVALID_F_TEID_ALLOCATION_OPTION":      9,
		"NO_ESTABLISHED_PFCP_ASSOCIATION":       10,
		"RULE_CREATION_OR_MODIFICATION_FAILURE": 11,
		"PFCP_ENTRY_IN_CONGESTION":              12,
		"NO_RESOURCES_AVAILABLE":                13,
		"SERVICE_NOT_SUPPORTED":                 14,
		"SYSTEM_FAILURE":                        15,
	}
)

func (x CauseIE_CauseValues) Enum() *CauseIE_CauseValues {
	p := new(CauseIE_CauseValues)
	*p = x
	return p
}

func (x CauseIE_CauseValues) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CauseIE_CauseValues) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_pipelined_proto_enumTypes[12].Descriptor()
}

func (CauseIE_CauseValues) Type() protoreflect.EnumType {
	return &file_lte_protos_pipelined_proto_enumTypes[12]
}

func (x CauseIE_CauseValues) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CauseIE_CauseValues.Descriptor instead.
func (CauseIE_CauseValues) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{36, 0}
}

type UESessionState_UEConfigState int32

const (
	UESessionState_ACTIVE         UESessionState_UEConfigState = 0 // Session TUNNEL ADD
	UESessionState_UNREGISTERED   UESessionState_UEConfigState = 1 // Session TUNNEL DELETE
	UESessionState_INSTALL_IDLE   UESessionState_UEConfigState = 2 // Session ADD PAGING
	UESessionState_UNINSTALL_IDLE UESessionState_UEConfigState = 3 // Session REMOVE PAGING
	UESessionState_SUSPENDED_DATA UESessionState_UEConfigState = 4 // Discard Data on Tunnel
	UESessionState_RESUME_DATA    UESessionState_UEConfigState = 5 // Resume Data on Tunnel
)

// Enum value maps for UESessionState_UEConfigState.
var (
	UESessionState_UEConfigState_name = map[int32]string{
		0: "ACTIVE",
		1: "UNREGISTERED",
		2: "INSTALL_IDLE",
		3: "UNINSTALL_IDLE",
		4: "SUSPENDED_DATA",
		5: "RESUME_DATA",
	}
	UESessionState_UEConfigState_value = map[string]int32{
		"ACTIVE":         0,
		"UNREGISTERED":   1,
		"INSTALL_IDLE":   2,
		"UNINSTALL_IDLE": 3,
		"SUSPENDED_DATA": 4,
		"RESUME_DATA":    5,
	}
)

func (x UESessionState_UEConfigState) Enum() *UESessionState_UEConfigState {
	p := new(UESessionState_UEConfigState)
	*p = x
	return p
}

func (x UESessionState_UEConfigState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UESessionState_UEConfigState) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_pipelined_proto_enumTypes[13].Descriptor()
}

func (UESessionState_UEConfigState) Type() protoreflect.EnumType {
	return &file_lte_protos_pipelined_proto_enumTypes[13]
}

func (x UESessionState_UEConfigState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UESessionState_UEConfigState.Descriptor instead.
func (UESessionState_UEConfigState) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{40, 0}
}

// Deprecated
type SetupFlowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of requests to activate
	Requests []*ActivateFlowsRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	// epoch to prevent outdated setup calls
	Epoch uint64 `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// List of subscriber quota updates
	QuotaUpdates *UpdateSubscriberQuotaStateRequest `protobuf:"bytes,3,opt,name=quota_updates,json=quotaUpdates,proto3" json:"quota_updates,omitempty"`
}

func (x *SetupFlowsRequest) Reset() {
	*x = SetupFlowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetupFlowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupFlowsRequest) ProtoMessage() {}

func (x *SetupFlowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupFlowsRequest.ProtoReflect.Descriptor instead.
func (*SetupFlowsRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{0}
}

func (x *SetupFlowsRequest) GetRequests() []*ActivateFlowsRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *SetupFlowsRequest) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *SetupFlowsRequest) GetQuotaUpdates() *UpdateSubscriberQuotaStateRequest {
	if x != nil {
		return x.QuotaUpdates
	}
	return nil
}

type SetupDefaultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// epoch to prevent outdated setup calls
	Epoch uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *SetupDefaultRequest) Reset() {
	*x = SetupDefaultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetupDefaultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupDefaultRequest) ProtoMessage() {}

func (x *SetupDefaultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupDefaultRequest.ProtoReflect.Descriptor instead.
func (*SetupDefaultRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{1}
}

func (x *SetupDefaultRequest) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

type SetupUEMacRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of UEs to activate
	Requests []*UEMacFlowRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	// epoch to prevent outdated setup calls
	Epoch uint64 `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *SetupUEMacRequest) Reset() {
	*x = SetupUEMacRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetupUEMacRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupUEMacRequest) ProtoMessage() {}

func (x *SetupUEMacRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupUEMacRequest.ProtoReflect.Descriptor instead.
func (*SetupUEMacRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{2}
}

func (x *SetupUEMacRequest) GetRequests() []*UEMacFlowRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *SetupUEMacRequest) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

type SetupPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of requests to activate
	Requests []*ActivateFlowsRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	// epoch to prevent outdated setup calls
	Epoch uint64 `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *SetupPolicyRequest) Reset() {
	*x = SetupPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetupPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupPolicyRequest) ProtoMessage() {}

func (x *SetupPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupPolicyRequest.ProtoReflect.Descriptor instead.
func (*SetupPolicyRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{3}
}

func (x *SetupPolicyRequest) GetRequests() []*ActivateFlowsRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *SetupPolicyRequest) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

type SetupQuotaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of quota rules to activate
	QuotaUpdates *UpdateSubscriberQuotaStateRequest `protobuf:"bytes,1,opt,name=quota_updates,json=quotaUpdates,proto3" json:"quota_updates,omitempty"`
	// epoch to prevent outdated setup calls
	Epoch uint64 `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *SetupQuotaRequest) Reset() {
	*x = SetupQuotaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetupQuotaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupQuotaRequest) ProtoMessage() {}

func (x *SetupQuotaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupQuotaRequest.ProtoReflect.Descriptor instead.
func (*SetupQuotaRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{4}
}

func (x *SetupQuotaRequest) GetQuotaUpdates() *UpdateSubscriberQuotaStateRequest {
	if x != nil {
		return x.QuotaUpdates
	}
	return nil
}

func (x *SetupQuotaRequest) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

type SetupFlowsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result SetupFlowsResult_Result `protobuf:"varint,1,opt,name=result,proto3,enum=magma.lte.SetupFlowsResult_Result" json:"result,omitempty"`
}

func (x *SetupFlowsResult) Reset() {
	*x = SetupFlowsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetupFlowsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupFlowsResult) ProtoMessage() {}

func (x *SetupFlowsResult) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupFlowsResult.ProtoReflect.Descriptor instead.
func (*SetupFlowsResult) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{5}
}

func (x *SetupFlowsResult) GetResult() SetupFlowsResult_Result {
	if x != nil {
		return x.Result
	}
	return SetupFlowsResult_SUCCESS
}

type RequestOriginType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type RequestOriginType_OriginType `protobuf:"varint,1,opt,name=type,proto3,enum=magma.lte.RequestOriginType_OriginType" json:"type,omitempty"`
}

func (x *RequestOriginType) Reset() {
	*x = RequestOriginType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestOriginType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestOriginType) ProtoMessage() {}

func (x *RequestOriginType) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestOriginType.ProtoReflect.Descriptor instead.
func (*RequestOriginType) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{6}
}

func (x *RequestOriginType) GetType() RequestOriginType_OriginType {
	if x != nil {
		return x.Type
	}
	return RequestOriginType_GX
}

type VersionedPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rule    *PolicyRule `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
	Version uint32      `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *VersionedPolicy) Reset() {
	*x = VersionedPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionedPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionedPolicy) ProtoMessage() {}

func (x *VersionedPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionedPolicy.ProtoReflect.Descriptor instead.
func (*VersionedPolicy) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{7}
}

func (x *VersionedPolicy) GetRule() *PolicyRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *VersionedPolicy) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type ActivateFlowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid            *SubscriberID             `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	IpAddr         string                    `protobuf:"bytes,2,opt,name=ip_addr,json=ipAddr,proto3" json:"ip_addr,omitempty"`                           // Subscriber session ipv4 address
	RequestOrigin  *RequestOriginType        `protobuf:"bytes,5,opt,name=request_origin,json=requestOrigin,proto3" json:"request_origin,omitempty"`      // Activate flow source (GX/GY)
	ApnAmbr        *AggregatedMaximumBitrate `protobuf:"bytes,6,opt,name=apn_ambr,json=apnAmbr,proto3" json:"apn_ambr,omitempty"`                        // APN AMBR info, passed at the time of session creation
	Ipv6Addr       []byte                    `protobuf:"bytes,7,opt,name=ipv6_addr,json=ipv6Addr,proto3" json:"ipv6_addr,omitempty"`                     // Subscriber session ipv6 address
	Msisdn         []byte                    `protobuf:"bytes,8,opt,name=msisdn,proto3" json:"msisdn,omitempty"`                                         // From SubscriberDB or HSS
	UplinkTunnel   uint32                    `protobuf:"varint,9,opt,name=uplink_tunnel,json=uplinkTunnel,proto3" json:"uplink_tunnel,omitempty"`        // Subscriber uplink tunnel
	DownlinkTunnel uint32                    `protobuf:"varint,10,opt,name=downlink_tunnel,json=downlinkTunnel,proto3" json:"downlink_tunnel,omitempty"` // Subscriber downlink tunnel
	Policies       []*VersionedPolicy        `protobuf:"bytes,11,rep,name=policies,proto3" json:"policies,omitempty"`                                    // Policy + version pairs
}

func (x *ActivateFlowsRequest) Reset() {
	*x = ActivateFlowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateFlowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateFlowsRequest) ProtoMessage() {}

func (x *ActivateFlowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateFlowsRequest.ProtoReflect.Descriptor instead.
func (*ActivateFlowsRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{8}
}

func (x *ActivateFlowsRequest) GetSid() *SubscriberID {
	if x != nil {
		return x.Sid
	}
	return nil
}

func (x *ActivateFlowsRequest) GetIpAddr() string {
	if x != nil {
		return x.IpAddr
	}
	return ""
}

func (x *ActivateFlowsRequest) GetRequestOrigin() *RequestOriginType {
	if x != nil {
		return x.RequestOrigin
	}
	return nil
}

func (x *ActivateFlowsRequest) GetApnAmbr() *AggregatedMaximumBitrate {
	if x != nil {
		return x.ApnAmbr
	}
	return nil
}

func (x *ActivateFlowsRequest) GetIpv6Addr() []byte {
	if x != nil {
		return x.Ipv6Addr
	}
	return nil
}

func (x *ActivateFlowsRequest) GetMsisdn() []byte {
	if x != nil {
		return x.Msisdn
	}
	return nil
}

func (x *ActivateFlowsRequest) GetUplinkTunnel() uint32 {
	if x != nil {
		return x.UplinkTunnel
	}
	return 0
}

func (x *ActivateFlowsRequest) GetDownlinkTunnel() uint32 {
	if x != nil {
		return x.DownlinkTunnel
	}
	return 0
}

func (x *ActivateFlowsRequest) GetPolicies() []*VersionedPolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type VersionedPolicyID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleId  string `protobuf:"bytes,1,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	Version uint32 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *VersionedPolicyID) Reset() {
	*x = VersionedPolicyID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionedPolicyID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionedPolicyID) ProtoMessage() {}

func (x *VersionedPolicyID) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionedPolicyID.ProtoReflect.Descriptor instead.
func (*VersionedPolicyID) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{9}
}

func (x *VersionedPolicyID) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *VersionedPolicyID) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// DeactivateFlowsRequest can be used to deactivate all flows for a subscriber,
// all flows for some rules, or particular rules for a subscriber, depending on
// which parameters are passed. Rule IDs can apply to static rules or dynamic
// rules
// If no rule ids are given, all flows are deactivated
type DeactivateFlowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid                    *SubscriberID        `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	RequestOrigin          *RequestOriginType   `protobuf:"bytes,3,opt,name=request_origin,json=requestOrigin,proto3" json:"request_origin,omitempty"`
	IpAddr                 string               `protobuf:"bytes,4,opt,name=ip_addr,json=ipAddr,proto3" json:"ip_addr,omitempty"`       // Subscriber session ipv4 address
	Ipv6Addr               []byte               `protobuf:"bytes,5,opt,name=ipv6_addr,json=ipv6Addr,proto3" json:"ipv6_addr,omitempty"` // Subscriber session ipv6 address
	RemoveDefaultDropFlows bool                 `protobuf:"varint,6,opt,name=remove_default_drop_flows,json=removeDefaultDropFlows,proto3" json:"remove_default_drop_flows,omitempty"`
	UplinkTunnel           uint32               `protobuf:"varint,7,opt,name=uplink_tunnel,json=uplinkTunnel,proto3" json:"uplink_tunnel,omitempty"`       // Subscriber uplink tunnel
	DownlinkTunnel         uint32               `protobuf:"varint,8,opt,name=downlink_tunnel,json=downlinkTunnel,proto3" json:"downlink_tunnel,omitempty"` // Subscriber downlink tunnel
	Policies               []*VersionedPolicyID `protobuf:"bytes,9,rep,name=policies,proto3" json:"policies,omitempty"`                                    // PolicyID + version pairs
}

func (x *DeactivateFlowsRequest) Reset() {
	*x = DeactivateFlowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateFlowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateFlowsRequest) ProtoMessage() {}

func (x *DeactivateFlowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateFlowsRequest.ProtoReflect.Descriptor instead.
func (*DeactivateFlowsRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{10}
}

func (x *DeactivateFlowsRequest) GetSid() *SubscriberID {
	if x != nil {
		return x.Sid
	}
	return nil
}

func (x *DeactivateFlowsRequest) GetRequestOrigin() *RequestOriginType {
	if x != nil {
		return x.RequestOrigin
	}
	return nil
}

func (x *DeactivateFlowsRequest) GetIpAddr() string {
	if x != nil {
		return x.IpAddr
	}
	return ""
}

func (x *DeactivateFlowsRequest) GetIpv6Addr() []byte {
	if x != nil {
		return x.Ipv6Addr
	}
	return nil
}

func (x *DeactivateFlowsRequest) GetRemoveDefaultDropFlows() bool {
	if x != nil {
		return x.RemoveDefaultDropFlows
	}
	return false
}

func (x *DeactivateFlowsRequest) GetUplinkTunnel() uint32 {
	if x != nil {
		return x.UplinkTunnel
	}
	return 0
}

func (x *DeactivateFlowsRequest) GetDownlinkTunnel() uint32 {
	if x != nil {
		return x.DownlinkTunnel
	}
	return 0
}

func (x *DeactivateFlowsRequest) GetPolicies() []*VersionedPolicyID {
	if x != nil {
		return x.Policies
	}
	return nil
}

type RuleModResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleId  string               `protobuf:"bytes,1,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	Result  RuleModResult_Result `protobuf:"varint,2,opt,name=result,proto3,enum=magma.lte.RuleModResult_Result" json:"result,omitempty"`
	Version uint64               `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *RuleModResult) Reset() {
	*x = RuleModResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleModResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleModResult) ProtoMessage() {}

func (x *RuleModResult) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleModResult.ProtoReflect.Descriptor instead.
func (*RuleModResult) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{11}
}

func (x *RuleModResult) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *RuleModResult) GetResult() RuleModResult_Result {
	if x != nil {
		return x.Result
	}
	return RuleModResult_SUCCESS
}

func (x *RuleModResult) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type ActivateFlowsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyResults []*RuleModResult `protobuf:"bytes,2,rep,name=policy_results,json=policyResults,proto3" json:"policy_results,omitempty"`
}

func (x *ActivateFlowsResult) Reset() {
	*x = ActivateFlowsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateFlowsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateFlowsResult) ProtoMessage() {}

func (x *ActivateFlowsResult) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateFlowsResult.ProtoReflect.Descriptor instead.
func (*ActivateFlowsResult) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{12}
}

func (x *ActivateFlowsResult) GetPolicyResults() []*RuleModResult {
	if x != nil {
		return x.PolicyResults
	}
	return nil
}

type DeactivateFlowsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result DeactivateFlowsResult_Result `protobuf:"varint,1,opt,name=result,proto3,enum=magma.lte.DeactivateFlowsResult_Result" json:"result,omitempty"`
}

func (x *DeactivateFlowsResult) Reset() {
	*x = DeactivateFlowsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateFlowsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateFlowsResult) ProtoMessage() {}

func (x *DeactivateFlowsResult) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateFlowsResult.ProtoReflect.Descriptor instead.
func (*DeactivateFlowsResult) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{13}
}

func (x *DeactivateFlowsResult) GetResult() DeactivateFlowsResult_Result {
	if x != nil {
		return x.Result
	}
	return DeactivateFlowsResult_SUCCESS
}

type FlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match       *FlowMatch            `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	AppName     string                `protobuf:"bytes,2,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	BytesRx     uint64                `protobuf:"varint,3,opt,name=bytes_rx,json=bytesRx,proto3" json:"bytes_rx,omitempty"`
	ServiceType string                `protobuf:"bytes,4,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`
	SrcMac      string                `protobuf:"bytes,5,opt,name=src_mac,json=srcMac,proto3" json:"src_mac,omitempty"`
	DstMac      string                `protobuf:"bytes,6,opt,name=dst_mac,json=dstMac,proto3" json:"dst_mac,omitempty"`
	State       FlowRequest_FlowState `protobuf:"varint,7,opt,name=state,proto3,enum=magma.lte.FlowRequest_FlowState" json:"state,omitempty"`
}

func (x *FlowRequest) Reset() {
	*x = FlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowRequest) ProtoMessage() {}

func (x *FlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowRequest.ProtoReflect.Descriptor instead.
func (*FlowRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{14}
}

func (x *FlowRequest) GetMatch() *FlowMatch {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *FlowRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *FlowRequest) GetBytesRx() uint64 {
	if x != nil {
		return x.BytesRx
	}
	return 0
}

func (x *FlowRequest) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

func (x *FlowRequest) GetSrcMac() string {
	if x != nil {
		return x.SrcMac
	}
	return ""
}

func (x *FlowRequest) GetDstMac() string {
	if x != nil {
		return x.DstMac
	}
	return ""
}

func (x *FlowRequest) GetState() FlowRequest_FlowState {
	if x != nil {
		return x.State
	}
	return FlowRequest_FLOW_CREATED
}

type FlowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result FlowResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=magma.lte.FlowResponse_Result" json:"result,omitempty"`
}

func (x *FlowResponse) Reset() {
	*x = FlowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowResponse) ProtoMessage() {}

func (x *FlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowResponse.ProtoReflect.Descriptor instead.
func (*FlowResponse) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{15}
}

func (x *FlowResponse) GetResult() FlowResponse_Result {
	if x != nil {
		return x.Result
	}
	return FlowResponse_SUCCESS
}

// UEMacFlowRequest is used to link a subscriber ID to a MAC address.
// This is used for Carrier WiFi data session establishment
type UEMacFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid *SubscriberID `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	// UE MAC address
	MacAddr string `protobuf:"bytes,2,opt,name=mac_addr,json=macAddr,proto3" json:"mac_addr,omitempty"`
	Msisdn  string `protobuf:"bytes,3,opt,name=msisdn,proto3" json:"msisdn,omitempty"`
	// AP MAC address
	ApMacAddr string `protobuf:"bytes,4,opt,name=ap_mac_addr,json=apMacAddr,proto3" json:"ap_mac_addr,omitempty"`
	// AP Name
	ApName string `protobuf:"bytes,5,opt,name=ap_name,json=apName,proto3" json:"ap_name,omitempty"`
	// PDP Start time
	PdpStartTime uint64 `protobuf:"varint,6,opt,name=pdp_start_time,json=pdpStartTime,proto3" json:"pdp_start_time,omitempty"`
}

func (x *UEMacFlowRequest) Reset() {
	*x = UEMacFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UEMacFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UEMacFlowRequest) ProtoMessage() {}

func (x *UEMacFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UEMacFlowRequest.ProtoReflect.Descriptor instead.
func (*UEMacFlowRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{16}
}

func (x *UEMacFlowRequest) GetSid() *SubscriberID {
	if x != nil {
		return x.Sid
	}
	return nil
}

func (x *UEMacFlowRequest) GetMacAddr() string {
	if x != nil {
		return x.MacAddr
	}
	return ""
}

func (x *UEMacFlowRequest) GetMsisdn() string {
	if x != nil {
		return x.Msisdn
	}
	return ""
}

func (x *UEMacFlowRequest) GetApMacAddr() string {
	if x != nil {
		return x.ApMacAddr
	}
	return ""
}

func (x *UEMacFlowRequest) GetApName() string {
	if x != nil {
		return x.ApName
	}
	return ""
}

func (x *UEMacFlowRequest) GetPdpStartTime() uint64 {
	if x != nil {
		return x.PdpStartTime
	}
	return 0
}

type SubscriberQuotaUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid *SubscriberID `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	// UE MAC address
	MacAddr    string                     `protobuf:"bytes,2,opt,name=mac_addr,json=macAddr,proto3" json:"mac_addr,omitempty"`
	UpdateType SubscriberQuotaUpdate_Type `protobuf:"varint,3,opt,name=update_type,json=updateType,proto3,enum=magma.lte.SubscriberQuotaUpdate_Type" json:"update_type,omitempty"`
}

func (x *SubscriberQuotaUpdate) Reset() {
	*x = SubscriberQuotaUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriberQuotaUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriberQuotaUpdate) ProtoMessage() {}

func (x *SubscriberQuotaUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriberQuotaUpdate.ProtoReflect.Descriptor instead.
func (*SubscriberQuotaUpdate) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{17}
}

func (x *SubscriberQuotaUpdate) GetSid() *SubscriberID {
	if x != nil {
		return x.Sid
	}
	return nil
}

func (x *SubscriberQuotaUpdate) GetMacAddr() string {
	if x != nil {
		return x.MacAddr
	}
	return ""
}

func (x *SubscriberQuotaUpdate) GetUpdateType() SubscriberQuotaUpdate_Type {
	if x != nil {
		return x.UpdateType
	}
	return SubscriberQuotaUpdate_VALID_QUOTA
}

type UpdateSubscriberQuotaStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates []*SubscriberQuotaUpdate `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
}

func (x *UpdateSubscriberQuotaStateRequest) Reset() {
	*x = UpdateSubscriberQuotaStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubscriberQuotaStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubscriberQuotaStateRequest) ProtoMessage() {}

func (x *UpdateSubscriberQuotaStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubscriberQuotaStateRequest.ProtoReflect.Descriptor instead.
func (*UpdateSubscriberQuotaStateRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateSubscriberQuotaStateRequest) GetUpdates() []*SubscriberQuotaUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

type TableAssignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppName       string   `protobuf:"bytes,1,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	MainTable     uint64   `protobuf:"varint,2,opt,name=main_table,json=mainTable,proto3" json:"main_table,omitempty"`
	ScratchTables []uint64 `protobuf:"varint,3,rep,packed,name=scratch_tables,json=scratchTables,proto3" json:"scratch_tables,omitempty"`
}

func (x *TableAssignment) Reset() {
	*x = TableAssignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableAssignment) ProtoMessage() {}

func (x *TableAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableAssignment.ProtoReflect.Descriptor instead.
func (*TableAssignment) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{19}
}

func (x *TableAssignment) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *TableAssignment) GetMainTable() uint64 {
	if x != nil {
		return x.MainTable
	}
	return 0
}

func (x *TableAssignment) GetScratchTables() []uint64 {
	if x != nil {
		return x.ScratchTables
	}
	return nil
}

type AllTableAssignments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableAssignments []*TableAssignment `protobuf:"bytes,1,rep,name=table_assignments,json=tableAssignments,proto3" json:"table_assignments,omitempty"`
}

func (x *AllTableAssignments) Reset() {
	*x = AllTableAssignments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllTableAssignments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllTableAssignments) ProtoMessage() {}

func (x *AllTableAssignments) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllTableAssignments.ProtoReflect.Descriptor instead.
func (*AllTableAssignments) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{20}
}

func (x *AllTableAssignments) GetTableAssignments() []*TableAssignment {
	if x != nil {
		return x.TableAssignments
	}
	return nil
}

type SerializedRyuPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pkt  []byte `protobuf:"bytes,1,opt,name=pkt,proto3" json:"pkt,omitempty"`
	Imsi string `protobuf:"bytes,2,opt,name=imsi,proto3" json:"imsi,omitempty"`
}

func (x *SerializedRyuPacket) Reset() {
	*x = SerializedRyuPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SerializedRyuPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerializedRyuPacket) ProtoMessage() {}

func (x *SerializedRyuPacket) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerializedRyuPacket.ProtoReflect.Descriptor instead.
func (*SerializedRyuPacket) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{21}
}

func (x *SerializedRyuPacket) GetPkt() []byte {
	if x != nil {
		return x.Pkt
	}
	return nil
}

func (x *SerializedRyuPacket) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

type PacketDropTableId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId int32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
}

func (x *PacketDropTableId) Reset() {
	*x = PacketDropTableId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketDropTableId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketDropTableId) ProtoMessage() {}

func (x *PacketDropTableId) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketDropTableId.ProtoReflect.Descriptor instead.
func (*PacketDropTableId) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{22}
}

func (x *PacketDropTableId) GetTableId() int32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

// ToDo latest state change will reflect in upcoming proto
type FsmState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State FsmState_FsmState `protobuf:"varint,1,opt,name=state,proto3,enum=magma.lte.FsmState_FsmState" json:"state,omitempty"`
}

func (x *FsmState) Reset() {
	*x = FsmState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FsmState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FsmState) ProtoMessage() {}

func (x *FsmState) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FsmState.ProtoReflect.Descriptor instead.
func (*FsmState) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{23}
}

func (x *FsmState) GetState() FsmState_FsmState {
	if x != nil {
		return x.State
	}
	return FsmState_SESSION_ACTIVE
}

type SdfFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fd    *FlowDescriptor `protobuf:"bytes,1,opt,name=fd,proto3" json:"fd,omitempty"`
	Ttc   []byte          `protobuf:"bytes,2,opt,name=ttc,proto3" json:"ttc,omitempty"`
	Spi   []byte          `protobuf:"bytes,3,opt,name=spi,proto3" json:"spi,omitempty"`
	Fl    []byte          `protobuf:"bytes,4,opt,name=fl,proto3" json:"fl,omitempty"`
	SdfId uint32          `protobuf:"varint,5,opt,name=sdf_id,json=sdfId,proto3" json:"sdf_id,omitempty"`
}

func (x *SdfFilters) Reset() {
	*x = SdfFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdfFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdfFilters) ProtoMessage() {}

func (x *SdfFilters) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdfFilters.ProtoReflect.Descriptor instead.
func (*SdfFilters) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{24}
}

func (x *SdfFilters) GetFd() *FlowDescriptor {
	if x != nil {
		return x.Fd
	}
	return nil
}

func (x *SdfFilters) GetTtc() []byte {
	if x != nil {
		return x.Ttc
	}
	return nil
}

func (x *SdfFilters) GetSpi() []byte {
	if x != nil {
		return x.Spi
	}
	return nil
}

func (x *SdfFilters) GetFl() []byte {
	if x != nil {
		return x.Fl
	}
	return nil
}

func (x *SdfFilters) GetSdfId() uint32 {
	if x != nil {
		return x.SdfId
	}
	return 0
}

type FlowDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match  *FlowMatchNew `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	Action Action        `protobuf:"varint,2,opt,name=action,proto3,enum=magma.lte.Action" json:"action,omitempty"`
}

func (x *FlowDescriptor) Reset() {
	*x = FlowDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowDescriptor) ProtoMessage() {}

func (x *FlowDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowDescriptor.ProtoReflect.Descriptor instead.
func (*FlowDescriptor) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{25}
}

func (x *FlowDescriptor) GetMatch() *FlowMatchNew {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *FlowDescriptor) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_DROP
}

type FlowMatchNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv4Src      string `protobuf:"bytes,1,opt,name=ipv4_src,json=ipv4Src,proto3" json:"ipv4_src,omitempty"`
	Ipv4Dst      string `protobuf:"bytes,2,opt,name=ipv4_dst,json=ipv4Dst,proto3" json:"ipv4_dst,omitempty"`
	ProtocolType string `protobuf:"bytes,3,opt,name=protocol_type,json=protocolType,proto3" json:"protocol_type,omitempty"` //can be UDP TCP
	DstPort      uint32 `protobuf:"varint,4,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty"`
	SrcPort      uint32 `protobuf:"varint,5,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty"`
}

func (x *FlowMatchNew) Reset() {
	*x = FlowMatchNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowMatchNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowMatchNew) ProtoMessage() {}

func (x *FlowMatchNew) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowMatchNew.ProtoReflect.Descriptor instead.
func (*FlowMatchNew) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{26}
}

func (x *FlowMatchNew) GetIpv4Src() string {
	if x != nil {
		return x.Ipv4Src
	}
	return ""
}

func (x *FlowMatchNew) GetIpv4Dst() string {
	if x != nil {
		return x.Ipv4Dst
	}
	return ""
}

func (x *FlowMatchNew) GetProtocolType() string {
	if x != nil {
		return x.ProtocolType
	}
	return ""
}

func (x *FlowMatchNew) GetDstPort() uint32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *FlowMatchNew) GetSrcPort() uint32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

type RedirectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedAddType    RedirectInfo_RedirectAddrType `protobuf:"varint,1,opt,name=red_add_type,json=redAddType,proto3,enum=magma.lte.RedirectInfo_RedirectAddrType" json:"red_add_type,omitempty"`
	RedServerAddr string                        `protobuf:"bytes,2,opt,name=red_server_addr,json=redServerAddr,proto3" json:"red_server_addr,omitempty"`
}

func (x *RedirectInfo) Reset() {
	*x = RedirectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedirectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedirectInfo) ProtoMessage() {}

func (x *RedirectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedirectInfo.ProtoReflect.Descriptor instead.
func (*RedirectInfo) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{27}
}

func (x *RedirectInfo) GetRedAddType() RedirectInfo_RedirectAddrType {
	if x != nil {
		return x.RedAddType
	}
	return RedirectInfo_IPV4
}

func (x *RedirectInfo) GetRedServerAddr() string {
	if x != nil {
		return x.RedServerAddr
	}
	return ""
}

type OuterHeaderCreation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OTeid      uint32 `protobuf:"varint,1,opt,name=o_teid,json=oTeid,proto3" json:"o_teid,omitempty"`
	GnbIpv4Adr string `protobuf:"bytes,2,opt,name=gnb_ipv4_adr,json=gnbIpv4Adr,proto3" json:"gnb_ipv4_adr,omitempty"`
	PortNo     uint32 `protobuf:"varint,3,opt,name=port_no,json=portNo,proto3" json:"port_no,omitempty"`
}

func (x *OuterHeaderCreation) Reset() {
	*x = OuterHeaderCreation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OuterHeaderCreation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OuterHeaderCreation) ProtoMessage() {}

func (x *OuterHeaderCreation) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OuterHeaderCreation.ProtoReflect.Descriptor instead.
func (*OuterHeaderCreation) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{28}
}

func (x *OuterHeaderCreation) GetOTeid() uint32 {
	if x != nil {
		return x.OTeid
	}
	return 0
}

func (x *OuterHeaderCreation) GetGnbIpv4Adr() string {
	if x != nil {
		return x.GnbIpv4Adr
	}
	return ""
}

func (x *OuterHeaderCreation) GetPortNo() uint32 {
	if x != nil {
		return x.PortNo
	}
	return 0
}

// Table 7.5.2.3-2: Forwarding Parameters IE in FAR
type FwdParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestIface    uint32               `protobuf:"varint,1,opt,name=dest_iface,json=destIface,proto3" json:"dest_iface,omitempty"`
	NetInstance  string               `protobuf:"bytes,2,opt,name=net_instance,json=netInstance,proto3" json:"net_instance,omitempty"`
	RedirectInfo *RedirectInfo        `protobuf:"bytes,3,opt,name=redirect_info,json=redirectInfo,proto3" json:"redirect_info,omitempty"`
	OutrHeadCr   *OuterHeaderCreation `protobuf:"bytes,4,opt,name=outr_head_cr,json=outrHeadCr,proto3" json:"outr_head_cr,omitempty"`
}

func (x *FwdParam) Reset() {
	*x = FwdParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FwdParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FwdParam) ProtoMessage() {}

func (x *FwdParam) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FwdParam.ProtoReflect.Descriptor instead.
func (*FwdParam) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{29}
}

func (x *FwdParam) GetDestIface() uint32 {
	if x != nil {
		return x.DestIface
	}
	return 0
}

func (x *FwdParam) GetNetInstance() string {
	if x != nil {
		return x.NetInstance
	}
	return ""
}

func (x *FwdParam) GetRedirectInfo() *RedirectInfo {
	if x != nil {
		return x.RedirectInfo
	}
	return nil
}

func (x *FwdParam) GetOutrHeadCr() *OuterHeaderCreation {
	if x != nil {
		return x.OutrHeadCr
	}
	return nil
}

// Table 7.5.2.3-3: Duplicating Parameters IE in FAR
type DupParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestIface uint32 `protobuf:"varint,1,opt,name=dest_iface,json=destIface,proto3" json:"dest_iface,omitempty"`
}

func (x *DupParam) Reset() {
	*x = DupParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DupParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DupParam) ProtoMessage() {}

func (x *DupParam) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DupParam.ProtoReflect.Descriptor instead.
func (*DupParam) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{30}
}

func (x *DupParam) GetDestIface() uint32 {
	if x != nil {
		return x.DestIface
	}
	return 0
}

// PDI Message Table 7.5.2.2-2: PDI IE within PFCP Session Establishment Request
type PDI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcInterface uint32      `protobuf:"varint,1,opt,name=src_interface,json=srcInterface,proto3" json:"src_interface,omitempty"`
	LocalFTeid   uint32      `protobuf:"varint,2,opt,name=local_f_teid,json=localFTeid,proto3" json:"local_f_teid,omitempty"`
	NetInstance  string      `protobuf:"bytes,3,opt,name=net_instance,json=netInstance,proto3" json:"net_instance,omitempty"`
	UeIpAdr      string      `protobuf:"bytes,4,opt,name=ue_ip_adr,json=ueIpAdr,proto3" json:"ue_ip_adr,omitempty"`
	TrEpId       []byte      `protobuf:"bytes,5,opt,name=tr_ep_id,json=trEpId,proto3" json:"tr_ep_id,omitempty"` //8.2.92
	SdfFilters   *SdfFilters `protobuf:"bytes,6,opt,name=sdf_filters,json=sdfFilters,proto3" json:"sdf_filters,omitempty"`
	AppId        string      `protobuf:"bytes,7,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *PDI) Reset() {
	*x = PDI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PDI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PDI) ProtoMessage() {}

func (x *PDI) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PDI.ProtoReflect.Descriptor instead.
func (*PDI) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{31}
}

func (x *PDI) GetSrcInterface() uint32 {
	if x != nil {
		return x.SrcInterface
	}
	return 0
}

func (x *PDI) GetLocalFTeid() uint32 {
	if x != nil {
		return x.LocalFTeid
	}
	return 0
}

func (x *PDI) GetNetInstance() string {
	if x != nil {
		return x.NetInstance
	}
	return ""
}

func (x *PDI) GetUeIpAdr() string {
	if x != nil {
		return x.UeIpAdr
	}
	return ""
}

func (x *PDI) GetTrEpId() []byte {
	if x != nil {
		return x.TrEpId
	}
	return nil
}

func (x *PDI) GetSdfFilters() *SdfFilters {
	if x != nil {
		return x.SdfFilters
	}
	return nil
}

func (x *PDI) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

// PDR message Table 7.5.2.2-1: Create PDR IE within PFCP Session Establishment
type SetGroupPDR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PdrId             uint32                  `protobuf:"varint,1,opt,name=pdr_id,json=pdrId,proto3" json:"pdr_id,omitempty"`
	PdrVersion        int32                   `protobuf:"varint,2,opt,name=pdr_version,json=pdrVersion,proto3" json:"pdr_version,omitempty"`
	Precedence        uint32                  `protobuf:"varint,3,opt,name=precedence,proto3" json:"precedence,omitempty"`
	PdrState          PdrState                `protobuf:"varint,4,opt,name=pdr_state,json=pdrState,proto3,enum=magma.lte.PdrState" json:"pdr_state,omitempty"`
	Pdi               *PDI                    `protobuf:"bytes,5,opt,name=pdi,proto3" json:"pdi,omitempty"`
	OHRemoDesc        uint32                  `protobuf:"varint,6,opt,name=o_h_remo_desc,json=oHRemoDesc,proto3" json:"o_h_remo_desc,omitempty"`
	ActivePredRule    string                  `protobuf:"bytes,7,opt,name=active_pred_rule,json=activePredRule,proto3" json:"active_pred_rule,omitempty"`
	SetGrFar          *SetGroupFAR            `protobuf:"bytes,8,opt,name=set_gr_far,json=setGrFar,proto3" json:"set_gr_far,omitempty"`
	DeactivateFlowReq *DeactivateFlowsRequest `protobuf:"bytes,9,opt,name=deactivate_flow_req,json=deactivateFlowReq,proto3" json:"deactivate_flow_req,omitempty"`
	ActivateFlowReq   *ActivateFlowsRequest   `protobuf:"bytes,10,opt,name=activate_flow_req,json=activateFlowReq,proto3" json:"activate_flow_req,omitempty"`
}

func (x *SetGroupPDR) Reset() {
	*x = SetGroupPDR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGroupPDR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGroupPDR) ProtoMessage() {}

func (x *SetGroupPDR) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGroupPDR.ProtoReflect.Descriptor instead.
func (*SetGroupPDR) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{32}
}

func (x *SetGroupPDR) GetPdrId() uint32 {
	if x != nil {
		return x.PdrId
	}
	return 0
}

func (x *SetGroupPDR) GetPdrVersion() int32 {
	if x != nil {
		return x.PdrVersion
	}
	return 0
}

func (x *SetGroupPDR) GetPrecedence() uint32 {
	if x != nil {
		return x.Precedence
	}
	return 0
}

func (x *SetGroupPDR) GetPdrState() PdrState {
	if x != nil {
		return x.PdrState
	}
	return PdrState_INSTALL
}

func (x *SetGroupPDR) GetPdi() *PDI {
	if x != nil {
		return x.Pdi
	}
	return nil
}

func (x *SetGroupPDR) GetOHRemoDesc() uint32 {
	if x != nil {
		return x.OHRemoDesc
	}
	return 0
}

func (x *SetGroupPDR) GetActivePredRule() string {
	if x != nil {
		return x.ActivePredRule
	}
	return ""
}

func (x *SetGroupPDR) GetSetGrFar() *SetGroupFAR {
	if x != nil {
		return x.SetGrFar
	}
	return nil
}

func (x *SetGroupPDR) GetDeactivateFlowReq() *DeactivateFlowsRequest {
	if x != nil {
		return x.DeactivateFlowReq
	}
	return nil
}

func (x *SetGroupPDR) GetActivateFlowReq() *ActivateFlowsRequest {
	if x != nil {
		return x.ActivateFlowReq
	}
	return nil
}

// FAR message Table 7.5.2.3-1: Create FAR IE within PFCP Session Establishment
type SetGroupFAR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FarId            uint32    `protobuf:"varint,1,opt,name=far_id,json=farId,proto3" json:"far_id,omitempty"`
	FarActionToApply []Action  `protobuf:"varint,2,rep,packed,name=far_action_to_apply,json=farActionToApply,proto3,enum=magma.lte.Action" json:"far_action_to_apply,omitempty"`
	FwdParm          *FwdParam `protobuf:"bytes,3,opt,name=fwd_parm,json=fwdParm,proto3" json:"fwd_parm,omitempty"`
	DuParam          *DupParam `protobuf:"bytes,4,opt,name=du_param,json=duParam,proto3" json:"du_param,omitempty"`
}

func (x *SetGroupFAR) Reset() {
	*x = SetGroupFAR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGroupFAR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGroupFAR) ProtoMessage() {}

func (x *SetGroupFAR) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGroupFAR.ProtoReflect.Descriptor instead.
func (*SetGroupFAR) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{33}
}

func (x *SetGroupFAR) GetFarId() uint32 {
	if x != nil {
		return x.FarId
	}
	return 0
}

func (x *SetGroupFAR) GetFarActionToApply() []Action {
	if x != nil {
		return x.FarActionToApply
	}
	return nil
}

func (x *SetGroupFAR) GetFwdParm() *FwdParam {
	if x != nil {
		return x.FwdParm
	}
	return nil
}

func (x *SetGroupFAR) GetDuParam() *DupParam {
	if x != nil {
		return x.DuParam
	}
	return nil
}

// SET message - SMF to Upf Session Requests
type SessionSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriberId   string         `protobuf:"bytes,1,opt,name=subscriber_id,json=subscriberId,proto3" json:"subscriber_id,omitempty"`
	LocalFTeid     uint32         `protobuf:"varint,2,opt,name=local_f_teid,json=localFTeid,proto3" json:"local_f_teid,omitempty"`
	SessionVersion uint32         `protobuf:"varint,3,opt,name=session_version,json=sessionVersion,proto3" json:"session_version,omitempty"`
	NodeId         *NodeID        `protobuf:"bytes,4,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	State          *FsmState      `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	SetGrPdr       []*SetGroupPDR `protobuf:"bytes,6,rep,name=set_gr_pdr,json=setGrPdr,proto3" json:"set_gr_pdr,omitempty"`
}

func (x *SessionSet) Reset() {
	*x = SessionSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionSet) ProtoMessage() {}

func (x *SessionSet) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionSet.ProtoReflect.Descriptor instead.
func (*SessionSet) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{34}
}

func (x *SessionSet) GetSubscriberId() string {
	if x != nil {
		return x.SubscriberId
	}
	return ""
}

func (x *SessionSet) GetLocalFTeid() uint32 {
	if x != nil {
		return x.LocalFTeid
	}
	return 0
}

func (x *SessionSet) GetSessionVersion() uint32 {
	if x != nil {
		return x.SessionVersion
	}
	return 0
}

func (x *SessionSet) GetNodeId() *NodeID {
	if x != nil {
		return x.NodeId
	}
	return nil
}

func (x *SessionSet) GetState() *FsmState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *SessionSet) GetSetGrPdr() []*SetGroupPDR {
	if x != nil {
		return x.SetGrPdr
	}
	return nil
}

// Response of SetSession Message from SMF.
// 15.8 (Sec 7.5.3.1) : PFCP Session Response format
type UPFSessionContextState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CauseInfo       *CauseIE                `protobuf:"bytes,1,opt,name=cause_info,json=causeInfo,proto3" json:"cause_info,omitempty"`
	SessionSnapshot *UPFSessionState        `protobuf:"bytes,2,opt,name=session_snapshot,json=sessionSnapshot,proto3" json:"session_snapshot,omitempty"`
	FailureRuleId   *FailureRuleInformation `protobuf:"bytes,3,opt,name=failure_rule_id,json=failureRuleId,proto3" json:"failure_rule_id,omitempty"` // The session and version which failed in UPF
}

func (x *UPFSessionContextState) Reset() {
	*x = UPFSessionContextState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UPFSessionContextState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UPFSessionContextState) ProtoMessage() {}

func (x *UPFSessionContextState) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UPFSessionContextState.ProtoReflect.Descriptor instead.
func (*UPFSessionContextState) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{35}
}

func (x *UPFSessionContextState) GetCauseInfo() *CauseIE {
	if x != nil {
		return x.CauseInfo
	}
	return nil
}

func (x *UPFSessionContextState) GetSessionSnapshot() *UPFSessionState {
	if x != nil {
		return x.SessionSnapshot
	}
	return nil
}

func (x *UPFSessionContextState) GetFailureRuleId() *FailureRuleInformation {
	if x != nil {
		return x.FailureRuleId
	}
	return nil
}

// 15.8,  Section 8.2.1
type CauseIE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CauseIe CauseIE_CauseValues `protobuf:"varint,1,opt,name=cause_ie,json=causeIe,proto3,enum=magma.lte.CauseIE_CauseValues" json:"cause_ie,omitempty"`
}

func (x *CauseIE) Reset() {
	*x = CauseIE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CauseIE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CauseIE) ProtoMessage() {}

func (x *CauseIE) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CauseIE.ProtoReflect.Descriptor instead.
func (*CauseIE) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{36}
}

func (x *CauseIE) GetCauseIe() CauseIE_CauseValues {
	if x != nil {
		return x.CauseIe
	}
	return CauseIE_RESERVED
}

// For now only PDR is encoded as it encompass FAR and QER.
type FailureRuleInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pdr []*OffendingIE `protobuf:"bytes,1,rep,name=pdr,proto3" json:"pdr,omitempty"`
}

func (x *FailureRuleInformation) Reset() {
	*x = FailureRuleInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailureRuleInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureRuleInformation) ProtoMessage() {}

func (x *FailureRuleInformation) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureRuleInformation.ProtoReflect.Descriptor instead.
func (*FailureRuleInformation) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{37}
}

func (x *FailureRuleInformation) GetPdr() []*OffendingIE {
	if x != nil {
		return x.Pdr
	}
	return nil
}

// Failure Report
type OffendingIE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier            uint32                 `protobuf:"varint,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Version               uint32                 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	QosEnforceRuleResults *ActivateFlowsResult   `protobuf:"bytes,3,opt,name=qos_enforce_rule_results,json=qosEnforceRuleResults,proto3" json:"qos_enforce_rule_results,omitempty"`
	DelQerResults         *DeactivateFlowsResult `protobuf:"bytes,4,opt,name=del_qer_results,json=delQerResults,proto3" json:"del_qer_results,omitempty"`
}

func (x *OffendingIE) Reset() {
	*x = OffendingIE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffendingIE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffendingIE) ProtoMessage() {}

func (x *OffendingIE) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffendingIE.ProtoReflect.Descriptor instead.
func (*OffendingIE) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{38}
}

func (x *OffendingIE) GetIdentifier() uint32 {
	if x != nil {
		return x.Identifier
	}
	return 0
}

func (x *OffendingIE) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *OffendingIE) GetQosEnforceRuleResults() *ActivateFlowsResult {
	if x != nil {
		return x.QosEnforceRuleResults
	}
	return nil
}

func (x *OffendingIE) GetDelQerResults() *DeactivateFlowsResult {
	if x != nil {
		return x.DelQerResults
	}
	return nil
}

// DOWNLINK FLOW
type IPFlowDL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetParams  uint32     `protobuf:"varint,1,opt,name=set_params,json=setParams,proto3" json:"set_params,omitempty"`
	TcpDstPort uint32     `protobuf:"varint,2,opt,name=tcp_dst_port,json=tcpDstPort,proto3" json:"tcp_dst_port,omitempty"`
	TcpSrcPort uint32     `protobuf:"varint,3,opt,name=tcp_src_port,json=tcpSrcPort,proto3" json:"tcp_src_port,omitempty"`
	UdpDstPort uint32     `protobuf:"varint,4,opt,name=udp_dst_port,json=udpDstPort,proto3" json:"udp_dst_port,omitempty"`
	UdpSrcPort uint32     `protobuf:"varint,5,opt,name=udp_src_port,json=udpSrcPort,proto3" json:"udp_src_port,omitempty"`
	IpProto    uint32     `protobuf:"varint,6,opt,name=ip_proto,json=ipProto,proto3" json:"ip_proto,omitempty"`
	SrcIp      *IPAddress `protobuf:"bytes,7,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	DestIp     *IPAddress `protobuf:"bytes,8,opt,name=dest_ip,json=destIp,proto3" json:"dest_ip,omitempty"`
	Precedence uint32     `protobuf:"varint,9,opt,name=precedence,proto3" json:"precedence,omitempty"`
}

func (x *IPFlowDL) Reset() {
	*x = IPFlowDL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPFlowDL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPFlowDL) ProtoMessage() {}

func (x *IPFlowDL) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPFlowDL.ProtoReflect.Descriptor instead.
func (*IPFlowDL) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{39}
}

func (x *IPFlowDL) GetSetParams() uint32 {
	if x != nil {
		return x.SetParams
	}
	return 0
}

func (x *IPFlowDL) GetTcpDstPort() uint32 {
	if x != nil {
		return x.TcpDstPort
	}
	return 0
}

func (x *IPFlowDL) GetTcpSrcPort() uint32 {
	if x != nil {
		return x.TcpSrcPort
	}
	return 0
}

func (x *IPFlowDL) GetUdpDstPort() uint32 {
	if x != nil {
		return x.UdpDstPort
	}
	return 0
}

func (x *IPFlowDL) GetUdpSrcPort() uint32 {
	if x != nil {
		return x.UdpSrcPort
	}
	return 0
}

func (x *IPFlowDL) GetIpProto() uint32 {
	if x != nil {
		return x.IpProto
	}
	return 0
}

func (x *IPFlowDL) GetSrcIp() *IPAddress {
	if x != nil {
		return x.SrcIp
	}
	return nil
}

func (x *IPFlowDL) GetDestIp() *IPAddress {
	if x != nil {
		return x.DestIp
	}
	return nil
}

func (x *IPFlowDL) GetPrecedence() uint32 {
	if x != nil {
		return x.Precedence
	}
	return 0
}

type UESessionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UeConfigState UESessionState_UEConfigState `protobuf:"varint,1,opt,name=ue_config_state,json=ueConfigState,proto3,enum=magma.lte.UESessionState_UEConfigState" json:"ue_config_state,omitempty"`
}

func (x *UESessionState) Reset() {
	*x = UESessionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UESessionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UESessionState) ProtoMessage() {}

func (x *UESessionState) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UESessionState.ProtoReflect.Descriptor instead.
func (*UESessionState) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{40}
}

func (x *UESessionState) GetUeConfigState() UESessionState_UEConfigState {
	if x != nil {
		return x.UeConfigState
	}
	return UESessionState_ACTIVE
}

// Message from MME to UPF
type UESessionSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriberId   *SubscriberID   `protobuf:"bytes,1,opt,name=subscriber_id,json=subscriberId,proto3" json:"subscriber_id,omitempty"`
	Precedence     uint32          `protobuf:"varint,2,opt,name=precedence,proto3" json:"precedence,omitempty"`
	UeIpv4Address  *IPAddress      `protobuf:"bytes,3,opt,name=ue_ipv4_address,json=ueIpv4Address,proto3" json:"ue_ipv4_address,omitempty"`
	UeIpv6Address  *IPAddress      `protobuf:"bytes,4,opt,name=ue_ipv6_address,json=ueIpv6Address,proto3" json:"ue_ipv6_address,omitempty"`
	EnbIpAddress   *IPAddress      `protobuf:"bytes,5,opt,name=enb_ip_address,json=enbIpAddress,proto3" json:"enb_ip_address,omitempty"`
	Apn            string          `protobuf:"bytes,6,opt,name=apn,proto3" json:"apn,omitempty"`
	Vlan           uint32          `protobuf:"varint,7,opt,name=vlan,proto3" json:"vlan,omitempty"`
	InTeid         uint32          `protobuf:"varint,8,opt,name=in_teid,json=inTeid,proto3" json:"in_teid,omitempty"`
	OutTeid        uint32          `protobuf:"varint,9,opt,name=out_teid,json=outTeid,proto3" json:"out_teid,omitempty"`
	UeSessionState *UESessionState `protobuf:"bytes,10,opt,name=ue_session_state,json=ueSessionState,proto3" json:"ue_session_state,omitempty"`
	IpFlowDl       *IPFlowDL       `protobuf:"bytes,13,opt,name=ip_flow_dl,json=ipFlowDl,proto3" json:"ip_flow_dl,omitempty"`
}

func (x *UESessionSet) Reset() {
	*x = UESessionSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UESessionSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UESessionSet) ProtoMessage() {}

func (x *UESessionSet) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UESessionSet.ProtoReflect.Descriptor instead.
func (*UESessionSet) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{41}
}

func (x *UESessionSet) GetSubscriberId() *SubscriberID {
	if x != nil {
		return x.SubscriberId
	}
	return nil
}

func (x *UESessionSet) GetPrecedence() uint32 {
	if x != nil {
		return x.Precedence
	}
	return 0
}

func (x *UESessionSet) GetUeIpv4Address() *IPAddress {
	if x != nil {
		return x.UeIpv4Address
	}
	return nil
}

func (x *UESessionSet) GetUeIpv6Address() *IPAddress {
	if x != nil {
		return x.UeIpv6Address
	}
	return nil
}

func (x *UESessionSet) GetEnbIpAddress() *IPAddress {
	if x != nil {
		return x.EnbIpAddress
	}
	return nil
}

func (x *UESessionSet) GetApn() string {
	if x != nil {
		return x.Apn
	}
	return ""
}

func (x *UESessionSet) GetVlan() uint32 {
	if x != nil {
		return x.Vlan
	}
	return 0
}

func (x *UESessionSet) GetInTeid() uint32 {
	if x != nil {
		return x.InTeid
	}
	return 0
}

func (x *UESessionSet) GetOutTeid() uint32 {
	if x != nil {
		return x.OutTeid
	}
	return 0
}

func (x *UESessionSet) GetUeSessionState() *UESessionState {
	if x != nil {
		return x.UeSessionState
	}
	return nil
}

func (x *UESessionSet) GetIpFlowDl() *IPFlowDL {
	if x != nil {
		return x.IpFlowDl
	}
	return nil
}

type UESessionContextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UeIpv4Address *IPAddress `protobuf:"bytes,1,opt,name=ue_ipv4_address,json=ueIpv4Address,proto3" json:"ue_ipv4_address,omitempty"`
	UeIpv6Address *IPAddress `protobuf:"bytes,2,opt,name=ue_ipv6_address,json=ueIpv6Address,proto3" json:"ue_ipv6_address,omitempty"`
	OperationType uint32     `protobuf:"varint,3,opt,name=operation_type,json=operationType,proto3" json:"operation_type,omitempty"`
	CauseInfo     *CauseIE   `protobuf:"bytes,4,opt,name=cause_info,json=causeInfo,proto3" json:"cause_info,omitempty"`
}

func (x *UESessionContextResponse) Reset() {
	*x = UESessionContextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UESessionContextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UESessionContextResponse) ProtoMessage() {}

func (x *UESessionContextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UESessionContextResponse.ProtoReflect.Descriptor instead.
func (*UESessionContextResponse) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{42}
}

func (x *UESessionContextResponse) GetUeIpv4Address() *IPAddress {
	if x != nil {
		return x.UeIpv4Address
	}
	return nil
}

func (x *UESessionContextResponse) GetUeIpv6Address() *IPAddress {
	if x != nil {
		return x.UeIpv6Address
	}
	return nil
}

func (x *UESessionContextResponse) GetOperationType() uint32 {
	if x != nil {
		return x.OperationType
	}
	return 0
}

func (x *UESessionContextResponse) GetCauseInfo() *CauseIE {
	if x != nil {
		return x.CauseInfo
	}
	return nil
}

type GetStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cookie     uint32 `protobuf:"varint,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	CookieMask uint32 `protobuf:"varint,2,opt,name=cookie_mask,json=cookieMask,proto3" json:"cookie_mask,omitempty"`
}

func (x *GetStatsRequest) Reset() {
	*x = GetStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_pipelined_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatsRequest) ProtoMessage() {}

func (x *GetStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_pipelined_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatsRequest.ProtoReflect.Descriptor instead.
func (*GetStatsRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_pipelined_proto_rawDescGZIP(), []int{43}
}

func (x *GetStatsRequest) GetCookie() uint32 {
	if x != nil {
		return x.Cookie
	}
	return 0
}

func (x *GetStatsRequest) GetCookieMask() uint32 {
	if x != nil {
		return x.CookieMask
	}
	return 0
}

var File_lte_protos_pipelined_proto protoreflect.FileDescriptor

var file_lte_protos_pipelined_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x1a, 0x19, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x14, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x61,
	0x70, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x64, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x64, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb9, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x75, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f,
	0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x51, 0x0a, 0x0d, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x2b, 0x0a, 0x13,
	0x53, 0x65, 0x74, 0x75, 0x70, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x22, 0x62, 0x0a, 0x11, 0x53, 0x65, 0x74,
	0x75, 0x70, 0x55, 0x45, 0x4d, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37,
	0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x55, 0x45, 0x4d,
	0x61, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x22, 0x67, 0x0a,
	0x12, 0x53, 0x65, 0x74, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x22, 0x7c, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x75, 0x70, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x0d, 0x71,
	0x75, 0x6f, 0x74, 0x61, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x22, 0x86, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x75, 0x70, 0x46, 0x6c,
	0x6f, 0x77, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x36, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x55, 0x54,
	0x44, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x50, 0x4f, 0x43, 0x48, 0x10, 0x02, 0x22, 0x84, 0x01,
	0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x32, 0x0a, 0x0a, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06,
	0x0a, 0x02, 0x47, 0x58, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x59, 0x10, 0x01, 0x12, 0x06,
	0x0a, 0x02, 0x4e, 0x34, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x49, 0x4c, 0x44, 0x43, 0x41,
	0x52, 0x44, 0x10, 0x03, 0x22, 0x56, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65,
	0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x29, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa6, 0x03, 0x0a,
	0x14, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x44, 0x52, 0x03, 0x73, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x43, 0x0a, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x3e,
	0x0a, 0x08, 0x61, 0x70, 0x6e, 0x5f, 0x61, 0x6d, 0x62, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x69,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x52, 0x07, 0x61, 0x70, 0x6e, 0x41, 0x6d, 0x62, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x73, 0x69, 0x73, 0x64, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6d, 0x73, 0x69,
	0x73, 0x64, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x70, 0x6c, 0x69,
	0x6e, 0x6b, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a,
	0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x46, 0x0a, 0x11, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x87, 0x03,
	0x0a, 0x16, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x44, 0x52, 0x03,
	0x73, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x12, 0x39,
	0x0a, 0x19, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x16, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x44, 0x72, 0x6f, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x70, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x27,
	0x0a, 0x0f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e,
	0x6b, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x44, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0xb4, 0x01, 0x0a, 0x0d, 0x52, 0x75, 0x6c, 0x65,
	0x4d, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52,
	0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x37, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x22, 0x5c,
	0x0a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3f, 0x0a, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x4d, 0x6f,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x90, 0x01, 0x0a,
	0x15, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f,
	0x77, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x36, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4f,
	0x55, 0x54, 0x44, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x50, 0x4f, 0x43, 0x48, 0x10, 0x02, 0x22,
	0xed, 0x02, 0x0a, 0x0b, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x72, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52,
	0x78, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x5f, 0x6d, 0x61, 0x63, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x72, 0x63, 0x4d, 0x61, 0x63, 0x12, 0x17, 0x0a,
	0x07, 0x64, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x6f,
	0x0a, 0x09, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x46,
	0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a,
	0x1b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1d,
	0x0a, 0x19, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x10, 0x0a,
	0x0c, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x22,
	0x7e, 0x0a, 0x0c, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x36, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x36, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4f,
	0x55, 0x54, 0x44, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x50, 0x4f, 0x43, 0x48, 0x10, 0x02, 0x22,
	0xcf, 0x01, 0x0a, 0x10, 0x55, 0x45, 0x4d, 0x61, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x44, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x73,
	0x69, 0x73, 0x64, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x73, 0x69, 0x73,
	0x64, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x70, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x4d, 0x61, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70,
	0x64, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x64, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xdb, 0x01, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x03, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49,
	0x44, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x46, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x34, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x10, 0x02, 0x22,
	0x5f, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x22, 0x72, 0x0a, 0x0f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x63, 0x72, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x63, 0x72, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x22, 0x5e, 0x0a, 0x13, 0x41, 0x6c, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x3b, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x52, 0x79, 0x75, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x6b, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x70, 0x6b, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x73,
	0x69, 0x22, 0x2e, 0x0a, 0x11, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x22, 0xf4, 0x01, 0x0a, 0x09, 0x46, 0x73, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x33, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x46, 0x73, 0x6d, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x73, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x08, 0x46, 0x73, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x21, 0x0a,
	0x1d, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x05,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4c, 0x45,
	0x41, 0x53, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x08, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x09, 0x12, 0x0c, 0x0a,
	0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x10, 0x0b, 0x22, 0x82, 0x01, 0x0a, 0x0a, 0x53, 0x64, 0x66,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x02, 0x66, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x02,
	0x66, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x74, 0x74, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x70, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x73, 0x70, 0x69, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x02, 0x66, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x64, 0x66, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x64, 0x66, 0x49, 0x64, 0x22, 0x6a, 0x0a,
	0x0e, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12,
	0x2d, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4e, 0x65, 0x77, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x29,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9f, 0x01, 0x0a, 0x0c, 0x46, 0x6c,
	0x6f, 0x77, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x65, 0x77, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x73, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x70,
	0x76, 0x34, 0x53, 0x72, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x64, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x70, 0x76, 0x34, 0x44, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x22, 0xcb, 0x01, 0x0a, 0x0c,
	0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x0c,
	0x72, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65,
	0x64, 0x41, 0x64, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x22, 0x47, 0x0a, 0x10, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x34, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x49, 0x50, 0x56, 0x36, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x50, 0x55, 0x52, 0x49, 0x10, 0x03, 0x12, 0x0a, 0x0a,
	0x06, 0x49, 0x50, 0x56, 0x34, 0x56, 0x36, 0x10, 0x04, 0x22, 0x67, 0x0a, 0x13, 0x4f, 0x75, 0x74,
	0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x15, 0x0a, 0x06, 0x6f, 0x5f, 0x74, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6f, 0x54, 0x65, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x67, 0x6e, 0x62, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67,
	0x6e, 0x62, 0x49, 0x70, 0x76, 0x34, 0x41, 0x64, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74,
	0x4e, 0x6f, 0x22, 0xcc, 0x01, 0x0a, 0x08, 0x46, 0x77, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x65, 0x73, 0x74, 0x49, 0x66, 0x61, 0x63, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x40, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x72, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x72, 0x48, 0x65, 0x61, 0x64, 0x43,
	0x72, 0x22, 0x29, 0x0a, 0x08, 0x44, 0x75, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x64, 0x65, 0x73, 0x74, 0x49, 0x66, 0x61, 0x63, 0x65, 0x22, 0xf4, 0x01, 0x0a,
	0x03, 0x50, 0x44, 0x49, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x72, 0x63,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x66, 0x5f, 0x74, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x54, 0x65, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e,
	0x65, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x09, 0x75, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x75, 0x65, 0x49, 0x70, 0x41, 0x64, 0x72, 0x12, 0x18, 0x0a, 0x08, 0x74, 0x72,
	0x5f, 0x65, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x72,
	0x45, 0x70, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0b, 0x73, 0x64, 0x66, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x64, 0x66, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x0a, 0x73, 0x64, 0x66, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x22, 0xdc, 0x03, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x50, 0x44, 0x52, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x64, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x64, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x64,
	0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x70, 0x64, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x70,
	0x64, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x50, 0x64, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x64, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a,
	0x03, 0x70, 0x64, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x50, 0x44, 0x49, 0x52, 0x03, 0x70, 0x64, 0x69, 0x12,
	0x21, 0x0a, 0x0d, 0x6f, 0x5f, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x48, 0x52, 0x65, 0x6d, 0x6f, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x65,
	0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x0a,
	0x73, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x5f, 0x66, 0x61, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x41, 0x52, 0x52, 0x08, 0x73, 0x65, 0x74, 0x47, 0x72, 0x46,
	0x61, 0x72, 0x12, 0x51, 0x0a, 0x13, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x11, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x46, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x71, 0x12, 0x4b, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x71, 0x22, 0xc6, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46,
	0x41, 0x52, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x66, 0x61, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x13, 0x66, 0x61, 0x72,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x66, 0x61, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x2e, 0x0a, 0x08, 0x66,
	0x77, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x46, 0x77, 0x64, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x52, 0x07, 0x66, 0x77, 0x64, 0x50, 0x61, 0x72, 0x6d, 0x12, 0x2e, 0x0a, 0x08, 0x64,
	0x75, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x44, 0x75, 0x70, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x52, 0x07, 0x64, 0x75, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x8a, 0x02, 0x0a, 0x0a,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x66, 0x5f, 0x74, 0x65, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x54, 0x65, 0x69,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x07, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x46, 0x73, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x5f, 0x70, 0x64, 0x72,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x44, 0x52, 0x52, 0x08,
	0x73, 0x65, 0x74, 0x47, 0x72, 0x50, 0x64, 0x72, 0x22, 0xdd, 0x01, 0x0a, 0x16, 0x55, 0x50, 0x46,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x49, 0x45, 0x52, 0x09, 0x63, 0x61, 0x75,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x55, 0x50, 0x46,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x49, 0x0a,
	0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x9b, 0x04, 0x0a, 0x07, 0x43, 0x61, 0x75,
	0x73, 0x65, 0x49, 0x45, 0x12, 0x39, 0x0a, 0x08, 0x63, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x49, 0x45, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x07, 0x63, 0x61, 0x75, 0x73, 0x65, 0x49, 0x65, 0x22,
	0xd4, 0x03, 0x0a, 0x0b, 0x43, 0x61, 0x75, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52,
	0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x4e, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x59, 0x5f,
	0x49, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16,
	0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x49, 0x45, 0x5f, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16,
	0x4d, 0x41, 0x4e, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x45, 0x5f, 0x49, 0x4e, 0x43,
	0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x08, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x46, 0x5f, 0x54, 0x45, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x23, 0x0a,
	0x1f, 0x4e, 0x4f, 0x5f, 0x45, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x5f,
	0x50, 0x46, 0x43, 0x50, 0x5f, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x0a, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x0b, 0x12, 0x1c, 0x0a,
	0x18, 0x50, 0x46, 0x43, 0x50, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x5f, 0x43,
	0x4f, 0x4e, 0x47, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16, 0x4e,
	0x4f, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x56, 0x41, 0x49,
	0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0d, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x0f, 0x22, 0x42, 0x0a, 0x16, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x03, 0x70, 0x64, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x49, 0x45, 0x52, 0x03, 0x70, 0x64, 0x72, 0x22, 0xea, 0x01, 0x0a, 0x0b, 0x4f,
	0x66, 0x66, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x45, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x18, 0x71, 0x6f, 0x73, 0x5f, 0x65, 0x6e, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x15, 0x71, 0x6f, 0x73, 0x45, 0x6e, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x48, 0x0a,
	0x0f, 0x64, 0x65, 0x6c, 0x5f, 0x71, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f,
	0x77, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x51, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xc8, 0x02, 0x0a, 0x08, 0x49, 0x50, 0x46, 0x6c,
	0x6f, 0x77, 0x44, 0x4c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x63, 0x70, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x63, 0x70, 0x44, 0x73,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x63, 0x70, 0x5f, 0x73, 0x72, 0x63,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x63, 0x70,
	0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x64, 0x70, 0x5f, 0x64,
	0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75,
	0x64, 0x70, 0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x64, 0x70,
	0x5f, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x75, 0x64, 0x70, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x05, 0x73, 0x72,
	0x63, 0x49, 0x70, 0x12, 0x2d, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x06, 0x64, 0x65, 0x73, 0x74,
	0x49, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x0e, 0x55, 0x45, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x0f, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x55, 0x45, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x45, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x78, 0x0a, 0x0d, 0x55, 0x45, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45,
	0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c,
	0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x04, 0x12,
	0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x05,
	0x22, 0xf6, 0x03, 0x0a, 0x0c, 0x55, 0x45, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x12, 0x3c, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49,
	0x44, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x3c, 0x0a, 0x0f, 0x75, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d,
	0x75, 0x65, 0x49, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a,
	0x0f, 0x75, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x75, 0x65,
	0x49, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x0e, 0x65,
	0x6e, 0x62, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x65, 0x6e, 0x62, 0x49, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6c, 0x61,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x69, 0x6e, 0x54, 0x65, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x65,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x54, 0x65, 0x69,
	0x64, 0x12, 0x43, 0x0a, 0x10, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x55, 0x45, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x75, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x64, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x49, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x4c, 0x52,
	0x08, 0x69, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x6c, 0x22, 0xf0, 0x01, 0x0a, 0x18, 0x55, 0x45,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0f, 0x75, 0x65, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x49, 0x50, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x75, 0x65, 0x49, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x0f, 0x75, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x0d, 0x75, 0x65, 0x49, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x61, 0x75,
	0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x49,
	0x45, 0x52, 0x09, 0x63, 0x61, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4a, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x2a, 0x3a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x46, 0x4f, 0x52, 0x57, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x55, 0x46, 0x46, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x43, 0x50, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x55,
	0x50, 0x4c, 0x10, 0x04, 0x2a, 0x37, 0x0a, 0x13, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4f, 0x52, 0x45, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x47, 0x69, 0x4c, 0x41, 0x4e, 0x10, 0x02, 0x2a, 0x2d, 0x0a,
	0x08, 0x50, 0x64, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x02, 0x32, 0x85, 0x0b, 0x0a,
	0x09, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x58, 0x0a, 0x17, 0x53, 0x65,
	0x74, 0x75, 0x70, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x53, 0x4d, 0x46, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x1a, 0x21, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x55, 0x50, 0x46, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x00, 0x12, 0x50, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x1d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0f, 0x44, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x21, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x41, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63,
	0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x1a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x1a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x16, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0a,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x16, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a,
	0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x16, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x75, 0x70, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x2c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0f, 0x53, 0x65,
	0x74, 0x75, 0x70, 0x55, 0x45, 0x4d, 0x61, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x1c, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x55,
	0x45, 0x4d, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x46, 0x6c, 0x6f,
	0x77, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0c, 0x41, 0x64,
	0x64, 0x55, 0x45, 0x4d, 0x61, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x1b, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x55, 0x45, 0x4d, 0x61, 0x63, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x49, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x45, 0x4d, 0x61,
	0x63, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x1b, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x55, 0x45, 0x4d, 0x61, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a,
	0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x50, 0x46, 0x49, 0x58, 0x46, 0x6c, 0x6f, 0x77,
	0x12, 0x1b, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x55, 0x45, 0x4d,
	0x61, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72,
	0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x45, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x55, 0x45, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x1a,
	0x23, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x55, 0x45, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1b, 0x5a, 0x19, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f, 0x6c, 0x74,
	0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lte_protos_pipelined_proto_rawDescOnce sync.Once
	file_lte_protos_pipelined_proto_rawDescData = file_lte_protos_pipelined_proto_rawDesc
)

func file_lte_protos_pipelined_proto_rawDescGZIP() []byte {
	file_lte_protos_pipelined_proto_rawDescOnce.Do(func() {
		file_lte_protos_pipelined_proto_rawDescData = protoimpl.X.CompressGZIP(file_lte_protos_pipelined_proto_rawDescData)
	})
	return file_lte_protos_pipelined_proto_rawDescData
}

var file_lte_protos_pipelined_proto_enumTypes = make([]protoimpl.EnumInfo, 14)
var file_lte_protos_pipelined_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_lte_protos_pipelined_proto_goTypes = []interface{}{
	(Action)(0),                               // 0: magma.lte.Action
	(SourceInterfaceType)(0),                  // 1: magma.lte.SourceInterfaceType
	(PdrState)(0),                             // 2: magma.lte.PdrState
	(SetupFlowsResult_Result)(0),              // 3: magma.lte.SetupFlowsResult.Result
	(RequestOriginType_OriginType)(0),         // 4: magma.lte.RequestOriginType.OriginType
	(RuleModResult_Result)(0),                 // 5: magma.lte.RuleModResult.Result
	(DeactivateFlowsResult_Result)(0),         // 6: magma.lte.DeactivateFlowsResult.Result
	(FlowRequest_FlowState)(0),                // 7: magma.lte.FlowRequest.FlowState
	(FlowResponse_Result)(0),                  // 8: magma.lte.FlowResponse.Result
	(SubscriberQuotaUpdate_Type)(0),           // 9: magma.lte.SubscriberQuotaUpdate.Type
	(FsmState_FsmState)(0),                    // 10: magma.lte.Fsm_state.FsmState
	(RedirectInfo_RedirectAddrType)(0),        // 11: magma.lte.RedirectInfo.RedirectAddrType
	(CauseIE_CauseValues)(0),                  // 12: magma.lte.CauseIE.CauseValues
	(UESessionState_UEConfigState)(0),         // 13: magma.lte.UESessionState.UEConfigState
	(*SetupFlowsRequest)(nil),                 // 14: magma.lte.SetupFlowsRequest
	(*SetupDefaultRequest)(nil),               // 15: magma.lte.SetupDefaultRequest
	(*SetupUEMacRequest)(nil),                 // 16: magma.lte.SetupUEMacRequest
	(*SetupPolicyRequest)(nil),                // 17: magma.lte.SetupPolicyRequest
	(*SetupQuotaRequest)(nil),                 // 18: magma.lte.SetupQuotaRequest
	(*SetupFlowsResult)(nil),                  // 19: magma.lte.SetupFlowsResult
	(*RequestOriginType)(nil),                 // 20: magma.lte.RequestOriginType
	(*VersionedPolicy)(nil),                   // 21: magma.lte.VersionedPolicy
	(*ActivateFlowsRequest)(nil),              // 22: magma.lte.ActivateFlowsRequest
	(*VersionedPolicyID)(nil),                 // 23: magma.lte.VersionedPolicyID
	(*DeactivateFlowsRequest)(nil),            // 24: magma.lte.DeactivateFlowsRequest
	(*RuleModResult)(nil),                     // 25: magma.lte.RuleModResult
	(*ActivateFlowsResult)(nil),               // 26: magma.lte.ActivateFlowsResult
	(*DeactivateFlowsResult)(nil),             // 27: magma.lte.DeactivateFlowsResult
	(*FlowRequest)(nil),                       // 28: magma.lte.FlowRequest
	(*FlowResponse)(nil),                      // 29: magma.lte.FlowResponse
	(*UEMacFlowRequest)(nil),                  // 30: magma.lte.UEMacFlowRequest
	(*SubscriberQuotaUpdate)(nil),             // 31: magma.lte.SubscriberQuotaUpdate
	(*UpdateSubscriberQuotaStateRequest)(nil), // 32: magma.lte.UpdateSubscriberQuotaStateRequest
	(*TableAssignment)(nil),                   // 33: magma.lte.TableAssignment
	(*AllTableAssignments)(nil),               // 34: magma.lte.AllTableAssignments
	(*SerializedRyuPacket)(nil),               // 35: magma.lte.SerializedRyuPacket
	(*PacketDropTableId)(nil),                 // 36: magma.lte.PacketDropTableId
	(*FsmState)(nil),                          // 37: magma.lte.Fsm_state
	(*SdfFilters)(nil),                        // 38: magma.lte.SdfFilters
	(*FlowDescriptor)(nil),                    // 39: magma.lte.FlowDescriptor
	(*FlowMatchNew)(nil),                      // 40: magma.lte.FlowMatchNew
	(*RedirectInfo)(nil),                      // 41: magma.lte.RedirectInfo
	(*OuterHeaderCreation)(nil),               // 42: magma.lte.OuterHeaderCreation
	(*FwdParam)(nil),                          // 43: magma.lte.FwdParam
	(*DupParam)(nil),                          // 44: magma.lte.DupParam
	(*PDI)(nil),                               // 45: magma.lte.PDI
	(*SetGroupPDR)(nil),                       // 46: magma.lte.SetGroupPDR
	(*SetGroupFAR)(nil),                       // 47: magma.lte.SetGroupFAR
	(*SessionSet)(nil),                        // 48: magma.lte.SessionSet
	(*UPFSessionContextState)(nil),            // 49: magma.lte.UPFSessionContextState
	(*CauseIE)(nil),                           // 50: magma.lte.CauseIE
	(*FailureRuleInformation)(nil),            // 51: magma.lte.FailureRuleInformation
	(*OffendingIE)(nil),                       // 52: magma.lte.OffendingIE
	(*IPFlowDL)(nil),                          // 53: magma.lte.IPFlowDL
	(*UESessionState)(nil),                    // 54: magma.lte.UESessionState
	(*UESessionSet)(nil),                      // 55: magma.lte.UESessionSet
	(*UESessionContextResponse)(nil),          // 56: magma.lte.UESessionContextResponse
	(*GetStatsRequest)(nil),                   // 57: magma.lte.GetStatsRequest
	(*PolicyRule)(nil),                        // 58: magma.lte.PolicyRule
	(*SubscriberID)(nil),                      // 59: magma.lte.SubscriberID
	(*AggregatedMaximumBitrate)(nil),          // 60: magma.lte.AggregatedMaximumBitrate
	(*FlowMatch)(nil),                         // 61: magma.lte.FlowMatch
	(*NodeID)(nil),                            // 62: magma.lte.NodeID
	(*UPFSessionState)(nil),                   // 63: magma.lte.UPFSessionState
	(*IPAddress)(nil),                         // 64: magma.lte.IPAddress
	(*protos.Void)(nil),                       // 65: magma.orc8r.Void
	(*RuleRecordTable)(nil),                   // 66: magma.lte.RuleRecordTable
}
var file_lte_protos_pipelined_proto_depIdxs = []int32{
	22, // 0: magma.lte.SetupFlowsRequest.requests:type_name -> magma.lte.ActivateFlowsRequest
	32, // 1: magma.lte.SetupFlowsRequest.quota_updates:type_name -> magma.lte.UpdateSubscriberQuotaStateRequest
	30, // 2: magma.lte.SetupUEMacRequest.requests:type_name -> magma.lte.UEMacFlowRequest
	22, // 3: magma.lte.SetupPolicyRequest.requests:type_name -> magma.lte.ActivateFlowsRequest
	32, // 4: magma.lte.SetupQuotaRequest.quota_updates:type_name -> magma.lte.UpdateSubscriberQuotaStateRequest
	3,  // 5: magma.lte.SetupFlowsResult.result:type_name -> magma.lte.SetupFlowsResult.Result
	4,  // 6: magma.lte.RequestOriginType.type:type_name -> magma.lte.RequestOriginType.OriginType
	58, // 7: magma.lte.VersionedPolicy.rule:type_name -> magma.lte.PolicyRule
	59, // 8: magma.lte.ActivateFlowsRequest.sid:type_name -> magma.lte.SubscriberID
	20, // 9: magma.lte.ActivateFlowsRequest.request_origin:type_name -> magma.lte.RequestOriginType
	60, // 10: magma.lte.ActivateFlowsRequest.apn_ambr:type_name -> magma.lte.AggregatedMaximumBitrate
	21, // 11: magma.lte.ActivateFlowsRequest.policies:type_name -> magma.lte.VersionedPolicy
	59, // 12: magma.lte.DeactivateFlowsRequest.sid:type_name -> magma.lte.SubscriberID
	20, // 13: magma.lte.DeactivateFlowsRequest.request_origin:type_name -> magma.lte.RequestOriginType
	23, // 14: magma.lte.DeactivateFlowsRequest.policies:type_name -> magma.lte.VersionedPolicyID
	5,  // 15: magma.lte.RuleModResult.result:type_name -> magma.lte.RuleModResult.Result
	25, // 16: magma.lte.ActivateFlowsResult.policy_results:type_name -> magma.lte.RuleModResult
	6,  // 17: magma.lte.DeactivateFlowsResult.result:type_name -> magma.lte.DeactivateFlowsResult.Result
	61, // 18: magma.lte.FlowRequest.match:type_name -> magma.lte.FlowMatch
	7,  // 19: magma.lte.FlowRequest.state:type_name -> magma.lte.FlowRequest.FlowState
	8,  // 20: magma.lte.FlowResponse.result:type_name -> magma.lte.FlowResponse.Result
	59, // 21: magma.lte.UEMacFlowRequest.sid:type_name -> magma.lte.SubscriberID
	59, // 22: magma.lte.SubscriberQuotaUpdate.sid:type_name -> magma.lte.SubscriberID
	9,  // 23: magma.lte.SubscriberQuotaUpdate.update_type:type_name -> magma.lte.SubscriberQuotaUpdate.Type
	31, // 24: magma.lte.UpdateSubscriberQuotaStateRequest.updates:type_name -> magma.lte.SubscriberQuotaUpdate
	33, // 25: magma.lte.AllTableAssignments.table_assignments:type_name -> magma.lte.TableAssignment
	10, // 26: magma.lte.Fsm_state.state:type_name -> magma.lte.Fsm_state.FsmState
	39, // 27: magma.lte.SdfFilters.fd:type_name -> magma.lte.FlowDescriptor
	40, // 28: magma.lte.FlowDescriptor.match:type_name -> magma.lte.FlowMatchNew
	0,  // 29: magma.lte.FlowDescriptor.action:type_name -> magma.lte.Action
	11, // 30: magma.lte.RedirectInfo.red_add_type:type_name -> magma.lte.RedirectInfo.RedirectAddrType
	41, // 31: magma.lte.FwdParam.redirect_info:type_name -> magma.lte.RedirectInfo
	42, // 32: magma.lte.FwdParam.outr_head_cr:type_name -> magma.lte.OuterHeaderCreation
	38, // 33: magma.lte.PDI.sdf_filters:type_name -> magma.lte.SdfFilters
	2,  // 34: magma.lte.SetGroupPDR.pdr_state:type_name -> magma.lte.PdrState
	45, // 35: magma.lte.SetGroupPDR.pdi:type_name -> magma.lte.PDI
	47, // 36: magma.lte.SetGroupPDR.set_gr_far:type_name -> magma.lte.SetGroupFAR
	24, // 37: magma.lte.SetGroupPDR.deactivate_flow_req:type_name -> magma.lte.DeactivateFlowsRequest
	22, // 38: magma.lte.SetGroupPDR.activate_flow_req:type_name -> magma.lte.ActivateFlowsRequest
	0,  // 39: magma.lte.SetGroupFAR.far_action_to_apply:type_name -> magma.lte.Action
	43, // 40: magma.lte.SetGroupFAR.fwd_parm:type_name -> magma.lte.FwdParam
	44, // 41: magma.lte.SetGroupFAR.du_param:type_name -> magma.lte.DupParam
	62, // 42: magma.lte.SessionSet.node_id:type_name -> magma.lte.NodeID
	37, // 43: magma.lte.SessionSet.state:type_name -> magma.lte.Fsm_state
	46, // 44: magma.lte.SessionSet.set_gr_pdr:type_name -> magma.lte.SetGroupPDR
	50, // 45: magma.lte.UPFSessionContextState.cause_info:type_name -> magma.lte.CauseIE
	63, // 46: magma.lte.UPFSessionContextState.session_snapshot:type_name -> magma.lte.UPFSessionState
	51, // 47: magma.lte.UPFSessionContextState.failure_rule_id:type_name -> magma.lte.FailureRuleInformation
	12, // 48: magma.lte.CauseIE.cause_ie:type_name -> magma.lte.CauseIE.CauseValues
	52, // 49: magma.lte.FailureRuleInformation.pdr:type_name -> magma.lte.OffendingIE
	26, // 50: magma.lte.OffendingIE.qos_enforce_rule_results:type_name -> magma.lte.ActivateFlowsResult
	27, // 51: magma.lte.OffendingIE.del_qer_results:type_name -> magma.lte.DeactivateFlowsResult
	64, // 52: magma.lte.IPFlowDL.src_ip:type_name -> magma.lte.IPAddress
	64, // 53: magma.lte.IPFlowDL.dest_ip:type_name -> magma.lte.IPAddress
	13, // 54: magma.lte.UESessionState.ue_config_state:type_name -> magma.lte.UESessionState.UEConfigState
	59, // 55: magma.lte.UESessionSet.subscriber_id:type_name -> magma.lte.SubscriberID
	64, // 56: magma.lte.UESessionSet.ue_ipv4_address:type_name -> magma.lte.IPAddress
	64, // 57: magma.lte.UESessionSet.ue_ipv6_address:type_name -> magma.lte.IPAddress
	64, // 58: magma.lte.UESessionSet.enb_ip_address:type_name -> magma.lte.IPAddress
	54, // 59: magma.lte.UESessionSet.ue_session_state:type_name -> magma.lte.UESessionState
	53, // 60: magma.lte.UESessionSet.ip_flow_dl:type_name -> magma.lte.IPFlowDL
	64, // 61: magma.lte.UESessionContextResponse.ue_ipv4_address:type_name -> magma.lte.IPAddress
	64, // 62: magma.lte.UESessionContextResponse.ue_ipv6_address:type_name -> magma.lte.IPAddress
	50, // 63: magma.lte.UESessionContextResponse.cause_info:type_name -> magma.lte.CauseIE
	15, // 64: magma.lte.Pipelined.SetupDefaultControllers:input_type -> magma.lte.SetupDefaultRequest
	48, // 65: magma.lte.Pipelined.SetSMFSessions:input_type -> magma.lte.SessionSet
	17, // 66: magma.lte.Pipelined.SetupPolicyFlows:input_type -> magma.lte.SetupPolicyRequest
	22, // 67: magma.lte.Pipelined.ActivateFlows:input_type -> magma.lte.ActivateFlowsRequest
	24, // 68: magma.lte.Pipelined.DeactivateFlows:input_type -> magma.lte.DeactivateFlowsRequest
	65, // 69: magma.lte.Pipelined.GetPolicyUsage:input_type -> magma.orc8r.Void
	57, // 70: magma.lte.Pipelined.GetStats:input_type -> magma.lte.GetStatsRequest
	28, // 71: magma.lte.Pipelined.CreateFlow:input_type -> magma.lte.FlowRequest
	28, // 72: magma.lte.Pipelined.RemoveFlow:input_type -> magma.lte.FlowRequest
	28, // 73: magma.lte.Pipelined.UpdateFlowStats:input_type -> magma.lte.FlowRequest
	18, // 74: magma.lte.Pipelined.SetupQuotaFlows:input_type -> magma.lte.SetupQuotaRequest
	32, // 75: magma.lte.Pipelined.UpdateSubscriberQuotaState:input_type -> magma.lte.UpdateSubscriberQuotaStateRequest
	16, // 76: magma.lte.Pipelined.SetupUEMacFlows:input_type -> magma.lte.SetupUEMacRequest
	30, // 77: magma.lte.Pipelined.AddUEMacFlow:input_type -> magma.lte.UEMacFlowRequest
	30, // 78: magma.lte.Pipelined.DeleteUEMacFlow:input_type -> magma.lte.UEMacFlowRequest
	30, // 79: magma.lte.Pipelined.UpdateIPFIXFlow:input_type -> magma.lte.UEMacFlowRequest
	65, // 80: magma.lte.Pipelined.GetAllTableAssignments:input_type -> magma.orc8r.Void
	55, // 81: magma.lte.Pipelined.UpdateUEState:input_type -> magma.lte.UESessionSet
	19, // 82: magma.lte.Pipelined.SetupDefaultControllers:output_type -> magma.lte.SetupFlowsResult
	49, // 83: magma.lte.Pipelined.SetSMFSessions:output_type -> magma.lte.UPFSessionContextState
	19, // 84: magma.lte.Pipelined.SetupPolicyFlows:output_type -> magma.lte.SetupFlowsResult
	26, // 85: magma.lte.Pipelined.ActivateFlows:output_type -> magma.lte.ActivateFlowsResult
	27, // 86: magma.lte.Pipelined.DeactivateFlows:output_type -> magma.lte.DeactivateFlowsResult
	66, // 87: magma.lte.Pipelined.GetPolicyUsage:output_type -> magma.lte.RuleRecordTable
	66, // 88: magma.lte.Pipelined.GetStats:output_type -> magma.lte.RuleRecordTable
	29, // 89: magma.lte.Pipelined.CreateFlow:output_type -> magma.lte.FlowResponse
	29, // 90: magma.lte.Pipelined.RemoveFlow:output_type -> magma.lte.FlowResponse
	29, // 91: magma.lte.Pipelined.UpdateFlowStats:output_type -> magma.lte.FlowResponse
	19, // 92: magma.lte.Pipelined.SetupQuotaFlows:output_type -> magma.lte.SetupFlowsResult
	29, // 93: magma.lte.Pipelined.UpdateSubscriberQuotaState:output_type -> magma.lte.FlowResponse
	19, // 94: magma.lte.Pipelined.SetupUEMacFlows:output_type -> magma.lte.SetupFlowsResult
	29, // 95: magma.lte.Pipelined.AddUEMacFlow:output_type -> magma.lte.FlowResponse
	29, // 96: magma.lte.Pipelined.DeleteUEMacFlow:output_type -> magma.lte.FlowResponse
	29, // 97: magma.lte.Pipelined.UpdateIPFIXFlow:output_type -> magma.lte.FlowResponse
	34, // 98: magma.lte.Pipelined.GetAllTableAssignments:output_type -> magma.lte.AllTableAssignments
	56, // 99: magma.lte.Pipelined.UpdateUEState:output_type -> magma.lte.UESessionContextResponse
	82, // [82:100] is the sub-list for method output_type
	64, // [64:82] is the sub-list for method input_type
	64, // [64:64] is the sub-list for extension type_name
	64, // [64:64] is the sub-list for extension extendee
	0,  // [0:64] is the sub-list for field type_name
}

func init() { file_lte_protos_pipelined_proto_init() }
func file_lte_protos_pipelined_proto_init() {
	if File_lte_protos_pipelined_proto != nil {
		return
	}
	file_lte_protos_apn_proto_init()
	file_lte_protos_policydb_proto_init()
	file_lte_protos_session_manager_proto_init()
	file_lte_protos_subscriberdb_proto_init()
	file_lte_protos_mobilityd_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_lte_protos_pipelined_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetupFlowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetupDefaultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetupUEMacRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetupPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetupQuotaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetupFlowsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestOriginType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionedPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateFlowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionedPolicyID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivateFlowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleModResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateFlowsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivateFlowsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UEMacFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriberQuotaUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubscriberQuotaStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableAssignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllTableAssignments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SerializedRyuPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketDropTableId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FsmState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdfFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowMatchNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedirectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OuterHeaderCreation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FwdParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DupParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PDI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGroupPDR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGroupFAR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UPFSessionContextState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CauseIE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailureRuleInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffendingIE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPFlowDL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UESessionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UESessionSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UESessionContextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_pipelined_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lte_protos_pipelined_proto_rawDesc,
			NumEnums:      14,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lte_protos_pipelined_proto_goTypes,
		DependencyIndexes: file_lte_protos_pipelined_proto_depIdxs,
		EnumInfos:         file_lte_protos_pipelined_proto_enumTypes,
		MessageInfos:      file_lte_protos_pipelined_proto_msgTypes,
	}.Build()
	File_lte_protos_pipelined_proto = out.File
	file_lte_protos_pipelined_proto_rawDesc = nil
	file_lte_protos_pipelined_proto_goTypes = nil
	file_lte_protos_pipelined_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PipelinedClient is the client API for Pipelined service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PipelinedClient interface {
	// Setup pipelined basic controllers
	SetupDefaultControllers(ctx context.Context, in *SetupDefaultRequest, opts ...grpc.CallOption) (*SetupFlowsResult, error)
	SetSMFSessions(ctx context.Context, in *SessionSet, opts ...grpc.CallOption) (*UPFSessionContextState, error)
	// Setup flows for subscribers (used on restarts)
	SetupPolicyFlows(ctx context.Context, in *SetupPolicyRequest, opts ...grpc.CallOption) (*SetupFlowsResult, error)
	// Activate flows for a subscriber based on predefined flow templates
	ActivateFlows(ctx context.Context, in *ActivateFlowsRequest, opts ...grpc.CallOption) (*ActivateFlowsResult, error)
	// Deactivate flows for a subscriber
	DeactivateFlows(ctx context.Context, in *DeactivateFlowsRequest, opts ...grpc.CallOption) (*DeactivateFlowsResult, error)
	// Get policy usage stats
	GetPolicyUsage(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*RuleRecordTable, error)
	GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*RuleRecordTable, error)
	// Add new dpi flow
	CreateFlow(ctx context.Context, in *FlowRequest, opts ...grpc.CallOption) (*FlowResponse, error)
	// Remove dpi flow
	RemoveFlow(ctx context.Context, in *FlowRequest, opts ...grpc.CallOption) (*FlowResponse, error)
	// Update flow stats
	UpdateFlowStats(ctx context.Context, in *FlowRequest, opts ...grpc.CallOption) (*FlowResponse, error)
	// Setup subscribers flows (used on restarts)
	SetupQuotaFlows(ctx context.Context, in *SetupQuotaRequest, opts ...grpc.CallOption) (*SetupFlowsResult, error)
	// Synchronize subscribers quota check flows
	UpdateSubscriberQuotaState(ctx context.Context, in *UpdateSubscriberQuotaStateRequest, opts ...grpc.CallOption) (*FlowResponse, error)
	// Setup subscribers flows (used on restarts)
	SetupUEMacFlows(ctx context.Context, in *SetupUEMacRequest, opts ...grpc.CallOption) (*SetupFlowsResult, error)
	// Add a flow for a subscriber by matching the provided UE MAC address
	AddUEMacFlow(ctx context.Context, in *UEMacFlowRequest, opts ...grpc.CallOption) (*FlowResponse, error)
	// Delete a flow for a subscriber by matching the provided UE MAC address
	DeleteUEMacFlow(ctx context.Context, in *UEMacFlowRequest, opts ...grpc.CallOption) (*FlowResponse, error)
	// Update subscriber IPFIX flows
	UpdateIPFIXFlow(ctx context.Context, in *UEMacFlowRequest, opts ...grpc.CallOption) (*FlowResponse, error)
	// Get the flow table assignment for all apps ordered by main table number
	// and name
	GetAllTableAssignments(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*AllTableAssignments, error)
	UpdateUEState(ctx context.Context, in *UESessionSet, opts ...grpc.CallOption) (*UESessionContextResponse, error)
}

type pipelinedClient struct {
	cc grpc.ClientConnInterface
}

func NewPipelinedClient(cc grpc.ClientConnInterface) PipelinedClient {
	return &pipelinedClient{cc}
}

func (c *pipelinedClient) SetupDefaultControllers(ctx context.Context, in *SetupDefaultRequest, opts ...grpc.CallOption) (*SetupFlowsResult, error) {
	out := new(SetupFlowsResult)
	err := c.cc.Invoke(ctx, "/magma.lte.Pipelined/SetupDefaultControllers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinedClient) SetSMFSessions(ctx context.Context, in *SessionSet, opts ...grpc.CallOption) (*UPFSessionContextState, error) {
	out := new(UPFSessionContextState)
	err := c.cc.Invoke(ctx, "/magma.lte.Pipelined/SetSMFSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinedClient) SetupPolicyFlows(ctx context.Context, in *SetupPolicyRequest, opts ...grpc.CallOption) (*SetupFlowsResult, error) {
	out := new(SetupFlowsResult)
	err := c.cc.Invoke(ctx, "/magma.lte.Pipelined/SetupPolicyFlows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinedClient) ActivateFlows(ctx context.Context, in *ActivateFlowsRequest, opts ...grpc.CallOption) (*ActivateFlowsResult, error) {
	out := new(ActivateFlowsResult)
	err := c.cc.Invoke(ctx, "/magma.lte.Pipelined/ActivateFlows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinedClient) DeactivateFlows(ctx context.Context, in *DeactivateFlowsRequest, opts ...grpc.CallOption) (*DeactivateFlowsResult, error) {
	out := new(DeactivateFlowsResult)
	err := c.cc.Invoke(ctx, "/magma.lte.Pipelined/DeactivateFlows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinedClient) GetPolicyUsage(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*RuleRecordTable, error) {
	out := new(RuleRecordTable)
	err := c.cc.Invoke(ctx, "/magma.lte.Pipelined/GetPolicyUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinedClient) GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*RuleRecordTable, error) {
	out := new(RuleRecordTable)
	err := c.cc.Invoke(ctx, "/magma.lte.Pipelined/GetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinedClient) CreateFlow(ctx context.Context, in *FlowRequest, opts ...grpc.CallOption) (*FlowResponse, error) {
	out := new(FlowResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.Pipelined/CreateFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinedClient) RemoveFlow(ctx context.Context, in *FlowRequest, opts ...grpc.CallOption) (*FlowResponse, error) {
	out := new(FlowResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.Pipelined/RemoveFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinedClient) UpdateFlowStats(ctx context.Context, in *FlowRequest, opts ...grpc.CallOption) (*FlowResponse, error) {
	out := new(FlowResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.Pipelined/UpdateFlowStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinedClient) SetupQuotaFlows(ctx context.Context, in *SetupQuotaRequest, opts ...grpc.CallOption) (*SetupFlowsResult, error) {
	out := new(SetupFlowsResult)
	err := c.cc.Invoke(ctx, "/magma.lte.Pipelined/SetupQuotaFlows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinedClient) UpdateSubscriberQuotaState(ctx context.Context, in *UpdateSubscriberQuotaStateRequest, opts ...grpc.CallOption) (*FlowResponse, error) {
	out := new(FlowResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.Pipelined/UpdateSubscriberQuotaState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinedClient) SetupUEMacFlows(ctx context.Context, in *SetupUEMacRequest, opts ...grpc.CallOption) (*SetupFlowsResult, error) {
	out := new(SetupFlowsResult)
	err := c.cc.Invoke(ctx, "/magma.lte.Pipelined/SetupUEMacFlows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinedClient) AddUEMacFlow(ctx context.Context, in *UEMacFlowRequest, opts ...grpc.CallOption) (*FlowResponse, error) {
	out := new(FlowResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.Pipelined/AddUEMacFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinedClient) DeleteUEMacFlow(ctx context.Context, in *UEMacFlowRequest, opts ...grpc.CallOption) (*FlowResponse, error) {
	out := new(FlowResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.Pipelined/DeleteUEMacFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinedClient) UpdateIPFIXFlow(ctx context.Context, in *UEMacFlowRequest, opts ...grpc.CallOption) (*FlowResponse, error) {
	out := new(FlowResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.Pipelined/UpdateIPFIXFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinedClient) GetAllTableAssignments(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*AllTableAssignments, error) {
	out := new(AllTableAssignments)
	err := c.cc.Invoke(ctx, "/magma.lte.Pipelined/GetAllTableAssignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinedClient) UpdateUEState(ctx context.Context, in *UESessionSet, opts ...grpc.CallOption) (*UESessionContextResponse, error) {
	out := new(UESessionContextResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.Pipelined/UpdateUEState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PipelinedServer is the server API for Pipelined service.
type PipelinedServer interface {
	// Setup pipelined basic controllers
	SetupDefaultControllers(context.Context, *SetupDefaultRequest) (*SetupFlowsResult, error)
	SetSMFSessions(context.Context, *SessionSet) (*UPFSessionContextState, error)
	// Setup flows for subscribers (used on restarts)
	SetupPolicyFlows(context.Context, *SetupPolicyRequest) (*SetupFlowsResult, error)
	// Activate flows for a subscriber based on predefined flow templates
	ActivateFlows(context.Context, *ActivateFlowsRequest) (*ActivateFlowsResult, error)
	// Deactivate flows for a subscriber
	DeactivateFlows(context.Context, *DeactivateFlowsRequest) (*DeactivateFlowsResult, error)
	// Get policy usage stats
	GetPolicyUsage(context.Context, *protos.Void) (*RuleRecordTable, error)
	GetStats(context.Context, *GetStatsRequest) (*RuleRecordTable, error)
	// Add new dpi flow
	CreateFlow(context.Context, *FlowRequest) (*FlowResponse, error)
	// Remove dpi flow
	RemoveFlow(context.Context, *FlowRequest) (*FlowResponse, error)
	// Update flow stats
	UpdateFlowStats(context.Context, *FlowRequest) (*FlowResponse, error)
	// Setup subscribers flows (used on restarts)
	SetupQuotaFlows(context.Context, *SetupQuotaRequest) (*SetupFlowsResult, error)
	// Synchronize subscribers quota check flows
	UpdateSubscriberQuotaState(context.Context, *UpdateSubscriberQuotaStateRequest) (*FlowResponse, error)
	// Setup subscribers flows (used on restarts)
	SetupUEMacFlows(context.Context, *SetupUEMacRequest) (*SetupFlowsResult, error)
	// Add a flow for a subscriber by matching the provided UE MAC address
	AddUEMacFlow(context.Context, *UEMacFlowRequest) (*FlowResponse, error)
	// Delete a flow for a subscriber by matching the provided UE MAC address
	DeleteUEMacFlow(context.Context, *UEMacFlowRequest) (*FlowResponse, error)
	// Update subscriber IPFIX flows
	UpdateIPFIXFlow(context.Context, *UEMacFlowRequest) (*FlowResponse, error)
	// Get the flow table assignment for all apps ordered by main table number
	// and name
	GetAllTableAssignments(context.Context, *protos.Void) (*AllTableAssignments, error)
	UpdateUEState(context.Context, *UESessionSet) (*UESessionContextResponse, error)
}

// UnimplementedPipelinedServer can be embedded to have forward compatible implementations.
type UnimplementedPipelinedServer struct {
}

func (*UnimplementedPipelinedServer) SetupDefaultControllers(context.Context, *SetupDefaultRequest) (*SetupFlowsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupDefaultControllers not implemented")
}
func (*UnimplementedPipelinedServer) SetSMFSessions(context.Context, *SessionSet) (*UPFSessionContextState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSMFSessions not implemented")
}
func (*UnimplementedPipelinedServer) SetupPolicyFlows(context.Context, *SetupPolicyRequest) (*SetupFlowsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupPolicyFlows not implemented")
}
func (*UnimplementedPipelinedServer) ActivateFlows(context.Context, *ActivateFlowsRequest) (*ActivateFlowsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateFlows not implemented")
}
func (*UnimplementedPipelinedServer) DeactivateFlows(context.Context, *DeactivateFlowsRequest) (*DeactivateFlowsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateFlows not implemented")
}
func (*UnimplementedPipelinedServer) GetPolicyUsage(context.Context, *protos.Void) (*RuleRecordTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicyUsage not implemented")
}
func (*UnimplementedPipelinedServer) GetStats(context.Context, *GetStatsRequest) (*RuleRecordTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (*UnimplementedPipelinedServer) CreateFlow(context.Context, *FlowRequest) (*FlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlow not implemented")
}
func (*UnimplementedPipelinedServer) RemoveFlow(context.Context, *FlowRequest) (*FlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFlow not implemented")
}
func (*UnimplementedPipelinedServer) UpdateFlowStats(context.Context, *FlowRequest) (*FlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlowStats not implemented")
}
func (*UnimplementedPipelinedServer) SetupQuotaFlows(context.Context, *SetupQuotaRequest) (*SetupFlowsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupQuotaFlows not implemented")
}
func (*UnimplementedPipelinedServer) UpdateSubscriberQuotaState(context.Context, *UpdateSubscriberQuotaStateRequest) (*FlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscriberQuotaState not implemented")
}
func (*UnimplementedPipelinedServer) SetupUEMacFlows(context.Context, *SetupUEMacRequest) (*SetupFlowsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupUEMacFlows not implemented")
}
func (*UnimplementedPipelinedServer) AddUEMacFlow(context.Context, *UEMacFlowRequest) (*FlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUEMacFlow not implemented")
}
func (*UnimplementedPipelinedServer) DeleteUEMacFlow(context.Context, *UEMacFlowRequest) (*FlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUEMacFlow not implemented")
}
func (*UnimplementedPipelinedServer) UpdateIPFIXFlow(context.Context, *UEMacFlowRequest) (*FlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIPFIXFlow not implemented")
}
func (*UnimplementedPipelinedServer) GetAllTableAssignments(context.Context, *protos.Void) (*AllTableAssignments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTableAssignments not implemented")
}
func (*UnimplementedPipelinedServer) UpdateUEState(context.Context, *UESessionSet) (*UESessionContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUEState not implemented")
}

func RegisterPipelinedServer(s *grpc.Server, srv PipelinedServer) {
	s.RegisterService(&_Pipelined_serviceDesc, srv)
}

func _Pipelined_SetupDefaultControllers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinedServer).SetupDefaultControllers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Pipelined/SetupDefaultControllers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinedServer).SetupDefaultControllers(ctx, req.(*SetupDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipelined_SetSMFSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinedServer).SetSMFSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Pipelined/SetSMFSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinedServer).SetSMFSessions(ctx, req.(*SessionSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipelined_SetupPolicyFlows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinedServer).SetupPolicyFlows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Pipelined/SetupPolicyFlows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinedServer).SetupPolicyFlows(ctx, req.(*SetupPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipelined_ActivateFlows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateFlowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinedServer).ActivateFlows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Pipelined/ActivateFlows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinedServer).ActivateFlows(ctx, req.(*ActivateFlowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipelined_DeactivateFlows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateFlowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinedServer).DeactivateFlows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Pipelined/DeactivateFlows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinedServer).DeactivateFlows(ctx, req.(*DeactivateFlowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipelined_GetPolicyUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinedServer).GetPolicyUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Pipelined/GetPolicyUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinedServer).GetPolicyUsage(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipelined_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinedServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Pipelined/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinedServer).GetStats(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipelined_CreateFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinedServer).CreateFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Pipelined/CreateFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinedServer).CreateFlow(ctx, req.(*FlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipelined_RemoveFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinedServer).RemoveFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Pipelined/RemoveFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinedServer).RemoveFlow(ctx, req.(*FlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipelined_UpdateFlowStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinedServer).UpdateFlowStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Pipelined/UpdateFlowStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinedServer).UpdateFlowStats(ctx, req.(*FlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipelined_SetupQuotaFlows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinedServer).SetupQuotaFlows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Pipelined/SetupQuotaFlows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinedServer).SetupQuotaFlows(ctx, req.(*SetupQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipelined_UpdateSubscriberQuotaState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubscriberQuotaStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinedServer).UpdateSubscriberQuotaState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Pipelined/UpdateSubscriberQuotaState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinedServer).UpdateSubscriberQuotaState(ctx, req.(*UpdateSubscriberQuotaStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipelined_SetupUEMacFlows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupUEMacRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinedServer).SetupUEMacFlows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Pipelined/SetupUEMacFlows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinedServer).SetupUEMacFlows(ctx, req.(*SetupUEMacRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipelined_AddUEMacFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UEMacFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinedServer).AddUEMacFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Pipelined/AddUEMacFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinedServer).AddUEMacFlow(ctx, req.(*UEMacFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipelined_DeleteUEMacFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UEMacFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinedServer).DeleteUEMacFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Pipelined/DeleteUEMacFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinedServer).DeleteUEMacFlow(ctx, req.(*UEMacFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipelined_UpdateIPFIXFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UEMacFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinedServer).UpdateIPFIXFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Pipelined/UpdateIPFIXFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinedServer).UpdateIPFIXFlow(ctx, req.(*UEMacFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipelined_GetAllTableAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinedServer).GetAllTableAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Pipelined/GetAllTableAssignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinedServer).GetAllTableAssignments(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipelined_UpdateUEState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UESessionSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinedServer).UpdateUEState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Pipelined/UpdateUEState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinedServer).UpdateUEState(ctx, req.(*UESessionSet))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pipelined_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.Pipelined",
	HandlerType: (*PipelinedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetupDefaultControllers",
			Handler:    _Pipelined_SetupDefaultControllers_Handler,
		},
		{
			MethodName: "SetSMFSessions",
			Handler:    _Pipelined_SetSMFSessions_Handler,
		},
		{
			MethodName: "SetupPolicyFlows",
			Handler:    _Pipelined_SetupPolicyFlows_Handler,
		},
		{
			MethodName: "ActivateFlows",
			Handler:    _Pipelined_ActivateFlows_Handler,
		},
		{
			MethodName: "DeactivateFlows",
			Handler:    _Pipelined_DeactivateFlows_Handler,
		},
		{
			MethodName: "GetPolicyUsage",
			Handler:    _Pipelined_GetPolicyUsage_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _Pipelined_GetStats_Handler,
		},
		{
			MethodName: "CreateFlow",
			Handler:    _Pipelined_CreateFlow_Handler,
		},
		{
			MethodName: "RemoveFlow",
			Handler:    _Pipelined_RemoveFlow_Handler,
		},
		{
			MethodName: "UpdateFlowStats",
			Handler:    _Pipelined_UpdateFlowStats_Handler,
		},
		{
			MethodName: "SetupQuotaFlows",
			Handler:    _Pipelined_SetupQuotaFlows_Handler,
		},
		{
			MethodName: "UpdateSubscriberQuotaState",
			Handler:    _Pipelined_UpdateSubscriberQuotaState_Handler,
		},
		{
			MethodName: "SetupUEMacFlows",
			Handler:    _Pipelined_SetupUEMacFlows_Handler,
		},
		{
			MethodName: "AddUEMacFlow",
			Handler:    _Pipelined_AddUEMacFlow_Handler,
		},
		{
			MethodName: "DeleteUEMacFlow",
			Handler:    _Pipelined_DeleteUEMacFlow_Handler,
		},
		{
			MethodName: "UpdateIPFIXFlow",
			Handler:    _Pipelined_UpdateIPFIXFlow_Handler,
		},
		{
			MethodName: "GetAllTableAssignments",
			Handler:    _Pipelined_GetAllTableAssignments_Handler,
		},
		{
			MethodName: "UpdateUEState",
			Handler:    _Pipelined_UpdateUEState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/pipelined.proto",
}
