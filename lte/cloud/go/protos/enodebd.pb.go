//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: lte/protos/enodebd.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	protos "magma/orc8r/lib/go/protos"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SingleEnodebStatus_StatusProperty int32

const (
	SingleEnodebStatus_OFF     SingleEnodebStatus_StatusProperty = 0
	SingleEnodebStatus_ON      SingleEnodebStatus_StatusProperty = 1
	SingleEnodebStatus_UNKNOWN SingleEnodebStatus_StatusProperty = 2
)

// Enum value maps for SingleEnodebStatus_StatusProperty.
var (
	SingleEnodebStatus_StatusProperty_name = map[int32]string{
		0: "OFF",
		1: "ON",
		2: "UNKNOWN",
	}
	SingleEnodebStatus_StatusProperty_value = map[string]int32{
		"OFF":     0,
		"ON":      1,
		"UNKNOWN": 2,
	}
)

func (x SingleEnodebStatus_StatusProperty) Enum() *SingleEnodebStatus_StatusProperty {
	p := new(SingleEnodebStatus_StatusProperty)
	*p = x
	return p
}

func (x SingleEnodebStatus_StatusProperty) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SingleEnodebStatus_StatusProperty) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_enodebd_proto_enumTypes[0].Descriptor()
}

func (SingleEnodebStatus_StatusProperty) Type() protoreflect.EnumType {
	return &file_lte_protos_enodebd_proto_enumTypes[0]
}

func (x SingleEnodebStatus_StatusProperty) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SingleEnodebStatus_StatusProperty.Descriptor instead.
func (SingleEnodebStatus_StatusProperty) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_enodebd_proto_rawDescGZIP(), []int{6, 0}
}

// --------------------------------------------------------------------------
// Message Definitions for TR-069 message injection. This is used for manual
// testing of the TR-069 server.
// --------------------------------------------------------------------------
type GetParameterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Serial ID of eNodeB. Uniquely identifies the eNodeB.
	DeviceSerial string `protobuf:"bytes,1,opt,name=device_serial,json=deviceSerial,proto3" json:"device_serial,omitempty"`
	// Fully qualified parameter name, e.g:
	// InternetGatewayDevice.LANDevice.1.Hosts.
	ParameterName string `protobuf:"bytes,2,opt,name=parameter_name,json=parameterName,proto3" json:"parameter_name,omitempty"`
}

func (x *GetParameterRequest) Reset() {
	*x = GetParameterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_enodebd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetParameterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetParameterRequest) ProtoMessage() {}

func (x *GetParameterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_enodebd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetParameterRequest.ProtoReflect.Descriptor instead.
func (*GetParameterRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_enodebd_proto_rawDescGZIP(), []int{0}
}

func (x *GetParameterRequest) GetDeviceSerial() string {
	if x != nil {
		return x.DeviceSerial
	}
	return ""
}

func (x *GetParameterRequest) GetParameterName() string {
	if x != nil {
		return x.ParameterName
	}
	return ""
}

type NameValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Note: parameter value is always passed back as string. Up to calling
	// function to determine type
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NameValue) Reset() {
	*x = NameValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_enodebd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameValue) ProtoMessage() {}

func (x *NameValue) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_enodebd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameValue.ProtoReflect.Descriptor instead.
func (*NameValue) Descriptor() ([]byte, []int) {
	return file_lte_protos_enodebd_proto_rawDescGZIP(), []int{1}
}

func (x *NameValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NameValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type GetParameterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceSerial string       `protobuf:"bytes,1,opt,name=device_serial,json=deviceSerial,proto3" json:"device_serial,omitempty"`
	Parameters   []*NameValue `protobuf:"bytes,2,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *GetParameterResponse) Reset() {
	*x = GetParameterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_enodebd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetParameterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetParameterResponse) ProtoMessage() {}

func (x *GetParameterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_enodebd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetParameterResponse.ProtoReflect.Descriptor instead.
func (*GetParameterResponse) Descriptor() ([]byte, []int) {
	return file_lte_protos_enodebd_proto_rawDescGZIP(), []int{2}
}

func (x *GetParameterResponse) GetDeviceSerial() string {
	if x != nil {
		return x.DeviceSerial
	}
	return ""
}

func (x *GetParameterResponse) GetParameters() []*NameValue {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type SetParameterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Serial ID of eNodeB. Uniquely identifies the eNodeB.
	DeviceSerial string `protobuf:"bytes,1,opt,name=device_serial,json=deviceSerial,proto3" json:"device_serial,omitempty"`
	// Fully qualified parameter name, e.g:
	// InternetGatewayDevice.LANDevice.1.Hosts.
	ParameterName string `protobuf:"bytes,2,opt,name=parameter_name,json=parameterName,proto3" json:"parameter_name,omitempty"`
	// Data values for each data type
	//
	// Types that are assignable to Value:
	//	*SetParameterRequest_ValueInt
	//	*SetParameterRequest_ValueString
	//	*SetParameterRequest_ValueBool
	Value isSetParameterRequest_Value `protobuf_oneof:"value"`
	// Key to be used at ACS discretion to determine when parameter was last
	// updated
	ParameterKey string `protobuf:"bytes,6,opt,name=parameter_key,json=parameterKey,proto3" json:"parameter_key,omitempty"`
}

func (x *SetParameterRequest) Reset() {
	*x = SetParameterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_enodebd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetParameterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetParameterRequest) ProtoMessage() {}

func (x *SetParameterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_enodebd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetParameterRequest.ProtoReflect.Descriptor instead.
func (*SetParameterRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_enodebd_proto_rawDescGZIP(), []int{3}
}

func (x *SetParameterRequest) GetDeviceSerial() string {
	if x != nil {
		return x.DeviceSerial
	}
	return ""
}

func (x *SetParameterRequest) GetParameterName() string {
	if x != nil {
		return x.ParameterName
	}
	return ""
}

func (m *SetParameterRequest) GetValue() isSetParameterRequest_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *SetParameterRequest) GetValueInt() int32 {
	if x, ok := x.GetValue().(*SetParameterRequest_ValueInt); ok {
		return x.ValueInt
	}
	return 0
}

func (x *SetParameterRequest) GetValueString() string {
	if x, ok := x.GetValue().(*SetParameterRequest_ValueString); ok {
		return x.ValueString
	}
	return ""
}

func (x *SetParameterRequest) GetValueBool() bool {
	if x, ok := x.GetValue().(*SetParameterRequest_ValueBool); ok {
		return x.ValueBool
	}
	return false
}

func (x *SetParameterRequest) GetParameterKey() string {
	if x != nil {
		return x.ParameterKey
	}
	return ""
}

type isSetParameterRequest_Value interface {
	isSetParameterRequest_Value()
}

type SetParameterRequest_ValueInt struct {
	ValueInt int32 `protobuf:"varint,3,opt,name=value_int,json=valueInt,proto3,oneof"`
}

type SetParameterRequest_ValueString struct {
	ValueString string `protobuf:"bytes,4,opt,name=value_string,json=valueString,proto3,oneof"`
}

type SetParameterRequest_ValueBool struct {
	ValueBool bool `protobuf:"varint,5,opt,name=value_bool,json=valueBool,proto3,oneof"`
}

func (*SetParameterRequest_ValueInt) isSetParameterRequest_Value() {}

func (*SetParameterRequest_ValueString) isSetParameterRequest_Value() {}

func (*SetParameterRequest_ValueBool) isSetParameterRequest_Value() {}

type EnodebIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Serial ID of eNodeB. Uniquely identifies the eNodeB.
	DeviceSerial string `protobuf:"bytes,1,opt,name=device_serial,json=deviceSerial,proto3" json:"device_serial,omitempty"`
}

func (x *EnodebIdentity) Reset() {
	*x = EnodebIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_enodebd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnodebIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnodebIdentity) ProtoMessage() {}

func (x *EnodebIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_enodebd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnodebIdentity.ProtoReflect.Descriptor instead.
func (*EnodebIdentity) Descriptor() ([]byte, []int) {
	return file_lte_protos_enodebd_proto_rawDescGZIP(), []int{4}
}

func (x *EnodebIdentity) GetDeviceSerial() string {
	if x != nil {
		return x.DeviceSerial
	}
	return ""
}

type AllEnodebStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnbStatusList []*SingleEnodebStatus `protobuf:"bytes,1,rep,name=enb_status_list,json=enbStatusList,proto3" json:"enb_status_list,omitempty"`
}

func (x *AllEnodebStatus) Reset() {
	*x = AllEnodebStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_enodebd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllEnodebStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllEnodebStatus) ProtoMessage() {}

func (x *AllEnodebStatus) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_enodebd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllEnodebStatus.ProtoReflect.Descriptor instead.
func (*AllEnodebStatus) Descriptor() ([]byte, []int) {
	return file_lte_protos_enodebd_proto_rawDescGZIP(), []int{5}
}

func (x *AllEnodebStatus) GetEnbStatusList() []*SingleEnodebStatus {
	if x != nil {
		return x.EnbStatusList
	}
	return nil
}

type SingleEnodebStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceSerial   string                            `protobuf:"bytes,1,opt,name=device_serial,json=deviceSerial,proto3" json:"device_serial,omitempty"`
	IpAddress      string                            `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Connected      SingleEnodebStatus_StatusProperty `protobuf:"varint,3,opt,name=connected,proto3,enum=magma.lte.SingleEnodebStatus_StatusProperty" json:"connected,omitempty"`
	Configured     SingleEnodebStatus_StatusProperty `protobuf:"varint,4,opt,name=configured,proto3,enum=magma.lte.SingleEnodebStatus_StatusProperty" json:"configured,omitempty"`
	OpstateEnabled SingleEnodebStatus_StatusProperty `protobuf:"varint,5,opt,name=opstate_enabled,json=opstateEnabled,proto3,enum=magma.lte.SingleEnodebStatus_StatusProperty" json:"opstate_enabled,omitempty"`
	RfTxOn         SingleEnodebStatus_StatusProperty `protobuf:"varint,6,opt,name=rf_tx_on,json=rfTxOn,proto3,enum=magma.lte.SingleEnodebStatus_StatusProperty" json:"rf_tx_on,omitempty"`
	GpsConnected   SingleEnodebStatus_StatusProperty `protobuf:"varint,7,opt,name=gps_connected,json=gpsConnected,proto3,enum=magma.lte.SingleEnodebStatus_StatusProperty" json:"gps_connected,omitempty"`
	PtpConnected   SingleEnodebStatus_StatusProperty `protobuf:"varint,8,opt,name=ptp_connected,json=ptpConnected,proto3,enum=magma.lte.SingleEnodebStatus_StatusProperty" json:"ptp_connected,omitempty"`
	MmeConnected   SingleEnodebStatus_StatusProperty `protobuf:"varint,9,opt,name=mme_connected,json=mmeConnected,proto3,enum=magma.lte.SingleEnodebStatus_StatusProperty" json:"mme_connected,omitempty"`
	GpsLongitude   string                            `protobuf:"bytes,10,opt,name=gps_longitude,json=gpsLongitude,proto3" json:"gps_longitude,omitempty"`
	GpsLatitude    string                            `protobuf:"bytes,11,opt,name=gps_latitude,json=gpsLatitude,proto3" json:"gps_latitude,omitempty"`
	FsmState       string                            `protobuf:"bytes,12,opt,name=fsm_state,json=fsmState,proto3" json:"fsm_state,omitempty"`
	RfTxDesired    SingleEnodebStatus_StatusProperty `protobuf:"varint,13,opt,name=rf_tx_desired,json=rfTxDesired,proto3,enum=magma.lte.SingleEnodebStatus_StatusProperty" json:"rf_tx_desired,omitempty"`
}

func (x *SingleEnodebStatus) Reset() {
	*x = SingleEnodebStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_enodebd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleEnodebStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleEnodebStatus) ProtoMessage() {}

func (x *SingleEnodebStatus) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_enodebd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleEnodebStatus.ProtoReflect.Descriptor instead.
func (*SingleEnodebStatus) Descriptor() ([]byte, []int) {
	return file_lte_protos_enodebd_proto_rawDescGZIP(), []int{6}
}

func (x *SingleEnodebStatus) GetDeviceSerial() string {
	if x != nil {
		return x.DeviceSerial
	}
	return ""
}

func (x *SingleEnodebStatus) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *SingleEnodebStatus) GetConnected() SingleEnodebStatus_StatusProperty {
	if x != nil {
		return x.Connected
	}
	return SingleEnodebStatus_OFF
}

func (x *SingleEnodebStatus) GetConfigured() SingleEnodebStatus_StatusProperty {
	if x != nil {
		return x.Configured
	}
	return SingleEnodebStatus_OFF
}

func (x *SingleEnodebStatus) GetOpstateEnabled() SingleEnodebStatus_StatusProperty {
	if x != nil {
		return x.OpstateEnabled
	}
	return SingleEnodebStatus_OFF
}

func (x *SingleEnodebStatus) GetRfTxOn() SingleEnodebStatus_StatusProperty {
	if x != nil {
		return x.RfTxOn
	}
	return SingleEnodebStatus_OFF
}

func (x *SingleEnodebStatus) GetGpsConnected() SingleEnodebStatus_StatusProperty {
	if x != nil {
		return x.GpsConnected
	}
	return SingleEnodebStatus_OFF
}

func (x *SingleEnodebStatus) GetPtpConnected() SingleEnodebStatus_StatusProperty {
	if x != nil {
		return x.PtpConnected
	}
	return SingleEnodebStatus_OFF
}

func (x *SingleEnodebStatus) GetMmeConnected() SingleEnodebStatus_StatusProperty {
	if x != nil {
		return x.MmeConnected
	}
	return SingleEnodebStatus_OFF
}

func (x *SingleEnodebStatus) GetGpsLongitude() string {
	if x != nil {
		return x.GpsLongitude
	}
	return ""
}

func (x *SingleEnodebStatus) GetGpsLatitude() string {
	if x != nil {
		return x.GpsLatitude
	}
	return ""
}

func (x *SingleEnodebStatus) GetFsmState() string {
	if x != nil {
		return x.FsmState
	}
	return ""
}

func (x *SingleEnodebStatus) GetRfTxDesired() SingleEnodebStatus_StatusProperty {
	if x != nil {
		return x.RfTxDesired
	}
	return SingleEnodebStatus_OFF
}

var File_lte_protos_enodebd_proto protoreflect.FileDescriptor

var file_lte_protos_enodebd_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x65, 0x6e, 0x6f,
	0x64, 0x65, 0x62, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x1a, 0x1d, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x33, 0x30, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x61, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x35, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x71, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xf4, 0x01, 0x0a,
	0x13, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62, 0x6f,
	0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x35, 0x0a, 0x0e, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0x58, 0x0a, 0x0f, 0x41, 0x6c,
	0x6c, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a,
	0x0f, 0x65, 0x6e, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x65, 0x6e, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xf1, 0x06, 0x0a, 0x12, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45,
	0x6e, 0x6f, 0x64, 0x65, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x4a, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x12, 0x55, 0x0a, 0x0f, 0x6f, 0x70, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x52, 0x0e, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x46, 0x0a, 0x08, 0x72, 0x66, 0x5f, 0x74, 0x78, 0x5f, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x52, 0x06, 0x72, 0x66, 0x54, 0x78, 0x4f, 0x6e, 0x12, 0x51, 0x0a, 0x0d, 0x67, 0x70, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0c, 0x67,
	0x70, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x0d, 0x70,
	0x74, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x52, 0x0c, 0x70, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x51,
	0x0a, 0x0d, 0x6d, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x52, 0x0c, 0x6d, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x70, 0x73, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x70, 0x73, 0x4c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x70, 0x73, 0x5f, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x70,
	0x73, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x73, 0x6d,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x73,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x72, 0x66, 0x5f, 0x74, 0x78, 0x5f,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0b, 0x72, 0x66, 0x54,
	0x78, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x22, 0x2e, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46,
	0x46, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x32, 0x91, 0x04, 0x0a, 0x07, 0x45, 0x6e, 0x6f,
	0x64, 0x65, 0x62, 0x64, 0x12, 0x4f, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72,
	0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56,
	0x6f, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x12, 0x19, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x52,
	0x65, 0x62, 0x6f, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x11, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x12, 0x3a,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x1a,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56,
	0x6f, 0x69, 0x64, 0x1a, 0x1a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e,
	0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x4b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x45,
	0x6e, 0x6f, 0x64, 0x65, 0x62, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x1d, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x1b, 0x5a, 0x19,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f, 0x6c, 0x74, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_lte_protos_enodebd_proto_rawDescOnce sync.Once
	file_lte_protos_enodebd_proto_rawDescData = file_lte_protos_enodebd_proto_rawDesc
)

func file_lte_protos_enodebd_proto_rawDescGZIP() []byte {
	file_lte_protos_enodebd_proto_rawDescOnce.Do(func() {
		file_lte_protos_enodebd_proto_rawDescData = protoimpl.X.CompressGZIP(file_lte_protos_enodebd_proto_rawDescData)
	})
	return file_lte_protos_enodebd_proto_rawDescData
}

var file_lte_protos_enodebd_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_lte_protos_enodebd_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_lte_protos_enodebd_proto_goTypes = []interface{}{
	(SingleEnodebStatus_StatusProperty)(0), // 0: magma.lte.SingleEnodebStatus.StatusProperty
	(*GetParameterRequest)(nil),            // 1: magma.lte.GetParameterRequest
	(*NameValue)(nil),                      // 2: magma.lte.NameValue
	(*GetParameterResponse)(nil),           // 3: magma.lte.GetParameterResponse
	(*SetParameterRequest)(nil),            // 4: magma.lte.SetParameterRequest
	(*EnodebIdentity)(nil),                 // 5: magma.lte.EnodebIdentity
	(*AllEnodebStatus)(nil),                // 6: magma.lte.AllEnodebStatus
	(*SingleEnodebStatus)(nil),             // 7: magma.lte.SingleEnodebStatus
	(*protos.Void)(nil),                    // 8: magma.orc8r.Void
	(*protos.ServiceStatus)(nil),           // 9: magma.orc8r.ServiceStatus
}
var file_lte_protos_enodebd_proto_depIdxs = []int32{
	2,  // 0: magma.lte.GetParameterResponse.parameters:type_name -> magma.lte.NameValue
	7,  // 1: magma.lte.AllEnodebStatus.enb_status_list:type_name -> magma.lte.SingleEnodebStatus
	0,  // 2: magma.lte.SingleEnodebStatus.connected:type_name -> magma.lte.SingleEnodebStatus.StatusProperty
	0,  // 3: magma.lte.SingleEnodebStatus.configured:type_name -> magma.lte.SingleEnodebStatus.StatusProperty
	0,  // 4: magma.lte.SingleEnodebStatus.opstate_enabled:type_name -> magma.lte.SingleEnodebStatus.StatusProperty
	0,  // 5: magma.lte.SingleEnodebStatus.rf_tx_on:type_name -> magma.lte.SingleEnodebStatus.StatusProperty
	0,  // 6: magma.lte.SingleEnodebStatus.gps_connected:type_name -> magma.lte.SingleEnodebStatus.StatusProperty
	0,  // 7: magma.lte.SingleEnodebStatus.ptp_connected:type_name -> magma.lte.SingleEnodebStatus.StatusProperty
	0,  // 8: magma.lte.SingleEnodebStatus.mme_connected:type_name -> magma.lte.SingleEnodebStatus.StatusProperty
	0,  // 9: magma.lte.SingleEnodebStatus.rf_tx_desired:type_name -> magma.lte.SingleEnodebStatus.StatusProperty
	1,  // 10: magma.lte.Enodebd.GetParameter:input_type -> magma.lte.GetParameterRequest
	4,  // 11: magma.lte.Enodebd.SetParameter:input_type -> magma.lte.SetParameterRequest
	5,  // 12: magma.lte.Enodebd.Configure:input_type -> magma.lte.EnodebIdentity
	5,  // 13: magma.lte.Enodebd.Reboot:input_type -> magma.lte.EnodebIdentity
	8,  // 14: magma.lte.Enodebd.RebootAll:input_type -> magma.orc8r.Void
	8,  // 15: magma.lte.Enodebd.GetStatus:input_type -> magma.orc8r.Void
	8,  // 16: magma.lte.Enodebd.GetAllEnodebStatus:input_type -> magma.orc8r.Void
	5,  // 17: magma.lte.Enodebd.GetEnodebStatus:input_type -> magma.lte.EnodebIdentity
	3,  // 18: magma.lte.Enodebd.GetParameter:output_type -> magma.lte.GetParameterResponse
	8,  // 19: magma.lte.Enodebd.SetParameter:output_type -> magma.orc8r.Void
	8,  // 20: magma.lte.Enodebd.Configure:output_type -> magma.orc8r.Void
	8,  // 21: magma.lte.Enodebd.Reboot:output_type -> magma.orc8r.Void
	8,  // 22: magma.lte.Enodebd.RebootAll:output_type -> magma.orc8r.Void
	9,  // 23: magma.lte.Enodebd.GetStatus:output_type -> magma.orc8r.ServiceStatus
	6,  // 24: magma.lte.Enodebd.GetAllEnodebStatus:output_type -> magma.lte.AllEnodebStatus
	7,  // 25: magma.lte.Enodebd.GetEnodebStatus:output_type -> magma.lte.SingleEnodebStatus
	18, // [18:26] is the sub-list for method output_type
	10, // [10:18] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_lte_protos_enodebd_proto_init() }
func file_lte_protos_enodebd_proto_init() {
	if File_lte_protos_enodebd_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lte_protos_enodebd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetParameterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_enodebd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_enodebd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetParameterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_enodebd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetParameterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_enodebd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnodebIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_enodebd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllEnodebStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_enodebd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleEnodebStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_lte_protos_enodebd_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*SetParameterRequest_ValueInt)(nil),
		(*SetParameterRequest_ValueString)(nil),
		(*SetParameterRequest_ValueBool)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lte_protos_enodebd_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lte_protos_enodebd_proto_goTypes,
		DependencyIndexes: file_lte_protos_enodebd_proto_depIdxs,
		EnumInfos:         file_lte_protos_enodebd_proto_enumTypes,
		MessageInfos:      file_lte_protos_enodebd_proto_msgTypes,
	}.Build()
	File_lte_protos_enodebd_proto = out.File
	file_lte_protos_enodebd_proto_rawDesc = nil
	file_lte_protos_enodebd_proto_goTypes = nil
	file_lte_protos_enodebd_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EnodebdClient is the client API for Enodebd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EnodebdClient interface {
	// Sends GetParameterValues message to ENodeB. TR-069 supports multiple
	// parameter names per message, but only one is supported here.
	GetParameter(ctx context.Context, in *GetParameterRequest, opts ...grpc.CallOption) (*GetParameterResponse, error)
	// Sends SetParameterValues message to ENodeB. TR-069 supports multiple
	// parameter names per message, but only one is supported here.
	SetParameter(ctx context.Context, in *SetParameterRequest, opts ...grpc.CallOption) (*protos.Void, error)
	// Configure eNodeB based on enodebd config file
	Configure(ctx context.Context, in *EnodebIdentity, opts ...grpc.CallOption) (*protos.Void, error)
	// Reboot eNodeB
	Reboot(ctx context.Context, in *EnodebIdentity, opts ...grpc.CallOption) (*protos.Void, error)
	// Reboot every connected eNodeB
	RebootAll(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*protos.Void, error)
	// Get current status
	GetStatus(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*protos.ServiceStatus, error)
	// Get status info for all connected eNodeB devices
	GetAllEnodebStatus(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*AllEnodebStatus, error)
	// Get status info of a single connected eNodeB device
	GetEnodebStatus(ctx context.Context, in *EnodebIdentity, opts ...grpc.CallOption) (*SingleEnodebStatus, error)
}

type enodebdClient struct {
	cc grpc.ClientConnInterface
}

func NewEnodebdClient(cc grpc.ClientConnInterface) EnodebdClient {
	return &enodebdClient{cc}
}

func (c *enodebdClient) GetParameter(ctx context.Context, in *GetParameterRequest, opts ...grpc.CallOption) (*GetParameterResponse, error) {
	out := new(GetParameterResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.Enodebd/GetParameter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enodebdClient) SetParameter(ctx context.Context, in *SetParameterRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.Enodebd/SetParameter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enodebdClient) Configure(ctx context.Context, in *EnodebIdentity, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.Enodebd/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enodebdClient) Reboot(ctx context.Context, in *EnodebIdentity, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.Enodebd/Reboot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enodebdClient) RebootAll(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.Enodebd/RebootAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enodebdClient) GetStatus(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*protos.ServiceStatus, error) {
	out := new(protos.ServiceStatus)
	err := c.cc.Invoke(ctx, "/magma.lte.Enodebd/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enodebdClient) GetAllEnodebStatus(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*AllEnodebStatus, error) {
	out := new(AllEnodebStatus)
	err := c.cc.Invoke(ctx, "/magma.lte.Enodebd/GetAllEnodebStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enodebdClient) GetEnodebStatus(ctx context.Context, in *EnodebIdentity, opts ...grpc.CallOption) (*SingleEnodebStatus, error) {
	out := new(SingleEnodebStatus)
	err := c.cc.Invoke(ctx, "/magma.lte.Enodebd/GetEnodebStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnodebdServer is the server API for Enodebd service.
type EnodebdServer interface {
	// Sends GetParameterValues message to ENodeB. TR-069 supports multiple
	// parameter names per message, but only one is supported here.
	GetParameter(context.Context, *GetParameterRequest) (*GetParameterResponse, error)
	// Sends SetParameterValues message to ENodeB. TR-069 supports multiple
	// parameter names per message, but only one is supported here.
	SetParameter(context.Context, *SetParameterRequest) (*protos.Void, error)
	// Configure eNodeB based on enodebd config file
	Configure(context.Context, *EnodebIdentity) (*protos.Void, error)
	// Reboot eNodeB
	Reboot(context.Context, *EnodebIdentity) (*protos.Void, error)
	// Reboot every connected eNodeB
	RebootAll(context.Context, *protos.Void) (*protos.Void, error)
	// Get current status
	GetStatus(context.Context, *protos.Void) (*protos.ServiceStatus, error)
	// Get status info for all connected eNodeB devices
	GetAllEnodebStatus(context.Context, *protos.Void) (*AllEnodebStatus, error)
	// Get status info of a single connected eNodeB device
	GetEnodebStatus(context.Context, *EnodebIdentity) (*SingleEnodebStatus, error)
}

// UnimplementedEnodebdServer can be embedded to have forward compatible implementations.
type UnimplementedEnodebdServer struct {
}

func (*UnimplementedEnodebdServer) GetParameter(context.Context, *GetParameterRequest) (*GetParameterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParameter not implemented")
}
func (*UnimplementedEnodebdServer) SetParameter(context.Context, *SetParameterRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetParameter not implemented")
}
func (*UnimplementedEnodebdServer) Configure(context.Context, *EnodebIdentity) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (*UnimplementedEnodebdServer) Reboot(context.Context, *EnodebIdentity) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reboot not implemented")
}
func (*UnimplementedEnodebdServer) RebootAll(context.Context, *protos.Void) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebootAll not implemented")
}
func (*UnimplementedEnodebdServer) GetStatus(context.Context, *protos.Void) (*protos.ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (*UnimplementedEnodebdServer) GetAllEnodebStatus(context.Context, *protos.Void) (*AllEnodebStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllEnodebStatus not implemented")
}
func (*UnimplementedEnodebdServer) GetEnodebStatus(context.Context, *EnodebIdentity) (*SingleEnodebStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnodebStatus not implemented")
}

func RegisterEnodebdServer(s *grpc.Server, srv EnodebdServer) {
	s.RegisterService(&_Enodebd_serviceDesc, srv)
}

func _Enodebd_GetParameter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParameterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnodebdServer).GetParameter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Enodebd/GetParameter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnodebdServer).GetParameter(ctx, req.(*GetParameterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Enodebd_SetParameter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetParameterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnodebdServer).SetParameter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Enodebd/SetParameter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnodebdServer).SetParameter(ctx, req.(*SetParameterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Enodebd_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnodebIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnodebdServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Enodebd/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnodebdServer).Configure(ctx, req.(*EnodebIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Enodebd_Reboot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnodebIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnodebdServer).Reboot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Enodebd/Reboot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnodebdServer).Reboot(ctx, req.(*EnodebIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Enodebd_RebootAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnodebdServer).RebootAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Enodebd/RebootAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnodebdServer).RebootAll(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Enodebd_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnodebdServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Enodebd/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnodebdServer).GetStatus(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Enodebd_GetAllEnodebStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnodebdServer).GetAllEnodebStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Enodebd/GetAllEnodebStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnodebdServer).GetAllEnodebStatus(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Enodebd_GetEnodebStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnodebIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnodebdServer).GetEnodebStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Enodebd/GetEnodebStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnodebdServer).GetEnodebStatus(ctx, req.(*EnodebIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

var _Enodebd_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.Enodebd",
	HandlerType: (*EnodebdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetParameter",
			Handler:    _Enodebd_GetParameter_Handler,
		},
		{
			MethodName: "SetParameter",
			Handler:    _Enodebd_SetParameter_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _Enodebd_Configure_Handler,
		},
		{
			MethodName: "Reboot",
			Handler:    _Enodebd_Reboot_Handler,
		},
		{
			MethodName: "RebootAll",
			Handler:    _Enodebd_RebootAll_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _Enodebd_GetStatus_Handler,
		},
		{
			MethodName: "GetAllEnodebStatus",
			Handler:    _Enodebd_GetAllEnodebStatus_Handler,
		},
		{
			MethodName: "GetEnodebStatus",
			Handler:    _Enodebd_GetEnodebStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/enodebd.proto",
}
