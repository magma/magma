// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.10.0
// source: lte/protos/spgw_service.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SpgwServiceClient is the client API for SpgwService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpgwServiceClient interface {
	CreateBearer(ctx context.Context, in *CreateBearerRequest, opts ...grpc.CallOption) (*CreateBearerResult, error)
	DeleteBearer(ctx context.Context, in *DeleteBearerRequest, opts ...grpc.CallOption) (*DeleteBearerResult, error)
}

type spgwServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpgwServiceClient(cc grpc.ClientConnInterface) SpgwServiceClient {
	return &spgwServiceClient{cc}
}

func (c *spgwServiceClient) CreateBearer(ctx context.Context, in *CreateBearerRequest, opts ...grpc.CallOption) (*CreateBearerResult, error) {
	out := new(CreateBearerResult)
	err := c.cc.Invoke(ctx, "/magma.lte.SpgwService/CreateBearer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spgwServiceClient) DeleteBearer(ctx context.Context, in *DeleteBearerRequest, opts ...grpc.CallOption) (*DeleteBearerResult, error) {
	out := new(DeleteBearerResult)
	err := c.cc.Invoke(ctx, "/magma.lte.SpgwService/DeleteBearer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpgwServiceServer is the server API for SpgwService service.
// All implementations must embed UnimplementedSpgwServiceServer
// for forward compatibility
type SpgwServiceServer interface {
	CreateBearer(context.Context, *CreateBearerRequest) (*CreateBearerResult, error)
	DeleteBearer(context.Context, *DeleteBearerRequest) (*DeleteBearerResult, error)
	mustEmbedUnimplementedSpgwServiceServer()
}

// UnimplementedSpgwServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSpgwServiceServer struct {
}

func (UnimplementedSpgwServiceServer) CreateBearer(context.Context, *CreateBearerRequest) (*CreateBearerResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBearer not implemented")
}
func (UnimplementedSpgwServiceServer) DeleteBearer(context.Context, *DeleteBearerRequest) (*DeleteBearerResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBearer not implemented")
}
func (UnimplementedSpgwServiceServer) mustEmbedUnimplementedSpgwServiceServer() {}

// UnsafeSpgwServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpgwServiceServer will
// result in compilation errors.
type UnsafeSpgwServiceServer interface {
	mustEmbedUnimplementedSpgwServiceServer()
}

func RegisterSpgwServiceServer(s grpc.ServiceRegistrar, srv SpgwServiceServer) {
	s.RegisterService(&SpgwService_ServiceDesc, srv)
}

func _SpgwService_CreateBearer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBearerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpgwServiceServer).CreateBearer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SpgwService/CreateBearer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpgwServiceServer).CreateBearer(ctx, req.(*CreateBearerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpgwService_DeleteBearer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBearerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpgwServiceServer).DeleteBearer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SpgwService/DeleteBearer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpgwServiceServer).DeleteBearer(ctx, req.(*DeleteBearerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpgwService_ServiceDesc is the grpc.ServiceDesc for SpgwService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpgwService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.SpgwService",
	HandlerType: (*SpgwServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBearer",
			Handler:    _SpgwService_CreateBearer_Handler,
		},
		{
			MethodName: "DeleteBearer",
			Handler:    _SpgwService_DeleteBearer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/spgw_service.proto",
}
