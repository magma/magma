// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.10.0
// source: lte/protos/ha_orc8r.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HaClient is the client API for Ha service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HaClient interface {
	// Fetch all ENB state for ENBs served within the pools of the calling AGW
	GetEnodebOffloadState(ctx context.Context, in *GetEnodebOffloadStateRequest, opts ...grpc.CallOption) (*GetEnodebOffloadStateResponse, error)
}

type haClient struct {
	cc grpc.ClientConnInterface
}

func NewHaClient(cc grpc.ClientConnInterface) HaClient {
	return &haClient{cc}
}

func (c *haClient) GetEnodebOffloadState(ctx context.Context, in *GetEnodebOffloadStateRequest, opts ...grpc.CallOption) (*GetEnodebOffloadStateResponse, error) {
	out := new(GetEnodebOffloadStateResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.Ha/GetEnodebOffloadState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HaServer is the server API for Ha service.
// All implementations must embed UnimplementedHaServer
// for forward compatibility
type HaServer interface {
	// Fetch all ENB state for ENBs served within the pools of the calling AGW
	GetEnodebOffloadState(context.Context, *GetEnodebOffloadStateRequest) (*GetEnodebOffloadStateResponse, error)
	mustEmbedUnimplementedHaServer()
}

// UnimplementedHaServer must be embedded to have forward compatible implementations.
type UnimplementedHaServer struct {
}

func (UnimplementedHaServer) GetEnodebOffloadState(context.Context, *GetEnodebOffloadStateRequest) (*GetEnodebOffloadStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnodebOffloadState not implemented")
}
func (UnimplementedHaServer) mustEmbedUnimplementedHaServer() {}

// UnsafeHaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HaServer will
// result in compilation errors.
type UnsafeHaServer interface {
	mustEmbedUnimplementedHaServer()
}

func RegisterHaServer(s grpc.ServiceRegistrar, srv HaServer) {
	s.RegisterService(&Ha_ServiceDesc, srv)
}

func _Ha_GetEnodebOffloadState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnodebOffloadStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HaServer).GetEnodebOffloadState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Ha/GetEnodebOffloadState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HaServer).GetEnodebOffloadState(ctx, req.(*GetEnodebOffloadStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ha_ServiceDesc is the grpc.ServiceDesc for Ha service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ha_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.Ha",
	HandlerType: (*HaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEnodebOffloadState",
			Handler:    _Ha_GetEnodebOffloadState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/ha_orc8r.proto",
}
