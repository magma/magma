//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.10.0
// source: lte/protos/mconfig/mconfigs.proto

package mconfig

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	protos "magma/orc8r/lib/go/protos"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnodebD_CSFBRat int32

const (
	EnodebD_CSFBRAT_2G EnodebD_CSFBRat = 0
	EnodebD_CSFBRAT_3G EnodebD_CSFBRat = 1
)

// Enum value maps for EnodebD_CSFBRat.
var (
	EnodebD_CSFBRat_name = map[int32]string{
		0: "CSFBRAT_2G",
		1: "CSFBRAT_3G",
	}
	EnodebD_CSFBRat_value = map[string]int32{
		"CSFBRAT_2G": 0,
		"CSFBRAT_3G": 1,
	}
)

func (x EnodebD_CSFBRat) Enum() *EnodebD_CSFBRat {
	p := new(EnodebD_CSFBRat)
	*p = x
	return p
}

func (x EnodebD_CSFBRat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnodebD_CSFBRat) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_mconfig_mconfigs_proto_enumTypes[0].Descriptor()
}

func (EnodebD_CSFBRat) Type() protoreflect.EnumType {
	return &file_lte_protos_mconfig_mconfigs_proto_enumTypes[0]
}

func (x EnodebD_CSFBRat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnodebD_CSFBRat.Descriptor instead.
func (EnodebD_CSFBRat) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{1, 0}
}

type PipelineD_NetworkServices int32

const (
	// Deprecated: Do not use.
	PipelineD_METERING    PipelineD_NetworkServices = 0 // deprecated
	PipelineD_DPI         PipelineD_NetworkServices = 1
	PipelineD_ENFORCEMENT PipelineD_NetworkServices = 2
)

// Enum value maps for PipelineD_NetworkServices.
var (
	PipelineD_NetworkServices_name = map[int32]string{
		0: "METERING",
		1: "DPI",
		2: "ENFORCEMENT",
	}
	PipelineD_NetworkServices_value = map[string]int32{
		"METERING":    0,
		"DPI":         1,
		"ENFORCEMENT": 2,
	}
)

func (x PipelineD_NetworkServices) Enum() *PipelineD_NetworkServices {
	p := new(PipelineD_NetworkServices)
	*p = x
	return p
}

func (x PipelineD_NetworkServices) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PipelineD_NetworkServices) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_mconfig_mconfigs_proto_enumTypes[1].Descriptor()
}

func (PipelineD_NetworkServices) Type() protoreflect.EnumType {
	return &file_lte_protos_mconfig_mconfigs_proto_enumTypes[1]
}

func (x PipelineD_NetworkServices) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PipelineD_NetworkServices.Descriptor instead.
func (PipelineD_NetworkServices) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{2, 0}
}

type PipelineD_HEConfig_EncryptionAlgorithm int32

const (
	PipelineD_HEConfig_RC4                     PipelineD_HEConfig_EncryptionAlgorithm = 0
	PipelineD_HEConfig_AES256_CBC_HMAC_MD5     PipelineD_HEConfig_EncryptionAlgorithm = 1
	PipelineD_HEConfig_AES256_ECB_HMAC_MD5     PipelineD_HEConfig_EncryptionAlgorithm = 2
	PipelineD_HEConfig_GZIPPED_AES256_ECB_SHA1 PipelineD_HEConfig_EncryptionAlgorithm = 3
)

// Enum value maps for PipelineD_HEConfig_EncryptionAlgorithm.
var (
	PipelineD_HEConfig_EncryptionAlgorithm_name = map[int32]string{
		0: "RC4",
		1: "AES256_CBC_HMAC_MD5",
		2: "AES256_ECB_HMAC_MD5",
		3: "GZIPPED_AES256_ECB_SHA1",
	}
	PipelineD_HEConfig_EncryptionAlgorithm_value = map[string]int32{
		"RC4":                     0,
		"AES256_CBC_HMAC_MD5":     1,
		"AES256_ECB_HMAC_MD5":     2,
		"GZIPPED_AES256_ECB_SHA1": 3,
	}
)

func (x PipelineD_HEConfig_EncryptionAlgorithm) Enum() *PipelineD_HEConfig_EncryptionAlgorithm {
	p := new(PipelineD_HEConfig_EncryptionAlgorithm)
	*p = x
	return p
}

func (x PipelineD_HEConfig_EncryptionAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PipelineD_HEConfig_EncryptionAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_mconfig_mconfigs_proto_enumTypes[2].Descriptor()
}

func (PipelineD_HEConfig_EncryptionAlgorithm) Type() protoreflect.EnumType {
	return &file_lte_protos_mconfig_mconfigs_proto_enumTypes[2]
}

func (x PipelineD_HEConfig_EncryptionAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PipelineD_HEConfig_EncryptionAlgorithm.Descriptor instead.
func (PipelineD_HEConfig_EncryptionAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{2, 3, 0}
}

type PipelineD_HEConfig_HashFunction int32

const (
	PipelineD_HEConfig_MD5    PipelineD_HEConfig_HashFunction = 0
	PipelineD_HEConfig_HEX    PipelineD_HEConfig_HashFunction = 1
	PipelineD_HEConfig_SHA256 PipelineD_HEConfig_HashFunction = 2
)

// Enum value maps for PipelineD_HEConfig_HashFunction.
var (
	PipelineD_HEConfig_HashFunction_name = map[int32]string{
		0: "MD5",
		1: "HEX",
		2: "SHA256",
	}
	PipelineD_HEConfig_HashFunction_value = map[string]int32{
		"MD5":    0,
		"HEX":    1,
		"SHA256": 2,
	}
)

func (x PipelineD_HEConfig_HashFunction) Enum() *PipelineD_HEConfig_HashFunction {
	p := new(PipelineD_HEConfig_HashFunction)
	*p = x
	return p
}

func (x PipelineD_HEConfig_HashFunction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PipelineD_HEConfig_HashFunction) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_mconfig_mconfigs_proto_enumTypes[3].Descriptor()
}

func (PipelineD_HEConfig_HashFunction) Type() protoreflect.EnumType {
	return &file_lte_protos_mconfig_mconfigs_proto_enumTypes[3]
}

func (x PipelineD_HEConfig_HashFunction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PipelineD_HEConfig_HashFunction.Descriptor instead.
func (PipelineD_HEConfig_HashFunction) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{2, 3, 1}
}

type PipelineD_HEConfig_EncodingType int32

const (
	PipelineD_HEConfig_BASE64  PipelineD_HEConfig_EncodingType = 0
	PipelineD_HEConfig_HEX2BIN PipelineD_HEConfig_EncodingType = 1
)

// Enum value maps for PipelineD_HEConfig_EncodingType.
var (
	PipelineD_HEConfig_EncodingType_name = map[int32]string{
		0: "BASE64",
		1: "HEX2BIN",
	}
	PipelineD_HEConfig_EncodingType_value = map[string]int32{
		"BASE64":  0,
		"HEX2BIN": 1,
	}
)

func (x PipelineD_HEConfig_EncodingType) Enum() *PipelineD_HEConfig_EncodingType {
	p := new(PipelineD_HEConfig_EncodingType)
	*p = x
	return p
}

func (x PipelineD_HEConfig_EncodingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PipelineD_HEConfig_EncodingType) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_mconfig_mconfigs_proto_enumTypes[4].Descriptor()
}

func (PipelineD_HEConfig_EncodingType) Type() protoreflect.EnumType {
	return &file_lte_protos_mconfig_mconfigs_proto_enumTypes[4]
}

func (x PipelineD_HEConfig_EncodingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PipelineD_HEConfig_EncodingType.Descriptor instead.
func (PipelineD_HEConfig_EncodingType) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{2, 3, 2}
}

type WalletExhaustDetection_Method int32

const (
	// If # of Gx Tracked Rules are > 0, then the wallet is still valid
	WalletExhaustDetection_GxTrackedRules WalletExhaustDetection_Method = 0
)

// Enum value maps for WalletExhaustDetection_Method.
var (
	WalletExhaustDetection_Method_name = map[int32]string{
		0: "GxTrackedRules",
	}
	WalletExhaustDetection_Method_value = map[string]int32{
		"GxTrackedRules": 0,
	}
)

func (x WalletExhaustDetection_Method) Enum() *WalletExhaustDetection_Method {
	p := new(WalletExhaustDetection_Method)
	*p = x
	return p
}

func (x WalletExhaustDetection_Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalletExhaustDetection_Method) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_mconfig_mconfigs_proto_enumTypes[5].Descriptor()
}

func (WalletExhaustDetection_Method) Type() protoreflect.EnumType {
	return &file_lte_protos_mconfig_mconfigs_proto_enumTypes[5]
}

func (x WalletExhaustDetection_Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WalletExhaustDetection_Method.Descriptor instead.
func (WalletExhaustDetection_Method) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{4, 0}
}

// UE allocator type.
type MobilityD_IpAllocatorType int32

const (
	MobilityD_IP_POOL MobilityD_IpAllocatorType = 0
	MobilityD_DHCP    MobilityD_IpAllocatorType = 1
)

// Enum value maps for MobilityD_IpAllocatorType.
var (
	MobilityD_IpAllocatorType_name = map[int32]string{
		0: "IP_POOL",
		1: "DHCP",
	}
	MobilityD_IpAllocatorType_value = map[string]int32{
		"IP_POOL": 0,
		"DHCP":    1,
	}
)

func (x MobilityD_IpAllocatorType) Enum() *MobilityD_IpAllocatorType {
	p := new(MobilityD_IpAllocatorType)
	*p = x
	return p
}

func (x MobilityD_IpAllocatorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MobilityD_IpAllocatorType) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_mconfig_mconfigs_proto_enumTypes[6].Descriptor()
}

func (MobilityD_IpAllocatorType) Type() protoreflect.EnumType {
	return &file_lte_protos_mconfig_mconfigs_proto_enumTypes[6]
}

func (x MobilityD_IpAllocatorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MobilityD_IpAllocatorType.Descriptor instead.
func (MobilityD_IpAllocatorType) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{7, 0}
}

// (0)Turning off NonEPS service, (1)Both CSFB and SMS, (2)only SMS
type MME_NonEPSServiceControl int32

const (
	MME_NON_EPS_SERVICE_CONTROL_OFF       MME_NonEPSServiceControl = 0
	MME_NON_EPS_SERVICE_CONTROL_CSFB_SMS  MME_NonEPSServiceControl = 1
	MME_NON_EPS_SERVICE_CONTROL_SMS       MME_NonEPSServiceControl = 2
	MME_NON_EPS_SERVICE_CONTROL_SMS_ORC8R MME_NonEPSServiceControl = 3
)

// Enum value maps for MME_NonEPSServiceControl.
var (
	MME_NonEPSServiceControl_name = map[int32]string{
		0: "NON_EPS_SERVICE_CONTROL_OFF",
		1: "NON_EPS_SERVICE_CONTROL_CSFB_SMS",
		2: "NON_EPS_SERVICE_CONTROL_SMS",
		3: "NON_EPS_SERVICE_CONTROL_SMS_ORC8R",
	}
	MME_NonEPSServiceControl_value = map[string]int32{
		"NON_EPS_SERVICE_CONTROL_OFF":       0,
		"NON_EPS_SERVICE_CONTROL_CSFB_SMS":  1,
		"NON_EPS_SERVICE_CONTROL_SMS":       2,
		"NON_EPS_SERVICE_CONTROL_SMS_ORC8R": 3,
	}
)

func (x MME_NonEPSServiceControl) Enum() *MME_NonEPSServiceControl {
	p := new(MME_NonEPSServiceControl)
	*p = x
	return p
}

func (x MME_NonEPSServiceControl) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MME_NonEPSServiceControl) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_mconfig_mconfigs_proto_enumTypes[7].Descriptor()
}

func (MME_NonEPSServiceControl) Type() protoreflect.EnumType {
	return &file_lte_protos_mconfig_mconfigs_proto_enumTypes[7]
}

func (x MME_NonEPSServiceControl) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MME_NonEPSServiceControl.Descriptor instead.
func (MME_NonEPSServiceControl) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{8, 0}
}

type ModeMapItem_FederatedMode int32

const (
	ModeMapItem_SPGW_SUBSCRIBER  ModeMapItem_FederatedMode = 0 // default mode is HSS + spgw_task
	ModeMapItem_LOCAL_SUBSCRIBER ModeMapItem_FederatedMode = 1 // will use subscriberDb + policydb
	ModeMapItem_S8_SUBSCRIBER    ModeMapItem_FederatedMode = 2 // will use HSS (feg) + s8_task
)

// Enum value maps for ModeMapItem_FederatedMode.
var (
	ModeMapItem_FederatedMode_name = map[int32]string{
		0: "SPGW_SUBSCRIBER",
		1: "LOCAL_SUBSCRIBER",
		2: "S8_SUBSCRIBER",
	}
	ModeMapItem_FederatedMode_value = map[string]int32{
		"SPGW_SUBSCRIBER":  0,
		"LOCAL_SUBSCRIBER": 1,
		"S8_SUBSCRIBER":    2,
	}
)

func (x ModeMapItem_FederatedMode) Enum() *ModeMapItem_FederatedMode {
	p := new(ModeMapItem_FederatedMode)
	*p = x
	return p
}

func (x ModeMapItem_FederatedMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModeMapItem_FederatedMode) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_mconfig_mconfigs_proto_enumTypes[8].Descriptor()
}

func (ModeMapItem_FederatedMode) Type() protoreflect.EnumType {
	return &file_lte_protos_mconfig_mconfigs_proto_enumTypes[8]
}

func (x ModeMapItem_FederatedMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModeMapItem_FederatedMode.Descriptor instead.
func (ModeMapItem_FederatedMode) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{10, 0}
}

type AgwD_LogLevel int32

const (
	AgwD_UNSET AgwD_LogLevel = 0
	AgwD_DEBUG AgwD_LogLevel = 1
	AgwD_INFO  AgwD_LogLevel = 2
	AgwD_WARN  AgwD_LogLevel = 3
	AgwD_ERROR AgwD_LogLevel = 4
)

// Enum value maps for AgwD_LogLevel.
var (
	AgwD_LogLevel_name = map[int32]string{
		0: "UNSET",
		1: "DEBUG",
		2: "INFO",
		3: "WARN",
		4: "ERROR",
	}
	AgwD_LogLevel_value = map[string]int32{
		"UNSET": 0,
		"DEBUG": 1,
		"INFO":  2,
		"WARN":  3,
		"ERROR": 4,
	}
)

func (x AgwD_LogLevel) Enum() *AgwD_LogLevel {
	p := new(AgwD_LogLevel)
	*p = x
	return p
}

func (x AgwD_LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgwD_LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_mconfig_mconfigs_proto_enumTypes[9].Descriptor()
}

func (AgwD_LogLevel) Type() protoreflect.EnumType {
	return &file_lte_protos_mconfig_mconfigs_proto_enumTypes[9]
}

func (x AgwD_LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgwD_LogLevel.Descriptor instead.
func (AgwD_LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{20, 0}
}

// --------------------------------------------------------------------------
// SentryConfig stores the network-wide Sentry.io configuration
// TODO(hcgatewood): remove this after 1.7 release, duplicated in the shared_mconfig
// --------------------------------------------------------------------------
type SentryConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// dsn_python initializes the Sentry Python SDK and sets the remote URL.
	// If set to empty string, Sentry Python SDK will not be initialized.
	DsnPython string `protobuf:"bytes,1,opt,name=dsn_python,json=dsnPython,proto3" json:"dsn_python,omitempty"`
	// dsn_native initializes the Sentry Native SDK for C/C++ and sets the
	// remote URL. If set to empty string, Sentry Native SDK will not be
	// initialized.
	DsnNative string `protobuf:"bytes,2,opt,name=dsn_native,json=dsnNative,proto3" json:"dsn_native,omitempty"`
	// upload_mme_log decides whether MME service log file (/var/log/mme.log)
	// is uploaded along with MME crashreports
	UploadMmeLog bool `protobuf:"varint,3,opt,name=upload_mme_log,json=uploadMmeLog,proto3" json:"upload_mme_log,omitempty"`
	// sample_rate sets the rate at which Python error events are sampled.
	// sample_rate should be a number between 0 (0% of errors sent) and 1 (100%
	// of errors sent)
	SampleRate float32 `protobuf:"fixed32,4,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	// message patterns that are excluded from Sentry (regex substring match)
	ExclusionPatterns []string `protobuf:"bytes,5,rep,name=exclusion_patterns,json=exclusionPatterns,proto3" json:"exclusion_patterns,omitempty"`
	// number_of_lines_in_log defines the number of lines from the
	// journal log that is uploaded with every crash report
	NumberOfLinesInLog uint32 `protobuf:"varint,6,opt,name=number_of_lines_in_log,json=numberOfLinesInLog,proto3" json:"number_of_lines_in_log,omitempty"`
}

func (x *SentryConfig) Reset() {
	*x = SentryConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SentryConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentryConfig) ProtoMessage() {}

func (x *SentryConfig) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentryConfig.ProtoReflect.Descriptor instead.
func (*SentryConfig) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{0}
}

func (x *SentryConfig) GetDsnPython() string {
	if x != nil {
		return x.DsnPython
	}
	return ""
}

func (x *SentryConfig) GetDsnNative() string {
	if x != nil {
		return x.DsnNative
	}
	return ""
}

func (x *SentryConfig) GetUploadMmeLog() bool {
	if x != nil {
		return x.UploadMmeLog
	}
	return false
}

func (x *SentryConfig) GetSampleRate() float32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *SentryConfig) GetExclusionPatterns() []string {
	if x != nil {
		return x.ExclusionPatterns
	}
	return nil
}

func (x *SentryConfig) GetNumberOfLinesInLog() uint32 {
	if x != nil {
		return x.NumberOfLinesInLog
	}
	return 0
}

// ------------------------------------------------------------------------------
// EnodebD configs
// ------------------------------------------------------------------------------
type EnodebD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	// Physical cell ID (0-504)
	Pci int32 `protobuf:"varint,2,opt,name=pci,proto3" json:"pci,omitempty"`
	// Frequency channel number. See niviuk.free.fr/lte_band.php for mapping to
	// frequency
	Earfcndl int32 `protobuf:"varint,3,opt,name=earfcndl,proto3" json:"earfcndl,omitempty"`
	// Bandwidth in MHz, from set {1.4, 3, 5, 10, 15, 20}
	BandwidthMhz int32 `protobuf:"varint,4,opt,name=bandwidth_mhz,json=bandwidthMhz,proto3" json:"bandwidth_mhz,omitempty"`
	// Network operator identifier.
	PlmnidList string `protobuf:"bytes,5,opt,name=plmnid_list,json=plmnidList,proto3" json:"plmnid_list,omitempty"`
	// TDD subframe config parameter. See http://niviuk.free.fr/lte_tdd.php
	SubframeAssignment int32 `protobuf:"varint,6,opt,name=subframe_assignment,json=subframeAssignment,proto3" json:"subframe_assignment,omitempty"`
	// TDD subframe config parameter. See http://niviuk.free.fr/lte_tdd.php
	SpecialSubframePattern int32 `protobuf:"varint,7,opt,name=special_subframe_pattern,json=specialSubframePattern,proto3" json:"special_subframe_pattern,omitempty"`
	// Enable eNodeB
	AllowEnodebTransmit bool `protobuf:"varint,8,opt,name=allow_enodeb_transmit,json=allowEnodebTransmit,proto3" json:"allow_enodeb_transmit,omitempty"`
	// Tracking area code. 16-bit
	Tac int32 `protobuf:"varint,9,opt,name=tac,proto3" json:"tac,omitempty"`
	// RAT type (2G/3G), used by eNB
	CsfbRat EnodebD_CSFBRat `protobuf:"varint,10,opt,name=csfb_rat,json=csfbRat,proto3,enum=magma.mconfig.EnodebD_CSFBRat" json:"csfb_rat,omitempty"`
	// 2G RAT frequencies /ARFCNs for redirection, used by eNB
	Arfcn_2G           []int32                          `protobuf:"varint,11,rep,packed,name=arfcn_2g,json=arfcn2g,proto3" json:"arfcn_2g,omitempty"`
	TddConfig          *EnodebD_TDDConfig               `protobuf:"bytes,12,opt,name=tdd_config,json=tddConfig,proto3" json:"tdd_config,omitempty"`
	FddConfig          *EnodebD_FDDConfig               `protobuf:"bytes,13,opt,name=fdd_config,json=fddConfig,proto3" json:"fdd_config,omitempty"`
	EnbConfigsBySerial map[string]*EnodebD_EnodebConfig `protobuf:"bytes,14,rep,name=enb_configs_by_serial,json=enbConfigsBySerial,proto3" json:"enb_configs_by_serial,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EnodebD) Reset() {
	*x = EnodebD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnodebD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnodebD) ProtoMessage() {}

func (x *EnodebD) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnodebD.ProtoReflect.Descriptor instead.
func (*EnodebD) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{1}
}

func (x *EnodebD) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel(0)
}

func (x *EnodebD) GetPci() int32 {
	if x != nil {
		return x.Pci
	}
	return 0
}

func (x *EnodebD) GetEarfcndl() int32 {
	if x != nil {
		return x.Earfcndl
	}
	return 0
}

func (x *EnodebD) GetBandwidthMhz() int32 {
	if x != nil {
		return x.BandwidthMhz
	}
	return 0
}

func (x *EnodebD) GetPlmnidList() string {
	if x != nil {
		return x.PlmnidList
	}
	return ""
}

func (x *EnodebD) GetSubframeAssignment() int32 {
	if x != nil {
		return x.SubframeAssignment
	}
	return 0
}

func (x *EnodebD) GetSpecialSubframePattern() int32 {
	if x != nil {
		return x.SpecialSubframePattern
	}
	return 0
}

func (x *EnodebD) GetAllowEnodebTransmit() bool {
	if x != nil {
		return x.AllowEnodebTransmit
	}
	return false
}

func (x *EnodebD) GetTac() int32 {
	if x != nil {
		return x.Tac
	}
	return 0
}

func (x *EnodebD) GetCsfbRat() EnodebD_CSFBRat {
	if x != nil {
		return x.CsfbRat
	}
	return EnodebD_CSFBRAT_2G
}

func (x *EnodebD) GetArfcn_2G() []int32 {
	if x != nil {
		return x.Arfcn_2G
	}
	return nil
}

func (x *EnodebD) GetTddConfig() *EnodebD_TDDConfig {
	if x != nil {
		return x.TddConfig
	}
	return nil
}

func (x *EnodebD) GetFddConfig() *EnodebD_FDDConfig {
	if x != nil {
		return x.FddConfig
	}
	return nil
}

func (x *EnodebD) GetEnbConfigsBySerial() map[string]*EnodebD_EnodebConfig {
	if x != nil {
		return x.EnbConfigsBySerial
	}
	return nil
}

// ------------------------------------------------------------------------------
// PipelineD configs
// ------------------------------------------------------------------------------
type PipelineD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	// Range of IPs allocated to UEs
	UeIpBlock string `protobuf:"bytes,2,opt,name=ue_ip_block,json=ueIpBlock,proto3" json:"ue_ip_block,omitempty"`
	// Whether NAT is enabled
	NatEnabled bool `protobuf:"varint,3,opt,name=nat_enabled,json=natEnabled,proto3" json:"nat_enabled,omitempty"`
	// repeated PolicyRule policy_rules = 5; // Policies have moved to policydb.proto
	DefaultRuleId            string                      `protobuf:"bytes,6,opt,name=default_rule_id,json=defaultRuleId,proto3" json:"default_rule_id,omitempty"` // This should match a rule id in policy_rules
	Services                 []PipelineD_NetworkServices `protobuf:"varint,8,rep,packed,name=services,proto3,enum=magma.mconfig.PipelineD_NetworkServices" json:"services,omitempty"`
	AllowedGrePeers          []*PipelineD_AllowedGrePeer `protobuf:"bytes,9,rep,name=allowed_gre_peers,json=allowedGrePeers,proto3" json:"allowed_gre_peers,omitempty"`
	IpdrExportDst            *PipelineD_IPDRExportDst    `protobuf:"bytes,10,opt,name=ipdr_export_dst,json=ipdrExportDst,proto3" json:"ipdr_export_dst,omitempty"`
	LiUes                    *PipelineD_LiUes            `protobuf:"bytes,12,opt,name=li_ues,json=liUes,proto3" json:"li_ues,omitempty"`
	SgiManagementIfaceVlan   string                      `protobuf:"bytes,13,opt,name=sgi_management_iface_vlan,json=sgiManagementIfaceVlan,proto3" json:"sgi_management_iface_vlan,omitempty"`
	SgiManagementIfaceIpAddr string                      `protobuf:"bytes,14,opt,name=sgi_management_iface_ip_addr,json=sgiManagementIfaceIpAddr,proto3" json:"sgi_management_iface_ip_addr,omitempty"`
	SgiManagementIfaceGw     string                      `protobuf:"bytes,15,opt,name=sgi_management_iface_gw,json=sgiManagementIfaceGw,proto3" json:"sgi_management_iface_gw,omitempty"`
	HeConfig                 *PipelineD_HEConfig         `protobuf:"bytes,17,opt,name=he_config,json=heConfig,proto3" json:"he_config,omitempty"`
	// Enables 5G Standalone (SA) at a network level
	Enable5GFeatures  bool   `protobuf:"varint,18,opt,name=enable5g_features,json=enable5gFeatures,proto3" json:"enable5g_features,omitempty"`
	UpfNodeIdentifier string `protobuf:"bytes,19,opt,name=upf_node_identifier,json=upfNodeIdentifier,proto3" json:"upf_node_identifier,omitempty"`
	// SGi management IPv6 address with network mask
	SgiManagementIfaceIpv6Addr string `protobuf:"bytes,20,opt,name=sgi_management_iface_ipv6_addr,json=sgiManagementIfaceIpv6Addr,proto3" json:"sgi_management_iface_ipv6_addr,omitempty"`
	// IPv6 address of SGi management network GW
	SgiManagementIfaceIpv6Gw string `protobuf:"bytes,21,opt,name=sgi_management_iface_ipv6_gw,json=sgiManagementIfaceIpv6Gw,proto3" json:"sgi_management_iface_ipv6_gw,omitempty"`
}

func (x *PipelineD) Reset() {
	*x = PipelineD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineD) ProtoMessage() {}

func (x *PipelineD) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineD.ProtoReflect.Descriptor instead.
func (*PipelineD) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{2}
}

func (x *PipelineD) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel(0)
}

func (x *PipelineD) GetUeIpBlock() string {
	if x != nil {
		return x.UeIpBlock
	}
	return ""
}

func (x *PipelineD) GetNatEnabled() bool {
	if x != nil {
		return x.NatEnabled
	}
	return false
}

func (x *PipelineD) GetDefaultRuleId() string {
	if x != nil {
		return x.DefaultRuleId
	}
	return ""
}

func (x *PipelineD) GetServices() []PipelineD_NetworkServices {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *PipelineD) GetAllowedGrePeers() []*PipelineD_AllowedGrePeer {
	if x != nil {
		return x.AllowedGrePeers
	}
	return nil
}

func (x *PipelineD) GetIpdrExportDst() *PipelineD_IPDRExportDst {
	if x != nil {
		return x.IpdrExportDst
	}
	return nil
}

func (x *PipelineD) GetLiUes() *PipelineD_LiUes {
	if x != nil {
		return x.LiUes
	}
	return nil
}

func (x *PipelineD) GetSgiManagementIfaceVlan() string {
	if x != nil {
		return x.SgiManagementIfaceVlan
	}
	return ""
}

func (x *PipelineD) GetSgiManagementIfaceIpAddr() string {
	if x != nil {
		return x.SgiManagementIfaceIpAddr
	}
	return ""
}

func (x *PipelineD) GetSgiManagementIfaceGw() string {
	if x != nil {
		return x.SgiManagementIfaceGw
	}
	return ""
}

func (x *PipelineD) GetHeConfig() *PipelineD_HEConfig {
	if x != nil {
		return x.HeConfig
	}
	return nil
}

func (x *PipelineD) GetEnable5GFeatures() bool {
	if x != nil {
		return x.Enable5GFeatures
	}
	return false
}

func (x *PipelineD) GetUpfNodeIdentifier() string {
	if x != nil {
		return x.UpfNodeIdentifier
	}
	return ""
}

func (x *PipelineD) GetSgiManagementIfaceIpv6Addr() string {
	if x != nil {
		return x.SgiManagementIfaceIpv6Addr
	}
	return ""
}

func (x *PipelineD) GetSgiManagementIfaceIpv6Gw() string {
	if x != nil {
		return x.SgiManagementIfaceIpv6Gw
	}
	return ""
}

// ------------------------------------------------------------------------------
// SessionD configs
// ------------------------------------------------------------------------------
type SessionD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	// DEPRECATED
	// Enable forwarding S6a related requests to Federated GW
	//
	// Deprecated: Do not use.
	RelayEnabled           bool                    `protobuf:"varint,2,opt,name=relay_enabled,json=relayEnabled,proto3" json:"relay_enabled,omitempty"`
	WalletExhaustDetection *WalletExhaustDetection `protobuf:"bytes,3,opt,name=wallet_exhaust_detection,json=walletExhaustDetection,proto3" json:"wallet_exhaust_detection,omitempty"`
	// Enable relaying Gx/Gy messages via FeG RPC
	GxGyRelayEnabled bool `protobuf:"varint,4,opt,name=gx_gy_relay_enabled,json=gxGyRelayEnabled,proto3" json:"gx_gy_relay_enabled,omitempty"`
	// DEPRECATED: now configured in "shared_mconfig"
	// sentry_config stores the Sentry.io configuration for this service
	//
	// Deprecated: Do not use.
	SentryConfig *SentryConfig `protobuf:"bytes,5,opt,name=sentry_config,json=sentryConfig,proto3" json:"sentry_config,omitempty"`
	// Enables 5G Standalone (SA) at a network level
	Enable5GFeatures bool `protobuf:"varint,6,opt,name=enable5g_features,json=enable5gFeatures,proto3" json:"enable5g_features,omitempty"`
}

func (x *SessionD) Reset() {
	*x = SessionD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionD) ProtoMessage() {}

func (x *SessionD) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionD.ProtoReflect.Descriptor instead.
func (*SessionD) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{3}
}

func (x *SessionD) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel(0)
}

// Deprecated: Do not use.
func (x *SessionD) GetRelayEnabled() bool {
	if x != nil {
		return x.RelayEnabled
	}
	return false
}

func (x *SessionD) GetWalletExhaustDetection() *WalletExhaustDetection {
	if x != nil {
		return x.WalletExhaustDetection
	}
	return nil
}

func (x *SessionD) GetGxGyRelayEnabled() bool {
	if x != nil {
		return x.GxGyRelayEnabled
	}
	return false
}

// Deprecated: Do not use.
func (x *SessionD) GetSentryConfig() *SentryConfig {
	if x != nil {
		return x.SentryConfig
	}
	return nil
}

func (x *SessionD) GetEnable5GFeatures() bool {
	if x != nil {
		return x.Enable5GFeatures
	}
	return false
}

type WalletExhaustDetection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable the feature where session is terminated on wallet exhaust
	TerminateOnExhaust bool `protobuf:"varint,1,opt,name=terminate_on_exhaust,json=terminateOnExhaust,proto3" json:"terminate_on_exhaust,omitempty"`
	// How wallet exhast is detected on SessionD
	Method WalletExhaustDetection_Method `protobuf:"varint,2,opt,name=method,proto3,enum=magma.mconfig.WalletExhaustDetection_Method" json:"method,omitempty"`
	// How long to wait before terminating a out-of-wallet subscriber on attach
	TimeoutMs uint32 `protobuf:"varint,3,opt,name=timeout_ms,json=timeoutMs,proto3" json:"timeout_ms,omitempty"`
}

func (x *WalletExhaustDetection) Reset() {
	*x = WalletExhaustDetection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletExhaustDetection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletExhaustDetection) ProtoMessage() {}

func (x *WalletExhaustDetection) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletExhaustDetection.ProtoReflect.Descriptor instead.
func (*WalletExhaustDetection) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{4}
}

func (x *WalletExhaustDetection) GetTerminateOnExhaust() bool {
	if x != nil {
		return x.TerminateOnExhaust
	}
	return false
}

func (x *WalletExhaustDetection) GetMethod() WalletExhaustDetection_Method {
	if x != nil {
		return x.Method
	}
	return WalletExhaustDetection_GxTrackedRules
}

func (x *WalletExhaustDetection) GetTimeoutMs() uint32 {
	if x != nil {
		return x.TimeoutMs
	}
	return 0
}

// ------------------------------------------------------------------------------
// PolicyDB configs
// ------------------------------------------------------------------------------
type PolicyDB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
}

func (x *PolicyDB) Reset() {
	*x = PolicyDB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyDB) ProtoMessage() {}

func (x *PolicyDB) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyDB.ProtoReflect.Descriptor instead.
func (*PolicyDB) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{5}
}

func (x *PolicyDB) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel(0)
}

// ------------------------------------------------------------------------------
// RedirectD configs
// ------------------------------------------------------------------------------
type RedirectD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
}

func (x *RedirectD) Reset() {
	*x = RedirectD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedirectD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedirectD) ProtoMessage() {}

func (x *RedirectD) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedirectD.ProtoReflect.Descriptor instead.
func (*RedirectD) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{6}
}

func (x *RedirectD) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel(0)
}

// ------------------------------------------------------------------------------
// MobilityD configs
// ------------------------------------------------------------------------------
type MobilityD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	// An IP block is a range of IP addresses specified by a network address and
	// a prefix-length of the netmask. For example,
	//
	//	IPv4 IP block:      "192.168.0.0/24"
	IpBlock string `protobuf:"bytes,2,opt,name=ip_block,json=ipBlock,proto3" json:"ip_block,omitempty"`
	// ip allocation type, either dhcp or ip_pool
	// default is ip_pool
	IpAllocatorType MobilityD_IpAllocatorType `protobuf:"varint,3,opt,name=ip_allocator_type,json=ipAllocatorType,proto3,enum=magma.mconfig.MobilityD_IpAllocatorType" json:"ip_allocator_type,omitempty"`
	// Enable Static IP from subscriberDB
	StaticIpEnabled bool `protobuf:"varint,4,opt,name=static_ip_enabled,json=staticIpEnabled,proto3" json:"static_ip_enabled,omitempty"`
	// Enable multi APN IP allocation
	MultiApnIpAlloc bool `protobuf:"varint,5,opt,name=multi_apn_ip_alloc,json=multiApnIpAlloc,proto3" json:"multi_apn_ip_alloc,omitempty"`
	// IPv6 block for IPv6 allocator, for example:
	// IPv6 IP block:      "fdee:5:6c::/48"
	Ipv6Block string `protobuf:"bytes,10,opt,name=ipv6_block,json=ipv6Block,proto3" json:"ipv6_block,omitempty"`
	// Select ipv6 session prefix allocation type, example:
	// "RANDOM", "HASH"
	Ipv6PrefixAllocationType string `protobuf:"bytes,11,opt,name=ipv6_prefix_allocation_type,json=ipv6PrefixAllocationType,proto3" json:"ipv6_prefix_allocation_type,omitempty"`
}

func (x *MobilityD) Reset() {
	*x = MobilityD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MobilityD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MobilityD) ProtoMessage() {}

func (x *MobilityD) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MobilityD.ProtoReflect.Descriptor instead.
func (*MobilityD) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{7}
}

func (x *MobilityD) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel(0)
}

func (x *MobilityD) GetIpBlock() string {
	if x != nil {
		return x.IpBlock
	}
	return ""
}

func (x *MobilityD) GetIpAllocatorType() MobilityD_IpAllocatorType {
	if x != nil {
		return x.IpAllocatorType
	}
	return MobilityD_IP_POOL
}

func (x *MobilityD) GetStaticIpEnabled() bool {
	if x != nil {
		return x.StaticIpEnabled
	}
	return false
}

func (x *MobilityD) GetMultiApnIpAlloc() bool {
	if x != nil {
		return x.MultiApnIpAlloc
	}
	return false
}

func (x *MobilityD) GetIpv6Block() string {
	if x != nil {
		return x.Ipv6Block
	}
	return ""
}

func (x *MobilityD) GetIpv6PrefixAllocationType() string {
	if x != nil {
		return x.Ipv6PrefixAllocationType
	}
	return ""
}

// ------------------------------------------------------------------------------
// MME configs
// ------------------------------------------------------------------------------
type MME struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	// Mobile country code
	Mcc string `protobuf:"bytes,2,opt,name=mcc,proto3" json:"mcc,omitempty"`
	// Mobile network code
	Mnc string `protobuf:"bytes,3,opt,name=mnc,proto3" json:"mnc,omitempty"`
	// [deprecated] Tracking area code. 16-bit
	// Is overrideen by field 15
	Tac int32 `protobuf:"varint,4,opt,name=tac,proto3" json:"tac,omitempty"`
	// MME group identifier - unique within a PLMN. 16-bit
	MmeGid int32 `protobuf:"varint,5,opt,name=mme_gid,json=mmeGid,proto3" json:"mme_gid,omitempty"`
	// MME code - unique within an MME group. 8-bit
	MmeCode int32 `protobuf:"varint,6,opt,name=mme_code,json=mmeCode,proto3" json:"mme_code,omitempty"`
	// Enable DNS Caching. Will be filled by DnsD
	EnableDnsCaching bool `protobuf:"varint,7,opt,name=enable_dns_caching,json=enableDnsCaching,proto3" json:"enable_dns_caching,omitempty"`
	// DEPRECATED
	// Enable credit control tracking with OCS and forwarding S6a related
	// requests to Federated GW
	RelayEnabled bool `protobuf:"varint,8,opt,name=relay_enabled,json=relayEnabled,proto3" json:"relay_enabled,omitempty"`
	// For indicating one of the four modes
	NonEpsServiceControl MME_NonEPSServiceControl `protobuf:"varint,9,opt,name=non_eps_service_control,json=nonEpsServiceControl,proto3,enum=magma.mconfig.MME_NonEPSServiceControl" json:"non_eps_service_control,omitempty"`
	// Mobile country code for CSFB
	CsfbMcc string `protobuf:"bytes,10,opt,name=csfb_mcc,json=csfbMcc,proto3" json:"csfb_mcc,omitempty"`
	// Mobile network code for CSFB
	CsfbMnc string `protobuf:"bytes,11,opt,name=csfb_mnc,json=csfbMnc,proto3" json:"csfb_mnc,omitempty"`
	// Location area code. 16-bit
	Lac int32 `protobuf:"varint,12,opt,name=lac,proto3" json:"lac,omitempty"`
	// If relay_enabled is false, this determines whether cloud subscriberdb
	// or local subscriberdb is used for authentication requests.
	CloudSubscriberdbEnabled bool `protobuf:"varint,14,opt,name=cloud_subscriberdb_enabled,json=cloudSubscriberdbEnabled,proto3" json:"cloud_subscriberdb_enabled,omitempty"`
	// The Tracking Area Code of every connected eNodeB needs to be
	// registered the MME.
	// Overrides field 4 if this is not empty. Field 4 is in the process of
	// being deprecated
	AttachedEnodebTacs []int32 `protobuf:"varint,15,rep,packed,name=attached_enodeb_tacs,json=attachedEnodebTacs,proto3" json:"attached_enodeb_tacs,omitempty"`
	// MME relative capacity - capacity within an MME group. 8-bit
	MmeRelativeCapacity int32 `protobuf:"varint,16,opt,name=mme_relative_capacity,json=mmeRelativeCapacity,proto3" json:"mme_relative_capacity,omitempty"`
	// Primary DNS server
	DnsPrimary string `protobuf:"bytes,20,opt,name=dns_primary,json=dnsPrimary,proto3" json:"dns_primary,omitempty"`
	// Secondary DNS server
	DnsSecondary string `protobuf:"bytes,21,opt,name=dns_secondary,json=dnsSecondary,proto3" json:"dns_secondary,omitempty"`
	// Whether NAT is enabled
	NatEnabled bool `protobuf:"varint,22,opt,name=nat_enabled,json=natEnabled,proto3" json:"nat_enabled,omitempty"`
	// Enable relaying S6a messages via FeG RPC
	HssRelayEnabled bool `protobuf:"varint,23,opt,name=hss_relay_enabled,json=hssRelayEnabled,proto3" json:"hss_relay_enabled,omitempty"`
	// Apn Correction feature
	EnableApnCorrection  bool                    `protobuf:"varint,24,opt,name=enable_apn_correction,json=enableApnCorrection,proto3" json:"enable_apn_correction,omitempty"`
	ApnCorrectionMapList []*MME_ApnCorrectionMap `protobuf:"bytes,25,rep,name=apn_correction_map_list,json=apnCorrectionMapList,proto3" json:"apn_correction_map_list,omitempty"`
	// P_CSCF IP address configs
	Ipv4PCscfAddress string `protobuf:"bytes,26,opt,name=ipv4_p_cscf_address,json=ipv4PCscfAddress,proto3" json:"ipv4_p_cscf_address,omitempty"`
	Ipv6PCscfAddress string `protobuf:"bytes,27,opt,name=ipv6_p_cscf_address,json=ipv6PCscfAddress,proto3" json:"ipv6_p_cscf_address,omitempty"`
	// IPv6 DNS server
	Ipv6DnsAddress string `protobuf:"bytes,30,opt,name=ipv6_dns_address,json=ipv6DnsAddress,proto3" json:"ipv6_dns_address,omitempty"`
	// SGW S1U endpoint on AGW
	Ipv4SgwS1UAddr   string                  `protobuf:"bytes,31,opt,name=ipv4_sgw_s1u_addr,json=ipv4SgwS1uAddr,proto3" json:"ipv4_sgw_s1u_addr,omitempty"`
	RestrictedPlmns  []*MME_PlmnConfig       `protobuf:"bytes,32,rep,name=restricted_plmns,json=restrictedPlmns,proto3" json:"restricted_plmns,omitempty"`
	ServiceAreaMaps  map[string]*MME_TacList `protobuf:"bytes,33,rep,name=service_area_maps,json=serviceAreaMaps,proto3" json:"service_area_maps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FederatedModeMap *FederatedModeMap       `protobuf:"bytes,34,opt,name=federated_mode_map,json=federatedModeMap,proto3" json:"federated_mode_map,omitempty"`
	RestrictedImeis  []*MME_ImeiConfig       `protobuf:"bytes,35,rep,name=restricted_imeis,json=restrictedImeis,proto3" json:"restricted_imeis,omitempty"`
	// MME congestion control configs
	CongestionControlEnabled bool `protobuf:"varint,40,opt,name=congestion_control_enabled,json=congestionControlEnabled,proto3" json:"congestion_control_enabled,omitempty"`
	// DEPRECATED: now configured in "shared_mconfig"
	// sentry_config stores the Sentry.io configuration for this service
	//
	// Deprecated: Do not use.
	SentryConfig *SentryConfig `protobuf:"bytes,45,opt,name=sentry_config,json=sentryConfig,proto3" json:"sentry_config,omitempty"`
	// Enables 5G Standalone (SA) at a network level
	Enable5GFeatures bool `protobuf:"varint,46,opt,name=enable5g_features,json=enable5gFeatures,proto3" json:"enable5g_features,omitempty"`
	// AMF Slice Service Type (SST)
	AmfDefaultSliceServiceType uint32 `protobuf:"varint,47,opt,name=amf_default_slice_service_type,json=amfDefaultSliceServiceType,proto3" json:"amf_default_slice_service_type,omitempty"`
	// AMF Slice Descriptor (SD)
	AmfDefaultSliceDifferentiator string `protobuf:"bytes,48,opt,name=amf_default_slice_differentiator,json=amfDefaultSliceDifferentiator,proto3" json:"amf_default_slice_differentiator,omitempty"`
	// AMF Name
	AmfName string `protobuf:"bytes,50,opt,name=amf_name,json=amfName,proto3" json:"amf_name,omitempty"`
	// AMF Region ID
	AmfRegionId string `protobuf:"bytes,51,opt,name=amf_region_id,json=amfRegionId,proto3" json:"amf_region_id,omitempty"`
	// AMF Set ID
	AmfSetId string `protobuf:"bytes,52,opt,name=amf_set_id,json=amfSetId,proto3" json:"amf_set_id,omitempty"`
	// AMF pointer
	AmfPointer string `protobuf:"bytes,53,opt,name=amf_pointer,json=amfPointer,proto3" json:"amf_pointer,omitempty"`
	// SGW S1U ipv6 endpoint on AGW
	Ipv6SgwS1UAddr string `protobuf:"bytes,54,opt,name=ipv6_sgw_s1u_addr,json=ipv6SgwS1uAddr,proto3" json:"ipv6_sgw_s1u_addr,omitempty"`
}

func (x *MME) Reset() {
	*x = MME{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MME) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MME) ProtoMessage() {}

func (x *MME) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MME.ProtoReflect.Descriptor instead.
func (*MME) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{8}
}

func (x *MME) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel(0)
}

func (x *MME) GetMcc() string {
	if x != nil {
		return x.Mcc
	}
	return ""
}

func (x *MME) GetMnc() string {
	if x != nil {
		return x.Mnc
	}
	return ""
}

func (x *MME) GetTac() int32 {
	if x != nil {
		return x.Tac
	}
	return 0
}

func (x *MME) GetMmeGid() int32 {
	if x != nil {
		return x.MmeGid
	}
	return 0
}

func (x *MME) GetMmeCode() int32 {
	if x != nil {
		return x.MmeCode
	}
	return 0
}

func (x *MME) GetEnableDnsCaching() bool {
	if x != nil {
		return x.EnableDnsCaching
	}
	return false
}

func (x *MME) GetRelayEnabled() bool {
	if x != nil {
		return x.RelayEnabled
	}
	return false
}

func (x *MME) GetNonEpsServiceControl() MME_NonEPSServiceControl {
	if x != nil {
		return x.NonEpsServiceControl
	}
	return MME_NON_EPS_SERVICE_CONTROL_OFF
}

func (x *MME) GetCsfbMcc() string {
	if x != nil {
		return x.CsfbMcc
	}
	return ""
}

func (x *MME) GetCsfbMnc() string {
	if x != nil {
		return x.CsfbMnc
	}
	return ""
}

func (x *MME) GetLac() int32 {
	if x != nil {
		return x.Lac
	}
	return 0
}

func (x *MME) GetCloudSubscriberdbEnabled() bool {
	if x != nil {
		return x.CloudSubscriberdbEnabled
	}
	return false
}

func (x *MME) GetAttachedEnodebTacs() []int32 {
	if x != nil {
		return x.AttachedEnodebTacs
	}
	return nil
}

func (x *MME) GetMmeRelativeCapacity() int32 {
	if x != nil {
		return x.MmeRelativeCapacity
	}
	return 0
}

func (x *MME) GetDnsPrimary() string {
	if x != nil {
		return x.DnsPrimary
	}
	return ""
}

func (x *MME) GetDnsSecondary() string {
	if x != nil {
		return x.DnsSecondary
	}
	return ""
}

func (x *MME) GetNatEnabled() bool {
	if x != nil {
		return x.NatEnabled
	}
	return false
}

func (x *MME) GetHssRelayEnabled() bool {
	if x != nil {
		return x.HssRelayEnabled
	}
	return false
}

func (x *MME) GetEnableApnCorrection() bool {
	if x != nil {
		return x.EnableApnCorrection
	}
	return false
}

func (x *MME) GetApnCorrectionMapList() []*MME_ApnCorrectionMap {
	if x != nil {
		return x.ApnCorrectionMapList
	}
	return nil
}

func (x *MME) GetIpv4PCscfAddress() string {
	if x != nil {
		return x.Ipv4PCscfAddress
	}
	return ""
}

func (x *MME) GetIpv6PCscfAddress() string {
	if x != nil {
		return x.Ipv6PCscfAddress
	}
	return ""
}

func (x *MME) GetIpv6DnsAddress() string {
	if x != nil {
		return x.Ipv6DnsAddress
	}
	return ""
}

func (x *MME) GetIpv4SgwS1UAddr() string {
	if x != nil {
		return x.Ipv4SgwS1UAddr
	}
	return ""
}

func (x *MME) GetRestrictedPlmns() []*MME_PlmnConfig {
	if x != nil {
		return x.RestrictedPlmns
	}
	return nil
}

func (x *MME) GetServiceAreaMaps() map[string]*MME_TacList {
	if x != nil {
		return x.ServiceAreaMaps
	}
	return nil
}

func (x *MME) GetFederatedModeMap() *FederatedModeMap {
	if x != nil {
		return x.FederatedModeMap
	}
	return nil
}

func (x *MME) GetRestrictedImeis() []*MME_ImeiConfig {
	if x != nil {
		return x.RestrictedImeis
	}
	return nil
}

func (x *MME) GetCongestionControlEnabled() bool {
	if x != nil {
		return x.CongestionControlEnabled
	}
	return false
}

// Deprecated: Do not use.
func (x *MME) GetSentryConfig() *SentryConfig {
	if x != nil {
		return x.SentryConfig
	}
	return nil
}

func (x *MME) GetEnable5GFeatures() bool {
	if x != nil {
		return x.Enable5GFeatures
	}
	return false
}

func (x *MME) GetAmfDefaultSliceServiceType() uint32 {
	if x != nil {
		return x.AmfDefaultSliceServiceType
	}
	return 0
}

func (x *MME) GetAmfDefaultSliceDifferentiator() string {
	if x != nil {
		return x.AmfDefaultSliceDifferentiator
	}
	return ""
}

func (x *MME) GetAmfName() string {
	if x != nil {
		return x.AmfName
	}
	return ""
}

func (x *MME) GetAmfRegionId() string {
	if x != nil {
		return x.AmfRegionId
	}
	return ""
}

func (x *MME) GetAmfSetId() string {
	if x != nil {
		return x.AmfSetId
	}
	return ""
}

func (x *MME) GetAmfPointer() string {
	if x != nil {
		return x.AmfPointer
	}
	return ""
}

func (x *MME) GetIpv6SgwS1UAddr() string {
	if x != nil {
		return x.Ipv6SgwS1UAddr
	}
	return ""
}

type FederatedModeMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool           `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Mapping []*ModeMapItem `protobuf:"bytes,2,rep,name=mapping,proto3" json:"mapping,omitempty"`
}

func (x *FederatedModeMap) Reset() {
	*x = FederatedModeMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FederatedModeMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FederatedModeMap) ProtoMessage() {}

func (x *FederatedModeMap) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FederatedModeMap.ProtoReflect.Descriptor instead.
func (*FederatedModeMap) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{9}
}

func (x *FederatedModeMap) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *FederatedModeMap) GetMapping() []*ModeMapItem {
	if x != nil {
		return x.Mapping
	}
	return nil
}

type ModeMapItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode      ModeMapItem_FederatedMode `protobuf:"varint,1,opt,name=mode,proto3,enum=magma.mconfig.ModeMapItem_FederatedMode" json:"mode,omitempty"`
	Plmn      string                    `protobuf:"bytes,2,opt,name=plmn,proto3" json:"plmn,omitempty"`
	ImsiRange string                    `protobuf:"bytes,3,opt,name=imsi_range,json=imsiRange,proto3" json:"imsi_range,omitempty"`
	Apn       string                    `protobuf:"bytes,4,opt,name=apn,proto3" json:"apn,omitempty"`
}

func (x *ModeMapItem) Reset() {
	*x = ModeMapItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModeMapItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModeMapItem) ProtoMessage() {}

func (x *ModeMapItem) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModeMapItem.ProtoReflect.Descriptor instead.
func (*ModeMapItem) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{10}
}

func (x *ModeMapItem) GetMode() ModeMapItem_FederatedMode {
	if x != nil {
		return x.Mode
	}
	return ModeMapItem_SPGW_SUBSCRIBER
}

func (x *ModeMapItem) GetPlmn() string {
	if x != nil {
		return x.Plmn
	}
	return ""
}

func (x *ModeMapItem) GetImsiRange() string {
	if x != nil {
		return x.ImsiRange
	}
	return ""
}

func (x *ModeMapItem) GetApn() string {
	if x != nil {
		return x.Apn
	}
	return ""
}

// ------------------------------------------------------------------------------
// SubscriberDB configs
// ------------------------------------------------------------------------------
type SubscriberDB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	// Operator configuration field for LTE
	LteAuthOp []byte `protobuf:"bytes,2,opt,name=lte_auth_op,json=lteAuthOp,proto3" json:"lte_auth_op,omitempty"`
	// Authentication management field for LTE
	LteAuthAmf  []byte                                       `protobuf:"bytes,3,opt,name=lte_auth_amf,json=lteAuthAmf,proto3" json:"lte_auth_amf,omitempty"`
	SubProfiles map[string]*SubscriberDB_SubscriptionProfile `protobuf:"bytes,4,rep,name=sub_profiles,json=subProfiles,proto3" json:"sub_profiles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// DEPRECATED
	// Enable forwarding S6a related requests to Federated GW
	RelayEnabled bool `protobuf:"varint,5,opt,name=relay_enabled,json=relayEnabled,proto3" json:"relay_enabled,omitempty"`
	// Enable relaying S6a messages via FeG RPC
	HssRelayEnabled bool `protobuf:"varint,6,opt,name=hss_relay_enabled,json=hssRelayEnabled,proto3" json:"hss_relay_enabled,omitempty"`
	// Interval in seconds between gateway and cloud sync
	SyncInterval uint32 `protobuf:"varint,7,opt,name=sync_interval,json=syncInterval,proto3" json:"sync_interval,omitempty"`
	// Enables 5G Standalone (SA) at a network level
	Enable5GFeatures bool `protobuf:"varint,8,opt,name=enable5g_features,json=enable5gFeatures,proto3" json:"enable5g_features,omitempty"`
}

func (x *SubscriberDB) Reset() {
	*x = SubscriberDB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriberDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriberDB) ProtoMessage() {}

func (x *SubscriberDB) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriberDB.ProtoReflect.Descriptor instead.
func (*SubscriberDB) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{11}
}

func (x *SubscriberDB) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel(0)
}

func (x *SubscriberDB) GetLteAuthOp() []byte {
	if x != nil {
		return x.LteAuthOp
	}
	return nil
}

func (x *SubscriberDB) GetLteAuthAmf() []byte {
	if x != nil {
		return x.LteAuthAmf
	}
	return nil
}

func (x *SubscriberDB) GetSubProfiles() map[string]*SubscriberDB_SubscriptionProfile {
	if x != nil {
		return x.SubProfiles
	}
	return nil
}

func (x *SubscriberDB) GetRelayEnabled() bool {
	if x != nil {
		return x.RelayEnabled
	}
	return false
}

func (x *SubscriberDB) GetHssRelayEnabled() bool {
	if x != nil {
		return x.HssRelayEnabled
	}
	return false
}

func (x *SubscriberDB) GetSyncInterval() uint32 {
	if x != nil {
		return x.SyncInterval
	}
	return 0
}

func (x *SubscriberDB) GetEnable5GFeatures() bool {
	if x != nil {
		return x.Enable5GFeatures
	}
	return false
}

// ------------------------------------------------------------------------------
// LighttpD configs
// ------------------------------------------------------------------------------
type LighttpD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel      protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	EnableCaching bool            `protobuf:"varint,2,opt,name=enable_caching,json=enableCaching,proto3" json:"enable_caching,omitempty"`
}

func (x *LighttpD) Reset() {
	*x = LighttpD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LighttpD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LighttpD) ProtoMessage() {}

func (x *LighttpD) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LighttpD.ProtoReflect.Descriptor instead.
func (*LighttpD) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{12}
}

func (x *LighttpD) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel(0)
}

func (x *LighttpD) GetEnableCaching() bool {
	if x != nil {
		return x.EnableCaching
	}
	return false
}

// ------------------------------------------------------------------------------
// MonitorD configs
// ------------------------------------------------------------------------------
type MonitorD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel        protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	PollingInterval int32           `protobuf:"varint,60,opt,name=polling_interval,json=pollingInterval,proto3" json:"polling_interval,omitempty"`
}

func (x *MonitorD) Reset() {
	*x = MonitorD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorD) ProtoMessage() {}

func (x *MonitorD) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorD.ProtoReflect.Descriptor instead.
func (*MonitorD) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{13}
}

func (x *MonitorD) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel(0)
}

func (x *MonitorD) GetPollingInterval() int32 {
	if x != nil {
		return x.PollingInterval
	}
	return 0
}

// ------------------------------------------------------------------------------
// DPID configs
// ------------------------------------------------------------------------------
type DPID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
}

func (x *DPID) Reset() {
	*x = DPID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DPID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DPID) ProtoMessage() {}

func (x *DPID) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DPID.ProtoReflect.Descriptor instead.
func (*DPID) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{14}
}

func (x *DPID) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel(0)
}

// ------------------------------------------------------------------------------
// ConnectionD configs
// ------------------------------------------------------------------------------
type ConnectionD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
}

func (x *ConnectionD) Reset() {
	*x = ConnectionD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionD) ProtoMessage() {}

func (x *ConnectionD) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionD.ProtoReflect.Descriptor instead.
func (*ConnectionD) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{15}
}

func (x *ConnectionD) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel(0)
}

// ------------------------------------------------------------------------------
// LIAgentD configs
// ------------------------------------------------------------------------------
type LIAgentD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel    protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	NprobeTasks []*NProbeTask   `protobuf:"bytes,2,rep,name=nprobe_tasks,json=nprobeTasks,proto3" json:"nprobe_tasks,omitempty"`
}

func (x *LIAgentD) Reset() {
	*x = LIAgentD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LIAgentD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LIAgentD) ProtoMessage() {}

func (x *LIAgentD) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LIAgentD.ProtoReflect.Descriptor instead.
func (*LIAgentD) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{16}
}

func (x *LIAgentD) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel(0)
}

func (x *LIAgentD) GetNprobeTasks() []*NProbeTask {
	if x != nil {
		return x.NprobeTasks
	}
	return nil
}

type NProbeTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId        string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TargetId      string `protobuf:"bytes,2,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	TargetType    string `protobuf:"bytes,3,opt,name=target_type,json=targetType,proto3" json:"target_type,omitempty"`
	DeliveryType  string `protobuf:"bytes,4,opt,name=delivery_type,json=deliveryType,proto3" json:"delivery_type,omitempty"`
	CorrelationId uint64 `protobuf:"varint,5,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	DomainId      string `protobuf:"bytes,6,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *NProbeTask) Reset() {
	*x = NProbeTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NProbeTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NProbeTask) ProtoMessage() {}

func (x *NProbeTask) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NProbeTask.ProtoReflect.Descriptor instead.
func (*NProbeTask) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{17}
}

func (x *NProbeTask) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *NProbeTask) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *NProbeTask) GetTargetType() string {
	if x != nil {
		return x.TargetType
	}
	return ""
}

func (x *NProbeTask) GetDeliveryType() string {
	if x != nil {
		return x.DeliveryType
	}
	return ""
}

func (x *NProbeTask) GetCorrelationId() uint64 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *NProbeTask) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

// ------------------------------------------------------------------------------
// DnsD configs
// ------------------------------------------------------------------------------
type DnsD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel          protos.LogLevel                 `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	EnableCaching     bool                            `protobuf:"varint,2,opt,name=enable_caching,json=enableCaching,proto3" json:"enable_caching,omitempty"`
	LocalTTL          int32                           `protobuf:"varint,3,opt,name=localTTL,proto3" json:"localTTL,omitempty"`
	Records           []*GatewayDNSConfigRecordsItems `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
	DhcpServerEnabled bool                            `protobuf:"varint,5,opt,name=dhcp_server_enabled,json=dhcpServerEnabled,proto3" json:"dhcp_server_enabled,omitempty"`
}

func (x *DnsD) Reset() {
	*x = DnsD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsD) ProtoMessage() {}

func (x *DnsD) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsD.ProtoReflect.Descriptor instead.
func (*DnsD) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{18}
}

func (x *DnsD) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel(0)
}

func (x *DnsD) GetEnableCaching() bool {
	if x != nil {
		return x.EnableCaching
	}
	return false
}

func (x *DnsD) GetLocalTTL() int32 {
	if x != nil {
		return x.LocalTTL
	}
	return 0
}

func (x *DnsD) GetRecords() []*GatewayDNSConfigRecordsItems {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *DnsD) GetDhcpServerEnabled() bool {
	if x != nil {
		return x.DhcpServerEnabled
	}
	return false
}

type GatewayDNSConfigRecordsItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ARecord     []string `protobuf:"bytes,1,rep,name=a_record,json=aRecord,proto3" json:"a_record,omitempty"`
	AaaaRecord  []string `protobuf:"bytes,2,rep,name=aaaa_record,json=aaaaRecord,proto3" json:"aaaa_record,omitempty"`
	CnameRecord []string `protobuf:"bytes,3,rep,name=cname_record,json=cnameRecord,proto3" json:"cname_record,omitempty"`
	Domain      string   `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *GatewayDNSConfigRecordsItems) Reset() {
	*x = GatewayDNSConfigRecordsItems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayDNSConfigRecordsItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayDNSConfigRecordsItems) ProtoMessage() {}

func (x *GatewayDNSConfigRecordsItems) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayDNSConfigRecordsItems.ProtoReflect.Descriptor instead.
func (*GatewayDNSConfigRecordsItems) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{19}
}

func (x *GatewayDNSConfigRecordsItems) GetARecord() []string {
	if x != nil {
		return x.ARecord
	}
	return nil
}

func (x *GatewayDNSConfigRecordsItems) GetAaaaRecord() []string {
	if x != nil {
		return x.AaaaRecord
	}
	return nil
}

func (x *GatewayDNSConfigRecordsItems) GetCnameRecord() []string {
	if x != nil {
		return x.CnameRecord
	}
	return nil
}

func (x *GatewayDNSConfigRecordsItems) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

// ----------------------------------------------------------------------------
// AgwD configs
// ----------------------------------------------------------------------------
type AgwD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel                        AgwD_LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.mconfig.AgwD_LogLevel" json:"log_level,omitempty"`
	SctpdDownstreamServiceTarget    string        `protobuf:"bytes,2,opt,name=sctpd_downstream_service_target,json=sctpdDownstreamServiceTarget,proto3" json:"sctpd_downstream_service_target,omitempty"`
	SctpdUpstreamServiceTarget      string        `protobuf:"bytes,3,opt,name=sctpd_upstream_service_target,json=sctpdUpstreamServiceTarget,proto3" json:"sctpd_upstream_service_target,omitempty"`
	MmeSctpdDownstreamServiceTarget string        `protobuf:"bytes,4,opt,name=mme_sctpd_downstream_service_target,json=mmeSctpdDownstreamServiceTarget,proto3" json:"mme_sctpd_downstream_service_target,omitempty"`
	MmeSctpdUpstreamServiceTarget   string        `protobuf:"bytes,5,opt,name=mme_sctpd_upstream_service_target,json=mmeSctpdUpstreamServiceTarget,proto3" json:"mme_sctpd_upstream_service_target,omitempty"`
	// Sentry Client Options.
	// The DSN to use. If the data source name is not set, the client is effectively
	// disabled.
	SentryDsn string `protobuf:"bytes,6,opt,name=sentry_dsn,json=sentryDsn,proto3" json:"sentry_dsn,omitempty"`
}

func (x *AgwD) Reset() {
	*x = AgwD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgwD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgwD) ProtoMessage() {}

func (x *AgwD) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgwD.ProtoReflect.Descriptor instead.
func (*AgwD) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{20}
}

func (x *AgwD) GetLogLevel() AgwD_LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return AgwD_UNSET
}

func (x *AgwD) GetSctpdDownstreamServiceTarget() string {
	if x != nil {
		return x.SctpdDownstreamServiceTarget
	}
	return ""
}

func (x *AgwD) GetSctpdUpstreamServiceTarget() string {
	if x != nil {
		return x.SctpdUpstreamServiceTarget
	}
	return ""
}

func (x *AgwD) GetMmeSctpdDownstreamServiceTarget() string {
	if x != nil {
		return x.MmeSctpdDownstreamServiceTarget
	}
	return ""
}

func (x *AgwD) GetMmeSctpdUpstreamServiceTarget() string {
	if x != nil {
		return x.MmeSctpdUpstreamServiceTarget
	}
	return ""
}

func (x *AgwD) GetSentryDsn() string {
	if x != nil {
		return x.SentryDsn
	}
	return ""
}

// ------------------------------------------------------------------------------
// SctpD configs
// ------------------------------------------------------------------------------
type SctpD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
}

func (x *SctpD) Reset() {
	*x = SctpD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SctpD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SctpD) ProtoMessage() {}

func (x *SctpD) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SctpD.ProtoReflect.Descriptor instead.
func (*SctpD) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{21}
}

func (x *SctpD) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel(0)
}

type EnodebD_FDDConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Earfcndl int32 `protobuf:"varint,1,opt,name=earfcndl,proto3" json:"earfcndl,omitempty"`
	Earfcnul int32 `protobuf:"varint,2,opt,name=earfcnul,proto3" json:"earfcnul,omitempty"`
}

func (x *EnodebD_FDDConfig) Reset() {
	*x = EnodebD_FDDConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnodebD_FDDConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnodebD_FDDConfig) ProtoMessage() {}

func (x *EnodebD_FDDConfig) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnodebD_FDDConfig.ProtoReflect.Descriptor instead.
func (*EnodebD_FDDConfig) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{1, 0}
}

func (x *EnodebD_FDDConfig) GetEarfcndl() int32 {
	if x != nil {
		return x.Earfcndl
	}
	return 0
}

func (x *EnodebD_FDDConfig) GetEarfcnul() int32 {
	if x != nil {
		return x.Earfcnul
	}
	return 0
}

type EnodebD_TDDConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Earfcndl int32 `protobuf:"varint,1,opt,name=earfcndl,proto3" json:"earfcndl,omitempty"`
	// TDD subframe config parameter. See http://niviuk.free.fr/lte_tdd.php
	SubframeAssignment int32 `protobuf:"varint,2,opt,name=subframe_assignment,json=subframeAssignment,proto3" json:"subframe_assignment,omitempty"`
	// TDD subframe config parameter. See http://niviuk.free.fr/lte_tdd.php
	SpecialSubframePattern int32 `protobuf:"varint,3,opt,name=special_subframe_pattern,json=specialSubframePattern,proto3" json:"special_subframe_pattern,omitempty"`
}

func (x *EnodebD_TDDConfig) Reset() {
	*x = EnodebD_TDDConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnodebD_TDDConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnodebD_TDDConfig) ProtoMessage() {}

func (x *EnodebD_TDDConfig) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnodebD_TDDConfig.ProtoReflect.Descriptor instead.
func (*EnodebD_TDDConfig) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{1, 1}
}

func (x *EnodebD_TDDConfig) GetEarfcndl() int32 {
	if x != nil {
		return x.Earfcndl
	}
	return 0
}

func (x *EnodebD_TDDConfig) GetSubframeAssignment() int32 {
	if x != nil {
		return x.SubframeAssignment
	}
	return 0
}

func (x *EnodebD_TDDConfig) GetSpecialSubframePattern() int32 {
	if x != nil {
		return x.SpecialSubframePattern
	}
	return 0
}

type EnodebD_EnodebConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device-unique serial ID. Used to identify the eNodeB, and ties the
	// config to that device
	Earfcndl               int32  `protobuf:"varint,1,opt,name=earfcndl,proto3" json:"earfcndl,omitempty"`
	SubframeAssignment     int32  `protobuf:"varint,2,opt,name=subframe_assignment,json=subframeAssignment,proto3" json:"subframe_assignment,omitempty"`
	SpecialSubframePattern int32  `protobuf:"varint,3,opt,name=special_subframe_pattern,json=specialSubframePattern,proto3" json:"special_subframe_pattern,omitempty"`
	Pci                    int32  `protobuf:"varint,4,opt,name=pci,proto3" json:"pci,omitempty"`
	TransmitEnabled        bool   `protobuf:"varint,5,opt,name=transmit_enabled,json=transmitEnabled,proto3" json:"transmit_enabled,omitempty"`
	DeviceClass            string `protobuf:"bytes,6,opt,name=device_class,json=deviceClass,proto3" json:"device_class,omitempty"`
	BandwidthMhz           int32  `protobuf:"varint,7,opt,name=bandwidth_mhz,json=bandwidthMhz,proto3" json:"bandwidth_mhz,omitempty"`
	Tac                    int32  `protobuf:"varint,8,opt,name=tac,proto3" json:"tac,omitempty"`
	CellId                 int32  `protobuf:"varint,9,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
	IpAddress              string `protobuf:"bytes,10,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (x *EnodebD_EnodebConfig) Reset() {
	*x = EnodebD_EnodebConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnodebD_EnodebConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnodebD_EnodebConfig) ProtoMessage() {}

func (x *EnodebD_EnodebConfig) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnodebD_EnodebConfig.ProtoReflect.Descriptor instead.
func (*EnodebD_EnodebConfig) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{1, 2}
}

func (x *EnodebD_EnodebConfig) GetEarfcndl() int32 {
	if x != nil {
		return x.Earfcndl
	}
	return 0
}

func (x *EnodebD_EnodebConfig) GetSubframeAssignment() int32 {
	if x != nil {
		return x.SubframeAssignment
	}
	return 0
}

func (x *EnodebD_EnodebConfig) GetSpecialSubframePattern() int32 {
	if x != nil {
		return x.SpecialSubframePattern
	}
	return 0
}

func (x *EnodebD_EnodebConfig) GetPci() int32 {
	if x != nil {
		return x.Pci
	}
	return 0
}

func (x *EnodebD_EnodebConfig) GetTransmitEnabled() bool {
	if x != nil {
		return x.TransmitEnabled
	}
	return false
}

func (x *EnodebD_EnodebConfig) GetDeviceClass() string {
	if x != nil {
		return x.DeviceClass
	}
	return ""
}

func (x *EnodebD_EnodebConfig) GetBandwidthMhz() int32 {
	if x != nil {
		return x.BandwidthMhz
	}
	return 0
}

func (x *EnodebD_EnodebConfig) GetTac() int32 {
	if x != nil {
		return x.Tac
	}
	return 0
}

func (x *EnodebD_EnodebConfig) GetCellId() int32 {
	if x != nil {
		return x.CellId
	}
	return 0
}

func (x *EnodebD_EnodebConfig) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

type PipelineD_AllowedGrePeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip  string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Key uint32 `protobuf:"varint,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *PipelineD_AllowedGrePeer) Reset() {
	*x = PipelineD_AllowedGrePeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineD_AllowedGrePeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineD_AllowedGrePeer) ProtoMessage() {}

func (x *PipelineD_AllowedGrePeer) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineD_AllowedGrePeer.ProtoReflect.Descriptor instead.
func (*PipelineD_AllowedGrePeer) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{2, 0}
}

func (x *PipelineD_AllowedGrePeer) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *PipelineD_AllowedGrePeer) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

type PipelineD_IPDRExportDst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *PipelineD_IPDRExportDst) Reset() {
	*x = PipelineD_IPDRExportDst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineD_IPDRExportDst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineD_IPDRExportDst) ProtoMessage() {}

func (x *PipelineD_IPDRExportDst) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineD_IPDRExportDst.ProtoReflect.Descriptor instead.
func (*PipelineD_IPDRExportDst) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{2, 1}
}

func (x *PipelineD_IPDRExportDst) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *PipelineD_IPDRExportDst) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type PipelineD_LiUes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imsis   []string `protobuf:"bytes,1,rep,name=imsis,proto3" json:"imsis,omitempty"`
	Msisdns []string `protobuf:"bytes,2,rep,name=msisdns,proto3" json:"msisdns,omitempty"`
	Macs    []string `protobuf:"bytes,3,rep,name=macs,proto3" json:"macs,omitempty"`
	Ips     []string `protobuf:"bytes,4,rep,name=ips,proto3" json:"ips,omitempty"`
	Imeis   []string `protobuf:"bytes,5,rep,name=imeis,proto3" json:"imeis,omitempty"`
}

func (x *PipelineD_LiUes) Reset() {
	*x = PipelineD_LiUes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineD_LiUes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineD_LiUes) ProtoMessage() {}

func (x *PipelineD_LiUes) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineD_LiUes.ProtoReflect.Descriptor instead.
func (*PipelineD_LiUes) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{2, 2}
}

func (x *PipelineD_LiUes) GetImsis() []string {
	if x != nil {
		return x.Imsis
	}
	return nil
}

func (x *PipelineD_LiUes) GetMsisdns() []string {
	if x != nil {
		return x.Msisdns
	}
	return nil
}

func (x *PipelineD_LiUes) GetMacs() []string {
	if x != nil {
		return x.Macs
	}
	return nil
}

func (x *PipelineD_LiUes) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *PipelineD_LiUes) GetImeis() []string {
	if x != nil {
		return x.Imeis
	}
	return nil
}

type PipelineD_HEConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enable_header_enrichment is true if header enrichment feature is
	// enabled for gateway
	EnableHeaderEnrichment bool `protobuf:"varint,1,opt,name=enable_header_enrichment,json=enableHeaderEnrichment,proto3" json:"enable_header_enrichment,omitempty"`
	EnableEncryption       bool `protobuf:"varint,2,opt,name=enable_encryption,json=enableEncryption,proto3" json:"enable_encryption,omitempty"`
	// encryption/hashing/encoding information for headers
	EncryptionAlgorithm PipelineD_HEConfig_EncryptionAlgorithm `protobuf:"varint,3,opt,name=encryptionAlgorithm,proto3,enum=magma.mconfig.PipelineD_HEConfig_EncryptionAlgorithm" json:"encryptionAlgorithm,omitempty"`
	HashFunction        PipelineD_HEConfig_HashFunction        `protobuf:"varint,4,opt,name=hashFunction,proto3,enum=magma.mconfig.PipelineD_HEConfig_HashFunction" json:"hashFunction,omitempty"`
	EncodingType        PipelineD_HEConfig_EncodingType        `protobuf:"varint,5,opt,name=encodingType,proto3,enum=magma.mconfig.PipelineD_HEConfig_EncodingType" json:"encodingType,omitempty"`
	EncryptionKey       string                                 `protobuf:"bytes,6,opt,name=encryption_key,json=encryptionKey,proto3" json:"encryption_key,omitempty"`
	HmacKey             string                                 `protobuf:"bytes,7,opt,name=hmac_key,json=hmacKey,proto3" json:"hmac_key,omitempty"`
}

func (x *PipelineD_HEConfig) Reset() {
	*x = PipelineD_HEConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineD_HEConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineD_HEConfig) ProtoMessage() {}

func (x *PipelineD_HEConfig) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineD_HEConfig.ProtoReflect.Descriptor instead.
func (*PipelineD_HEConfig) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{2, 3}
}

func (x *PipelineD_HEConfig) GetEnableHeaderEnrichment() bool {
	if x != nil {
		return x.EnableHeaderEnrichment
	}
	return false
}

func (x *PipelineD_HEConfig) GetEnableEncryption() bool {
	if x != nil {
		return x.EnableEncryption
	}
	return false
}

func (x *PipelineD_HEConfig) GetEncryptionAlgorithm() PipelineD_HEConfig_EncryptionAlgorithm {
	if x != nil {
		return x.EncryptionAlgorithm
	}
	return PipelineD_HEConfig_RC4
}

func (x *PipelineD_HEConfig) GetHashFunction() PipelineD_HEConfig_HashFunction {
	if x != nil {
		return x.HashFunction
	}
	return PipelineD_HEConfig_MD5
}

func (x *PipelineD_HEConfig) GetEncodingType() PipelineD_HEConfig_EncodingType {
	if x != nil {
		return x.EncodingType
	}
	return PipelineD_HEConfig_BASE64
}

func (x *PipelineD_HEConfig) GetEncryptionKey() string {
	if x != nil {
		return x.EncryptionKey
	}
	return ""
}

func (x *PipelineD_HEConfig) GetHmacKey() string {
	if x != nil {
		return x.HmacKey
	}
	return ""
}

type MME_ApnCorrectionMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImsiPrefix  string `protobuf:"bytes,1,opt,name=imsi_prefix,json=imsiPrefix,proto3" json:"imsi_prefix,omitempty"`
	ApnOverride string `protobuf:"bytes,2,opt,name=apn_override,json=apnOverride,proto3" json:"apn_override,omitempty"`
}

func (x *MME_ApnCorrectionMap) Reset() {
	*x = MME_ApnCorrectionMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MME_ApnCorrectionMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MME_ApnCorrectionMap) ProtoMessage() {}

func (x *MME_ApnCorrectionMap) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MME_ApnCorrectionMap.ProtoReflect.Descriptor instead.
func (*MME_ApnCorrectionMap) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{8, 0}
}

func (x *MME_ApnCorrectionMap) GetImsiPrefix() string {
	if x != nil {
		return x.ImsiPrefix
	}
	return ""
}

func (x *MME_ApnCorrectionMap) GetApnOverride() string {
	if x != nil {
		return x.ApnOverride
	}
	return ""
}

// PLMN restriction configs
type MME_PlmnConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mcc string `protobuf:"bytes,1,opt,name=mcc,proto3" json:"mcc,omitempty"`
	Mnc string `protobuf:"bytes,2,opt,name=mnc,proto3" json:"mnc,omitempty"`
}

func (x *MME_PlmnConfig) Reset() {
	*x = MME_PlmnConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MME_PlmnConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MME_PlmnConfig) ProtoMessage() {}

func (x *MME_PlmnConfig) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MME_PlmnConfig.ProtoReflect.Descriptor instead.
func (*MME_PlmnConfig) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{8, 1}
}

func (x *MME_PlmnConfig) GetMcc() string {
	if x != nil {
		return x.Mcc
	}
	return ""
}

func (x *MME_PlmnConfig) GetMnc() string {
	if x != nil {
		return x.Mnc
	}
	return ""
}

type MME_TacList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tac []uint32 `protobuf:"varint,1,rep,packed,name=tac,proto3" json:"tac,omitempty"`
}

func (x *MME_TacList) Reset() {
	*x = MME_TacList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MME_TacList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MME_TacList) ProtoMessage() {}

func (x *MME_TacList) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MME_TacList.ProtoReflect.Descriptor instead.
func (*MME_TacList) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{8, 2}
}

func (x *MME_TacList) GetTac() []uint32 {
	if x != nil {
		return x.Tac
	}
	return nil
}

// IMEI restriction configs
type MME_ImeiConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tac string `protobuf:"bytes,1,opt,name=tac,proto3" json:"tac,omitempty"`
	Snr string `protobuf:"bytes,2,opt,name=snr,proto3" json:"snr,omitempty"`
}

func (x *MME_ImeiConfig) Reset() {
	*x = MME_ImeiConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MME_ImeiConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MME_ImeiConfig) ProtoMessage() {}

func (x *MME_ImeiConfig) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MME_ImeiConfig.ProtoReflect.Descriptor instead.
func (*MME_ImeiConfig) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{8, 4}
}

func (x *MME_ImeiConfig) GetTac() string {
	if x != nil {
		return x.Tac
	}
	return ""
}

func (x *MME_ImeiConfig) GetSnr() string {
	if x != nil {
		return x.Snr
	}
	return ""
}

type SubscriberDB_SubscriptionProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum uplink bit rate (AMBR-UL)
	MaxUlBitRate uint64 `protobuf:"varint,1,opt,name=max_ul_bit_rate,json=maxUlBitRate,proto3" json:"max_ul_bit_rate,omitempty"`
	// Maximum downlink bit rate (AMBR-DL)
	MaxDlBitRate uint64 `protobuf:"varint,2,opt,name=max_dl_bit_rate,json=maxDlBitRate,proto3" json:"max_dl_bit_rate,omitempty"`
}

func (x *SubscriberDB_SubscriptionProfile) Reset() {
	*x = SubscriberDB_SubscriptionProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriberDB_SubscriptionProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriberDB_SubscriptionProfile) ProtoMessage() {}

func (x *SubscriberDB_SubscriptionProfile) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_mconfig_mconfigs_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriberDB_SubscriptionProfile.ProtoReflect.Descriptor instead.
func (*SubscriberDB_SubscriptionProfile) Descriptor() ([]byte, []int) {
	return file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{11, 0}
}

func (x *SubscriberDB_SubscriptionProfile) GetMaxUlBitRate() uint64 {
	if x != nil {
		return x.MaxUlBitRate
	}
	return 0
}

func (x *SubscriberDB_SubscriptionProfile) GetMaxDlBitRate() uint64 {
	if x != nil {
		return x.MaxDlBitRate
	}
	return 0
}

var File_lte_protos_mconfig_mconfigs_proto protoreflect.FileDescriptor

var file_lte_protos_mconfig_mconfigs_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x1a, 0x19, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf6, 0x01,
	0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x73, 0x6e, 0x5f, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x73, 0x6e, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x73, 0x6e, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x73, 0x6e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x6d, 0x65, 0x4c,
	0x6f, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x11, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x73, 0x12, 0x32, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4c, 0x69, 0x6e, 0x65,
	0x73, 0x49, 0x6e, 0x4c, 0x6f, 0x67, 0x22, 0xf5, 0x0a, 0x0a, 0x07, 0x45, 0x6e, 0x6f, 0x64, 0x65,
	0x62, 0x44, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72,
	0x63, 0x38, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f,
	0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x63, 0x69, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x63, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x61, 0x72, 0x66,
	0x63, 0x6e, 0x64, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x61, 0x72, 0x66,
	0x63, 0x6e, 0x64, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x5f, 0x6d, 0x68, 0x7a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4d, 0x68, 0x7a, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x6d,
	0x6e, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x6c, 0x6d, 0x6e, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x75,
	0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x65,
	0x6e, 0x6f, 0x64, 0x65, 0x62, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x6f, 0x64, 0x65,
	0x62, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x63,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x61, 0x63, 0x12, 0x39, 0x0a, 0x08, 0x63,
	0x73, 0x66, 0x62, 0x5f, 0x72, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e,
	0x6f, 0x64, 0x65, 0x62, 0x44, 0x2e, 0x43, 0x53, 0x46, 0x42, 0x52, 0x61, 0x74, 0x52, 0x07, 0x63,
	0x73, 0x66, 0x62, 0x52, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x5f,
	0x32, 0x67, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x32,
	0x67, 0x12, 0x3f, 0x0a, 0x0a, 0x74, 0x64, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x44, 0x2e, 0x54, 0x44,
	0x44, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x74, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x3f, 0x0a, 0x0a, 0x66, 0x64, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x44, 0x2e, 0x46,
	0x44, 0x44, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x66, 0x64, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x61, 0x0a, 0x15, 0x65, 0x6e, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x44, 0x2e, 0x45, 0x6e, 0x62, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x79, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x12, 0x65, 0x6e, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x79,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x1a, 0x43, 0x0a, 0x09, 0x46, 0x44, 0x44, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x64, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x64, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x75, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x75, 0x6c, 0x1a, 0x92, 0x01, 0x0a, 0x09,
	0x54, 0x44, 0x44, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x61, 0x72,
	0x66, 0x63, 0x6e, 0x64, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x61, 0x72,
	0x66, 0x63, 0x6e, 0x64, 0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x53, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x1a, 0xe4, 0x02, 0x0a, 0x0c, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x64, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x64, 0x6c, 0x12, 0x2f, 0x0a,
	0x13, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x73, 0x75, 0x62, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38,
	0x0a, 0x18, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x16, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x63, 0x69, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x63, 0x69, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x6d, 0x68, 0x7a, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4d, 0x68, 0x7a, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x61, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x61, 0x63, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x6a, 0x0a, 0x17, 0x45, 0x6e, 0x62, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x79, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x44, 0x2e, 0x45, 0x6e, 0x6f, 0x64,
	0x65, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x29, 0x0a, 0x07, 0x43, 0x53, 0x46, 0x42, 0x52, 0x61, 0x74, 0x12, 0x0e,
	0x0a, 0x0a, 0x43, 0x53, 0x46, 0x42, 0x52, 0x41, 0x54, 0x5f, 0x32, 0x47, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x43, 0x53, 0x46, 0x42, 0x52, 0x41, 0x54, 0x5f, 0x33, 0x47, 0x10, 0x01, 0x22, 0xd3,
	0x0e, 0x0a, 0x09, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x12, 0x32, 0x0a, 0x09,
	0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4c, 0x6f,
	0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x1e, 0x0a, 0x0b, 0x75, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x65, 0x49, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x61, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x44, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x53, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x67, 0x72, 0x65, 0x5f, 0x70,
	0x65, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x44, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x47, 0x72, 0x65, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x47, 0x72, 0x65, 0x50,
	0x65, 0x65, 0x72, 0x73, 0x12, 0x4e, 0x0a, 0x0f, 0x69, 0x70, 0x64, 0x72, 0x5f, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x64, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x2e, 0x49, 0x50, 0x44, 0x52, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x73, 0x74, 0x52, 0x0d, 0x69, 0x70, 0x64, 0x72, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x6c, 0x69, 0x5f, 0x75, 0x65, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x2e, 0x4c,
	0x69, 0x55, 0x65, 0x73, 0x52, 0x05, 0x6c, 0x69, 0x55, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x73,
	0x67, 0x69, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x73, 0x67, 0x69, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x66, 0x61,
	0x63, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x3e, 0x0a, 0x1c, 0x73, 0x67, 0x69, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x73, 0x67,
	0x69, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x66, 0x61, 0x63, 0x65,
	0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x67, 0x69, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x67,
	0x77, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x67, 0x69, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x66, 0x61, 0x63, 0x65, 0x47, 0x77, 0x12, 0x3e, 0x0a,
	0x09, 0x68, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x2e, 0x48, 0x45, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x08, 0x68, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a,
	0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x35, 0x67, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x35, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x70,
	0x66, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x75, 0x70, 0x66, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x1e, 0x73, 0x67,
	0x69, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1a, 0x73, 0x67, 0x69, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x66, 0x61, 0x63, 0x65, 0x49, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x12, 0x3e,
	0x0a, 0x1c, 0x73, 0x67, 0x69, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x67, 0x77, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x73, 0x67, 0x69, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x66, 0x61, 0x63, 0x65, 0x49, 0x70, 0x76, 0x36, 0x47, 0x77, 0x1a, 0x32,
	0x0a, 0x0e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x47, 0x72, 0x65, 0x50, 0x65, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x1a, 0x33, 0x0a, 0x0d, 0x49, 0x50, 0x44, 0x52, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x73, 0x0a, 0x05, 0x4c, 0x69, 0x55, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x73, 0x69, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x69, 0x6d, 0x73, 0x69, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x61, 0x63, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x03, 0x69, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x65, 0x69, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x65, 0x69, 0x73, 0x1a, 0x8a, 0x05, 0x0a,
	0x08, 0x48, 0x45, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x18, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x72, 0x69, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x67, 0x0a, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x2e, 0x48, 0x45, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x52, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x52, 0x0a, 0x0c, 0x68, 0x61, 0x73,
	0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x2e, 0x48, 0x45, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x68, 0x61, 0x73, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a,
	0x0c, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x2e, 0x48, 0x45,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x6d, 0x61, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6d, 0x61, 0x63,
	0x4b, 0x65, 0x79, 0x22, 0x6d, 0x0a, 0x13, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x43,
	0x34, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x45, 0x53, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42,
	0x43, 0x5f, 0x48, 0x4d, 0x41, 0x43, 0x5f, 0x4d, 0x44, 0x35, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13,
	0x41, 0x45, 0x53, 0x32, 0x35, 0x36, 0x5f, 0x45, 0x43, 0x42, 0x5f, 0x48, 0x4d, 0x41, 0x43, 0x5f,
	0x4d, 0x44, 0x35, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x5a, 0x49, 0x50, 0x50, 0x45, 0x44,
	0x5f, 0x41, 0x45, 0x53, 0x32, 0x35, 0x36, 0x5f, 0x45, 0x43, 0x42, 0x5f, 0x53, 0x48, 0x41, 0x31,
	0x10, 0x03, 0x22, 0x2c, 0x0a, 0x0c, 0x48, 0x61, 0x73, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x44, 0x35, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x48,
	0x45, 0x58, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x02,
	0x22, 0x27, 0x0a, 0x0c, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0a, 0x0a, 0x06, 0x42, 0x41, 0x53, 0x45, 0x36, 0x34, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x48, 0x45, 0x58, 0x32, 0x42, 0x49, 0x4e, 0x10, 0x01, 0x22, 0x3d, 0x0a, 0x0f, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x08,
	0x4d, 0x45, 0x54, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x44, 0x50, 0x49, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4e, 0x46, 0x4f, 0x52,
	0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04,
	0x08, 0x0b, 0x10, 0x0c, 0x22, 0xea, 0x02, 0x0a, 0x08, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63,
	0x38, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5f,
	0x0a, 0x18, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x68, 0x61, 0x75, 0x73, 0x74,
	0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x45, 0x78, 0x68, 0x61, 0x75, 0x73, 0x74, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x45,
	0x78, 0x68, 0x61, 0x75, 0x73, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2d, 0x0a, 0x13, 0x67, 0x78, 0x5f, 0x67, 0x79, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x67, 0x78,
	0x47, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x44,
	0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x35, 0x67,
	0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x35, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x22, 0xcd, 0x01, 0x0a, 0x16, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x45, 0x78, 0x68, 0x61,
	0x75, 0x73, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x68,
	0x61, 0x75, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x45, 0x78, 0x68, 0x61, 0x75, 0x73, 0x74, 0x12, 0x44,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x45, 0x78, 0x68, 0x61, 0x75, 0x73, 0x74, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x4d, 0x73, 0x22, 0x1c, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a,
	0x0e, 0x47, 0x78, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x10,
	0x00, 0x22, 0x3e, 0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x42, 0x12, 0x32, 0x0a,
	0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4c,
	0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x22, 0x3f, 0x0a, 0x09, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x12, 0x32,
	0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e,
	0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x22, 0x91, 0x03, 0x0a, 0x09, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44,
	0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38,
	0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x70, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x54, 0x0a, 0x11, 0x69, 0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x44, 0x2e, 0x49, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x69, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f,
	0x69, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x61, 0x70, 0x6e, 0x5f, 0x69,
	0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x41, 0x70, 0x6e, 0x49, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x76, 0x36, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3d, 0x0a,
	0x1b, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x69, 0x70, 0x76, 0x36, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x28, 0x0a, 0x0f,
	0x49, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x50, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x44, 0x48, 0x43, 0x50, 0x10, 0x01, 0x22, 0x98, 0x12, 0x0a, 0x03, 0x4d, 0x4d, 0x45, 0x12, 0x32,
	0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e,
	0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x63, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x63, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x6e, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x61, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x6d, 0x65, 0x5f,
	0x67, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x6d, 0x65, 0x47, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x6e, 0x73, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x5e, 0x0a, 0x17, 0x6e, 0x6f, 0x6e, 0x5f, 0x65, 0x70, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4d, 0x4d, 0x45, 0x2e, 0x4e, 0x6f, 0x6e, 0x45, 0x50, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x14, 0x6e, 0x6f, 0x6e, 0x45, 0x70,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x73, 0x66, 0x62, 0x5f, 0x6d, 0x63, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x73, 0x66, 0x62, 0x4d, 0x63, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x73,
	0x66, 0x62, 0x5f, 0x6d, 0x6e, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x73,
	0x66, 0x62, 0x4d, 0x6e, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x63, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6c, 0x61, 0x63, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x64, 0x62, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x5f, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x5f, 0x74, 0x61, 0x63, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x12, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x45, 0x6e, 0x6f,
	0x64, 0x65, 0x62, 0x54, 0x61, 0x63, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x6d, 0x65, 0x5f, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6d, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x6e, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x61, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68,
	0x73, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x32,
	0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x70, 0x6e, 0x5f, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x70, 0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x17, 0x61, 0x70, 0x6e, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x19, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4d, 0x4d, 0x45, 0x2e, 0x41, 0x70, 0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x52, 0x14, 0x61, 0x70, 0x6e, 0x43, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x13, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x70, 0x5f, 0x63, 0x73, 0x63, 0x66, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x70, 0x76,
	0x34, 0x50, 0x43, 0x73, 0x63, 0x66, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a,
	0x13, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x70, 0x5f, 0x63, 0x73, 0x63, 0x66, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x70, 0x76, 0x36,
	0x50, 0x43, 0x73, 0x63, 0x66, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x70, 0x76, 0x36, 0x44, 0x6e, 0x73, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x73,
	0x67, 0x77, 0x5f, 0x73, 0x31, 0x75, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x69, 0x70, 0x76, 0x34, 0x53, 0x67, 0x77, 0x53, 0x31, 0x75, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x48, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x70, 0x6c, 0x6d, 0x6e, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x4d, 0x45, 0x2e,
	0x50, 0x6c, 0x6d, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x6d, 0x6e, 0x73, 0x12, 0x53, 0x0a, 0x11, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6d, 0x61, 0x70, 0x73,
	0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x4d, 0x45, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x4d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x4d, 0x61, 0x70, 0x73,
	0x12, 0x4d, 0x0a, 0x12, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x10, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x12,
	0x48, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6d,
	0x65, 0x69, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x4d, 0x45, 0x2e, 0x49, 0x6d,
	0x65, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x65, 0x69, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x6f, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x63,
	0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x0c, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a,
	0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x35, 0x67, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x35, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x61, 0x6d,
	0x66, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1a, 0x61, 0x6d, 0x66, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47,
	0x0a, 0x20, 0x61, 0x6d, 0x66, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x6c,
	0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x61, 0x6d, 0x66, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6d, 0x66, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6d, 0x66, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x6d, 0x66, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x6d, 0x66, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x61, 0x6d, 0x66, 0x5f, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6d, 0x66, 0x53,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6d, 0x66, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6d, 0x66, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x73, 0x67,
	0x77, 0x5f, 0x73, 0x31, 0x75, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x69, 0x70, 0x76, 0x36, 0x53, 0x67, 0x77, 0x53, 0x31, 0x75, 0x41, 0x64, 0x64, 0x72,
	0x1a, 0x56, 0x0a, 0x10, 0x41, 0x70, 0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6d, 0x73, 0x69, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d, 0x73, 0x69, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x6e, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x6e,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x1a, 0x30, 0x0a, 0x0a, 0x50, 0x6c, 0x6d, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x63, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x63, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x6e, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x6e, 0x63, 0x1a, 0x1b, 0x0a, 0x07, 0x54, 0x61,
	0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x63, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x03, 0x74, 0x61, 0x63, 0x1a, 0x5e, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x4d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4d, 0x4d, 0x45, 0x2e, 0x54, 0x61, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x30, 0x0a, 0x0a, 0x49, 0x6d, 0x65, 0x69, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6e, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6e, 0x72, 0x22, 0xa5, 0x01, 0x0a, 0x14, 0x4e, 0x6f,
	0x6e, 0x45, 0x50, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x4f, 0x4e, 0x5f, 0x45, 0x50, 0x53, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x4f, 0x46,
	0x46, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x4f, 0x4e, 0x5f, 0x45, 0x50, 0x53, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x43,
	0x53, 0x46, 0x42, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x4f, 0x4e,
	0x5f, 0x45, 0x50, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x4e, 0x4f,
	0x4e, 0x5f, 0x45, 0x50, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x53, 0x4d, 0x53, 0x5f, 0x4f, 0x52, 0x43, 0x38, 0x52, 0x10,
	0x03, 0x22, 0x62, 0x0a, 0x10, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f,
	0x64, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x34, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0xdf, 0x01, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x61,
	0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3c, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x2e,
	0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x6c, 0x6d, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x73, 0x69, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x73,
	0x69, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x6e, 0x22, 0x4d, 0x0a, 0x0d, 0x46, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x50, 0x47,
	0x57, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x52, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42,
	0x45, 0x52, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x38, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43,
	0x52, 0x49, 0x42, 0x45, 0x52, 0x10, 0x02, 0x22, 0xce, 0x04, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x44, 0x42, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0b,
	0x6c, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x6c, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x4f, 0x70, 0x12, 0x20, 0x0a, 0x0c,
	0x6c, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x61, 0x6d, 0x66, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x41, 0x6d, 0x66, 0x12, 0x4f,
	0x0a, 0x0c, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x44,
	0x42, 0x2e, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x68, 0x73, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x35,
	0x67, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x35, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x1a, 0x63, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0f, 0x6d, 0x61, 0x78,
	0x5f, 0x75, 0x6c, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x55, 0x6c, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x25, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x6c, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x44, 0x6c,
	0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x1a, 0x6f, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x45, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x44, 0x42, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x65, 0x0a, 0x08, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x74, 0x70, 0x44, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08,
	0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x22,
	0x69, 0x0a, 0x08, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x44, 0x12, 0x32, 0x0a, 0x09, 0x6c,
	0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4c, 0x6f, 0x67,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x29, 0x0a, 0x10, 0x70, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x6f, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x3a, 0x0a, 0x04, 0x44, 0x50,
	0x49, 0x44, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72,
	0x63, 0x38, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f,
	0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x41, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x7c, 0x0a, 0x08, 0x4c, 0x49, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x44, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3c, 0x0a, 0x0c, 0x6e, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0b, 0x6e, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x0a, 0x4e, 0x50, 0x72, 0x6f,
	0x62, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0xf4, 0x01, 0x0a, 0x04, 0x44, 0x6e, 0x73, 0x44, 0x12,
	0x32, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72,
	0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x54, 0x54, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x54, 0x54, 0x4c, 0x12, 0x45, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x44,
	0x4e, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x68, 0x63, 0x70,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x95, 0x01,
	0x0a, 0x1c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x44, 0x4e, 0x53, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x61, 0x61,
	0x61, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x61, 0x61, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0xc3, 0x03, 0x0a, 0x04, 0x41, 0x67, 0x77, 0x44, 0x12, 0x39,
	0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x41, 0x67, 0x77, 0x44, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x45, 0x0a, 0x1f, 0x73, 0x63, 0x74,
	0x70, 0x64, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1c, 0x73, 0x63, 0x74, 0x70, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x41, 0x0a, 0x1d, 0x73, 0x63, 0x74, 0x70, 0x64, 0x5f, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x73, 0x63, 0x74, 0x70, 0x64, 0x55, 0x70,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x4c, 0x0a, 0x23, 0x6d, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x74, 0x70, 0x64,
	0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1f, 0x6d, 0x6d, 0x65, 0x53, 0x63, 0x74, 0x70, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x48, 0x0a, 0x21, 0x6d, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x74, 0x70, 0x64, 0x5f, 0x75,
	0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x6d, 0x6d,
	0x65, 0x53, 0x63, 0x74, 0x70, 0x64, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x64, 0x73, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x73, 0x6e, 0x22, 0x3f, 0x0a, 0x08, 0x4c, 0x6f,
	0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x49, 0x4e, 0x46, 0x4f, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x41, 0x52, 0x4e, 0x10, 0x03,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x22, 0x3b, 0x0a, 0x05, 0x53,
	0x63, 0x74, 0x70, 0x44, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08,
	0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x23, 0x5a, 0x21, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2f, 0x6c, 0x74, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lte_protos_mconfig_mconfigs_proto_rawDescOnce sync.Once
	file_lte_protos_mconfig_mconfigs_proto_rawDescData = file_lte_protos_mconfig_mconfigs_proto_rawDesc
)

func file_lte_protos_mconfig_mconfigs_proto_rawDescGZIP() []byte {
	file_lte_protos_mconfig_mconfigs_proto_rawDescOnce.Do(func() {
		file_lte_protos_mconfig_mconfigs_proto_rawDescData = protoimpl.X.CompressGZIP(file_lte_protos_mconfig_mconfigs_proto_rawDescData)
	})
	return file_lte_protos_mconfig_mconfigs_proto_rawDescData
}

var file_lte_protos_mconfig_mconfigs_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_lte_protos_mconfig_mconfigs_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_lte_protos_mconfig_mconfigs_proto_goTypes = []interface{}{
	(EnodebD_CSFBRat)(0),                        // 0: magma.mconfig.EnodebD.CSFBRat
	(PipelineD_NetworkServices)(0),              // 1: magma.mconfig.PipelineD.NetworkServices
	(PipelineD_HEConfig_EncryptionAlgorithm)(0), // 2: magma.mconfig.PipelineD.HEConfig.EncryptionAlgorithm
	(PipelineD_HEConfig_HashFunction)(0),        // 3: magma.mconfig.PipelineD.HEConfig.HashFunction
	(PipelineD_HEConfig_EncodingType)(0),        // 4: magma.mconfig.PipelineD.HEConfig.EncodingType
	(WalletExhaustDetection_Method)(0),          // 5: magma.mconfig.WalletExhaustDetection.Method
	(MobilityD_IpAllocatorType)(0),              // 6: magma.mconfig.MobilityD.IpAllocatorType
	(MME_NonEPSServiceControl)(0),               // 7: magma.mconfig.MME.NonEPSServiceControl
	(ModeMapItem_FederatedMode)(0),              // 8: magma.mconfig.ModeMapItem.FederatedMode
	(AgwD_LogLevel)(0),                          // 9: magma.mconfig.AgwD.LogLevel
	(*SentryConfig)(nil),                        // 10: magma.mconfig.SentryConfig
	(*EnodebD)(nil),                             // 11: magma.mconfig.EnodebD
	(*PipelineD)(nil),                           // 12: magma.mconfig.PipelineD
	(*SessionD)(nil),                            // 13: magma.mconfig.SessionD
	(*WalletExhaustDetection)(nil),              // 14: magma.mconfig.WalletExhaustDetection
	(*PolicyDB)(nil),                            // 15: magma.mconfig.PolicyDB
	(*RedirectD)(nil),                           // 16: magma.mconfig.RedirectD
	(*MobilityD)(nil),                           // 17: magma.mconfig.MobilityD
	(*MME)(nil),                                 // 18: magma.mconfig.MME
	(*FederatedModeMap)(nil),                    // 19: magma.mconfig.FederatedModeMap
	(*ModeMapItem)(nil),                         // 20: magma.mconfig.ModeMapItem
	(*SubscriberDB)(nil),                        // 21: magma.mconfig.SubscriberDB
	(*LighttpD)(nil),                            // 22: magma.mconfig.LighttpD
	(*MonitorD)(nil),                            // 23: magma.mconfig.MonitorD
	(*DPID)(nil),                                // 24: magma.mconfig.DPID
	(*ConnectionD)(nil),                         // 25: magma.mconfig.ConnectionD
	(*LIAgentD)(nil),                            // 26: magma.mconfig.LIAgentD
	(*NProbeTask)(nil),                          // 27: magma.mconfig.NProbeTask
	(*DnsD)(nil),                                // 28: magma.mconfig.DnsD
	(*GatewayDNSConfigRecordsItems)(nil),        // 29: magma.mconfig.GatewayDNSConfigRecordsItems
	(*AgwD)(nil),                                // 30: magma.mconfig.AgwD
	(*SctpD)(nil),                               // 31: magma.mconfig.SctpD
	(*EnodebD_FDDConfig)(nil),                   // 32: magma.mconfig.EnodebD.FDDConfig
	(*EnodebD_TDDConfig)(nil),                   // 33: magma.mconfig.EnodebD.TDDConfig
	(*EnodebD_EnodebConfig)(nil),                // 34: magma.mconfig.EnodebD.EnodebConfig
	nil,                                         // 35: magma.mconfig.EnodebD.EnbConfigsBySerialEntry
	(*PipelineD_AllowedGrePeer)(nil),            // 36: magma.mconfig.PipelineD.AllowedGrePeer
	(*PipelineD_IPDRExportDst)(nil),             // 37: magma.mconfig.PipelineD.IPDRExportDst
	(*PipelineD_LiUes)(nil),                     // 38: magma.mconfig.PipelineD.LiUes
	(*PipelineD_HEConfig)(nil),                  // 39: magma.mconfig.PipelineD.HEConfig
	(*MME_ApnCorrectionMap)(nil),                // 40: magma.mconfig.MME.ApnCorrectionMap
	(*MME_PlmnConfig)(nil),                      // 41: magma.mconfig.MME.PlmnConfig
	(*MME_TacList)(nil),                         // 42: magma.mconfig.MME.TacList
	nil,                                         // 43: magma.mconfig.MME.ServiceAreaMapsEntry
	(*MME_ImeiConfig)(nil),                      // 44: magma.mconfig.MME.ImeiConfig
	(*SubscriberDB_SubscriptionProfile)(nil),    // 45: magma.mconfig.SubscriberDB.SubscriptionProfile
	nil,                                         // 46: magma.mconfig.SubscriberDB.SubProfilesEntry
	(protos.LogLevel)(0),                        // 47: magma.orc8r.LogLevel
}
var file_lte_protos_mconfig_mconfigs_proto_depIdxs = []int32{
	47, // 0: magma.mconfig.EnodebD.log_level:type_name -> magma.orc8r.LogLevel
	0,  // 1: magma.mconfig.EnodebD.csfb_rat:type_name -> magma.mconfig.EnodebD.CSFBRat
	33, // 2: magma.mconfig.EnodebD.tdd_config:type_name -> magma.mconfig.EnodebD.TDDConfig
	32, // 3: magma.mconfig.EnodebD.fdd_config:type_name -> magma.mconfig.EnodebD.FDDConfig
	35, // 4: magma.mconfig.EnodebD.enb_configs_by_serial:type_name -> magma.mconfig.EnodebD.EnbConfigsBySerialEntry
	47, // 5: magma.mconfig.PipelineD.log_level:type_name -> magma.orc8r.LogLevel
	1,  // 6: magma.mconfig.PipelineD.services:type_name -> magma.mconfig.PipelineD.NetworkServices
	36, // 7: magma.mconfig.PipelineD.allowed_gre_peers:type_name -> magma.mconfig.PipelineD.AllowedGrePeer
	37, // 8: magma.mconfig.PipelineD.ipdr_export_dst:type_name -> magma.mconfig.PipelineD.IPDRExportDst
	38, // 9: magma.mconfig.PipelineD.li_ues:type_name -> magma.mconfig.PipelineD.LiUes
	39, // 10: magma.mconfig.PipelineD.he_config:type_name -> magma.mconfig.PipelineD.HEConfig
	47, // 11: magma.mconfig.SessionD.log_level:type_name -> magma.orc8r.LogLevel
	14, // 12: magma.mconfig.SessionD.wallet_exhaust_detection:type_name -> magma.mconfig.WalletExhaustDetection
	10, // 13: magma.mconfig.SessionD.sentry_config:type_name -> magma.mconfig.SentryConfig
	5,  // 14: magma.mconfig.WalletExhaustDetection.method:type_name -> magma.mconfig.WalletExhaustDetection.Method
	47, // 15: magma.mconfig.PolicyDB.log_level:type_name -> magma.orc8r.LogLevel
	47, // 16: magma.mconfig.RedirectD.log_level:type_name -> magma.orc8r.LogLevel
	47, // 17: magma.mconfig.MobilityD.log_level:type_name -> magma.orc8r.LogLevel
	6,  // 18: magma.mconfig.MobilityD.ip_allocator_type:type_name -> magma.mconfig.MobilityD.IpAllocatorType
	47, // 19: magma.mconfig.MME.log_level:type_name -> magma.orc8r.LogLevel
	7,  // 20: magma.mconfig.MME.non_eps_service_control:type_name -> magma.mconfig.MME.NonEPSServiceControl
	40, // 21: magma.mconfig.MME.apn_correction_map_list:type_name -> magma.mconfig.MME.ApnCorrectionMap
	41, // 22: magma.mconfig.MME.restricted_plmns:type_name -> magma.mconfig.MME.PlmnConfig
	43, // 23: magma.mconfig.MME.service_area_maps:type_name -> magma.mconfig.MME.ServiceAreaMapsEntry
	19, // 24: magma.mconfig.MME.federated_mode_map:type_name -> magma.mconfig.FederatedModeMap
	44, // 25: magma.mconfig.MME.restricted_imeis:type_name -> magma.mconfig.MME.ImeiConfig
	10, // 26: magma.mconfig.MME.sentry_config:type_name -> magma.mconfig.SentryConfig
	20, // 27: magma.mconfig.FederatedModeMap.mapping:type_name -> magma.mconfig.ModeMapItem
	8,  // 28: magma.mconfig.ModeMapItem.mode:type_name -> magma.mconfig.ModeMapItem.FederatedMode
	47, // 29: magma.mconfig.SubscriberDB.log_level:type_name -> magma.orc8r.LogLevel
	46, // 30: magma.mconfig.SubscriberDB.sub_profiles:type_name -> magma.mconfig.SubscriberDB.SubProfilesEntry
	47, // 31: magma.mconfig.LighttpD.log_level:type_name -> magma.orc8r.LogLevel
	47, // 32: magma.mconfig.MonitorD.log_level:type_name -> magma.orc8r.LogLevel
	47, // 33: magma.mconfig.DPID.log_level:type_name -> magma.orc8r.LogLevel
	47, // 34: magma.mconfig.ConnectionD.log_level:type_name -> magma.orc8r.LogLevel
	47, // 35: magma.mconfig.LIAgentD.log_level:type_name -> magma.orc8r.LogLevel
	27, // 36: magma.mconfig.LIAgentD.nprobe_tasks:type_name -> magma.mconfig.NProbeTask
	47, // 37: magma.mconfig.DnsD.log_level:type_name -> magma.orc8r.LogLevel
	29, // 38: magma.mconfig.DnsD.records:type_name -> magma.mconfig.GatewayDNSConfigRecordsItems
	9,  // 39: magma.mconfig.AgwD.log_level:type_name -> magma.mconfig.AgwD.LogLevel
	47, // 40: magma.mconfig.SctpD.log_level:type_name -> magma.orc8r.LogLevel
	34, // 41: magma.mconfig.EnodebD.EnbConfigsBySerialEntry.value:type_name -> magma.mconfig.EnodebD.EnodebConfig
	2,  // 42: magma.mconfig.PipelineD.HEConfig.encryptionAlgorithm:type_name -> magma.mconfig.PipelineD.HEConfig.EncryptionAlgorithm
	3,  // 43: magma.mconfig.PipelineD.HEConfig.hashFunction:type_name -> magma.mconfig.PipelineD.HEConfig.HashFunction
	4,  // 44: magma.mconfig.PipelineD.HEConfig.encodingType:type_name -> magma.mconfig.PipelineD.HEConfig.EncodingType
	42, // 45: magma.mconfig.MME.ServiceAreaMapsEntry.value:type_name -> magma.mconfig.MME.TacList
	45, // 46: magma.mconfig.SubscriberDB.SubProfilesEntry.value:type_name -> magma.mconfig.SubscriberDB.SubscriptionProfile
	47, // [47:47] is the sub-list for method output_type
	47, // [47:47] is the sub-list for method input_type
	47, // [47:47] is the sub-list for extension type_name
	47, // [47:47] is the sub-list for extension extendee
	0,  // [0:47] is the sub-list for field type_name
}

func init() { file_lte_protos_mconfig_mconfigs_proto_init() }
func file_lte_protos_mconfig_mconfigs_proto_init() {
	if File_lte_protos_mconfig_mconfigs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SentryConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnodebD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletExhaustDetection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyDB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedirectD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MobilityD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MME); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FederatedModeMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModeMapItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriberDB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LighttpD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DPID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LIAgentD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NProbeTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayDNSConfigRecordsItems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgwD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SctpD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnodebD_FDDConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnodebD_TDDConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnodebD_EnodebConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineD_AllowedGrePeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineD_IPDRExportDst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineD_LiUes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineD_HEConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MME_ApnCorrectionMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MME_PlmnConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MME_TacList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MME_ImeiConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_mconfig_mconfigs_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriberDB_SubscriptionProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lte_protos_mconfig_mconfigs_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_lte_protos_mconfig_mconfigs_proto_goTypes,
		DependencyIndexes: file_lte_protos_mconfig_mconfigs_proto_depIdxs,
		EnumInfos:         file_lte_protos_mconfig_mconfigs_proto_enumTypes,
		MessageInfos:      file_lte_protos_mconfig_mconfigs_proto_msgTypes,
	}.Build()
	File_lte_protos_mconfig_mconfigs_proto = out.File
	file_lte_protos_mconfig_mconfigs_proto_rawDesc = nil
	file_lte_protos_mconfig_mconfigs_proto_goTypes = nil
	file_lte_protos_mconfig_mconfigs_proto_depIdxs = nil
}
