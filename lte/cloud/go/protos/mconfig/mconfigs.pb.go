// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lte/protos/mconfig/mconfigs.proto

package mconfig

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	protos "magma/orc8r/lib/go/protos"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EnodebD_CSFBRat int32

const (
	EnodebD_CSFBRAT_2G EnodebD_CSFBRat = 0
	EnodebD_CSFBRAT_3G EnodebD_CSFBRat = 1
)

var EnodebD_CSFBRat_name = map[int32]string{
	0: "CSFBRAT_2G",
	1: "CSFBRAT_3G",
}

var EnodebD_CSFBRat_value = map[string]int32{
	"CSFBRAT_2G": 0,
	"CSFBRAT_3G": 1,
}

func (x EnodebD_CSFBRat) String() string {
	return proto.EnumName(EnodebD_CSFBRat_name, int32(x))
}

func (EnodebD_CSFBRat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{1, 0}
}

type PipelineD_NetworkServices int32

const (
	PipelineD_METERING    PipelineD_NetworkServices = 0 // Deprecated: Do not use.
	PipelineD_DPI         PipelineD_NetworkServices = 1
	PipelineD_ENFORCEMENT PipelineD_NetworkServices = 2
)

var PipelineD_NetworkServices_name = map[int32]string{
	0: "METERING",
	1: "DPI",
	2: "ENFORCEMENT",
}

var PipelineD_NetworkServices_value = map[string]int32{
	"METERING":    0,
	"DPI":         1,
	"ENFORCEMENT": 2,
}

func (x PipelineD_NetworkServices) String() string {
	return proto.EnumName(PipelineD_NetworkServices_name, int32(x))
}

func (PipelineD_NetworkServices) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{2, 0}
}

type PipelineD_HEConfig_EncryptionAlgorithm int32

const (
	PipelineD_HEConfig_RC4                     PipelineD_HEConfig_EncryptionAlgorithm = 0
	PipelineD_HEConfig_AES256_CBC_HMAC_MD5     PipelineD_HEConfig_EncryptionAlgorithm = 1
	PipelineD_HEConfig_AES256_ECB_HMAC_MD5     PipelineD_HEConfig_EncryptionAlgorithm = 2
	PipelineD_HEConfig_GZIPPED_AES256_ECB_SHA1 PipelineD_HEConfig_EncryptionAlgorithm = 3
)

var PipelineD_HEConfig_EncryptionAlgorithm_name = map[int32]string{
	0: "RC4",
	1: "AES256_CBC_HMAC_MD5",
	2: "AES256_ECB_HMAC_MD5",
	3: "GZIPPED_AES256_ECB_SHA1",
}

var PipelineD_HEConfig_EncryptionAlgorithm_value = map[string]int32{
	"RC4":                     0,
	"AES256_CBC_HMAC_MD5":     1,
	"AES256_ECB_HMAC_MD5":     2,
	"GZIPPED_AES256_ECB_SHA1": 3,
}

func (x PipelineD_HEConfig_EncryptionAlgorithm) String() string {
	return proto.EnumName(PipelineD_HEConfig_EncryptionAlgorithm_name, int32(x))
}

func (PipelineD_HEConfig_EncryptionAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{2, 3, 0}
}

type PipelineD_HEConfig_HashFunction int32

const (
	PipelineD_HEConfig_MD5    PipelineD_HEConfig_HashFunction = 0
	PipelineD_HEConfig_HEX    PipelineD_HEConfig_HashFunction = 1
	PipelineD_HEConfig_SHA256 PipelineD_HEConfig_HashFunction = 2
)

var PipelineD_HEConfig_HashFunction_name = map[int32]string{
	0: "MD5",
	1: "HEX",
	2: "SHA256",
}

var PipelineD_HEConfig_HashFunction_value = map[string]int32{
	"MD5":    0,
	"HEX":    1,
	"SHA256": 2,
}

func (x PipelineD_HEConfig_HashFunction) String() string {
	return proto.EnumName(PipelineD_HEConfig_HashFunction_name, int32(x))
}

func (PipelineD_HEConfig_HashFunction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{2, 3, 1}
}

type PipelineD_HEConfig_EncodingType int32

const (
	PipelineD_HEConfig_BASE64  PipelineD_HEConfig_EncodingType = 0
	PipelineD_HEConfig_HEX2BIN PipelineD_HEConfig_EncodingType = 1
)

var PipelineD_HEConfig_EncodingType_name = map[int32]string{
	0: "BASE64",
	1: "HEX2BIN",
}

var PipelineD_HEConfig_EncodingType_value = map[string]int32{
	"BASE64":  0,
	"HEX2BIN": 1,
}

func (x PipelineD_HEConfig_EncodingType) String() string {
	return proto.EnumName(PipelineD_HEConfig_EncodingType_name, int32(x))
}

func (PipelineD_HEConfig_EncodingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{2, 3, 2}
}

type WalletExhaustDetection_Method int32

const (
	// If # of Gx Tracked Rules are > 0, then the wallet is still valid
	WalletExhaustDetection_GxTrackedRules WalletExhaustDetection_Method = 0
)

var WalletExhaustDetection_Method_name = map[int32]string{
	0: "GxTrackedRules",
}

var WalletExhaustDetection_Method_value = map[string]int32{
	"GxTrackedRules": 0,
}

func (x WalletExhaustDetection_Method) String() string {
	return proto.EnumName(WalletExhaustDetection_Method_name, int32(x))
}

func (WalletExhaustDetection_Method) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{4, 0}
}

// UE allocator type.
type MobilityD_IpAllocatorType int32

const (
	MobilityD_IP_POOL MobilityD_IpAllocatorType = 0
	MobilityD_DHCP    MobilityD_IpAllocatorType = 1
)

var MobilityD_IpAllocatorType_name = map[int32]string{
	0: "IP_POOL",
	1: "DHCP",
}

var MobilityD_IpAllocatorType_value = map[string]int32{
	"IP_POOL": 0,
	"DHCP":    1,
}

func (x MobilityD_IpAllocatorType) String() string {
	return proto.EnumName(MobilityD_IpAllocatorType_name, int32(x))
}

func (MobilityD_IpAllocatorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{7, 0}
}

// (0)Turning off NonEPS service, (1)Both CSFB and SMS, (2)only SMS
type MME_NonEPSServiceControl int32

const (
	MME_NON_EPS_SERVICE_CONTROL_OFF       MME_NonEPSServiceControl = 0
	MME_NON_EPS_SERVICE_CONTROL_CSFB_SMS  MME_NonEPSServiceControl = 1
	MME_NON_EPS_SERVICE_CONTROL_SMS       MME_NonEPSServiceControl = 2
	MME_NON_EPS_SERVICE_CONTROL_SMS_ORC8R MME_NonEPSServiceControl = 3
)

var MME_NonEPSServiceControl_name = map[int32]string{
	0: "NON_EPS_SERVICE_CONTROL_OFF",
	1: "NON_EPS_SERVICE_CONTROL_CSFB_SMS",
	2: "NON_EPS_SERVICE_CONTROL_SMS",
	3: "NON_EPS_SERVICE_CONTROL_SMS_ORC8R",
}

var MME_NonEPSServiceControl_value = map[string]int32{
	"NON_EPS_SERVICE_CONTROL_OFF":       0,
	"NON_EPS_SERVICE_CONTROL_CSFB_SMS":  1,
	"NON_EPS_SERVICE_CONTROL_SMS":       2,
	"NON_EPS_SERVICE_CONTROL_SMS_ORC8R": 3,
}

func (x MME_NonEPSServiceControl) String() string {
	return proto.EnumName(MME_NonEPSServiceControl_name, int32(x))
}

func (MME_NonEPSServiceControl) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{8, 0}
}

type ModeMapItem_FederatedMode int32

const (
	ModeMapItem_SPGW_SUBSCRIBER  ModeMapItem_FederatedMode = 0
	ModeMapItem_LOCAL_SUBSCRIBER ModeMapItem_FederatedMode = 1
	ModeMapItem_S8_SUBSCRIBER    ModeMapItem_FederatedMode = 2
)

var ModeMapItem_FederatedMode_name = map[int32]string{
	0: "SPGW_SUBSCRIBER",
	1: "LOCAL_SUBSCRIBER",
	2: "S8_SUBSCRIBER",
}

var ModeMapItem_FederatedMode_value = map[string]int32{
	"SPGW_SUBSCRIBER":  0,
	"LOCAL_SUBSCRIBER": 1,
	"S8_SUBSCRIBER":    2,
}

func (x ModeMapItem_FederatedMode) String() string {
	return proto.EnumName(ModeMapItem_FederatedMode_name, int32(x))
}

func (ModeMapItem_FederatedMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{10, 0}
}

type AgwD_LogLevel int32

const (
	AgwD_UNSET AgwD_LogLevel = 0
	AgwD_DEBUG AgwD_LogLevel = 1
	AgwD_INFO  AgwD_LogLevel = 2
	AgwD_WARN  AgwD_LogLevel = 3
	AgwD_ERROR AgwD_LogLevel = 4
)

var AgwD_LogLevel_name = map[int32]string{
	0: "UNSET",
	1: "DEBUG",
	2: "INFO",
	3: "WARN",
	4: "ERROR",
}

var AgwD_LogLevel_value = map[string]int32{
	"UNSET": 0,
	"DEBUG": 1,
	"INFO":  2,
	"WARN":  3,
	"ERROR": 4,
}

func (x AgwD_LogLevel) String() string {
	return proto.EnumName(AgwD_LogLevel_name, int32(x))
}

func (AgwD_LogLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{20, 0}
}

// --------------------------------------------------------------------------
// SentryConfig stores the network-wide Sentry.io configuration
// TODO(hcgatewood): remove this after 1.7 release, duplicated in the shared_mconfig
// --------------------------------------------------------------------------
type SentryConfig struct {
	// dsn_python initializes the Sentry Python SDK and sets the remote URL.
	// If set to empty string, Sentry Python SDK will not be initialized.
	DsnPython string `protobuf:"bytes,1,opt,name=dsn_python,json=dsnPython,proto3" json:"dsn_python,omitempty"`
	// dsn_native initializes the Sentry Native SDK for C/C++ and sets the
	// remote URL. If set to empty string, Sentry Native SDK will not be
	// initialized.
	DsnNative string `protobuf:"bytes,2,opt,name=dsn_native,json=dsnNative,proto3" json:"dsn_native,omitempty"`
	// upload_mme_log decides whether MME service log file (/var/log/mme.log)
	// is uploaded along with MME crashreports
	UploadMmeLog bool `protobuf:"varint,3,opt,name=upload_mme_log,json=uploadMmeLog,proto3" json:"upload_mme_log,omitempty"`
	// sample_rate sets the rate at which Python error events are sampled.
	// sample_rate should be a number between 0 (0% of errors sent) and 1 (100%
	// of errors sent)
	SampleRate float32 `protobuf:"fixed32,4,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	// message patterns that are excluded from Sentry (regex substring match)
	ExclusionPatterns []string `protobuf:"bytes,5,rep,name=exclusion_patterns,json=exclusionPatterns,proto3" json:"exclusion_patterns,omitempty"`
	// number_of_lines_in_log defines the number of lines from the
	// journal log that is uploaded with every crash report
	NumberOfLinesInLog   uint32   `protobuf:"varint,6,opt,name=number_of_lines_in_log,json=numberOfLinesInLog,proto3" json:"number_of_lines_in_log,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SentryConfig) Reset()         { *m = SentryConfig{} }
func (m *SentryConfig) String() string { return proto.CompactTextString(m) }
func (*SentryConfig) ProtoMessage()    {}
func (*SentryConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{0}
}

func (m *SentryConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SentryConfig.Unmarshal(m, b)
}
func (m *SentryConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SentryConfig.Marshal(b, m, deterministic)
}
func (m *SentryConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SentryConfig.Merge(m, src)
}
func (m *SentryConfig) XXX_Size() int {
	return xxx_messageInfo_SentryConfig.Size(m)
}
func (m *SentryConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SentryConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SentryConfig proto.InternalMessageInfo

func (m *SentryConfig) GetDsnPython() string {
	if m != nil {
		return m.DsnPython
	}
	return ""
}

func (m *SentryConfig) GetDsnNative() string {
	if m != nil {
		return m.DsnNative
	}
	return ""
}

func (m *SentryConfig) GetUploadMmeLog() bool {
	if m != nil {
		return m.UploadMmeLog
	}
	return false
}

func (m *SentryConfig) GetSampleRate() float32 {
	if m != nil {
		return m.SampleRate
	}
	return 0
}

func (m *SentryConfig) GetExclusionPatterns() []string {
	if m != nil {
		return m.ExclusionPatterns
	}
	return nil
}

func (m *SentryConfig) GetNumberOfLinesInLog() uint32 {
	if m != nil {
		return m.NumberOfLinesInLog
	}
	return 0
}

//------------------------------------------------------------------------------
// EnodebD configs
//------------------------------------------------------------------------------
type EnodebD struct {
	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	// Physical cell ID (0-504)
	Pci int32 `protobuf:"varint,2,opt,name=pci,proto3" json:"pci,omitempty"`
	// Frequency channel number. See niviuk.free.fr/lte_band.php for mapping to
	// frequency
	Earfcndl int32 `protobuf:"varint,3,opt,name=earfcndl,proto3" json:"earfcndl,omitempty"`
	// Bandwidth in MHz, from set {1.4, 3, 5, 10, 15, 20}
	BandwidthMhz int32 `protobuf:"varint,4,opt,name=bandwidth_mhz,json=bandwidthMhz,proto3" json:"bandwidth_mhz,omitempty"`
	// Network operator identifier.
	PlmnidList string `protobuf:"bytes,5,opt,name=plmnid_list,json=plmnidList,proto3" json:"plmnid_list,omitempty"`
	// TDD subframe config parameter. See http://niviuk.free.fr/lte_tdd.php
	SubframeAssignment int32 `protobuf:"varint,6,opt,name=subframe_assignment,json=subframeAssignment,proto3" json:"subframe_assignment,omitempty"`
	// TDD subframe config parameter. See http://niviuk.free.fr/lte_tdd.php
	SpecialSubframePattern int32 `protobuf:"varint,7,opt,name=special_subframe_pattern,json=specialSubframePattern,proto3" json:"special_subframe_pattern,omitempty"`
	// Enable eNodeB
	AllowEnodebTransmit bool `protobuf:"varint,8,opt,name=allow_enodeb_transmit,json=allowEnodebTransmit,proto3" json:"allow_enodeb_transmit,omitempty"`
	// Tracking area code. 16-bit
	Tac int32 `protobuf:"varint,9,opt,name=tac,proto3" json:"tac,omitempty"`
	// RAT type (2G/3G), used by eNB
	CsfbRat EnodebD_CSFBRat `protobuf:"varint,10,opt,name=csfb_rat,json=csfbRat,proto3,enum=magma.mconfig.EnodebD_CSFBRat" json:"csfb_rat,omitempty"`
	// 2G RAT frequencies /ARFCNs for redirection, used by eNB
	Arfcn_2G             []int32                          `protobuf:"varint,11,rep,packed,name=arfcn_2g,json=arfcn2g,proto3" json:"arfcn_2g,omitempty"`
	TddConfig            *EnodebD_TDDConfig               `protobuf:"bytes,12,opt,name=tdd_config,json=tddConfig,proto3" json:"tdd_config,omitempty"`
	FddConfig            *EnodebD_FDDConfig               `protobuf:"bytes,13,opt,name=fdd_config,json=fddConfig,proto3" json:"fdd_config,omitempty"`
	EnbConfigsBySerial   map[string]*EnodebD_EnodebConfig `protobuf:"bytes,14,rep,name=enb_configs_by_serial,json=enbConfigsBySerial,proto3" json:"enb_configs_by_serial,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *EnodebD) Reset()         { *m = EnodebD{} }
func (m *EnodebD) String() string { return proto.CompactTextString(m) }
func (*EnodebD) ProtoMessage()    {}
func (*EnodebD) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{1}
}

func (m *EnodebD) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnodebD.Unmarshal(m, b)
}
func (m *EnodebD) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnodebD.Marshal(b, m, deterministic)
}
func (m *EnodebD) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnodebD.Merge(m, src)
}
func (m *EnodebD) XXX_Size() int {
	return xxx_messageInfo_EnodebD.Size(m)
}
func (m *EnodebD) XXX_DiscardUnknown() {
	xxx_messageInfo_EnodebD.DiscardUnknown(m)
}

var xxx_messageInfo_EnodebD proto.InternalMessageInfo

func (m *EnodebD) GetLogLevel() protos.LogLevel {
	if m != nil {
		return m.LogLevel
	}
	return protos.LogLevel_DEBUG
}

func (m *EnodebD) GetPci() int32 {
	if m != nil {
		return m.Pci
	}
	return 0
}

func (m *EnodebD) GetEarfcndl() int32 {
	if m != nil {
		return m.Earfcndl
	}
	return 0
}

func (m *EnodebD) GetBandwidthMhz() int32 {
	if m != nil {
		return m.BandwidthMhz
	}
	return 0
}

func (m *EnodebD) GetPlmnidList() string {
	if m != nil {
		return m.PlmnidList
	}
	return ""
}

func (m *EnodebD) GetSubframeAssignment() int32 {
	if m != nil {
		return m.SubframeAssignment
	}
	return 0
}

func (m *EnodebD) GetSpecialSubframePattern() int32 {
	if m != nil {
		return m.SpecialSubframePattern
	}
	return 0
}

func (m *EnodebD) GetAllowEnodebTransmit() bool {
	if m != nil {
		return m.AllowEnodebTransmit
	}
	return false
}

func (m *EnodebD) GetTac() int32 {
	if m != nil {
		return m.Tac
	}
	return 0
}

func (m *EnodebD) GetCsfbRat() EnodebD_CSFBRat {
	if m != nil {
		return m.CsfbRat
	}
	return EnodebD_CSFBRAT_2G
}

func (m *EnodebD) GetArfcn_2G() []int32 {
	if m != nil {
		return m.Arfcn_2G
	}
	return nil
}

func (m *EnodebD) GetTddConfig() *EnodebD_TDDConfig {
	if m != nil {
		return m.TddConfig
	}
	return nil
}

func (m *EnodebD) GetFddConfig() *EnodebD_FDDConfig {
	if m != nil {
		return m.FddConfig
	}
	return nil
}

func (m *EnodebD) GetEnbConfigsBySerial() map[string]*EnodebD_EnodebConfig {
	if m != nil {
		return m.EnbConfigsBySerial
	}
	return nil
}

type EnodebD_FDDConfig struct {
	Earfcndl             int32    `protobuf:"varint,1,opt,name=earfcndl,proto3" json:"earfcndl,omitempty"`
	Earfcnul             int32    `protobuf:"varint,2,opt,name=earfcnul,proto3" json:"earfcnul,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnodebD_FDDConfig) Reset()         { *m = EnodebD_FDDConfig{} }
func (m *EnodebD_FDDConfig) String() string { return proto.CompactTextString(m) }
func (*EnodebD_FDDConfig) ProtoMessage()    {}
func (*EnodebD_FDDConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{1, 0}
}

func (m *EnodebD_FDDConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnodebD_FDDConfig.Unmarshal(m, b)
}
func (m *EnodebD_FDDConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnodebD_FDDConfig.Marshal(b, m, deterministic)
}
func (m *EnodebD_FDDConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnodebD_FDDConfig.Merge(m, src)
}
func (m *EnodebD_FDDConfig) XXX_Size() int {
	return xxx_messageInfo_EnodebD_FDDConfig.Size(m)
}
func (m *EnodebD_FDDConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_EnodebD_FDDConfig.DiscardUnknown(m)
}

var xxx_messageInfo_EnodebD_FDDConfig proto.InternalMessageInfo

func (m *EnodebD_FDDConfig) GetEarfcndl() int32 {
	if m != nil {
		return m.Earfcndl
	}
	return 0
}

func (m *EnodebD_FDDConfig) GetEarfcnul() int32 {
	if m != nil {
		return m.Earfcnul
	}
	return 0
}

type EnodebD_TDDConfig struct {
	Earfcndl int32 `protobuf:"varint,1,opt,name=earfcndl,proto3" json:"earfcndl,omitempty"`
	// TDD subframe config parameter. See http://niviuk.free.fr/lte_tdd.php
	SubframeAssignment int32 `protobuf:"varint,2,opt,name=subframe_assignment,json=subframeAssignment,proto3" json:"subframe_assignment,omitempty"`
	// TDD subframe config parameter. See http://niviuk.free.fr/lte_tdd.php
	SpecialSubframePattern int32    `protobuf:"varint,3,opt,name=special_subframe_pattern,json=specialSubframePattern,proto3" json:"special_subframe_pattern,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *EnodebD_TDDConfig) Reset()         { *m = EnodebD_TDDConfig{} }
func (m *EnodebD_TDDConfig) String() string { return proto.CompactTextString(m) }
func (*EnodebD_TDDConfig) ProtoMessage()    {}
func (*EnodebD_TDDConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{1, 1}
}

func (m *EnodebD_TDDConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnodebD_TDDConfig.Unmarshal(m, b)
}
func (m *EnodebD_TDDConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnodebD_TDDConfig.Marshal(b, m, deterministic)
}
func (m *EnodebD_TDDConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnodebD_TDDConfig.Merge(m, src)
}
func (m *EnodebD_TDDConfig) XXX_Size() int {
	return xxx_messageInfo_EnodebD_TDDConfig.Size(m)
}
func (m *EnodebD_TDDConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_EnodebD_TDDConfig.DiscardUnknown(m)
}

var xxx_messageInfo_EnodebD_TDDConfig proto.InternalMessageInfo

func (m *EnodebD_TDDConfig) GetEarfcndl() int32 {
	if m != nil {
		return m.Earfcndl
	}
	return 0
}

func (m *EnodebD_TDDConfig) GetSubframeAssignment() int32 {
	if m != nil {
		return m.SubframeAssignment
	}
	return 0
}

func (m *EnodebD_TDDConfig) GetSpecialSubframePattern() int32 {
	if m != nil {
		return m.SpecialSubframePattern
	}
	return 0
}

type EnodebD_EnodebConfig struct {
	// Device-unique serial ID. Used to identify the eNodeB, and ties the
	// config to that device
	Earfcndl               int32    `protobuf:"varint,1,opt,name=earfcndl,proto3" json:"earfcndl,omitempty"`
	SubframeAssignment     int32    `protobuf:"varint,2,opt,name=subframe_assignment,json=subframeAssignment,proto3" json:"subframe_assignment,omitempty"`
	SpecialSubframePattern int32    `protobuf:"varint,3,opt,name=special_subframe_pattern,json=specialSubframePattern,proto3" json:"special_subframe_pattern,omitempty"`
	Pci                    int32    `protobuf:"varint,4,opt,name=pci,proto3" json:"pci,omitempty"`
	TransmitEnabled        bool     `protobuf:"varint,5,opt,name=transmit_enabled,json=transmitEnabled,proto3" json:"transmit_enabled,omitempty"`
	DeviceClass            string   `protobuf:"bytes,6,opt,name=device_class,json=deviceClass,proto3" json:"device_class,omitempty"`
	BandwidthMhz           int32    `protobuf:"varint,7,opt,name=bandwidth_mhz,json=bandwidthMhz,proto3" json:"bandwidth_mhz,omitempty"`
	Tac                    int32    `protobuf:"varint,8,opt,name=tac,proto3" json:"tac,omitempty"`
	CellId                 int32    `protobuf:"varint,9,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
	IpAddress              string   `protobuf:"bytes,10,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *EnodebD_EnodebConfig) Reset()         { *m = EnodebD_EnodebConfig{} }
func (m *EnodebD_EnodebConfig) String() string { return proto.CompactTextString(m) }
func (*EnodebD_EnodebConfig) ProtoMessage()    {}
func (*EnodebD_EnodebConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{1, 2}
}

func (m *EnodebD_EnodebConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnodebD_EnodebConfig.Unmarshal(m, b)
}
func (m *EnodebD_EnodebConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnodebD_EnodebConfig.Marshal(b, m, deterministic)
}
func (m *EnodebD_EnodebConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnodebD_EnodebConfig.Merge(m, src)
}
func (m *EnodebD_EnodebConfig) XXX_Size() int {
	return xxx_messageInfo_EnodebD_EnodebConfig.Size(m)
}
func (m *EnodebD_EnodebConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_EnodebD_EnodebConfig.DiscardUnknown(m)
}

var xxx_messageInfo_EnodebD_EnodebConfig proto.InternalMessageInfo

func (m *EnodebD_EnodebConfig) GetEarfcndl() int32 {
	if m != nil {
		return m.Earfcndl
	}
	return 0
}

func (m *EnodebD_EnodebConfig) GetSubframeAssignment() int32 {
	if m != nil {
		return m.SubframeAssignment
	}
	return 0
}

func (m *EnodebD_EnodebConfig) GetSpecialSubframePattern() int32 {
	if m != nil {
		return m.SpecialSubframePattern
	}
	return 0
}

func (m *EnodebD_EnodebConfig) GetPci() int32 {
	if m != nil {
		return m.Pci
	}
	return 0
}

func (m *EnodebD_EnodebConfig) GetTransmitEnabled() bool {
	if m != nil {
		return m.TransmitEnabled
	}
	return false
}

func (m *EnodebD_EnodebConfig) GetDeviceClass() string {
	if m != nil {
		return m.DeviceClass
	}
	return ""
}

func (m *EnodebD_EnodebConfig) GetBandwidthMhz() int32 {
	if m != nil {
		return m.BandwidthMhz
	}
	return 0
}

func (m *EnodebD_EnodebConfig) GetTac() int32 {
	if m != nil {
		return m.Tac
	}
	return 0
}

func (m *EnodebD_EnodebConfig) GetCellId() int32 {
	if m != nil {
		return m.CellId
	}
	return 0
}

func (m *EnodebD_EnodebConfig) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

//------------------------------------------------------------------------------
// PipelineD configs
//------------------------------------------------------------------------------
type PipelineD struct {
	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	// Range of IPs allocated to UEs
	UeIpBlock string `protobuf:"bytes,2,opt,name=ue_ip_block,json=ueIpBlock,proto3" json:"ue_ip_block,omitempty"`
	// Whether NAT is enabled
	NatEnabled bool `protobuf:"varint,3,opt,name=nat_enabled,json=natEnabled,proto3" json:"nat_enabled,omitempty"`
	// repeated PolicyRule policy_rules = 5; // Policies have moved to policydb.proto
	DefaultRuleId            string                      `protobuf:"bytes,6,opt,name=default_rule_id,json=defaultRuleId,proto3" json:"default_rule_id,omitempty"`
	Services                 []PipelineD_NetworkServices `protobuf:"varint,8,rep,packed,name=services,proto3,enum=magma.mconfig.PipelineD_NetworkServices" json:"services,omitempty"`
	AllowedGrePeers          []*PipelineD_AllowedGrePeer `protobuf:"bytes,9,rep,name=allowed_gre_peers,json=allowedGrePeers,proto3" json:"allowed_gre_peers,omitempty"`
	IpdrExportDst            *PipelineD_IPDRExportDst    `protobuf:"bytes,10,opt,name=ipdr_export_dst,json=ipdrExportDst,proto3" json:"ipdr_export_dst,omitempty"`
	LiUes                    *PipelineD_LiUes            `protobuf:"bytes,12,opt,name=li_ues,json=liUes,proto3" json:"li_ues,omitempty"`
	SgiManagementIfaceVlan   string                      `protobuf:"bytes,13,opt,name=sgi_management_iface_vlan,json=sgiManagementIfaceVlan,proto3" json:"sgi_management_iface_vlan,omitempty"`
	SgiManagementIfaceIpAddr string                      `protobuf:"bytes,14,opt,name=sgi_management_iface_ip_addr,json=sgiManagementIfaceIpAddr,proto3" json:"sgi_management_iface_ip_addr,omitempty"`
	SgiManagementIfaceGw     string                      `protobuf:"bytes,15,opt,name=sgi_management_iface_gw,json=sgiManagementIfaceGw,proto3" json:"sgi_management_iface_gw,omitempty"`
	HeConfig                 *PipelineD_HEConfig         `protobuf:"bytes,17,opt,name=he_config,json=heConfig,proto3" json:"he_config,omitempty"`
	// Enables 5G Standalone (SA) at a network level
	Enable5GFeatures  bool   `protobuf:"varint,18,opt,name=enable5g_features,json=enable5gFeatures,proto3" json:"enable5g_features,omitempty"`
	UpfNodeIdentifier string `protobuf:"bytes,19,opt,name=upf_node_identifier,json=upfNodeIdentifier,proto3" json:"upf_node_identifier,omitempty"`
	// SGi management IPv6 address with network mask
	SgiManagementIfaceIpv6Addr string `protobuf:"bytes,20,opt,name=sgi_management_iface_ipv6_addr,json=sgiManagementIfaceIpv6Addr,proto3" json:"sgi_management_iface_ipv6_addr,omitempty"`
	// IPv6 address of SGi management network GW
	SgiManagementIfaceIpv6Gw string   `protobuf:"bytes,21,opt,name=sgi_management_iface_ipv6_gw,json=sgiManagementIfaceIpv6Gw,proto3" json:"sgi_management_iface_ipv6_gw,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *PipelineD) Reset()         { *m = PipelineD{} }
func (m *PipelineD) String() string { return proto.CompactTextString(m) }
func (*PipelineD) ProtoMessage()    {}
func (*PipelineD) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{2}
}

func (m *PipelineD) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PipelineD.Unmarshal(m, b)
}
func (m *PipelineD) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PipelineD.Marshal(b, m, deterministic)
}
func (m *PipelineD) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineD.Merge(m, src)
}
func (m *PipelineD) XXX_Size() int {
	return xxx_messageInfo_PipelineD.Size(m)
}
func (m *PipelineD) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineD.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineD proto.InternalMessageInfo

func (m *PipelineD) GetLogLevel() protos.LogLevel {
	if m != nil {
		return m.LogLevel
	}
	return protos.LogLevel_DEBUG
}

func (m *PipelineD) GetUeIpBlock() string {
	if m != nil {
		return m.UeIpBlock
	}
	return ""
}

func (m *PipelineD) GetNatEnabled() bool {
	if m != nil {
		return m.NatEnabled
	}
	return false
}

func (m *PipelineD) GetDefaultRuleId() string {
	if m != nil {
		return m.DefaultRuleId
	}
	return ""
}

func (m *PipelineD) GetServices() []PipelineD_NetworkServices {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *PipelineD) GetAllowedGrePeers() []*PipelineD_AllowedGrePeer {
	if m != nil {
		return m.AllowedGrePeers
	}
	return nil
}

func (m *PipelineD) GetIpdrExportDst() *PipelineD_IPDRExportDst {
	if m != nil {
		return m.IpdrExportDst
	}
	return nil
}

func (m *PipelineD) GetLiUes() *PipelineD_LiUes {
	if m != nil {
		return m.LiUes
	}
	return nil
}

func (m *PipelineD) GetSgiManagementIfaceVlan() string {
	if m != nil {
		return m.SgiManagementIfaceVlan
	}
	return ""
}

func (m *PipelineD) GetSgiManagementIfaceIpAddr() string {
	if m != nil {
		return m.SgiManagementIfaceIpAddr
	}
	return ""
}

func (m *PipelineD) GetSgiManagementIfaceGw() string {
	if m != nil {
		return m.SgiManagementIfaceGw
	}
	return ""
}

func (m *PipelineD) GetHeConfig() *PipelineD_HEConfig {
	if m != nil {
		return m.HeConfig
	}
	return nil
}

func (m *PipelineD) GetEnable5GFeatures() bool {
	if m != nil {
		return m.Enable5GFeatures
	}
	return false
}

func (m *PipelineD) GetUpfNodeIdentifier() string {
	if m != nil {
		return m.UpfNodeIdentifier
	}
	return ""
}

func (m *PipelineD) GetSgiManagementIfaceIpv6Addr() string {
	if m != nil {
		return m.SgiManagementIfaceIpv6Addr
	}
	return ""
}

func (m *PipelineD) GetSgiManagementIfaceIpv6Gw() string {
	if m != nil {
		return m.SgiManagementIfaceIpv6Gw
	}
	return ""
}

type PipelineD_AllowedGrePeer struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Key                  uint32   `protobuf:"varint,2,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PipelineD_AllowedGrePeer) Reset()         { *m = PipelineD_AllowedGrePeer{} }
func (m *PipelineD_AllowedGrePeer) String() string { return proto.CompactTextString(m) }
func (*PipelineD_AllowedGrePeer) ProtoMessage()    {}
func (*PipelineD_AllowedGrePeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{2, 0}
}

func (m *PipelineD_AllowedGrePeer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PipelineD_AllowedGrePeer.Unmarshal(m, b)
}
func (m *PipelineD_AllowedGrePeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PipelineD_AllowedGrePeer.Marshal(b, m, deterministic)
}
func (m *PipelineD_AllowedGrePeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineD_AllowedGrePeer.Merge(m, src)
}
func (m *PipelineD_AllowedGrePeer) XXX_Size() int {
	return xxx_messageInfo_PipelineD_AllowedGrePeer.Size(m)
}
func (m *PipelineD_AllowedGrePeer) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineD_AllowedGrePeer.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineD_AllowedGrePeer proto.InternalMessageInfo

func (m *PipelineD_AllowedGrePeer) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *PipelineD_AllowedGrePeer) GetKey() uint32 {
	if m != nil {
		return m.Key
	}
	return 0
}

type PipelineD_IPDRExportDst struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 uint32   `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PipelineD_IPDRExportDst) Reset()         { *m = PipelineD_IPDRExportDst{} }
func (m *PipelineD_IPDRExportDst) String() string { return proto.CompactTextString(m) }
func (*PipelineD_IPDRExportDst) ProtoMessage()    {}
func (*PipelineD_IPDRExportDst) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{2, 1}
}

func (m *PipelineD_IPDRExportDst) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PipelineD_IPDRExportDst.Unmarshal(m, b)
}
func (m *PipelineD_IPDRExportDst) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PipelineD_IPDRExportDst.Marshal(b, m, deterministic)
}
func (m *PipelineD_IPDRExportDst) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineD_IPDRExportDst.Merge(m, src)
}
func (m *PipelineD_IPDRExportDst) XXX_Size() int {
	return xxx_messageInfo_PipelineD_IPDRExportDst.Size(m)
}
func (m *PipelineD_IPDRExportDst) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineD_IPDRExportDst.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineD_IPDRExportDst proto.InternalMessageInfo

func (m *PipelineD_IPDRExportDst) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *PipelineD_IPDRExportDst) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type PipelineD_LiUes struct {
	Imsis                []string `protobuf:"bytes,1,rep,name=imsis,proto3" json:"imsis,omitempty"`
	Msisdns              []string `protobuf:"bytes,2,rep,name=msisdns,proto3" json:"msisdns,omitempty"`
	Macs                 []string `protobuf:"bytes,3,rep,name=macs,proto3" json:"macs,omitempty"`
	Ips                  []string `protobuf:"bytes,4,rep,name=ips,proto3" json:"ips,omitempty"`
	Imeis                []string `protobuf:"bytes,5,rep,name=imeis,proto3" json:"imeis,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PipelineD_LiUes) Reset()         { *m = PipelineD_LiUes{} }
func (m *PipelineD_LiUes) String() string { return proto.CompactTextString(m) }
func (*PipelineD_LiUes) ProtoMessage()    {}
func (*PipelineD_LiUes) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{2, 2}
}

func (m *PipelineD_LiUes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PipelineD_LiUes.Unmarshal(m, b)
}
func (m *PipelineD_LiUes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PipelineD_LiUes.Marshal(b, m, deterministic)
}
func (m *PipelineD_LiUes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineD_LiUes.Merge(m, src)
}
func (m *PipelineD_LiUes) XXX_Size() int {
	return xxx_messageInfo_PipelineD_LiUes.Size(m)
}
func (m *PipelineD_LiUes) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineD_LiUes.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineD_LiUes proto.InternalMessageInfo

func (m *PipelineD_LiUes) GetImsis() []string {
	if m != nil {
		return m.Imsis
	}
	return nil
}

func (m *PipelineD_LiUes) GetMsisdns() []string {
	if m != nil {
		return m.Msisdns
	}
	return nil
}

func (m *PipelineD_LiUes) GetMacs() []string {
	if m != nil {
		return m.Macs
	}
	return nil
}

func (m *PipelineD_LiUes) GetIps() []string {
	if m != nil {
		return m.Ips
	}
	return nil
}

func (m *PipelineD_LiUes) GetImeis() []string {
	if m != nil {
		return m.Imeis
	}
	return nil
}

type PipelineD_HEConfig struct {
	// enable_header_enrichment is true if header enrichment feature is
	// enabled for gateway
	EnableHeaderEnrichment bool `protobuf:"varint,1,opt,name=enable_header_enrichment,json=enableHeaderEnrichment,proto3" json:"enable_header_enrichment,omitempty"`
	EnableEncryption       bool `protobuf:"varint,2,opt,name=enable_encryption,json=enableEncryption,proto3" json:"enable_encryption,omitempty"`
	// encryption/hashing/encoding information for headers
	EncryptionAlgorithm  PipelineD_HEConfig_EncryptionAlgorithm `protobuf:"varint,3,opt,name=encryptionAlgorithm,proto3,enum=magma.mconfig.PipelineD_HEConfig_EncryptionAlgorithm" json:"encryptionAlgorithm,omitempty"`
	HashFunction         PipelineD_HEConfig_HashFunction        `protobuf:"varint,4,opt,name=hashFunction,proto3,enum=magma.mconfig.PipelineD_HEConfig_HashFunction" json:"hashFunction,omitempty"`
	EncodingType         PipelineD_HEConfig_EncodingType        `protobuf:"varint,5,opt,name=encodingType,proto3,enum=magma.mconfig.PipelineD_HEConfig_EncodingType" json:"encodingType,omitempty"`
	EncryptionKey        string                                 `protobuf:"bytes,6,opt,name=encryption_key,json=encryptionKey,proto3" json:"encryption_key,omitempty"`
	HmacKey              string                                 `protobuf:"bytes,7,opt,name=hmac_key,json=hmacKey,proto3" json:"hmac_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *PipelineD_HEConfig) Reset()         { *m = PipelineD_HEConfig{} }
func (m *PipelineD_HEConfig) String() string { return proto.CompactTextString(m) }
func (*PipelineD_HEConfig) ProtoMessage()    {}
func (*PipelineD_HEConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{2, 3}
}

func (m *PipelineD_HEConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PipelineD_HEConfig.Unmarshal(m, b)
}
func (m *PipelineD_HEConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PipelineD_HEConfig.Marshal(b, m, deterministic)
}
func (m *PipelineD_HEConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineD_HEConfig.Merge(m, src)
}
func (m *PipelineD_HEConfig) XXX_Size() int {
	return xxx_messageInfo_PipelineD_HEConfig.Size(m)
}
func (m *PipelineD_HEConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineD_HEConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineD_HEConfig proto.InternalMessageInfo

func (m *PipelineD_HEConfig) GetEnableHeaderEnrichment() bool {
	if m != nil {
		return m.EnableHeaderEnrichment
	}
	return false
}

func (m *PipelineD_HEConfig) GetEnableEncryption() bool {
	if m != nil {
		return m.EnableEncryption
	}
	return false
}

func (m *PipelineD_HEConfig) GetEncryptionAlgorithm() PipelineD_HEConfig_EncryptionAlgorithm {
	if m != nil {
		return m.EncryptionAlgorithm
	}
	return PipelineD_HEConfig_RC4
}

func (m *PipelineD_HEConfig) GetHashFunction() PipelineD_HEConfig_HashFunction {
	if m != nil {
		return m.HashFunction
	}
	return PipelineD_HEConfig_MD5
}

func (m *PipelineD_HEConfig) GetEncodingType() PipelineD_HEConfig_EncodingType {
	if m != nil {
		return m.EncodingType
	}
	return PipelineD_HEConfig_BASE64
}

func (m *PipelineD_HEConfig) GetEncryptionKey() string {
	if m != nil {
		return m.EncryptionKey
	}
	return ""
}

func (m *PipelineD_HEConfig) GetHmacKey() string {
	if m != nil {
		return m.HmacKey
	}
	return ""
}

//------------------------------------------------------------------------------
// SessionD configs
//------------------------------------------------------------------------------
type SessionD struct {
	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	// DEPRECATED
	// Enable forwarding S6a related requests to Federated GW
	RelayEnabled           bool                    `protobuf:"varint,2,opt,name=relay_enabled,json=relayEnabled,proto3" json:"relay_enabled,omitempty"` // Deprecated: Do not use.
	WalletExhaustDetection *WalletExhaustDetection `protobuf:"bytes,3,opt,name=wallet_exhaust_detection,json=walletExhaustDetection,proto3" json:"wallet_exhaust_detection,omitempty"`
	// Enable relaying Gx/Gy messages via FeG RPC
	GxGyRelayEnabled bool `protobuf:"varint,4,opt,name=gx_gy_relay_enabled,json=gxGyRelayEnabled,proto3" json:"gx_gy_relay_enabled,omitempty"`
	// DEPRECATED: now configured in "shared_mconfig"
	// sentry_config stores the Sentry.io configuration for this service
	SentryConfig *SentryConfig `protobuf:"bytes,5,opt,name=sentry_config,json=sentryConfig,proto3" json:"sentry_config,omitempty"` // Deprecated: Do not use.
	// Enables 5G Standalone (SA) at a network level
	Enable5GFeatures     bool     `protobuf:"varint,6,opt,name=enable5g_features,json=enable5gFeatures,proto3" json:"enable5g_features,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionD) Reset()         { *m = SessionD{} }
func (m *SessionD) String() string { return proto.CompactTextString(m) }
func (*SessionD) ProtoMessage()    {}
func (*SessionD) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{3}
}

func (m *SessionD) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionD.Unmarshal(m, b)
}
func (m *SessionD) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionD.Marshal(b, m, deterministic)
}
func (m *SessionD) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionD.Merge(m, src)
}
func (m *SessionD) XXX_Size() int {
	return xxx_messageInfo_SessionD.Size(m)
}
func (m *SessionD) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionD.DiscardUnknown(m)
}

var xxx_messageInfo_SessionD proto.InternalMessageInfo

func (m *SessionD) GetLogLevel() protos.LogLevel {
	if m != nil {
		return m.LogLevel
	}
	return protos.LogLevel_DEBUG
}

// Deprecated: Do not use.
func (m *SessionD) GetRelayEnabled() bool {
	if m != nil {
		return m.RelayEnabled
	}
	return false
}

func (m *SessionD) GetWalletExhaustDetection() *WalletExhaustDetection {
	if m != nil {
		return m.WalletExhaustDetection
	}
	return nil
}

func (m *SessionD) GetGxGyRelayEnabled() bool {
	if m != nil {
		return m.GxGyRelayEnabled
	}
	return false
}

// Deprecated: Do not use.
func (m *SessionD) GetSentryConfig() *SentryConfig {
	if m != nil {
		return m.SentryConfig
	}
	return nil
}

func (m *SessionD) GetEnable5GFeatures() bool {
	if m != nil {
		return m.Enable5GFeatures
	}
	return false
}

type WalletExhaustDetection struct {
	// Enable the feature where session is terminated on wallet exhaust
	TerminateOnExhaust bool `protobuf:"varint,1,opt,name=terminate_on_exhaust,json=terminateOnExhaust,proto3" json:"terminate_on_exhaust,omitempty"`
	// How wallet exhast is detected on SessionD
	Method WalletExhaustDetection_Method `protobuf:"varint,2,opt,name=method,proto3,enum=magma.mconfig.WalletExhaustDetection_Method" json:"method,omitempty"`
	// How long to wait before terminating a out-of-wallet subscriber on attach
	TimeoutMs            uint32   `protobuf:"varint,3,opt,name=timeout_ms,json=timeoutMs,proto3" json:"timeout_ms,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WalletExhaustDetection) Reset()         { *m = WalletExhaustDetection{} }
func (m *WalletExhaustDetection) String() string { return proto.CompactTextString(m) }
func (*WalletExhaustDetection) ProtoMessage()    {}
func (*WalletExhaustDetection) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{4}
}

func (m *WalletExhaustDetection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WalletExhaustDetection.Unmarshal(m, b)
}
func (m *WalletExhaustDetection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WalletExhaustDetection.Marshal(b, m, deterministic)
}
func (m *WalletExhaustDetection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalletExhaustDetection.Merge(m, src)
}
func (m *WalletExhaustDetection) XXX_Size() int {
	return xxx_messageInfo_WalletExhaustDetection.Size(m)
}
func (m *WalletExhaustDetection) XXX_DiscardUnknown() {
	xxx_messageInfo_WalletExhaustDetection.DiscardUnknown(m)
}

var xxx_messageInfo_WalletExhaustDetection proto.InternalMessageInfo

func (m *WalletExhaustDetection) GetTerminateOnExhaust() bool {
	if m != nil {
		return m.TerminateOnExhaust
	}
	return false
}

func (m *WalletExhaustDetection) GetMethod() WalletExhaustDetection_Method {
	if m != nil {
		return m.Method
	}
	return WalletExhaustDetection_GxTrackedRules
}

func (m *WalletExhaustDetection) GetTimeoutMs() uint32 {
	if m != nil {
		return m.TimeoutMs
	}
	return 0
}

//------------------------------------------------------------------------------
// PolicyDB configs
//------------------------------------------------------------------------------
type PolicyDB struct {
	LogLevel             protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PolicyDB) Reset()         { *m = PolicyDB{} }
func (m *PolicyDB) String() string { return proto.CompactTextString(m) }
func (*PolicyDB) ProtoMessage()    {}
func (*PolicyDB) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{5}
}

func (m *PolicyDB) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PolicyDB.Unmarshal(m, b)
}
func (m *PolicyDB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PolicyDB.Marshal(b, m, deterministic)
}
func (m *PolicyDB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyDB.Merge(m, src)
}
func (m *PolicyDB) XXX_Size() int {
	return xxx_messageInfo_PolicyDB.Size(m)
}
func (m *PolicyDB) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyDB.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyDB proto.InternalMessageInfo

func (m *PolicyDB) GetLogLevel() protos.LogLevel {
	if m != nil {
		return m.LogLevel
	}
	return protos.LogLevel_DEBUG
}

//------------------------------------------------------------------------------
// RedirectD configs
//------------------------------------------------------------------------------
type RedirectD struct {
	LogLevel             protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RedirectD) Reset()         { *m = RedirectD{} }
func (m *RedirectD) String() string { return proto.CompactTextString(m) }
func (*RedirectD) ProtoMessage()    {}
func (*RedirectD) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{6}
}

func (m *RedirectD) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedirectD.Unmarshal(m, b)
}
func (m *RedirectD) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedirectD.Marshal(b, m, deterministic)
}
func (m *RedirectD) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedirectD.Merge(m, src)
}
func (m *RedirectD) XXX_Size() int {
	return xxx_messageInfo_RedirectD.Size(m)
}
func (m *RedirectD) XXX_DiscardUnknown() {
	xxx_messageInfo_RedirectD.DiscardUnknown(m)
}

var xxx_messageInfo_RedirectD proto.InternalMessageInfo

func (m *RedirectD) GetLogLevel() protos.LogLevel {
	if m != nil {
		return m.LogLevel
	}
	return protos.LogLevel_DEBUG
}

//------------------------------------------------------------------------------
// MobilityD configs
//------------------------------------------------------------------------------
type MobilityD struct {
	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	// An IP block is a range of IP addresses specified by a network address and
	// a prefix-length of the netmask. For example,
	//    IPv4 IP block:      "192.168.0.0/24"
	IpBlock string `protobuf:"bytes,2,opt,name=ip_block,json=ipBlock,proto3" json:"ip_block,omitempty"`
	// ip allocation type, either dhcp or ip_pool
	// default is ip_pool
	IpAllocatorType MobilityD_IpAllocatorType `protobuf:"varint,3,opt,name=ip_allocator_type,json=ipAllocatorType,proto3,enum=magma.mconfig.MobilityD_IpAllocatorType" json:"ip_allocator_type,omitempty"`
	// Enable Static IP from subscriberDB
	StaticIpEnabled bool `protobuf:"varint,4,opt,name=static_ip_enabled,json=staticIpEnabled,proto3" json:"static_ip_enabled,omitempty"`
	// Enable multi APN IP allocation
	MultiApnIpAlloc bool `protobuf:"varint,5,opt,name=multi_apn_ip_alloc,json=multiApnIpAlloc,proto3" json:"multi_apn_ip_alloc,omitempty"`
	// IPv6 block for IPv6 allocator, for example:
	// IPv6 IP block:      "fdee:5:6c::/48"
	Ipv6Block string `protobuf:"bytes,10,opt,name=ipv6_block,json=ipv6Block,proto3" json:"ipv6_block,omitempty"`
	// Select ipv6 session prefix allocation type, example:
	// "RANDOM", "HASH"
	Ipv6PrefixAllocationType string   `protobuf:"bytes,11,opt,name=ipv6_prefix_allocation_type,json=ipv6PrefixAllocationType,proto3" json:"ipv6_prefix_allocation_type,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *MobilityD) Reset()         { *m = MobilityD{} }
func (m *MobilityD) String() string { return proto.CompactTextString(m) }
func (*MobilityD) ProtoMessage()    {}
func (*MobilityD) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{7}
}

func (m *MobilityD) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MobilityD.Unmarshal(m, b)
}
func (m *MobilityD) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MobilityD.Marshal(b, m, deterministic)
}
func (m *MobilityD) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MobilityD.Merge(m, src)
}
func (m *MobilityD) XXX_Size() int {
	return xxx_messageInfo_MobilityD.Size(m)
}
func (m *MobilityD) XXX_DiscardUnknown() {
	xxx_messageInfo_MobilityD.DiscardUnknown(m)
}

var xxx_messageInfo_MobilityD proto.InternalMessageInfo

func (m *MobilityD) GetLogLevel() protos.LogLevel {
	if m != nil {
		return m.LogLevel
	}
	return protos.LogLevel_DEBUG
}

func (m *MobilityD) GetIpBlock() string {
	if m != nil {
		return m.IpBlock
	}
	return ""
}

func (m *MobilityD) GetIpAllocatorType() MobilityD_IpAllocatorType {
	if m != nil {
		return m.IpAllocatorType
	}
	return MobilityD_IP_POOL
}

func (m *MobilityD) GetStaticIpEnabled() bool {
	if m != nil {
		return m.StaticIpEnabled
	}
	return false
}

func (m *MobilityD) GetMultiApnIpAlloc() bool {
	if m != nil {
		return m.MultiApnIpAlloc
	}
	return false
}

func (m *MobilityD) GetIpv6Block() string {
	if m != nil {
		return m.Ipv6Block
	}
	return ""
}

func (m *MobilityD) GetIpv6PrefixAllocationType() string {
	if m != nil {
		return m.Ipv6PrefixAllocationType
	}
	return ""
}

//------------------------------------------------------------------------------
// MME configs
//------------------------------------------------------------------------------
type MME struct {
	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	// Mobile country code
	Mcc string `protobuf:"bytes,2,opt,name=mcc,proto3" json:"mcc,omitempty"`
	// Mobile network code
	Mnc string `protobuf:"bytes,3,opt,name=mnc,proto3" json:"mnc,omitempty"`
	// [deprecated] Tracking area code. 16-bit
	// Is overrideen by field 15
	Tac int32 `protobuf:"varint,4,opt,name=tac,proto3" json:"tac,omitempty"`
	// MME group identifier - unique within a PLMN. 16-bit
	MmeGid int32 `protobuf:"varint,5,opt,name=mme_gid,json=mmeGid,proto3" json:"mme_gid,omitempty"`
	// MME code - unique within an MME group. 8-bit
	MmeCode int32 `protobuf:"varint,6,opt,name=mme_code,json=mmeCode,proto3" json:"mme_code,omitempty"`
	// Enable DNS Caching. Will be filled by DnsD
	EnableDnsCaching bool `protobuf:"varint,7,opt,name=enable_dns_caching,json=enableDnsCaching,proto3" json:"enable_dns_caching,omitempty"`
	// DEPRECATED
	// Enable credit control tracking with OCS and forwarding S6a related
	// requests to Federated GW
	RelayEnabled bool `protobuf:"varint,8,opt,name=relay_enabled,json=relayEnabled,proto3" json:"relay_enabled,omitempty"`
	// For indicating one of the four modes
	NonEpsServiceControl MME_NonEPSServiceControl `protobuf:"varint,9,opt,name=non_eps_service_control,json=nonEpsServiceControl,proto3,enum=magma.mconfig.MME_NonEPSServiceControl" json:"non_eps_service_control,omitempty"`
	// Mobile country code for CSFB
	CsfbMcc string `protobuf:"bytes,10,opt,name=csfb_mcc,json=csfbMcc,proto3" json:"csfb_mcc,omitempty"`
	// Mobile network code for CSFB
	CsfbMnc string `protobuf:"bytes,11,opt,name=csfb_mnc,json=csfbMnc,proto3" json:"csfb_mnc,omitempty"`
	// Location area code. 16-bit
	Lac int32 `protobuf:"varint,12,opt,name=lac,proto3" json:"lac,omitempty"`
	// If relay_enabled is false, this determines whether cloud subscriberdb
	// or local subscriberdb is used for authentication requests.
	CloudSubscriberdbEnabled bool `protobuf:"varint,14,opt,name=cloud_subscriberdb_enabled,json=cloudSubscriberdbEnabled,proto3" json:"cloud_subscriberdb_enabled,omitempty"`
	// The Tracking Area Code of every connected eNodeB needs to be
	// registered the MME.
	// Overrides field 4 if this is not empty. Field 4 is in the process of
	// being deprecated
	AttachedEnodebTacs []int32 `protobuf:"varint,15,rep,packed,name=attached_enodeb_tacs,json=attachedEnodebTacs,proto3" json:"attached_enodeb_tacs,omitempty"`
	// MME relative capacity - capacity within an MME group. 8-bit
	MmeRelativeCapacity int32 `protobuf:"varint,16,opt,name=mme_relative_capacity,json=mmeRelativeCapacity,proto3" json:"mme_relative_capacity,omitempty"`
	// Primary DNS server
	DnsPrimary string `protobuf:"bytes,20,opt,name=dns_primary,json=dnsPrimary,proto3" json:"dns_primary,omitempty"`
	// Secondary DNS server
	DnsSecondary string `protobuf:"bytes,21,opt,name=dns_secondary,json=dnsSecondary,proto3" json:"dns_secondary,omitempty"`
	// Whether NAT is enabled
	NatEnabled bool `protobuf:"varint,22,opt,name=nat_enabled,json=natEnabled,proto3" json:"nat_enabled,omitempty"`
	// Enable relaying S6a messages via FeG RPC
	HssRelayEnabled bool `protobuf:"varint,23,opt,name=hss_relay_enabled,json=hssRelayEnabled,proto3" json:"hss_relay_enabled,omitempty"`
	// Apn Correction feature
	EnableApnCorrection  bool                    `protobuf:"varint,24,opt,name=enable_apn_correction,json=enableApnCorrection,proto3" json:"enable_apn_correction,omitempty"`
	ApnCorrectionMapList []*MME_ApnCorrectionMap `protobuf:"bytes,25,rep,name=apn_correction_map_list,json=apnCorrectionMapList,proto3" json:"apn_correction_map_list,omitempty"`
	// P_CSCF IP address configs
	Ipv4PCscfAddress string `protobuf:"bytes,26,opt,name=ipv4_p_cscf_address,json=ipv4PCscfAddress,proto3" json:"ipv4_p_cscf_address,omitempty"`
	Ipv6PCscfAddress string `protobuf:"bytes,27,opt,name=ipv6_p_cscf_address,json=ipv6PCscfAddress,proto3" json:"ipv6_p_cscf_address,omitempty"`
	// IPv6 DNS server
	Ipv6DnsAddress string `protobuf:"bytes,30,opt,name=ipv6_dns_address,json=ipv6DnsAddress,proto3" json:"ipv6_dns_address,omitempty"`
	// SGW S1U endpoint on AGW
	Ipv4SgwS1UAddr   string                  `protobuf:"bytes,31,opt,name=ipv4_sgw_s1u_addr,json=ipv4SgwS1uAddr,proto3" json:"ipv4_sgw_s1u_addr,omitempty"`
	RestrictedPlmns  []*MME_PlmnConfig       `protobuf:"bytes,32,rep,name=restricted_plmns,json=restrictedPlmns,proto3" json:"restricted_plmns,omitempty"`
	ServiceAreaMaps  map[string]*MME_TacList `protobuf:"bytes,33,rep,name=service_area_maps,json=serviceAreaMaps,proto3" json:"service_area_maps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FederatedModeMap *FederatedModeMap       `protobuf:"bytes,34,opt,name=federated_mode_map,json=federatedModeMap,proto3" json:"federated_mode_map,omitempty"`
	RestrictedImeis  []*MME_ImeiConfig       `protobuf:"bytes,35,rep,name=restricted_imeis,json=restrictedImeis,proto3" json:"restricted_imeis,omitempty"`
	// MME congestion control configs
	CongestionControlEnabled bool `protobuf:"varint,40,opt,name=congestion_control_enabled,json=congestionControlEnabled,proto3" json:"congestion_control_enabled,omitempty"`
	// DEPRECATED: now configured in "shared_mconfig"
	// sentry_config stores the Sentry.io configuration for this service
	SentryConfig *SentryConfig `protobuf:"bytes,45,opt,name=sentry_config,json=sentryConfig,proto3" json:"sentry_config,omitempty"` // Deprecated: Do not use.
	// Enables 5G Standalone (SA) at a network level
	Enable5GFeatures bool `protobuf:"varint,46,opt,name=enable5g_features,json=enable5gFeatures,proto3" json:"enable5g_features,omitempty"`
	// AMF Slice Service Type (SST)
	AmfDefaultSliceServiceType uint32 `protobuf:"varint,47,opt,name=amf_default_slice_service_type,json=amfDefaultSliceServiceType,proto3" json:"amf_default_slice_service_type,omitempty"`
	// AMF Slice Descriptor (SD)
	AmfDefaultSliceDifferentiator string `protobuf:"bytes,48,opt,name=amf_default_slice_differentiator,json=amfDefaultSliceDifferentiator,proto3" json:"amf_default_slice_differentiator,omitempty"`
	// AMF Name
	AmfName string `protobuf:"bytes,50,opt,name=amf_name,json=amfName,proto3" json:"amf_name,omitempty"`
	// AMF Region ID
	AmfRegionId string `protobuf:"bytes,51,opt,name=amf_region_id,json=amfRegionId,proto3" json:"amf_region_id,omitempty"`
	// AMF Set ID
	AmfSetId string `protobuf:"bytes,52,opt,name=amf_set_id,json=amfSetId,proto3" json:"amf_set_id,omitempty"`
	// AMF pointer
	AmfPointer string `protobuf:"bytes,53,opt,name=amf_pointer,json=amfPointer,proto3" json:"amf_pointer,omitempty"`
	// SGW S1U ipv6 endpoint on AGW
	Ipv6SgwS1UAddr       string   `protobuf:"bytes,54,opt,name=ipv6_sgw_s1u_addr,json=ipv6SgwS1uAddr,proto3" json:"ipv6_sgw_s1u_addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MME) Reset()         { *m = MME{} }
func (m *MME) String() string { return proto.CompactTextString(m) }
func (*MME) ProtoMessage()    {}
func (*MME) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{8}
}

func (m *MME) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MME.Unmarshal(m, b)
}
func (m *MME) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MME.Marshal(b, m, deterministic)
}
func (m *MME) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MME.Merge(m, src)
}
func (m *MME) XXX_Size() int {
	return xxx_messageInfo_MME.Size(m)
}
func (m *MME) XXX_DiscardUnknown() {
	xxx_messageInfo_MME.DiscardUnknown(m)
}

var xxx_messageInfo_MME proto.InternalMessageInfo

func (m *MME) GetLogLevel() protos.LogLevel {
	if m != nil {
		return m.LogLevel
	}
	return protos.LogLevel_DEBUG
}

func (m *MME) GetMcc() string {
	if m != nil {
		return m.Mcc
	}
	return ""
}

func (m *MME) GetMnc() string {
	if m != nil {
		return m.Mnc
	}
	return ""
}

func (m *MME) GetTac() int32 {
	if m != nil {
		return m.Tac
	}
	return 0
}

func (m *MME) GetMmeGid() int32 {
	if m != nil {
		return m.MmeGid
	}
	return 0
}

func (m *MME) GetMmeCode() int32 {
	if m != nil {
		return m.MmeCode
	}
	return 0
}

func (m *MME) GetEnableDnsCaching() bool {
	if m != nil {
		return m.EnableDnsCaching
	}
	return false
}

func (m *MME) GetRelayEnabled() bool {
	if m != nil {
		return m.RelayEnabled
	}
	return false
}

func (m *MME) GetNonEpsServiceControl() MME_NonEPSServiceControl {
	if m != nil {
		return m.NonEpsServiceControl
	}
	return MME_NON_EPS_SERVICE_CONTROL_OFF
}

func (m *MME) GetCsfbMcc() string {
	if m != nil {
		return m.CsfbMcc
	}
	return ""
}

func (m *MME) GetCsfbMnc() string {
	if m != nil {
		return m.CsfbMnc
	}
	return ""
}

func (m *MME) GetLac() int32 {
	if m != nil {
		return m.Lac
	}
	return 0
}

func (m *MME) GetCloudSubscriberdbEnabled() bool {
	if m != nil {
		return m.CloudSubscriberdbEnabled
	}
	return false
}

func (m *MME) GetAttachedEnodebTacs() []int32 {
	if m != nil {
		return m.AttachedEnodebTacs
	}
	return nil
}

func (m *MME) GetMmeRelativeCapacity() int32 {
	if m != nil {
		return m.MmeRelativeCapacity
	}
	return 0
}

func (m *MME) GetDnsPrimary() string {
	if m != nil {
		return m.DnsPrimary
	}
	return ""
}

func (m *MME) GetDnsSecondary() string {
	if m != nil {
		return m.DnsSecondary
	}
	return ""
}

func (m *MME) GetNatEnabled() bool {
	if m != nil {
		return m.NatEnabled
	}
	return false
}

func (m *MME) GetHssRelayEnabled() bool {
	if m != nil {
		return m.HssRelayEnabled
	}
	return false
}

func (m *MME) GetEnableApnCorrection() bool {
	if m != nil {
		return m.EnableApnCorrection
	}
	return false
}

func (m *MME) GetApnCorrectionMapList() []*MME_ApnCorrectionMap {
	if m != nil {
		return m.ApnCorrectionMapList
	}
	return nil
}

func (m *MME) GetIpv4PCscfAddress() string {
	if m != nil {
		return m.Ipv4PCscfAddress
	}
	return ""
}

func (m *MME) GetIpv6PCscfAddress() string {
	if m != nil {
		return m.Ipv6PCscfAddress
	}
	return ""
}

func (m *MME) GetIpv6DnsAddress() string {
	if m != nil {
		return m.Ipv6DnsAddress
	}
	return ""
}

func (m *MME) GetIpv4SgwS1UAddr() string {
	if m != nil {
		return m.Ipv4SgwS1UAddr
	}
	return ""
}

func (m *MME) GetRestrictedPlmns() []*MME_PlmnConfig {
	if m != nil {
		return m.RestrictedPlmns
	}
	return nil
}

func (m *MME) GetServiceAreaMaps() map[string]*MME_TacList {
	if m != nil {
		return m.ServiceAreaMaps
	}
	return nil
}

func (m *MME) GetFederatedModeMap() *FederatedModeMap {
	if m != nil {
		return m.FederatedModeMap
	}
	return nil
}

func (m *MME) GetRestrictedImeis() []*MME_ImeiConfig {
	if m != nil {
		return m.RestrictedImeis
	}
	return nil
}

func (m *MME) GetCongestionControlEnabled() bool {
	if m != nil {
		return m.CongestionControlEnabled
	}
	return false
}

// Deprecated: Do not use.
func (m *MME) GetSentryConfig() *SentryConfig {
	if m != nil {
		return m.SentryConfig
	}
	return nil
}

func (m *MME) GetEnable5GFeatures() bool {
	if m != nil {
		return m.Enable5GFeatures
	}
	return false
}

func (m *MME) GetAmfDefaultSliceServiceType() uint32 {
	if m != nil {
		return m.AmfDefaultSliceServiceType
	}
	return 0
}

func (m *MME) GetAmfDefaultSliceDifferentiator() string {
	if m != nil {
		return m.AmfDefaultSliceDifferentiator
	}
	return ""
}

func (m *MME) GetAmfName() string {
	if m != nil {
		return m.AmfName
	}
	return ""
}

func (m *MME) GetAmfRegionId() string {
	if m != nil {
		return m.AmfRegionId
	}
	return ""
}

func (m *MME) GetAmfSetId() string {
	if m != nil {
		return m.AmfSetId
	}
	return ""
}

func (m *MME) GetAmfPointer() string {
	if m != nil {
		return m.AmfPointer
	}
	return ""
}

func (m *MME) GetIpv6SgwS1UAddr() string {
	if m != nil {
		return m.Ipv6SgwS1UAddr
	}
	return ""
}

type MME_ApnCorrectionMap struct {
	ImsiPrefix           string   `protobuf:"bytes,1,opt,name=imsi_prefix,json=imsiPrefix,proto3" json:"imsi_prefix,omitempty"`
	ApnOverride          string   `protobuf:"bytes,2,opt,name=apn_override,json=apnOverride,proto3" json:"apn_override,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MME_ApnCorrectionMap) Reset()         { *m = MME_ApnCorrectionMap{} }
func (m *MME_ApnCorrectionMap) String() string { return proto.CompactTextString(m) }
func (*MME_ApnCorrectionMap) ProtoMessage()    {}
func (*MME_ApnCorrectionMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{8, 0}
}

func (m *MME_ApnCorrectionMap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MME_ApnCorrectionMap.Unmarshal(m, b)
}
func (m *MME_ApnCorrectionMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MME_ApnCorrectionMap.Marshal(b, m, deterministic)
}
func (m *MME_ApnCorrectionMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MME_ApnCorrectionMap.Merge(m, src)
}
func (m *MME_ApnCorrectionMap) XXX_Size() int {
	return xxx_messageInfo_MME_ApnCorrectionMap.Size(m)
}
func (m *MME_ApnCorrectionMap) XXX_DiscardUnknown() {
	xxx_messageInfo_MME_ApnCorrectionMap.DiscardUnknown(m)
}

var xxx_messageInfo_MME_ApnCorrectionMap proto.InternalMessageInfo

func (m *MME_ApnCorrectionMap) GetImsiPrefix() string {
	if m != nil {
		return m.ImsiPrefix
	}
	return ""
}

func (m *MME_ApnCorrectionMap) GetApnOverride() string {
	if m != nil {
		return m.ApnOverride
	}
	return ""
}

// PLMN restriction configs
type MME_PlmnConfig struct {
	Mcc                  string   `protobuf:"bytes,1,opt,name=mcc,proto3" json:"mcc,omitempty"`
	Mnc                  string   `protobuf:"bytes,2,opt,name=mnc,proto3" json:"mnc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MME_PlmnConfig) Reset()         { *m = MME_PlmnConfig{} }
func (m *MME_PlmnConfig) String() string { return proto.CompactTextString(m) }
func (*MME_PlmnConfig) ProtoMessage()    {}
func (*MME_PlmnConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{8, 1}
}

func (m *MME_PlmnConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MME_PlmnConfig.Unmarshal(m, b)
}
func (m *MME_PlmnConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MME_PlmnConfig.Marshal(b, m, deterministic)
}
func (m *MME_PlmnConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MME_PlmnConfig.Merge(m, src)
}
func (m *MME_PlmnConfig) XXX_Size() int {
	return xxx_messageInfo_MME_PlmnConfig.Size(m)
}
func (m *MME_PlmnConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MME_PlmnConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MME_PlmnConfig proto.InternalMessageInfo

func (m *MME_PlmnConfig) GetMcc() string {
	if m != nil {
		return m.Mcc
	}
	return ""
}

func (m *MME_PlmnConfig) GetMnc() string {
	if m != nil {
		return m.Mnc
	}
	return ""
}

type MME_TacList struct {
	Tac                  []uint32 `protobuf:"varint,1,rep,packed,name=tac,proto3" json:"tac,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MME_TacList) Reset()         { *m = MME_TacList{} }
func (m *MME_TacList) String() string { return proto.CompactTextString(m) }
func (*MME_TacList) ProtoMessage()    {}
func (*MME_TacList) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{8, 2}
}

func (m *MME_TacList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MME_TacList.Unmarshal(m, b)
}
func (m *MME_TacList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MME_TacList.Marshal(b, m, deterministic)
}
func (m *MME_TacList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MME_TacList.Merge(m, src)
}
func (m *MME_TacList) XXX_Size() int {
	return xxx_messageInfo_MME_TacList.Size(m)
}
func (m *MME_TacList) XXX_DiscardUnknown() {
	xxx_messageInfo_MME_TacList.DiscardUnknown(m)
}

var xxx_messageInfo_MME_TacList proto.InternalMessageInfo

func (m *MME_TacList) GetTac() []uint32 {
	if m != nil {
		return m.Tac
	}
	return nil
}

// IMEI restriction configs
type MME_ImeiConfig struct {
	Tac                  string   `protobuf:"bytes,1,opt,name=tac,proto3" json:"tac,omitempty"`
	Snr                  string   `protobuf:"bytes,2,opt,name=snr,proto3" json:"snr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MME_ImeiConfig) Reset()         { *m = MME_ImeiConfig{} }
func (m *MME_ImeiConfig) String() string { return proto.CompactTextString(m) }
func (*MME_ImeiConfig) ProtoMessage()    {}
func (*MME_ImeiConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{8, 4}
}

func (m *MME_ImeiConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MME_ImeiConfig.Unmarshal(m, b)
}
func (m *MME_ImeiConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MME_ImeiConfig.Marshal(b, m, deterministic)
}
func (m *MME_ImeiConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MME_ImeiConfig.Merge(m, src)
}
func (m *MME_ImeiConfig) XXX_Size() int {
	return xxx_messageInfo_MME_ImeiConfig.Size(m)
}
func (m *MME_ImeiConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MME_ImeiConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MME_ImeiConfig proto.InternalMessageInfo

func (m *MME_ImeiConfig) GetTac() string {
	if m != nil {
		return m.Tac
	}
	return ""
}

func (m *MME_ImeiConfig) GetSnr() string {
	if m != nil {
		return m.Snr
	}
	return ""
}

type FederatedModeMap struct {
	Enabled              bool           `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Mapping              []*ModeMapItem `protobuf:"bytes,2,rep,name=mapping,proto3" json:"mapping,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *FederatedModeMap) Reset()         { *m = FederatedModeMap{} }
func (m *FederatedModeMap) String() string { return proto.CompactTextString(m) }
func (*FederatedModeMap) ProtoMessage()    {}
func (*FederatedModeMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{9}
}

func (m *FederatedModeMap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FederatedModeMap.Unmarshal(m, b)
}
func (m *FederatedModeMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FederatedModeMap.Marshal(b, m, deterministic)
}
func (m *FederatedModeMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FederatedModeMap.Merge(m, src)
}
func (m *FederatedModeMap) XXX_Size() int {
	return xxx_messageInfo_FederatedModeMap.Size(m)
}
func (m *FederatedModeMap) XXX_DiscardUnknown() {
	xxx_messageInfo_FederatedModeMap.DiscardUnknown(m)
}

var xxx_messageInfo_FederatedModeMap proto.InternalMessageInfo

func (m *FederatedModeMap) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *FederatedModeMap) GetMapping() []*ModeMapItem {
	if m != nil {
		return m.Mapping
	}
	return nil
}

type ModeMapItem struct {
	Mode                 ModeMapItem_FederatedMode `protobuf:"varint,1,opt,name=mode,proto3,enum=magma.mconfig.ModeMapItem_FederatedMode" json:"mode,omitempty"`
	Plmn                 string                    `protobuf:"bytes,2,opt,name=plmn,proto3" json:"plmn,omitempty"`
	ImsiRange            string                    `protobuf:"bytes,3,opt,name=imsi_range,json=imsiRange,proto3" json:"imsi_range,omitempty"`
	Apn                  string                    `protobuf:"bytes,4,opt,name=apn,proto3" json:"apn,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ModeMapItem) Reset()         { *m = ModeMapItem{} }
func (m *ModeMapItem) String() string { return proto.CompactTextString(m) }
func (*ModeMapItem) ProtoMessage()    {}
func (*ModeMapItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{10}
}

func (m *ModeMapItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ModeMapItem.Unmarshal(m, b)
}
func (m *ModeMapItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ModeMapItem.Marshal(b, m, deterministic)
}
func (m *ModeMapItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModeMapItem.Merge(m, src)
}
func (m *ModeMapItem) XXX_Size() int {
	return xxx_messageInfo_ModeMapItem.Size(m)
}
func (m *ModeMapItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ModeMapItem.DiscardUnknown(m)
}

var xxx_messageInfo_ModeMapItem proto.InternalMessageInfo

func (m *ModeMapItem) GetMode() ModeMapItem_FederatedMode {
	if m != nil {
		return m.Mode
	}
	return ModeMapItem_SPGW_SUBSCRIBER
}

func (m *ModeMapItem) GetPlmn() string {
	if m != nil {
		return m.Plmn
	}
	return ""
}

func (m *ModeMapItem) GetImsiRange() string {
	if m != nil {
		return m.ImsiRange
	}
	return ""
}

func (m *ModeMapItem) GetApn() string {
	if m != nil {
		return m.Apn
	}
	return ""
}

//------------------------------------------------------------------------------
// SubscriberDB configs
//------------------------------------------------------------------------------
type SubscriberDB struct {
	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	// Operator configuration field for LTE
	LteAuthOp []byte `protobuf:"bytes,2,opt,name=lte_auth_op,json=lteAuthOp,proto3" json:"lte_auth_op,omitempty"`
	// Authentication management field for LTE
	LteAuthAmf  []byte                                       `protobuf:"bytes,3,opt,name=lte_auth_amf,json=lteAuthAmf,proto3" json:"lte_auth_amf,omitempty"`
	SubProfiles map[string]*SubscriberDB_SubscriptionProfile `protobuf:"bytes,4,rep,name=sub_profiles,json=subProfiles,proto3" json:"sub_profiles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// DEPRECATED
	// Enable forwarding S6a related requests to Federated GW
	RelayEnabled bool `protobuf:"varint,5,opt,name=relay_enabled,json=relayEnabled,proto3" json:"relay_enabled,omitempty"`
	// Enable relaying S6a messages via FeG RPC
	HssRelayEnabled bool `protobuf:"varint,6,opt,name=hss_relay_enabled,json=hssRelayEnabled,proto3" json:"hss_relay_enabled,omitempty"`
	// Interval in seconds between gateway and cloud sync
	SyncInterval uint32 `protobuf:"varint,7,opt,name=sync_interval,json=syncInterval,proto3" json:"sync_interval,omitempty"`
	// Enables 5G Standalone (SA) at a network level
	Enable5GFeatures     bool     `protobuf:"varint,8,opt,name=enable5g_features,json=enable5gFeatures,proto3" json:"enable5g_features,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscriberDB) Reset()         { *m = SubscriberDB{} }
func (m *SubscriberDB) String() string { return proto.CompactTextString(m) }
func (*SubscriberDB) ProtoMessage()    {}
func (*SubscriberDB) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{11}
}

func (m *SubscriberDB) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriberDB.Unmarshal(m, b)
}
func (m *SubscriberDB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriberDB.Marshal(b, m, deterministic)
}
func (m *SubscriberDB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriberDB.Merge(m, src)
}
func (m *SubscriberDB) XXX_Size() int {
	return xxx_messageInfo_SubscriberDB.Size(m)
}
func (m *SubscriberDB) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriberDB.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriberDB proto.InternalMessageInfo

func (m *SubscriberDB) GetLogLevel() protos.LogLevel {
	if m != nil {
		return m.LogLevel
	}
	return protos.LogLevel_DEBUG
}

func (m *SubscriberDB) GetLteAuthOp() []byte {
	if m != nil {
		return m.LteAuthOp
	}
	return nil
}

func (m *SubscriberDB) GetLteAuthAmf() []byte {
	if m != nil {
		return m.LteAuthAmf
	}
	return nil
}

func (m *SubscriberDB) GetSubProfiles() map[string]*SubscriberDB_SubscriptionProfile {
	if m != nil {
		return m.SubProfiles
	}
	return nil
}

func (m *SubscriberDB) GetRelayEnabled() bool {
	if m != nil {
		return m.RelayEnabled
	}
	return false
}

func (m *SubscriberDB) GetHssRelayEnabled() bool {
	if m != nil {
		return m.HssRelayEnabled
	}
	return false
}

func (m *SubscriberDB) GetSyncInterval() uint32 {
	if m != nil {
		return m.SyncInterval
	}
	return 0
}

func (m *SubscriberDB) GetEnable5GFeatures() bool {
	if m != nil {
		return m.Enable5GFeatures
	}
	return false
}

type SubscriberDB_SubscriptionProfile struct {
	// Maximum uplink bit rate (AMBR-UL)
	MaxUlBitRate uint64 `protobuf:"varint,1,opt,name=max_ul_bit_rate,json=maxUlBitRate,proto3" json:"max_ul_bit_rate,omitempty"`
	// Maximum downlink bit rate (AMBR-DL)
	MaxDlBitRate         uint64   `protobuf:"varint,2,opt,name=max_dl_bit_rate,json=maxDlBitRate,proto3" json:"max_dl_bit_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscriberDB_SubscriptionProfile) Reset()         { *m = SubscriberDB_SubscriptionProfile{} }
func (m *SubscriberDB_SubscriptionProfile) String() string { return proto.CompactTextString(m) }
func (*SubscriberDB_SubscriptionProfile) ProtoMessage()    {}
func (*SubscriberDB_SubscriptionProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{11, 0}
}

func (m *SubscriberDB_SubscriptionProfile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriberDB_SubscriptionProfile.Unmarshal(m, b)
}
func (m *SubscriberDB_SubscriptionProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriberDB_SubscriptionProfile.Marshal(b, m, deterministic)
}
func (m *SubscriberDB_SubscriptionProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriberDB_SubscriptionProfile.Merge(m, src)
}
func (m *SubscriberDB_SubscriptionProfile) XXX_Size() int {
	return xxx_messageInfo_SubscriberDB_SubscriptionProfile.Size(m)
}
func (m *SubscriberDB_SubscriptionProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriberDB_SubscriptionProfile.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriberDB_SubscriptionProfile proto.InternalMessageInfo

func (m *SubscriberDB_SubscriptionProfile) GetMaxUlBitRate() uint64 {
	if m != nil {
		return m.MaxUlBitRate
	}
	return 0
}

func (m *SubscriberDB_SubscriptionProfile) GetMaxDlBitRate() uint64 {
	if m != nil {
		return m.MaxDlBitRate
	}
	return 0
}

//------------------------------------------------------------------------------
// LighttpD configs
//------------------------------------------------------------------------------
type LighttpD struct {
	LogLevel             protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	EnableCaching        bool            `protobuf:"varint,2,opt,name=enable_caching,json=enableCaching,proto3" json:"enable_caching,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *LighttpD) Reset()         { *m = LighttpD{} }
func (m *LighttpD) String() string { return proto.CompactTextString(m) }
func (*LighttpD) ProtoMessage()    {}
func (*LighttpD) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{12}
}

func (m *LighttpD) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LighttpD.Unmarshal(m, b)
}
func (m *LighttpD) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LighttpD.Marshal(b, m, deterministic)
}
func (m *LighttpD) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LighttpD.Merge(m, src)
}
func (m *LighttpD) XXX_Size() int {
	return xxx_messageInfo_LighttpD.Size(m)
}
func (m *LighttpD) XXX_DiscardUnknown() {
	xxx_messageInfo_LighttpD.DiscardUnknown(m)
}

var xxx_messageInfo_LighttpD proto.InternalMessageInfo

func (m *LighttpD) GetLogLevel() protos.LogLevel {
	if m != nil {
		return m.LogLevel
	}
	return protos.LogLevel_DEBUG
}

func (m *LighttpD) GetEnableCaching() bool {
	if m != nil {
		return m.EnableCaching
	}
	return false
}

//------------------------------------------------------------------------------
// MonitorD configs
//------------------------------------------------------------------------------
type MonitorD struct {
	LogLevel             protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	PollingInterval      int32           `protobuf:"varint,60,opt,name=polling_interval,json=pollingInterval,proto3" json:"polling_interval,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *MonitorD) Reset()         { *m = MonitorD{} }
func (m *MonitorD) String() string { return proto.CompactTextString(m) }
func (*MonitorD) ProtoMessage()    {}
func (*MonitorD) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{13}
}

func (m *MonitorD) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MonitorD.Unmarshal(m, b)
}
func (m *MonitorD) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MonitorD.Marshal(b, m, deterministic)
}
func (m *MonitorD) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonitorD.Merge(m, src)
}
func (m *MonitorD) XXX_Size() int {
	return xxx_messageInfo_MonitorD.Size(m)
}
func (m *MonitorD) XXX_DiscardUnknown() {
	xxx_messageInfo_MonitorD.DiscardUnknown(m)
}

var xxx_messageInfo_MonitorD proto.InternalMessageInfo

func (m *MonitorD) GetLogLevel() protos.LogLevel {
	if m != nil {
		return m.LogLevel
	}
	return protos.LogLevel_DEBUG
}

func (m *MonitorD) GetPollingInterval() int32 {
	if m != nil {
		return m.PollingInterval
	}
	return 0
}

//------------------------------------------------------------------------------
// DPID configs
//------------------------------------------------------------------------------
type DPID struct {
	LogLevel             protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DPID) Reset()         { *m = DPID{} }
func (m *DPID) String() string { return proto.CompactTextString(m) }
func (*DPID) ProtoMessage()    {}
func (*DPID) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{14}
}

func (m *DPID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DPID.Unmarshal(m, b)
}
func (m *DPID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DPID.Marshal(b, m, deterministic)
}
func (m *DPID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DPID.Merge(m, src)
}
func (m *DPID) XXX_Size() int {
	return xxx_messageInfo_DPID.Size(m)
}
func (m *DPID) XXX_DiscardUnknown() {
	xxx_messageInfo_DPID.DiscardUnknown(m)
}

var xxx_messageInfo_DPID proto.InternalMessageInfo

func (m *DPID) GetLogLevel() protos.LogLevel {
	if m != nil {
		return m.LogLevel
	}
	return protos.LogLevel_DEBUG
}

//------------------------------------------------------------------------------
// ConnectionD configs
//------------------------------------------------------------------------------
type ConnectionD struct {
	LogLevel             protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ConnectionD) Reset()         { *m = ConnectionD{} }
func (m *ConnectionD) String() string { return proto.CompactTextString(m) }
func (*ConnectionD) ProtoMessage()    {}
func (*ConnectionD) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{15}
}

func (m *ConnectionD) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectionD.Unmarshal(m, b)
}
func (m *ConnectionD) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectionD.Marshal(b, m, deterministic)
}
func (m *ConnectionD) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionD.Merge(m, src)
}
func (m *ConnectionD) XXX_Size() int {
	return xxx_messageInfo_ConnectionD.Size(m)
}
func (m *ConnectionD) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionD.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionD proto.InternalMessageInfo

func (m *ConnectionD) GetLogLevel() protos.LogLevel {
	if m != nil {
		return m.LogLevel
	}
	return protos.LogLevel_DEBUG
}

//------------------------------------------------------------------------------
// LIAgentD configs
//------------------------------------------------------------------------------
type LIAgentD struct {
	LogLevel             protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	NprobeTasks          []*NProbeTask   `protobuf:"bytes,2,rep,name=nprobe_tasks,json=nprobeTasks,proto3" json:"nprobe_tasks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *LIAgentD) Reset()         { *m = LIAgentD{} }
func (m *LIAgentD) String() string { return proto.CompactTextString(m) }
func (*LIAgentD) ProtoMessage()    {}
func (*LIAgentD) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{16}
}

func (m *LIAgentD) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LIAgentD.Unmarshal(m, b)
}
func (m *LIAgentD) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LIAgentD.Marshal(b, m, deterministic)
}
func (m *LIAgentD) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LIAgentD.Merge(m, src)
}
func (m *LIAgentD) XXX_Size() int {
	return xxx_messageInfo_LIAgentD.Size(m)
}
func (m *LIAgentD) XXX_DiscardUnknown() {
	xxx_messageInfo_LIAgentD.DiscardUnknown(m)
}

var xxx_messageInfo_LIAgentD proto.InternalMessageInfo

func (m *LIAgentD) GetLogLevel() protos.LogLevel {
	if m != nil {
		return m.LogLevel
	}
	return protos.LogLevel_DEBUG
}

func (m *LIAgentD) GetNprobeTasks() []*NProbeTask {
	if m != nil {
		return m.NprobeTasks
	}
	return nil
}

type NProbeTask struct {
	TaskId               string   `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TargetId             string   `protobuf:"bytes,2,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	TargetType           string   `protobuf:"bytes,3,opt,name=target_type,json=targetType,proto3" json:"target_type,omitempty"`
	DeliveryType         string   `protobuf:"bytes,4,opt,name=delivery_type,json=deliveryType,proto3" json:"delivery_type,omitempty"`
	CorrelationId        uint64   `protobuf:"varint,5,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	DomainId             string   `protobuf:"bytes,6,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NProbeTask) Reset()         { *m = NProbeTask{} }
func (m *NProbeTask) String() string { return proto.CompactTextString(m) }
func (*NProbeTask) ProtoMessage()    {}
func (*NProbeTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{17}
}

func (m *NProbeTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NProbeTask.Unmarshal(m, b)
}
func (m *NProbeTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NProbeTask.Marshal(b, m, deterministic)
}
func (m *NProbeTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NProbeTask.Merge(m, src)
}
func (m *NProbeTask) XXX_Size() int {
	return xxx_messageInfo_NProbeTask.Size(m)
}
func (m *NProbeTask) XXX_DiscardUnknown() {
	xxx_messageInfo_NProbeTask.DiscardUnknown(m)
}

var xxx_messageInfo_NProbeTask proto.InternalMessageInfo

func (m *NProbeTask) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *NProbeTask) GetTargetId() string {
	if m != nil {
		return m.TargetId
	}
	return ""
}

func (m *NProbeTask) GetTargetType() string {
	if m != nil {
		return m.TargetType
	}
	return ""
}

func (m *NProbeTask) GetDeliveryType() string {
	if m != nil {
		return m.DeliveryType
	}
	return ""
}

func (m *NProbeTask) GetCorrelationId() uint64 {
	if m != nil {
		return m.CorrelationId
	}
	return 0
}

func (m *NProbeTask) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

//------------------------------------------------------------------------------
// DnsD configs
//------------------------------------------------------------------------------
type DnsD struct {
	LogLevel             protos.LogLevel                 `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	EnableCaching        bool                            `protobuf:"varint,2,opt,name=enable_caching,json=enableCaching,proto3" json:"enable_caching,omitempty"`
	LocalTTL             int32                           `protobuf:"varint,3,opt,name=localTTL,proto3" json:"localTTL,omitempty"`
	Records              []*GatewayDNSConfigRecordsItems `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
	DhcpServerEnabled    bool                            `protobuf:"varint,5,opt,name=dhcp_server_enabled,json=dhcpServerEnabled,proto3" json:"dhcp_server_enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *DnsD) Reset()         { *m = DnsD{} }
func (m *DnsD) String() string { return proto.CompactTextString(m) }
func (*DnsD) ProtoMessage()    {}
func (*DnsD) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{18}
}

func (m *DnsD) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DnsD.Unmarshal(m, b)
}
func (m *DnsD) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DnsD.Marshal(b, m, deterministic)
}
func (m *DnsD) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DnsD.Merge(m, src)
}
func (m *DnsD) XXX_Size() int {
	return xxx_messageInfo_DnsD.Size(m)
}
func (m *DnsD) XXX_DiscardUnknown() {
	xxx_messageInfo_DnsD.DiscardUnknown(m)
}

var xxx_messageInfo_DnsD proto.InternalMessageInfo

func (m *DnsD) GetLogLevel() protos.LogLevel {
	if m != nil {
		return m.LogLevel
	}
	return protos.LogLevel_DEBUG
}

func (m *DnsD) GetEnableCaching() bool {
	if m != nil {
		return m.EnableCaching
	}
	return false
}

func (m *DnsD) GetLocalTTL() int32 {
	if m != nil {
		return m.LocalTTL
	}
	return 0
}

func (m *DnsD) GetRecords() []*GatewayDNSConfigRecordsItems {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *DnsD) GetDhcpServerEnabled() bool {
	if m != nil {
		return m.DhcpServerEnabled
	}
	return false
}

type GatewayDNSConfigRecordsItems struct {
	ARecord              []string `protobuf:"bytes,1,rep,name=a_record,json=aRecord,proto3" json:"a_record,omitempty"`
	AaaaRecord           []string `protobuf:"bytes,2,rep,name=aaaa_record,json=aaaaRecord,proto3" json:"aaaa_record,omitempty"`
	CnameRecord          []string `protobuf:"bytes,3,rep,name=cname_record,json=cnameRecord,proto3" json:"cname_record,omitempty"`
	Domain               string   `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewayDNSConfigRecordsItems) Reset()         { *m = GatewayDNSConfigRecordsItems{} }
func (m *GatewayDNSConfigRecordsItems) String() string { return proto.CompactTextString(m) }
func (*GatewayDNSConfigRecordsItems) ProtoMessage()    {}
func (*GatewayDNSConfigRecordsItems) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{19}
}

func (m *GatewayDNSConfigRecordsItems) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayDNSConfigRecordsItems.Unmarshal(m, b)
}
func (m *GatewayDNSConfigRecordsItems) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayDNSConfigRecordsItems.Marshal(b, m, deterministic)
}
func (m *GatewayDNSConfigRecordsItems) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayDNSConfigRecordsItems.Merge(m, src)
}
func (m *GatewayDNSConfigRecordsItems) XXX_Size() int {
	return xxx_messageInfo_GatewayDNSConfigRecordsItems.Size(m)
}
func (m *GatewayDNSConfigRecordsItems) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayDNSConfigRecordsItems.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayDNSConfigRecordsItems proto.InternalMessageInfo

func (m *GatewayDNSConfigRecordsItems) GetARecord() []string {
	if m != nil {
		return m.ARecord
	}
	return nil
}

func (m *GatewayDNSConfigRecordsItems) GetAaaaRecord() []string {
	if m != nil {
		return m.AaaaRecord
	}
	return nil
}

func (m *GatewayDNSConfigRecordsItems) GetCnameRecord() []string {
	if m != nil {
		return m.CnameRecord
	}
	return nil
}

func (m *GatewayDNSConfigRecordsItems) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

//----------------------------------------------------------------------------
// AgwD configs
//----------------------------------------------------------------------------
type AgwD struct {
	LogLevel                        AgwD_LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.mconfig.AgwD_LogLevel" json:"log_level,omitempty"`
	SctpdDownstreamServiceTarget    string        `protobuf:"bytes,2,opt,name=sctpd_downstream_service_target,json=sctpdDownstreamServiceTarget,proto3" json:"sctpd_downstream_service_target,omitempty"`
	SctpdUpstreamServiceTarget      string        `protobuf:"bytes,3,opt,name=sctpd_upstream_service_target,json=sctpdUpstreamServiceTarget,proto3" json:"sctpd_upstream_service_target,omitempty"`
	MmeSctpdDownstreamServiceTarget string        `protobuf:"bytes,4,opt,name=mme_sctpd_downstream_service_target,json=mmeSctpdDownstreamServiceTarget,proto3" json:"mme_sctpd_downstream_service_target,omitempty"`
	MmeSctpdUpstreamServiceTarget   string        `protobuf:"bytes,5,opt,name=mme_sctpd_upstream_service_target,json=mmeSctpdUpstreamServiceTarget,proto3" json:"mme_sctpd_upstream_service_target,omitempty"`
	// Sentry Client Options.
	// The DSN to use. If the data source name is not set, the client is effectively
	// disabled.
	SentryDsn            string   `protobuf:"bytes,6,opt,name=sentry_dsn,json=sentryDsn,proto3" json:"sentry_dsn,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AgwD) Reset()         { *m = AgwD{} }
func (m *AgwD) String() string { return proto.CompactTextString(m) }
func (*AgwD) ProtoMessage()    {}
func (*AgwD) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{20}
}

func (m *AgwD) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AgwD.Unmarshal(m, b)
}
func (m *AgwD) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AgwD.Marshal(b, m, deterministic)
}
func (m *AgwD) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgwD.Merge(m, src)
}
func (m *AgwD) XXX_Size() int {
	return xxx_messageInfo_AgwD.Size(m)
}
func (m *AgwD) XXX_DiscardUnknown() {
	xxx_messageInfo_AgwD.DiscardUnknown(m)
}

var xxx_messageInfo_AgwD proto.InternalMessageInfo

func (m *AgwD) GetLogLevel() AgwD_LogLevel {
	if m != nil {
		return m.LogLevel
	}
	return AgwD_UNSET
}

func (m *AgwD) GetSctpdDownstreamServiceTarget() string {
	if m != nil {
		return m.SctpdDownstreamServiceTarget
	}
	return ""
}

func (m *AgwD) GetSctpdUpstreamServiceTarget() string {
	if m != nil {
		return m.SctpdUpstreamServiceTarget
	}
	return ""
}

func (m *AgwD) GetMmeSctpdDownstreamServiceTarget() string {
	if m != nil {
		return m.MmeSctpdDownstreamServiceTarget
	}
	return ""
}

func (m *AgwD) GetMmeSctpdUpstreamServiceTarget() string {
	if m != nil {
		return m.MmeSctpdUpstreamServiceTarget
	}
	return ""
}

func (m *AgwD) GetSentryDsn() string {
	if m != nil {
		return m.SentryDsn
	}
	return ""
}

//------------------------------------------------------------------------------
// SctpD configs
//------------------------------------------------------------------------------
type SctpD struct {
	LogLevel             protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SctpD) Reset()         { *m = SctpD{} }
func (m *SctpD) String() string { return proto.CompactTextString(m) }
func (*SctpD) ProtoMessage()    {}
func (*SctpD) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb46bfd77f2ecf71, []int{21}
}

func (m *SctpD) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SctpD.Unmarshal(m, b)
}
func (m *SctpD) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SctpD.Marshal(b, m, deterministic)
}
func (m *SctpD) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SctpD.Merge(m, src)
}
func (m *SctpD) XXX_Size() int {
	return xxx_messageInfo_SctpD.Size(m)
}
func (m *SctpD) XXX_DiscardUnknown() {
	xxx_messageInfo_SctpD.DiscardUnknown(m)
}

var xxx_messageInfo_SctpD proto.InternalMessageInfo

func (m *SctpD) GetLogLevel() protos.LogLevel {
	if m != nil {
		return m.LogLevel
	}
	return protos.LogLevel_DEBUG
}

func init() {
	proto.RegisterEnum("magma.mconfig.EnodebD_CSFBRat", EnodebD_CSFBRat_name, EnodebD_CSFBRat_value)
	proto.RegisterEnum("magma.mconfig.PipelineD_NetworkServices", PipelineD_NetworkServices_name, PipelineD_NetworkServices_value)
	proto.RegisterEnum("magma.mconfig.PipelineD_HEConfig_EncryptionAlgorithm", PipelineD_HEConfig_EncryptionAlgorithm_name, PipelineD_HEConfig_EncryptionAlgorithm_value)
	proto.RegisterEnum("magma.mconfig.PipelineD_HEConfig_HashFunction", PipelineD_HEConfig_HashFunction_name, PipelineD_HEConfig_HashFunction_value)
	proto.RegisterEnum("magma.mconfig.PipelineD_HEConfig_EncodingType", PipelineD_HEConfig_EncodingType_name, PipelineD_HEConfig_EncodingType_value)
	proto.RegisterEnum("magma.mconfig.WalletExhaustDetection_Method", WalletExhaustDetection_Method_name, WalletExhaustDetection_Method_value)
	proto.RegisterEnum("magma.mconfig.MobilityD_IpAllocatorType", MobilityD_IpAllocatorType_name, MobilityD_IpAllocatorType_value)
	proto.RegisterEnum("magma.mconfig.MME_NonEPSServiceControl", MME_NonEPSServiceControl_name, MME_NonEPSServiceControl_value)
	proto.RegisterEnum("magma.mconfig.ModeMapItem_FederatedMode", ModeMapItem_FederatedMode_name, ModeMapItem_FederatedMode_value)
	proto.RegisterEnum("magma.mconfig.AgwD_LogLevel", AgwD_LogLevel_name, AgwD_LogLevel_value)
	proto.RegisterType((*SentryConfig)(nil), "magma.mconfig.SentryConfig")
	proto.RegisterType((*EnodebD)(nil), "magma.mconfig.EnodebD")
	proto.RegisterMapType((map[string]*EnodebD_EnodebConfig)(nil), "magma.mconfig.EnodebD.EnbConfigsBySerialEntry")
	proto.RegisterType((*EnodebD_FDDConfig)(nil), "magma.mconfig.EnodebD.FDDConfig")
	proto.RegisterType((*EnodebD_TDDConfig)(nil), "magma.mconfig.EnodebD.TDDConfig")
	proto.RegisterType((*EnodebD_EnodebConfig)(nil), "magma.mconfig.EnodebD.EnodebConfig")
	proto.RegisterType((*PipelineD)(nil), "magma.mconfig.PipelineD")
	proto.RegisterType((*PipelineD_AllowedGrePeer)(nil), "magma.mconfig.PipelineD.AllowedGrePeer")
	proto.RegisterType((*PipelineD_IPDRExportDst)(nil), "magma.mconfig.PipelineD.IPDRExportDst")
	proto.RegisterType((*PipelineD_LiUes)(nil), "magma.mconfig.PipelineD.LiUes")
	proto.RegisterType((*PipelineD_HEConfig)(nil), "magma.mconfig.PipelineD.HEConfig")
	proto.RegisterType((*SessionD)(nil), "magma.mconfig.SessionD")
	proto.RegisterType((*WalletExhaustDetection)(nil), "magma.mconfig.WalletExhaustDetection")
	proto.RegisterType((*PolicyDB)(nil), "magma.mconfig.PolicyDB")
	proto.RegisterType((*RedirectD)(nil), "magma.mconfig.RedirectD")
	proto.RegisterType((*MobilityD)(nil), "magma.mconfig.MobilityD")
	proto.RegisterType((*MME)(nil), "magma.mconfig.MME")
	proto.RegisterMapType((map[string]*MME_TacList)(nil), "magma.mconfig.MME.ServiceAreaMapsEntry")
	proto.RegisterType((*MME_ApnCorrectionMap)(nil), "magma.mconfig.MME.ApnCorrectionMap")
	proto.RegisterType((*MME_PlmnConfig)(nil), "magma.mconfig.MME.PlmnConfig")
	proto.RegisterType((*MME_TacList)(nil), "magma.mconfig.MME.TacList")
	proto.RegisterType((*MME_ImeiConfig)(nil), "magma.mconfig.MME.ImeiConfig")
	proto.RegisterType((*FederatedModeMap)(nil), "magma.mconfig.FederatedModeMap")
	proto.RegisterType((*ModeMapItem)(nil), "magma.mconfig.ModeMapItem")
	proto.RegisterType((*SubscriberDB)(nil), "magma.mconfig.SubscriberDB")
	proto.RegisterMapType((map[string]*SubscriberDB_SubscriptionProfile)(nil), "magma.mconfig.SubscriberDB.SubProfilesEntry")
	proto.RegisterType((*SubscriberDB_SubscriptionProfile)(nil), "magma.mconfig.SubscriberDB.SubscriptionProfile")
	proto.RegisterType((*LighttpD)(nil), "magma.mconfig.LighttpD")
	proto.RegisterType((*MonitorD)(nil), "magma.mconfig.MonitorD")
	proto.RegisterType((*DPID)(nil), "magma.mconfig.DPID")
	proto.RegisterType((*ConnectionD)(nil), "magma.mconfig.ConnectionD")
	proto.RegisterType((*LIAgentD)(nil), "magma.mconfig.LIAgentD")
	proto.RegisterType((*NProbeTask)(nil), "magma.mconfig.NProbeTask")
	proto.RegisterType((*DnsD)(nil), "magma.mconfig.DnsD")
	proto.RegisterType((*GatewayDNSConfigRecordsItems)(nil), "magma.mconfig.GatewayDNSConfigRecordsItems")
	proto.RegisterType((*AgwD)(nil), "magma.mconfig.AgwD")
	proto.RegisterType((*SctpD)(nil), "magma.mconfig.SctpD")
}

func init() { proto.RegisterFile("lte/protos/mconfig/mconfigs.proto", fileDescriptor_cb46bfd77f2ecf71) }

var fileDescriptor_cb46bfd77f2ecf71 = []byte{
	// 3736 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0x4f, 0x73, 0xe3, 0x46,
	0x76, 0x1f, 0x52, 0xa4, 0x44, 0x3e, 0x52, 0x12, 0xd4, 0xd2, 0xcc, 0x60, 0x38, 0xff, 0x34, 0x9c,
	0xf5, 0x5a, 0x5e, 0xdb, 0x9a, 0x31, 0x3d, 0xa3, 0x1a, 0x6f, 0xbc, 0x76, 0x51, 0x24, 0x25, 0x71,
	0x57, 0x94, 0x58, 0xa0, 0xc6, 0xde, 0xf2, 0x61, 0xbb, 0x5a, 0x40, 0x93, 0x44, 0x06, 0x68, 0xa0,
	0xd0, 0xa0, 0x24, 0x6e, 0xe5, 0x13, 0xe4, 0x96, 0x54, 0xa5, 0x2a, 0x5f, 0x20, 0x9f, 0x24, 0xd7,
	0x24, 0x97, 0x7c, 0x80, 0x5c, 0x72, 0xca, 0x39, 0xc9, 0x39, 0xd5, 0x7f, 0x00, 0xfe, 0x11, 0x39,
	0x76, 0xa9, 0x92, 0xaa, 0x9c, 0x04, 0xbc, 0xf7, 0xeb, 0x87, 0xee, 0xf7, 0xff, 0x35, 0x05, 0x2f,
	0xbc, 0x98, 0xbe, 0x0a, 0xa3, 0x20, 0x0e, 0xf8, 0x2b, 0xdf, 0x0e, 0x58, 0xdf, 0x1d, 0x24, 0x7f,
	0xf9, 0xbe, 0xa4, 0xa3, 0x75, 0x9f, 0x0c, 0x7c, 0xb2, 0xaf, 0xa9, 0x95, 0x47, 0x41, 0x64, 0xbf,
	0x8b, 0x92, 0x35, 0x76, 0xe0, 0xfb, 0x01, 0x53, 0xc8, 0xea, 0x7f, 0x67, 0xa0, 0xdc, 0xa3, 0x2c,
	0x8e, 0xc6, 0x0d, 0x89, 0x45, 0x4f, 0x01, 0x1c, 0xce, 0x70, 0x38, 0x8e, 0x87, 0x01, 0x33, 0x33,
	0xbb, 0x99, 0xbd, 0xa2, 0x55, 0x74, 0x38, 0xeb, 0x4a, 0x42, 0xc2, 0x66, 0x24, 0x76, 0xaf, 0xa8,
	0x99, 0x4d, 0xd9, 0x67, 0x92, 0x80, 0x7e, 0x05, 0x1b, 0xa3, 0xd0, 0x0b, 0x88, 0x83, 0x7d, 0x9f,
	0x62, 0x2f, 0x18, 0x98, 0x2b, 0xbb, 0x99, 0xbd, 0x82, 0x55, 0x56, 0xd4, 0x8e, 0x4f, 0x4f, 0x83,
	0x01, 0x7a, 0x0e, 0x25, 0x4e, 0xfc, 0xd0, 0xa3, 0x38, 0x22, 0x31, 0x35, 0x73, 0xbb, 0x99, 0xbd,
	0xac, 0x05, 0x8a, 0x64, 0x91, 0x98, 0xa2, 0x2f, 0x01, 0xd1, 0x1b, 0xdb, 0x1b, 0x71, 0x37, 0x60,
	0x38, 0x24, 0x71, 0x4c, 0x23, 0xc6, 0xcd, 0xfc, 0xee, 0xca, 0x5e, 0xd1, 0xda, 0x4a, 0x39, 0x5d,
	0xcd, 0x40, 0x35, 0x78, 0xc0, 0x46, 0xfe, 0x25, 0x8d, 0x70, 0xd0, 0xc7, 0x9e, 0xcb, 0x28, 0xc7,
	0x2e, 0x93, 0x5f, 0x5f, 0xdd, 0xcd, 0xec, 0xad, 0x5b, 0x48, 0x71, 0xcf, 0xfb, 0xa7, 0x82, 0xd7,
	0x66, 0xa7, 0xc1, 0xa0, 0xfa, 0x5f, 0x00, 0x6b, 0x2d, 0x16, 0x38, 0xf4, 0xb2, 0x89, 0x6a, 0x50,
	0xf4, 0x82, 0x01, 0xf6, 0xe8, 0x15, 0xf5, 0xe4, 0x91, 0x37, 0x6a, 0xf7, 0xf7, 0x95, 0x0a, 0xa5,
	0xe6, 0xf6, 0x4f, 0x83, 0xc1, 0xa9, 0x60, 0x5a, 0x05, 0x4f, 0x3f, 0x21, 0x03, 0x56, 0x42, 0xdb,
	0x95, 0x1a, 0xc8, 0x5b, 0xe2, 0x11, 0x55, 0xa0, 0x40, 0x49, 0xd4, 0xb7, 0x99, 0xe3, 0xc9, 0x53,
	0xe7, 0xad, 0xf4, 0x1d, 0xbd, 0x84, 0xf5, 0x4b, 0xc2, 0x9c, 0x6b, 0xd7, 0x89, 0x87, 0xd8, 0x1f,
	0xfe, 0x59, 0x9e, 0x39, 0x6f, 0x95, 0x53, 0x62, 0x67, 0xf8, 0x67, 0xa1, 0x96, 0xd0, 0xf3, 0x99,
	0xeb, 0x60, 0xcf, 0xe5, 0xb1, 0x99, 0x97, 0xca, 0x05, 0x45, 0x3a, 0x75, 0x79, 0x8c, 0x5e, 0xc1,
	0x36, 0x1f, 0x5d, 0xf6, 0x23, 0xe2, 0x53, 0x4c, 0x38, 0x77, 0x07, 0xcc, 0xa7, 0x2c, 0x96, 0x87,
	0xcc, 0x5b, 0x28, 0x61, 0xd5, 0x53, 0x0e, 0x7a, 0x07, 0x26, 0x0f, 0xa9, 0xed, 0x12, 0x0f, 0xa7,
	0x0b, 0xb5, 0x3a, 0xcd, 0x35, 0xb9, 0xea, 0x81, 0xe6, 0xf7, 0x34, 0x5b, 0xeb, 0x14, 0xd5, 0xe0,
	0x3e, 0xf1, 0xbc, 0xe0, 0x1a, 0x53, 0xa9, 0x23, 0x1c, 0x47, 0x84, 0x71, 0xdf, 0x8d, 0xcd, 0x82,
	0xb4, 0xe7, 0xb6, 0x64, 0x2a, 0xfd, 0x5d, 0x68, 0x96, 0x50, 0x49, 0x4c, 0x6c, 0xb3, 0xa8, 0x54,
	0x12, 0x13, 0x1b, 0x7d, 0x03, 0x05, 0x9b, 0xf7, 0x2f, 0x85, 0x99, 0x4d, 0x90, 0x7a, 0x7d, 0xb6,
	0x3f, 0xe3, 0x9a, 0xfb, 0xda, 0x04, 0xfb, 0x8d, 0xde, 0xd1, 0xa1, 0x45, 0x62, 0x6b, 0x4d, 0xe0,
	0x2d, 0x12, 0xa3, 0x47, 0x50, 0x90, 0xca, 0xc3, 0xb5, 0x81, 0x59, 0xda, 0x5d, 0xd9, 0xcb, 0x5b,
	0x6b, 0xf2, 0xbd, 0x36, 0x40, 0xdf, 0x03, 0xc4, 0x8e, 0x83, 0x95, 0x04, 0xb3, 0xbc, 0x9b, 0xd9,
	0x2b, 0xd5, 0x76, 0x97, 0xc8, 0xbd, 0x68, 0x36, 0x95, 0x63, 0x5b, 0xc5, 0xd8, 0x71, 0xb4, 0x8f,
	0x7f, 0x0f, 0xd0, 0x9f, 0x08, 0x58, 0xff, 0xa8, 0x80, 0xa3, 0x89, 0x80, 0x7e, 0x2a, 0x80, 0xc0,
	0x7d, 0xca, 0x2e, 0xb5, 0x00, 0x8e, 0x2f, 0xc7, 0x98, 0xd3, 0xc8, 0x25, 0x9e, 0xb9, 0xb1, 0xbb,
	0xb2, 0x57, 0xaa, 0xed, 0x2f, 0x91, 0xd5, 0x62, 0x97, 0x4a, 0x00, 0x3f, 0x1c, 0xf7, 0xe4, 0x82,
	0x96, 0x88, 0x3c, 0x0b, 0xd1, 0x5b, 0x8c, 0x4a, 0x03, 0x8a, 0xe9, 0xa7, 0x67, 0x5c, 0x2b, 0x33,
	0xe7, 0x5a, 0x29, 0x6f, 0xe4, 0x69, 0x6f, 0x4c, 0xdf, 0x2b, 0x7f, 0x9b, 0x81, 0xe2, 0xc5, 0x2f,
	0x92, 0xb2, 0xc4, 0xb5, 0xb2, 0x77, 0x72, 0xad, 0x95, 0x8f, 0xb9, 0x56, 0xe5, 0xdf, 0xb3, 0x50,
	0x56, 0x1a, 0xf9, 0x7f, 0xb5, 0xaf, 0x24, 0xa2, 0x73, 0x93, 0x88, 0xfe, 0x0c, 0x8c, 0xc4, 0xef,
	0x31, 0x65, 0xe4, 0xd2, 0xa3, 0x8e, 0x8c, 0xca, 0x82, 0xb5, 0x99, 0xd0, 0x5b, 0x8a, 0x8c, 0x5e,
	0x40, 0xd9, 0xa1, 0x57, 0xae, 0x4d, 0xb1, 0xed, 0x11, 0xce, 0x65, 0x4c, 0x16, 0xad, 0x92, 0xa2,
	0x35, 0x04, 0xe9, 0x76, 0x0e, 0x58, 0x5b, 0x90, 0x03, 0x74, 0x0c, 0x15, 0x26, 0x31, 0xf4, 0x10,
	0xd6, 0x6c, 0xea, 0x79, 0xd8, 0x75, 0x74, 0x64, 0xad, 0x8a, 0xd7, 0xb6, 0x23, 0x52, 0xb1, 0x1b,
	0x62, 0xe2, 0x38, 0x11, 0xe5, 0x5c, 0x86, 0x57, 0xd1, 0x2a, 0xba, 0x61, 0x5d, 0x11, 0x2a, 0x7f,
	0x09, 0x0f, 0x97, 0xf8, 0x9b, 0xf8, 0xc8, 0x07, 0x3a, 0xd6, 0xc9, 0x5d, 0x3c, 0xa2, 0x6f, 0x20,
	0x7f, 0x45, 0xbc, 0x91, 0xca, 0xe8, 0xa5, 0xda, 0xcb, 0xa5, 0x0e, 0x3c, 0x31, 0x9b, 0xa5, 0x56,
	0xfc, 0x36, 0xfb, 0x2e, 0x53, 0xfd, 0x0c, 0xd6, 0x74, 0x00, 0xa3, 0x0d, 0x00, 0xf9, 0x58, 0xbf,
	0xc0, 0xb5, 0x63, 0xe3, 0xde, 0xf4, 0xfb, 0xd7, 0xc7, 0x46, 0xa6, 0xfa, 0xaf, 0x1b, 0x50, 0xec,
	0xba, 0x21, 0x15, 0x69, 0xfa, 0x6e, 0x99, 0xf7, 0x19, 0x94, 0x46, 0x14, 0xbb, 0x21, 0xbe, 0xf4,
	0x02, 0xfb, 0x43, 0x52, 0x83, 0x46, 0xb4, 0x1d, 0x1e, 0x0a, 0x82, 0x48, 0xa3, 0x8c, 0x4c, 0x0c,
	0xa6, 0x0a, 0x10, 0x30, 0x92, 0xda, 0xea, 0xd7, 0xb0, 0xe9, 0xd0, 0x3e, 0x19, 0x79, 0x31, 0x8e,
	0x46, 0x1e, 0x15, 0x9a, 0x55, 0xe6, 0x5a, 0xd7, 0x64, 0x6b, 0xe4, 0xd1, 0xb6, 0x83, 0x9a, 0x50,
	0xe0, 0x34, 0x12, 0x06, 0xe4, 0x66, 0x61, 0x77, 0x65, 0x6f, 0xa3, 0xb6, 0x37, 0xa7, 0x97, 0xf4,
	0x20, 0xfb, 0x67, 0x34, 0xbe, 0x0e, 0xa2, 0x0f, 0x3d, 0x8d, 0xb7, 0xd2, 0x95, 0xa8, 0x07, 0x5b,
	0x32, 0x59, 0x52, 0x07, 0x0f, 0x22, 0x8a, 0x43, 0x4a, 0x23, 0x6e, 0x16, 0x65, 0x9e, 0xf8, 0x74,
	0xa9, 0xb8, 0xba, 0x5a, 0x71, 0x1c, 0xd1, 0x2e, 0xa5, 0x91, 0xb5, 0x49, 0x66, 0xde, 0x39, 0x3a,
	0x83, 0x4d, 0x37, 0x74, 0x22, 0x4c, 0x6f, 0xc2, 0x20, 0x8a, 0xb1, 0xc3, 0x55, 0x7e, 0x2d, 0xd5,
	0x7e, 0xbd, 0x54, 0x64, 0xbb, 0xdb, 0xb4, 0x5a, 0x12, 0xde, 0xe4, 0xb1, 0xb5, 0x2e, 0x96, 0xa7,
	0xaf, 0xe8, 0x2d, 0xac, 0x7a, 0x2e, 0x1e, 0x51, 0xae, 0xd3, 0xe9, 0xb3, 0xa5, 0x62, 0x4e, 0xdd,
	0xf7, 0x94, 0x5b, 0x79, 0x4f, 0xfc, 0x41, 0xdf, 0xc0, 0x23, 0x3e, 0x70, 0xb1, 0x4f, 0x18, 0x19,
	0x50, 0x11, 0x7e, 0xd8, 0xed, 0x13, 0x9b, 0xe2, 0x2b, 0x8f, 0x30, 0x99, 0x57, 0x8b, 0xd6, 0x03,
	0x3e, 0x70, 0x3b, 0x29, 0xbf, 0x2d, 0xd8, 0x3f, 0x78, 0x84, 0xa1, 0xef, 0xe0, 0xc9, 0xc2, 0xa5,
	0xda, 0xa5, 0xcd, 0x0d, 0xb9, 0xda, 0xbc, 0xbd, 0xba, 0x2d, 0x3d, 0x1c, 0xbd, 0x85, 0x87, 0x0b,
	0xd7, 0x0f, 0xae, 0xcd, 0x4d, 0xb9, 0x74, 0xe7, 0xf6, 0xd2, 0xe3, 0x6b, 0xf4, 0x1d, 0x14, 0x87,
	0x34, 0xc9, 0xfc, 0x5b, 0xf2, 0xac, 0x2f, 0x96, 0x9e, 0xf5, 0xa4, 0xa5, 0x5d, 0xbd, 0x30, 0xa4,
	0x3a, 0x57, 0x7d, 0x0e, 0x5b, 0xca, 0xb1, 0xde, 0x0e, 0x70, 0x9f, 0x92, 0x78, 0x14, 0x51, 0x6e,
	0x22, 0xe9, 0x62, 0x46, 0xc2, 0x38, 0xd2, 0x74, 0xb4, 0x0f, 0xdb, 0xa3, 0xb0, 0x8f, 0x45, 0xd0,
	0x60, 0xd7, 0xa1, 0x2c, 0x76, 0xfb, 0x2e, 0x8d, 0xcc, 0x6d, 0xb9, 0xbf, 0xad, 0x51, 0xd8, 0x3f,
	0x0b, 0x1c, 0xda, 0x4e, 0x19, 0xe8, 0x10, 0x9e, 0x2d, 0xd1, 0xc9, 0xd5, 0x81, 0xd2, 0xca, 0x8e,
	0x5c, 0x5a, 0x59, 0xa4, 0x95, 0xab, 0x03, 0xa9, 0x97, 0xe5, 0x7a, 0xbd, 0x3a, 0x10, 0xca, 0xb9,
	0xbf, 0x5c, 0xaf, 0x57, 0x07, 0xc7, 0xd7, 0x95, 0x1a, 0x6c, 0xcc, 0x3a, 0x1f, 0xda, 0x80, 0xac,
	0x1b, 0xea, 0x64, 0x91, 0x75, 0xc3, 0x24, 0x7b, 0x64, 0x65, 0x6b, 0x25, 0x1e, 0x2b, 0x5f, 0xc3,
	0xfa, 0x8c, 0x77, 0xdd, 0x5a, 0x82, 0x20, 0x27, 0x58, 0x7a, 0x8d, 0x7c, 0xae, 0x70, 0xc8, 0x4b,
	0x5f, 0x42, 0x3b, 0x90, 0x77, 0x7d, 0xee, 0x72, 0x33, 0x23, 0xfb, 0x3b, 0xf5, 0x82, 0x4c, 0x58,
	0x13, 0x7f, 0x1d, 0xc6, 0xcd, 0xac, 0xa4, 0x27, 0xaf, 0x42, 0x98, 0x4f, 0x6c, 0x6e, 0xae, 0x48,
	0xb2, 0x7c, 0x16, 0x7b, 0x72, 0x43, 0x6e, 0xe6, 0x24, 0x49, 0x3c, 0x2a, 0xa9, 0xd4, 0x4d, 0xba,
	0x46, 0xf5, 0x52, 0xf9, 0xeb, 0x3c, 0x14, 0x12, 0xab, 0x8a, 0x52, 0xa1, 0x4c, 0x86, 0x87, 0x94,
	0x38, 0x34, 0xc2, 0x94, 0x45, 0xae, 0x3d, 0x94, 0x05, 0x26, 0x23, 0x4d, 0xfa, 0x40, 0xf1, 0x4f,
	0x24, 0xbb, 0x95, 0x72, 0x27, 0x5e, 0x80, 0x29, 0xb3, 0xa3, 0x71, 0x18, 0xbb, 0x01, 0x93, 0x87,
	0x4b, 0xbd, 0xa0, 0x95, 0xd2, 0xd1, 0x00, 0xb6, 0x27, 0xa8, 0xba, 0x37, 0x08, 0x22, 0x37, 0x1e,
	0xfa, 0x32, 0x2f, 0x6d, 0xd4, 0xde, 0xfe, 0xac, 0xf3, 0xed, 0xb7, 0x6e, 0x2f, 0xb6, 0x16, 0x49,
	0x44, 0x16, 0x94, 0x87, 0x84, 0x0f, 0x8f, 0x46, 0xcc, 0x96, 0x1b, 0xca, 0xc9, 0x2f, 0xec, 0xff,
	0xfc, 0x17, 0x4e, 0xa6, 0x56, 0x59, 0x33, 0x32, 0x84, 0x4c, 0xca, 0xec, 0xc0, 0x71, 0xd9, 0xe0,
	0x62, 0x1c, 0x52, 0x59, 0xfe, 0x7e, 0x91, 0xcc, 0xd6, 0xd4, 0x2a, 0x6b, 0x46, 0x06, 0xfa, 0x04,
	0x36, 0x26, 0xdb, 0xc7, 0xc2, 0x97, 0x74, 0xfa, 0x9d, 0x50, 0xff, 0x40, 0xc7, 0xa2, 0x03, 0x1c,
	0xfa, 0xc4, 0x96, 0x80, 0x35, 0x09, 0x58, 0x13, 0xef, 0x7f, 0xa0, 0xe3, 0xaa, 0x0f, 0xdb, 0x0b,
	0xb4, 0x82, 0xd6, 0x60, 0xc5, 0x6a, 0xbc, 0x31, 0xee, 0xa1, 0x87, 0xb0, 0x5d, 0x6f, 0xf5, 0x6a,
	0x6f, 0x0f, 0x70, 0xe3, 0xb0, 0x81, 0x4f, 0x3a, 0xf5, 0x06, 0xee, 0x34, 0xdf, 0x1a, 0x99, 0x29,
	0x46, 0xab, 0x71, 0x38, 0x61, 0x64, 0xd1, 0x63, 0x78, 0x78, 0xfc, 0x53, 0xbb, 0xdb, 0x6d, 0x35,
	0xf1, 0x14, 0xa0, 0x77, 0x52, 0xff, 0xca, 0x58, 0xa9, 0x7e, 0x01, 0xe5, 0x69, 0x15, 0x89, 0xef,
	0x88, 0x55, 0xf7, 0xc4, 0xc3, 0x49, 0xeb, 0x8f, 0x46, 0x06, 0x01, 0xac, 0xf6, 0x4e, 0xea, 0xb5,
	0xb7, 0x07, 0x46, 0xb6, 0xfa, 0xa9, 0x68, 0x6f, 0xa6, 0x8e, 0x0b, 0xb0, 0x7a, 0x58, 0xef, 0xb5,
	0x0e, 0xc4, 0xc6, 0x4a, 0xb0, 0x76, 0xd2, 0xfa, 0x63, 0xed, 0xb0, 0x7d, 0x66, 0x64, 0xaa, 0xbf,
	0x83, 0xcd, 0xb9, 0xb2, 0x81, 0x0c, 0x28, 0x74, 0x5a, 0x17, 0x2d, 0xab, 0x7d, 0x76, 0x6c, 0xdc,
	0xab, 0x64, 0x0b, 0x19, 0xf1, 0x89, 0x66, 0xb7, 0x6d, 0x64, 0xd0, 0x26, 0x94, 0x5a, 0x67, 0x47,
	0xe7, 0x56, 0xa3, 0xd5, 0x69, 0x9d, 0x5d, 0x18, 0xd9, 0xdf, 0xe7, 0x0a, 0x39, 0x23, 0xff, 0xfb,
	0x5c, 0xa1, 0x64, 0x94, 0xab, 0xff, 0x91, 0x85, 0x42, 0x8f, 0x72, 0x31, 0x15, 0xdd, 0xad, 0xa8,
	0x7e, 0x0a, 0xeb, 0x11, 0xf5, 0xc8, 0x38, 0x2d, 0x9b, 0xd2, 0x9b, 0x0f, 0xb3, 0x66, 0xc6, 0x2a,
	0x4b, 0x46, 0x52, 0x3c, 0x31, 0x98, 0xd7, 0xc4, 0xf3, 0x68, 0x8c, 0xe9, 0xcd, 0x90, 0x8c, 0x78,
	0x8c, 0x1d, 0x1a, 0x53, 0xe5, 0x70, 0x2b, 0x32, 0x9f, 0x7e, 0x32, 0xe7, 0x1c, 0x3f, 0x4a, 0x78,
	0x4b, 0xa1, 0x9b, 0x09, 0xd8, 0x7a, 0x70, 0xbd, 0x90, 0x8e, 0xbe, 0x84, 0xed, 0xc1, 0x0d, 0x1e,
	0x8c, 0xf1, 0xec, 0x7e, 0x72, 0x2a, 0xba, 0x06, 0x37, 0xc7, 0x63, 0x6b, 0x7a, 0x3f, 0x4d, 0x58,
	0xe7, 0x72, 0x7e, 0x4d, 0x92, 0x7a, 0x5e, 0x6e, 0xe2, 0xf1, 0xdc, 0x26, 0xa6, 0x67, 0x5c, 0x75,
	0x2a, 0x3e, 0x3d, 0xf5, 0x2e, 0x4c, 0xeb, 0xab, 0x8b, 0xd3, 0x7a, 0xf5, 0x9f, 0x33, 0xf0, 0x60,
	0xf1, 0xa1, 0xd0, 0x6b, 0xd8, 0x89, 0x69, 0xe4, 0xbb, 0x8c, 0xc4, 0x14, 0x07, 0x2c, 0xd1, 0x91,
	0x4e, 0x27, 0x28, 0xe5, 0x9d, 0x33, 0xbd, 0x14, 0x35, 0x61, 0xd5, 0xa7, 0xf1, 0x30, 0x50, 0x1a,
	0xdf, 0xa8, 0x7d, 0xf1, 0x8b, 0xb4, 0xb7, 0xdf, 0x91, 0x6b, 0x2c, 0xbd, 0x56, 0xf4, 0x82, 0xb1,
	0xeb, 0xd3, 0x60, 0x14, 0x63, 0x9f, 0x4b, 0x3b, 0xac, 0x5b, 0x45, 0x4d, 0xe9, 0xf0, 0xea, 0x13,
	0x58, 0x55, 0x0b, 0x10, 0x82, 0x8d, 0xe3, 0x9b, 0x8b, 0x88, 0xd8, 0x1f, 0xa8, 0x23, 0xda, 0x1c,
	0x6e, 0xdc, 0xab, 0x7e, 0x07, 0x85, 0x6e, 0xe0, 0xb9, 0xf6, 0xb8, 0x79, 0x78, 0x17, 0xdf, 0xa9,
	0x7e, 0x0f, 0x45, 0x8b, 0x3a, 0x6e, 0x44, 0xed, 0xf8, 0x4e, 0xce, 0x57, 0xfd, 0x9b, 0x15, 0x28,
	0x76, 0x82, 0x4b, 0xd7, 0x73, 0xe3, 0xf1, 0xdd, 0xdc, 0xf7, 0x11, 0x14, 0xe6, 0x1a, 0xc2, 0x35,
	0x57, 0xb7, 0x83, 0x17, 0xb0, 0x25, 0x7a, 0x0a, 0xcf, 0x0b, 0x6c, 0x12, 0x07, 0x11, 0x8e, 0x45,
	0x1a, 0x53, 0xc9, 0x77, 0xbe, 0x9d, 0x4b, 0xf7, 0xb0, 0xdf, 0x0e, 0xeb, 0xc9, 0x02, 0x99, 0xc0,
	0x36, 0xdd, 0x59, 0x02, 0xfa, 0x0d, 0x6c, 0xf1, 0x98, 0xc4, 0xae, 0x2d, 0x1a, 0x96, 0x59, 0x1f,
	0xdd, 0x54, 0x8c, 0x76, 0x98, 0xb8, 0xe8, 0xe7, 0x80, 0xfc, 0x91, 0x17, 0xbb, 0x98, 0x84, 0x0c,
	0x27, 0x7b, 0x49, 0x06, 0x09, 0xc9, 0xa9, 0x87, 0x4c, 0x7f, 0x51, 0x75, 0xf5, 0x57, 0x07, 0xfa,
	0x2c, 0x69, 0x57, 0x7f, 0x75, 0xa0, 0x4e, 0xf3, 0x3b, 0x78, 0x2c, 0xd9, 0x61, 0x44, 0xfb, 0xee,
	0x4d, 0x72, 0x2c, 0x91, 0x47, 0xe5, 0xb9, 0x4a, 0xaa, 0xba, 0x0b, 0x48, 0x57, 0x22, 0xea, 0x29,
	0x40, 0x6c, 0xbb, 0xba, 0x07, 0x9b, 0x73, 0x47, 0x13, 0x29, 0xa9, 0xdd, 0xc5, 0xdd, 0xf3, 0xf3,
	0x53, 0xe3, 0x1e, 0x2a, 0x40, 0xae, 0x79, 0xd2, 0xe8, 0x1a, 0x99, 0xea, 0xdf, 0x23, 0x58, 0xe9,
	0x74, 0x5a, 0x77, 0xbd, 0x1b, 0xf1, 0x6d, 0x5b, 0x1b, 0x42, 0x3c, 0x4a, 0x0a, 0xb3, 0xa5, 0xda,
	0x05, 0x85, 0xd9, 0xc9, 0xa0, 0x93, 0x9b, 0x19, 0x74, 0x7c, 0x9f, 0xe2, 0x81, 0xab, 0x86, 0xac,
	0xbc, 0xb5, 0xea, 0xfb, 0xf4, 0xd8, 0x75, 0x84, 0x71, 0x05, 0xc3, 0x0e, 0x1c, 0xaa, 0xef, 0x3a,
	0x04, 0xb0, 0x11, 0x38, 0x14, 0x7d, 0x01, 0x48, 0x17, 0x62, 0x87, 0x71, 0x6c, 0x13, 0x7b, 0xe8,
	0xb2, 0x81, 0xac, 0x16, 0x69, 0xe0, 0x36, 0x19, 0x6f, 0x28, 0xba, 0x98, 0xc0, 0x66, 0x93, 0x8a,
	0xba, 0xcc, 0x98, 0x4d, 0x70, 0x7f, 0x82, 0x87, 0x4c, 0x44, 0x6e, 0xc8, 0xb1, 0xee, 0xe1, 0x45,
	0x66, 0x89, 0xa3, 0xc0, 0x93, 0xf3, 0xd7, 0xc6, 0xad, 0xae, 0xbd, 0xd3, 0x69, 0xed, 0x9f, 0x05,
	0xac, 0xd5, 0xed, 0xe9, 0x34, 0xde, 0x50, 0x70, 0x6b, 0x87, 0x05, 0xac, 0x15, 0xf2, 0x59, 0xaa,
	0x38, 0x8d, 0xbc, 0x13, 0x11, 0x1a, 0x52, 0xe6, 0x95, 0x77, 0x1e, 0x1d, 0xdb, 0x9e, 0xb0, 0x98,
	0xad, 0x2d, 0xa9, 0x58, 0x4a, 0x5d, 0x1e, 0xb1, 0x65, 0x77, 0x9e, 0xb7, 0xc4, 0x23, 0xfa, 0x16,
	0x2a, 0xb6, 0x17, 0x8c, 0x1c, 0x31, 0xe6, 0x72, 0x3b, 0x72, 0x2f, 0x69, 0xe4, 0x5c, 0xa6, 0x27,
	0xdb, 0x90, 0x27, 0x33, 0x25, 0xa2, 0x37, 0x05, 0x48, 0x4e, 0xf9, 0x1a, 0x76, 0x48, 0x1c, 0x13,
	0x7b, 0x48, 0x9d, 0xf4, 0x8a, 0x47, 0x34, 0x55, 0x9b, 0xf2, 0xaa, 0x05, 0x25, 0x3c, 0x7d, 0xc3,
	0x23, 0x5a, 0xac, 0x1a, 0xdc, 0x17, 0x56, 0x10, 0xba, 0x8a, 0xdd, 0x2b, 0x8a, 0x6d, 0x12, 0x12,
	0xdb, 0x8d, 0xc7, 0xa6, 0x21, 0xf7, 0xb4, 0xed, 0xfb, 0xd4, 0xd2, 0xbc, 0x86, 0x66, 0x89, 0x51,
	0x4c, 0xd8, 0x25, 0x8c, 0x5c, 0x9f, 0x44, 0x63, 0xdd, 0xbd, 0x82, 0xc3, 0x78, 0x57, 0x51, 0x84,
	0x45, 0x04, 0x80, 0x53, 0x3b, 0x60, 0x8e, 0x80, 0xa8, 0xf6, 0xb4, 0xec, 0x30, 0xde, 0x4b, 0x68,
	0xf3, 0x03, 0xdd, 0x83, 0x5b, 0x03, 0xdd, 0x6f, 0x60, 0x6b, 0xc8, 0xf9, 0x5c, 0xc1, 0x78, 0xa8,
	0xe2, 0x6b, 0xc8, 0xf9, 0x4c, 0xbd, 0xa8, 0xc1, 0x7d, 0xed, 0x31, 0x22, 0x1a, 0xed, 0x20, 0x8a,
	0x74, 0xf1, 0x32, 0xd5, 0xc5, 0x96, 0x62, 0xd6, 0x43, 0xd6, 0x48, 0x59, 0xe8, 0x27, 0x78, 0x38,
	0x0b, 0xc6, 0x3e, 0x09, 0xd5, 0x25, 0xdd, 0x23, 0x39, 0xc8, 0xbd, 0x5c, 0xe0, 0x12, 0x33, 0x22,
	0x3a, 0x24, 0xb4, 0x76, 0xc8, 0x1c, 0x45, 0xde, 0xe9, 0x7d, 0x09, 0xdb, 0x6e, 0x78, 0xf5, 0x06,
	0x87, 0xd8, 0xe6, 0x76, 0x3f, 0x1d, 0xe7, 0x2b, 0x52, 0x0f, 0x86, 0x60, 0x75, 0x1b, 0xdc, 0xee,
	0xeb, 0xa9, 0x5e, 0xc3, 0x0f, 0xe6, 0xe1, 0x8f, 0x53, 0xf8, 0xc1, 0x0c, 0x7c, 0x0f, 0x24, 0x4d,
	0x46, 0x47, 0x82, 0x7d, 0x26, 0xb1, 0x1b, 0x82, 0xde, 0x64, 0x3c, 0x41, 0x7e, 0x26, 0xd2, 0xe4,
	0xd5, 0x1b, 0xcc, 0x07, 0xd7, 0x98, 0x7f, 0x35, 0x52, 0xe3, 0xc6, 0xf3, 0x14, 0xfa, 0xa6, 0x37,
	0xb8, 0xee, 0x7d, 0x35, 0x92, 0x23, 0xc6, 0x09, 0x18, 0x11, 0xe5, 0x71, 0xe4, 0xda, 0x31, 0x75,
	0x70, 0xe8, 0xf9, 0x8c, 0x9b, 0xbb, 0x52, 0x0f, 0x4f, 0x17, 0xe8, 0xa1, 0xeb, 0xf9, 0x4c, 0x8f,
	0x51, 0x9b, 0x93, 0x65, 0x82, 0x2a, 0x67, 0xe3, 0x24, 0xc6, 0x48, 0x44, 0x89, 0x50, 0x2b, 0x37,
	0x5f, 0x2c, 0x9c, 0x8d, 0x85, 0x28, 0x1d, 0x49, 0xf5, 0x88, 0x92, 0x0e, 0x09, 0xb9, 0xba, 0x3c,
	0xdb, 0xe4, 0xb3, 0x54, 0xd4, 0x01, 0xd4, 0xa7, 0x0e, 0x8d, 0x88, 0xd8, 0x9d, 0x2f, 0x66, 0x2f,
	0x9f, 0x84, 0x66, 0x55, 0xb6, 0x05, 0xcf, 0xe7, 0xa4, 0x1e, 0x25, 0xc0, 0x4e, 0xe0, 0x50, 0x61,
	0x24, 0xa3, 0x3f, 0x47, 0x99, 0x3b, 0xad, 0x9a, 0x29, 0x5e, 0x2e, 0x3d, 0x6d, 0xdb, 0xa7, 0xee,
	0xed, 0xd3, 0x0a, 0x2a, 0x97, 0x11, 0x1b, 0xb0, 0x01, 0xe5, 0xd2, 0x85, 0x74, 0x52, 0x49, 0xfd,
	0x75, 0x4f, 0x47, 0x6c, 0x8a, 0xd0, 0x09, 0x63, 0x69, 0xa3, 0xf3, 0xe5, 0xff, 0x5a, 0xa3, 0xb3,
	0xbf, 0x64, 0x7e, 0x3d, 0x84, 0x67, 0xc4, 0xef, 0xe3, 0xe4, 0xb2, 0x84, 0x7b, 0xc2, 0x50, 0x89,
	0xc1, 0x64, 0xbd, 0x79, 0x25, 0x3b, 0x8d, 0x0a, 0xf1, 0xfb, 0x4d, 0x05, 0xea, 0x09, 0x8c, 0xb6,
	0x93, 0x2c, 0x2f, 0xc7, 0xb0, 0x7b, 0x5b, 0x86, 0xe3, 0xf6, 0xfb, 0x34, 0x12, 0x73, 0xaf, 0x28,
	0x43, 0xe6, 0x6b, 0xe9, 0x66, 0x4f, 0xe7, 0xa4, 0x34, 0x67, 0x40, 0xf2, 0x42, 0xd8, 0xef, 0x63,
	0x46, 0x7c, 0x6a, 0xd6, 0x54, 0x72, 0x24, 0x7e, 0xff, 0x8c, 0xf8, 0x14, 0x55, 0x61, 0x5d, 0xb0,
	0x22, 0x3a, 0x10, 0x8a, 0x75, 0x1d, 0xf3, 0x6b, 0x75, 0xfb, 0x46, 0xfc, 0xbe, 0x25, 0x69, 0x6d,
	0x07, 0x3d, 0x01, 0x10, 0x18, 0x4e, 0x63, 0x01, 0x78, 0x23, 0x01, 0x42, 0x60, 0x8f, 0xc6, 0x6d,
	0x47, 0xa4, 0x18, 0xc1, 0x0d, 0x03, 0x97, 0xc5, 0x34, 0x32, 0xdf, 0xaa, 0x44, 0x45, 0xfc, 0x7e,
	0x57, 0x51, 0x74, 0x78, 0x1c, 0xcc, 0x86, 0xc7, 0xc1, 0x24, 0x92, 0x26, 0xe1, 0x51, 0xf9, 0x01,
	0x8c, 0xf9, 0xd8, 0x17, 0xf2, 0xc5, 0x58, 0xab, 0xcb, 0xb6, 0x9e, 0x8c, 0x41, 0x90, 0x54, 0x99,
	0x46, 0x2f, 0xa0, 0x2c, 0x52, 0x4c, 0x70, 0x45, 0xa3, 0xc8, 0x75, 0x92, 0x5f, 0x56, 0x4a, 0x24,
	0x64, 0xe7, 0x9a, 0x54, 0x79, 0x0d, 0x30, 0x89, 0xa5, 0xa4, 0xc6, 0x66, 0x6e, 0xd5, 0xd8, 0x6c,
	0x5a, 0x63, 0x2b, 0x8f, 0x61, 0xed, 0x82, 0xd8, 0x32, 0xcd, 0xe8, 0x72, 0x2b, 0x46, 0xec, 0x75,
	0x59, 0x6e, 0x2b, 0x7f, 0x82, 0x9d, 0x45, 0xf1, 0xb4, 0xe0, 0x72, 0xf0, 0xf5, 0xec, 0xe5, 0x60,
	0x65, 0x81, 0xdb, 0xeb, 0xcf, 0x4c, 0xdd, 0x09, 0x8a, 0xed, 0x4e, 0x82, 0x61, 0xf2, 0x7d, 0x29,
	0x55, 0x94, 0x7b, 0x03, 0x56, 0x38, 0x8b, 0x92, 0xed, 0x72, 0x16, 0x55, 0xff, 0x21, 0x03, 0x3b,
	0x8b, 0x0a, 0x29, 0x7a, 0x0e, 0x8f, 0xcf, 0xce, 0xcf, 0x70, 0xab, 0xdb, 0xc3, 0xbd, 0x96, 0xf5,
	0x43, 0xbb, 0xd1, 0xc2, 0x8d, 0xf3, 0xb3, 0x0b, 0xeb, 0xfc, 0x14, 0x9f, 0x1f, 0x1d, 0x19, 0xf7,
	0xd0, 0xaf, 0x60, 0x77, 0x19, 0xa0, 0xd1, 0x3b, 0x3a, 0xc4, 0xbd, 0x4e, 0xcf, 0xc8, 0x7c, 0x4c,
	0x8c, 0x00, 0x64, 0xd1, 0x27, 0xf0, 0xe2, 0x23, 0x00, 0x7c, 0x6e, 0x35, 0xde, 0x59, 0xc6, 0x4a,
	0xf5, 0x12, 0x8c, 0xf9, 0xbc, 0x81, 0x4c, 0x58, 0x4b, 0x02, 0x59, 0xf5, 0xfa, 0xc9, 0x2b, 0x7a,
	0x03, 0x6b, 0x3e, 0x09, 0x43, 0xd1, 0x97, 0x64, 0x65, 0xda, 0xb8, 0xa5, 0x3f, 0x25, 0xa2, 0x1d,
	0x53, 0xdf, 0x4a, 0xa0, 0xd5, 0x7f, 0xcb, 0x40, 0x69, 0x8a, 0x81, 0xbe, 0x85, 0x9c, 0x48, 0x65,
	0xba, 0x03, 0xdb, 0x5b, 0x2e, 0x62, 0x36, 0xa5, 0x59, 0x72, 0x95, 0xbc, 0x7f, 0xf1, 0x7c, 0xa6,
	0x95, 0x2d, 0x9f, 0x65, 0xa3, 0x29, 0x5c, 0x32, 0x22, 0x6c, 0x40, 0x75, 0x67, 0x56, 0x14, 0x14,
	0x4b, 0x10, 0x84, 0x79, 0x48, 0xa8, 0xee, 0x10, 0x8a, 0x96, 0x78, 0xac, 0x76, 0x60, 0x7d, 0x46,
	0x36, 0xda, 0x86, 0xcd, 0x5e, 0xf7, 0xf8, 0x47, 0xdc, 0x7b, 0x7f, 0xd8, 0x6b, 0x58, 0xed, 0xc3,
	0x96, 0x65, 0xdc, 0x43, 0x3b, 0x60, 0x9c, 0x9e, 0x37, 0xea, 0xa7, 0xd3, 0xd4, 0x0c, 0xda, 0x82,
	0xf5, 0xde, 0xbb, 0x69, 0x52, 0xb6, 0xfa, 0x2f, 0x39, 0x28, 0x4f, 0x3a, 0x93, 0xbb, 0x8d, 0x1e,
	0xe8, 0x19, 0x94, 0xbc, 0x98, 0x62, 0x32, 0x8a, 0x87, 0x38, 0x08, 0xe5, 0xf9, 0xca, 0x56, 0xd1,
	0x8b, 0x69, 0x7d, 0x14, 0x0f, 0xcf, 0x43, 0xb4, 0x0b, 0xe5, 0x94, 0x4f, 0xfc, 0xbe, 0x3c, 0x66,
	0xd9, 0x02, 0x0d, 0xa8, 0xfb, 0x7d, 0x74, 0x0e, 0x65, 0x3e, 0xba, 0xc4, 0x61, 0x14, 0xf4, 0x5d,
	0x8f, 0xaa, 0x2b, 0xa4, 0xd2, 0xad, 0x29, 0x6c, 0x7a, 0xa3, 0xe2, 0xa5, 0xab, 0xe1, 0xaa, 0x04,
	0x95, 0xf8, 0x84, 0x72, 0xbb, 0xc9, 0xcc, 0x2f, 0x68, 0x32, 0x17, 0x76, 0x2c, 0xab, 0x8b, 0x3b,
	0x96, 0x97, 0xb0, 0xce, 0xc7, 0xcc, 0xc6, 0x32, 0x11, 0x5d, 0x11, 0x4f, 0xb6, 0xb7, 0xeb, 0x56,
	0x59, 0x10, 0xdb, 0x9a, 0xb6, 0x38, 0xaf, 0x17, 0x16, 0xe7, 0xf5, 0x8a, 0x0d, 0xdb, 0xfa, 0x40,
	0xf2, 0x02, 0x45, 0x6f, 0x1d, 0x7d, 0x02, 0x9b, 0x3e, 0xb9, 0xc1, 0x23, 0x0f, 0x5f, 0xba, 0xb1,
	0xfa, 0x69, 0x56, 0x98, 0x21, 0x67, 0x95, 0x7d, 0x72, 0xf3, 0xde, 0x3b, 0x74, 0x63, 0xf9, 0xe3,
	0xac, 0x86, 0x39, 0x53, 0xb0, 0x6c, 0x0a, 0x6b, 0x26, 0xb0, 0x4a, 0x00, 0xc6, 0xbc, 0xa2, 0x16,
	0xe4, 0x96, 0xd6, 0x6c, 0x6e, 0x79, 0xf5, 0x33, 0x7a, 0x9f, 0xdf, 0xf3, 0xf4, 0x8f, 0x10, 0x14,
	0x0a, 0xa7, 0xee, 0x60, 0x18, 0xc7, 0xe1, 0xdd, 0x66, 0x48, 0x79, 0x2d, 0x25, 0x3b, 0xc3, 0x64,
	0x8e, 0x50, 0x37, 0x7a, 0xeb, 0x8a, 0xaa, 0x87, 0x88, 0xaa, 0x0b, 0x85, 0x4e, 0xc0, 0xdc, 0x38,
	0x88, 0xee, 0xf6, 0x99, 0xcf, 0xc0, 0x08, 0x03, 0xcf, 0x73, 0xd9, 0x60, 0x62, 0xd1, 0x6f, 0x65,
	0x0b, 0xbd, 0xa9, 0xe9, 0x89, 0x51, 0xab, 0xbf, 0x85, 0x5c, 0xb3, 0xdb, 0xbe, 0xdb, 0x4c, 0x5d,
	0x87, 0x52, 0x23, 0x60, 0x4c, 0x95, 0xa0, 0xbb, 0x89, 0xf8, 0x2b, 0x28, 0x9c, 0xb6, 0xeb, 0x03,
	0xca, 0xee, 0x36, 0xd6, 0xa3, 0x6f, 0xa1, 0xcc, 0xc2, 0x28, 0xb8, 0xa4, 0x38, 0x26, 0xfc, 0x03,
	0xd7, 0xe9, 0xef, 0xd1, 0x9c, 0x89, 0xcf, 0xba, 0x02, 0x72, 0x41, 0xf8, 0x07, 0xab, 0xa4, 0xe0,
	0xe2, 0x99, 0x57, 0xff, 0x29, 0x03, 0x30, 0xe1, 0x89, 0xe9, 0x50, 0x48, 0x11, 0xc5, 0x5b, 0xb9,
	0xcf, 0xaa, 0x78, 0x6d, 0x3b, 0xe8, 0x31, 0x14, 0x63, 0x12, 0x0d, 0x54, 0x5d, 0x57, 0x09, 0xae,
	0xa0, 0x08, 0xaa, 0xae, 0x6b, 0x66, 0x3a, 0xf6, 0x17, 0x2d, 0x50, 0x24, 0xd9, 0x9e, 0x88, 0x01,
	0x84, 0x7a, 0xee, 0x15, 0x8d, 0xc6, 0x0a, 0x92, 0xd3, 0x03, 0x88, 0x26, 0x26, 0x17, 0x96, 0xb2,
	0xf7, 0xf7, 0xd4, 0xa4, 0xad, 0x07, 0xd4, 0x9c, 0xb5, 0x3e, 0x45, 0x55, 0x3b, 0x71, 0x02, 0x9f,
	0xb8, 0x6c, 0xf2, 0x8b, 0x52, 0x41, 0x11, 0xda, 0x4e, 0xf5, 0x3f, 0x33, 0x90, 0x6b, 0x32, 0xfe,
	0x7f, 0xe9, 0x9a, 0xa8, 0x02, 0x05, 0x31, 0xd9, 0x7b, 0x17, 0x17, 0xa7, 0xc9, 0x7f, 0x20, 0x24,
	0xef, 0xa8, 0x05, 0x6b, 0x11, 0xb5, 0x83, 0xc8, 0x49, 0x52, 0xdc, 0xe7, 0x73, 0x76, 0x38, 0x26,
	0x31, 0xbd, 0x26, 0xe3, 0xe6, 0x59, 0x4f, 0xf7, 0xaf, 0x0a, 0x2d, 0x6a, 0x0a, 0xb7, 0x92, 0xb5,
	0x68, 0x1f, 0xb6, 0x9d, 0xa1, 0x1d, 0xca, 0x2e, 0x50, 0xde, 0x98, 0x4f, 0xe7, 0xb8, 0x2d, 0xc1,
	0xea, 0x49, 0x8e, 0x4e, 0x5e, 0xd5, 0xbf, 0xcb, 0xc0, 0x93, 0x8f, 0x49, 0x96, 0x6d, 0x1d, 0x56,
	0xd2, 0xf5, 0x0f, 0x00, 0x6b, 0x44, 0x01, 0x64, 0x53, 0x46, 0x48, 0xca, 0x55, 0x3f, 0x03, 0x80,
	0x20, 0x69, 0xc0, 0x0b, 0x28, 0xdb, 0xa2, 0x1f, 0x4c, 0x10, 0xea, 0x17, 0x81, 0x92, 0xa4, 0x69,
	0xc8, 0x03, 0x58, 0x55, 0x26, 0xd0, 0x86, 0xd5, 0x6f, 0xd5, 0x7f, 0x5c, 0x81, 0x5c, 0x7d, 0x70,
	0xdd, 0x44, 0xdf, 0xdc, 0x36, 0xc7, 0x93, 0x39, 0xcd, 0x08, 0xdc, 0x22, 0xab, 0xb4, 0xe0, 0x39,
	0xb7, 0xe3, 0xd0, 0xc1, 0x4e, 0x70, 0xcd, 0x78, 0x1c, 0x51, 0xe2, 0x4f, 0xba, 0x63, 0xe9, 0x62,
	0xda, 0x1f, 0x9f, 0x48, 0x58, 0x33, 0x45, 0x25, 0xfd, 0xb1, 0xc4, 0xa0, 0x3a, 0x3c, 0x55, 0x62,
	0x46, 0xe1, 0x62, 0x21, 0x2b, 0xfa, 0x47, 0x1f, 0x01, 0x7a, 0x1f, 0x2e, 0x12, 0x71, 0x0a, 0x2f,
	0xc5, 0x6c, 0xfe, 0x73, 0xbb, 0x51, 0x2a, 0x78, 0xee, 0xfb, 0xb4, 0xf7, 0xb1, 0x0d, 0x9d, 0xc0,
	0x8b, 0x89, 0xb4, 0x65, 0x9b, 0x52, 0xff, 0x9d, 0xf2, 0x34, 0x91, 0xb5, 0x78, 0x5f, 0x4f, 0x01,
	0xf4, 0xcc, 0xe2, 0x70, 0xa6, 0x43, 0xa2, 0xa8, 0x28, 0x4d, 0xce, 0xaa, 0xdf, 0x43, 0x21, 0x51,
	0x2b, 0x2a, 0x42, 0xfe, 0xfd, 0x59, 0xaf, 0x75, 0x61, 0xdc, 0x13, 0x8f, 0xcd, 0xd6, 0xe1, 0xfb,
	0x63, 0x23, 0x83, 0x0a, 0x90, 0x6b, 0x9f, 0x1d, 0x9d, 0x1b, 0x59, 0xf1, 0xf4, 0x63, 0xdd, 0x3a,
	0x33, 0x56, 0x04, 0xbb, 0x65, 0x59, 0xe7, 0x96, 0x91, 0xab, 0xfe, 0x05, 0xe4, 0xc5, 0xd7, 0xef,
	0x14, 0x54, 0x87, 0x2f, 0x7f, 0x7a, 0x21, 0x11, 0xaf, 0xbc, 0x98, 0xbe, 0x92, 0x17, 0x25, 0xaf,
	0x06, 0xc1, 0xdc, 0x3f, 0x56, 0x5d, 0xae, 0xca, 0xf7, 0xaf, 0xff, 0x27, 0x00, 0x00, 0xff, 0xff,
	0x80, 0x62, 0xac, 0x60, 0x75, 0x25, 0x00, 0x00,
}
