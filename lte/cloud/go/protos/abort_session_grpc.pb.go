// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.10.0
// source: lte/protos/abort_session.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AbortSessionResponderClient is the client API for AbortSessionResponder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AbortSessionResponderClient interface {
	AbortSession(ctx context.Context, in *AbortSessionRequest, opts ...grpc.CallOption) (*AbortSessionResult, error)
}

type abortSessionResponderClient struct {
	cc grpc.ClientConnInterface
}

func NewAbortSessionResponderClient(cc grpc.ClientConnInterface) AbortSessionResponderClient {
	return &abortSessionResponderClient{cc}
}

func (c *abortSessionResponderClient) AbortSession(ctx context.Context, in *AbortSessionRequest, opts ...grpc.CallOption) (*AbortSessionResult, error) {
	out := new(AbortSessionResult)
	err := c.cc.Invoke(ctx, "/magma.lte.AbortSessionResponder/AbortSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AbortSessionResponderServer is the server API for AbortSessionResponder service.
// All implementations must embed UnimplementedAbortSessionResponderServer
// for forward compatibility
type AbortSessionResponderServer interface {
	AbortSession(context.Context, *AbortSessionRequest) (*AbortSessionResult, error)
	mustEmbedUnimplementedAbortSessionResponderServer()
}

// UnimplementedAbortSessionResponderServer must be embedded to have forward compatible implementations.
type UnimplementedAbortSessionResponderServer struct {
}

func (UnimplementedAbortSessionResponderServer) AbortSession(context.Context, *AbortSessionRequest) (*AbortSessionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortSession not implemented")
}
func (UnimplementedAbortSessionResponderServer) mustEmbedUnimplementedAbortSessionResponderServer() {}

// UnsafeAbortSessionResponderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AbortSessionResponderServer will
// result in compilation errors.
type UnsafeAbortSessionResponderServer interface {
	mustEmbedUnimplementedAbortSessionResponderServer()
}

func RegisterAbortSessionResponderServer(s grpc.ServiceRegistrar, srv AbortSessionResponderServer) {
	s.RegisterService(&AbortSessionResponder_ServiceDesc, srv)
}

func _AbortSessionResponder_AbortSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AbortSessionResponderServer).AbortSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.AbortSessionResponder/AbortSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AbortSessionResponderServer).AbortSession(ctx, req.(*AbortSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AbortSessionResponder_ServiceDesc is the grpc.ServiceDesc for AbortSessionResponder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AbortSessionResponder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.AbortSessionResponder",
	HandlerType: (*AbortSessionResponderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AbortSession",
			Handler:    _AbortSessionResponder_AbortSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/abort_session.proto",
}
