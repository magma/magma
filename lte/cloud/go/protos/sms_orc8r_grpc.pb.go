// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.10.0
// source: lte/protos/sms_orc8r.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protos "magma/orc8r/lib/go/protos"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SMSOrc8RServiceClient is the client API for SMSOrc8RService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SMSOrc8RServiceClient interface {
	SMOUplink(ctx context.Context, in *SMOUplinkUnitdata, opts ...grpc.CallOption) (*protos.Void, error)
}

type sMSOrc8RServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSMSOrc8RServiceClient(cc grpc.ClientConnInterface) SMSOrc8RServiceClient {
	return &sMSOrc8RServiceClient{cc}
}

func (c *sMSOrc8RServiceClient) SMOUplink(ctx context.Context, in *SMOUplinkUnitdata, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.SMSOrc8rService/SMOUplink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SMSOrc8RServiceServer is the server API for SMSOrc8RService service.
// All implementations must embed UnimplementedSMSOrc8RServiceServer
// for forward compatibility
type SMSOrc8RServiceServer interface {
	SMOUplink(context.Context, *SMOUplinkUnitdata) (*protos.Void, error)
	mustEmbedUnimplementedSMSOrc8RServiceServer()
}

// UnimplementedSMSOrc8RServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSMSOrc8RServiceServer struct {
}

func (UnimplementedSMSOrc8RServiceServer) SMOUplink(context.Context, *SMOUplinkUnitdata) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SMOUplink not implemented")
}
func (UnimplementedSMSOrc8RServiceServer) mustEmbedUnimplementedSMSOrc8RServiceServer() {}

// UnsafeSMSOrc8RServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SMSOrc8RServiceServer will
// result in compilation errors.
type UnsafeSMSOrc8RServiceServer interface {
	mustEmbedUnimplementedSMSOrc8RServiceServer()
}

func RegisterSMSOrc8RServiceServer(s grpc.ServiceRegistrar, srv SMSOrc8RServiceServer) {
	s.RegisterService(&SMSOrc8RService_ServiceDesc, srv)
}

func _SMSOrc8RService_SMOUplink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMOUplinkUnitdata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMSOrc8RServiceServer).SMOUplink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SMSOrc8rService/SMOUplink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMSOrc8RServiceServer).SMOUplink(ctx, req.(*SMOUplinkUnitdata))
	}
	return interceptor(ctx, in, info, handler)
}

// SMSOrc8RService_ServiceDesc is the grpc.ServiceDesc for SMSOrc8RService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SMSOrc8RService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.SMSOrc8rService",
	HandlerType: (*SMSOrc8RServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SMOUplink",
			Handler:    _SMSOrc8RService_SMOUplink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/sms_orc8r.proto",
}

// SMSOrc8RGatewayServiceClient is the client API for SMSOrc8RGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SMSOrc8RGatewayServiceClient interface {
	SMODownlink(ctx context.Context, in *SMODownlinkUnitdata, opts ...grpc.CallOption) (*protos.Void, error)
}

type sMSOrc8RGatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSMSOrc8RGatewayServiceClient(cc grpc.ClientConnInterface) SMSOrc8RGatewayServiceClient {
	return &sMSOrc8RGatewayServiceClient{cc}
}

func (c *sMSOrc8RGatewayServiceClient) SMODownlink(ctx context.Context, in *SMODownlinkUnitdata, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.SMSOrc8rGatewayService/SMODownlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SMSOrc8RGatewayServiceServer is the server API for SMSOrc8RGatewayService service.
// All implementations must embed UnimplementedSMSOrc8RGatewayServiceServer
// for forward compatibility
type SMSOrc8RGatewayServiceServer interface {
	SMODownlink(context.Context, *SMODownlinkUnitdata) (*protos.Void, error)
	mustEmbedUnimplementedSMSOrc8RGatewayServiceServer()
}

// UnimplementedSMSOrc8RGatewayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSMSOrc8RGatewayServiceServer struct {
}

func (UnimplementedSMSOrc8RGatewayServiceServer) SMODownlink(context.Context, *SMODownlinkUnitdata) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SMODownlink not implemented")
}
func (UnimplementedSMSOrc8RGatewayServiceServer) mustEmbedUnimplementedSMSOrc8RGatewayServiceServer() {
}

// UnsafeSMSOrc8RGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SMSOrc8RGatewayServiceServer will
// result in compilation errors.
type UnsafeSMSOrc8RGatewayServiceServer interface {
	mustEmbedUnimplementedSMSOrc8RGatewayServiceServer()
}

func RegisterSMSOrc8RGatewayServiceServer(s grpc.ServiceRegistrar, srv SMSOrc8RGatewayServiceServer) {
	s.RegisterService(&SMSOrc8RGatewayService_ServiceDesc, srv)
}

func _SMSOrc8RGatewayService_SMODownlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMODownlinkUnitdata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMSOrc8RGatewayServiceServer).SMODownlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SMSOrc8rGatewayService/SMODownlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMSOrc8RGatewayServiceServer).SMODownlink(ctx, req.(*SMODownlinkUnitdata))
	}
	return interceptor(ctx, in, info, handler)
}

// SMSOrc8RGatewayService_ServiceDesc is the grpc.ServiceDesc for SMSOrc8RGatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SMSOrc8RGatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.SMSOrc8rGatewayService",
	HandlerType: (*SMSOrc8RGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SMODownlink",
			Handler:    _SMSOrc8RGatewayService_SMODownlink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/sms_orc8r.proto",
}

// SmsDClient is the client API for SmsD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SmsDClient interface {
	ReportDelivery(ctx context.Context, in *ReportDeliveryRequest, opts ...grpc.CallOption) (*ReportDeliveryResponse, error)
	GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessagesResponse, error)
}

type smsDClient struct {
	cc grpc.ClientConnInterface
}

func NewSmsDClient(cc grpc.ClientConnInterface) SmsDClient {
	return &smsDClient{cc}
}

func (c *smsDClient) ReportDelivery(ctx context.Context, in *ReportDeliveryRequest, opts ...grpc.CallOption) (*ReportDeliveryResponse, error) {
	out := new(ReportDeliveryResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.SmsD/ReportDelivery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsDClient) GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessagesResponse, error) {
	out := new(GetMessagesResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.SmsD/GetMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmsDServer is the server API for SmsD service.
// All implementations must embed UnimplementedSmsDServer
// for forward compatibility
type SmsDServer interface {
	ReportDelivery(context.Context, *ReportDeliveryRequest) (*ReportDeliveryResponse, error)
	GetMessages(context.Context, *GetMessagesRequest) (*GetMessagesResponse, error)
	mustEmbedUnimplementedSmsDServer()
}

// UnimplementedSmsDServer must be embedded to have forward compatible implementations.
type UnimplementedSmsDServer struct {
}

func (UnimplementedSmsDServer) ReportDelivery(context.Context, *ReportDeliveryRequest) (*ReportDeliveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportDelivery not implemented")
}
func (UnimplementedSmsDServer) GetMessages(context.Context, *GetMessagesRequest) (*GetMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedSmsDServer) mustEmbedUnimplementedSmsDServer() {}

// UnsafeSmsDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SmsDServer will
// result in compilation errors.
type UnsafeSmsDServer interface {
	mustEmbedUnimplementedSmsDServer()
}

func RegisterSmsDServer(s grpc.ServiceRegistrar, srv SmsDServer) {
	s.RegisterService(&SmsD_ServiceDesc, srv)
}

func _SmsD_ReportDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportDeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsDServer).ReportDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SmsD/ReportDelivery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsDServer).ReportDelivery(ctx, req.(*ReportDeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsD_GetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsDServer).GetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SmsD/GetMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsDServer).GetMessages(ctx, req.(*GetMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SmsD_ServiceDesc is the grpc.ServiceDesc for SmsD service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SmsD_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.SmsD",
	HandlerType: (*SmsDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportDelivery",
			Handler:    _SmsD_ReportDelivery_Handler,
		},
		{
			MethodName: "GetMessages",
			Handler:    _SmsD_GetMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/sms_orc8r.proto",
}
