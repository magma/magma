// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.10.0
// source: lte/protos/subscriberauth.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// M5GSubscriberAuthenticationClient is the client API for M5GSubscriberAuthentication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type M5GSubscriberAuthenticationClient interface {
	// Authentication-Information (Code 318)
	M5GAuthenticationInformation(ctx context.Context, in *M5GAuthenticationInformationRequest, opts ...grpc.CallOption) (*M5GAuthenticationInformationAnswer, error)
}

type m5GSubscriberAuthenticationClient struct {
	cc grpc.ClientConnInterface
}

func NewM5GSubscriberAuthenticationClient(cc grpc.ClientConnInterface) M5GSubscriberAuthenticationClient {
	return &m5GSubscriberAuthenticationClient{cc}
}

func (c *m5GSubscriberAuthenticationClient) M5GAuthenticationInformation(ctx context.Context, in *M5GAuthenticationInformationRequest, opts ...grpc.CallOption) (*M5GAuthenticationInformationAnswer, error) {
	out := new(M5GAuthenticationInformationAnswer)
	err := c.cc.Invoke(ctx, "/magma.lte.M5GSubscriberAuthentication/M5GAuthenticationInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// M5GSubscriberAuthenticationServer is the server API for M5GSubscriberAuthentication service.
// All implementations must embed UnimplementedM5GSubscriberAuthenticationServer
// for forward compatibility
type M5GSubscriberAuthenticationServer interface {
	// Authentication-Information (Code 318)
	M5GAuthenticationInformation(context.Context, *M5GAuthenticationInformationRequest) (*M5GAuthenticationInformationAnswer, error)
	mustEmbedUnimplementedM5GSubscriberAuthenticationServer()
}

// UnimplementedM5GSubscriberAuthenticationServer must be embedded to have forward compatible implementations.
type UnimplementedM5GSubscriberAuthenticationServer struct {
}

func (UnimplementedM5GSubscriberAuthenticationServer) M5GAuthenticationInformation(context.Context, *M5GAuthenticationInformationRequest) (*M5GAuthenticationInformationAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method M5GAuthenticationInformation not implemented")
}
func (UnimplementedM5GSubscriberAuthenticationServer) mustEmbedUnimplementedM5GSubscriberAuthenticationServer() {
}

// UnsafeM5GSubscriberAuthenticationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to M5GSubscriberAuthenticationServer will
// result in compilation errors.
type UnsafeM5GSubscriberAuthenticationServer interface {
	mustEmbedUnimplementedM5GSubscriberAuthenticationServer()
}

func RegisterM5GSubscriberAuthenticationServer(s grpc.ServiceRegistrar, srv M5GSubscriberAuthenticationServer) {
	s.RegisterService(&M5GSubscriberAuthentication_ServiceDesc, srv)
}

func _M5GSubscriberAuthentication_M5GAuthenticationInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(M5GAuthenticationInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(M5GSubscriberAuthenticationServer).M5GAuthenticationInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.M5GSubscriberAuthentication/M5GAuthenticationInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(M5GSubscriberAuthenticationServer).M5GAuthenticationInformation(ctx, req.(*M5GAuthenticationInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// M5GSubscriberAuthentication_ServiceDesc is the grpc.ServiceDesc for M5GSubscriberAuthentication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var M5GSubscriberAuthentication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.M5GSubscriberAuthentication",
	HandlerType: (*M5GSubscriberAuthenticationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "M5GAuthenticationInformation",
			Handler:    _M5GSubscriberAuthentication_M5GAuthenticationInformation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/subscriberauth.proto",
}
