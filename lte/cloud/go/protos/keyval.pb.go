//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: lte/protos/keyval.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// IPs can be in 1 of 4 states during their lifecycle; see
// mobilityd.ip_allocator for full description
type IPDesc_IPState int32

const (
	IPDesc_FREE      IPDesc_IPState = 0
	IPDesc_ALLOCATED IPDesc_IPState = 1
	IPDesc_RELEASED  IPDesc_IPState = 2
	IPDesc_REAPED    IPDesc_IPState = 3
	IPDesc_RESERVED  IPDesc_IPState = 4
)

// Enum value maps for IPDesc_IPState.
var (
	IPDesc_IPState_name = map[int32]string{
		0: "FREE",
		1: "ALLOCATED",
		2: "RELEASED",
		3: "REAPED",
		4: "RESERVED",
	}
	IPDesc_IPState_value = map[string]int32{
		"FREE":      0,
		"ALLOCATED": 1,
		"RELEASED":  2,
		"REAPED":    3,
		"RESERVED":  4,
	}
)

func (x IPDesc_IPState) Enum() *IPDesc_IPState {
	p := new(IPDesc_IPState)
	*p = x
	return p
}

func (x IPDesc_IPState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPDesc_IPState) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_keyval_proto_enumTypes[0].Descriptor()
}

func (IPDesc_IPState) Type() protoreflect.EnumType {
	return &file_lte_protos_keyval_proto_enumTypes[0]
}

func (x IPDesc_IPState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPDesc_IPState.Descriptor instead.
func (IPDesc_IPState) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_keyval_proto_rawDescGZIP(), []int{1, 0}
}

type IPDesc_IPType int32

const (
	IPDesc_STATIC  IPDesc_IPType = 0
	IPDesc_IP_POOL IPDesc_IPType = 1
	IPDesc_DHCP    IPDesc_IPType = 3
)

// Enum value maps for IPDesc_IPType.
var (
	IPDesc_IPType_name = map[int32]string{
		0: "STATIC",
		1: "IP_POOL",
		3: "DHCP",
	}
	IPDesc_IPType_value = map[string]int32{
		"STATIC":  0,
		"IP_POOL": 1,
		"DHCP":    3,
	}
)

func (x IPDesc_IPType) Enum() *IPDesc_IPType {
	p := new(IPDesc_IPType)
	*p = x
	return p
}

func (x IPDesc_IPType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPDesc_IPType) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_keyval_proto_enumTypes[1].Descriptor()
}

func (IPDesc_IPType) Type() protoreflect.EnumType {
	return &file_lte_protos_keyval_proto_enumTypes[1]
}

func (x IPDesc_IPType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPDesc_IPType.Descriptor instead.
func (IPDesc_IPType) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_keyval_proto_rawDescGZIP(), []int{1, 1}
}

// --------------------------------------------------------------------------
// [mobilityd] List of assigned IP blocks
// --------------------------------------------------------------------------
type AssignedIPBlocks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpBlockList []*IPBlock `protobuf:"bytes,1,rep,name=ip_block_list,json=ipBlockList,proto3" json:"ip_block_list,omitempty"`
}

func (x *AssignedIPBlocks) Reset() {
	*x = AssignedIPBlocks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_keyval_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedIPBlocks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedIPBlocks) ProtoMessage() {}

func (x *AssignedIPBlocks) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_keyval_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedIPBlocks.ProtoReflect.Descriptor instead.
func (*AssignedIPBlocks) Descriptor() ([]byte, []int) {
	return file_lte_protos_keyval_proto_rawDescGZIP(), []int{0}
}

func (x *AssignedIPBlocks) GetIpBlockList() []*IPBlock {
	if x != nil {
		return x.IpBlockList
	}
	return nil
}

// --------------------------------------------------------------------------
// [mobilityd] IP descriptor (IP desc) describing an assigned IP
// --------------------------------------------------------------------------
type IPDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip      *IPAddress     `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	IpBlock *IPBlock       `protobuf:"bytes,2,opt,name=ip_block,json=ipBlock,proto3" json:"ip_block,omitempty"`
	State   IPDesc_IPState `protobuf:"varint,3,opt,name=state,proto3,enum=magma.lte.IPDesc_IPState" json:"state,omitempty"`
	Sid     *SubscriberID  `protobuf:"bytes,4,opt,name=sid,proto3" json:"sid,omitempty"`
	Type    IPDesc_IPType  `protobuf:"varint,5,opt,name=type,proto3,enum=magma.lte.IPDesc_IPType" json:"type,omitempty"`
	VlanId  uint32         `protobuf:"varint,6,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
}

func (x *IPDesc) Reset() {
	*x = IPDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_keyval_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPDesc) ProtoMessage() {}

func (x *IPDesc) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_keyval_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPDesc.ProtoReflect.Descriptor instead.
func (*IPDesc) Descriptor() ([]byte, []int) {
	return file_lte_protos_keyval_proto_rawDescGZIP(), []int{1}
}

func (x *IPDesc) GetIp() *IPAddress {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *IPDesc) GetIpBlock() *IPBlock {
	if x != nil {
		return x.IpBlock
	}
	return nil
}

func (x *IPDesc) GetState() IPDesc_IPState {
	if x != nil {
		return x.State
	}
	return IPDesc_FREE
}

func (x *IPDesc) GetSid() *SubscriberID {
	if x != nil {
		return x.Sid
	}
	return nil
}

func (x *IPDesc) GetType() IPDesc_IPType {
	if x != nil {
		return x.Type
	}
	return IPDesc_STATIC
}

func (x *IPDesc) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

// --------------------------------------------------------------------------
// [mobilityd] List of IP descriptors
// --------------------------------------------------------------------------
type IPDescs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpDescs []*IPDesc `protobuf:"bytes,1,rep,name=ip_descs,json=ipDescs,proto3" json:"ip_descs,omitempty"`
}

func (x *IPDescs) Reset() {
	*x = IPDescs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_keyval_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPDescs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPDescs) ProtoMessage() {}

func (x *IPDescs) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_keyval_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPDescs.ProtoReflect.Descriptor instead.
func (*IPDescs) Descriptor() ([]byte, []int) {
	return file_lte_protos_keyval_proto_rawDescGZIP(), []int{2}
}

func (x *IPDescs) GetIpDescs() []*IPDesc {
	if x != nil {
		return x.IpDescs
	}
	return nil
}

var File_lte_protos_keyval_proto protoreflect.FileDescriptor

var file_lte_protos_keyval_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6b, 0x65, 0x79,
	0x76, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x1a, 0x1d, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x64, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x4a, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x50, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x12, 0x36, 0x0a, 0x0d, 0x69, 0x70, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x49, 0x50, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0b,
	0x69, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xf9, 0x02, 0x0a, 0x06,
	0x49, 0x50, 0x44, 0x65, 0x73, 0x63, 0x12, 0x24, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x02, 0x69, 0x70, 0x12, 0x2d, 0x0a, 0x08,
	0x69, 0x70, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x49, 0x50, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x07, 0x69, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2f, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x49, 0x50, 0x44, 0x65, 0x73, 0x63, 0x2e, 0x49, 0x50,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x03,
	0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x49, 0x44, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x49, 0x50, 0x44, 0x65, 0x73, 0x63, 0x2e, 0x49, 0x50, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x4a,
	0x0a, 0x07, 0x49, 0x50, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x52, 0x45,
	0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x41, 0x50, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x04, 0x22, 0x2b, 0x0a, 0x06, 0x49, 0x50,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x49, 0x50, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x44, 0x48, 0x43, 0x50, 0x10, 0x03, 0x22, 0x37, 0x0a, 0x07, 0x49, 0x50, 0x44, 0x65, 0x73,
	0x63, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x69, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x49, 0x50, 0x44, 0x65, 0x73, 0x63, 0x52, 0x07, 0x69, 0x70, 0x44, 0x65, 0x73, 0x63, 0x73,
	0x42, 0x1b, 0x5a, 0x19, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f, 0x6c, 0x74, 0x65, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lte_protos_keyval_proto_rawDescOnce sync.Once
	file_lte_protos_keyval_proto_rawDescData = file_lte_protos_keyval_proto_rawDesc
)

func file_lte_protos_keyval_proto_rawDescGZIP() []byte {
	file_lte_protos_keyval_proto_rawDescOnce.Do(func() {
		file_lte_protos_keyval_proto_rawDescData = protoimpl.X.CompressGZIP(file_lte_protos_keyval_proto_rawDescData)
	})
	return file_lte_protos_keyval_proto_rawDescData
}

var file_lte_protos_keyval_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_lte_protos_keyval_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_lte_protos_keyval_proto_goTypes = []interface{}{
	(IPDesc_IPState)(0),      // 0: magma.lte.IPDesc.IPState
	(IPDesc_IPType)(0),       // 1: magma.lte.IPDesc.IPType
	(*AssignedIPBlocks)(nil), // 2: magma.lte.AssignedIPBlocks
	(*IPDesc)(nil),           // 3: magma.lte.IPDesc
	(*IPDescs)(nil),          // 4: magma.lte.IPDescs
	(*IPBlock)(nil),          // 5: magma.lte.IPBlock
	(*IPAddress)(nil),        // 6: magma.lte.IPAddress
	(*SubscriberID)(nil),     // 7: magma.lte.SubscriberID
}
var file_lte_protos_keyval_proto_depIdxs = []int32{
	5, // 0: magma.lte.AssignedIPBlocks.ip_block_list:type_name -> magma.lte.IPBlock
	6, // 1: magma.lte.IPDesc.ip:type_name -> magma.lte.IPAddress
	5, // 2: magma.lte.IPDesc.ip_block:type_name -> magma.lte.IPBlock
	0, // 3: magma.lte.IPDesc.state:type_name -> magma.lte.IPDesc.IPState
	7, // 4: magma.lte.IPDesc.sid:type_name -> magma.lte.SubscriberID
	1, // 5: magma.lte.IPDesc.type:type_name -> magma.lte.IPDesc.IPType
	3, // 6: magma.lte.IPDescs.ip_descs:type_name -> magma.lte.IPDesc
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_lte_protos_keyval_proto_init() }
func file_lte_protos_keyval_proto_init() {
	if File_lte_protos_keyval_proto != nil {
		return
	}
	file_lte_protos_subscriberdb_proto_init()
	file_lte_protos_mobilityd_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_lte_protos_keyval_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedIPBlocks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_keyval_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_keyval_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPDescs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lte_protos_keyval_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_lte_protos_keyval_proto_goTypes,
		DependencyIndexes: file_lte_protos_keyval_proto_depIdxs,
		EnumInfos:         file_lte_protos_keyval_proto_enumTypes,
		MessageInfos:      file_lte_protos_keyval_proto_msgTypes,
	}.Build()
	File_lte_protos_keyval_proto = out.File
	file_lte_protos_keyval_proto_rawDesc = nil
	file_lte_protos_keyval_proto_goTypes = nil
	file_lte_protos_keyval_proto_depIdxs = nil
}
