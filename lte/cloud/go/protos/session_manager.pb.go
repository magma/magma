// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lte/protos/session_manager.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protos "magma/orc8r/lib/go/protos"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

///////////////////
// LocalSessionManager service
///////////////////
type RATType int32

const (
	// Maps to 06 (EUTRAN, 3GPP TS 29.274) for Gy, 1004 (EUTRAN, 3GPP TS 29.212) S6a, Gx
	RATType_TGPP_LTE RATType = 0
	// Maps to 03 (WLAN, 3GPP TS 29.274) for Gy, 0 (WLAN, 3GPP TS 29.212) S6a, Gx
	RATType_TGPP_WLAN RATType = 1
	RATType_TGPP_NR   RATType = 2
)

var RATType_name = map[int32]string{
	0: "TGPP_LTE",
	1: "TGPP_WLAN",
	2: "TGPP_NR",
}

var RATType_value = map[string]int32{
	"TGPP_LTE":  0,
	"TGPP_WLAN": 1,
	"TGPP_NR":   2,
}

func (x RATType) String() string {
	return proto.EnumName(RATType_name, int32(x))
}

func (RATType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{0}
}

type EventTrigger int32

const (
	EventTrigger_SGSN_CHANGE        EventTrigger = 0
	EventTrigger_QOS_CHANGE         EventTrigger = 1
	EventTrigger_RAT_CHANGE         EventTrigger = 2
	EventTrigger_TFT_CHANGE         EventTrigger = 3
	EventTrigger_PLMN_CHANGE        EventTrigger = 4
	EventTrigger_LOSS_OF_BEARER     EventTrigger = 5
	EventTrigger_RECOVERY_OF_BEARER EventTrigger = 6
	EventTrigger_IP_CAN_CHANGE      EventTrigger = 7
	// 8, 9, 10 are unused
	EventTrigger_QOS_CHANGE_EXCEEDING_AUTHORIZATION EventTrigger = 11
	EventTrigger_RAI_CHANGE                         EventTrigger = 12
	EventTrigger_USER_LOCATION_CHANGE               EventTrigger = 13
	EventTrigger_NO_EVENT_TRIGGERS                  EventTrigger = 14
	EventTrigger_OUT_OF_CREDIT                      EventTrigger = 15
	EventTrigger_REALLOCATION_OF_CREDIT             EventTrigger = 16
	EventTrigger_REVALIDATION_TIMEOUT               EventTrigger = 17
	EventTrigger_UE_IP_ADDRESS_ALLOCATE             EventTrigger = 18
	EventTrigger_UE_IP_ADDRESS_RELEASE              EventTrigger = 19
	EventTrigger_DEFAULT_EPS_BEARER_QOS_CHANGE      EventTrigger = 20
	EventTrigger_AN_GW_CHANGE                       EventTrigger = 21
	EventTrigger_SUCCESSFUL_RESOURCE_ALLOCATION     EventTrigger = 22
	EventTrigger_RESOURCE_MODIFICATION_REQUEST      EventTrigger = 23
	EventTrigger_PGW_TRACE_CONTROL                  EventTrigger = 24
	EventTrigger_UE_TIME_ZONE_CHANGE                EventTrigger = 25
	EventTrigger_TAI_CHANGE                         EventTrigger = 26
	EventTrigger_ECGI_CHANGE                        EventTrigger = 27
	EventTrigger_CHARGING_CORRELATION_EXCHANGE      EventTrigger = 28
	EventTrigger_APN_AMBR_MODIFICATION_FAILURE      EventTrigger = 29
	EventTrigger_USER_CSG_INFORMATION_CHANGE        EventTrigger = 30
	// 31, 32 are unused
	EventTrigger_USAGE_REPORT                                    EventTrigger = 33
	EventTrigger_DEFAULT_EPS_BEARER_QOS_MODIFICATION_FAILURE     EventTrigger = 34
	EventTrigger_USER_CSG_HYBRID_SUBSCRIBED_INFORMATION_CHANGE   EventTrigger = 35
	EventTrigger_USER_CSG_HYBRID_UNSUBSCRIBED_INFORMATION_CHANGE EventTrigger = 36
	EventTrigger_ROUTING_RULE_CHANGE                             EventTrigger = 37
	// 38 is unused
	EventTrigger_APPLICATION_START EventTrigger = 39
	EventTrigger_APPLICATION_STOP  EventTrigger = 40
	// 41 is unused
	EventTrigger_CS_TO_PS_HANDOVER                                       EventTrigger = 42
	EventTrigger_UE_LOCAL_IP_ADDRESS_CHANGE                              EventTrigger = 43
	EventTrigger_HENB_LOCAL_IP_ADDRESS_CHANGE                            EventTrigger = 44
	EventTrigger_ACCESS_NETWORK_INFO_REPORT                              EventTrigger = 45
	EventTrigger_CREDIT_MANAGEMENT_SESSION_FAILURE                       EventTrigger = 46
	EventTrigger_DEFAULT_QOS_CHANGE                                      EventTrigger = 47
	EventTrigger_CHANGE_OF_UE_PRESENCE_IN_PRESENCE_REPORTING_AREA_REPORT EventTrigger = 48
	// UNSUPPORTED is not defined in 3GPP
	EventTrigger_UNSUPPORTED EventTrigger = 49
)

var EventTrigger_name = map[int32]string{
	0:  "SGSN_CHANGE",
	1:  "QOS_CHANGE",
	2:  "RAT_CHANGE",
	3:  "TFT_CHANGE",
	4:  "PLMN_CHANGE",
	5:  "LOSS_OF_BEARER",
	6:  "RECOVERY_OF_BEARER",
	7:  "IP_CAN_CHANGE",
	11: "QOS_CHANGE_EXCEEDING_AUTHORIZATION",
	12: "RAI_CHANGE",
	13: "USER_LOCATION_CHANGE",
	14: "NO_EVENT_TRIGGERS",
	15: "OUT_OF_CREDIT",
	16: "REALLOCATION_OF_CREDIT",
	17: "REVALIDATION_TIMEOUT",
	18: "UE_IP_ADDRESS_ALLOCATE",
	19: "UE_IP_ADDRESS_RELEASE",
	20: "DEFAULT_EPS_BEARER_QOS_CHANGE",
	21: "AN_GW_CHANGE",
	22: "SUCCESSFUL_RESOURCE_ALLOCATION",
	23: "RESOURCE_MODIFICATION_REQUEST",
	24: "PGW_TRACE_CONTROL",
	25: "UE_TIME_ZONE_CHANGE",
	26: "TAI_CHANGE",
	27: "ECGI_CHANGE",
	28: "CHARGING_CORRELATION_EXCHANGE",
	29: "APN_AMBR_MODIFICATION_FAILURE",
	30: "USER_CSG_INFORMATION_CHANGE",
	33: "USAGE_REPORT",
	34: "DEFAULT_EPS_BEARER_QOS_MODIFICATION_FAILURE",
	35: "USER_CSG_HYBRID_SUBSCRIBED_INFORMATION_CHANGE",
	36: "USER_CSG_HYBRID_UNSUBSCRIBED_INFORMATION_CHANGE",
	37: "ROUTING_RULE_CHANGE",
	39: "APPLICATION_START",
	40: "APPLICATION_STOP",
	42: "CS_TO_PS_HANDOVER",
	43: "UE_LOCAL_IP_ADDRESS_CHANGE",
	44: "HENB_LOCAL_IP_ADDRESS_CHANGE",
	45: "ACCESS_NETWORK_INFO_REPORT",
	46: "CREDIT_MANAGEMENT_SESSION_FAILURE",
	47: "DEFAULT_QOS_CHANGE",
	48: "CHANGE_OF_UE_PRESENCE_IN_PRESENCE_REPORTING_AREA_REPORT",
	49: "UNSUPPORTED",
}

var EventTrigger_value = map[string]int32{
	"SGSN_CHANGE":                                     0,
	"QOS_CHANGE":                                      1,
	"RAT_CHANGE":                                      2,
	"TFT_CHANGE":                                      3,
	"PLMN_CHANGE":                                     4,
	"LOSS_OF_BEARER":                                  5,
	"RECOVERY_OF_BEARER":                              6,
	"IP_CAN_CHANGE":                                   7,
	"QOS_CHANGE_EXCEEDING_AUTHORIZATION":              11,
	"RAI_CHANGE":                                      12,
	"USER_LOCATION_CHANGE":                            13,
	"NO_EVENT_TRIGGERS":                               14,
	"OUT_OF_CREDIT":                                   15,
	"REALLOCATION_OF_CREDIT":                          16,
	"REVALIDATION_TIMEOUT":                            17,
	"UE_IP_ADDRESS_ALLOCATE":                          18,
	"UE_IP_ADDRESS_RELEASE":                           19,
	"DEFAULT_EPS_BEARER_QOS_CHANGE":                   20,
	"AN_GW_CHANGE":                                    21,
	"SUCCESSFUL_RESOURCE_ALLOCATION":                  22,
	"RESOURCE_MODIFICATION_REQUEST":                   23,
	"PGW_TRACE_CONTROL":                               24,
	"UE_TIME_ZONE_CHANGE":                             25,
	"TAI_CHANGE":                                      26,
	"ECGI_CHANGE":                                     27,
	"CHARGING_CORRELATION_EXCHANGE":                   28,
	"APN_AMBR_MODIFICATION_FAILURE":                   29,
	"USER_CSG_INFORMATION_CHANGE":                     30,
	"USAGE_REPORT":                                    33,
	"DEFAULT_EPS_BEARER_QOS_MODIFICATION_FAILURE":     34,
	"USER_CSG_HYBRID_SUBSCRIBED_INFORMATION_CHANGE":   35,
	"USER_CSG_HYBRID_UNSUBSCRIBED_INFORMATION_CHANGE": 36,
	"ROUTING_RULE_CHANGE":                             37,
	"APPLICATION_START":                               39,
	"APPLICATION_STOP":                                40,
	"CS_TO_PS_HANDOVER":                               42,
	"UE_LOCAL_IP_ADDRESS_CHANGE":                      43,
	"HENB_LOCAL_IP_ADDRESS_CHANGE":                    44,
	"ACCESS_NETWORK_INFO_REPORT":                      45,
	"CREDIT_MANAGEMENT_SESSION_FAILURE":               46,
	"DEFAULT_QOS_CHANGE":                              47,
	"CHANGE_OF_UE_PRESENCE_IN_PRESENCE_REPORTING_AREA_REPORT": 48,
	"UNSUPPORTED": 49,
}

func (x EventTrigger) String() string {
	return proto.EnumName(EventTrigger_name, int32(x))
}

func (EventTrigger) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{1}
}

type QCI int32

const (
	QCI_QCI_0  QCI = 0
	QCI_QCI_1  QCI = 1
	QCI_QCI_2  QCI = 2
	QCI_QCI_3  QCI = 3
	QCI_QCI_4  QCI = 4
	QCI_QCI_5  QCI = 5
	QCI_QCI_6  QCI = 6
	QCI_QCI_7  QCI = 7
	QCI_QCI_8  QCI = 8
	QCI_QCI_9  QCI = 9
	QCI_QCI_65 QCI = 65
	QCI_QCI_66 QCI = 66
	QCI_QCI_67 QCI = 67
	QCI_QCI_70 QCI = 70
	QCI_QCI_75 QCI = 75
	QCI_QCI_79 QCI = 79
)

var QCI_name = map[int32]string{
	0:  "QCI_0",
	1:  "QCI_1",
	2:  "QCI_2",
	3:  "QCI_3",
	4:  "QCI_4",
	5:  "QCI_5",
	6:  "QCI_6",
	7:  "QCI_7",
	8:  "QCI_8",
	9:  "QCI_9",
	65: "QCI_65",
	66: "QCI_66",
	67: "QCI_67",
	70: "QCI_70",
	75: "QCI_75",
	79: "QCI_79",
}

var QCI_value = map[string]int32{
	"QCI_0":  0,
	"QCI_1":  1,
	"QCI_2":  2,
	"QCI_3":  3,
	"QCI_4":  4,
	"QCI_5":  5,
	"QCI_6":  6,
	"QCI_7":  7,
	"QCI_8":  8,
	"QCI_9":  9,
	"QCI_65": 65,
	"QCI_66": 66,
	"QCI_67": 67,
	"QCI_70": 70,
	"QCI_75": 75,
	"QCI_79": 79,
}

func (x QCI) String() string {
	return proto.EnumName(QCI_name, int32(x))
}

func (QCI) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{2}
}

type ReAuthResult int32

const (
	ReAuthResult_UPDATE_INITIATED  ReAuthResult = 0
	ReAuthResult_UPDATE_NOT_NEEDED ReAuthResult = 1
	ReAuthResult_SESSION_NOT_FOUND ReAuthResult = 2
	ReAuthResult_OTHER_FAILURE     ReAuthResult = 3
)

var ReAuthResult_name = map[int32]string{
	0: "UPDATE_INITIATED",
	1: "UPDATE_NOT_NEEDED",
	2: "SESSION_NOT_FOUND",
	3: "OTHER_FAILURE",
}

var ReAuthResult_value = map[string]int32{
	"UPDATE_INITIATED":  0,
	"UPDATE_NOT_NEEDED": 1,
	"SESSION_NOT_FOUND": 2,
	"OTHER_FAILURE":     3,
}

func (x ReAuthResult) String() string {
	return proto.EnumName(ReAuthResult_name, int32(x))
}

func (ReAuthResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{3}
}

type CreditLimitType int32

const (
	CreditLimitType_FINITE             CreditLimitType = 0
	CreditLimitType_INFINITE_UNMETERED CreditLimitType = 1
	CreditLimitType_INFINITE_METERED   CreditLimitType = 2
)

var CreditLimitType_name = map[int32]string{
	0: "FINITE",
	1: "INFINITE_UNMETERED",
	2: "INFINITE_METERED",
}

var CreditLimitType_value = map[string]int32{
	"FINITE":             0,
	"INFINITE_UNMETERED": 1,
	"INFINITE_METERED":   2,
}

func (x CreditLimitType) String() string {
	return proto.EnumName(CreditLimitType_name, int32(x))
}

func (CreditLimitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{4}
}

type MonitoringLevel int32

const (
	MonitoringLevel_SESSION_LEVEL  MonitoringLevel = 0
	MonitoringLevel_PCC_RULE_LEVEL MonitoringLevel = 1
)

var MonitoringLevel_name = map[int32]string{
	0: "SESSION_LEVEL",
	1: "PCC_RULE_LEVEL",
}

var MonitoringLevel_value = map[string]int32{
	"SESSION_LEVEL":  0,
	"PCC_RULE_LEVEL": 1,
}

func (x MonitoringLevel) String() string {
	return proto.EnumName(MonitoringLevel_name, int32(x))
}

func (MonitoringLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{5}
}

//PduSessionType
type PduSessionType int32

const (
	PduSessionType_IPV4         PduSessionType = 0
	PduSessionType_IPV6         PduSessionType = 1
	PduSessionType_IPV4IPV6     PduSessionType = 2
	PduSessionType_UNSTRUCTURED PduSessionType = 3
)

var PduSessionType_name = map[int32]string{
	0: "IPV4",
	1: "IPV6",
	2: "IPV4IPV6",
	3: "UNSTRUCTURED",
}

var PduSessionType_value = map[string]int32{
	"IPV4":         0,
	"IPV6":         1,
	"IPV4IPV6":     2,
	"UNSTRUCTURED": 3,
}

func (x PduSessionType) String() string {
	return proto.EnumName(PduSessionType_name, int32(x))
}

func (PduSessionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{6}
}

//SscMode
type SscMode int32

const (
	SscMode_SSC_MODE_1 SscMode = 0
	SscMode_SSC_MODE_2 SscMode = 1
	SscMode_SSC_MODE_3 SscMode = 2
)

var SscMode_name = map[int32]string{
	0: "SSC_MODE_1",
	1: "SSC_MODE_2",
	2: "SSC_MODE_3",
}

var SscMode_value = map[string]int32{
	"SSC_MODE_1": 0,
	"SSC_MODE_2": 1,
	"SSC_MODE_3": 2,
}

func (x SscMode) String() string {
	return proto.EnumName(SscMode_name, int32(x))
}

func (SscMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{7}
}

//M5GSMCause
type M5GSMCause int32

const (
	M5GSMCause_OPERATOR_DETERMINED_BARRING                                             M5GSMCause = 0
	M5GSMCause_INSUFFICIENT_RESOURCES                                                  M5GSMCause = 1
	M5GSMCause_MISSING_OR_UNKNOWN_DNN                                                  M5GSMCause = 2
	M5GSMCause_UNKNOWN_PDU_SESSION_TYPE                                                M5GSMCause = 3
	M5GSMCause_USER_AUTHENTICATION_OR_AUTHORIZATION_FAILED                             M5GSMCause = 4
	M5GSMCause_REQUEST_REJECTED_UNSPECIFIED                                            M5GSMCause = 5
	M5GSMCause_SERVICE_OPTION_NOT_SUPPORTED                                            M5GSMCause = 6
	M5GSMCause_REQUESTED_SERVICE_OPTION_NOT_SUBSCRIBED                                 M5GSMCause = 7
	M5GSMCause_SERVICE_OPTION_TEMPORARILY_OUT_OF_ORDER                                 M5GSMCause = 8
	M5GSMCause_REGULAR_DEACTIVATION                                                    M5GSMCause = 10
	M5GSMCause_NETWORK_FAILURE                                                         M5GSMCause = 11
	M5GSMCause_REACTIVATION_REQUESTED                                                  M5GSMCause = 12
	M5GSMCause_INVALID_PDU_SESSION_IDENTITY                                            M5GSMCause = 13
	M5GSMCause_SEMANTIC_ERRORS_IN_PACKET_FILTER                                        M5GSMCause = 14
	M5GSMCause_SYNTACTICAL_ERROR_IN_PACKET_FILTER                                      M5GSMCause = 15
	M5GSMCause_OUT_OF_LADN_SERVICE_AREA                                                M5GSMCause = 16
	M5GSMCause_PTI_MISMATCH                                                            M5GSMCause = 17
	M5GSMCause_PDU_SESSION_TYPE_IPV4_ONLY_ALLOWED                                      M5GSMCause = 18
	M5GSMCause_PDU_SESSION_TYPE_IPV6_ONLY_ALLOWED                                      M5GSMCause = 19
	M5GSMCause_PDU_SESSION_DOES_NOT_EXIST                                              M5GSMCause = 20
	M5GSMCause_INSUFFICIENT_RESOURCES_FOR_SPECIFIC_SLICE_AND_DNN                       M5GSMCause = 21
	M5GSMCause_NOT_SUPPORTED_SSC_MODE                                                  M5GSMCause = 22
	M5GSMCause_INSUFFICIENT_RESOURCES_FOR_SPECIFIC_SLICE                               M5GSMCause = 23
	M5GSMCause_MISSING_OR_UNKNOWN_DNN_IN_A_SLICE                                       M5GSMCause = 24
	M5GSMCause_INVALID_PTI_VALUE                                                       M5GSMCause = 25
	M5GSMCause_MAXIMUM_DATA_RATE_PER_UE_FOR_USER_PLANE_INTEGRITY_PROTECTION_IS_TOO_LOW M5GSMCause = 26
	M5GSMCause_SEMANTIC_ERROR_IN_THE_QOS_OPERATION                                     M5GSMCause = 27
	M5GSMCause_SYNTACTICAL_ERROR_IN_THE_QOS_OPERATION                                  M5GSMCause = 28
	M5GSMCause_INVALID_MAPPED_EPS_BEARER_IDENTITY                                      M5GSMCause = 29
	M5GSMCause_SEMANTICALLY_INCORRECT_MESSAGE                                          M5GSMCause = 30
	M5GSMCause_INVALID_MANDATORY_INFORMATION                                           M5GSMCause = 31
	M5GSMCause_MESSAGE_TYPE_NON_EXISTENT_OR_NOT_IMPLEMENTED                            M5GSMCause = 32
	M5GSMCause_MESSAGE_TYPE_NOT_COMPATIBLE_WITH_THE_PROTOCOL_STATE                     M5GSMCause = 33
	M5GSMCause_INFORMATION_ELEMENT_NON_EXISTENT_OR_NOT_IMPLEMENTED                     M5GSMCause = 34
	M5GSMCause_CONDITIONAL_IE_ERROR                                                    M5GSMCause = 35
	M5GSMCause_MESSAGE_NOT_COMPATIBLE_WITH_THE_PROTOCOL_STATE                          M5GSMCause = 36
	M5GSMCause_PROTOCOL_ERROR_UNSPECIFIED                                              M5GSMCause = 37
	M5GSMCause_PTI_ALREADY_IN_USE                                                      M5GSMCause = 38
	M5GSMCause_OPERATION_SUCCESS                                                       M5GSMCause = 40
)

var M5GSMCause_name = map[int32]string{
	0:  "OPERATOR_DETERMINED_BARRING",
	1:  "INSUFFICIENT_RESOURCES",
	2:  "MISSING_OR_UNKNOWN_DNN",
	3:  "UNKNOWN_PDU_SESSION_TYPE",
	4:  "USER_AUTHENTICATION_OR_AUTHORIZATION_FAILED",
	5:  "REQUEST_REJECTED_UNSPECIFIED",
	6:  "SERVICE_OPTION_NOT_SUPPORTED",
	7:  "REQUESTED_SERVICE_OPTION_NOT_SUBSCRIBED",
	8:  "SERVICE_OPTION_TEMPORARILY_OUT_OF_ORDER",
	10: "REGULAR_DEACTIVATION",
	11: "NETWORK_FAILURE",
	12: "REACTIVATION_REQUESTED",
	13: "INVALID_PDU_SESSION_IDENTITY",
	14: "SEMANTIC_ERRORS_IN_PACKET_FILTER",
	15: "SYNTACTICAL_ERROR_IN_PACKET_FILTER",
	16: "OUT_OF_LADN_SERVICE_AREA",
	17: "PTI_MISMATCH",
	18: "PDU_SESSION_TYPE_IPV4_ONLY_ALLOWED",
	19: "PDU_SESSION_TYPE_IPV6_ONLY_ALLOWED",
	20: "PDU_SESSION_DOES_NOT_EXIST",
	21: "INSUFFICIENT_RESOURCES_FOR_SPECIFIC_SLICE_AND_DNN",
	22: "NOT_SUPPORTED_SSC_MODE",
	23: "INSUFFICIENT_RESOURCES_FOR_SPECIFIC_SLICE",
	24: "MISSING_OR_UNKNOWN_DNN_IN_A_SLICE",
	25: "INVALID_PTI_VALUE",
	26: "MAXIMUM_DATA_RATE_PER_UE_FOR_USER_PLANE_INTEGRITY_PROTECTION_IS_TOO_LOW",
	27: "SEMANTIC_ERROR_IN_THE_QOS_OPERATION",
	28: "SYNTACTICAL_ERROR_IN_THE_QOS_OPERATION",
	29: "INVALID_MAPPED_EPS_BEARER_IDENTITY",
	30: "SEMANTICALLY_INCORRECT_MESSAGE",
	31: "INVALID_MANDATORY_INFORMATION",
	32: "MESSAGE_TYPE_NON_EXISTENT_OR_NOT_IMPLEMENTED",
	33: "MESSAGE_TYPE_NOT_COMPATIBLE_WITH_THE_PROTOCOL_STATE",
	34: "INFORMATION_ELEMENT_NON_EXISTENT_OR_NOT_IMPLEMENTED",
	35: "CONDITIONAL_IE_ERROR",
	36: "MESSAGE_NOT_COMPATIBLE_WITH_THE_PROTOCOL_STATE",
	37: "PROTOCOL_ERROR_UNSPECIFIED",
	38: "PTI_ALREADY_IN_USE",
	40: "OPERATION_SUCCESS",
}

var M5GSMCause_value = map[string]int32{
	"OPERATOR_DETERMINED_BARRING":                                             0,
	"INSUFFICIENT_RESOURCES":                                                  1,
	"MISSING_OR_UNKNOWN_DNN":                                                  2,
	"UNKNOWN_PDU_SESSION_TYPE":                                                3,
	"USER_AUTHENTICATION_OR_AUTHORIZATION_FAILED":                             4,
	"REQUEST_REJECTED_UNSPECIFIED":                                            5,
	"SERVICE_OPTION_NOT_SUPPORTED":                                            6,
	"REQUESTED_SERVICE_OPTION_NOT_SUBSCRIBED":                                 7,
	"SERVICE_OPTION_TEMPORARILY_OUT_OF_ORDER":                                 8,
	"REGULAR_DEACTIVATION":                                                    10,
	"NETWORK_FAILURE":                                                         11,
	"REACTIVATION_REQUESTED":                                                  12,
	"INVALID_PDU_SESSION_IDENTITY":                                            13,
	"SEMANTIC_ERRORS_IN_PACKET_FILTER":                                        14,
	"SYNTACTICAL_ERROR_IN_PACKET_FILTER":                                      15,
	"OUT_OF_LADN_SERVICE_AREA":                                                16,
	"PTI_MISMATCH":                                                            17,
	"PDU_SESSION_TYPE_IPV4_ONLY_ALLOWED":                                      18,
	"PDU_SESSION_TYPE_IPV6_ONLY_ALLOWED":                                      19,
	"PDU_SESSION_DOES_NOT_EXIST":                                              20,
	"INSUFFICIENT_RESOURCES_FOR_SPECIFIC_SLICE_AND_DNN":                       21,
	"NOT_SUPPORTED_SSC_MODE":                                                  22,
	"INSUFFICIENT_RESOURCES_FOR_SPECIFIC_SLICE":                               23,
	"MISSING_OR_UNKNOWN_DNN_IN_A_SLICE":                                       24,
	"INVALID_PTI_VALUE":                                                       25,
	"MAXIMUM_DATA_RATE_PER_UE_FOR_USER_PLANE_INTEGRITY_PROTECTION_IS_TOO_LOW": 26,
	"SEMANTIC_ERROR_IN_THE_QOS_OPERATION":                                     27,
	"SYNTACTICAL_ERROR_IN_THE_QOS_OPERATION":                                  28,
	"INVALID_MAPPED_EPS_BEARER_IDENTITY":                                      29,
	"SEMANTICALLY_INCORRECT_MESSAGE":                                          30,
	"INVALID_MANDATORY_INFORMATION":                                           31,
	"MESSAGE_TYPE_NON_EXISTENT_OR_NOT_IMPLEMENTED":                            32,
	"MESSAGE_TYPE_NOT_COMPATIBLE_WITH_THE_PROTOCOL_STATE":                     33,
	"INFORMATION_ELEMENT_NON_EXISTENT_OR_NOT_IMPLEMENTED":                     34,
	"CONDITIONAL_IE_ERROR":                                                    35,
	"MESSAGE_NOT_COMPATIBLE_WITH_THE_PROTOCOL_STATE":                          36,
	"PROTOCOL_ERROR_UNSPECIFIED":                                              37,
	"PTI_ALREADY_IN_USE":                                                      38,
	"OPERATION_SUCCESS":                                                       40,
}

func (x M5GSMCause) String() string {
	return proto.EnumName(M5GSMCause_name, int32(x))
}

func (M5GSMCause) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{8}
}

//RequestType
type RequestType int32

const (
	RequestType_INITIAL_REQUEST                RequestType = 0
	RequestType_EXISTING_PDU_SESSION           RequestType = 1
	RequestType_INITIAL_EMERGENCY_REQUEST      RequestType = 2
	RequestType_EXISTING_EMERGENCY_PDU_SESSION RequestType = 3
	RequestType_MODIFICATION_REQUEST           RequestType = 4
)

var RequestType_name = map[int32]string{
	0: "INITIAL_REQUEST",
	1: "EXISTING_PDU_SESSION",
	2: "INITIAL_EMERGENCY_REQUEST",
	3: "EXISTING_EMERGENCY_PDU_SESSION",
	4: "MODIFICATION_REQUEST",
}

var RequestType_value = map[string]int32{
	"INITIAL_REQUEST":                0,
	"EXISTING_PDU_SESSION":           1,
	"INITIAL_EMERGENCY_REQUEST":      2,
	"EXISTING_EMERGENCY_PDU_SESSION": 3,
	"MODIFICATION_REQUEST":           4,
}

func (x RequestType) String() string {
	return proto.EnumName(RequestType_name, int32(x))
}

func (RequestType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{9}
}

//AccessType
type AccessType int32

const (
	AccessType_M_3GPP_ACCESS_3GPP AccessType = 0
	AccessType_NON_3GPP_ACCESS    AccessType = 1
)

var AccessType_name = map[int32]string{
	0: "M_3GPP_ACCESS_3GPP",
	1: "NON_3GPP_ACCESS",
}

var AccessType_value = map[string]int32{
	"M_3GPP_ACCESS_3GPP": 0,
	"NON_3GPP_ACCESS":    1,
}

func (x AccessType) String() string {
	return proto.EnumName(AccessType_name, int32(x))
}

func (AccessType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{10}
}

//DnnSelectionMode
type DnnSelectionMode int32

const (
	DnnSelectionMode_VERIFIED            DnnSelectionMode = 0
	DnnSelectionMode_UE_DNN_NOT_VERIFIED DnnSelectionMode = 1
	DnnSelectionMode_NW_DNN_NOT_VERIFIED DnnSelectionMode = 2
)

var DnnSelectionMode_name = map[int32]string{
	0: "VERIFIED",
	1: "UE_DNN_NOT_VERIFIED",
	2: "NW_DNN_NOT_VERIFIED",
}

var DnnSelectionMode_value = map[string]int32{
	"VERIFIED":            0,
	"UE_DNN_NOT_VERIFIED": 1,
	"NW_DNN_NOT_VERIFIED": 2,
}

func (x DnnSelectionMode) String() string {
	return proto.EnumName(DnnSelectionMode_name, int32(x))
}

func (DnnSelectionMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{11}
}

type TypeOfList int32

const (
	TypeOfList_LIST_OF_TACS_BELONGING_TO_ONE_PLMN_WITH_NON_CONSECUTIVE_TAC_VALUES TypeOfList = 0
	TypeOfList_LIST_OF_TACS_BELONGING_TO_ONE_PLMN_WITH_CONSECUTIVE_TAC_VALUES     TypeOfList = 1
	TypeOfList_LIST_OF_TAIS_BELONGING_TO_DIFFERENT_PLMNS                          TypeOfList = 2
)

var TypeOfList_name = map[int32]string{
	0: "LIST_OF_TACS_BELONGING_TO_ONE_PLMN_WITH_NON_CONSECUTIVE_TAC_VALUES",
	1: "LIST_OF_TACS_BELONGING_TO_ONE_PLMN_WITH_CONSECUTIVE_TAC_VALUES",
	2: "LIST_OF_TAIS_BELONGING_TO_DIFFERENT_PLMNS",
}

var TypeOfList_value = map[string]int32{
	"LIST_OF_TACS_BELONGING_TO_ONE_PLMN_WITH_NON_CONSECUTIVE_TAC_VALUES": 0,
	"LIST_OF_TACS_BELONGING_TO_ONE_PLMN_WITH_CONSECUTIVE_TAC_VALUES":     1,
	"LIST_OF_TAIS_BELONGING_TO_DIFFERENT_PLMNS":                          2,
}

func (x TypeOfList) String() string {
	return proto.EnumName(TypeOfList_name, int32(x))
}

func (TypeOfList) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{12}
}

type Priorityaccess int32

const (
	Priorityaccess_High   Priorityaccess = 0
	Priorityaccess_Normal Priorityaccess = 1
	Priorityaccess_Low    Priorityaccess = 2
)

var Priorityaccess_name = map[int32]string{
	0: "High",
	1: "Normal",
	2: "Low",
}

var Priorityaccess_value = map[string]int32{
	"High":   0,
	"Normal": 1,
	"Low":    2,
}

func (x Priorityaccess) String() string {
	return proto.EnumName(Priorityaccess_name, int32(x))
}

func (Priorityaccess) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{13}
}

type SMSessionFSMState int32

const (
	SMSessionFSMState_CREATING_0 SMSessionFSMState = 0
	SMSessionFSMState_CREATE_1   SMSessionFSMState = 1
	SMSessionFSMState_ACTIVE_2   SMSessionFSMState = 2
	SMSessionFSMState_INACTIVE_3 SMSessionFSMState = 3
	SMSessionFSMState_RELEASED_4 SMSessionFSMState = 4
)

var SMSessionFSMState_name = map[int32]string{
	0: "CREATING_0",
	1: "CREATE_1",
	2: "ACTIVE_2",
	3: "INACTIVE_3",
	4: "RELEASED_4",
}

var SMSessionFSMState_value = map[string]int32{
	"CREATING_0": 0,
	"CREATE_1":   1,
	"ACTIVE_2":   2,
	"INACTIVE_3": 3,
	"RELEASED_4": 4,
}

func (x SMSessionFSMState) String() string {
	return proto.EnumName(SMSessionFSMState_name, int32(x))
}

func (SMSessionFSMState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{14}
}

type ChargingReAuthRequest_Type int32

const (
	ChargingReAuthRequest_SINGLE_SERVICE ChargingReAuthRequest_Type = 0
	ChargingReAuthRequest_ENTIRE_SESSION ChargingReAuthRequest_Type = 1
)

var ChargingReAuthRequest_Type_name = map[int32]string{
	0: "SINGLE_SERVICE",
	1: "ENTIRE_SESSION",
}

var ChargingReAuthRequest_Type_value = map[string]int32{
	"SINGLE_SERVICE": 0,
	"ENTIRE_SESSION": 1,
}

func (x ChargingReAuthRequest_Type) String() string {
	return proto.EnumName(ChargingReAuthRequest_Type_name, int32(x))
}

func (ChargingReAuthRequest_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{17, 0}
}

type PolicyReAuthAnswer_FailureCode int32

const (
	// We want to map these directly to the diameter return codes, so use a
	// placeholder for 0
	PolicyReAuthAnswer_UNUSED                             PolicyReAuthAnswer_FailureCode = 0
	PolicyReAuthAnswer_UNKNOWN_RULE_NAME                  PolicyReAuthAnswer_FailureCode = 1
	PolicyReAuthAnswer_RATING_GROUP_ERROR                 PolicyReAuthAnswer_FailureCode = 2
	PolicyReAuthAnswer_SERVICE_IDENTIFIER_ERROR           PolicyReAuthAnswer_FailureCode = 3
	PolicyReAuthAnswer_GW_PCEF_MALFUNCTION                PolicyReAuthAnswer_FailureCode = 4
	PolicyReAuthAnswer_RESOURCES_LIMITATION               PolicyReAuthAnswer_FailureCode = 5
	PolicyReAuthAnswer_MAX_NR_BEARERS_REACHED             PolicyReAuthAnswer_FailureCode = 6
	PolicyReAuthAnswer_UNKNOWN_BEARER_ID                  PolicyReAuthAnswer_FailureCode = 7
	PolicyReAuthAnswer_MISSING_BEARER_ID                  PolicyReAuthAnswer_FailureCode = 8
	PolicyReAuthAnswer_MISSING_FLOW_INFORMATION           PolicyReAuthAnswer_FailureCode = 9
	PolicyReAuthAnswer_RESOURCE_ALLOCATION_FAILURE        PolicyReAuthAnswer_FailureCode = 10
	PolicyReAuthAnswer_UNSUCCESSFUL_QOS_VALIDATION        PolicyReAuthAnswer_FailureCode = 11
	PolicyReAuthAnswer_INCORRECT_FLOW_INFORMATION         PolicyReAuthAnswer_FailureCode = 12
	PolicyReAuthAnswer_PS_TO_CS_HANDOVER                  PolicyReAuthAnswer_FailureCode = 13
	PolicyReAuthAnswer_TDF_APPLICATION_IDENTIFIER_ERROR   PolicyReAuthAnswer_FailureCode = 14
	PolicyReAuthAnswer_NO_BEARER_FOUND                    PolicyReAuthAnswer_FailureCode = 15
	PolicyReAuthAnswer_FILTER_RESTRICTIONS                PolicyReAuthAnswer_FailureCode = 16
	PolicyReAuthAnswer_AN_GW_FAILED                       PolicyReAuthAnswer_FailureCode = 17
	PolicyReAuthAnswer_MISSING_REDIRECT_SERVER_ADDRESS    PolicyReAuthAnswer_FailureCode = 18
	PolicyReAuthAnswer_CM_END_USER_SERVICE_DENIED         PolicyReAuthAnswer_FailureCode = 19
	PolicyReAuthAnswer_CM_CREDIT_CONTROL_NOT_APPLICABLE   PolicyReAuthAnswer_FailureCode = 20
	PolicyReAuthAnswer_CM_AUTHORIZATION_REJECTED          PolicyReAuthAnswer_FailureCode = 21
	PolicyReAuthAnswer_CM_USER_UNKNOWN                    PolicyReAuthAnswer_FailureCode = 22
	PolicyReAuthAnswer_CM_RATING_FAILED                   PolicyReAuthAnswer_FailureCode = 23
	PolicyReAuthAnswer_ROUTING_RULE_REJECTION             PolicyReAuthAnswer_FailureCode = 24
	PolicyReAuthAnswer_UNKNOWN_ROUTING_ACCESS_INFORMATION PolicyReAuthAnswer_FailureCode = 25
	PolicyReAuthAnswer_NO_NBIFOM_SUPPORT                  PolicyReAuthAnswer_FailureCode = 26
)

var PolicyReAuthAnswer_FailureCode_name = map[int32]string{
	0:  "UNUSED",
	1:  "UNKNOWN_RULE_NAME",
	2:  "RATING_GROUP_ERROR",
	3:  "SERVICE_IDENTIFIER_ERROR",
	4:  "GW_PCEF_MALFUNCTION",
	5:  "RESOURCES_LIMITATION",
	6:  "MAX_NR_BEARERS_REACHED",
	7:  "UNKNOWN_BEARER_ID",
	8:  "MISSING_BEARER_ID",
	9:  "MISSING_FLOW_INFORMATION",
	10: "RESOURCE_ALLOCATION_FAILURE",
	11: "UNSUCCESSFUL_QOS_VALIDATION",
	12: "INCORRECT_FLOW_INFORMATION",
	13: "PS_TO_CS_HANDOVER",
	14: "TDF_APPLICATION_IDENTIFIER_ERROR",
	15: "NO_BEARER_FOUND",
	16: "FILTER_RESTRICTIONS",
	17: "AN_GW_FAILED",
	18: "MISSING_REDIRECT_SERVER_ADDRESS",
	19: "CM_END_USER_SERVICE_DENIED",
	20: "CM_CREDIT_CONTROL_NOT_APPLICABLE",
	21: "CM_AUTHORIZATION_REJECTED",
	22: "CM_USER_UNKNOWN",
	23: "CM_RATING_FAILED",
	24: "ROUTING_RULE_REJECTION",
	25: "UNKNOWN_ROUTING_ACCESS_INFORMATION",
	26: "NO_NBIFOM_SUPPORT",
}

var PolicyReAuthAnswer_FailureCode_value = map[string]int32{
	"UNUSED":                             0,
	"UNKNOWN_RULE_NAME":                  1,
	"RATING_GROUP_ERROR":                 2,
	"SERVICE_IDENTIFIER_ERROR":           3,
	"GW_PCEF_MALFUNCTION":                4,
	"RESOURCES_LIMITATION":               5,
	"MAX_NR_BEARERS_REACHED":             6,
	"UNKNOWN_BEARER_ID":                  7,
	"MISSING_BEARER_ID":                  8,
	"MISSING_FLOW_INFORMATION":           9,
	"RESOURCE_ALLOCATION_FAILURE":        10,
	"UNSUCCESSFUL_QOS_VALIDATION":        11,
	"INCORRECT_FLOW_INFORMATION":         12,
	"PS_TO_CS_HANDOVER":                  13,
	"TDF_APPLICATION_IDENTIFIER_ERROR":   14,
	"NO_BEARER_FOUND":                    15,
	"FILTER_RESTRICTIONS":                16,
	"AN_GW_FAILED":                       17,
	"MISSING_REDIRECT_SERVER_ADDRESS":    18,
	"CM_END_USER_SERVICE_DENIED":         19,
	"CM_CREDIT_CONTROL_NOT_APPLICABLE":   20,
	"CM_AUTHORIZATION_REJECTED":          21,
	"CM_USER_UNKNOWN":                    22,
	"CM_RATING_FAILED":                   23,
	"ROUTING_RULE_REJECTION":             24,
	"UNKNOWN_ROUTING_ACCESS_INFORMATION": 25,
	"NO_NBIFOM_SUPPORT":                  26,
}

func (x PolicyReAuthAnswer_FailureCode) String() string {
	return proto.EnumName(PolicyReAuthAnswer_FailureCode_name, int32(x))
}

func (PolicyReAuthAnswer_FailureCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{21, 0}
}

type RedirectServer_RedirectAddressType int32

const (
	RedirectServer_IPV4    RedirectServer_RedirectAddressType = 0
	RedirectServer_IPV6    RedirectServer_RedirectAddressType = 1
	RedirectServer_URL     RedirectServer_RedirectAddressType = 2
	RedirectServer_SIP_URI RedirectServer_RedirectAddressType = 3
)

var RedirectServer_RedirectAddressType_name = map[int32]string{
	0: "IPV4",
	1: "IPV6",
	2: "URL",
	3: "SIP_URI",
}

var RedirectServer_RedirectAddressType_value = map[string]int32{
	"IPV4":    0,
	"IPV6":    1,
	"URL":     2,
	"SIP_URI": 3,
}

func (x RedirectServer_RedirectAddressType) String() string {
	return proto.EnumName(RedirectServer_RedirectAddressType_name, int32(x))
}

func (RedirectServer_RedirectAddressType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{28, 0}
}

type ChargingCredit_UnitType int32

const (
	ChargingCredit_BYTES   ChargingCredit_UnitType = 0
	ChargingCredit_SECONDS ChargingCredit_UnitType = 1
)

var ChargingCredit_UnitType_name = map[int32]string{
	0: "BYTES",
	1: "SECONDS",
}

var ChargingCredit_UnitType_value = map[string]int32{
	"BYTES":   0,
	"SECONDS": 1,
}

func (x ChargingCredit_UnitType) String() string {
	return proto.EnumName(ChargingCredit_UnitType_name, int32(x))
}

func (ChargingCredit_UnitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{29, 0}
}

type ChargingCredit_FinalAction int32

const (
	ChargingCredit_TERMINATE       ChargingCredit_FinalAction = 0
	ChargingCredit_REDIRECT        ChargingCredit_FinalAction = 1
	ChargingCredit_RESTRICT_ACCESS ChargingCredit_FinalAction = 2
)

var ChargingCredit_FinalAction_name = map[int32]string{
	0: "TERMINATE",
	1: "REDIRECT",
	2: "RESTRICT_ACCESS",
}

var ChargingCredit_FinalAction_value = map[string]int32{
	"TERMINATE":       0,
	"REDIRECT":        1,
	"RESTRICT_ACCESS": 2,
}

func (x ChargingCredit_FinalAction) String() string {
	return proto.EnumName(ChargingCredit_FinalAction_name, int32(x))
}

func (ChargingCredit_FinalAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{29, 1}
}

type CreditUsage_UpdateType int32

const (
	CreditUsage_THRESHOLD CreditUsage_UpdateType = 0
	CreditUsage_QHT       CreditUsage_UpdateType = 1
	// FINAL - UE disconnected, flow not in use
	CreditUsage_TERMINATED CreditUsage_UpdateType = 2
	// UE hit credit limit
	CreditUsage_QUOTA_EXHAUSTED CreditUsage_UpdateType = 3
	// Credit expired
	CreditUsage_VALIDITY_TIMER_EXPIRED  CreditUsage_UpdateType = 4
	CreditUsage_OTHER_QUOTA_TYPE        CreditUsage_UpdateType = 5
	CreditUsage_RATING_CONDITION_CHANGE CreditUsage_UpdateType = 6
	// FORCED_REAUTHORISATION
	CreditUsage_REAUTH_REQUIRED CreditUsage_UpdateType = 7
	CreditUsage_POOL_EXHAUSTED  CreditUsage_UpdateType = 8
)

var CreditUsage_UpdateType_name = map[int32]string{
	0: "THRESHOLD",
	1: "QHT",
	2: "TERMINATED",
	3: "QUOTA_EXHAUSTED",
	4: "VALIDITY_TIMER_EXPIRED",
	5: "OTHER_QUOTA_TYPE",
	6: "RATING_CONDITION_CHANGE",
	7: "REAUTH_REQUIRED",
	8: "POOL_EXHAUSTED",
}

var CreditUsage_UpdateType_value = map[string]int32{
	"THRESHOLD":               0,
	"QHT":                     1,
	"TERMINATED":              2,
	"QUOTA_EXHAUSTED":         3,
	"VALIDITY_TIMER_EXPIRED":  4,
	"OTHER_QUOTA_TYPE":        5,
	"RATING_CONDITION_CHANGE": 6,
	"REAUTH_REQUIRED":         7,
	"POOL_EXHAUSTED":          8,
}

func (x CreditUsage_UpdateType) String() string {
	return proto.EnumName(CreditUsage_UpdateType_name, int32(x))
}

func (CreditUsage_UpdateType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{31, 0}
}

type UsageMonitoringCredit_Action int32

const (
	// continue monitoring as normal
	UsageMonitoringCredit_CONTINUE UsageMonitoringCredit_Action = 0
	// no need to monitor any more  `AVP: Usage-Monitor-Support`
	UsageMonitoringCredit_DISABLE UsageMonitoringCredit_Action = 1
	// monitor no matter if credit is exhausted `AVP: Usage-Monitor-Report` TODO: not implemented on sessiond
	UsageMonitoringCredit_FORCE UsageMonitoringCredit_Action = 2
)

var UsageMonitoringCredit_Action_name = map[int32]string{
	0: "CONTINUE",
	1: "DISABLE",
	2: "FORCE",
}

var UsageMonitoringCredit_Action_value = map[string]int32{
	"CONTINUE": 0,
	"DISABLE":  1,
	"FORCE":    2,
}

func (x UsageMonitoringCredit_Action) String() string {
	return proto.EnumName(UsageMonitoringCredit_Action_name, int32(x))
}

func (UsageMonitoringCredit_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{35, 0}
}

type QosInformationRequest_BitrateUnitsAMBR int32

const (
	QosInformationRequest_BPS  QosInformationRequest_BitrateUnitsAMBR = 0
	QosInformationRequest_KBPS QosInformationRequest_BitrateUnitsAMBR = 1
)

var QosInformationRequest_BitrateUnitsAMBR_name = map[int32]string{
	0: "BPS",
	1: "KBPS",
}

var QosInformationRequest_BitrateUnitsAMBR_value = map[string]int32{
	"BPS":  0,
	"KBPS": 1,
}

func (x QosInformationRequest_BitrateUnitsAMBR) String() string {
	return proto.EnumName(QosInformationRequest_BitrateUnitsAMBR_name, int32(x))
}

func (QosInformationRequest_BitrateUnitsAMBR) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{38, 0}
}

type NodeID_NodeIDType int32

const (
	NodeID_IPv4 NodeID_NodeIDType = 0
	NodeID_IPv6 NodeID_NodeIDType = 1
	NodeID_FQDN NodeID_NodeIDType = 2
)

var NodeID_NodeIDType_name = map[int32]string{
	0: "IPv4",
	1: "IPv6",
	2: "FQDN",
}

var NodeID_NodeIDType_value = map[string]int32{
	"IPv4": 0,
	"IPv6": 1,
	"FQDN": 2,
}

func (x NodeID_NodeIDType) String() string {
	return proto.EnumName(NodeID_NodeIDType_name, int32(x))
}

func (NodeID_NodeIDType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{48, 0}
}

type UserPlaneIPResourceSchema_InterfaceValue int32

const (
	UserPlaneIPResourceSchema_ACCESS      UserPlaneIPResourceSchema_InterfaceValue = 0
	UserPlaneIPResourceSchema_CORE        UserPlaneIPResourceSchema_InterfaceValue = 1
	UserPlaneIPResourceSchema_LAN         UserPlaneIPResourceSchema_InterfaceValue = 2
	UserPlaneIPResourceSchema_CP_FUNCTION UserPlaneIPResourceSchema_InterfaceValue = 3
)

var UserPlaneIPResourceSchema_InterfaceValue_name = map[int32]string{
	0: "ACCESS",
	1: "CORE",
	2: "LAN",
	3: "CP_FUNCTION",
}

var UserPlaneIPResourceSchema_InterfaceValue_value = map[string]int32{
	"ACCESS":      0,
	"CORE":        1,
	"LAN":         2,
	"CP_FUNCTION": 3,
}

func (x UserPlaneIPResourceSchema_InterfaceValue) String() string {
	return proto.EnumName(UserPlaneIPResourceSchema_InterfaceValue_name, int32(x))
}

func (UserPlaneIPResourceSchema_InterfaceValue) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{60, 0}
}

type UPFAssociationState_AssociationState int32

const (
	UPFAssociationState_STARTED     UPFAssociationState_AssociationState = 0
	UPFAssociationState_INITIATED   UPFAssociationState_AssociationState = 1
	UPFAssociationState_ESTABLISHED UPFAssociationState_AssociationState = 2
	UPFAssociationState_MODIFIED    UPFAssociationState_AssociationState = 3
	UPFAssociationState_RELEASE     UPFAssociationState_AssociationState = 4
)

var UPFAssociationState_AssociationState_name = map[int32]string{
	0: "STARTED",
	1: "INITIATED",
	2: "ESTABLISHED",
	3: "MODIFIED",
	4: "RELEASE",
}

var UPFAssociationState_AssociationState_value = map[string]int32{
	"STARTED":     0,
	"INITIATED":   1,
	"ESTABLISHED": 2,
	"MODIFIED":    3,
	"RELEASE":     4,
}

func (x UPFAssociationState_AssociationState) String() string {
	return proto.EnumName(UPFAssociationState_AssociationState_name, int32(x))
}

func (UPFAssociationState_AssociationState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{61, 0}
}

type RuleRecord struct {
	// IMSI. This value along with teid uniquely identifies a session.
	Sid     string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	RuleId  string `protobuf:"bytes,2,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	BytesTx uint64 `protobuf:"varint,3,opt,name=bytes_tx,json=bytesTx,proto3" json:"bytes_tx,omitempty"`
	BytesRx uint64 `protobuf:"varint,4,opt,name=bytes_rx,json=bytesRx,proto3" json:"bytes_rx,omitempty"`
	// Used for HE
	UeIpv4 string `protobuf:"bytes,5,opt,name=ue_ipv4,json=ueIpv4,proto3" json:"ue_ipv4,omitempty"`
	// Used for HE
	UeIpv6    string `protobuf:"bytes,6,opt,name=ue_ipv6,json=ueIpv6,proto3" json:"ue_ipv6,omitempty"`
	DroppedTx uint64 `protobuf:"varint,7,opt,name=dropped_tx,json=droppedTx,proto3" json:"dropped_tx,omitempty"`
	DroppedRx uint64 `protobuf:"varint,8,opt,name=dropped_rx,json=droppedRx,proto3" json:"dropped_rx,omitempty"`
	// Rule version with which the flow was installed with
	RuleVersion uint64 `protobuf:"varint,9,opt,name=rule_version,json=ruleVersion,proto3" json:"rule_version,omitempty"`
	// Uplink TEID
	Teid uint32 `protobuf:"varint,10,opt,name=teid,proto3" json:"teid,omitempty"`
	//Indicates that the report is final and the flow will be deleted
	FinalRecord          bool     `protobuf:"varint,11,opt,name=final_record,json=finalRecord,proto3" json:"final_record,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RuleRecord) Reset()         { *m = RuleRecord{} }
func (m *RuleRecord) String() string { return proto.CompactTextString(m) }
func (*RuleRecord) ProtoMessage()    {}
func (*RuleRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{0}
}

func (m *RuleRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RuleRecord.Unmarshal(m, b)
}
func (m *RuleRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RuleRecord.Marshal(b, m, deterministic)
}
func (m *RuleRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleRecord.Merge(m, src)
}
func (m *RuleRecord) XXX_Size() int {
	return xxx_messageInfo_RuleRecord.Size(m)
}
func (m *RuleRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleRecord.DiscardUnknown(m)
}

var xxx_messageInfo_RuleRecord proto.InternalMessageInfo

func (m *RuleRecord) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *RuleRecord) GetRuleId() string {
	if m != nil {
		return m.RuleId
	}
	return ""
}

func (m *RuleRecord) GetBytesTx() uint64 {
	if m != nil {
		return m.BytesTx
	}
	return 0
}

func (m *RuleRecord) GetBytesRx() uint64 {
	if m != nil {
		return m.BytesRx
	}
	return 0
}

func (m *RuleRecord) GetUeIpv4() string {
	if m != nil {
		return m.UeIpv4
	}
	return ""
}

func (m *RuleRecord) GetUeIpv6() string {
	if m != nil {
		return m.UeIpv6
	}
	return ""
}

func (m *RuleRecord) GetDroppedTx() uint64 {
	if m != nil {
		return m.DroppedTx
	}
	return 0
}

func (m *RuleRecord) GetDroppedRx() uint64 {
	if m != nil {
		return m.DroppedRx
	}
	return 0
}

func (m *RuleRecord) GetRuleVersion() uint64 {
	if m != nil {
		return m.RuleVersion
	}
	return 0
}

func (m *RuleRecord) GetTeid() uint32 {
	if m != nil {
		return m.Teid
	}
	return 0
}

func (m *RuleRecord) GetFinalRecord() bool {
	if m != nil {
		return m.FinalRecord
	}
	return false
}

type RuleRecordTable struct {
	Records []*RuleRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	// Time at which PipelineD started
	Epoch                uint64   `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RuleRecordTable) Reset()         { *m = RuleRecordTable{} }
func (m *RuleRecordTable) String() string { return proto.CompactTextString(m) }
func (*RuleRecordTable) ProtoMessage()    {}
func (*RuleRecordTable) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{1}
}

func (m *RuleRecordTable) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RuleRecordTable.Unmarshal(m, b)
}
func (m *RuleRecordTable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RuleRecordTable.Marshal(b, m, deterministic)
}
func (m *RuleRecordTable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleRecordTable.Merge(m, src)
}
func (m *RuleRecordTable) XXX_Size() int {
	return xxx_messageInfo_RuleRecordTable.Size(m)
}
func (m *RuleRecordTable) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleRecordTable.DiscardUnknown(m)
}

var xxx_messageInfo_RuleRecordTable proto.InternalMessageInfo

func (m *RuleRecordTable) GetRecords() []*RuleRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *RuleRecordTable) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

type LocalCreateSessionRequest struct {
	CommonContext        *CommonSessionContext `protobuf:"bytes,16,opt,name=common_context,json=commonContext,proto3" json:"common_context,omitempty"`
	RatSpecificContext   *RatSpecificContext   `protobuf:"bytes,17,opt,name=rat_specific_context,json=ratSpecificContext,proto3" json:"rat_specific_context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *LocalCreateSessionRequest) Reset()         { *m = LocalCreateSessionRequest{} }
func (m *LocalCreateSessionRequest) String() string { return proto.CompactTextString(m) }
func (*LocalCreateSessionRequest) ProtoMessage()    {}
func (*LocalCreateSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{2}
}

func (m *LocalCreateSessionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LocalCreateSessionRequest.Unmarshal(m, b)
}
func (m *LocalCreateSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LocalCreateSessionRequest.Marshal(b, m, deterministic)
}
func (m *LocalCreateSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalCreateSessionRequest.Merge(m, src)
}
func (m *LocalCreateSessionRequest) XXX_Size() int {
	return xxx_messageInfo_LocalCreateSessionRequest.Size(m)
}
func (m *LocalCreateSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalCreateSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LocalCreateSessionRequest proto.InternalMessageInfo

func (m *LocalCreateSessionRequest) GetCommonContext() *CommonSessionContext {
	if m != nil {
		return m.CommonContext
	}
	return nil
}

func (m *LocalCreateSessionRequest) GetRatSpecificContext() *RatSpecificContext {
	if m != nil {
		return m.RatSpecificContext
	}
	return nil
}

type Teids struct {
	EnbTeid              uint32   `protobuf:"varint,3,opt,name=enb_teid,json=enbTeid,proto3" json:"enb_teid,omitempty"`
	AgwTeid              uint32   `protobuf:"varint,4,opt,name=agw_teid,json=agwTeid,proto3" json:"agw_teid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Teids) Reset()         { *m = Teids{} }
func (m *Teids) String() string { return proto.CompactTextString(m) }
func (*Teids) ProtoMessage()    {}
func (*Teids) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{3}
}

func (m *Teids) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Teids.Unmarshal(m, b)
}
func (m *Teids) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Teids.Marshal(b, m, deterministic)
}
func (m *Teids) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Teids.Merge(m, src)
}
func (m *Teids) XXX_Size() int {
	return xxx_messageInfo_Teids.Size(m)
}
func (m *Teids) XXX_DiscardUnknown() {
	xxx_messageInfo_Teids.DiscardUnknown(m)
}

var xxx_messageInfo_Teids proto.InternalMessageInfo

func (m *Teids) GetEnbTeid() uint32 {
	if m != nil {
		return m.EnbTeid
	}
	return 0
}

func (m *Teids) GetAgwTeid() uint32 {
	if m != nil {
		return m.AgwTeid
	}
	return 0
}

type CommonSessionContext struct {
	Sid     *SubscriberID `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	UeIpv4  string        `protobuf:"bytes,3,opt,name=ue_ipv4,json=ueIpv4,proto3" json:"ue_ipv4,omitempty"`
	Apn     string        `protobuf:"bytes,4,opt,name=apn,proto3" json:"apn,omitempty"`
	Msisdn  []byte        `protobuf:"bytes,5,opt,name=msisdn,proto3" json:"msisdn,omitempty"`
	RatType RATType       `protobuf:"varint,6,opt,name=rat_type,json=ratType,proto3,enum=magma.lte.RATType" json:"rat_type,omitempty"`
	// PDU session state to mirror with AMF or MME
	SmSessionState   SMSessionFSMState `protobuf:"varint,7,opt,name=sm_session_state,json=smSessionState,proto3,enum=magma.lte.SMSessionFSMState" json:"sm_session_state,omitempty"`
	SmSessionVersion uint32            `protobuf:"varint,9,opt,name=sm_session_version,json=smSessionVersion,proto3" json:"sm_session_version,omitempty"`
	UeIpv6           string            `protobuf:"bytes,10,opt,name=ue_ipv6,json=ueIpv6,proto3" json:"ue_ipv6,omitempty"`
	// TEIDs corresponding to the default bearer
	Teids                *Teids   `protobuf:"bytes,11,opt,name=teids,proto3" json:"teids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonSessionContext) Reset()         { *m = CommonSessionContext{} }
func (m *CommonSessionContext) String() string { return proto.CompactTextString(m) }
func (*CommonSessionContext) ProtoMessage()    {}
func (*CommonSessionContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{4}
}

func (m *CommonSessionContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommonSessionContext.Unmarshal(m, b)
}
func (m *CommonSessionContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommonSessionContext.Marshal(b, m, deterministic)
}
func (m *CommonSessionContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonSessionContext.Merge(m, src)
}
func (m *CommonSessionContext) XXX_Size() int {
	return xxx_messageInfo_CommonSessionContext.Size(m)
}
func (m *CommonSessionContext) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonSessionContext.DiscardUnknown(m)
}

var xxx_messageInfo_CommonSessionContext proto.InternalMessageInfo

func (m *CommonSessionContext) GetSid() *SubscriberID {
	if m != nil {
		return m.Sid
	}
	return nil
}

func (m *CommonSessionContext) GetUeIpv4() string {
	if m != nil {
		return m.UeIpv4
	}
	return ""
}

func (m *CommonSessionContext) GetApn() string {
	if m != nil {
		return m.Apn
	}
	return ""
}

func (m *CommonSessionContext) GetMsisdn() []byte {
	if m != nil {
		return m.Msisdn
	}
	return nil
}

func (m *CommonSessionContext) GetRatType() RATType {
	if m != nil {
		return m.RatType
	}
	return RATType_TGPP_LTE
}

func (m *CommonSessionContext) GetSmSessionState() SMSessionFSMState {
	if m != nil {
		return m.SmSessionState
	}
	return SMSessionFSMState_CREATING_0
}

func (m *CommonSessionContext) GetSmSessionVersion() uint32 {
	if m != nil {
		return m.SmSessionVersion
	}
	return 0
}

func (m *CommonSessionContext) GetUeIpv6() string {
	if m != nil {
		return m.UeIpv6
	}
	return ""
}

func (m *CommonSessionContext) GetTeids() *Teids {
	if m != nil {
		return m.Teids
	}
	return nil
}

type RatSpecificContext struct {
	// Types that are valid to be assigned to Context:
	//	*RatSpecificContext_LteContext
	//	*RatSpecificContext_WlanContext
	//	*RatSpecificContext_M5GsmSessionContext
	Context              isRatSpecificContext_Context `protobuf_oneof:"context"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *RatSpecificContext) Reset()         { *m = RatSpecificContext{} }
func (m *RatSpecificContext) String() string { return proto.CompactTextString(m) }
func (*RatSpecificContext) ProtoMessage()    {}
func (*RatSpecificContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{5}
}

func (m *RatSpecificContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RatSpecificContext.Unmarshal(m, b)
}
func (m *RatSpecificContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RatSpecificContext.Marshal(b, m, deterministic)
}
func (m *RatSpecificContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RatSpecificContext.Merge(m, src)
}
func (m *RatSpecificContext) XXX_Size() int {
	return xxx_messageInfo_RatSpecificContext.Size(m)
}
func (m *RatSpecificContext) XXX_DiscardUnknown() {
	xxx_messageInfo_RatSpecificContext.DiscardUnknown(m)
}

var xxx_messageInfo_RatSpecificContext proto.InternalMessageInfo

type isRatSpecificContext_Context interface {
	isRatSpecificContext_Context()
}

type RatSpecificContext_LteContext struct {
	LteContext *LTESessionContext `protobuf:"bytes,17,opt,name=lte_context,json=lteContext,proto3,oneof"`
}

type RatSpecificContext_WlanContext struct {
	WlanContext *WLANSessionContext `protobuf:"bytes,18,opt,name=wlan_context,json=wlanContext,proto3,oneof"`
}

type RatSpecificContext_M5GsmSessionContext struct {
	M5GsmSessionContext *M5GSMSessionContext `protobuf:"bytes,19,opt,name=m5gsm_session_context,json=m5gsmSessionContext,proto3,oneof"`
}

func (*RatSpecificContext_LteContext) isRatSpecificContext_Context() {}

func (*RatSpecificContext_WlanContext) isRatSpecificContext_Context() {}

func (*RatSpecificContext_M5GsmSessionContext) isRatSpecificContext_Context() {}

func (m *RatSpecificContext) GetContext() isRatSpecificContext_Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *RatSpecificContext) GetLteContext() *LTESessionContext {
	if x, ok := m.GetContext().(*RatSpecificContext_LteContext); ok {
		return x.LteContext
	}
	return nil
}

func (m *RatSpecificContext) GetWlanContext() *WLANSessionContext {
	if x, ok := m.GetContext().(*RatSpecificContext_WlanContext); ok {
		return x.WlanContext
	}
	return nil
}

func (m *RatSpecificContext) GetM5GsmSessionContext() *M5GSMSessionContext {
	if x, ok := m.GetContext().(*RatSpecificContext_M5GsmSessionContext); ok {
		return x.M5GsmSessionContext
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RatSpecificContext) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RatSpecificContext_LteContext)(nil),
		(*RatSpecificContext_WlanContext)(nil),
		(*RatSpecificContext_M5GsmSessionContext)(nil),
	}
}

type RatSpecificNotification struct {
	// One byte
	PduSessionId         []byte           `protobuf:"bytes,1,opt,name=pdu_session_id,json=pduSessionId,proto3" json:"pdu_session_id,omitempty"`
	RequestType          RequestType      `protobuf:"varint,2,opt,name=request_type,json=requestType,proto3,enum=magma.lte.RequestType" json:"request_type,omitempty"`
	AccessType           AccessType       `protobuf:"varint,3,opt,name=access_type,json=accessType,proto3,enum=magma.lte.AccessType" json:"access_type,omitempty"`
	PduSessionType       PduSessionType   `protobuf:"varint,4,opt,name=pdu_session_type,json=pduSessionType,proto3,enum=magma.lte.PduSessionType" json:"pdu_session_type,omitempty"`
	M5GSmCapability      *M5GSMCapability `protobuf:"bytes,5,opt,name=m5g_sm_capability,json=m5gSmCapability,proto3" json:"m5g_sm_capability,omitempty"`
	M5GsmCause           M5GSMCause       `protobuf:"varint,6,opt,name=m5gsm_cause,json=m5gsmCause,proto3,enum=magma.lte.M5GSMCause" json:"m5gsm_cause,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RatSpecificNotification) Reset()         { *m = RatSpecificNotification{} }
func (m *RatSpecificNotification) String() string { return proto.CompactTextString(m) }
func (*RatSpecificNotification) ProtoMessage()    {}
func (*RatSpecificNotification) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{6}
}

func (m *RatSpecificNotification) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RatSpecificNotification.Unmarshal(m, b)
}
func (m *RatSpecificNotification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RatSpecificNotification.Marshal(b, m, deterministic)
}
func (m *RatSpecificNotification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RatSpecificNotification.Merge(m, src)
}
func (m *RatSpecificNotification) XXX_Size() int {
	return xxx_messageInfo_RatSpecificNotification.Size(m)
}
func (m *RatSpecificNotification) XXX_DiscardUnknown() {
	xxx_messageInfo_RatSpecificNotification.DiscardUnknown(m)
}

var xxx_messageInfo_RatSpecificNotification proto.InternalMessageInfo

func (m *RatSpecificNotification) GetPduSessionId() []byte {
	if m != nil {
		return m.PduSessionId
	}
	return nil
}

func (m *RatSpecificNotification) GetRequestType() RequestType {
	if m != nil {
		return m.RequestType
	}
	return RequestType_INITIAL_REQUEST
}

func (m *RatSpecificNotification) GetAccessType() AccessType {
	if m != nil {
		return m.AccessType
	}
	return AccessType_M_3GPP_ACCESS_3GPP
}

func (m *RatSpecificNotification) GetPduSessionType() PduSessionType {
	if m != nil {
		return m.PduSessionType
	}
	return PduSessionType_IPV4
}

func (m *RatSpecificNotification) GetM5GSmCapability() *M5GSMCapability {
	if m != nil {
		return m.M5GSmCapability
	}
	return nil
}

func (m *RatSpecificNotification) GetM5GsmCause() M5GSMCause {
	if m != nil {
		return m.M5GsmCause
	}
	return M5GSMCause_OPERATOR_DETERMINED_BARRING
}

type SetSmNotificationContext struct {
	// Common message for 4g, 5g and WiFi.
	CommonContext           *CommonSessionContext    `protobuf:"bytes,1,opt,name=common_context,json=commonContext,proto3" json:"common_context,omitempty"`
	RatSpecificNotification *RatSpecificNotification `protobuf:"bytes,2,opt,name=rat_specific_notification,json=ratSpecificNotification,proto3" json:"rat_specific_notification,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}                 `json:"-"`
	XXX_unrecognized        []byte                   `json:"-"`
	XXX_sizecache           int32                    `json:"-"`
}

func (m *SetSmNotificationContext) Reset()         { *m = SetSmNotificationContext{} }
func (m *SetSmNotificationContext) String() string { return proto.CompactTextString(m) }
func (*SetSmNotificationContext) ProtoMessage()    {}
func (*SetSmNotificationContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{7}
}

func (m *SetSmNotificationContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetSmNotificationContext.Unmarshal(m, b)
}
func (m *SetSmNotificationContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetSmNotificationContext.Marshal(b, m, deterministic)
}
func (m *SetSmNotificationContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetSmNotificationContext.Merge(m, src)
}
func (m *SetSmNotificationContext) XXX_Size() int {
	return xxx_messageInfo_SetSmNotificationContext.Size(m)
}
func (m *SetSmNotificationContext) XXX_DiscardUnknown() {
	xxx_messageInfo_SetSmNotificationContext.DiscardUnknown(m)
}

var xxx_messageInfo_SetSmNotificationContext proto.InternalMessageInfo

func (m *SetSmNotificationContext) GetCommonContext() *CommonSessionContext {
	if m != nil {
		return m.CommonContext
	}
	return nil
}

func (m *SetSmNotificationContext) GetRatSpecificNotification() *RatSpecificNotification {
	if m != nil {
		return m.RatSpecificNotification
	}
	return nil
}

type LTESessionContext struct {
	SpgwIpv4     string                 `protobuf:"bytes,1,opt,name=spgw_ipv4,json=spgwIpv4,proto3" json:"spgw_ipv4,omitempty"`
	Imei         string                 `protobuf:"bytes,2,opt,name=imei,proto3" json:"imei,omitempty"`
	PlmnId       string                 `protobuf:"bytes,3,opt,name=plmn_id,json=plmnId,proto3" json:"plmn_id,omitempty"`
	ImsiPlmnId   string                 `protobuf:"bytes,4,opt,name=imsi_plmn_id,json=imsiPlmnId,proto3" json:"imsi_plmn_id,omitempty"`
	UserLocation []byte                 `protobuf:"bytes,5,opt,name=user_location,json=userLocation,proto3" json:"user_location,omitempty"`
	QosInfo      *QosInformationRequest `protobuf:"bytes,6,opt,name=qos_info,json=qosInfo,proto3" json:"qos_info,omitempty"`
	BearerId     uint32                 `protobuf:"varint,7,opt,name=bearer_id,json=bearerId,proto3" json:"bearer_id,omitempty"`
	// Taken from S6A UpdateLocationAnswer
	ChargingCharacteristics string   `protobuf:"bytes,8,opt,name=charging_characteristics,json=chargingCharacteristics,proto3" json:"charging_characteristics,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *LTESessionContext) Reset()         { *m = LTESessionContext{} }
func (m *LTESessionContext) String() string { return proto.CompactTextString(m) }
func (*LTESessionContext) ProtoMessage()    {}
func (*LTESessionContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{8}
}

func (m *LTESessionContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LTESessionContext.Unmarshal(m, b)
}
func (m *LTESessionContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LTESessionContext.Marshal(b, m, deterministic)
}
func (m *LTESessionContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LTESessionContext.Merge(m, src)
}
func (m *LTESessionContext) XXX_Size() int {
	return xxx_messageInfo_LTESessionContext.Size(m)
}
func (m *LTESessionContext) XXX_DiscardUnknown() {
	xxx_messageInfo_LTESessionContext.DiscardUnknown(m)
}

var xxx_messageInfo_LTESessionContext proto.InternalMessageInfo

func (m *LTESessionContext) GetSpgwIpv4() string {
	if m != nil {
		return m.SpgwIpv4
	}
	return ""
}

func (m *LTESessionContext) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

func (m *LTESessionContext) GetPlmnId() string {
	if m != nil {
		return m.PlmnId
	}
	return ""
}

func (m *LTESessionContext) GetImsiPlmnId() string {
	if m != nil {
		return m.ImsiPlmnId
	}
	return ""
}

func (m *LTESessionContext) GetUserLocation() []byte {
	if m != nil {
		return m.UserLocation
	}
	return nil
}

func (m *LTESessionContext) GetQosInfo() *QosInformationRequest {
	if m != nil {
		return m.QosInfo
	}
	return nil
}

func (m *LTESessionContext) GetBearerId() uint32 {
	if m != nil {
		return m.BearerId
	}
	return 0
}

func (m *LTESessionContext) GetChargingCharacteristics() string {
	if m != nil {
		return m.ChargingCharacteristics
	}
	return ""
}

type WLANSessionContext struct {
	MacAddrBinary        []byte   `protobuf:"bytes,1,opt,name=mac_addr_binary,json=macAddrBinary,proto3" json:"mac_addr_binary,omitempty"`
	MacAddr              string   `protobuf:"bytes,2,opt,name=mac_addr,json=macAddr,proto3" json:"mac_addr,omitempty"`
	RadiusSessionId      string   `protobuf:"bytes,3,opt,name=radius_session_id,json=radiusSessionId,proto3" json:"radius_session_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WLANSessionContext) Reset()         { *m = WLANSessionContext{} }
func (m *WLANSessionContext) String() string { return proto.CompactTextString(m) }
func (*WLANSessionContext) ProtoMessage()    {}
func (*WLANSessionContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{9}
}

func (m *WLANSessionContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WLANSessionContext.Unmarshal(m, b)
}
func (m *WLANSessionContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WLANSessionContext.Marshal(b, m, deterministic)
}
func (m *WLANSessionContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WLANSessionContext.Merge(m, src)
}
func (m *WLANSessionContext) XXX_Size() int {
	return xxx_messageInfo_WLANSessionContext.Size(m)
}
func (m *WLANSessionContext) XXX_DiscardUnknown() {
	xxx_messageInfo_WLANSessionContext.DiscardUnknown(m)
}

var xxx_messageInfo_WLANSessionContext proto.InternalMessageInfo

func (m *WLANSessionContext) GetMacAddrBinary() []byte {
	if m != nil {
		return m.MacAddrBinary
	}
	return nil
}

func (m *WLANSessionContext) GetMacAddr() string {
	if m != nil {
		return m.MacAddr
	}
	return ""
}

func (m *WLANSessionContext) GetRadiusSessionId() string {
	if m != nil {
		return m.RadiusSessionId
	}
	return ""
}

type LocalCreateSessionResponse struct {
	SessionId            string   `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LocalCreateSessionResponse) Reset()         { *m = LocalCreateSessionResponse{} }
func (m *LocalCreateSessionResponse) String() string { return proto.CompactTextString(m) }
func (*LocalCreateSessionResponse) ProtoMessage()    {}
func (*LocalCreateSessionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{10}
}

func (m *LocalCreateSessionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LocalCreateSessionResponse.Unmarshal(m, b)
}
func (m *LocalCreateSessionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LocalCreateSessionResponse.Marshal(b, m, deterministic)
}
func (m *LocalCreateSessionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalCreateSessionResponse.Merge(m, src)
}
func (m *LocalCreateSessionResponse) XXX_Size() int {
	return xxx_messageInfo_LocalCreateSessionResponse.Size(m)
}
func (m *LocalCreateSessionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalCreateSessionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LocalCreateSessionResponse proto.InternalMessageInfo

func (m *LocalCreateSessionResponse) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

type LocalEndSessionRequest struct {
	Sid                  *SubscriberID `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	Apn                  string        `protobuf:"bytes,2,opt,name=apn,proto3" json:"apn,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *LocalEndSessionRequest) Reset()         { *m = LocalEndSessionRequest{} }
func (m *LocalEndSessionRequest) String() string { return proto.CompactTextString(m) }
func (*LocalEndSessionRequest) ProtoMessage()    {}
func (*LocalEndSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{11}
}

func (m *LocalEndSessionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LocalEndSessionRequest.Unmarshal(m, b)
}
func (m *LocalEndSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LocalEndSessionRequest.Marshal(b, m, deterministic)
}
func (m *LocalEndSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalEndSessionRequest.Merge(m, src)
}
func (m *LocalEndSessionRequest) XXX_Size() int {
	return xxx_messageInfo_LocalEndSessionRequest.Size(m)
}
func (m *LocalEndSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalEndSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LocalEndSessionRequest proto.InternalMessageInfo

func (m *LocalEndSessionRequest) GetSid() *SubscriberID {
	if m != nil {
		return m.Sid
	}
	return nil
}

func (m *LocalEndSessionRequest) GetApn() string {
	if m != nil {
		return m.Apn
	}
	return ""
}

type LocalEndSessionResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LocalEndSessionResponse) Reset()         { *m = LocalEndSessionResponse{} }
func (m *LocalEndSessionResponse) String() string { return proto.CompactTextString(m) }
func (*LocalEndSessionResponse) ProtoMessage()    {}
func (*LocalEndSessionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{12}
}

func (m *LocalEndSessionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LocalEndSessionResponse.Unmarshal(m, b)
}
func (m *LocalEndSessionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LocalEndSessionResponse.Marshal(b, m, deterministic)
}
func (m *LocalEndSessionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalEndSessionResponse.Merge(m, src)
}
func (m *LocalEndSessionResponse) XXX_Size() int {
	return xxx_messageInfo_LocalEndSessionResponse.Size(m)
}
func (m *LocalEndSessionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalEndSessionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LocalEndSessionResponse proto.InternalMessageInfo

type UpdateTunnelIdsRequest struct {
	Sid *SubscriberID `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	// default bearerID
	BearerId uint32 `protobuf:"varint,2,opt,name=bearer_id,json=bearerId,proto3" json:"bearer_id,omitempty"`
	// TEID for default bearerID
	EnbTeid uint32 `protobuf:"varint,3,opt,name=enb_teid,json=enbTeid,proto3" json:"enb_teid,omitempty"`
	// TEID for default bearerID
	AgwTeid              uint32   `protobuf:"varint,4,opt,name=agw_teid,json=agwTeid,proto3" json:"agw_teid,omitempty"`
	SessionId            string   `protobuf:"bytes,5,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateTunnelIdsRequest) Reset()         { *m = UpdateTunnelIdsRequest{} }
func (m *UpdateTunnelIdsRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateTunnelIdsRequest) ProtoMessage()    {}
func (*UpdateTunnelIdsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{13}
}

func (m *UpdateTunnelIdsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateTunnelIdsRequest.Unmarshal(m, b)
}
func (m *UpdateTunnelIdsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateTunnelIdsRequest.Marshal(b, m, deterministic)
}
func (m *UpdateTunnelIdsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTunnelIdsRequest.Merge(m, src)
}
func (m *UpdateTunnelIdsRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateTunnelIdsRequest.Size(m)
}
func (m *UpdateTunnelIdsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTunnelIdsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTunnelIdsRequest proto.InternalMessageInfo

func (m *UpdateTunnelIdsRequest) GetSid() *SubscriberID {
	if m != nil {
		return m.Sid
	}
	return nil
}

func (m *UpdateTunnelIdsRequest) GetBearerId() uint32 {
	if m != nil {
		return m.BearerId
	}
	return 0
}

func (m *UpdateTunnelIdsRequest) GetEnbTeid() uint32 {
	if m != nil {
		return m.EnbTeid
	}
	return 0
}

func (m *UpdateTunnelIdsRequest) GetAgwTeid() uint32 {
	if m != nil {
		return m.AgwTeid
	}
	return 0
}

func (m *UpdateTunnelIdsRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

type UpdateTunnelIdsResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateTunnelIdsResponse) Reset()         { *m = UpdateTunnelIdsResponse{} }
func (m *UpdateTunnelIdsResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateTunnelIdsResponse) ProtoMessage()    {}
func (*UpdateTunnelIdsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{14}
}

func (m *UpdateTunnelIdsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateTunnelIdsResponse.Unmarshal(m, b)
}
func (m *UpdateTunnelIdsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateTunnelIdsResponse.Marshal(b, m, deterministic)
}
func (m *UpdateTunnelIdsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTunnelIdsResponse.Merge(m, src)
}
func (m *UpdateTunnelIdsResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateTunnelIdsResponse.Size(m)
}
func (m *UpdateTunnelIdsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTunnelIdsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTunnelIdsResponse proto.InternalMessageInfo

type PolicyBearerBindingRequest struct {
	Sid *SubscriberID `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	// default bearer ID
	LinkedBearerId uint32 `protobuf:"varint,2,opt,name=linked_bearer_id,json=linkedBearerId,proto3" json:"linked_bearer_id,omitempty"`
	PolicyRuleId   string `protobuf:"bytes,3,opt,name=policy_rule_id,json=policyRuleId,proto3" json:"policy_rule_id,omitempty"`
	// dedicated bearer ID
	// 0 means that the binding failed
	BearerId uint32 `protobuf:"varint,4,opt,name=bearer_id,json=bearerId,proto3" json:"bearer_id,omitempty"`
	// teids for the dedicated bearer
	Teids                *Teids   `protobuf:"bytes,5,opt,name=teids,proto3" json:"teids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PolicyBearerBindingRequest) Reset()         { *m = PolicyBearerBindingRequest{} }
func (m *PolicyBearerBindingRequest) String() string { return proto.CompactTextString(m) }
func (*PolicyBearerBindingRequest) ProtoMessage()    {}
func (*PolicyBearerBindingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{15}
}

func (m *PolicyBearerBindingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PolicyBearerBindingRequest.Unmarshal(m, b)
}
func (m *PolicyBearerBindingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PolicyBearerBindingRequest.Marshal(b, m, deterministic)
}
func (m *PolicyBearerBindingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyBearerBindingRequest.Merge(m, src)
}
func (m *PolicyBearerBindingRequest) XXX_Size() int {
	return xxx_messageInfo_PolicyBearerBindingRequest.Size(m)
}
func (m *PolicyBearerBindingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyBearerBindingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyBearerBindingRequest proto.InternalMessageInfo

func (m *PolicyBearerBindingRequest) GetSid() *SubscriberID {
	if m != nil {
		return m.Sid
	}
	return nil
}

func (m *PolicyBearerBindingRequest) GetLinkedBearerId() uint32 {
	if m != nil {
		return m.LinkedBearerId
	}
	return 0
}

func (m *PolicyBearerBindingRequest) GetPolicyRuleId() string {
	if m != nil {
		return m.PolicyRuleId
	}
	return ""
}

func (m *PolicyBearerBindingRequest) GetBearerId() uint32 {
	if m != nil {
		return m.BearerId
	}
	return 0
}

func (m *PolicyBearerBindingRequest) GetTeids() *Teids {
	if m != nil {
		return m.Teids
	}
	return nil
}

type PolicyBearerBindingResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PolicyBearerBindingResponse) Reset()         { *m = PolicyBearerBindingResponse{} }
func (m *PolicyBearerBindingResponse) String() string { return proto.CompactTextString(m) }
func (*PolicyBearerBindingResponse) ProtoMessage()    {}
func (*PolicyBearerBindingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{16}
}

func (m *PolicyBearerBindingResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PolicyBearerBindingResponse.Unmarshal(m, b)
}
func (m *PolicyBearerBindingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PolicyBearerBindingResponse.Marshal(b, m, deterministic)
}
func (m *PolicyBearerBindingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyBearerBindingResponse.Merge(m, src)
}
func (m *PolicyBearerBindingResponse) XXX_Size() int {
	return xxx_messageInfo_PolicyBearerBindingResponse.Size(m)
}
func (m *PolicyBearerBindingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyBearerBindingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyBearerBindingResponse proto.InternalMessageInfo

type ChargingReAuthRequest struct {
	SessionId            string                     `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ChargingKey          uint32                     `protobuf:"varint,2,opt,name=charging_key,json=chargingKey,proto3" json:"charging_key,omitempty"`
	Sid                  string                     `protobuf:"bytes,3,opt,name=sid,proto3" json:"sid,omitempty"`
	Type                 ChargingReAuthRequest_Type `protobuf:"varint,4,opt,name=type,proto3,enum=magma.lte.ChargingReAuthRequest_Type" json:"type,omitempty"`
	ServiceIdentifier    *ServiceIdentifier         `protobuf:"bytes,5,opt,name=service_identifier,json=serviceIdentifier,proto3" json:"service_identifier,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ChargingReAuthRequest) Reset()         { *m = ChargingReAuthRequest{} }
func (m *ChargingReAuthRequest) String() string { return proto.CompactTextString(m) }
func (*ChargingReAuthRequest) ProtoMessage()    {}
func (*ChargingReAuthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{17}
}

func (m *ChargingReAuthRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChargingReAuthRequest.Unmarshal(m, b)
}
func (m *ChargingReAuthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChargingReAuthRequest.Marshal(b, m, deterministic)
}
func (m *ChargingReAuthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChargingReAuthRequest.Merge(m, src)
}
func (m *ChargingReAuthRequest) XXX_Size() int {
	return xxx_messageInfo_ChargingReAuthRequest.Size(m)
}
func (m *ChargingReAuthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChargingReAuthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChargingReAuthRequest proto.InternalMessageInfo

func (m *ChargingReAuthRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *ChargingReAuthRequest) GetChargingKey() uint32 {
	if m != nil {
		return m.ChargingKey
	}
	return 0
}

func (m *ChargingReAuthRequest) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *ChargingReAuthRequest) GetType() ChargingReAuthRequest_Type {
	if m != nil {
		return m.Type
	}
	return ChargingReAuthRequest_SINGLE_SERVICE
}

func (m *ChargingReAuthRequest) GetServiceIdentifier() *ServiceIdentifier {
	if m != nil {
		return m.ServiceIdentifier
	}
	return nil
}

type ChargingReAuthAnswer struct {
	Result               ReAuthResult `protobuf:"varint,1,opt,name=result,proto3,enum=magma.lte.ReAuthResult" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ChargingReAuthAnswer) Reset()         { *m = ChargingReAuthAnswer{} }
func (m *ChargingReAuthAnswer) String() string { return proto.CompactTextString(m) }
func (*ChargingReAuthAnswer) ProtoMessage()    {}
func (*ChargingReAuthAnswer) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{18}
}

func (m *ChargingReAuthAnswer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChargingReAuthAnswer.Unmarshal(m, b)
}
func (m *ChargingReAuthAnswer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChargingReAuthAnswer.Marshal(b, m, deterministic)
}
func (m *ChargingReAuthAnswer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChargingReAuthAnswer.Merge(m, src)
}
func (m *ChargingReAuthAnswer) XXX_Size() int {
	return xxx_messageInfo_ChargingReAuthAnswer.Size(m)
}
func (m *ChargingReAuthAnswer) XXX_DiscardUnknown() {
	xxx_messageInfo_ChargingReAuthAnswer.DiscardUnknown(m)
}

var xxx_messageInfo_ChargingReAuthAnswer proto.InternalMessageInfo

func (m *ChargingReAuthAnswer) GetResult() ReAuthResult {
	if m != nil {
		return m.Result
	}
	return ReAuthResult_UPDATE_INITIATED
}

type PolicyReAuthRequest struct {
	// NOTE: if no session_id is specified, apply to all sessions for the IMSI
	SessionId              string                   `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Imsi                   string                   `protobuf:"bytes,2,opt,name=imsi,proto3" json:"imsi,omitempty"`
	RulesToRemove          []string                 `protobuf:"bytes,3,rep,name=rules_to_remove,json=rulesToRemove,proto3" json:"rules_to_remove,omitempty"`
	RulesToInstall         []*StaticRuleInstall     `protobuf:"bytes,6,rep,name=rules_to_install,json=rulesToInstall,proto3" json:"rules_to_install,omitempty"`
	DynamicRulesToInstall  []*DynamicRuleInstall    `protobuf:"bytes,7,rep,name=dynamic_rules_to_install,json=dynamicRulesToInstall,proto3" json:"dynamic_rules_to_install,omitempty"`
	EventTriggers          []EventTrigger           `protobuf:"varint,8,rep,packed,name=event_triggers,json=eventTriggers,proto3,enum=magma.lte.EventTrigger" json:"event_triggers,omitempty"`
	RevalidationTime       *timestamp.Timestamp     `protobuf:"bytes,9,opt,name=revalidation_time,json=revalidationTime,proto3" json:"revalidation_time,omitempty"`
	UsageMonitoringCredits []*UsageMonitoringCredit `protobuf:"bytes,10,rep,name=usage_monitoring_credits,json=usageMonitoringCredits,proto3" json:"usage_monitoring_credits,omitempty"`
	QosInfo                *QoSInformation          `protobuf:"bytes,11,opt,name=qos_info,json=qosInfo,proto3" json:"qos_info,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                 `json:"-"`
	XXX_unrecognized       []byte                   `json:"-"`
	XXX_sizecache          int32                    `json:"-"`
}

func (m *PolicyReAuthRequest) Reset()         { *m = PolicyReAuthRequest{} }
func (m *PolicyReAuthRequest) String() string { return proto.CompactTextString(m) }
func (*PolicyReAuthRequest) ProtoMessage()    {}
func (*PolicyReAuthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{19}
}

func (m *PolicyReAuthRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PolicyReAuthRequest.Unmarshal(m, b)
}
func (m *PolicyReAuthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PolicyReAuthRequest.Marshal(b, m, deterministic)
}
func (m *PolicyReAuthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyReAuthRequest.Merge(m, src)
}
func (m *PolicyReAuthRequest) XXX_Size() int {
	return xxx_messageInfo_PolicyReAuthRequest.Size(m)
}
func (m *PolicyReAuthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyReAuthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyReAuthRequest proto.InternalMessageInfo

func (m *PolicyReAuthRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *PolicyReAuthRequest) GetImsi() string {
	if m != nil {
		return m.Imsi
	}
	return ""
}

func (m *PolicyReAuthRequest) GetRulesToRemove() []string {
	if m != nil {
		return m.RulesToRemove
	}
	return nil
}

func (m *PolicyReAuthRequest) GetRulesToInstall() []*StaticRuleInstall {
	if m != nil {
		return m.RulesToInstall
	}
	return nil
}

func (m *PolicyReAuthRequest) GetDynamicRulesToInstall() []*DynamicRuleInstall {
	if m != nil {
		return m.DynamicRulesToInstall
	}
	return nil
}

func (m *PolicyReAuthRequest) GetEventTriggers() []EventTrigger {
	if m != nil {
		return m.EventTriggers
	}
	return nil
}

func (m *PolicyReAuthRequest) GetRevalidationTime() *timestamp.Timestamp {
	if m != nil {
		return m.RevalidationTime
	}
	return nil
}

func (m *PolicyReAuthRequest) GetUsageMonitoringCredits() []*UsageMonitoringCredit {
	if m != nil {
		return m.UsageMonitoringCredits
	}
	return nil
}

func (m *PolicyReAuthRequest) GetQosInfo() *QoSInformation {
	if m != nil {
		return m.QosInfo
	}
	return nil
}

type QoSInformation struct {
	BearerId             string   `protobuf:"bytes,1,opt,name=bearer_id,json=bearerId,proto3" json:"bearer_id,omitempty"`
	Qci                  QCI      `protobuf:"varint,2,opt,name=qci,proto3,enum=magma.lte.QCI" json:"qci,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QoSInformation) Reset()         { *m = QoSInformation{} }
func (m *QoSInformation) String() string { return proto.CompactTextString(m) }
func (*QoSInformation) ProtoMessage()    {}
func (*QoSInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{20}
}

func (m *QoSInformation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QoSInformation.Unmarshal(m, b)
}
func (m *QoSInformation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QoSInformation.Marshal(b, m, deterministic)
}
func (m *QoSInformation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QoSInformation.Merge(m, src)
}
func (m *QoSInformation) XXX_Size() int {
	return xxx_messageInfo_QoSInformation.Size(m)
}
func (m *QoSInformation) XXX_DiscardUnknown() {
	xxx_messageInfo_QoSInformation.DiscardUnknown(m)
}

var xxx_messageInfo_QoSInformation proto.InternalMessageInfo

func (m *QoSInformation) GetBearerId() string {
	if m != nil {
		return m.BearerId
	}
	return ""
}

func (m *QoSInformation) GetQci() QCI {
	if m != nil {
		return m.Qci
	}
	return QCI_QCI_0
}

type PolicyReAuthAnswer struct {
	SessionId            string                                    `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Result               ReAuthResult                              `protobuf:"varint,2,opt,name=result,proto3,enum=magma.lte.ReAuthResult" json:"result,omitempty"`
	FailedRules          map[string]PolicyReAuthAnswer_FailureCode `protobuf:"bytes,3,rep,name=failed_rules,json=failedRules,proto3" json:"failed_rules,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=magma.lte.PolicyReAuthAnswer_FailureCode"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *PolicyReAuthAnswer) Reset()         { *m = PolicyReAuthAnswer{} }
func (m *PolicyReAuthAnswer) String() string { return proto.CompactTextString(m) }
func (*PolicyReAuthAnswer) ProtoMessage()    {}
func (*PolicyReAuthAnswer) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{21}
}

func (m *PolicyReAuthAnswer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PolicyReAuthAnswer.Unmarshal(m, b)
}
func (m *PolicyReAuthAnswer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PolicyReAuthAnswer.Marshal(b, m, deterministic)
}
func (m *PolicyReAuthAnswer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyReAuthAnswer.Merge(m, src)
}
func (m *PolicyReAuthAnswer) XXX_Size() int {
	return xxx_messageInfo_PolicyReAuthAnswer.Size(m)
}
func (m *PolicyReAuthAnswer) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyReAuthAnswer.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyReAuthAnswer proto.InternalMessageInfo

func (m *PolicyReAuthAnswer) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *PolicyReAuthAnswer) GetResult() ReAuthResult {
	if m != nil {
		return m.Result
	}
	return ReAuthResult_UPDATE_INITIATED
}

func (m *PolicyReAuthAnswer) GetFailedRules() map[string]PolicyReAuthAnswer_FailureCode {
	if m != nil {
		return m.FailedRules
	}
	return nil
}

type RuleSet struct {
	// If true, apply the rules to all sessions for the subscriber
	ApplySubscriberWide  bool                  `protobuf:"varint,1,opt,name=apply_subscriber_wide,json=applySubscriberWide,proto3" json:"apply_subscriber_wide,omitempty"`
	Apn                  string                `protobuf:"bytes,2,opt,name=apn,proto3" json:"apn,omitempty"`
	StaticRules          []*StaticRuleInstall  `protobuf:"bytes,3,rep,name=static_rules,json=staticRules,proto3" json:"static_rules,omitempty"`
	DynamicRules         []*DynamicRuleInstall `protobuf:"bytes,4,rep,name=dynamic_rules,json=dynamicRules,proto3" json:"dynamic_rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *RuleSet) Reset()         { *m = RuleSet{} }
func (m *RuleSet) String() string { return proto.CompactTextString(m) }
func (*RuleSet) ProtoMessage()    {}
func (*RuleSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{22}
}

func (m *RuleSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RuleSet.Unmarshal(m, b)
}
func (m *RuleSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RuleSet.Marshal(b, m, deterministic)
}
func (m *RuleSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleSet.Merge(m, src)
}
func (m *RuleSet) XXX_Size() int {
	return xxx_messageInfo_RuleSet.Size(m)
}
func (m *RuleSet) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleSet.DiscardUnknown(m)
}

var xxx_messageInfo_RuleSet proto.InternalMessageInfo

func (m *RuleSet) GetApplySubscriberWide() bool {
	if m != nil {
		return m.ApplySubscriberWide
	}
	return false
}

func (m *RuleSet) GetApn() string {
	if m != nil {
		return m.Apn
	}
	return ""
}

func (m *RuleSet) GetStaticRules() []*StaticRuleInstall {
	if m != nil {
		return m.StaticRules
	}
	return nil
}

func (m *RuleSet) GetDynamicRules() []*DynamicRuleInstall {
	if m != nil {
		return m.DynamicRules
	}
	return nil
}

type RulesPerSubscriber struct {
	Imsi                 string     `protobuf:"bytes,1,opt,name=imsi,proto3" json:"imsi,omitempty"`
	RuleSet              []*RuleSet `protobuf:"bytes,3,rep,name=rule_set,json=ruleSet,proto3" json:"rule_set,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RulesPerSubscriber) Reset()         { *m = RulesPerSubscriber{} }
func (m *RulesPerSubscriber) String() string { return proto.CompactTextString(m) }
func (*RulesPerSubscriber) ProtoMessage()    {}
func (*RulesPerSubscriber) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{23}
}

func (m *RulesPerSubscriber) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RulesPerSubscriber.Unmarshal(m, b)
}
func (m *RulesPerSubscriber) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RulesPerSubscriber.Marshal(b, m, deterministic)
}
func (m *RulesPerSubscriber) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RulesPerSubscriber.Merge(m, src)
}
func (m *RulesPerSubscriber) XXX_Size() int {
	return xxx_messageInfo_RulesPerSubscriber.Size(m)
}
func (m *RulesPerSubscriber) XXX_DiscardUnknown() {
	xxx_messageInfo_RulesPerSubscriber.DiscardUnknown(m)
}

var xxx_messageInfo_RulesPerSubscriber proto.InternalMessageInfo

func (m *RulesPerSubscriber) GetImsi() string {
	if m != nil {
		return m.Imsi
	}
	return ""
}

func (m *RulesPerSubscriber) GetRuleSet() []*RuleSet {
	if m != nil {
		return m.RuleSet
	}
	return nil
}

type SessionRules struct {
	RulesPerSubscriber   []*RulesPerSubscriber `protobuf:"bytes,1,rep,name=rules_per_subscriber,json=rulesPerSubscriber,proto3" json:"rules_per_subscriber,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SessionRules) Reset()         { *m = SessionRules{} }
func (m *SessionRules) String() string { return proto.CompactTextString(m) }
func (*SessionRules) ProtoMessage()    {}
func (*SessionRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{24}
}

func (m *SessionRules) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionRules.Unmarshal(m, b)
}
func (m *SessionRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionRules.Marshal(b, m, deterministic)
}
func (m *SessionRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionRules.Merge(m, src)
}
func (m *SessionRules) XXX_Size() int {
	return xxx_messageInfo_SessionRules.Size(m)
}
func (m *SessionRules) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionRules.DiscardUnknown(m)
}

var xxx_messageInfo_SessionRules proto.InternalMessageInfo

func (m *SessionRules) GetRulesPerSubscriber() []*RulesPerSubscriber {
	if m != nil {
		return m.RulesPerSubscriber
	}
	return nil
}

type Timezone struct {
	// Describe a timezone by offset from UTC in minutes
	OffsetMinutes        int32    `protobuf:"varint,1,opt,name=offset_minutes,json=offsetMinutes,proto3" json:"offset_minutes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Timezone) Reset()         { *m = Timezone{} }
func (m *Timezone) String() string { return proto.CompactTextString(m) }
func (*Timezone) ProtoMessage()    {}
func (*Timezone) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{25}
}

func (m *Timezone) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Timezone.Unmarshal(m, b)
}
func (m *Timezone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Timezone.Marshal(b, m, deterministic)
}
func (m *Timezone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timezone.Merge(m, src)
}
func (m *Timezone) XXX_Size() int {
	return xxx_messageInfo_Timezone.Size(m)
}
func (m *Timezone) XXX_DiscardUnknown() {
	xxx_messageInfo_Timezone.DiscardUnknown(m)
}

var xxx_messageInfo_Timezone proto.InternalMessageInfo

func (m *Timezone) GetOffsetMinutes() int32 {
	if m != nil {
		return m.OffsetMinutes
	}
	return 0
}

type CreditUnit struct {
	IsValid              bool     `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Volume               uint64   `protobuf:"varint,2,opt,name=volume,proto3" json:"volume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreditUnit) Reset()         { *m = CreditUnit{} }
func (m *CreditUnit) String() string { return proto.CompactTextString(m) }
func (*CreditUnit) ProtoMessage()    {}
func (*CreditUnit) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{26}
}

func (m *CreditUnit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreditUnit.Unmarshal(m, b)
}
func (m *CreditUnit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreditUnit.Marshal(b, m, deterministic)
}
func (m *CreditUnit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreditUnit.Merge(m, src)
}
func (m *CreditUnit) XXX_Size() int {
	return xxx_messageInfo_CreditUnit.Size(m)
}
func (m *CreditUnit) XXX_DiscardUnknown() {
	xxx_messageInfo_CreditUnit.DiscardUnknown(m)
}

var xxx_messageInfo_CreditUnit proto.InternalMessageInfo

func (m *CreditUnit) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

func (m *CreditUnit) GetVolume() uint64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

type GrantedUnits struct {
	Total                *CreditUnit `protobuf:"bytes,1,opt,name=total,proto3" json:"total,omitempty"`
	Tx                   *CreditUnit `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`
	Rx                   *CreditUnit `protobuf:"bytes,3,opt,name=rx,proto3" json:"rx,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GrantedUnits) Reset()         { *m = GrantedUnits{} }
func (m *GrantedUnits) String() string { return proto.CompactTextString(m) }
func (*GrantedUnits) ProtoMessage()    {}
func (*GrantedUnits) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{27}
}

func (m *GrantedUnits) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GrantedUnits.Unmarshal(m, b)
}
func (m *GrantedUnits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GrantedUnits.Marshal(b, m, deterministic)
}
func (m *GrantedUnits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrantedUnits.Merge(m, src)
}
func (m *GrantedUnits) XXX_Size() int {
	return xxx_messageInfo_GrantedUnits.Size(m)
}
func (m *GrantedUnits) XXX_DiscardUnknown() {
	xxx_messageInfo_GrantedUnits.DiscardUnknown(m)
}

var xxx_messageInfo_GrantedUnits proto.InternalMessageInfo

func (m *GrantedUnits) GetTotal() *CreditUnit {
	if m != nil {
		return m.Total
	}
	return nil
}

func (m *GrantedUnits) GetTx() *CreditUnit {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *GrantedUnits) GetRx() *CreditUnit {
	if m != nil {
		return m.Rx
	}
	return nil
}

type RedirectServer struct {
	RedirectAddressType   RedirectServer_RedirectAddressType `protobuf:"varint,1,opt,name=redirect_address_type,json=redirectAddressType,proto3,enum=magma.lte.RedirectServer_RedirectAddressType" json:"redirect_address_type,omitempty"`
	RedirectServerAddress string                             `protobuf:"bytes,2,opt,name=redirect_server_address,json=redirectServerAddress,proto3" json:"redirect_server_address,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                           `json:"-"`
	XXX_unrecognized      []byte                             `json:"-"`
	XXX_sizecache         int32                              `json:"-"`
}

func (m *RedirectServer) Reset()         { *m = RedirectServer{} }
func (m *RedirectServer) String() string { return proto.CompactTextString(m) }
func (*RedirectServer) ProtoMessage()    {}
func (*RedirectServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{28}
}

func (m *RedirectServer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedirectServer.Unmarshal(m, b)
}
func (m *RedirectServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedirectServer.Marshal(b, m, deterministic)
}
func (m *RedirectServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedirectServer.Merge(m, src)
}
func (m *RedirectServer) XXX_Size() int {
	return xxx_messageInfo_RedirectServer.Size(m)
}
func (m *RedirectServer) XXX_DiscardUnknown() {
	xxx_messageInfo_RedirectServer.DiscardUnknown(m)
}

var xxx_messageInfo_RedirectServer proto.InternalMessageInfo

func (m *RedirectServer) GetRedirectAddressType() RedirectServer_RedirectAddressType {
	if m != nil {
		return m.RedirectAddressType
	}
	return RedirectServer_IPV4
}

func (m *RedirectServer) GetRedirectServerAddress() string {
	if m != nil {
		return m.RedirectServerAddress
	}
	return ""
}

type ChargingCredit struct {
	Type ChargingCredit_UnitType `protobuf:"varint,2,opt,name=type,proto3,enum=magma.lte.ChargingCredit_UnitType" json:"type,omitempty"`
	// The number of seconds the credit is valid for
	ValidityTime         uint32                     `protobuf:"varint,3,opt,name=validity_time,json=validityTime,proto3" json:"validity_time,omitempty"`
	IsFinal              bool                       `protobuf:"varint,4,opt,name=is_final,json=isFinal,proto3" json:"is_final,omitempty"`
	FinalAction          ChargingCredit_FinalAction `protobuf:"varint,5,opt,name=final_action,json=finalAction,proto3,enum=magma.lte.ChargingCredit_FinalAction" json:"final_action,omitempty"`
	GrantedUnits         *GrantedUnits              `protobuf:"bytes,6,opt,name=granted_units,json=grantedUnits,proto3" json:"granted_units,omitempty"`
	RedirectServer       *RedirectServer            `protobuf:"bytes,7,opt,name=redirect_server,json=redirectServer,proto3" json:"redirect_server,omitempty"`
	RestrictRules        []string                   `protobuf:"bytes,8,rep,name=restrict_rules,json=restrictRules,proto3" json:"restrict_rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ChargingCredit) Reset()         { *m = ChargingCredit{} }
func (m *ChargingCredit) String() string { return proto.CompactTextString(m) }
func (*ChargingCredit) ProtoMessage()    {}
func (*ChargingCredit) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{29}
}

func (m *ChargingCredit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChargingCredit.Unmarshal(m, b)
}
func (m *ChargingCredit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChargingCredit.Marshal(b, m, deterministic)
}
func (m *ChargingCredit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChargingCredit.Merge(m, src)
}
func (m *ChargingCredit) XXX_Size() int {
	return xxx_messageInfo_ChargingCredit.Size(m)
}
func (m *ChargingCredit) XXX_DiscardUnknown() {
	xxx_messageInfo_ChargingCredit.DiscardUnknown(m)
}

var xxx_messageInfo_ChargingCredit proto.InternalMessageInfo

func (m *ChargingCredit) GetType() ChargingCredit_UnitType {
	if m != nil {
		return m.Type
	}
	return ChargingCredit_BYTES
}

func (m *ChargingCredit) GetValidityTime() uint32 {
	if m != nil {
		return m.ValidityTime
	}
	return 0
}

func (m *ChargingCredit) GetIsFinal() bool {
	if m != nil {
		return m.IsFinal
	}
	return false
}

func (m *ChargingCredit) GetFinalAction() ChargingCredit_FinalAction {
	if m != nil {
		return m.FinalAction
	}
	return ChargingCredit_TERMINATE
}

func (m *ChargingCredit) GetGrantedUnits() *GrantedUnits {
	if m != nil {
		return m.GrantedUnits
	}
	return nil
}

func (m *ChargingCredit) GetRedirectServer() *RedirectServer {
	if m != nil {
		return m.RedirectServer
	}
	return nil
}

func (m *ChargingCredit) GetRestrictRules() []string {
	if m != nil {
		return m.RestrictRules
	}
	return nil
}

type RequestedUnits struct {
	Total                uint64   `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Tx                   uint64   `protobuf:"varint,2,opt,name=tx,proto3" json:"tx,omitempty"`
	Rx                   uint64   `protobuf:"varint,3,opt,name=rx,proto3" json:"rx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestedUnits) Reset()         { *m = RequestedUnits{} }
func (m *RequestedUnits) String() string { return proto.CompactTextString(m) }
func (*RequestedUnits) ProtoMessage()    {}
func (*RequestedUnits) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{30}
}

func (m *RequestedUnits) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestedUnits.Unmarshal(m, b)
}
func (m *RequestedUnits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestedUnits.Marshal(b, m, deterministic)
}
func (m *RequestedUnits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestedUnits.Merge(m, src)
}
func (m *RequestedUnits) XXX_Size() int {
	return xxx_messageInfo_RequestedUnits.Size(m)
}
func (m *RequestedUnits) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestedUnits.DiscardUnknown(m)
}

var xxx_messageInfo_RequestedUnits proto.InternalMessageInfo

func (m *RequestedUnits) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *RequestedUnits) GetTx() uint64 {
	if m != nil {
		return m.Tx
	}
	return 0
}

func (m *RequestedUnits) GetRx() uint64 {
	if m != nil {
		return m.Rx
	}
	return 0
}

type CreditUsage struct {
	BytesTx              uint64                 `protobuf:"varint,1,opt,name=bytes_tx,json=bytesTx,proto3" json:"bytes_tx,omitempty"`
	BytesRx              uint64                 `protobuf:"varint,2,opt,name=bytes_rx,json=bytesRx,proto3" json:"bytes_rx,omitempty"`
	ChargingKey          uint32                 `protobuf:"varint,4,opt,name=charging_key,json=chargingKey,proto3" json:"charging_key,omitempty"`
	Type                 CreditUsage_UpdateType `protobuf:"varint,5,opt,name=type,proto3,enum=magma.lte.CreditUsage_UpdateType" json:"type,omitempty"`
	MonitoringKey        []byte                 `protobuf:"bytes,6,opt,name=monitoring_key,json=monitoringKey,proto3" json:"monitoring_key,omitempty"`
	ServiceIdentifier    *ServiceIdentifier     `protobuf:"bytes,7,opt,name=service_identifier,json=serviceIdentifier,proto3" json:"service_identifier,omitempty"`
	RequestedUnits       *RequestedUnits        `protobuf:"bytes,8,opt,name=requested_units,json=requestedUnits,proto3" json:"requested_units,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *CreditUsage) Reset()         { *m = CreditUsage{} }
func (m *CreditUsage) String() string { return proto.CompactTextString(m) }
func (*CreditUsage) ProtoMessage()    {}
func (*CreditUsage) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{31}
}

func (m *CreditUsage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreditUsage.Unmarshal(m, b)
}
func (m *CreditUsage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreditUsage.Marshal(b, m, deterministic)
}
func (m *CreditUsage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreditUsage.Merge(m, src)
}
func (m *CreditUsage) XXX_Size() int {
	return xxx_messageInfo_CreditUsage.Size(m)
}
func (m *CreditUsage) XXX_DiscardUnknown() {
	xxx_messageInfo_CreditUsage.DiscardUnknown(m)
}

var xxx_messageInfo_CreditUsage proto.InternalMessageInfo

func (m *CreditUsage) GetBytesTx() uint64 {
	if m != nil {
		return m.BytesTx
	}
	return 0
}

func (m *CreditUsage) GetBytesRx() uint64 {
	if m != nil {
		return m.BytesRx
	}
	return 0
}

func (m *CreditUsage) GetChargingKey() uint32 {
	if m != nil {
		return m.ChargingKey
	}
	return 0
}

func (m *CreditUsage) GetType() CreditUsage_UpdateType {
	if m != nil {
		return m.Type
	}
	return CreditUsage_THRESHOLD
}

func (m *CreditUsage) GetMonitoringKey() []byte {
	if m != nil {
		return m.MonitoringKey
	}
	return nil
}

func (m *CreditUsage) GetServiceIdentifier() *ServiceIdentifier {
	if m != nil {
		return m.ServiceIdentifier
	}
	return nil
}

func (m *CreditUsage) GetRequestedUnits() *RequestedUnits {
	if m != nil {
		return m.RequestedUnits
	}
	return nil
}

type CreditUsageUpdate struct {
	Usage     *CreditUsage `protobuf:"bytes,1,opt,name=usage,proto3" json:"usage,omitempty"`
	SessionId string       `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// unique among session
	RequestNumber uint32 `protobuf:"varint,3,opt,name=request_number,json=requestNumber,proto3" json:"request_number,omitempty"`
	SpgwIpv4      string `protobuf:"bytes,7,opt,name=spgw_ipv4,json=spgwIpv4,proto3" json:"spgw_ipv4,omitempty"`
	Imei          string `protobuf:"bytes,9,opt,name=imei,proto3" json:"imei,omitempty"`
	PlmnId        string `protobuf:"bytes,10,opt,name=plmn_id,json=plmnId,proto3" json:"plmn_id,omitempty"`
	ImsiPlmnId    string `protobuf:"bytes,11,opt,name=imsi_plmn_id,json=imsiPlmnId,proto3" json:"imsi_plmn_id,omitempty"`
	UserLocation  []byte `protobuf:"bytes,12,opt,name=user_location,json=userLocation,proto3" json:"user_location,omitempty"`
	// MAC Address for WLAN
	HardwareAddr            []byte                `protobuf:"bytes,14,opt,name=hardware_addr,json=hardwareAddr,proto3" json:"hardware_addr,omitempty"`
	TgppCtx                 *TgppContext          `protobuf:"bytes,15,opt,name=tgpp_ctx,json=tgppCtx,proto3" json:"tgpp_ctx,omitempty"`
	CommonContext           *CommonSessionContext `protobuf:"bytes,16,opt,name=common_context,json=commonContext,proto3" json:"common_context,omitempty"`
	RatSpecificContext      *RatSpecificContext   `protobuf:"bytes,17,opt,name=rat_specific_context,json=ratSpecificContext,proto3" json:"rat_specific_context,omitempty"`
	ChargingCharacteristics string                `protobuf:"bytes,18,opt,name=charging_characteristics,json=chargingCharacteristics,proto3" json:"charging_characteristics,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}              `json:"-"`
	XXX_unrecognized        []byte                `json:"-"`
	XXX_sizecache           int32                 `json:"-"`
}

func (m *CreditUsageUpdate) Reset()         { *m = CreditUsageUpdate{} }
func (m *CreditUsageUpdate) String() string { return proto.CompactTextString(m) }
func (*CreditUsageUpdate) ProtoMessage()    {}
func (*CreditUsageUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{32}
}

func (m *CreditUsageUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreditUsageUpdate.Unmarshal(m, b)
}
func (m *CreditUsageUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreditUsageUpdate.Marshal(b, m, deterministic)
}
func (m *CreditUsageUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreditUsageUpdate.Merge(m, src)
}
func (m *CreditUsageUpdate) XXX_Size() int {
	return xxx_messageInfo_CreditUsageUpdate.Size(m)
}
func (m *CreditUsageUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_CreditUsageUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_CreditUsageUpdate proto.InternalMessageInfo

func (m *CreditUsageUpdate) GetUsage() *CreditUsage {
	if m != nil {
		return m.Usage
	}
	return nil
}

func (m *CreditUsageUpdate) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *CreditUsageUpdate) GetRequestNumber() uint32 {
	if m != nil {
		return m.RequestNumber
	}
	return 0
}

func (m *CreditUsageUpdate) GetSpgwIpv4() string {
	if m != nil {
		return m.SpgwIpv4
	}
	return ""
}

func (m *CreditUsageUpdate) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

func (m *CreditUsageUpdate) GetPlmnId() string {
	if m != nil {
		return m.PlmnId
	}
	return ""
}

func (m *CreditUsageUpdate) GetImsiPlmnId() string {
	if m != nil {
		return m.ImsiPlmnId
	}
	return ""
}

func (m *CreditUsageUpdate) GetUserLocation() []byte {
	if m != nil {
		return m.UserLocation
	}
	return nil
}

func (m *CreditUsageUpdate) GetHardwareAddr() []byte {
	if m != nil {
		return m.HardwareAddr
	}
	return nil
}

func (m *CreditUsageUpdate) GetTgppCtx() *TgppContext {
	if m != nil {
		return m.TgppCtx
	}
	return nil
}

func (m *CreditUsageUpdate) GetCommonContext() *CommonSessionContext {
	if m != nil {
		return m.CommonContext
	}
	return nil
}

func (m *CreditUsageUpdate) GetRatSpecificContext() *RatSpecificContext {
	if m != nil {
		return m.RatSpecificContext
	}
	return nil
}

func (m *CreditUsageUpdate) GetChargingCharacteristics() string {
	if m != nil {
		return m.ChargingCharacteristics
	}
	return ""
}

type CreditUpdateResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// SubscriberID/IMSI
	Sid               string             `protobuf:"bytes,2,opt,name=sid,proto3" json:"sid,omitempty"`
	ChargingKey       uint32             `protobuf:"varint,3,opt,name=charging_key,json=chargingKey,proto3" json:"charging_key,omitempty"`
	Credit            *ChargingCredit    `protobuf:"bytes,4,opt,name=credit,proto3" json:"credit,omitempty"`
	ResultCode        uint32             `protobuf:"varint,6,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`
	ServiceIdentifier *ServiceIdentifier `protobuf:"bytes,7,opt,name=service_identifier,json=serviceIdentifier,proto3" json:"service_identifier,omitempty"`
	// When this is set to an infinite limit, field 'credit' should be ignored
	LimitType            CreditLimitType `protobuf:"varint,9,opt,name=limit_type,json=limitType,proto3,enum=magma.lte.CreditLimitType" json:"limit_type,omitempty"`
	TgppCtx              *TgppContext    `protobuf:"bytes,10,opt,name=tgpp_ctx,json=tgppCtx,proto3" json:"tgpp_ctx,omitempty"`
	SessionId            string          `protobuf:"bytes,11,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CreditUpdateResponse) Reset()         { *m = CreditUpdateResponse{} }
func (m *CreditUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*CreditUpdateResponse) ProtoMessage()    {}
func (*CreditUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{33}
}

func (m *CreditUpdateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreditUpdateResponse.Unmarshal(m, b)
}
func (m *CreditUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreditUpdateResponse.Marshal(b, m, deterministic)
}
func (m *CreditUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreditUpdateResponse.Merge(m, src)
}
func (m *CreditUpdateResponse) XXX_Size() int {
	return xxx_messageInfo_CreditUpdateResponse.Size(m)
}
func (m *CreditUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreditUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreditUpdateResponse proto.InternalMessageInfo

func (m *CreditUpdateResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *CreditUpdateResponse) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *CreditUpdateResponse) GetChargingKey() uint32 {
	if m != nil {
		return m.ChargingKey
	}
	return 0
}

func (m *CreditUpdateResponse) GetCredit() *ChargingCredit {
	if m != nil {
		return m.Credit
	}
	return nil
}

func (m *CreditUpdateResponse) GetResultCode() uint32 {
	if m != nil {
		return m.ResultCode
	}
	return 0
}

func (m *CreditUpdateResponse) GetServiceIdentifier() *ServiceIdentifier {
	if m != nil {
		return m.ServiceIdentifier
	}
	return nil
}

func (m *CreditUpdateResponse) GetLimitType() CreditLimitType {
	if m != nil {
		return m.LimitType
	}
	return CreditLimitType_FINITE
}

func (m *CreditUpdateResponse) GetTgppCtx() *TgppContext {
	if m != nil {
		return m.TgppCtx
	}
	return nil
}

func (m *CreditUpdateResponse) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

// Used amount for a usage monitor
type UsageMonitorUpdate struct {
	MonitoringKey        []byte          `protobuf:"bytes,1,opt,name=monitoring_key,json=monitoringKey,proto3" json:"monitoring_key,omitempty"`
	Level                MonitoringLevel `protobuf:"varint,2,opt,name=level,proto3,enum=magma.lte.MonitoringLevel" json:"level,omitempty"`
	BytesTx              uint64          `protobuf:"varint,3,opt,name=bytes_tx,json=bytesTx,proto3" json:"bytes_tx,omitempty"`
	BytesRx              uint64          `protobuf:"varint,4,opt,name=bytes_rx,json=bytesRx,proto3" json:"bytes_rx,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UsageMonitorUpdate) Reset()         { *m = UsageMonitorUpdate{} }
func (m *UsageMonitorUpdate) String() string { return proto.CompactTextString(m) }
func (*UsageMonitorUpdate) ProtoMessage()    {}
func (*UsageMonitorUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{34}
}

func (m *UsageMonitorUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UsageMonitorUpdate.Unmarshal(m, b)
}
func (m *UsageMonitorUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UsageMonitorUpdate.Marshal(b, m, deterministic)
}
func (m *UsageMonitorUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsageMonitorUpdate.Merge(m, src)
}
func (m *UsageMonitorUpdate) XXX_Size() int {
	return xxx_messageInfo_UsageMonitorUpdate.Size(m)
}
func (m *UsageMonitorUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_UsageMonitorUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_UsageMonitorUpdate proto.InternalMessageInfo

func (m *UsageMonitorUpdate) GetMonitoringKey() []byte {
	if m != nil {
		return m.MonitoringKey
	}
	return nil
}

func (m *UsageMonitorUpdate) GetLevel() MonitoringLevel {
	if m != nil {
		return m.Level
	}
	return MonitoringLevel_SESSION_LEVEL
}

func (m *UsageMonitorUpdate) GetBytesTx() uint64 {
	if m != nil {
		return m.BytesTx
	}
	return 0
}

func (m *UsageMonitorUpdate) GetBytesRx() uint64 {
	if m != nil {
		return m.BytesRx
	}
	return 0
}

// New received threshold for a usage monitor
type UsageMonitoringCredit struct {
	Action               UsageMonitoringCredit_Action `protobuf:"varint,1,opt,name=action,proto3,enum=magma.lte.UsageMonitoringCredit_Action" json:"action,omitempty"`
	MonitoringKey        []byte                       `protobuf:"bytes,2,opt,name=monitoring_key,json=monitoringKey,proto3" json:"monitoring_key,omitempty"`
	Level                MonitoringLevel              `protobuf:"varint,3,opt,name=level,proto3,enum=magma.lte.MonitoringLevel" json:"level,omitempty"`
	GrantedUnits         *GrantedUnits                `protobuf:"bytes,5,opt,name=granted_units,json=grantedUnits,proto3" json:"granted_units,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *UsageMonitoringCredit) Reset()         { *m = UsageMonitoringCredit{} }
func (m *UsageMonitoringCredit) String() string { return proto.CompactTextString(m) }
func (*UsageMonitoringCredit) ProtoMessage()    {}
func (*UsageMonitoringCredit) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{35}
}

func (m *UsageMonitoringCredit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UsageMonitoringCredit.Unmarshal(m, b)
}
func (m *UsageMonitoringCredit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UsageMonitoringCredit.Marshal(b, m, deterministic)
}
func (m *UsageMonitoringCredit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsageMonitoringCredit.Merge(m, src)
}
func (m *UsageMonitoringCredit) XXX_Size() int {
	return xxx_messageInfo_UsageMonitoringCredit.Size(m)
}
func (m *UsageMonitoringCredit) XXX_DiscardUnknown() {
	xxx_messageInfo_UsageMonitoringCredit.DiscardUnknown(m)
}

var xxx_messageInfo_UsageMonitoringCredit proto.InternalMessageInfo

func (m *UsageMonitoringCredit) GetAction() UsageMonitoringCredit_Action {
	if m != nil {
		return m.Action
	}
	return UsageMonitoringCredit_CONTINUE
}

func (m *UsageMonitoringCredit) GetMonitoringKey() []byte {
	if m != nil {
		return m.MonitoringKey
	}
	return nil
}

func (m *UsageMonitoringCredit) GetLevel() MonitoringLevel {
	if m != nil {
		return m.Level
	}
	return MonitoringLevel_SESSION_LEVEL
}

func (m *UsageMonitoringCredit) GetGrantedUnits() *GrantedUnits {
	if m != nil {
		return m.GrantedUnits
	}
	return nil
}

// A request to update a usage monitor given its usage and session information
// TODO this message name is misleading since we don't only use it for
// usage reporting
type UsageMonitoringUpdateRequest struct {
	Update    *UsageMonitorUpdate `protobuf:"bytes,1,opt,name=update,proto3" json:"update,omitempty"`
	SessionId string              `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// unique among session
	RequestNumber uint32 `protobuf:"varint,3,opt,name=request_number,json=requestNumber,proto3" json:"request_number,omitempty"`
	// SubscriberID/IMSI
	Sid    string `protobuf:"bytes,4,opt,name=sid,proto3" json:"sid,omitempty"`
	UeIpv4 string `protobuf:"bytes,5,opt,name=ue_ipv4,json=ueIpv4,proto3" json:"ue_ipv4,omitempty"`
	// MAC Address for WLAN
	HardwareAddr            []byte       `protobuf:"bytes,6,opt,name=hardware_addr,json=hardwareAddr,proto3" json:"hardware_addr,omitempty"`
	RatType                 RATType      `protobuf:"varint,7,opt,name=rat_type,json=ratType,proto3,enum=magma.lte.RATType" json:"rat_type,omitempty"`
	TgppCtx                 *TgppContext `protobuf:"bytes,8,opt,name=tgpp_ctx,json=tgppCtx,proto3" json:"tgpp_ctx,omitempty"`
	EventTrigger            EventTrigger `protobuf:"varint,9,opt,name=event_trigger,json=eventTrigger,proto3,enum=magma.lte.EventTrigger" json:"event_trigger,omitempty"`
	ChargingCharacteristics string       `protobuf:"bytes,10,opt,name=charging_characteristics,json=chargingCharacteristics,proto3" json:"charging_characteristics,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}     `json:"-"`
	XXX_unrecognized        []byte       `json:"-"`
	XXX_sizecache           int32        `json:"-"`
}

func (m *UsageMonitoringUpdateRequest) Reset()         { *m = UsageMonitoringUpdateRequest{} }
func (m *UsageMonitoringUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*UsageMonitoringUpdateRequest) ProtoMessage()    {}
func (*UsageMonitoringUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{36}
}

func (m *UsageMonitoringUpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UsageMonitoringUpdateRequest.Unmarshal(m, b)
}
func (m *UsageMonitoringUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UsageMonitoringUpdateRequest.Marshal(b, m, deterministic)
}
func (m *UsageMonitoringUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsageMonitoringUpdateRequest.Merge(m, src)
}
func (m *UsageMonitoringUpdateRequest) XXX_Size() int {
	return xxx_messageInfo_UsageMonitoringUpdateRequest.Size(m)
}
func (m *UsageMonitoringUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UsageMonitoringUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UsageMonitoringUpdateRequest proto.InternalMessageInfo

func (m *UsageMonitoringUpdateRequest) GetUpdate() *UsageMonitorUpdate {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *UsageMonitoringUpdateRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *UsageMonitoringUpdateRequest) GetRequestNumber() uint32 {
	if m != nil {
		return m.RequestNumber
	}
	return 0
}

func (m *UsageMonitoringUpdateRequest) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *UsageMonitoringUpdateRequest) GetUeIpv4() string {
	if m != nil {
		return m.UeIpv4
	}
	return ""
}

func (m *UsageMonitoringUpdateRequest) GetHardwareAddr() []byte {
	if m != nil {
		return m.HardwareAddr
	}
	return nil
}

func (m *UsageMonitoringUpdateRequest) GetRatType() RATType {
	if m != nil {
		return m.RatType
	}
	return RATType_TGPP_LTE
}

func (m *UsageMonitoringUpdateRequest) GetTgppCtx() *TgppContext {
	if m != nil {
		return m.TgppCtx
	}
	return nil
}

func (m *UsageMonitoringUpdateRequest) GetEventTrigger() EventTrigger {
	if m != nil {
		return m.EventTrigger
	}
	return EventTrigger_SGSN_CHANGE
}

func (m *UsageMonitoringUpdateRequest) GetChargingCharacteristics() string {
	if m != nil {
		return m.ChargingCharacteristics
	}
	return ""
}

// Response to a usage monitor update with the credit received and session info
type UsageMonitoringUpdateResponse struct {
	Credit    *UsageMonitoringCredit `protobuf:"bytes,1,opt,name=credit,proto3" json:"credit,omitempty"`
	SessionId string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// SubscriberID/IMSI
	Sid                   string                `protobuf:"bytes,3,opt,name=sid,proto3" json:"sid,omitempty"`
	Success               bool                  `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	EventTriggers         []EventTrigger        `protobuf:"varint,5,rep,packed,name=event_triggers,json=eventTriggers,proto3,enum=magma.lte.EventTrigger" json:"event_triggers,omitempty"`
	RevalidationTime      *timestamp.Timestamp  `protobuf:"bytes,6,opt,name=revalidation_time,json=revalidationTime,proto3" json:"revalidation_time,omitempty"`
	ResultCode            uint32                `protobuf:"varint,7,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`
	RulesToRemove         []string              `protobuf:"bytes,8,rep,name=rules_to_remove,json=rulesToRemove,proto3" json:"rules_to_remove,omitempty"`
	StaticRulesToInstall  []*StaticRuleInstall  `protobuf:"bytes,9,rep,name=static_rules_to_install,json=staticRulesToInstall,proto3" json:"static_rules_to_install,omitempty"`
	DynamicRulesToInstall []*DynamicRuleInstall `protobuf:"bytes,10,rep,name=dynamic_rules_to_install,json=dynamicRulesToInstall,proto3" json:"dynamic_rules_to_install,omitempty"`
	TgppCtx               *TgppContext          `protobuf:"bytes,11,opt,name=tgpp_ctx,json=tgppCtx,proto3" json:"tgpp_ctx,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}              `json:"-"`
	XXX_unrecognized      []byte                `json:"-"`
	XXX_sizecache         int32                 `json:"-"`
}

func (m *UsageMonitoringUpdateResponse) Reset()         { *m = UsageMonitoringUpdateResponse{} }
func (m *UsageMonitoringUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*UsageMonitoringUpdateResponse) ProtoMessage()    {}
func (*UsageMonitoringUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{37}
}

func (m *UsageMonitoringUpdateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UsageMonitoringUpdateResponse.Unmarshal(m, b)
}
func (m *UsageMonitoringUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UsageMonitoringUpdateResponse.Marshal(b, m, deterministic)
}
func (m *UsageMonitoringUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsageMonitoringUpdateResponse.Merge(m, src)
}
func (m *UsageMonitoringUpdateResponse) XXX_Size() int {
	return xxx_messageInfo_UsageMonitoringUpdateResponse.Size(m)
}
func (m *UsageMonitoringUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UsageMonitoringUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UsageMonitoringUpdateResponse proto.InternalMessageInfo

func (m *UsageMonitoringUpdateResponse) GetCredit() *UsageMonitoringCredit {
	if m != nil {
		return m.Credit
	}
	return nil
}

func (m *UsageMonitoringUpdateResponse) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *UsageMonitoringUpdateResponse) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *UsageMonitoringUpdateResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *UsageMonitoringUpdateResponse) GetEventTriggers() []EventTrigger {
	if m != nil {
		return m.EventTriggers
	}
	return nil
}

func (m *UsageMonitoringUpdateResponse) GetRevalidationTime() *timestamp.Timestamp {
	if m != nil {
		return m.RevalidationTime
	}
	return nil
}

func (m *UsageMonitoringUpdateResponse) GetResultCode() uint32 {
	if m != nil {
		return m.ResultCode
	}
	return 0
}

func (m *UsageMonitoringUpdateResponse) GetRulesToRemove() []string {
	if m != nil {
		return m.RulesToRemove
	}
	return nil
}

func (m *UsageMonitoringUpdateResponse) GetStaticRulesToInstall() []*StaticRuleInstall {
	if m != nil {
		return m.StaticRulesToInstall
	}
	return nil
}

func (m *UsageMonitoringUpdateResponse) GetDynamicRulesToInstall() []*DynamicRuleInstall {
	if m != nil {
		return m.DynamicRulesToInstall
	}
	return nil
}

func (m *UsageMonitoringUpdateResponse) GetTgppCtx() *TgppContext {
	if m != nil {
		return m.TgppCtx
	}
	return nil
}

// QoS Information to be sent in CCR-Init message
type QosInformationRequest struct {
	ApnAmbrDl               uint32 `protobuf:"varint,1,opt,name=apn_ambr_dl,json=apnAmbrDl,proto3" json:"apn_ambr_dl,omitempty"`
	ApnAmbrUl               uint32 `protobuf:"varint,2,opt,name=apn_ambr_ul,json=apnAmbrUl,proto3" json:"apn_ambr_ul,omitempty"`
	PriorityLevel           uint32 `protobuf:"varint,3,opt,name=priority_level,json=priorityLevel,proto3" json:"priority_level,omitempty"`
	PreemptionCapability    uint32 `protobuf:"varint,4,opt,name=preemption_capability,json=preemptionCapability,proto3" json:"preemption_capability,omitempty"`
	PreemptionVulnerability uint32 `protobuf:"varint,5,opt,name=preemption_vulnerability,json=preemptionVulnerability,proto3" json:"preemption_vulnerability,omitempty"`
	QosClassId              uint32 `protobuf:"varint,6,opt,name=qos_class_id,json=qosClassId,proto3" json:"qos_class_id,omitempty"`
	// Unit (either bps or Kbps)
	BrUnit               QosInformationRequest_BitrateUnitsAMBR `protobuf:"varint,7,opt,name=br_unit,json=brUnit,proto3,enum=magma.lte.QosInformationRequest_BitrateUnitsAMBR" json:"br_unit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *QosInformationRequest) Reset()         { *m = QosInformationRequest{} }
func (m *QosInformationRequest) String() string { return proto.CompactTextString(m) }
func (*QosInformationRequest) ProtoMessage()    {}
func (*QosInformationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{38}
}

func (m *QosInformationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QosInformationRequest.Unmarshal(m, b)
}
func (m *QosInformationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QosInformationRequest.Marshal(b, m, deterministic)
}
func (m *QosInformationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QosInformationRequest.Merge(m, src)
}
func (m *QosInformationRequest) XXX_Size() int {
	return xxx_messageInfo_QosInformationRequest.Size(m)
}
func (m *QosInformationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QosInformationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QosInformationRequest proto.InternalMessageInfo

func (m *QosInformationRequest) GetApnAmbrDl() uint32 {
	if m != nil {
		return m.ApnAmbrDl
	}
	return 0
}

func (m *QosInformationRequest) GetApnAmbrUl() uint32 {
	if m != nil {
		return m.ApnAmbrUl
	}
	return 0
}

func (m *QosInformationRequest) GetPriorityLevel() uint32 {
	if m != nil {
		return m.PriorityLevel
	}
	return 0
}

func (m *QosInformationRequest) GetPreemptionCapability() uint32 {
	if m != nil {
		return m.PreemptionCapability
	}
	return 0
}

func (m *QosInformationRequest) GetPreemptionVulnerability() uint32 {
	if m != nil {
		return m.PreemptionVulnerability
	}
	return 0
}

func (m *QosInformationRequest) GetQosClassId() uint32 {
	if m != nil {
		return m.QosClassId
	}
	return 0
}

func (m *QosInformationRequest) GetBrUnit() QosInformationRequest_BitrateUnitsAMBR {
	if m != nil {
		return m.BrUnit
	}
	return QosInformationRequest_BPS
}

// TgppContext is a session specific 3GPP context session proxy may meed session manager to persist
type TgppContext struct {
	GxDestHost           string   `protobuf:"bytes,1,opt,name=gx_dest_host,json=gxDestHost,proto3" json:"gx_dest_host,omitempty"`
	GyDestHost           string   `protobuf:"bytes,2,opt,name=gy_dest_host,json=gyDestHost,proto3" json:"gy_dest_host,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TgppContext) Reset()         { *m = TgppContext{} }
func (m *TgppContext) String() string { return proto.CompactTextString(m) }
func (*TgppContext) ProtoMessage()    {}
func (*TgppContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{39}
}

func (m *TgppContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TgppContext.Unmarshal(m, b)
}
func (m *TgppContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TgppContext.Marshal(b, m, deterministic)
}
func (m *TgppContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TgppContext.Merge(m, src)
}
func (m *TgppContext) XXX_Size() int {
	return xxx_messageInfo_TgppContext.Size(m)
}
func (m *TgppContext) XXX_DiscardUnknown() {
	xxx_messageInfo_TgppContext.DiscardUnknown(m)
}

var xxx_messageInfo_TgppContext proto.InternalMessageInfo

func (m *TgppContext) GetGxDestHost() string {
	if m != nil {
		return m.GxDestHost
	}
	return ""
}

func (m *TgppContext) GetGyDestHost() string {
	if m != nil {
		return m.GyDestHost
	}
	return ""
}

type CreateSessionRequest struct {
	AccessTimezone       *Timezone             `protobuf:"bytes,1,opt,name=access_timezone,json=accessTimezone,proto3" json:"access_timezone,omitempty"`
	SessionId            string                `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	RequestedUnits       *RequestedUnits       `protobuf:"bytes,3,opt,name=requested_units,json=requestedUnits,proto3" json:"requested_units,omitempty"`
	CommonContext        *CommonSessionContext `protobuf:"bytes,16,opt,name=common_context,json=commonContext,proto3" json:"common_context,omitempty"`
	RatSpecificContext   *RatSpecificContext   `protobuf:"bytes,17,opt,name=rat_specific_context,json=ratSpecificContext,proto3" json:"rat_specific_context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CreateSessionRequest) Reset()         { *m = CreateSessionRequest{} }
func (m *CreateSessionRequest) String() string { return proto.CompactTextString(m) }
func (*CreateSessionRequest) ProtoMessage()    {}
func (*CreateSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{40}
}

func (m *CreateSessionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateSessionRequest.Unmarshal(m, b)
}
func (m *CreateSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateSessionRequest.Marshal(b, m, deterministic)
}
func (m *CreateSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSessionRequest.Merge(m, src)
}
func (m *CreateSessionRequest) XXX_Size() int {
	return xxx_messageInfo_CreateSessionRequest.Size(m)
}
func (m *CreateSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSessionRequest proto.InternalMessageInfo

func (m *CreateSessionRequest) GetAccessTimezone() *Timezone {
	if m != nil {
		return m.AccessTimezone
	}
	return nil
}

func (m *CreateSessionRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *CreateSessionRequest) GetRequestedUnits() *RequestedUnits {
	if m != nil {
		return m.RequestedUnits
	}
	return nil
}

func (m *CreateSessionRequest) GetCommonContext() *CommonSessionContext {
	if m != nil {
		return m.CommonContext
	}
	return nil
}

func (m *CreateSessionRequest) GetRatSpecificContext() *RatSpecificContext {
	if m != nil {
		return m.RatSpecificContext
	}
	return nil
}

type CreateSessionResponse struct {
	// List of charging credits that should be installed for the session
	Credits []*CreditUpdateResponse `protobuf:"bytes,1,rep,name=credits,proto3" json:"credits,omitempty"`
	// List of usage monitors that should be installed for the session
	UsageMonitors        []*UsageMonitoringUpdateResponse `protobuf:"bytes,6,rep,name=usage_monitors,json=usageMonitors,proto3" json:"usage_monitors,omitempty"`
	StaticRules          []*StaticRuleInstall             `protobuf:"bytes,7,rep,name=static_rules,json=staticRules,proto3" json:"static_rules,omitempty"`
	DynamicRules         []*DynamicRuleInstall            `protobuf:"bytes,8,rep,name=dynamic_rules,json=dynamicRules,proto3" json:"dynamic_rules,omitempty"`
	SessionId            string                           `protobuf:"bytes,9,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	TgppCtx              *TgppContext                     `protobuf:"bytes,10,opt,name=tgpp_ctx,json=tgppCtx,proto3" json:"tgpp_ctx,omitempty"`
	EventTriggers        []EventTrigger                   `protobuf:"varint,11,rep,packed,name=event_triggers,json=eventTriggers,proto3,enum=magma.lte.EventTrigger" json:"event_triggers,omitempty"`
	RevalidationTime     *timestamp.Timestamp             `protobuf:"bytes,12,opt,name=revalidation_time,json=revalidationTime,proto3" json:"revalidation_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *CreateSessionResponse) Reset()         { *m = CreateSessionResponse{} }
func (m *CreateSessionResponse) String() string { return proto.CompactTextString(m) }
func (*CreateSessionResponse) ProtoMessage()    {}
func (*CreateSessionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{41}
}

func (m *CreateSessionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateSessionResponse.Unmarshal(m, b)
}
func (m *CreateSessionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateSessionResponse.Marshal(b, m, deterministic)
}
func (m *CreateSessionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSessionResponse.Merge(m, src)
}
func (m *CreateSessionResponse) XXX_Size() int {
	return xxx_messageInfo_CreateSessionResponse.Size(m)
}
func (m *CreateSessionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSessionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSessionResponse proto.InternalMessageInfo

func (m *CreateSessionResponse) GetCredits() []*CreditUpdateResponse {
	if m != nil {
		return m.Credits
	}
	return nil
}

func (m *CreateSessionResponse) GetUsageMonitors() []*UsageMonitoringUpdateResponse {
	if m != nil {
		return m.UsageMonitors
	}
	return nil
}

func (m *CreateSessionResponse) GetStaticRules() []*StaticRuleInstall {
	if m != nil {
		return m.StaticRules
	}
	return nil
}

func (m *CreateSessionResponse) GetDynamicRules() []*DynamicRuleInstall {
	if m != nil {
		return m.DynamicRules
	}
	return nil
}

func (m *CreateSessionResponse) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *CreateSessionResponse) GetTgppCtx() *TgppContext {
	if m != nil {
		return m.TgppCtx
	}
	return nil
}

func (m *CreateSessionResponse) GetEventTriggers() []EventTrigger {
	if m != nil {
		return m.EventTriggers
	}
	return nil
}

func (m *CreateSessionResponse) GetRevalidationTime() *timestamp.Timestamp {
	if m != nil {
		return m.RevalidationTime
	}
	return nil
}

type StaticRuleInstall struct {
	RuleId         string               `protobuf:"bytes,1,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	ActivationTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=activation_time,json=activationTime,proto3" json:"activation_time,omitempty"`
	// Optional field. Set as 0 to mark as unused
	DeactivationTime     *timestamp.Timestamp `protobuf:"bytes,3,opt,name=deactivation_time,json=deactivationTime,proto3" json:"deactivation_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *StaticRuleInstall) Reset()         { *m = StaticRuleInstall{} }
func (m *StaticRuleInstall) String() string { return proto.CompactTextString(m) }
func (*StaticRuleInstall) ProtoMessage()    {}
func (*StaticRuleInstall) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{42}
}

func (m *StaticRuleInstall) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StaticRuleInstall.Unmarshal(m, b)
}
func (m *StaticRuleInstall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StaticRuleInstall.Marshal(b, m, deterministic)
}
func (m *StaticRuleInstall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StaticRuleInstall.Merge(m, src)
}
func (m *StaticRuleInstall) XXX_Size() int {
	return xxx_messageInfo_StaticRuleInstall.Size(m)
}
func (m *StaticRuleInstall) XXX_DiscardUnknown() {
	xxx_messageInfo_StaticRuleInstall.DiscardUnknown(m)
}

var xxx_messageInfo_StaticRuleInstall proto.InternalMessageInfo

func (m *StaticRuleInstall) GetRuleId() string {
	if m != nil {
		return m.RuleId
	}
	return ""
}

func (m *StaticRuleInstall) GetActivationTime() *timestamp.Timestamp {
	if m != nil {
		return m.ActivationTime
	}
	return nil
}

func (m *StaticRuleInstall) GetDeactivationTime() *timestamp.Timestamp {
	if m != nil {
		return m.DeactivationTime
	}
	return nil
}

type DynamicRuleInstall struct {
	PolicyRule     *PolicyRule          `protobuf:"bytes,1,opt,name=policy_rule,json=policyRule,proto3" json:"policy_rule,omitempty"`
	ActivationTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=activation_time,json=activationTime,proto3" json:"activation_time,omitempty"`
	// Optional field. Set as 0 to mark as unused
	DeactivationTime     *timestamp.Timestamp `protobuf:"bytes,3,opt,name=deactivation_time,json=deactivationTime,proto3" json:"deactivation_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *DynamicRuleInstall) Reset()         { *m = DynamicRuleInstall{} }
func (m *DynamicRuleInstall) String() string { return proto.CompactTextString(m) }
func (*DynamicRuleInstall) ProtoMessage()    {}
func (*DynamicRuleInstall) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{43}
}

func (m *DynamicRuleInstall) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DynamicRuleInstall.Unmarshal(m, b)
}
func (m *DynamicRuleInstall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DynamicRuleInstall.Marshal(b, m, deterministic)
}
func (m *DynamicRuleInstall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynamicRuleInstall.Merge(m, src)
}
func (m *DynamicRuleInstall) XXX_Size() int {
	return xxx_messageInfo_DynamicRuleInstall.Size(m)
}
func (m *DynamicRuleInstall) XXX_DiscardUnknown() {
	xxx_messageInfo_DynamicRuleInstall.DiscardUnknown(m)
}

var xxx_messageInfo_DynamicRuleInstall proto.InternalMessageInfo

func (m *DynamicRuleInstall) GetPolicyRule() *PolicyRule {
	if m != nil {
		return m.PolicyRule
	}
	return nil
}

func (m *DynamicRuleInstall) GetActivationTime() *timestamp.Timestamp {
	if m != nil {
		return m.ActivationTime
	}
	return nil
}

func (m *DynamicRuleInstall) GetDeactivationTime() *timestamp.Timestamp {
	if m != nil {
		return m.DeactivationTime
	}
	return nil
}

type UpdateSessionRequest struct {
	Updates              []*CreditUsageUpdate            `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
	UsageMonitors        []*UsageMonitoringUpdateRequest `protobuf:"bytes,3,rep,name=usage_monitors,json=usageMonitors,proto3" json:"usage_monitors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *UpdateSessionRequest) Reset()         { *m = UpdateSessionRequest{} }
func (m *UpdateSessionRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateSessionRequest) ProtoMessage()    {}
func (*UpdateSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{44}
}

func (m *UpdateSessionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateSessionRequest.Unmarshal(m, b)
}
func (m *UpdateSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateSessionRequest.Marshal(b, m, deterministic)
}
func (m *UpdateSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSessionRequest.Merge(m, src)
}
func (m *UpdateSessionRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateSessionRequest.Size(m)
}
func (m *UpdateSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSessionRequest proto.InternalMessageInfo

func (m *UpdateSessionRequest) GetUpdates() []*CreditUsageUpdate {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *UpdateSessionRequest) GetUsageMonitors() []*UsageMonitoringUpdateRequest {
	if m != nil {
		return m.UsageMonitors
	}
	return nil
}

type UpdateSessionResponse struct {
	Responses             []*CreditUpdateResponse          `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
	UsageMonitorResponses []*UsageMonitoringUpdateResponse `protobuf:"bytes,3,rep,name=usage_monitor_responses,json=usageMonitorResponses,proto3" json:"usage_monitor_responses,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                         `json:"-"`
	XXX_unrecognized      []byte                           `json:"-"`
	XXX_sizecache         int32                            `json:"-"`
}

func (m *UpdateSessionResponse) Reset()         { *m = UpdateSessionResponse{} }
func (m *UpdateSessionResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateSessionResponse) ProtoMessage()    {}
func (*UpdateSessionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{45}
}

func (m *UpdateSessionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateSessionResponse.Unmarshal(m, b)
}
func (m *UpdateSessionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateSessionResponse.Marshal(b, m, deterministic)
}
func (m *UpdateSessionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSessionResponse.Merge(m, src)
}
func (m *UpdateSessionResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateSessionResponse.Size(m)
}
func (m *UpdateSessionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSessionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSessionResponse proto.InternalMessageInfo

func (m *UpdateSessionResponse) GetResponses() []*CreditUpdateResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

func (m *UpdateSessionResponse) GetUsageMonitorResponses() []*UsageMonitoringUpdateResponse {
	if m != nil {
		return m.UsageMonitorResponses
	}
	return nil
}

type SessionTerminateResponse struct {
	// IMSI
	Sid                  string   `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	SessionId            string   `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionTerminateResponse) Reset()         { *m = SessionTerminateResponse{} }
func (m *SessionTerminateResponse) String() string { return proto.CompactTextString(m) }
func (*SessionTerminateResponse) ProtoMessage()    {}
func (*SessionTerminateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{46}
}

func (m *SessionTerminateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionTerminateResponse.Unmarshal(m, b)
}
func (m *SessionTerminateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionTerminateResponse.Marshal(b, m, deterministic)
}
func (m *SessionTerminateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionTerminateResponse.Merge(m, src)
}
func (m *SessionTerminateResponse) XXX_Size() int {
	return xxx_messageInfo_SessionTerminateResponse.Size(m)
}
func (m *SessionTerminateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionTerminateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SessionTerminateResponse proto.InternalMessageInfo

func (m *SessionTerminateResponse) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *SessionTerminateResponse) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

type SessionTerminateRequest struct {
	SessionId     string                `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	RequestNumber uint32                `protobuf:"varint,4,opt,name=request_number,json=requestNumber,proto3" json:"request_number,omitempty"`
	CreditUsages  []*CreditUsage        `protobuf:"bytes,5,rep,name=credit_usages,json=creditUsages,proto3" json:"credit_usages,omitempty"`
	MonitorUsages []*UsageMonitorUpdate `protobuf:"bytes,6,rep,name=monitor_usages,json=monitorUsages,proto3" json:"monitor_usages,omitempty"`
	SpgwIpv4      string                `protobuf:"bytes,9,opt,name=spgw_ipv4,json=spgwIpv4,proto3" json:"spgw_ipv4,omitempty"`
	Imei          string                `protobuf:"bytes,10,opt,name=imei,proto3" json:"imei,omitempty"`
	PlmnId        string                `protobuf:"bytes,11,opt,name=plmn_id,json=plmnId,proto3" json:"plmn_id,omitempty"`
	ImsiPlmnId    string                `protobuf:"bytes,12,opt,name=imsi_plmn_id,json=imsiPlmnId,proto3" json:"imsi_plmn_id,omitempty"`
	UserLocation  []byte                `protobuf:"bytes,13,opt,name=user_location,json=userLocation,proto3" json:"user_location,omitempty"`
	// MAC Address for WLAN
	HardwareAddr            []byte                `protobuf:"bytes,15,opt,name=hardware_addr,json=hardwareAddr,proto3" json:"hardware_addr,omitempty"`
	TgppCtx                 *TgppContext          `protobuf:"bytes,16,opt,name=tgpp_ctx,json=tgppCtx,proto3" json:"tgpp_ctx,omitempty"`
	CommonContext           *CommonSessionContext `protobuf:"bytes,17,opt,name=common_context,json=commonContext,proto3" json:"common_context,omitempty"`
	ChargingCharacteristics string                `protobuf:"bytes,18,opt,name=charging_characteristics,json=chargingCharacteristics,proto3" json:"charging_characteristics,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}              `json:"-"`
	XXX_unrecognized        []byte                `json:"-"`
	XXX_sizecache           int32                 `json:"-"`
}

func (m *SessionTerminateRequest) Reset()         { *m = SessionTerminateRequest{} }
func (m *SessionTerminateRequest) String() string { return proto.CompactTextString(m) }
func (*SessionTerminateRequest) ProtoMessage()    {}
func (*SessionTerminateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{47}
}

func (m *SessionTerminateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionTerminateRequest.Unmarshal(m, b)
}
func (m *SessionTerminateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionTerminateRequest.Marshal(b, m, deterministic)
}
func (m *SessionTerminateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionTerminateRequest.Merge(m, src)
}
func (m *SessionTerminateRequest) XXX_Size() int {
	return xxx_messageInfo_SessionTerminateRequest.Size(m)
}
func (m *SessionTerminateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionTerminateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SessionTerminateRequest proto.InternalMessageInfo

func (m *SessionTerminateRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *SessionTerminateRequest) GetRequestNumber() uint32 {
	if m != nil {
		return m.RequestNumber
	}
	return 0
}

func (m *SessionTerminateRequest) GetCreditUsages() []*CreditUsage {
	if m != nil {
		return m.CreditUsages
	}
	return nil
}

func (m *SessionTerminateRequest) GetMonitorUsages() []*UsageMonitorUpdate {
	if m != nil {
		return m.MonitorUsages
	}
	return nil
}

func (m *SessionTerminateRequest) GetSpgwIpv4() string {
	if m != nil {
		return m.SpgwIpv4
	}
	return ""
}

func (m *SessionTerminateRequest) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

func (m *SessionTerminateRequest) GetPlmnId() string {
	if m != nil {
		return m.PlmnId
	}
	return ""
}

func (m *SessionTerminateRequest) GetImsiPlmnId() string {
	if m != nil {
		return m.ImsiPlmnId
	}
	return ""
}

func (m *SessionTerminateRequest) GetUserLocation() []byte {
	if m != nil {
		return m.UserLocation
	}
	return nil
}

func (m *SessionTerminateRequest) GetHardwareAddr() []byte {
	if m != nil {
		return m.HardwareAddr
	}
	return nil
}

func (m *SessionTerminateRequest) GetTgppCtx() *TgppContext {
	if m != nil {
		return m.TgppCtx
	}
	return nil
}

func (m *SessionTerminateRequest) GetCommonContext() *CommonSessionContext {
	if m != nil {
		return m.CommonContext
	}
	return nil
}

func (m *SessionTerminateRequest) GetChargingCharacteristics() string {
	if m != nil {
		return m.ChargingCharacteristics
	}
	return ""
}

type NodeID struct {
	NodeIdType           NodeID_NodeIDType `protobuf:"varint,1,opt,name=node_id_type,json=nodeIdType,proto3,enum=magma.lte.NodeID_NodeIDType" json:"node_id_type,omitempty"`
	NodeId               string            `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *NodeID) Reset()         { *m = NodeID{} }
func (m *NodeID) String() string { return proto.CompactTextString(m) }
func (*NodeID) ProtoMessage()    {}
func (*NodeID) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{48}
}

func (m *NodeID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeID.Unmarshal(m, b)
}
func (m *NodeID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeID.Marshal(b, m, deterministic)
}
func (m *NodeID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeID.Merge(m, src)
}
func (m *NodeID) XXX_Size() int {
	return xxx_messageInfo_NodeID.Size(m)
}
func (m *NodeID) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeID.DiscardUnknown(m)
}

var xxx_messageInfo_NodeID proto.InternalMessageInfo

func (m *NodeID) GetNodeIdType() NodeID_NodeIDType {
	if m != nil {
		return m.NodeIdType
	}
	return NodeID_IPv4
}

func (m *NodeID) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

//M5GSMCapability
type M5GSMCapability struct {
	ReflectiveQos            bool     `protobuf:"varint,1,opt,name=reflective_qos,json=reflectiveQos,proto3" json:"reflective_qos,omitempty"`
	MultiHomedIpv6PduSession bool     `protobuf:"varint,2,opt,name=multi_homed_ipv6_pdu_session,json=multiHomedIpv6PduSession,proto3" json:"multi_homed_ipv6_pdu_session,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *M5GSMCapability) Reset()         { *m = M5GSMCapability{} }
func (m *M5GSMCapability) String() string { return proto.CompactTextString(m) }
func (*M5GSMCapability) ProtoMessage()    {}
func (*M5GSMCapability) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{49}
}

func (m *M5GSMCapability) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_M5GSMCapability.Unmarshal(m, b)
}
func (m *M5GSMCapability) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_M5GSMCapability.Marshal(b, m, deterministic)
}
func (m *M5GSMCapability) XXX_Merge(src proto.Message) {
	xxx_messageInfo_M5GSMCapability.Merge(m, src)
}
func (m *M5GSMCapability) XXX_Size() int {
	return xxx_messageInfo_M5GSMCapability.Size(m)
}
func (m *M5GSMCapability) XXX_DiscardUnknown() {
	xxx_messageInfo_M5GSMCapability.DiscardUnknown(m)
}

var xxx_messageInfo_M5GSMCapability proto.InternalMessageInfo

func (m *M5GSMCapability) GetReflectiveQos() bool {
	if m != nil {
		return m.ReflectiveQos
	}
	return false
}

func (m *M5GSMCapability) GetMultiHomedIpv6PduSession() bool {
	if m != nil {
		return m.MultiHomedIpv6PduSession
	}
	return false
}

//RequestedQosRules and AuthorizedQosRules
type QosRules struct {
	QosRuleIdentifier      uint32   `protobuf:"varint,1,opt,name=qos_rule_identifier,json=qosRuleIdentifier,proto3" json:"qos_rule_identifier,omitempty"`
	Dqr                    bool     `protobuf:"varint,2,opt,name=dqr,proto3" json:"dqr,omitempty"`
	NumberOfPacketFilters  uint32   `protobuf:"varint,3,opt,name=number_of_packet_filters,json=numberOfPacketFilters,proto3" json:"number_of_packet_filters,omitempty"`
	PacketFilterIdentifier []int32  `protobuf:"varint,4,rep,packed,name=packet_filter_identifier,json=packetFilterIdentifier,proto3" json:"packet_filter_identifier,omitempty"`
	QosRulePrecedence      uint32   `protobuf:"varint,5,opt,name=qos_rule_precedence,json=qosRulePrecedence,proto3" json:"qos_rule_precedence,omitempty"`
	Segregation            bool     `protobuf:"varint,6,opt,name=segregation,proto3" json:"segregation,omitempty"`
	QosFlowIdentifier      uint32   `protobuf:"varint,7,opt,name=qos_flow_identifier,json=qosFlowIdentifier,proto3" json:"qos_flow_identifier,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *QosRules) Reset()         { *m = QosRules{} }
func (m *QosRules) String() string { return proto.CompactTextString(m) }
func (*QosRules) ProtoMessage()    {}
func (*QosRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{50}
}

func (m *QosRules) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QosRules.Unmarshal(m, b)
}
func (m *QosRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QosRules.Marshal(b, m, deterministic)
}
func (m *QosRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QosRules.Merge(m, src)
}
func (m *QosRules) XXX_Size() int {
	return xxx_messageInfo_QosRules.Size(m)
}
func (m *QosRules) XXX_DiscardUnknown() {
	xxx_messageInfo_QosRules.DiscardUnknown(m)
}

var xxx_messageInfo_QosRules proto.InternalMessageInfo

func (m *QosRules) GetQosRuleIdentifier() uint32 {
	if m != nil {
		return m.QosRuleIdentifier
	}
	return 0
}

func (m *QosRules) GetDqr() bool {
	if m != nil {
		return m.Dqr
	}
	return false
}

func (m *QosRules) GetNumberOfPacketFilters() uint32 {
	if m != nil {
		return m.NumberOfPacketFilters
	}
	return 0
}

func (m *QosRules) GetPacketFilterIdentifier() []int32 {
	if m != nil {
		return m.PacketFilterIdentifier
	}
	return nil
}

func (m *QosRules) GetQosRulePrecedence() uint32 {
	if m != nil {
		return m.QosRulePrecedence
	}
	return 0
}

func (m *QosRules) GetSegregation() bool {
	if m != nil {
		return m.Segregation
	}
	return false
}

func (m *QosRules) GetQosFlowIdentifier() uint32 {
	if m != nil {
		return m.QosFlowIdentifier
	}
	return 0
}

type LadnServiceArea struct {
	DnnValue             string                      `protobuf:"bytes,1,opt,name=dnn_value,json=dnnValue,proto3" json:"dnn_value,omitempty"`
	IdentityList         []*TrackingAreaIdentityList `protobuf:"bytes,2,rep,name=identity_list,json=identityList,proto3" json:"identity_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *LadnServiceArea) Reset()         { *m = LadnServiceArea{} }
func (m *LadnServiceArea) String() string { return proto.CompactTextString(m) }
func (*LadnServiceArea) ProtoMessage()    {}
func (*LadnServiceArea) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{51}
}

func (m *LadnServiceArea) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LadnServiceArea.Unmarshal(m, b)
}
func (m *LadnServiceArea) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LadnServiceArea.Marshal(b, m, deterministic)
}
func (m *LadnServiceArea) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LadnServiceArea.Merge(m, src)
}
func (m *LadnServiceArea) XXX_Size() int {
	return xxx_messageInfo_LadnServiceArea.Size(m)
}
func (m *LadnServiceArea) XXX_DiscardUnknown() {
	xxx_messageInfo_LadnServiceArea.DiscardUnknown(m)
}

var xxx_messageInfo_LadnServiceArea proto.InternalMessageInfo

func (m *LadnServiceArea) GetDnnValue() string {
	if m != nil {
		return m.DnnValue
	}
	return ""
}

func (m *LadnServiceArea) GetIdentityList() []*TrackingAreaIdentityList {
	if m != nil {
		return m.IdentityList
	}
	return nil
}

type TrackingAreaIdentityList struct {
	TypeOfList           []TypeOfList `protobuf:"varint,1,rep,packed,name=type_of_list,json=typeOfList,proto3,enum=magma.lte.TypeOfList" json:"type_of_list,omitempty"`
	NumberOfElements     []int32      `protobuf:"varint,2,rep,packed,name=number_of_elements,json=numberOfElements,proto3" json:"number_of_elements,omitempty"`
	MCC                  string       `protobuf:"bytes,3,opt,name=MCC,proto3" json:"MCC,omitempty"`
	MNC                  string       `protobuf:"bytes,4,opt,name=MNC,proto3" json:"MNC,omitempty"`
	TAC                  string       `protobuf:"bytes,5,opt,name=TAC,proto3" json:"TAC,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TrackingAreaIdentityList) Reset()         { *m = TrackingAreaIdentityList{} }
func (m *TrackingAreaIdentityList) String() string { return proto.CompactTextString(m) }
func (*TrackingAreaIdentityList) ProtoMessage()    {}
func (*TrackingAreaIdentityList) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{52}
}

func (m *TrackingAreaIdentityList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrackingAreaIdentityList.Unmarshal(m, b)
}
func (m *TrackingAreaIdentityList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrackingAreaIdentityList.Marshal(b, m, deterministic)
}
func (m *TrackingAreaIdentityList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackingAreaIdentityList.Merge(m, src)
}
func (m *TrackingAreaIdentityList) XXX_Size() int {
	return xxx_messageInfo_TrackingAreaIdentityList.Size(m)
}
func (m *TrackingAreaIdentityList) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackingAreaIdentityList.DiscardUnknown(m)
}

var xxx_messageInfo_TrackingAreaIdentityList proto.InternalMessageInfo

func (m *TrackingAreaIdentityList) GetTypeOfList() []TypeOfList {
	if m != nil {
		return m.TypeOfList
	}
	return nil
}

func (m *TrackingAreaIdentityList) GetNumberOfElements() []int32 {
	if m != nil {
		return m.NumberOfElements
	}
	return nil
}

func (m *TrackingAreaIdentityList) GetMCC() string {
	if m != nil {
		return m.MCC
	}
	return ""
}

func (m *TrackingAreaIdentityList) GetMNC() string {
	if m != nil {
		return m.MNC
	}
	return ""
}

func (m *TrackingAreaIdentityList) GetTAC() string {
	if m != nil {
		return m.TAC
	}
	return ""
}

//PDU session Establishment from AMF to SMF
//SET MESSSAGE
type M5GSMSessionContext struct {
	PduSessionId     []byte          `protobuf:"bytes,1,opt,name=pdu_session_id,json=pduSessionId,proto3" json:"pdu_session_id,omitempty"`
	RquestType       RequestType     `protobuf:"varint,2,opt,name=rquest_type,json=rquestType,proto3,enum=magma.lte.RequestType" json:"rquest_type,omitempty"`
	PduAddress       *RedirectServer `protobuf:"bytes,3,opt,name=pdu_address,json=pduAddress,proto3" json:"pdu_address,omitempty"`
	PriorityAccess   Priorityaccess  `protobuf:"varint,4,opt,name=priority_access,json=priorityAccess,proto3,enum=magma.lte.Priorityaccess" json:"priority_access,omitempty"`
	AccessType       AccessType      `protobuf:"varint,5,opt,name=access_type,json=accessType,proto3,enum=magma.lte.AccessType" json:"access_type,omitempty"`
	Imei             string          `protobuf:"bytes,8,opt,name=imei,proto3" json:"imei,omitempty"`
	Gpsi             string          `protobuf:"bytes,9,opt,name=gpsi,proto3" json:"gpsi,omitempty"`
	UserLocationInfo string          `protobuf:"bytes,10,opt,name=user_location_info,json=userLocationInfo,proto3" json:"user_location_info,omitempty"`
	PcfId            string          `protobuf:"bytes,11,opt,name=pcf_id,json=pcfId,proto3" json:"pcf_id,omitempty"`
	//Variable length of 20 bytes. TS-23.003 - 28.8 & TS-23.501 5.9.8
	LadnServiceArea                 []*LadnServiceArea `protobuf:"bytes,12,rep,name=ladn_service_area,json=ladnServiceArea,proto3" json:"ladn_service_area,omitempty"`
	PduSessionStatusNotificationSub bool               `protobuf:"varint,13,opt,name=pdu_session_status_notification_sub,json=pduSessionStatusNotificationSub,proto3" json:"pdu_session_status_notification_sub,omitempty"`
	DnnSelectionMode                DnnSelectionMode   `protobuf:"varint,14,opt,name=dnn_selection_mode,json=dnnSelectionMode,proto3,enum=magma.lte.DnnSelectionMode" json:"dnn_selection_mode,omitempty"`
	TraceRequirment                 string             `protobuf:"bytes,15,opt,name=trace_requirment,json=traceRequirment,proto3" json:"trace_requirment,omitempty"`
	IntegrityProtectionMaxDataRate  []byte             `protobuf:"bytes,16,opt,name=integrity_protection_max_data_rate,json=integrityProtectionMaxDataRate,proto3" json:"integrity_protection_max_data_rate,omitempty"`
	PduSessionType                  PduSessionType     `protobuf:"varint,17,opt,name=pdu_session_type,json=pduSessionType,proto3,enum=magma.lte.PduSessionType" json:"pdu_session_type,omitempty"`
	SscMode                         SscMode            `protobuf:"varint,18,opt,name=ssc_mode,json=sscMode,proto3,enum=magma.lte.SscMode" json:"ssc_mode,omitempty"`
	M5GSmCapability                 *M5GSMCapability   `protobuf:"bytes,19,opt,name=m5g_sm_capability,json=m5gSmCapability,proto3" json:"m5g_sm_capability,omitempty"`
	MaxPktFilterSupported           uint32             `protobuf:"varint,20,opt,name=max_pkt_filter_supported,json=maxPktFilterSupported,proto3" json:"max_pkt_filter_supported,omitempty"`
	PduSessionReqAlwaysOn           bool               `protobuf:"varint,21,opt,name=pdu_session_req_always_on,json=pduSessionReqAlwaysOn,proto3" json:"pdu_session_req_always_on,omitempty"`
	SmPduDnReq                      string             `protobuf:"bytes,22,opt,name=sm_pdu_dn_req,json=smPduDnReq,proto3" json:"sm_pdu_dn_req,omitempty"`
	M5GsmCause                      M5GSMCause         `protobuf:"varint,23,opt,name=m5gsm_cause,json=m5gsmCause,proto3,enum=magma.lte.M5GSMCause" json:"m5gsm_cause,omitempty"`
	RequestedQosRules               *QosRules          `protobuf:"bytes,24,opt,name=requested_qos_rules,json=requestedQosRules,proto3" json:"requested_qos_rules,omitempty"`
	XXX_NoUnkeyedLiteral            struct{}           `json:"-"`
	XXX_unrecognized                []byte             `json:"-"`
	XXX_sizecache                   int32              `json:"-"`
}

func (m *M5GSMSessionContext) Reset()         { *m = M5GSMSessionContext{} }
func (m *M5GSMSessionContext) String() string { return proto.CompactTextString(m) }
func (*M5GSMSessionContext) ProtoMessage()    {}
func (*M5GSMSessionContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{53}
}

func (m *M5GSMSessionContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_M5GSMSessionContext.Unmarshal(m, b)
}
func (m *M5GSMSessionContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_M5GSMSessionContext.Marshal(b, m, deterministic)
}
func (m *M5GSMSessionContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_M5GSMSessionContext.Merge(m, src)
}
func (m *M5GSMSessionContext) XXX_Size() int {
	return xxx_messageInfo_M5GSMSessionContext.Size(m)
}
func (m *M5GSMSessionContext) XXX_DiscardUnknown() {
	xxx_messageInfo_M5GSMSessionContext.DiscardUnknown(m)
}

var xxx_messageInfo_M5GSMSessionContext proto.InternalMessageInfo

func (m *M5GSMSessionContext) GetPduSessionId() []byte {
	if m != nil {
		return m.PduSessionId
	}
	return nil
}

func (m *M5GSMSessionContext) GetRquestType() RequestType {
	if m != nil {
		return m.RquestType
	}
	return RequestType_INITIAL_REQUEST
}

func (m *M5GSMSessionContext) GetPduAddress() *RedirectServer {
	if m != nil {
		return m.PduAddress
	}
	return nil
}

func (m *M5GSMSessionContext) GetPriorityAccess() Priorityaccess {
	if m != nil {
		return m.PriorityAccess
	}
	return Priorityaccess_High
}

func (m *M5GSMSessionContext) GetAccessType() AccessType {
	if m != nil {
		return m.AccessType
	}
	return AccessType_M_3GPP_ACCESS_3GPP
}

func (m *M5GSMSessionContext) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

func (m *M5GSMSessionContext) GetGpsi() string {
	if m != nil {
		return m.Gpsi
	}
	return ""
}

func (m *M5GSMSessionContext) GetUserLocationInfo() string {
	if m != nil {
		return m.UserLocationInfo
	}
	return ""
}

func (m *M5GSMSessionContext) GetPcfId() string {
	if m != nil {
		return m.PcfId
	}
	return ""
}

func (m *M5GSMSessionContext) GetLadnServiceArea() []*LadnServiceArea {
	if m != nil {
		return m.LadnServiceArea
	}
	return nil
}

func (m *M5GSMSessionContext) GetPduSessionStatusNotificationSub() bool {
	if m != nil {
		return m.PduSessionStatusNotificationSub
	}
	return false
}

func (m *M5GSMSessionContext) GetDnnSelectionMode() DnnSelectionMode {
	if m != nil {
		return m.DnnSelectionMode
	}
	return DnnSelectionMode_VERIFIED
}

func (m *M5GSMSessionContext) GetTraceRequirment() string {
	if m != nil {
		return m.TraceRequirment
	}
	return ""
}

func (m *M5GSMSessionContext) GetIntegrityProtectionMaxDataRate() []byte {
	if m != nil {
		return m.IntegrityProtectionMaxDataRate
	}
	return nil
}

func (m *M5GSMSessionContext) GetPduSessionType() PduSessionType {
	if m != nil {
		return m.PduSessionType
	}
	return PduSessionType_IPV4
}

func (m *M5GSMSessionContext) GetSscMode() SscMode {
	if m != nil {
		return m.SscMode
	}
	return SscMode_SSC_MODE_1
}

func (m *M5GSMSessionContext) GetM5GSmCapability() *M5GSMCapability {
	if m != nil {
		return m.M5GSmCapability
	}
	return nil
}

func (m *M5GSMSessionContext) GetMaxPktFilterSupported() uint32 {
	if m != nil {
		return m.MaxPktFilterSupported
	}
	return 0
}

func (m *M5GSMSessionContext) GetPduSessionReqAlwaysOn() bool {
	if m != nil {
		return m.PduSessionReqAlwaysOn
	}
	return false
}

func (m *M5GSMSessionContext) GetSmPduDnReq() string {
	if m != nil {
		return m.SmPduDnReq
	}
	return ""
}

func (m *M5GSMSessionContext) GetM5GsmCause() M5GSMCause {
	if m != nil {
		return m.M5GsmCause
	}
	return M5GSMCause_OPERATOR_DETERMINED_BARRING
}

func (m *M5GSMSessionContext) GetRequestedQosRules() *QosRules {
	if m != nil {
		return m.RequestedQosRules
	}
	return nil
}

type SetSMSessionContext struct {
	CommonContext        *CommonSessionContext `protobuf:"bytes,1,opt,name=common_context,json=commonContext,proto3" json:"common_context,omitempty"`
	RatSpecificContext   *RatSpecificContext   `protobuf:"bytes,2,opt,name=rat_specific_context,json=ratSpecificContext,proto3" json:"rat_specific_context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SetSMSessionContext) Reset()         { *m = SetSMSessionContext{} }
func (m *SetSMSessionContext) String() string { return proto.CompactTextString(m) }
func (*SetSMSessionContext) ProtoMessage()    {}
func (*SetSMSessionContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{54}
}

func (m *SetSMSessionContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetSMSessionContext.Unmarshal(m, b)
}
func (m *SetSMSessionContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetSMSessionContext.Marshal(b, m, deterministic)
}
func (m *SetSMSessionContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetSMSessionContext.Merge(m, src)
}
func (m *SetSMSessionContext) XXX_Size() int {
	return xxx_messageInfo_SetSMSessionContext.Size(m)
}
func (m *SetSMSessionContext) XXX_DiscardUnknown() {
	xxx_messageInfo_SetSMSessionContext.DiscardUnknown(m)
}

var xxx_messageInfo_SetSMSessionContext proto.InternalMessageInfo

func (m *SetSMSessionContext) GetCommonContext() *CommonSessionContext {
	if m != nil {
		return m.CommonContext
	}
	return nil
}

func (m *SetSMSessionContext) GetRatSpecificContext() *RatSpecificContext {
	if m != nil {
		return m.RatSpecificContext
	}
	return nil
}

//TODO This supposed to be empty message and the element will be removed later
type SmContextVoid struct {
	Output               string   `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SmContextVoid) Reset()         { *m = SmContextVoid{} }
func (m *SmContextVoid) String() string { return proto.CompactTextString(m) }
func (*SmContextVoid) ProtoMessage()    {}
func (*SmContextVoid) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{55}
}

func (m *SmContextVoid) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SmContextVoid.Unmarshal(m, b)
}
func (m *SmContextVoid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SmContextVoid.Marshal(b, m, deterministic)
}
func (m *SmContextVoid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmContextVoid.Merge(m, src)
}
func (m *SmContextVoid) XXX_Size() int {
	return xxx_messageInfo_SmContextVoid.Size(m)
}
func (m *SmContextVoid) XXX_DiscardUnknown() {
	xxx_messageInfo_SmContextVoid.DiscardUnknown(m)
}

var xxx_messageInfo_SmContextVoid proto.InternalMessageInfo

func (m *SmContextVoid) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

//4G response message has not been refactored yet. Hence only considering M5G.
type RatSpecificContextAccess struct {
	//oneof context {//TODO need to be implemented after 4G refactored
	//LTESessionContextAccess lte_context = 1;
	M5GSessionContextRsp *M5GSMSessionContextAccess `protobuf:"bytes,2,opt,name=m5g_session_context_rsp,json=m5gSessionContextRsp,proto3" json:"m5g_session_context_rsp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *RatSpecificContextAccess) Reset()         { *m = RatSpecificContextAccess{} }
func (m *RatSpecificContextAccess) String() string { return proto.CompactTextString(m) }
func (*RatSpecificContextAccess) ProtoMessage()    {}
func (*RatSpecificContextAccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{56}
}

func (m *RatSpecificContextAccess) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RatSpecificContextAccess.Unmarshal(m, b)
}
func (m *RatSpecificContextAccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RatSpecificContextAccess.Marshal(b, m, deterministic)
}
func (m *RatSpecificContextAccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RatSpecificContextAccess.Merge(m, src)
}
func (m *RatSpecificContextAccess) XXX_Size() int {
	return xxx_messageInfo_RatSpecificContextAccess.Size(m)
}
func (m *RatSpecificContextAccess) XXX_DiscardUnknown() {
	xxx_messageInfo_RatSpecificContextAccess.DiscardUnknown(m)
}

var xxx_messageInfo_RatSpecificContextAccess proto.InternalMessageInfo

func (m *RatSpecificContextAccess) GetM5GSessionContextRsp() *M5GSMSessionContextAccess {
	if m != nil {
		return m.M5GSessionContextRsp
	}
	return nil
}

type M5GSMSessionContextAccess struct {
	//One byte, received from UE. For 5G pdu_session_id.
	PduSessionId []byte `protobuf:"bytes,1,opt,name=pdu_session_id,json=pduSessionId,proto3" json:"pdu_session_id,omitempty"`
	//selected PDU session TS-24501 - 9.11.4.11
	PduSessionType PduSessionType `protobuf:"varint,2,opt,name=pdu_session_type,json=pduSessionType,proto3,enum=magma.lte.PduSessionType" json:"pdu_session_type,omitempty"`
	//selected session and service continuty mode TS-24501 - 9.11.4.16
	SelectedSscMode SscMode `protobuf:"varint,3,opt,name=selected_ssc_mode,json=selectedSscMode,proto3,enum=magma.lte.SscMode" json:"selected_ssc_mode,omitempty"`
	//TS-24501 - 9.11.4.3 - minimum 7 and max 65538, variable length
	AuthorizedQosRules []*QosRules `protobuf:"bytes,4,rep,name=authorized_qos_rules,json=authorizedQosRules,proto3" json:"authorized_qos_rules,omitempty"`
	//TS-24501 - 9.11.4.14 PDU session Aggregate Maximum Bit Rate imported from subscriberdb.proto
	SessionAmbr *AggregatedMaximumBitrate `protobuf:"bytes,5,opt,name=session_ambr,json=sessionAmbr,proto3" json:"session_ambr,omitempty"`
	M5GsmCause  M5GSMCause                `protobuf:"varint,6,opt,name=M5gsm_cause,json=M5gsmCause,proto3,enum=magma.lte.M5GSMCause" json:"M5gsm_cause,omitempty"`
	//PDU session is requested to be established as always-on PDU session.
	AlwaysOnPduSessionIndication     bool    `protobuf:"varint,7,opt,name=always_on_pdu_session_indication,json=alwaysOnPduSessionIndication,proto3" json:"always_on_pdu_session_indication,omitempty"`
	AllowedSscMode                   SscMode `protobuf:"varint,8,opt,name=allowed_ssc_mode,json=allowedSscMode,proto3,enum=magma.lte.SscMode" json:"allowed_ssc_mode,omitempty"`
	M5GsmCongetionReAttemptIndicator bool    `protobuf:"varint,9,opt,name=M5gsm_congetion_re_attempt_indicator,json=M5gsmCongetionReAttemptIndicator,proto3" json:"M5gsm_congetion_re_attempt_indicator,omitempty"`
	//IP address. Imported from session_manager.proto file.
	PduAddress           *RedirectServer `protobuf:"bytes,12,opt,name=pdu_address,json=pduAddress,proto3" json:"pdu_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *M5GSMSessionContextAccess) Reset()         { *m = M5GSMSessionContextAccess{} }
func (m *M5GSMSessionContextAccess) String() string { return proto.CompactTextString(m) }
func (*M5GSMSessionContextAccess) ProtoMessage()    {}
func (*M5GSMSessionContextAccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{57}
}

func (m *M5GSMSessionContextAccess) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_M5GSMSessionContextAccess.Unmarshal(m, b)
}
func (m *M5GSMSessionContextAccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_M5GSMSessionContextAccess.Marshal(b, m, deterministic)
}
func (m *M5GSMSessionContextAccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_M5GSMSessionContextAccess.Merge(m, src)
}
func (m *M5GSMSessionContextAccess) XXX_Size() int {
	return xxx_messageInfo_M5GSMSessionContextAccess.Size(m)
}
func (m *M5GSMSessionContextAccess) XXX_DiscardUnknown() {
	xxx_messageInfo_M5GSMSessionContextAccess.DiscardUnknown(m)
}

var xxx_messageInfo_M5GSMSessionContextAccess proto.InternalMessageInfo

func (m *M5GSMSessionContextAccess) GetPduSessionId() []byte {
	if m != nil {
		return m.PduSessionId
	}
	return nil
}

func (m *M5GSMSessionContextAccess) GetPduSessionType() PduSessionType {
	if m != nil {
		return m.PduSessionType
	}
	return PduSessionType_IPV4
}

func (m *M5GSMSessionContextAccess) GetSelectedSscMode() SscMode {
	if m != nil {
		return m.SelectedSscMode
	}
	return SscMode_SSC_MODE_1
}

func (m *M5GSMSessionContextAccess) GetAuthorizedQosRules() []*QosRules {
	if m != nil {
		return m.AuthorizedQosRules
	}
	return nil
}

func (m *M5GSMSessionContextAccess) GetSessionAmbr() *AggregatedMaximumBitrate {
	if m != nil {
		return m.SessionAmbr
	}
	return nil
}

func (m *M5GSMSessionContextAccess) GetM5GsmCause() M5GSMCause {
	if m != nil {
		return m.M5GsmCause
	}
	return M5GSMCause_OPERATOR_DETERMINED_BARRING
}

func (m *M5GSMSessionContextAccess) GetAlwaysOnPduSessionIndication() bool {
	if m != nil {
		return m.AlwaysOnPduSessionIndication
	}
	return false
}

func (m *M5GSMSessionContextAccess) GetAllowedSscMode() SscMode {
	if m != nil {
		return m.AllowedSscMode
	}
	return SscMode_SSC_MODE_1
}

func (m *M5GSMSessionContextAccess) GetM5GsmCongetionReAttemptIndicator() bool {
	if m != nil {
		return m.M5GsmCongetionReAttemptIndicator
	}
	return false
}

func (m *M5GSMSessionContextAccess) GetPduAddress() *RedirectServer {
	if m != nil {
		return m.PduAddress
	}
	return nil
}

type SetSMSessionContextAccess struct {
	CommonContext        *CommonSessionContext     `protobuf:"bytes,1,opt,name=common_context,json=commonContext,proto3" json:"common_context,omitempty"`
	RatSpecificContext   *RatSpecificContextAccess `protobuf:"bytes,2,opt,name=rat_specific_context,json=ratSpecificContext,proto3" json:"rat_specific_context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *SetSMSessionContextAccess) Reset()         { *m = SetSMSessionContextAccess{} }
func (m *SetSMSessionContextAccess) String() string { return proto.CompactTextString(m) }
func (*SetSMSessionContextAccess) ProtoMessage()    {}
func (*SetSMSessionContextAccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{58}
}

func (m *SetSMSessionContextAccess) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetSMSessionContextAccess.Unmarshal(m, b)
}
func (m *SetSMSessionContextAccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetSMSessionContextAccess.Marshal(b, m, deterministic)
}
func (m *SetSMSessionContextAccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetSMSessionContextAccess.Merge(m, src)
}
func (m *SetSMSessionContextAccess) XXX_Size() int {
	return xxx_messageInfo_SetSMSessionContextAccess.Size(m)
}
func (m *SetSMSessionContextAccess) XXX_DiscardUnknown() {
	xxx_messageInfo_SetSMSessionContextAccess.DiscardUnknown(m)
}

var xxx_messageInfo_SetSMSessionContextAccess proto.InternalMessageInfo

func (m *SetSMSessionContextAccess) GetCommonContext() *CommonSessionContext {
	if m != nil {
		return m.CommonContext
	}
	return nil
}

func (m *SetSMSessionContextAccess) GetRatSpecificContext() *RatSpecificContextAccess {
	if m != nil {
		return m.RatSpecificContext
	}
	return nil
}

// Node Level Messages from UPF. Purely Event Based.
type UPFNodeState struct {
	UpfId string `protobuf:"bytes,1,opt,name=upf_id,json=upfId,proto3" json:"upf_id,omitempty"`
	// Types that are valid to be assigned to UpfNodeMessages:
	//	*UPFNodeState_AssociatonState
	//	*UPFNodeState_NodeReport
	UpfNodeMessages      isUPFNodeState_UpfNodeMessages `protobuf_oneof:"upf_node_messages"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *UPFNodeState) Reset()         { *m = UPFNodeState{} }
func (m *UPFNodeState) String() string { return proto.CompactTextString(m) }
func (*UPFNodeState) ProtoMessage()    {}
func (*UPFNodeState) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{59}
}

func (m *UPFNodeState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UPFNodeState.Unmarshal(m, b)
}
func (m *UPFNodeState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UPFNodeState.Marshal(b, m, deterministic)
}
func (m *UPFNodeState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UPFNodeState.Merge(m, src)
}
func (m *UPFNodeState) XXX_Size() int {
	return xxx_messageInfo_UPFNodeState.Size(m)
}
func (m *UPFNodeState) XXX_DiscardUnknown() {
	xxx_messageInfo_UPFNodeState.DiscardUnknown(m)
}

var xxx_messageInfo_UPFNodeState proto.InternalMessageInfo

func (m *UPFNodeState) GetUpfId() string {
	if m != nil {
		return m.UpfId
	}
	return ""
}

type isUPFNodeState_UpfNodeMessages interface {
	isUPFNodeState_UpfNodeMessages()
}

type UPFNodeState_AssociatonState struct {
	AssociatonState *UPFAssociationState `protobuf:"bytes,2,opt,name=associaton_state,json=associatonState,proto3,oneof"`
}

type UPFNodeState_NodeReport struct {
	NodeReport *UPFNodeReport `protobuf:"bytes,3,opt,name=node_report,json=nodeReport,proto3,oneof"`
}

func (*UPFNodeState_AssociatonState) isUPFNodeState_UpfNodeMessages() {}

func (*UPFNodeState_NodeReport) isUPFNodeState_UpfNodeMessages() {}

func (m *UPFNodeState) GetUpfNodeMessages() isUPFNodeState_UpfNodeMessages {
	if m != nil {
		return m.UpfNodeMessages
	}
	return nil
}

func (m *UPFNodeState) GetAssociatonState() *UPFAssociationState {
	if x, ok := m.GetUpfNodeMessages().(*UPFNodeState_AssociatonState); ok {
		return x.AssociatonState
	}
	return nil
}

func (m *UPFNodeState) GetNodeReport() *UPFNodeReport {
	if x, ok := m.GetUpfNodeMessages().(*UPFNodeState_NodeReport); ok {
		return x.NodeReport
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UPFNodeState) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UPFNodeState_AssociatonState)(nil),
		(*UPFNodeState_NodeReport)(nil),
	}
}

//15.8 (Sec 8.2.82 User Plane IP Resource Information)
type UserPlaneIPResourceSchema struct {
	Ipv4Address          string   `protobuf:"bytes,1,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv6Address          string   `protobuf:"bytes,2,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	TeidRangeIndication  uint32   `protobuf:"varint,3,opt,name=teid_range_indication,json=teidRangeIndication,proto3" json:"teid_range_indication,omitempty"`
	TeidRange            uint32   `protobuf:"varint,4,opt,name=teid_range,json=teidRange,proto3" json:"teid_range,omitempty"`
	AssocNetworkInstance string   `protobuf:"bytes,5,opt,name=assoc_network_instance,json=assocNetworkInstance,proto3" json:"assoc_network_instance,omitempty"`
	AssocSourceInterface uint32   `protobuf:"varint,6,opt,name=assoc_source_interface,json=assocSourceInterface,proto3" json:"assoc_source_interface,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserPlaneIPResourceSchema) Reset()         { *m = UserPlaneIPResourceSchema{} }
func (m *UserPlaneIPResourceSchema) String() string { return proto.CompactTextString(m) }
func (*UserPlaneIPResourceSchema) ProtoMessage()    {}
func (*UserPlaneIPResourceSchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{60}
}

func (m *UserPlaneIPResourceSchema) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserPlaneIPResourceSchema.Unmarshal(m, b)
}
func (m *UserPlaneIPResourceSchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserPlaneIPResourceSchema.Marshal(b, m, deterministic)
}
func (m *UserPlaneIPResourceSchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPlaneIPResourceSchema.Merge(m, src)
}
func (m *UserPlaneIPResourceSchema) XXX_Size() int {
	return xxx_messageInfo_UserPlaneIPResourceSchema.Size(m)
}
func (m *UserPlaneIPResourceSchema) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPlaneIPResourceSchema.DiscardUnknown(m)
}

var xxx_messageInfo_UserPlaneIPResourceSchema proto.InternalMessageInfo

func (m *UserPlaneIPResourceSchema) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *UserPlaneIPResourceSchema) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

func (m *UserPlaneIPResourceSchema) GetTeidRangeIndication() uint32 {
	if m != nil {
		return m.TeidRangeIndication
	}
	return 0
}

func (m *UserPlaneIPResourceSchema) GetTeidRange() uint32 {
	if m != nil {
		return m.TeidRange
	}
	return 0
}

func (m *UserPlaneIPResourceSchema) GetAssocNetworkInstance() string {
	if m != nil {
		return m.AssocNetworkInstance
	}
	return ""
}

func (m *UserPlaneIPResourceSchema) GetAssocSourceInterface() uint32 {
	if m != nil {
		return m.AssocSourceInterface
	}
	return 0
}

// 15.8 (Sec 7.4.4.3) : PFCP Association Update Reqest.
type UPFAssociationState struct {
	// Version of the associated state
	StateVersion uint32 `protobuf:"varint,2,opt,name=state_version,json=stateVersion,proto3" json:"state_version,omitempty"`
	//Association state of the UPF
	AssocState UPFAssociationState_AssociationState `protobuf:"varint,3,opt,name=assoc_state,json=assocState,proto3,enum=magma.lte.UPFAssociationState_AssociationState" json:"assoc_state,omitempty"`
	// Time when UPF got started
	RecoveryTimeStamp *timestamp.Timestamp `protobuf:"bytes,4,opt,name=recovery_time_stamp,json=recoveryTimeStamp,proto3" json:"recovery_time_stamp,omitempty"`
	// Feature set supported by UPF
	FeatureSet *UPFFeatureSet `protobuf:"bytes,5,opt,name=feature_set,json=featureSet,proto3" json:"feature_set,omitempty"`
	// User plane IP Resource schema
	IpResourceSchema      []*UserPlaneIPResourceSchema `protobuf:"bytes,6,rep,name=ip_resource_schema,json=ipResourceSchema,proto3" json:"ip_resource_schema,omitempty"`
	GracefulReleasePeriod *timestamp.Timestamp         `protobuf:"bytes,7,opt,name=graceful_release_period,json=gracefulReleasePeriod,proto3" json:"graceful_release_period,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                     `json:"-"`
	XXX_unrecognized      []byte                       `json:"-"`
	XXX_sizecache         int32                        `json:"-"`
}

func (m *UPFAssociationState) Reset()         { *m = UPFAssociationState{} }
func (m *UPFAssociationState) String() string { return proto.CompactTextString(m) }
func (*UPFAssociationState) ProtoMessage()    {}
func (*UPFAssociationState) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{61}
}

func (m *UPFAssociationState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UPFAssociationState.Unmarshal(m, b)
}
func (m *UPFAssociationState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UPFAssociationState.Marshal(b, m, deterministic)
}
func (m *UPFAssociationState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UPFAssociationState.Merge(m, src)
}
func (m *UPFAssociationState) XXX_Size() int {
	return xxx_messageInfo_UPFAssociationState.Size(m)
}
func (m *UPFAssociationState) XXX_DiscardUnknown() {
	xxx_messageInfo_UPFAssociationState.DiscardUnknown(m)
}

var xxx_messageInfo_UPFAssociationState proto.InternalMessageInfo

func (m *UPFAssociationState) GetStateVersion() uint32 {
	if m != nil {
		return m.StateVersion
	}
	return 0
}

func (m *UPFAssociationState) GetAssocState() UPFAssociationState_AssociationState {
	if m != nil {
		return m.AssocState
	}
	return UPFAssociationState_STARTED
}

func (m *UPFAssociationState) GetRecoveryTimeStamp() *timestamp.Timestamp {
	if m != nil {
		return m.RecoveryTimeStamp
	}
	return nil
}

func (m *UPFAssociationState) GetFeatureSet() *UPFFeatureSet {
	if m != nil {
		return m.FeatureSet
	}
	return nil
}

func (m *UPFAssociationState) GetIpResourceSchema() []*UserPlaneIPResourceSchema {
	if m != nil {
		return m.IpResourceSchema
	}
	return nil
}

func (m *UPFAssociationState) GetGracefulReleasePeriod() *timestamp.Timestamp {
	if m != nil {
		return m.GracefulReleasePeriod
	}
	return nil
}

type UPFFeatureSet struct {
	// 15.8 (Sec 8.2.25) :  UP Function Features
	DownlinkDataBufferingCp       bool `protobuf:"varint,1,opt,name=downlink_data_buffering_cp,json=downlinkDataBufferingCp,proto3" json:"downlink_data_buffering_cp,omitempty"`
	DownlinkDataNotificationDelay bool `protobuf:"varint,2,opt,name=downlink_data_notification_delay,json=downlinkDataNotificationDelay,proto3" json:"downlink_data_notification_delay,omitempty"`
	// Buffering parameter, Downlink DataNotification Delay supported by UPF
	DlBufferingDuration           bool `protobuf:"varint,3,opt,name=dl_buffering_duration,json=dlBufferingDuration,proto3" json:"dl_buffering_duration,omitempty"`
	TrafficSteering               bool `protobuf:"varint,4,opt,name=traffic_steering,json=trafficSteering,proto3" json:"traffic_steering,omitempty"`
	FTeid                         bool `protobuf:"varint,5,opt,name=f_teid,json=fTeid,proto3" json:"f_teid,omitempty"`
	PfdManagement                 bool `protobuf:"varint,6,opt,name=pfd_management,json=pfdManagement,proto3" json:"pfd_management,omitempty"`
	HeaderEnrichmentUplink        bool `protobuf:"varint,7,opt,name=header_enrichment_uplink,json=headerEnrichmentUplink,proto3" json:"header_enrichment_uplink,omitempty"`
	TrafficRedirectionEnforcement bool `protobuf:"varint,8,opt,name=traffic_redirection_enforcement,json=trafficRedirectionEnforcement,proto3" json:"traffic_redirection_enforcement,omitempty"`
	// Traffic Redirection Enforcement in the UP function is supported in UPF
	EndOfMarkerPacket         bool     `protobuf:"varint,9,opt,name=end_of_marker_packet,json=endOfMarkerPacket,proto3" json:"end_of_marker_packet,omitempty"`
	PdiOptimizationSignalling bool     `protobuf:"varint,10,opt,name=pdi_optimization_signalling,json=pdiOptimizationSignalling,proto3" json:"pdi_optimization_signalling,omitempty"`
	UlDlBufferingControl      bool     `protobuf:"varint,11,opt,name=ul_dl_buffering_control,json=ulDlBufferingControl,proto3" json:"ul_dl_buffering_control,omitempty"`
	QuotaApplicationToApply   bool     `protobuf:"varint,12,opt,name=quota_application_to_apply,json=quotaApplicationToApply,proto3" json:"quota_application_to_apply,omitempty"`
	Trace                     bool     `protobuf:"varint,13,opt,name=trace,proto3" json:"trace,omitempty"`
	FrameRouting              bool     `protobuf:"varint,14,opt,name=frame_routing,json=frameRouting,proto3" json:"frame_routing,omitempty"`
	PfdContents               bool     `protobuf:"varint,15,opt,name=pfd_contents,json=pfdContents,proto3" json:"pfd_contents,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *UPFFeatureSet) Reset()         { *m = UPFFeatureSet{} }
func (m *UPFFeatureSet) String() string { return proto.CompactTextString(m) }
func (*UPFFeatureSet) ProtoMessage()    {}
func (*UPFFeatureSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{62}
}

func (m *UPFFeatureSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UPFFeatureSet.Unmarshal(m, b)
}
func (m *UPFFeatureSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UPFFeatureSet.Marshal(b, m, deterministic)
}
func (m *UPFFeatureSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UPFFeatureSet.Merge(m, src)
}
func (m *UPFFeatureSet) XXX_Size() int {
	return xxx_messageInfo_UPFFeatureSet.Size(m)
}
func (m *UPFFeatureSet) XXX_DiscardUnknown() {
	xxx_messageInfo_UPFFeatureSet.DiscardUnknown(m)
}

var xxx_messageInfo_UPFFeatureSet proto.InternalMessageInfo

func (m *UPFFeatureSet) GetDownlinkDataBufferingCp() bool {
	if m != nil {
		return m.DownlinkDataBufferingCp
	}
	return false
}

func (m *UPFFeatureSet) GetDownlinkDataNotificationDelay() bool {
	if m != nil {
		return m.DownlinkDataNotificationDelay
	}
	return false
}

func (m *UPFFeatureSet) GetDlBufferingDuration() bool {
	if m != nil {
		return m.DlBufferingDuration
	}
	return false
}

func (m *UPFFeatureSet) GetTrafficSteering() bool {
	if m != nil {
		return m.TrafficSteering
	}
	return false
}

func (m *UPFFeatureSet) GetFTeid() bool {
	if m != nil {
		return m.FTeid
	}
	return false
}

func (m *UPFFeatureSet) GetPfdManagement() bool {
	if m != nil {
		return m.PfdManagement
	}
	return false
}

func (m *UPFFeatureSet) GetHeaderEnrichmentUplink() bool {
	if m != nil {
		return m.HeaderEnrichmentUplink
	}
	return false
}

func (m *UPFFeatureSet) GetTrafficRedirectionEnforcement() bool {
	if m != nil {
		return m.TrafficRedirectionEnforcement
	}
	return false
}

func (m *UPFFeatureSet) GetEndOfMarkerPacket() bool {
	if m != nil {
		return m.EndOfMarkerPacket
	}
	return false
}

func (m *UPFFeatureSet) GetPdiOptimizationSignalling() bool {
	if m != nil {
		return m.PdiOptimizationSignalling
	}
	return false
}

func (m *UPFFeatureSet) GetUlDlBufferingControl() bool {
	if m != nil {
		return m.UlDlBufferingControl
	}
	return false
}

func (m *UPFFeatureSet) GetQuotaApplicationToApply() bool {
	if m != nil {
		return m.QuotaApplicationToApply
	}
	return false
}

func (m *UPFFeatureSet) GetTrace() bool {
	if m != nil {
		return m.Trace
	}
	return false
}

func (m *UPFFeatureSet) GetFrameRouting() bool {
	if m != nil {
		return m.FrameRouting
	}
	return false
}

func (m *UPFFeatureSet) GetPfdContents() bool {
	if m != nil {
		return m.PfdContents
	}
	return false
}

//15.8 (Sec 7.4.5.1) : PFCP Node Report Request
type UPFNodeReport struct {
	StateVersion         uint32                      `protobuf:"varint,2,opt,name=state_version,json=stateVersion,proto3" json:"state_version,omitempty"`
	LoadControlInfo      *LoadControlInformation     `protobuf:"bytes,3,opt,name=load_control_info,json=loadControlInfo,proto3" json:"load_control_info,omitempty"`
	OverloadControlInfo  *OverloadControlInformation `protobuf:"bytes,4,opt,name=overload_control_info,json=overloadControlInfo,proto3" json:"overload_control_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *UPFNodeReport) Reset()         { *m = UPFNodeReport{} }
func (m *UPFNodeReport) String() string { return proto.CompactTextString(m) }
func (*UPFNodeReport) ProtoMessage()    {}
func (*UPFNodeReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{63}
}

func (m *UPFNodeReport) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UPFNodeReport.Unmarshal(m, b)
}
func (m *UPFNodeReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UPFNodeReport.Marshal(b, m, deterministic)
}
func (m *UPFNodeReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UPFNodeReport.Merge(m, src)
}
func (m *UPFNodeReport) XXX_Size() int {
	return xxx_messageInfo_UPFNodeReport.Size(m)
}
func (m *UPFNodeReport) XXX_DiscardUnknown() {
	xxx_messageInfo_UPFNodeReport.DiscardUnknown(m)
}

var xxx_messageInfo_UPFNodeReport proto.InternalMessageInfo

func (m *UPFNodeReport) GetStateVersion() uint32 {
	if m != nil {
		return m.StateVersion
	}
	return 0
}

func (m *UPFNodeReport) GetLoadControlInfo() *LoadControlInformation {
	if m != nil {
		return m.LoadControlInfo
	}
	return nil
}

func (m *UPFNodeReport) GetOverloadControlInfo() *OverloadControlInformation {
	if m != nil {
		return m.OverloadControlInfo
	}
	return nil
}

// 15.8 (Table 7.5.3.3-1) : Load Control Information
type LoadControlInformation struct {
	LoadControlSeqNumber uint32   `protobuf:"varint,1,opt,name=load_control_seq_number,json=loadControlSeqNumber,proto3" json:"load_control_seq_number,omitempty"`
	LoadMetric           uint32   `protobuf:"varint,2,opt,name=load_metric,json=loadMetric,proto3" json:"load_metric,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoadControlInformation) Reset()         { *m = LoadControlInformation{} }
func (m *LoadControlInformation) String() string { return proto.CompactTextString(m) }
func (*LoadControlInformation) ProtoMessage()    {}
func (*LoadControlInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{64}
}

func (m *LoadControlInformation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadControlInformation.Unmarshal(m, b)
}
func (m *LoadControlInformation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadControlInformation.Marshal(b, m, deterministic)
}
func (m *LoadControlInformation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadControlInformation.Merge(m, src)
}
func (m *LoadControlInformation) XXX_Size() int {
	return xxx_messageInfo_LoadControlInformation.Size(m)
}
func (m *LoadControlInformation) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadControlInformation.DiscardUnknown(m)
}

var xxx_messageInfo_LoadControlInformation proto.InternalMessageInfo

func (m *LoadControlInformation) GetLoadControlSeqNumber() uint32 {
	if m != nil {
		return m.LoadControlSeqNumber
	}
	return 0
}

func (m *LoadControlInformation) GetLoadMetric() uint32 {
	if m != nil {
		return m.LoadMetric
	}
	return 0
}

// 15.8 (Sec 8.2.35) : Timer
type OverloadTimer struct {
	TimerUnit            uint32   `protobuf:"varint,1,opt,name=timer_unit,json=timerUnit,proto3" json:"timer_unit,omitempty"`
	TimerValue           uint32   `protobuf:"varint,2,opt,name=timer_value,json=timerValue,proto3" json:"timer_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OverloadTimer) Reset()         { *m = OverloadTimer{} }
func (m *OverloadTimer) String() string { return proto.CompactTextString(m) }
func (*OverloadTimer) ProtoMessage()    {}
func (*OverloadTimer) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{65}
}

func (m *OverloadTimer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OverloadTimer.Unmarshal(m, b)
}
func (m *OverloadTimer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OverloadTimer.Marshal(b, m, deterministic)
}
func (m *OverloadTimer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OverloadTimer.Merge(m, src)
}
func (m *OverloadTimer) XXX_Size() int {
	return xxx_messageInfo_OverloadTimer.Size(m)
}
func (m *OverloadTimer) XXX_DiscardUnknown() {
	xxx_messageInfo_OverloadTimer.DiscardUnknown(m)
}

var xxx_messageInfo_OverloadTimer proto.InternalMessageInfo

func (m *OverloadTimer) GetTimerUnit() uint32 {
	if m != nil {
		return m.TimerUnit
	}
	return 0
}

func (m *OverloadTimer) GetTimerValue() uint32 {
	if m != nil {
		return m.TimerValue
	}
	return 0
}

// 15.8 (Sec 7.5.3.4) : Overload Control Information
type OverloadControlInformation struct {
	OverloadCtrlSeqno       uint32         `protobuf:"varint,1,opt,name=overload_ctrl_seqno,json=overloadCtrlSeqno,proto3" json:"overload_ctrl_seqno,omitempty"`
	OverloadReductionMetric uint32         `protobuf:"varint,2,opt,name=overload_reduction_metric,json=overloadReductionMetric,proto3" json:"overload_reduction_metric,omitempty"`
	PeriodOfValidity        *OverloadTimer `protobuf:"bytes,3,opt,name=period_of_validity,json=periodOfValidity,proto3" json:"period_of_validity,omitempty"`
	Flags                   uint32         `protobuf:"varint,4,opt,name=flags,proto3" json:"flags,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}       `json:"-"`
	XXX_unrecognized        []byte         `json:"-"`
	XXX_sizecache           int32          `json:"-"`
}

func (m *OverloadControlInformation) Reset()         { *m = OverloadControlInformation{} }
func (m *OverloadControlInformation) String() string { return proto.CompactTextString(m) }
func (*OverloadControlInformation) ProtoMessage()    {}
func (*OverloadControlInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{66}
}

func (m *OverloadControlInformation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OverloadControlInformation.Unmarshal(m, b)
}
func (m *OverloadControlInformation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OverloadControlInformation.Marshal(b, m, deterministic)
}
func (m *OverloadControlInformation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OverloadControlInformation.Merge(m, src)
}
func (m *OverloadControlInformation) XXX_Size() int {
	return xxx_messageInfo_OverloadControlInformation.Size(m)
}
func (m *OverloadControlInformation) XXX_DiscardUnknown() {
	xxx_messageInfo_OverloadControlInformation.DiscardUnknown(m)
}

var xxx_messageInfo_OverloadControlInformation proto.InternalMessageInfo

func (m *OverloadControlInformation) GetOverloadCtrlSeqno() uint32 {
	if m != nil {
		return m.OverloadCtrlSeqno
	}
	return 0
}

func (m *OverloadControlInformation) GetOverloadReductionMetric() uint32 {
	if m != nil {
		return m.OverloadReductionMetric
	}
	return 0
}

func (m *OverloadControlInformation) GetPeriodOfValidity() *OverloadTimer {
	if m != nil {
		return m.PeriodOfValidity
	}
	return nil
}

func (m *OverloadControlInformation) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

// Current Session snapshot in UPF.
type UPFSessionState struct {
	SubscriberId         string   `protobuf:"bytes,1,opt,name=subscriber_id,json=subscriberId,proto3" json:"subscriber_id,omitempty"`
	SessionVersion       uint32   `protobuf:"varint,2,opt,name=session_version,json=sessionVersion,proto3" json:"session_version,omitempty"`
	LocalFTeid           uint32   `protobuf:"varint,3,opt,name=local_f_teid,json=localFTeid,proto3" json:"local_f_teid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UPFSessionState) Reset()         { *m = UPFSessionState{} }
func (m *UPFSessionState) String() string { return proto.CompactTextString(m) }
func (*UPFSessionState) ProtoMessage()    {}
func (*UPFSessionState) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{67}
}

func (m *UPFSessionState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UPFSessionState.Unmarshal(m, b)
}
func (m *UPFSessionState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UPFSessionState.Marshal(b, m, deterministic)
}
func (m *UPFSessionState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UPFSessionState.Merge(m, src)
}
func (m *UPFSessionState) XXX_Size() int {
	return xxx_messageInfo_UPFSessionState.Size(m)
}
func (m *UPFSessionState) XXX_DiscardUnknown() {
	xxx_messageInfo_UPFSessionState.DiscardUnknown(m)
}

var xxx_messageInfo_UPFSessionState proto.InternalMessageInfo

func (m *UPFSessionState) GetSubscriberId() string {
	if m != nil {
		return m.SubscriberId
	}
	return ""
}

func (m *UPFSessionState) GetSessionVersion() uint32 {
	if m != nil {
		return m.SessionVersion
	}
	return 0
}

func (m *UPFSessionState) GetLocalFTeid() uint32 {
	if m != nil {
		return m.LocalFTeid
	}
	return 0
}

// Perodic Session snapshot information from UPF to SMF
type UPFSessionConfigState struct {
	UpfSessionState      []*UPFSessionState `protobuf:"bytes,1,rep,name=upf_session_state,json=upfSessionState,proto3" json:"upf_session_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *UPFSessionConfigState) Reset()         { *m = UPFSessionConfigState{} }
func (m *UPFSessionConfigState) String() string { return proto.CompactTextString(m) }
func (*UPFSessionConfigState) ProtoMessage()    {}
func (*UPFSessionConfigState) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{68}
}

func (m *UPFSessionConfigState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UPFSessionConfigState.Unmarshal(m, b)
}
func (m *UPFSessionConfigState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UPFSessionConfigState.Marshal(b, m, deterministic)
}
func (m *UPFSessionConfigState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UPFSessionConfigState.Merge(m, src)
}
func (m *UPFSessionConfigState) XXX_Size() int {
	return xxx_messageInfo_UPFSessionConfigState.Size(m)
}
func (m *UPFSessionConfigState) XXX_DiscardUnknown() {
	xxx_messageInfo_UPFSessionConfigState.DiscardUnknown(m)
}

var xxx_messageInfo_UPFSessionConfigState proto.InternalMessageInfo

func (m *UPFSessionConfigState) GetUpfSessionState() []*UPFSessionState {
	if m != nil {
		return m.UpfSessionState
	}
	return nil
}

type UPFPagingInfo struct {
	LocalFTeid           uint32   `protobuf:"varint,1,opt,name=local_f_teid,json=localFTeid,proto3" json:"local_f_teid,omitempty"`
	UeIpAddr             string   `protobuf:"bytes,2,opt,name=ue_ip_addr,json=ueIpAddr,proto3" json:"ue_ip_addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UPFPagingInfo) Reset()         { *m = UPFPagingInfo{} }
func (m *UPFPagingInfo) String() string { return proto.CompactTextString(m) }
func (*UPFPagingInfo) ProtoMessage()    {}
func (*UPFPagingInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_85add0446af78174, []int{69}
}

func (m *UPFPagingInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UPFPagingInfo.Unmarshal(m, b)
}
func (m *UPFPagingInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UPFPagingInfo.Marshal(b, m, deterministic)
}
func (m *UPFPagingInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UPFPagingInfo.Merge(m, src)
}
func (m *UPFPagingInfo) XXX_Size() int {
	return xxx_messageInfo_UPFPagingInfo.Size(m)
}
func (m *UPFPagingInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UPFPagingInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UPFPagingInfo proto.InternalMessageInfo

func (m *UPFPagingInfo) GetLocalFTeid() uint32 {
	if m != nil {
		return m.LocalFTeid
	}
	return 0
}

func (m *UPFPagingInfo) GetUeIpAddr() string {
	if m != nil {
		return m.UeIpAddr
	}
	return ""
}

func init() {
	proto.RegisterEnum("magma.lte.RATType", RATType_name, RATType_value)
	proto.RegisterEnum("magma.lte.EventTrigger", EventTrigger_name, EventTrigger_value)
	proto.RegisterEnum("magma.lte.QCI", QCI_name, QCI_value)
	proto.RegisterEnum("magma.lte.ReAuthResult", ReAuthResult_name, ReAuthResult_value)
	proto.RegisterEnum("magma.lte.CreditLimitType", CreditLimitType_name, CreditLimitType_value)
	proto.RegisterEnum("magma.lte.MonitoringLevel", MonitoringLevel_name, MonitoringLevel_value)
	proto.RegisterEnum("magma.lte.PduSessionType", PduSessionType_name, PduSessionType_value)
	proto.RegisterEnum("magma.lte.SscMode", SscMode_name, SscMode_value)
	proto.RegisterEnum("magma.lte.M5GSMCause", M5GSMCause_name, M5GSMCause_value)
	proto.RegisterEnum("magma.lte.RequestType", RequestType_name, RequestType_value)
	proto.RegisterEnum("magma.lte.AccessType", AccessType_name, AccessType_value)
	proto.RegisterEnum("magma.lte.DnnSelectionMode", DnnSelectionMode_name, DnnSelectionMode_value)
	proto.RegisterEnum("magma.lte.TypeOfList", TypeOfList_name, TypeOfList_value)
	proto.RegisterEnum("magma.lte.Priorityaccess", Priorityaccess_name, Priorityaccess_value)
	proto.RegisterEnum("magma.lte.SMSessionFSMState", SMSessionFSMState_name, SMSessionFSMState_value)
	proto.RegisterEnum("magma.lte.ChargingReAuthRequest_Type", ChargingReAuthRequest_Type_name, ChargingReAuthRequest_Type_value)
	proto.RegisterEnum("magma.lte.PolicyReAuthAnswer_FailureCode", PolicyReAuthAnswer_FailureCode_name, PolicyReAuthAnswer_FailureCode_value)
	proto.RegisterEnum("magma.lte.RedirectServer_RedirectAddressType", RedirectServer_RedirectAddressType_name, RedirectServer_RedirectAddressType_value)
	proto.RegisterEnum("magma.lte.ChargingCredit_UnitType", ChargingCredit_UnitType_name, ChargingCredit_UnitType_value)
	proto.RegisterEnum("magma.lte.ChargingCredit_FinalAction", ChargingCredit_FinalAction_name, ChargingCredit_FinalAction_value)
	proto.RegisterEnum("magma.lte.CreditUsage_UpdateType", CreditUsage_UpdateType_name, CreditUsage_UpdateType_value)
	proto.RegisterEnum("magma.lte.UsageMonitoringCredit_Action", UsageMonitoringCredit_Action_name, UsageMonitoringCredit_Action_value)
	proto.RegisterEnum("magma.lte.QosInformationRequest_BitrateUnitsAMBR", QosInformationRequest_BitrateUnitsAMBR_name, QosInformationRequest_BitrateUnitsAMBR_value)
	proto.RegisterEnum("magma.lte.NodeID_NodeIDType", NodeID_NodeIDType_name, NodeID_NodeIDType_value)
	proto.RegisterEnum("magma.lte.UserPlaneIPResourceSchema_InterfaceValue", UserPlaneIPResourceSchema_InterfaceValue_name, UserPlaneIPResourceSchema_InterfaceValue_value)
	proto.RegisterEnum("magma.lte.UPFAssociationState_AssociationState", UPFAssociationState_AssociationState_name, UPFAssociationState_AssociationState_value)
	proto.RegisterType((*RuleRecord)(nil), "magma.lte.RuleRecord")
	proto.RegisterType((*RuleRecordTable)(nil), "magma.lte.RuleRecordTable")
	proto.RegisterType((*LocalCreateSessionRequest)(nil), "magma.lte.LocalCreateSessionRequest")
	proto.RegisterType((*Teids)(nil), "magma.lte.Teids")
	proto.RegisterType((*CommonSessionContext)(nil), "magma.lte.CommonSessionContext")
	proto.RegisterType((*RatSpecificContext)(nil), "magma.lte.RatSpecificContext")
	proto.RegisterType((*RatSpecificNotification)(nil), "magma.lte.RatSpecificNotification")
	proto.RegisterType((*SetSmNotificationContext)(nil), "magma.lte.SetSmNotificationContext")
	proto.RegisterType((*LTESessionContext)(nil), "magma.lte.LTESessionContext")
	proto.RegisterType((*WLANSessionContext)(nil), "magma.lte.WLANSessionContext")
	proto.RegisterType((*LocalCreateSessionResponse)(nil), "magma.lte.LocalCreateSessionResponse")
	proto.RegisterType((*LocalEndSessionRequest)(nil), "magma.lte.LocalEndSessionRequest")
	proto.RegisterType((*LocalEndSessionResponse)(nil), "magma.lte.LocalEndSessionResponse")
	proto.RegisterType((*UpdateTunnelIdsRequest)(nil), "magma.lte.UpdateTunnelIdsRequest")
	proto.RegisterType((*UpdateTunnelIdsResponse)(nil), "magma.lte.UpdateTunnelIdsResponse")
	proto.RegisterType((*PolicyBearerBindingRequest)(nil), "magma.lte.PolicyBearerBindingRequest")
	proto.RegisterType((*PolicyBearerBindingResponse)(nil), "magma.lte.PolicyBearerBindingResponse")
	proto.RegisterType((*ChargingReAuthRequest)(nil), "magma.lte.ChargingReAuthRequest")
	proto.RegisterType((*ChargingReAuthAnswer)(nil), "magma.lte.ChargingReAuthAnswer")
	proto.RegisterType((*PolicyReAuthRequest)(nil), "magma.lte.PolicyReAuthRequest")
	proto.RegisterType((*QoSInformation)(nil), "magma.lte.QoSInformation")
	proto.RegisterType((*PolicyReAuthAnswer)(nil), "magma.lte.PolicyReAuthAnswer")
	proto.RegisterMapType((map[string]PolicyReAuthAnswer_FailureCode)(nil), "magma.lte.PolicyReAuthAnswer.FailedRulesEntry")
	proto.RegisterType((*RuleSet)(nil), "magma.lte.RuleSet")
	proto.RegisterType((*RulesPerSubscriber)(nil), "magma.lte.RulesPerSubscriber")
	proto.RegisterType((*SessionRules)(nil), "magma.lte.SessionRules")
	proto.RegisterType((*Timezone)(nil), "magma.lte.Timezone")
	proto.RegisterType((*CreditUnit)(nil), "magma.lte.CreditUnit")
	proto.RegisterType((*GrantedUnits)(nil), "magma.lte.GrantedUnits")
	proto.RegisterType((*RedirectServer)(nil), "magma.lte.RedirectServer")
	proto.RegisterType((*ChargingCredit)(nil), "magma.lte.ChargingCredit")
	proto.RegisterType((*RequestedUnits)(nil), "magma.lte.RequestedUnits")
	proto.RegisterType((*CreditUsage)(nil), "magma.lte.CreditUsage")
	proto.RegisterType((*CreditUsageUpdate)(nil), "magma.lte.CreditUsageUpdate")
	proto.RegisterType((*CreditUpdateResponse)(nil), "magma.lte.CreditUpdateResponse")
	proto.RegisterType((*UsageMonitorUpdate)(nil), "magma.lte.UsageMonitorUpdate")
	proto.RegisterType((*UsageMonitoringCredit)(nil), "magma.lte.UsageMonitoringCredit")
	proto.RegisterType((*UsageMonitoringUpdateRequest)(nil), "magma.lte.UsageMonitoringUpdateRequest")
	proto.RegisterType((*UsageMonitoringUpdateResponse)(nil), "magma.lte.UsageMonitoringUpdateResponse")
	proto.RegisterType((*QosInformationRequest)(nil), "magma.lte.QosInformationRequest")
	proto.RegisterType((*TgppContext)(nil), "magma.lte.TgppContext")
	proto.RegisterType((*CreateSessionRequest)(nil), "magma.lte.CreateSessionRequest")
	proto.RegisterType((*CreateSessionResponse)(nil), "magma.lte.CreateSessionResponse")
	proto.RegisterType((*StaticRuleInstall)(nil), "magma.lte.StaticRuleInstall")
	proto.RegisterType((*DynamicRuleInstall)(nil), "magma.lte.DynamicRuleInstall")
	proto.RegisterType((*UpdateSessionRequest)(nil), "magma.lte.UpdateSessionRequest")
	proto.RegisterType((*UpdateSessionResponse)(nil), "magma.lte.UpdateSessionResponse")
	proto.RegisterType((*SessionTerminateResponse)(nil), "magma.lte.SessionTerminateResponse")
	proto.RegisterType((*SessionTerminateRequest)(nil), "magma.lte.SessionTerminateRequest")
	proto.RegisterType((*NodeID)(nil), "magma.lte.NodeID")
	proto.RegisterType((*M5GSMCapability)(nil), "magma.lte.M5GSMCapability")
	proto.RegisterType((*QosRules)(nil), "magma.lte.QosRules")
	proto.RegisterType((*LadnServiceArea)(nil), "magma.lte.LadnServiceArea")
	proto.RegisterType((*TrackingAreaIdentityList)(nil), "magma.lte.TrackingAreaIdentityList")
	proto.RegisterType((*M5GSMSessionContext)(nil), "magma.lte.M5GSMSessionContext")
	proto.RegisterType((*SetSMSessionContext)(nil), "magma.lte.SetSMSessionContext")
	proto.RegisterType((*SmContextVoid)(nil), "magma.lte.SmContextVoid")
	proto.RegisterType((*RatSpecificContextAccess)(nil), "magma.lte.RatSpecificContextAccess")
	proto.RegisterType((*M5GSMSessionContextAccess)(nil), "magma.lte.M5GSMSessionContextAccess")
	proto.RegisterType((*SetSMSessionContextAccess)(nil), "magma.lte.SetSMSessionContextAccess")
	proto.RegisterType((*UPFNodeState)(nil), "magma.lte.UPFNodeState")
	proto.RegisterType((*UserPlaneIPResourceSchema)(nil), "magma.lte.UserPlaneIPResourceSchema")
	proto.RegisterType((*UPFAssociationState)(nil), "magma.lte.UPFAssociationState")
	proto.RegisterType((*UPFFeatureSet)(nil), "magma.lte.UPFFeatureSet")
	proto.RegisterType((*UPFNodeReport)(nil), "magma.lte.UPFNodeReport")
	proto.RegisterType((*LoadControlInformation)(nil), "magma.lte.LoadControlInformation")
	proto.RegisterType((*OverloadTimer)(nil), "magma.lte.OverloadTimer")
	proto.RegisterType((*OverloadControlInformation)(nil), "magma.lte.OverloadControlInformation")
	proto.RegisterType((*UPFSessionState)(nil), "magma.lte.UPFSessionState")
	proto.RegisterType((*UPFSessionConfigState)(nil), "magma.lte.UPFSessionConfigState")
	proto.RegisterType((*UPFPagingInfo)(nil), "magma.lte.UPFPagingInfo")
}

func init() { proto.RegisterFile("lte/protos/session_manager.proto", fileDescriptor_85add0446af78174) }

var fileDescriptor_85add0446af78174 = []byte{
	// 8507 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0xbc, 0x4b, 0x6c, 0x1b, 0xd9,
	0x9a, 0x18, 0x2c, 0x52, 0x2f, 0xea, 0x23, 0x25, 0x95, 0x8e, 0x5e, 0x94, 0xda, 0x0f, 0x35, 0xdd,
	0xee, 0xf6, 0xf5, 0xed, 0x96, 0xbb, 0xd5, 0x6d, 0x77, 0xfb, 0xf6, 0x9d, 0xee, 0xbf, 0x54, 0x2c,
	0x4a, 0x75, 0xcd, 0x97, 0x4f, 0x15, 0xe5, 0x76, 0xff, 0xc8, 0x9c, 0x94, 0x58, 0x87, 0x72, 0xc5,
	0x24, 0x8b, 0xae, 0x2a, 0xda, 0xd2, 0xdd, 0x05, 0x77, 0x95, 0x45, 0x56, 0x83, 0x20, 0x98, 0x4d,
	0x66, 0x31, 0xc8, 0x2a, 0x40, 0x36, 0x49, 0x30, 0xc9, 0x64, 0x31, 0x99, 0x60, 0x90, 0xd9, 0x05,
	0x59, 0x04, 0x59, 0x04, 0x41, 0x10, 0x64, 0x91, 0x45, 0x90, 0x45, 0x76, 0x03, 0x24, 0x9b, 0xe0,
	0x3c, 0xaa, 0x58, 0x45, 0x52, 0xb2, 0xec, 0xee, 0xc5, 0x05, 0x04, 0x88, 0xe7, 0x3b, 0xdf, 0x79,
	0x7f, 0xaf, 0xf3, 0x9d, 0xef, 0x2b, 0xd8, 0xeb, 0x86, 0xf4, 0xc1, 0xc0, 0xf7, 0x42, 0x2f, 0x78,
	0x10, 0xd0, 0x20, 0x70, 0xbd, 0x3e, 0xe9, 0xd9, 0x7d, 0xfb, 0x8c, 0xfa, 0xfb, 0x1c, 0x8c, 0x96,
	0x7a, 0xf6, 0x59, 0xcf, 0xde, 0xef, 0x86, 0x74, 0x77, 0xc7, 0xf3, 0xdb, 0xdf, 0xf8, 0x11, 0x7a,
	0xdb, 0xeb, 0xf5, 0xbc, 0xbe, 0xc0, 0xda, 0xdd, 0x48, 0xf4, 0x63, 0x0f, 0x22, 0xe8, 0x4e, 0x02,
	0x3a, 0xf0, 0xba, 0x6e, 0xfb, 0xc2, 0x39, 0x95, 0x55, 0x37, 0x93, 0x03, 0x0f, 0x4f, 0x83, 0xb6,
	0xef, 0x9e, 0x52, 0x3f, 0xae, 0xbe, 0x7d, 0xe6, 0x79, 0x67, 0x5d, 0x89, 0x71, 0x3a, 0xec, 0x3c,
	0x08, 0xdd, 0x1e, 0x0d, 0x42, 0xbb, 0x37, 0x10, 0x08, 0xa5, 0x3f, 0xcb, 0x02, 0xe0, 0x61, 0x97,
	0x62, 0xda, 0xf6, 0x7c, 0x07, 0x29, 0x30, 0x1b, 0xb8, 0x4e, 0x31, 0xb3, 0x97, 0xb9, 0xb7, 0x84,
	0xd9, 0x4f, 0xb4, 0x0d, 0x8b, 0xfe, 0xb0, 0x4b, 0x89, 0xeb, 0x14, 0xb3, 0x1c, 0xba, 0xc0, 0x8a,
	0x86, 0x83, 0x76, 0x20, 0x77, 0x7a, 0x11, 0xd2, 0x80, 0x84, 0xe7, 0xc5, 0xd9, 0xbd, 0xcc, 0xbd,
	0x39, 0xbc, 0xc8, 0xcb, 0xd6, 0xf9, 0xa8, 0xca, 0x3f, 0x2f, 0xce, 0x25, 0xaa, 0xf0, 0x39, 0xeb,
	0x6e, 0x48, 0x89, 0x3b, 0x78, 0xfd, 0x55, 0x71, 0x5e, 0x74, 0x37, 0xa4, 0xc6, 0xe0, 0xf5, 0x57,
	0xa3, 0x8a, 0x47, 0xc5, 0x85, 0x44, 0xc5, 0x23, 0x74, 0x13, 0xc0, 0xf1, 0xbd, 0xc1, 0x80, 0x3a,
	0x6c, 0xa4, 0x45, 0xde, 0xdd, 0x92, 0x84, 0x58, 0xe7, 0xc9, 0x6a, 0xff, 0xbc, 0x98, 0x4b, 0x55,
	0xe3, 0x73, 0xf4, 0x21, 0x14, 0xf8, 0xf4, 0x5f, 0x53, 0x9f, 0x1d, 0x4a, 0x71, 0x89, 0x23, 0xe4,
	0x19, 0xec, 0x44, 0x80, 0x10, 0x82, 0xb9, 0x90, 0xba, 0x4e, 0x11, 0xf6, 0x32, 0xf7, 0x96, 0x31,
	0xff, 0xcd, 0x9a, 0x75, 0xdc, 0xbe, 0xdd, 0x25, 0x3e, 0xdf, 0x97, 0x62, 0x7e, 0x2f, 0x73, 0x2f,
	0x87, 0xf3, 0x1c, 0x26, 0xb6, 0xaa, 0xf4, 0x03, 0xac, 0x8e, 0x36, 0xce, 0xb2, 0x4f, 0xbb, 0x14,
	0x3d, 0x80, 0x45, 0x81, 0x1f, 0x14, 0x33, 0x7b, 0xb3, 0xf7, 0xf2, 0x07, 0x9b, 0xfb, 0xf1, 0xa9,
	0xef, 0x8f, 0x90, 0x71, 0x84, 0x85, 0x36, 0x60, 0x9e, 0x0e, 0xbc, 0xf6, 0x0b, 0xbe, 0xb5, 0x73,
	0x58, 0x14, 0x4a, 0xff, 0x3c, 0x03, 0x3b, 0x55, 0xaf, 0x6d, 0x77, 0x35, 0x9f, 0xda, 0x21, 0x35,
	0x05, 0x3d, 0x61, 0xfa, 0x6a, 0x48, 0x83, 0x10, 0x55, 0x60, 0x45, 0x90, 0x0c, 0x69, 0x7b, 0xfd,
	0x90, 0x9e, 0x87, 0x45, 0x65, 0x2f, 0x73, 0x2f, 0x7f, 0x70, 0x3b, 0x31, 0x96, 0xc6, 0x11, 0x64,
	0x43, 0x4d, 0xa0, 0xe1, 0x65, 0xd1, 0x4c, 0x16, 0x51, 0x03, 0x36, 0x7c, 0x3b, 0x24, 0xc1, 0x80,
	0xb6, 0xdd, 0x8e, 0xdb, 0x8e, 0x7b, 0x5b, 0xe3, 0xbd, 0xdd, 0x4c, 0xce, 0xdc, 0x0e, 0x4d, 0x89,
	0x15, 0xf5, 0x85, 0xfc, 0x09, 0x58, 0xe9, 0x0f, 0x60, 0xde, 0xa2, 0xae, 0x13, 0xb0, 0xe3, 0xa7,
	0xfd, 0x53, 0xc2, 0x37, 0x75, 0x96, 0x6f, 0xea, 0x22, 0xed, 0x9f, 0xb2, 0x3a, 0x56, 0x65, 0x9f,
	0xbd, 0x11, 0x55, 0x73, 0xa2, 0xca, 0x3e, 0x7b, 0xc3, 0xaa, 0x4a, 0xff, 0x33, 0x0b, 0x1b, 0xd3,
	0xe6, 0x8d, 0x7e, 0x31, 0xa2, 0xc9, 0xfc, 0xc1, 0x76, 0x62, 0x5e, 0x66, 0x4c, 0xef, 0x46, 0x39,
	0x26, 0xd6, 0x88, 0xba, 0x66, 0x53, 0xd4, 0xa5, 0xc0, 0xac, 0x3d, 0xe8, 0xf3, 0x21, 0x97, 0x30,
	0xfb, 0x89, 0xb6, 0x60, 0xa1, 0x17, 0xb8, 0x81, 0xd3, 0xe7, 0x74, 0x58, 0xc0, 0xb2, 0x84, 0x3e,
	0x83, 0x1c, 0xdb, 0x96, 0xf0, 0x62, 0x40, 0x39, 0x21, 0xae, 0x1c, 0xa0, 0xe4, 0x56, 0xa8, 0x96,
	0x75, 0x31, 0xa0, 0x78, 0xd1, 0xb7, 0x43, 0xf6, 0x03, 0x55, 0x40, 0x09, 0x7a, 0x24, 0x62, 0xf9,
	0x20, 0xb4, 0x43, 0xca, 0x69, 0x74, 0xe5, 0xe0, 0x46, 0x72, 0xa6, 0x35, 0xb9, 0xa6, 0x8a, 0x59,
	0x33, 0x19, 0x0e, 0x5e, 0x09, 0x7a, 0x12, 0xc4, 0xcb, 0xe8, 0x53, 0x40, 0x89, 0x7e, 0x92, 0xd4,
	0xba, 0x8c, 0x95, 0x18, 0x37, 0x22, 0xd9, 0x04, 0xb3, 0x40, 0x8a, 0x59, 0x3e, 0x86, 0x79, 0xb6,
	0xb7, 0x01, 0x27, 0xd8, 0xfc, 0x81, 0x92, 0x98, 0x03, 0x3f, 0x1b, 0x2c, 0xaa, 0x4b, 0xff, 0x27,
	0x03, 0x68, 0xf2, 0x58, 0xd1, 0xf7, 0x90, 0xef, 0x86, 0x74, 0x8c, 0x14, 0x92, 0x0b, 0xa9, 0x5a,
	0x7a, 0xfa, 0x74, 0x8e, 0x67, 0x30, 0x74, 0x43, 0x1a, 0x75, 0x70, 0x08, 0x85, 0x37, 0x5d, 0x7b,
	0x44, 0x9a, 0x68, 0x82, 0x98, 0x9e, 0x55, 0xd5, 0xfa, 0x44, 0x17, 0x79, 0xd6, 0x28, 0xea, 0xc3,
	0x82, 0xcd, 0xde, 0xc3, 0xb3, 0xc4, 0x6e, 0x44, 0x9d, 0xad, 0xf3, 0xce, 0x6e, 0x25, 0x3a, 0xab,
	0x3d, 0x3c, 0x8a, 0xb7, 0x76, 0xd4, 0xdb, 0x3a, 0x6f, 0x9e, 0x06, 0x1f, 0x2e, 0xc1, 0xa2, 0xec,
	0xa7, 0xf4, 0x37, 0x59, 0xd8, 0x4e, 0x2c, 0xbe, 0xee, 0x85, 0xec, 0x9f, 0x1d, 0xb2, 0x9d, 0xfd,
	0x08, 0x56, 0x06, 0xce, 0x30, 0x1e, 0x5a, 0xd2, 0x5d, 0x01, 0x17, 0x06, 0xce, 0x50, 0xf6, 0x68,
	0x38, 0xe8, 0x31, 0x14, 0x7c, 0xc1, 0x8e, 0x82, 0x50, 0xb2, 0xfc, 0xc4, 0xb7, 0x92, 0x84, 0x22,
	0xaa, 0x39, 0xb1, 0xe4, 0xfd, 0x51, 0x01, 0x3d, 0x82, 0xbc, 0xdd, 0x6e, 0xd3, 0x20, 0x10, 0x2d,
	0x67, 0x79, 0xcb, 0xa4, 0x9c, 0x50, 0x79, 0x2d, 0x6f, 0x08, 0x76, 0xfc, 0x1b, 0x69, 0xa0, 0x24,
	0x27, 0xc6, 0x1b, 0xcf, 0xf1, 0xc6, 0x3b, 0x89, 0xc6, 0xcd, 0x78, 0x96, 0xbc, 0x83, 0x95, 0x41,
	0xaa, 0x8c, 0x2a, 0xb0, 0xd6, 0x7b, 0x78, 0x46, 0x82, 0x1e, 0x69, 0xdb, 0x03, 0xfb, 0xd4, 0xed,
	0xba, 0xe1, 0x05, 0xa7, 0xff, 0xfc, 0xc1, 0xee, 0xf8, 0xb6, 0x6a, 0x31, 0x06, 0x5e, 0xed, 0x3d,
	0x3c, 0x33, 0x7b, 0x23, 0x00, 0x5b, 0x84, 0x38, 0xa2, 0xb6, 0x3d, 0x0c, 0x22, 0x3e, 0xd9, 0x9c,
	0xec, 0x61, 0x18, 0x50, 0x0c, 0x1c, 0x93, 0xff, 0x2e, 0xfd, 0xdb, 0x0c, 0x14, 0x4d, 0x1a, 0x9a,
	0xbd, 0xe4, 0x9e, 0x47, 0xe7, 0x3e, 0x29, 0xd8, 0x32, 0xef, 0x25, 0xd8, 0xfe, 0x10, 0x76, 0x52,
	0x82, 0xad, 0x9f, 0x18, 0x8b, 0x9f, 0x54, 0xfe, 0xa0, 0x34, 0x5d, 0xba, 0x25, 0x67, 0x85, 0xb7,
	0xfd, 0xe9, 0x15, 0xa5, 0x7f, 0x95, 0x85, 0xb5, 0x09, 0x3e, 0x40, 0x1f, 0xc0, 0x52, 0x30, 0x38,
	0x7b, 0x23, 0x84, 0x8f, 0xd0, 0x9f, 0x39, 0x06, 0xe0, 0xe2, 0x07, 0xc1, 0x9c, 0xdb, 0xa3, 0xae,
	0xd4, 0xa0, 0xfc, 0x37, 0xe3, 0xe1, 0x41, 0xb7, 0xc7, 0x49, 0x4c, 0xca, 0x2a, 0x56, 0x34, 0x1c,
	0xb4, 0x07, 0x05, 0xb7, 0x17, 0xb8, 0x24, 0xaa, 0x15, 0x42, 0x0b, 0x18, 0xac, 0x29, 0x30, 0xee,
	0xc0, 0xf2, 0x30, 0xa0, 0x3e, 0xe9, 0x7a, 0x72, 0x55, 0x42, 0x84, 0x15, 0x18, 0xb0, 0x2a, 0x61,
	0xe8, 0x5b, 0xc8, 0xbd, 0xf2, 0x02, 0xe2, 0xf6, 0x3b, 0x1e, 0x3f, 0xa0, 0xfc, 0xc1, 0x5e, 0x62,
	0xd5, 0x4f, 0xbd, 0xc0, 0xe8, 0x77, 0x3c, 0xbf, 0x27, 0x16, 0x2b, 0x08, 0x14, 0x2f, 0xbe, 0x12,
	0x60, 0xb6, 0x9a, 0x53, 0x6a, 0xfb, 0xd4, 0x67, 0x13, 0x58, 0xe4, 0x52, 0x28, 0x27, 0x00, 0x9c,
	0xfa, 0x8b, 0xed, 0x17, 0xb6, 0x7f, 0xe6, 0xf6, 0xcf, 0x08, 0xfb, 0x61, 0xb7, 0x43, 0xea, 0xbb,
	0x41, 0xe8, 0xb6, 0x03, 0xae, 0x80, 0x97, 0xf0, 0x76, 0x54, 0xaf, 0xa5, 0xab, 0x4b, 0xbf, 0xcb,
	0x00, 0x9a, 0x94, 0x00, 0xe8, 0x63, 0x58, 0xed, 0xd9, 0x6d, 0x62, 0x3b, 0x8e, 0x4f, 0x4e, 0xdd,
	0xbe, 0xed, 0x5f, 0x48, 0xb6, 0x5b, 0xee, 0xd9, 0x6d, 0xd5, 0x71, 0xfc, 0x43, 0x0e, 0x64, 0xea,
	0x23, 0xc2, 0x93, 0x7b, 0xb9, 0x28, 0x11, 0xd0, 0x7d, 0x58, 0xf3, 0x6d, 0xc7, 0x1d, 0x06, 0x49,
	0xde, 0x15, 0x1b, 0xbb, 0x2a, 0x2a, 0x62, 0xf6, 0x2d, 0x7d, 0x0b, 0xbb, 0xd3, 0xf4, 0x6b, 0x30,
	0xf0, 0xfa, 0x01, 0x65, 0x16, 0xc5, 0x18, 0xfb, 0x2f, 0xe1, 0xa5, 0x20, 0x6e, 0xdc, 0x82, 0x2d,
	0xde, 0x58, 0xef, 0x3b, 0x63, 0x9a, 0xf9, 0x1d, 0x14, 0x95, 0xd4, 0x47, 0xd9, 0x58, 0x1f, 0x95,
	0x76, 0x60, 0x7b, 0xa2, 0x5b, 0x31, 0xa1, 0xd2, 0xbf, 0xc8, 0xc0, 0x56, 0x6b, 0xe0, 0xd8, 0x21,
	0xb5, 0x86, 0xfd, 0x3e, 0xed, 0x1a, 0x4e, 0xf0, 0x1e, 0x43, 0xa6, 0x8e, 0x34, 0x3b, 0x76, 0xa4,
	0xef, 0xa5, 0xb2, 0xc7, 0x76, 0x6a, 0x7e, 0x7c, 0xa7, 0x76, 0x60, 0x7b, 0x62, 0xda, 0x72, 0x49,
	0xff, 0x25, 0x03, 0xbb, 0x4d, 0x6e, 0xc9, 0x1e, 0xf2, 0x29, 0x1c, 0xba, 0x7d, 0xc7, 0xed, 0x9f,
	0xbd, 0xc7, 0xb2, 0xee, 0x81, 0xd2, 0x75, 0xfb, 0x2f, 0xa9, 0x43, 0xc6, 0x57, 0xb7, 0x22, 0xe0,
	0x87, 0xd1, 0x1a, 0x99, 0x68, 0xe7, 0x43, 0x92, 0xc8, 0xa0, 0x15, 0xe4, 0x51, 0x10, 0x50, 0x2c,
	0xcc, 0xda, 0xd4, 0x36, 0xcd, 0x8d, 0x6d, 0x53, 0xac, 0x5e, 0xe7, 0xaf, 0x56, 0xaf, 0x37, 0xe1,
	0x83, 0xa9, 0xab, 0x93, 0xab, 0xff, 0xd3, 0x2c, 0x6c, 0x6a, 0x92, 0x43, 0x30, 0x55, 0x87, 0xe1,
	0x8b, 0x68, 0xe1, 0x57, 0xd3, 0x1e, 0x33, 0x4b, 0x63, 0xce, 0x7b, 0x49, 0x2f, 0xe4, 0x42, 0xf3,
	0x11, 0xec, 0x09, 0xbd, 0x88, 0x2c, 0xf8, 0xd9, 0x91, 0x05, 0xff, 0x18, 0xe6, 0x12, 0xda, 0xe2,
	0x6e, 0x52, 0x9a, 0x4e, 0x9b, 0xc3, 0x3e, 0xd7, 0x1c, 0xbc, 0x09, 0x7a, 0x02, 0x28, 0xa0, 0xfe,
	0x6b, 0xb7, 0xcd, 0xb6, 0x8b, 0xf6, 0x99, 0x10, 0xa4, 0xbe, 0x5c, 0x7c, 0xca, 0xbe, 0x11, 0x48,
	0x46, 0x8c, 0x83, 0xd7, 0x82, 0x71, 0x50, 0x69, 0x1f, 0xe6, 0xb8, 0x12, 0x42, 0xb0, 0x62, 0x1a,
	0xf5, 0xa3, 0xaa, 0x4e, 0x4c, 0x1d, 0x9f, 0x18, 0x9a, 0xae, 0xcc, 0x30, 0x98, 0x5e, 0xb7, 0x0c,
	0xcc, 0x60, 0xa6, 0x69, 0x34, 0xea, 0x4a, 0xa6, 0x74, 0x04, 0x1b, 0xe9, 0x09, 0xaa, 0xfd, 0xe0,
	0x0d, 0xf5, 0xd1, 0x03, 0x58, 0xf0, 0x69, 0x30, 0xec, 0x0a, 0xfd, 0xb0, 0x92, 0xa2, 0x8f, 0x68,
	0x25, 0xac, 0x1a, 0x4b, 0xb4, 0xd2, 0x3f, 0x99, 0x83, 0x75, 0x71, 0x1c, 0xef, 0xb4, 0xd9, 0x5c,
	0x68, 0x07, 0x09, 0xa1, 0x1d, 0xb8, 0x4c, 0x50, 0x31, 0xe2, 0x09, 0x48, 0xe8, 0x11, 0x9f, 0xf6,
	0xbc, 0xd7, 0x4c, 0x83, 0xcf, 0xde, 0x5b, 0xc2, 0xcb, 0x1c, 0x6c, 0x79, 0x98, 0x03, 0x99, 0x59,
	0x18, 0xe3, 0xb9, 0xfd, 0x20, 0xb4, 0xbb, 0xdd, 0xe2, 0x02, 0xbf, 0x12, 0xa4, 0xb6, 0x2d, 0xb4,
	0x43, 0xb7, 0xcd, 0x09, 0x4f, 0xe0, 0xe0, 0x15, 0xd9, 0x8d, 0x2c, 0xa3, 0x13, 0x28, 0x3a, 0x17,
	0x7d, 0xbb, 0xe7, 0xb6, 0xc9, 0x44, 0x7f, 0x8b, 0xbc, 0xbf, 0xa4, 0x6d, 0x55, 0x16, 0xa8, 0xc9,
	0x0e, 0x37, 0x9d, 0x11, 0x2c, 0xd1, 0xef, 0x77, 0xb0, 0x42, 0x5f, 0xd3, 0x7e, 0x48, 0x42, 0xdf,
	0x3d, 0x3b, 0xa3, 0x3e, 0x13, 0xdc, 0xb3, 0x63, 0x7b, 0xa9, 0x33, 0x04, 0x4b, 0xd4, 0xe3, 0x65,
	0x9a, 0x28, 0x05, 0xe8, 0x08, 0xd6, 0x7c, 0xfa, 0xda, 0xee, 0xba, 0x0e, 0xd7, 0x1f, 0x84, 0x5d,
	0x2b, 0xb9, 0xb5, 0xca, 0x0c, 0x09, 0x71, 0xe7, 0xdc, 0x8f, 0xee, 0x9c, 0xfb, 0x56, 0x74, 0xe7,
	0xc4, 0x4a, 0xb2, 0x11, 0x03, 0xa3, 0x1f, 0xa1, 0x38, 0x0c, 0xec, 0x33, 0x4a, 0x7a, 0x5e, 0xdf,
	0x0d, 0x3d, 0x9f, 0xeb, 0x14, 0x9f, 0x3a, 0x6e, 0x18, 0x14, 0x81, 0x2f, 0x30, 0xa9, 0xb5, 0x5a,
	0x0c, 0xb5, 0x16, 0x63, 0x6a, 0x1c, 0x11, 0x6f, 0x0d, 0xa7, 0x81, 0x03, 0xf4, 0x55, 0x42, 0x03,
	0x0a, 0x7b, 0x78, 0x27, 0xa5, 0x01, 0xcd, 0xa4, 0x06, 0x8c, 0x54, 0x5f, 0xa9, 0x01, 0x2b, 0xe9,
	0xaa, 0xb4, 0x48, 0x90, 0xaa, 0x3d, 0x16, 0x09, 0x7b, 0x30, 0xfb, 0xaa, 0xed, 0x4a, 0x0b, 0x70,
	0x25, 0xd9, 0xbf, 0x66, 0x60, 0x56, 0x55, 0xfa, 0x07, 0x39, 0x40, 0x49, 0xf2, 0x93, 0x64, 0xfc,
	0x16, 0xea, 0x1b, 0x51, 0x79, 0xf6, 0x5a, 0x54, 0x8e, 0x9e, 0x42, 0xa1, 0x63, 0xbb, 0x5d, 0x76,
	0x0f, 0x66, 0x67, 0xcd, 0xe9, 0x32, 0x7f, 0xb0, 0x9f, 0x34, 0x0e, 0x27, 0x26, 0xb1, 0x5f, 0xe1,
	0x2d, 0x38, 0x71, 0xe8, 0xfd, 0xd0, 0xbf, 0xc0, 0xf9, 0xce, 0x08, 0xb2, 0xeb, 0x82, 0x32, 0x8e,
	0xc0, 0xe4, 0x0b, 0x93, 0x3c, 0xd2, 0x43, 0xf0, 0x92, 0x5e, 0xa0, 0xef, 0x61, 0xfe, 0xb5, 0xdd,
	0x1d, 0x46, 0x56, 0xf0, 0x2f, 0xde, 0x3e, 0xe2, 0xd0, 0xa7, 0x9a, 0xe7, 0x50, 0x2c, 0xda, 0xfd,
	0x2a, 0xfb, 0x4d, 0xa6, 0xf4, 0xbf, 0xe7, 0x21, 0x9f, 0xa8, 0x42, 0x00, 0x0b, 0xad, 0x7a, 0xcb,
	0xd4, 0xcb, 0xca, 0x0c, 0xda, 0x84, 0xb5, 0x56, 0xfd, 0x49, 0xbd, 0xf1, 0xac, 0x4e, 0x70, 0xab,
	0xaa, 0x93, 0xba, 0x5a, 0xd3, 0x95, 0x0c, 0xda, 0x02, 0x84, 0x55, 0xcb, 0xa8, 0x1f, 0x91, 0x23,
	0xdc, 0x68, 0x35, 0x89, 0x8e, 0x71, 0x03, 0x2b, 0x59, 0x74, 0x03, 0x8a, 0x52, 0xb0, 0x10, 0xa3,
	0xcc, 0xa4, 0x4a, 0xc5, 0xd0, 0xb1, 0xac, 0x9d, 0x45, 0xdb, 0xb0, 0x7e, 0xf4, 0x8c, 0x34, 0x35,
	0xbd, 0x42, 0x6a, 0x6a, 0xb5, 0xd2, 0xaa, 0x6b, 0x16, 0x13, 0x37, 0x73, 0xa8, 0x08, 0x1b, 0x58,
	0x37, 0x1b, 0x2d, 0xac, 0xe9, 0x26, 0xa9, 0x1a, 0x35, 0xc3, 0x52, 0x79, 0xcd, 0x3c, 0xda, 0x85,
	0xad, 0x9a, 0xfa, 0x03, 0xa9, 0x63, 0x72, 0xa8, 0xab, 0x58, 0xc7, 0x26, 0xc1, 0xba, 0xaa, 0x1d,
	0xeb, 0x65, 0x65, 0x21, 0x39, 0x37, 0x51, 0x49, 0x8c, 0xb2, 0xb2, 0xc8, 0xc0, 0x35, 0xc3, 0x64,
	0x62, 0x2e, 0x01, 0xce, 0xb1, 0xa9, 0x45, 0xe0, 0x4a, 0xb5, 0xf1, 0x8c, 0x18, 0xf5, 0x4a, 0x03,
	0xd7, 0xc4, 0x38, 0x4b, 0xe8, 0x36, 0x7c, 0x10, 0xcd, 0x80, 0xa8, 0xd5, 0x6a, 0x43, 0xe3, 0x15,
	0xa4, 0xa2, 0x1a, 0xd5, 0x16, 0xd6, 0x15, 0x60, 0x08, 0xad, 0xba, 0xd9, 0xd2, 0x34, 0xdd, 0x34,
	0x2b, 0xad, 0x2a, 0x79, 0xda, 0x30, 0xc9, 0x89, 0x5a, 0x35, 0xca, 0xa2, 0x87, 0x3c, 0xba, 0x05,
	0xbb, 0x46, 0x5d, 0x6b, 0x60, 0xac, 0x6b, 0xd6, 0xe4, 0x08, 0x05, 0x36, 0xad, 0xa6, 0x49, 0xac,
	0x06, 0xd1, 0x4c, 0x72, 0xac, 0xd6, 0xcb, 0x8d, 0x13, 0x1d, 0x2b, 0xcb, 0xe8, 0x23, 0xd8, 0xb3,
	0xca, 0x15, 0xa2, 0x36, 0x9b, 0x55, 0x43, 0x0e, 0x3a, 0xb1, 0x73, 0x2b, 0x68, 0x1d, 0x56, 0xeb,
	0x8d, 0x68, 0x39, 0x95, 0x46, 0xab, 0x5e, 0x56, 0x56, 0xd9, 0x76, 0x56, 0x8c, 0xaa, 0xa5, 0x63,
	0x82, 0x75, 0xd3, 0xc2, 0x06, 0xdf, 0x4d, 0x53, 0x51, 0x90, 0x02, 0x05, 0xb5, 0x4e, 0x8e, 0x9e,
	0xf1, 0xe9, 0xeb, 0x65, 0x65, 0x0d, 0xdd, 0x81, 0xdb, 0xd1, 0xe2, 0xb1, 0x5e, 0x36, 0xf8, 0x1c,
	0xd9, 0x41, 0xe9, 0x98, 0xa8, 0xe5, 0x32, 0xd6, 0x4d, 0x53, 0x41, 0x6c, 0x05, 0x5a, 0x8d, 0xe8,
	0xf5, 0x32, 0x69, 0x99, 0x3a, 0x8e, 0x34, 0x04, 0x29, 0xeb, 0x75, 0x43, 0x2f, 0x2b, 0xeb, 0x6c,
	0xaa, 0x5a, 0x8d, 0x68, 0xac, 0x03, 0x8b, 0x68, 0x8d, 0xba, 0x85, 0x1b, 0x55, 0x52, 0x6f, 0x58,
	0xd1, 0xe4, 0x0f, 0xab, 0xba, 0xb2, 0x81, 0x6e, 0xc2, 0x8e, 0x56, 0x23, 0x6a, 0xcb, 0x3a, 0x6e,
	0x60, 0xe3, 0x47, 0xb1, 0x22, 0xac, 0xff, 0x46, 0xd7, 0x2c, 0xbd, 0xac, 0x6c, 0xb2, 0x95, 0x68,
	0x35, 0x31, 0x80, 0x3c, 0x3c, 0x65, 0x0b, 0x6d, 0x80, 0xa2, 0xd5, 0x88, 0xa4, 0x28, 0x39, 0xe9,
	0x6d, 0x76, 0xf6, 0xb8, 0xd1, 0xe2, 0x30, 0x4e, 0x7b, 0xa2, 0x17, 0xb6, 0x9b, 0x45, 0xf4, 0x31,
	0x94, 0x62, 0xba, 0x94, 0x38, 0x2a, 0x3f, 0x9b, 0xd4, 0xae, 0xef, 0xb0, 0x5d, 0xaf, 0x37, 0x48,
	0xfd, 0xd0, 0xa8, 0x34, 0x6a, 0xc4, 0x6c, 0x35, 0x9b, 0x0d, 0x6c, 0x29, 0xbb, 0xa5, 0xff, 0x98,
	0x81, 0x45, 0xc6, 0x58, 0x26, 0x0d, 0xd1, 0x01, 0x6c, 0xda, 0x83, 0x41, 0xf7, 0x82, 0x8c, 0x7c,
	0x78, 0xe4, 0x8d, 0xeb, 0x50, 0xce, 0x67, 0x39, 0xbc, 0xce, 0x2b, 0x47, 0xc6, 0xcf, 0x33, 0xd7,
	0xa1, 0x93, 0x36, 0x24, 0xfa, 0x1e, 0x0a, 0x01, 0x57, 0x29, 0x29, 0x11, 0x70, 0xb5, 0xc6, 0xc9,
	0x07, 0x31, 0x28, 0x40, 0x87, 0xb0, 0x9c, 0x52, 0x37, 0xc5, 0xb9, 0xeb, 0xe8, 0x98, 0x42, 0x52,
	0xc7, 0x94, 0x9e, 0x01, 0xe2, 0x3f, 0x9a, 0xd4, 0x1f, 0x4d, 0x38, 0x56, 0xa6, 0x99, 0x84, 0x32,
	0xfd, 0x0c, 0x72, 0xdc, 0x12, 0x0b, 0x68, 0x28, 0xa7, 0x8a, 0xc6, 0xfc, 0x65, 0x26, 0x0d, 0x31,
	0x77, 0x3f, 0x9a, 0x34, 0x2c, 0x11, 0x28, 0x44, 0x96, 0x31, 0x9f, 0x6c, 0x03, 0x36, 0x84, 0x4e,
	0x1c, 0x50, 0x3f, 0xb1, 0x6f, 0xd2, 0xf5, 0x76, 0x73, 0xac, 0xab, 0xf4, 0x7c, 0x30, 0xf2, 0x27,
	0x60, 0xa5, 0x2f, 0x20, 0xc7, 0x74, 0xd2, 0x6f, 0xbd, 0x3e, 0x45, 0x77, 0x61, 0xc5, 0xeb, 0x74,
	0x02, 0x1a, 0x92, 0x9e, 0xdb, 0x1f, 0x86, 0x34, 0xe0, 0x33, 0x9f, 0xc7, 0xcb, 0x02, 0x5a, 0x13,
	0xc0, 0xd2, 0xf7, 0x00, 0x42, 0xdb, 0xb4, 0xfa, 0x6e, 0xc8, 0x4c, 0x65, 0x37, 0x20, 0x5c, 0xc3,
	0xc9, 0x83, 0x5b, 0x74, 0x83, 0x13, 0x56, 0x44, 0x5b, 0xb0, 0xf0, 0xda, 0xeb, 0x0e, 0x7b, 0x54,
	0xba, 0xfa, 0x64, 0xa9, 0xf4, 0xf7, 0x32, 0x50, 0x38, 0xf2, 0xed, 0x7e, 0x48, 0x1d, 0xd6, 0x45,
	0x80, 0x7e, 0x09, 0xf3, 0xa1, 0x17, 0xda, 0x5d, 0x69, 0xfc, 0x26, 0x2f, 0xd5, 0xa3, 0x91, 0xb0,
	0xc0, 0x41, 0x77, 0x21, 0x1b, 0x9e, 0xcb, 0x3b, 0xed, 0x25, 0x98, 0xd9, 0xf0, 0x9c, 0xa1, 0xf9,
	0xc2, 0x49, 0x7b, 0x39, 0x9a, 0x7f, 0x5e, 0xfa, 0x5f, 0x19, 0x58, 0xc1, 0xd4, 0x71, 0x7d, 0xda,
	0x0e, 0x99, 0x45, 0x47, 0x7d, 0x64, 0xc3, 0xa6, 0x2f, 0x21, 0xfc, 0xd6, 0x15, 0xfb, 0x2d, 0x84,
	0xe9, 0xf5, 0x59, 0x4a, 0x29, 0x25, 0x5b, 0xc6, 0x45, 0x55, 0xb4, 0xe2, 0x46, 0xe5, 0xba, 0x3f,
	0x09, 0x44, 0x8f, 0x60, 0x3b, 0x1e, 0x22, 0xe0, 0x6d, 0xa3, 0x91, 0x24, 0x69, 0xc7, 0x33, 0x10,
	0x3d, 0xcb, 0xb6, 0xa5, 0xef, 0x61, 0x7d, 0xca, 0x18, 0x28, 0x07, 0x73, 0x46, 0xf3, 0xe4, 0x2b,
	0x65, 0x46, 0xfe, 0x7a, 0xa4, 0x64, 0xd0, 0x22, 0xcc, 0xb6, 0x70, 0x55, 0xc9, 0xa2, 0x3c, 0x2c,
	0x9a, 0x46, 0x93, 0xb4, 0xb0, 0xa1, 0xcc, 0x96, 0xfe, 0xdb, 0x2c, 0xac, 0x44, 0x06, 0xa6, 0xd8,
	0x09, 0xf4, 0x48, 0x9a, 0xca, 0x42, 0x93, 0x95, 0xa6, 0x98, 0xca, 0x02, 0x71, 0x9f, 0xed, 0x59,
	0xc2, 0x4e, 0xbe, 0x03, 0xcb, 0xfc, 0xd4, 0xdd, 0xf0, 0x42, 0x98, 0x42, 0xe2, 0x0e, 0x55, 0x88,
	0x80, 0xdc, 0xd4, 0x11, 0xd4, 0xc1, 0x5d, 0xc8, 0xdc, 0x16, 0xe7, 0xd4, 0x51, 0x61, 0x45, 0x74,
	0x1c, 0xb9, 0x9b, 0xed, 0x76, 0x7c, 0x9f, 0x9f, 0x6e, 0xaa, 0xcb, 0xf1, 0x79, 0x33, 0x95, 0x23,
	0x4b, 0xaf, 0xb4, 0x28, 0xa0, 0x5f, 0xc3, 0xf2, 0x99, 0x20, 0x27, 0x32, 0x64, 0xf4, 0x24, 0xaf,
	0xfe, 0x49, 0xeb, 0x21, 0x49, 0x6e, 0xb8, 0x70, 0x96, 0x24, 0xbe, 0x43, 0x58, 0x1d, 0x3b, 0x0b,
	0x7e, 0xf9, 0x4f, 0x1b, 0x4e, 0xe9, 0x83, 0xc6, 0x2b, 0xe9, 0xe3, 0x61, 0x9c, 0xe3, 0xd3, 0x20,
	0xf4, 0xdd, 0x76, 0x28, 0x85, 0x48, 0x4e, 0x5a, 0xc8, 0x12, 0x2a, 0xc4, 0x44, 0x09, 0x72, 0xd1,
	0x26, 0xa2, 0x25, 0x98, 0x3f, 0x7c, 0x6e, 0xe9, 0xa6, 0x32, 0xc3, 0x4f, 0x48, 0xd7, 0x1a, 0xf5,
	0xb2, 0xa9, 0x64, 0x4a, 0xdf, 0x43, 0x3e, 0xb1, 0x50, 0xb4, 0x0c, 0x4b, 0x96, 0x8e, 0x6b, 0x46,
	0x5d, 0xb5, 0xd8, 0x9d, 0xa1, 0x00, 0xb9, 0x48, 0x8f, 0x28, 0x19, 0x26, 0xd3, 0x23, 0x0d, 0x24,
	0xa5, 0xb0, 0x92, 0x2d, 0x55, 0x18, 0x41, 0x73, 0x63, 0x3f, 0x5a, 0xe1, 0x46, 0x92, 0xbd, 0xe6,
	0x22, 0x3e, 0x5a, 0x89, 0xf9, 0x68, 0x8e, 0x33, 0xcc, 0x4a, 0xcc, 0x30, 0x73, 0x9c, 0x33, 0xfe,
	0x78, 0x0e, 0xf2, 0x92, 0x59, 0x98, 0xa9, 0x99, 0x7a, 0xfb, 0xc8, 0x5c, 0xfe, 0xf6, 0x91, 0x4d,
	0xbf, 0x7d, 0x8c, 0xdf, 0xde, 0xe6, 0x26, 0x6f, 0x6f, 0x0f, 0x25, 0x01, 0x0a, 0x02, 0xf8, 0x70,
	0x92, 0x57, 0xd9, 0xf0, 0xfb, 0xf2, 0x56, 0x3d, 0xa2, 0xbf, 0xbb, 0xb0, 0x92, 0xb0, 0x9f, 0x59,
	0xdf, 0x0b, 0xd2, 0x7d, 0x12, 0x43, 0x59, 0xef, 0xd3, 0xaf, 0x73, 0x8b, 0xef, 0x75, 0x9d, 0x13,
	0xb4, 0x22, 0xf7, 0x56, 0xd2, 0x5a, 0x6e, 0x0a, 0xad, 0x24, 0x77, 0x9f, 0xd1, 0x4a, 0xb2, 0x5c,
	0xfa, 0xcb, 0x0c, 0xc0, 0x68, 0x31, 0xfc, 0x80, 0x8f, 0xb1, 0x6e, 0x1e, 0x37, 0xaa, 0xcc, 0xee,
	0x5b, 0x84, 0xd9, 0xa7, 0xc7, 0xec, 0x6c, 0x57, 0x00, 0xe2, 0x83, 0x2f, 0x2b, 0x59, 0x76, 0xd6,
	0x4f, 0x5b, 0x0d, 0x4b, 0x25, 0xfa, 0x0f, 0xc7, 0x6a, 0xcb, 0x64, 0xc0, 0x59, 0xa6, 0xa9, 0xb9,
	0x2d, 0x64, 0x58, 0xcf, 0x89, 0x65, 0xd4, 0x98, 0xe1, 0xf2, 0x43, 0xd3, 0xc0, 0x7a, 0x59, 0x99,
	0x63, 0xba, 0xbd, 0x61, 0x1d, 0xeb, 0x98, 0x88, 0x66, 0xd6, 0xf3, 0xa6, 0xae, 0xcc, 0xa3, 0x0f,
	0x60, 0x5b, 0xaa, 0x7b, 0x46, 0x70, 0x06, 0xb7, 0x12, 0xb4, 0x63, 0xb5, 0x7e, 0xa4, 0x2b, 0x0b,
	0x82, 0x9e, 0x98, 0x05, 0x41, 0xb0, 0xfe, 0xb4, 0xc5, 0xfb, 0x59, 0x64, 0xd7, 0xd4, 0x66, 0xa3,
	0x51, 0x4d, 0x8c, 0x9b, 0x2b, 0xfd, 0xd5, 0x1c, 0xac, 0x25, 0x0e, 0x47, 0x2c, 0x07, 0x7d, 0x0a,
	0xf3, 0xfc, 0x56, 0x22, 0xc5, 0xf8, 0xd6, 0xf4, 0x93, 0xc4, 0x02, 0x69, 0xec, 0x2e, 0x90, 0x1d,
	0xbf, 0x0b, 0x70, 0x96, 0x12, 0xee, 0xe6, 0xfe, 0xb0, 0xc7, 0x74, 0x9c, 0x90, 0x2f, 0xcb, 0x12,
	0x5a, 0xe7, 0xc0, 0xb4, 0x0b, 0x72, 0xf1, 0x12, 0x17, 0xe4, 0xd2, 0x74, 0x17, 0x24, 0x5c, 0xe9,
	0x82, 0xcc, 0xbf, 0xdd, 0x05, 0x59, 0x98, 0xe2, 0x82, 0xbc, 0x03, 0xcb, 0x2f, 0x6c, 0xdf, 0x79,
	0x63, 0xfb, 0x54, 0xf8, 0xec, 0x56, 0x04, 0x52, 0x04, 0xe4, 0x8e, 0xbb, 0x2f, 0x20, 0x17, 0x9e,
	0x0d, 0x06, 0xa4, 0x1d, 0x9e, 0x17, 0x57, 0x27, 0x36, 0xcb, 0x3a, 0x1b, 0x0c, 0x22, 0x3f, 0xef,
	0x22, 0xc3, 0xd3, 0xc2, 0xf3, 0xdf, 0xdb, 0x27, 0xb0, 0x2b, 0x3d, 0xa3, 0xe8, 0x6a, 0xcf, 0xe8,
	0x1f, 0xcd, 0xc2, 0x86, 0xa4, 0x0c, 0x4e, 0x41, 0xb1, 0x3b, 0xb2, 0x08, 0x8b, 0xc1, 0x90, 0xbf,
	0x03, 0x44, 0x36, 0x85, 0x2c, 0x46, 0xae, 0x9e, 0xec, 0xc8, 0xd5, 0x33, 0x2e, 0x61, 0x66, 0x27,
	0x25, 0xcc, 0x17, 0xb0, 0x20, 0xee, 0xd7, 0x5c, 0xfc, 0xa4, 0xb9, 0x35, 0xad, 0x64, 0xb0, 0x44,
	0x44, 0xb7, 0x21, 0x2f, 0xee, 0x98, 0xa4, 0xed, 0x39, 0xc2, 0xdb, 0xbf, 0x8c, 0x41, 0x80, 0xf8,
	0x65, 0xed, 0x67, 0x95, 0x2b, 0x8f, 0x01, 0xba, 0x6e, 0xcf, 0x95, 0x2f, 0x2b, 0x4b, 0x5c, 0x10,
	0xee, 0x4e, 0xb0, 0x4f, 0x95, 0xa1, 0x70, 0x09, 0xb8, 0xd4, 0x8d, 0x7e, 0xa6, 0x48, 0x09, 0xae,
	0x47, 0x4a, 0x69, 0xce, 0xcb, 0x8f, 0xbb, 0x30, 0xff, 0x34, 0x03, 0x28, 0xe9, 0x74, 0x90, 0xdc,
	0x3d, 0x29, 0x6f, 0x33, 0xd3, 0xe4, 0xed, 0xe7, 0x30, 0xdf, 0xa5, 0xaf, 0x69, 0x57, 0xda, 0x13,
	0xa9, 0x27, 0x96, 0x18, 0xb1, 0xca, 0x30, 0xb0, 0x40, 0x7c, 0xbf, 0x47, 0xf5, 0xd2, 0x9f, 0x64,
	0x61, 0x73, 0xaa, 0x6b, 0x04, 0x7d, 0x0f, 0x0b, 0xd2, 0xa4, 0x10, 0x06, 0xdb, 0x27, 0x6f, 0x73,
	0xa6, 0xec, 0x4b, 0xa3, 0x42, 0x36, 0x9b, 0xb2, 0xd2, 0xec, 0x95, 0x2b, 0x9d, 0xbd, 0xee, 0x4a,
	0x27, 0x0c, 0x95, 0xf9, 0x77, 0x30, 0x54, 0x4a, 0xfb, 0xb0, 0x20, 0x8d, 0x82, 0x02, 0xe4, 0xd8,
	0x35, 0xd0, 0xa8, 0xb7, 0x74, 0x61, 0x3e, 0x94, 0x0d, 0x93, 0xdf, 0x02, 0x33, 0xcc, 0xac, 0xa8,
	0x34, 0xb0, 0xa6, 0x2b, 0xd9, 0xd2, 0xbf, 0x9b, 0x85, 0x1b, 0x63, 0xeb, 0x8d, 0xd8, 0x4c, 0xf8,
	0x02, 0x1f, 0xc2, 0xc2, 0x90, 0x03, 0xa4, 0xc0, 0xbe, 0x79, 0xc9, 0x46, 0xc9, 0x56, 0x12, 0xf9,
	0x67, 0x12, 0xdc, 0x92, 0x91, 0xe7, 0x52, 0x51, 0x17, 0xd3, 0xc3, 0x24, 0x26, 0x44, 0xea, 0xc2,
	0x14, 0x91, 0x9a, 0x7c, 0xc3, 0x5e, 0x7c, 0xfb, 0x1b, 0x76, 0x92, 0x6d, 0x72, 0xd7, 0x63, 0x9b,
	0x5f, 0xc3, 0x72, 0xca, 0x7f, 0x28, 0xf9, 0xf4, 0x52, 0xf7, 0x61, 0x21, 0xe9, 0x3e, 0xbc, 0x52,
	0x4c, 0xc2, 0xd5, 0x62, 0xf2, 0x3f, 0xcd, 0xc1, 0xcd, 0x4b, 0x0e, 0x52, 0xca, 0xcb, 0x6f, 0x62,
	0x01, 0x97, 0x99, 0x78, 0xf5, 0x9a, 0xee, 0x3f, 0x8c, 0xe4, 0xdc, 0x5b, 0x0e, 0x73, 0xd2, 0xb3,
	0x9e, 0x10, 0xcd, 0x73, 0x69, 0xd1, 0x3c, 0xe9, 0x5f, 0x9d, 0xff, 0xe9, 0xfe, 0xd5, 0x85, 0xf7,
	0xf0, 0xaf, 0x8e, 0xc9, 0xee, 0xc5, 0x09, 0xd9, 0x3d, 0xc5, 0xa3, 0x9d, 0x9b, 0xe6, 0xd1, 0x36,
	0x61, 0x3b, 0xe9, 0x5b, 0x48, 0x3a, 0xa2, 0x97, 0xae, 0xe1, 0x66, 0xd8, 0x48, 0xb8, 0x19, 0xae,
	0xe7, 0xde, 0x86, 0x9f, 0xe0, 0xde, 0x4e, 0x52, 0x74, 0xfe, 0x5a, 0x14, 0x5d, 0xfa, 0xdd, 0x2c,
	0x6c, 0x4e, 0x7d, 0x14, 0x45, 0xb7, 0x20, 0x6f, 0x0f, 0xfa, 0xc4, 0xee, 0x9d, 0xfa, 0xc4, 0x11,
	0x17, 0x87, 0x65, 0xbc, 0x64, 0x0f, 0xfa, 0x6a, 0xef, 0xd4, 0x2f, 0x77, 0x53, 0xf5, 0xc3, 0xae,
	0x7c, 0x93, 0x89, 0xea, 0x5b, 0xec, 0x92, 0xbe, 0x32, 0xf0, 0x5d, 0xcf, 0x67, 0x97, 0xc3, 0x91,
	0x90, 0x5c, 0xc6, 0xcb, 0x11, 0x94, 0xcb, 0x45, 0xf4, 0x25, 0x6c, 0x0e, 0x7c, 0x4a, 0x7b, 0x03,
	0x7e, 0xe0, 0x89, 0xf7, 0x79, 0x71, 0x4d, 0xd8, 0x18, 0x55, 0x26, 0x1e, 0xe2, 0x1f, 0x43, 0x31,
	0xd1, 0xe8, 0xf5, 0xb0, 0xdb, 0xa7, 0x7e, 0xf2, 0x5d, 0x7f, 0x19, 0x6f, 0x8f, 0xea, 0x4f, 0x92,
	0xd5, 0xcc, 0xc6, 0x7b, 0xe5, 0x05, 0xa4, 0xdd, 0xb5, 0x83, 0x80, 0xd1, 0xbb, 0x54, 0xeb, 0xaf,
	0xbc, 0x40, 0x63, 0x20, 0xc3, 0x41, 0xbf, 0x81, 0x45, 0xb6, 0xa4, 0xbe, 0x1b, 0x4a, 0x29, 0xf2,
	0xc5, 0xdb, 0x1e, 0x90, 0xf7, 0x0f, 0xdd, 0xd0, 0xb7, 0x43, 0xca, 0x85, 0xb4, 0x5a, 0x3b, 0xc4,
	0x78, 0xe1, 0xd4, 0x67, 0x85, 0xd2, 0x5d, 0x50, 0xc6, 0xeb, 0x98, 0x7d, 0x7f, 0xd8, 0x34, 0xc5,
	0x4d, 0xfd, 0x09, 0xfb, 0x95, 0x29, 0x3d, 0x85, 0x7c, 0xe2, 0x74, 0xd8, 0x1c, 0xcf, 0xce, 0x89,
	0xc3, 0xe4, 0xe7, 0x0b, 0x2f, 0x08, 0xa5, 0xf7, 0x08, 0xce, 0xce, 0xcb, 0x34, 0x08, 0x8f, 0xbd,
	0x40, 0x60, 0x5c, 0x24, 0x30, 0xb2, 0x12, 0xe3, 0x22, 0xc2, 0x28, 0xfd, 0x87, 0x2c, 0x37, 0xac,
	0x26, 0x03, 0xa9, 0x7e, 0x0d, 0xab, 0x51, 0x24, 0x86, 0xf4, 0xfa, 0x48, 0x89, 0xb1, 0x9e, 0xa4,
	0x15, 0x59, 0x85, 0x57, 0x64, 0x2c, 0x46, 0xe4, 0x20, 0x7a, 0x8b, 0xb0, 0x98, 0x72, 0x3b, 0x9a,
	0x7d, 0xc7, 0xdb, 0xd1, 0xef, 0x6f, 0xa4, 0xd7, 0xef, 0xe6, 0x60, 0x73, 0xfa, 0xdb, 0xf9, 0x63,
	0x58, 0x8c, 0x5e, 0x6f, 0x84, 0x1b, 0xee, 0xf6, 0xe4, 0xc5, 0x27, 0x25, 0xae, 0x71, 0x84, 0x8f,
	0x1a, 0xb0, 0x92, 0x7a, 0x09, 0x0a, 0xe4, 0x83, 0xd9, 0xbd, 0xcb, 0xe5, 0xf7, 0x58, 0x57, 0xcb,
	0xc9, 0x77, 0xa0, 0x60, 0xc2, 0x1b, 0xba, 0xf8, 0x93, 0xbd, 0xa1, 0xb9, 0x77, 0xf6, 0x86, 0x8e,
	0x91, 0xc9, 0xd2, 0x38, 0x99, 0xbc, 0x87, 0xc5, 0x3a, 0xa9, 0x5a, 0xf2, 0x3f, 0x5d, 0xb5, 0x14,
	0xde, 0x5d, 0xb5, 0x94, 0xfe, 0x3c, 0x03, 0x6b, 0x13, 0x3b, 0x98, 0x8c, 0x17, 0xcd, 0xa4, 0xe2,
	0x45, 0x35, 0xc6, 0x6e, 0xa1, 0xfb, 0x3a, 0x31, 0x6a, 0xf6, 0xad, 0xa3, 0xae, 0x8c, 0x9a, 0x70,
	0x75, 0x76, 0x04, 0x6b, 0x0e, 0x1d, 0xef, 0x66, 0xf6, 0xed, 0x93, 0x4f, 0x36, 0xe2, 0x93, 0xff,
	0xcf, 0x19, 0x40, 0x93, 0x87, 0x87, 0x1e, 0x41, 0x3e, 0x11, 0x23, 0x30, 0xc5, 0x07, 0xdb, 0x8c,
	0x63, 0x05, 0x30, 0x8c, 0xe2, 0x06, 0x7e, 0xcf, 0x16, 0xf7, 0x8f, 0x32, 0xb0, 0x21, 0x78, 0x63,
	0x4c, 0xe4, 0x3d, 0x82, 0x45, 0x61, 0xb8, 0x46, 0xec, 0x79, 0x63, 0xba, 0x5f, 0x42, 0x32, 0x56,
	0x84, 0x8c, 0xea, 0x13, 0xbc, 0x29, 0xfc, 0xf5, 0x9f, 0xbc, 0x9d, 0x37, 0x45, 0x60, 0x51, 0x9a,
	0x35, 0x4b, 0xff, 0x32, 0x03, 0x9b, 0x63, 0x13, 0x94, 0x02, 0xe4, 0x0f, 0x60, 0xc9, 0x97, 0xbf,
	0xaf, 0x2d, 0x42, 0x46, 0x2d, 0xd0, 0xdf, 0x86, 0xed, 0xd4, 0x44, 0xc9, 0xa8, 0xb3, 0xd9, 0x77,
	0x94, 0x26, 0x9b, 0xc9, 0x29, 0x47, 0xd0, 0xa0, 0xf4, 0x04, 0x8a, 0x51, 0x44, 0x1d, 0xf5, 0x7b,
	0x6e, 0x3f, 0x69, 0x7a, 0x4e, 0x46, 0x4f, 0x5f, 0xad, 0x25, 0x4a, 0xff, 0x7e, 0x0e, 0xb6, 0x27,
	0x7b, 0x9b, 0x16, 0x9d, 0x70, 0x8d, 0xab, 0xc5, 0xdc, 0xb4, 0xab, 0xc5, 0xb7, 0xb0, 0x2c, 0x04,
	0x2c, 0xe1, 0xcb, 0x11, 0x76, 0xe8, 0xe5, 0xfe, 0xa8, 0x42, 0x7b, 0x54, 0x08, 0x50, 0x39, 0xbe,
	0xfc, 0x45, 0xad, 0x17, 0x26, 0x24, 0xe0, 0x94, 0xcb, 0x51, 0x74, 0x37, 0x94, 0xbd, 0xa4, 0xdc,
	0x52, 0x4b, 0x97, 0xb8, 0xa5, 0x60, 0xba, 0x5b, 0x2a, 0x7f, 0xa5, 0x5b, 0xaa, 0xf0, 0x76, 0xb7,
	0xd4, 0xf2, 0x75, 0xdc, 0x52, 0xab, 0x6f, 0x71, 0x4b, 0x29, 0xef, 0xeb, 0x96, 0x5a, 0x7b, 0x2f,
	0x7d, 0xfd, 0x13, 0xbc, 0x48, 0x7f, 0x3f, 0x03, 0x0b, 0x75, 0xcf, 0xa1, 0x46, 0x19, 0x7d, 0x07,
	0x85, 0xbe, 0xe7, 0x30, 0x41, 0x9c, 0x7c, 0xb1, 0x49, 0x32, 0xbc, 0x40, 0x94, 0xff, 0x44, 0xc0,
	0x29, 0x6b, 0x61, 0x38, 0xfc, 0x56, 0xb8, 0x0d, 0x8b, 0xb2, 0x7d, 0x14, 0xf8, 0x2f, 0x2a, 0x4b,
	0xf7, 0x01, 0x46, 0x4d, 0xc4, 0x2b, 0xcb, 0xeb, 0xf8, 0xbd, 0xe5, 0xf5, 0x23, 0x25, 0xc3, 0x7e,
	0x55, 0x9e, 0x96, 0xeb, 0x4a, 0xb6, 0x74, 0x0e, 0xab, 0x63, 0xc1, 0xa4, 0x82, 0x70, 0x3b, 0x5d,
	0xca, 0x44, 0x16, 0x25, 0xaf, 0xbc, 0xc8, 0xad, 0xb5, 0x3c, 0x82, 0x3e, 0xf5, 0xd8, 0x0d, 0xea,
	0x46, 0x6f, 0xd8, 0x0d, 0x5d, 0xf2, 0xc2, 0xeb, 0x51, 0x87, 0xc7, 0x3a, 0x93, 0x44, 0x00, 0x2c,
	0x9f, 0x53, 0x0e, 0x17, 0x39, 0xce, 0x31, 0x43, 0x31, 0x06, 0xaf, 0x1f, 0x8d, 0xc2, 0x5f, 0x4b,
	0x7f, 0x99, 0x85, 0xdc, 0x53, 0x2f, 0x10, 0x5a, 0x78, 0x1f, 0xd6, 0x99, 0xad, 0x2b, 0x15, 0x53,
	0xec, 0xa1, 0x12, 0xa6, 0xfc, 0xda, 0x2b, 0x81, 0x96, 0xf0, 0x41, 0x29, 0x30, 0xeb, 0xbc, 0xf2,
	0xe5, 0x18, 0xec, 0x27, 0xfa, 0x1a, 0x8a, 0x82, 0xcd, 0x88, 0xd7, 0x21, 0x03, 0xbb, 0xfd, 0x92,
	0x86, 0xa4, 0xe3, 0x76, 0x43, 0xea, 0x07, 0xd2, 0x9c, 0xdf, 0x14, 0xf5, 0x8d, 0x4e, 0x93, 0xd7,
	0x56, 0x44, 0x25, 0xfa, 0x06, 0x8a, 0x29, 0xf4, 0xe4, 0xf8, 0x73, 0x7b, 0xb3, 0xf7, 0xe6, 0xf1,
	0xd6, 0x20, 0xd1, 0x20, 0x31, 0x89, 0xe4, 0xa4, 0x07, 0x3e, 0x6d, 0x53, 0x87, 0xf6, 0xdb, 0x54,
	0x9a, 0xf5, 0xd1, 0xa4, 0x9b, 0x71, 0x05, 0xda, 0x83, 0x7c, 0x40, 0xcf, 0x7c, 0x7a, 0x26, 0x28,
	0x7f, 0x41, 0xa4, 0x2c, 0x24, 0x40, 0x51, 0x8f, 0x9d, 0xae, 0xf7, 0x66, 0xdc, 0x51, 0x27, 0x7a,
	0xac, 0x74, 0xbd, 0x37, 0x89, 0x88, 0xad, 0x73, 0x58, 0xad, 0xda, 0x4e, 0x5f, 0xba, 0xed, 0x54,
	0x9f, 0xda, 0x8c, 0x99, 0x9d, 0x7e, 0x9f, 0x88, 0x80, 0x0f, 0x19, 0x0b, 0xe3, 0xf4, 0xfb, 0x27,
	0xac, 0x8c, 0x8e, 0x61, 0x59, 0x74, 0xcb, 0x6e, 0x3a, 0x2e, 0xb7, 0xc6, 0x99, 0xb8, 0xb8, 0x93,
	0x64, 0x1c, 0xdf, 0x6e, 0xbf, 0x74, 0xfb, 0x67, 0xac, 0x33, 0x43, 0xe2, 0x56, 0xdd, 0x20, 0xc4,
	0x05, 0x37, 0x51, 0x2a, 0xfd, 0x59, 0x06, 0x8a, 0x97, 0xa1, 0xa2, 0xaf, 0xa1, 0xc0, 0x28, 0x9a,
	0x9d, 0x04, 0x1f, 0x25, 0xc3, 0xed, 0x9f, 0xa4, 0x96, 0x66, 0x94, 0xd9, 0xe8, 0xf0, 0x7e, 0x21,
	0x8c, 0x7f, 0xa3, 0x4f, 0x01, 0x8d, 0x0e, 0x91, 0x76, 0x69, 0x8f, 0xf6, 0xc3, 0x80, 0x4f, 0x72,
	0x1e, 0x2b, 0xd1, 0xf1, 0xe9, 0x12, 0xce, 0x88, 0xa0, 0xa6, 0x69, 0xd1, 0x7d, 0xbf, 0xa6, 0x69,
	0x1c, 0x52, 0xd7, 0x22, 0x3f, 0x4d, 0xad, 0xce, 0x21, 0x96, 0xaa, 0x49, 0x1f, 0x0d, 0xfb, 0x59,
	0xfa, 0x37, 0x4b, 0xb0, 0x3e, 0x25, 0x2c, 0xfd, 0x9a, 0x81, 0xe5, 0x5f, 0x43, 0xde, 0xbf, 0x76,
	0x5c, 0x39, 0xf8, 0xa3, 0xb0, 0xf2, 0x5f, 0x41, 0x9e, 0x75, 0x1f, 0xbd, 0x9c, 0xce, 0xbe, 0xed,
	0xd5, 0x0e, 0x06, 0xce, 0x50, 0x3e, 0x9b, 0xb2, 0xbb, 0x4a, 0x7c, 0x41, 0xb5, 0x47, 0xee, 0x8c,
	0x74, 0x64, 0x79, 0x84, 0x21, 0x10, 0x70, 0x7c, 0xa5, 0x15, 0xe1, 0xea, 0xe3, 0x61, 0xed, 0xf3,
	0xd7, 0x0d, 0x6b, 0x8f, 0xe4, 0x7f, 0x2e, 0x21, 0xff, 0x11, 0xcc, 0x9d, 0x0d, 0x82, 0xf8, 0xa9,
	0x82, 0xfd, 0x66, 0x47, 0x97, 0x12, 0xec, 0x22, 0xaa, 0x4b, 0x68, 0x0d, 0x25, 0x29, 0xdd, 0x79,
	0xf8, 0xf2, 0x26, 0x2c, 0x0c, 0xda, 0x9d, 0x91, 0x02, 0x99, 0x1f, 0xb4, 0x3b, 0x86, 0x83, 0x2a,
	0xb0, 0xd6, 0xb5, 0x9d, 0x3e, 0x89, 0x9c, 0xd5, 0xb6, 0x4f, 0xed, 0x62, 0x81, 0xd3, 0x68, 0xd2,
	0x63, 0x39, 0x46, 0xf3, 0x78, 0xb5, 0x3b, 0xc6, 0x04, 0x55, 0xb8, 0x93, 0x3c, 0x4b, 0x76, 0x67,
	0x18, 0x06, 0xa9, 0x38, 0x73, 0x12, 0x0c, 0x4f, 0xb9, 0xee, 0xc9, 0xe1, 0xdb, 0xa3, 0x03, 0x36,
	0x39, 0x62, 0x32, 0x98, 0xdc, 0x1c, 0x9e, 0x22, 0x03, 0x10, 0x63, 0xa9, 0x80, 0x72, 0xe9, 0xe7,
	0xf5, 0x49, 0xcf, 0x73, 0x28, 0x7f, 0x2a, 0x59, 0x39, 0xf8, 0x20, 0x79, 0xd7, 0xe8, 0xf7, 0xcd,
	0x08, 0xa7, 0xe6, 0x39, 0x14, 0x2b, 0xce, 0x18, 0x04, 0xfd, 0x02, 0x94, 0xd0, 0xb7, 0xdb, 0x94,
	0x30, 0x23, 0xc0, 0xf5, 0x19, 0x1d, 0x73, 0xe5, 0xb6, 0x84, 0x57, 0x39, 0x1c, 0xc7, 0x60, 0xf4,
	0x1b, 0x28, 0xb9, 0xfd, 0x90, 0x9e, 0xf1, 0x53, 0x67, 0x56, 0x65, 0x34, 0xb8, 0x7d, 0x4e, 0x1c,
	0x3b, 0xb4, 0x09, 0xbb, 0xab, 0x73, 0xcd, 0x57, 0xc0, 0xb7, 0x62, 0xcc, 0x66, 0x8c, 0x58, 0xb3,
	0xcf, 0xcb, 0x76, 0x68, 0x63, 0x3b, 0x9c, 0x9e, 0x9b, 0xb0, 0xf6, 0xae, 0xb9, 0x09, 0x9f, 0x41,
	0x2e, 0x08, 0xda, 0x62, 0xf1, 0x68, 0xc2, 0x69, 0x69, 0x06, 0x6d, 0xbe, 0xe6, 0xc5, 0x40, 0xfc,
	0x98, 0x9e, 0xca, 0xb0, 0xfe, 0xee, 0xa9, 0x0c, 0x5f, 0x43, 0x91, 0x2d, 0x79, 0xf0, 0x32, 0x16,
	0xd0, 0xc1, 0x70, 0x30, 0xf0, 0xfc, 0x90, 0x3a, 0xc5, 0x0d, 0x21, 0xd8, 0x7b, 0xf6, 0x79, 0xf3,
	0xa5, 0x94, 0xcf, 0x66, 0x54, 0x89, 0xbe, 0x81, 0x9d, 0xe4, 0xa2, 0x7d, 0xfa, 0x8a, 0xd8, 0xdd,
	0x37, 0xf6, 0x45, 0x40, 0xbc, 0x7e, 0x71, 0x93, 0x1f, 0xfd, 0xe6, 0x68, 0x89, 0x98, 0xbe, 0x52,
	0x79, 0x6d, 0xa3, 0x8f, 0x3e, 0x84, 0xe5, 0xa0, 0xc7, 0x95, 0x99, 0xc3, 0xdb, 0x15, 0xb7, 0x84,
	0x1d, 0x13, 0xf4, 0x9a, 0xce, 0xb0, 0xcc, 0x50, 0xc7, 0x13, 0x2c, 0xb6, 0xaf, 0x99, 0x60, 0x81,
	0x34, 0x58, 0x1f, 0xb9, 0x1d, 0x22, 0xed, 0x11, 0x14, 0x8b, 0x13, 0x7e, 0x8d, 0x48, 0x35, 0xe2,
	0xb5, 0x18, 0x3f, 0x02, 0x95, 0xfe, 0x69, 0x06, 0xd6, 0x4d, 0x1a, 0x4e, 0x88, 0xb0, 0x9f, 0x2b,
	0x41, 0xe3, 0x32, 0x7f, 0x44, 0xf6, 0x7d, 0xfd, 0x11, 0x9f, 0xc0, 0xb2, 0xd9, 0x93, 0x85, 0x13,
	0x4f, 0x44, 0xdb, 0x78, 0xc3, 0x70, 0x30, 0x8c, 0x3c, 0x46, 0xb2, 0x54, 0x7a, 0x03, 0xc5, 0xc9,
	0x2e, 0xa5, 0x04, 0xfb, 0xff, 0x61, 0x9b, 0x13, 0x54, 0x3a, 0xe9, 0x88, 0xf8, 0xc1, 0x40, 0x4e,
	0xec, 0xa3, 0xab, 0x13, 0x8f, 0x44, 0x37, 0x78, 0x83, 0x11, 0x58, 0x7a, 0xf9, 0xc1, 0xa0, 0xf4,
	0x27, 0xf3, 0xb0, 0x73, 0x69, 0x9b, 0x6b, 0xea, 0x86, 0x69, 0x5c, 0x96, 0x7d, 0x57, 0x2e, 0xfb,
	0x0e, 0xd6, 0x84, 0xa0, 0xa1, 0x0e, 0x89, 0xd9, 0x6d, 0xf6, 0x52, 0x76, 0x5b, 0x8d, 0x90, 0x25,
	0x00, 0xe9, 0xb0, 0x61, 0x0f, 0xc3, 0x17, 0x9e, 0xef, 0xfe, 0x36, 0x45, 0x61, 0x22, 0x50, 0x6c,
	0x2a, 0x85, 0xa1, 0x51, 0x83, 0xd8, 0x20, 0xab, 0x40, 0x21, 0x5a, 0x87, 0xdd, 0x3b, 0x8d, 0x42,
	0xca, 0x93, 0x86, 0x82, 0x7a, 0x26, 0xec, 0x16, 0xea, 0xd4, 0xec, 0x73, 0xb7, 0x37, 0xec, 0x49,
	0xf7, 0x21, 0xb3, 0x68, 0x78, 0x43, 0xb5, 0x77, 0xea, 0x33, 0x3e, 0xa9, 0x5d, 0x3b, 0x11, 0xa9,
	0x36, 0xe2, 0x93, 0x0a, 0xec, 0xc5, 0xcc, 0x4a, 0x52, 0x7b, 0xdf, 0x77, 0xa2, 0x54, 0xa1, 0x45,
	0xce, 0xc3, 0x37, 0x6c, 0xc9, 0xb6, 0xa3, 0x8d, 0x35, 0x62, 0x1c, 0xf4, 0x6b, 0x50, 0xec, 0x6e,
	0xd7, 0x7b, 0x93, 0xdc, 0xcd, 0xdc, 0xa5, 0xbb, 0xb9, 0x22, 0x71, 0xa3, 0xcd, 0xac, 0xc3, 0x47,
	0x72, 0xf6, 0x5e, 0xff, 0x8c, 0x86, 0x42, 0x8c, 0x10, 0x3b, 0x0c, 0x69, 0x6f, 0x10, 0x46, 0x53,
	0xf1, 0xc4, 0xe3, 0x4a, 0x0e, 0xef, 0x89, 0xf9, 0x47, 0xa8, 0x98, 0xaa, 0x02, 0xd1, 0x88, 0xf0,
	0xc6, 0x8d, 0x80, 0xc2, 0x3b, 0x18, 0x01, 0xa5, 0x3f, 0xcf, 0xc0, 0xce, 0x14, 0xa6, 0x97, 0x14,
	0xfa, 0x73, 0xb1, 0x7e, 0xeb, 0x4a, 0xd6, 0xbf, 0x73, 0x25, 0xeb, 0x4b, 0x06, 0x9b, 0x26, 0x00,
	0xfe, 0x2a, 0x03, 0x85, 0x56, 0xb3, 0xc2, 0xae, 0x25, 0x22, 0x9d, 0x72, 0x13, 0x16, 0x86, 0x83,
	0xce, 0xc8, 0x09, 0x35, 0x3f, 0x1c, 0x30, 0x03, 0xe0, 0x09, 0x28, 0x76, 0x10, 0x78, 0x6d, 0xd7,
	0x0e, 0xe3, 0x6c, 0xcd, 0xec, 0x44, 0x56, 0x61, 0xab, 0x59, 0x51, 0x25, 0x56, 0x94, 0x9f, 0x79,
	0x3c, 0x83, 0x57, 0x47, 0x2d, 0xc5, 0x18, 0xdf, 0x42, 0x9e, 0x5f, 0x90, 0x7c, 0xca, 0x34, 0x82,
	0x34, 0xb9, 0x8a, 0xe9, 0x7e, 0xd8, 0x8c, 0x30, 0xaf, 0x3f, 0x9e, 0x11, 0xb7, 0x2b, 0x51, 0x3a,
	0x5c, 0x87, 0x35, 0x36, 0x41, 0xde, 0x41, 0x8f, 0x06, 0xfc, 0xa6, 0x5c, 0xfa, 0xef, 0x59, 0xd8,
	0x69, 0x05, 0xd4, 0x6f, 0x76, 0xed, 0x3e, 0x35, 0x9a, 0x98, 0x06, 0xde, 0xd0, 0x6f, 0x53, 0xb3,
	0xfd, 0x82, 0xf6, 0x6c, 0xf4, 0x21, 0x14, 0xd8, 0x15, 0x3a, 0x3e, 0x5e, 0xb1, 0xb2, 0x3c, 0x83,
	0x45, 0x96, 0x9c, 0x40, 0x79, 0x34, 0x16, 0x40, 0xc7, 0x50, 0x1e, 0x45, 0x28, 0x07, 0xb0, 0x19,
	0x52, 0xd7, 0x21, 0xbe, 0xdd, 0x3f, 0xa3, 0x49, 0x72, 0x17, 0xb7, 0x98, 0x75, 0x56, 0x89, 0x59,
	0x5d, 0x82, 0xca, 0x6f, 0x02, 0x8c, 0xda, 0x48, 0x3f, 0xc3, 0x52, 0x8c, 0x88, 0xbe, 0x82, 0x2d,
	0xbe, 0x37, 0xa4, 0x4f, 0xc3, 0x37, 0x9e, 0xff, 0x52, 0x3c, 0xe1, 0x44, 0x77, 0x95, 0x25, 0xbc,
	0xc1, 0x6b, 0xeb, 0xa2, 0xd2, 0x90, 0x75, 0xa3, 0x56, 0x62, 0x91, 0x84, 0xd9, 0x18, 0x7e, 0xc7,
	0x6e, 0x47, 0x01, 0x06, 0xa2, 0x95, 0xc9, 0x2b, 0x8d, 0xa8, 0xae, 0xf4, 0xff, 0xc1, 0x4a, 0x5c,
	0x10, 0x97, 0x0e, 0x80, 0x05, 0x19, 0xef, 0xc5, 0xaf, 0xa0, 0x5a, 0x03, 0xeb, 0x22, 0xe4, 0xaf,
	0xaa, 0xd6, 0x95, 0x2c, 0x5a, 0x85, 0xbc, 0xd6, 0x24, 0x71, 0x9c, 0xf7, 0x6c, 0xe9, 0x1f, 0xce,
	0xc1, 0xfa, 0x94, 0x13, 0x46, 0x77, 0x60, 0x99, 0x13, 0x44, 0x9c, 0x7c, 0x2b, 0x1e, 0x72, 0xb8,
	0x0f, 0x39, 0xce, 0x15, 0x6f, 0x42, 0x5e, 0x4e, 0x9a, 0xd3, 0x8e, 0x10, 0x9c, 0x0f, 0xae, 0xa6,
	0x9d, 0xfd, 0x71, 0x00, 0x06, 0xb1, 0x34, 0x3e, 0xec, 0x6f, 0x98, 0xc6, 0x6e, 0x7b, 0xaf, 0xa9,
	0x2f, 0x42, 0x07, 0x09, 0x77, 0xea, 0xc9, 0xe0, 0x8c, 0xab, 0xdc, 0x7e, 0x6b, 0x51, 0x33, 0x06,
	0x32, 0x19, 0x08, 0x3d, 0x86, 0x7c, 0x87, 0xda, 0xe1, 0xd0, 0x17, 0x31, 0xb5, 0xf3, 0xd3, 0x28,
	0xb2, 0x22, 0x10, 0x4c, 0x1a, 0x62, 0xe8, 0xc4, 0xbf, 0x11, 0x06, 0xe4, 0x0e, 0x88, 0x2f, 0x29,
	0x8e, 0x04, 0x9c, 0xe4, 0xa4, 0xbb, 0xe7, 0xa3, 0x94, 0xbb, 0xe7, 0x12, 0xf2, 0xc4, 0x8a, 0x3b,
	0x18, 0x23, 0x58, 0x0c, 0xdb, 0x67, 0xcc, 0xea, 0xec, 0x0c, 0xbb, 0xc4, 0xa7, 0x5d, 0x6a, 0x07,
	0x94, 0x0c, 0xa8, 0xef, 0x7a, 0x8e, 0x8c, 0x0d, 0xb9, 0x6a, 0x79, 0x9b, 0x51, 0x53, 0x2c, 0x5a,
	0x36, 0x79, 0xc3, 0xd2, 0x8f, 0xa0, 0x4c, 0x9c, 0x5c, 0x1e, 0x16, 0x4d, 0x4b, 0xc5, 0x16, 0x4f,
	0x16, 0x58, 0x86, 0x25, 0xa3, 0x6e, 0x58, 0x06, 0x0f, 0x15, 0xcb, 0xb0, 0xe3, 0xd7, 0x4d, 0x4b,
	0x3d, 0xac, 0x1a, 0xe6, 0x31, 0x8f, 0x1d, 0x2b, 0x40, 0xae, 0xd6, 0x28, 0x1b, 0x15, 0x83, 0x07,
	0x8d, 0xe5, 0x61, 0x11, 0xeb, 0x55, 0x5d, 0x35, 0x75, 0x65, 0xae, 0xf4, 0x37, 0xf3, 0xb0, 0x9c,
	0xda, 0x21, 0xf4, 0x2d, 0xec, 0x3a, 0xde, 0x9b, 0x7e, 0xd7, 0xed, 0xbf, 0x14, 0x46, 0xf1, 0xe9,
	0xb0, 0xd3, 0xa1, 0x22, 0x49, 0x65, 0x20, 0xfd, 0x16, 0xdb, 0x11, 0x06, 0x33, 0x87, 0x0f, 0xa3,
	0x7a, 0x6d, 0x80, 0x8e, 0x60, 0x2f, 0xdd, 0x38, 0x75, 0x41, 0x70, 0x68, 0xd7, 0xbe, 0x90, 0x1e,
	0x86, 0x9b, 0xc9, 0x2e, 0x92, 0xd7, 0x83, 0x32, 0x43, 0x62, 0x2c, 0xeb, 0x74, 0x13, 0x43, 0x3b,
	0x43, 0x7f, 0xc4, 0xb2, 0x39, 0xbc, 0xee, 0x74, 0xe3, 0x61, 0xcb, 0xb2, 0x4a, 0xde, 0x04, 0x3a,
	0x4c, 0xc6, 0x06, 0x21, 0xe5, 0x75, 0xf2, 0x8d, 0x7a, 0x55, 0xc2, 0x4d, 0x09, 0x66, 0xb2, 0xb2,
	0x23, 0xd2, 0xfb, 0xe6, 0x39, 0xc2, 0x7c, 0x87, 0x27, 0xf7, 0xdd, 0x85, 0x95, 0x41, 0xc7, 0x91,
	0x5f, 0xb1, 0xe0, 0x37, 0x09, 0xe1, 0x51, 0x58, 0x1e, 0x74, 0x9c, 0x5a, 0x0c, 0x44, 0xdf, 0x40,
	0xf1, 0x05, 0xb5, 0x1d, 0xea, 0x13, 0xda, 0xf7, 0xdd, 0xf6, 0x0b, 0x06, 0x24, 0xc3, 0x01, 0x5b,
	0x8d, 0xd4, 0xa0, 0x5b, 0xa2, 0x5e, 0x8f, 0xab, 0x5b, 0xbc, 0x16, 0x55, 0xe0, 0x76, 0x34, 0xc5,
	0x28, 0x84, 0x94, 0x6d, 0x0c, 0xed, 0x77, 0x3c, 0xbf, 0x2d, 0x46, 0xcc, 0x89, 0xed, 0x91, 0x68,
	0x78, 0x84, 0xa5, 0x8f, 0x90, 0xd0, 0x03, 0xd8, 0xa0, 0x7d, 0x87, 0x5d, 0xe9, 0x7b, 0xb6, 0xff,
	0x92, 0xfa, 0xd2, 0x3d, 0x23, 0xb5, 0xe6, 0x1a, 0xed, 0x3b, 0x8d, 0x4e, 0x8d, 0xd7, 0x08, 0xcf,
	0x0c, 0xfa, 0x0e, 0x3e, 0x18, 0x38, 0x2e, 0xf1, 0x06, 0xa1, 0xdb, 0x73, 0x7f, 0x2b, 0xef, 0x6b,
	0xee, 0x59, 0xdf, 0xee, 0x76, 0xd9, 0x36, 0x01, 0x6f, 0xb7, 0x33, 0x70, 0xdc, 0x46, 0x02, 0xc3,
	0x8c, 0x11, 0xd0, 0x43, 0xd8, 0x1e, 0x76, 0x49, 0xea, 0x48, 0x98, 0x1e, 0xf3, 0xbd, 0xae, 0xfc,
	0x4e, 0xc4, 0xc6, 0xb0, 0x5b, 0x1e, 0x9d, 0x89, 0x26, 0xea, 0x18, 0x31, 0xbd, 0x1a, 0x7a, 0xa1,
	0x4d, 0xec, 0xc1, 0xa0, 0x1b, 0x91, 0x41, 0xe8, 0xf1, 0xe2, 0x05, 0x57, 0xd6, 0x39, 0xbc, 0xcd,
	0x31, 0xd4, 0x11, 0x82, 0xe5, 0xb1, 0xc2, 0x05, 0x8f, 0x5b, 0x65, 0x0c, 0x21, 0x2f, 0x95, 0xa2,
	0xc0, 0x64, 0x56, 0xc7, 0xb7, 0x7b, 0x94, 0xf8, 0xde, 0x30, 0x64, 0x73, 0x5f, 0xe1, 0xb5, 0x05,
	0x0e, 0xc4, 0x02, 0xc6, 0x94, 0x02, 0x3b, 0x48, 0xae, 0x6a, 0xfb, 0x61, 0xc0, 0x2f, 0x84, 0x39,
	0x9c, 0x1f, 0x74, 0x1c, 0x4d, 0x82, 0x4a, 0xff, 0x35, 0xc3, 0x29, 0x7f, 0xa4, 0xad, 0xae, 0x27,
	0x0d, 0x6b, 0xb0, 0xd6, 0xf5, 0x6c, 0x27, 0x5a, 0xbd, 0xb8, 0x93, 0x0b, 0x3d, 0x98, 0x0c, 0x5d,
	0xad, 0x7a, 0xb6, 0x23, 0x37, 0x21, 0xf9, 0x64, 0xbc, 0xda, 0x4d, 0xc3, 0xd1, 0x73, 0xd8, 0x64,
	0x02, 0x6d, 0xb2, 0x4b, 0x21, 0x0c, 0x93, 0xe1, 0xd0, 0x0d, 0x89, 0x37, 0xa5, 0xdb, 0x75, 0x6f,
	0xb2, 0xae, 0x34, 0x80, 0xad, 0xe9, 0xb3, 0x60, 0x87, 0x99, 0x1a, 0x30, 0xa0, 0xaf, 0x22, 0x87,
	0xba, 0x70, 0x0f, 0x6e, 0x24, 0xfa, 0x32, 0xe9, 0x2b, 0xe9, 0x57, 0xbf, 0x0d, 0x79, 0xde, 0xac,
	0x47, 0x43, 0xdf, 0x6d, 0xcb, 0xdd, 0x01, 0x06, 0xaa, 0x71, 0x48, 0xa9, 0x01, 0xcb, 0xd1, 0x24,
	0x99, 0x50, 0xe3, 0xf9, 0x5e, 0x4c, 0xbe, 0xcb, 0x07, 0x75, 0x19, 0x45, 0xc0, 0x21, 0x3c, 0x77,
	0xe0, 0x36, 0xe4, 0x45, 0xf5, 0x28, 0x97, 0x6a, 0x19, 0x8b, 0x16, 0x5c, 0xcf, 0x95, 0xfe, 0x47,
	0x06, 0x76, 0x2f, 0x5f, 0x36, 0xda, 0x87, 0xf5, 0xd1, 0xe6, 0x85, 0x3e, 0x5f, 0x48, 0xdf, 0x8b,
	0x5c, 0x9c, 0xf1, 0x9e, 0x84, 0x3e, 0x5b, 0x44, 0xdf, 0x43, 0xbf, 0x82, 0x9d, 0x18, 0xdf, 0xa7,
	0xce, 0x50, 0xde, 0xfe, 0x93, 0xcb, 0xd9, 0x8e, 0x10, 0x70, 0x54, 0x2f, 0xd6, 0x86, 0x2a, 0x80,
	0x84, 0x1c, 0x67, 0x4c, 0x17, 0xc5, 0xb8, 0x4f, 0x31, 0x80, 0x52, 0x1b, 0x80, 0x15, 0xd1, 0xa6,
	0xd1, 0x39, 0x91, 0x2d, 0x18, 0x51, 0x77, 0xba, 0xf6, 0x59, 0x20, 0x4d, 0x0a, 0x51, 0x28, 0xfd,
	0xdd, 0x0c, 0xac, 0xb6, 0x9a, 0x95, 0xd4, 0xe7, 0x31, 0x18, 0x39, 0x8e, 0x32, 0x63, 0x62, 0xb3,
	0xae, 0x30, 0x02, 0x1a, 0x0e, 0xfa, 0x04, 0x56, 0xc7, 0x3f, 0xa0, 0x21, 0x33, 0x81, 0x83, 0xf4,
	0xe7, 0x33, 0xf6, 0xa0, 0xd0, 0xf5, 0xda, 0x76, 0x97, 0x74, 0x92, 0x19, 0xcf, 0xc0, 0x61, 0x15,
	0xfe, 0x31, 0x12, 0x02, 0x9b, 0xa3, 0x29, 0x68, 0x5e, 0xbf, 0xe3, 0x9e, 0x89, 0x89, 0x54, 0x84,
	0xdd, 0x96, 0xfe, 0xe0, 0x47, 0x66, 0xc2, 0x85, 0x34, 0x36, 0x7f, 0xbc, 0x3a, 0x1c, 0x74, 0x92,
	0x00, 0x46, 0x1e, 0xad, 0x66, 0xa5, 0x69, 0x9f, 0xb9, 0xfd, 0x33, 0x4e, 0xfc, 0xe3, 0x73, 0xca,
	0x8c, 0xcf, 0x09, 0xdd, 0x00, 0xe0, 0x31, 0x61, 0xc9, 0xf4, 0xf7, 0xdc, 0x90, 0x1a, 0x03, 0x66,
	0xda, 0xdd, 0xff, 0x12, 0x16, 0x65, 0x60, 0x17, 0x53, 0x71, 0xd6, 0x51, 0xb3, 0x49, 0xaa, 0x3c,
	0x4c, 0x7e, 0x19, 0x96, 0x78, 0xe9, 0x19, 0xb3, 0x87, 0x32, 0x4c, 0xe3, 0xf1, 0x62, 0x1d, 0x2b,
	0xd9, 0xfb, 0xff, 0x6c, 0x09, 0x0a, 0xc9, 0xb7, 0x62, 0xa6, 0x2e, 0xcd, 0x23, 0x33, 0x0e, 0x83,
	0x9e, 0x41, 0x2b, 0x00, 0x4f, 0x1b, 0x66, 0x54, 0xe6, 0xa1, 0xd8, 0x58, 0xb5, 0xa2, 0x72, 0x96,
	0x87, 0x66, 0x57, 0xe2, 0xf2, 0x2c, 0xeb, 0xa0, 0x59, 0xad, 0xc5, 0x1d, 0xcc, 0x21, 0x04, 0x2b,
	0xd5, 0x86, 0x69, 0x92, 0x46, 0x45, 0xa6, 0x8e, 0x29, 0xf3, 0x3c, 0x73, 0x4f, 0xd7, 0x1a, 0x27,
	0x3a, 0x7e, 0x9e, 0x80, 0x2f, 0xa0, 0x35, 0x58, 0x36, 0x9a, 0x44, 0x53, 0xe3, 0xe6, 0x8b, 0xe8,
	0x63, 0x28, 0x8d, 0xc6, 0x27, 0xfa, 0x0f, 0x9a, 0xae, 0x97, 0x79, 0xa2, 0x55, 0x32, 0xb7, 0x4b,
	0xc9, 0x8b, 0x79, 0x19, 0x51, 0xbb, 0x02, 0x2a, 0xc2, 0x06, 0xcf, 0xef, 0x8a, 0xb3, 0xe8, 0x64,
	0xcd, 0xb2, 0xcc, 0xc6, 0xd2, 0x4f, 0xf4, 0xba, 0x45, 0x2c, 0x6c, 0x1c, 0x1d, 0xe9, 0xd8, 0x54,
	0x56, 0xd8, 0xd8, 0x8d, 0x96, 0xc5, 0xa6, 0x23, 0x92, 0xcb, 0x94, 0x55, 0x9e, 0xfb, 0xa5, 0x27,
	0x12, 0xf1, 0x46, 0x75, 0x8a, 0xc8, 0x16, 0x1c, 0xe5, 0xde, 0xf1, 0x88, 0xf3, 0x46, 0xcb, 0x52,
	0xd6, 0x58, 0xab, 0x96, 0x4e, 0x8c, 0x66, 0x94, 0xd4, 0x16, 0xa5, 0xf2, 0xe9, 0x0a, 0x42, 0x3b,
	0xb0, 0x99, 0xae, 0x8b, 0x8c, 0x8f, 0x75, 0xf4, 0x21, 0xdc, 0x2c, 0xeb, 0x15, 0xb5, 0x55, 0xb5,
	0x88, 0xde, 0x34, 0xa3, 0x34, 0xbb, 0xc4, 0xde, 0x6f, 0x8c, 0x52, 0xea, 0x24, 0x64, 0x13, 0x95,
	0xe0, 0x56, 0x22, 0x1d, 0x70, 0x4a, 0xf2, 0xa0, 0xb2, 0xc5, 0x3a, 0x8e, 0x2b, 0x84, 0xe5, 0xa3,
	0x45, 0x09, 0x71, 0x4f, 0x5b, 0xba, 0x69, 0x29, 0xdb, 0x3c, 0x2d, 0xf0, 0xe8, 0x19, 0xb1, 0xb0,
	0xaa, 0xe9, 0x51, 0x52, 0x9d, 0x52, 0x44, 0xdb, 0xb0, 0xde, 0xd2, 0xf9, 0xca, 0xc8, 0x8f, 0x8d,
	0xba, 0x1e, 0x0d, 0xbb, 0xc3, 0x0f, 0x7d, 0xb4, 0xd9, 0xbb, 0xdc, 0xc8, 0xd2, 0x8e, 0x62, 0xc0,
	0x07, 0x6c, 0x4c, 0xed, 0x58, 0xc5, 0x47, 0x22, 0xb6, 0x1e, 0x63, 0xbd, 0x2a, 0x86, 0xd4, 0x7f,
	0x90, 0x28, 0x37, 0x18, 0x8a, 0xda, 0xac, 0x13, 0xb5, 0x76, 0x88, 0xd3, 0xd3, 0x8a, 0xd2, 0x1d,
	0x6f, 0xf2, 0x74, 0x47, 0x76, 0x86, 0x9a, 0x79, 0x94, 0xcc, 0xa8, 0x8b, 0x86, 0xb9, 0xc5, 0x36,
	0xa4, 0x65, 0xaa, 0x47, 0x3a, 0xc1, 0x3a, 0xcf, 0xa9, 0xfb, 0x10, 0x3d, 0x80, 0x5f, 0x5e, 0xb2,
	0x8b, 0x53, 0xc7, 0x28, 0xa1, 0x2f, 0xe0, 0xb3, 0x78, 0x8c, 0xe3, 0xe7, 0x87, 0xd8, 0x28, 0x13,
	0xb3, 0x75, 0x68, 0x6a, 0xd8, 0x38, 0xd4, 0xcb, 0xd3, 0x46, 0xbd, 0x83, 0xbe, 0x84, 0x07, 0xe3,
	0x4d, 0x5a, 0xf5, 0xab, 0x1b, 0x7d, 0xc4, 0xf6, 0x32, 0x95, 0x47, 0x28, 0x2b, 0xee, 0xb2, 0xbd,
	0x4f, 0xe6, 0x5d, 0x72, 0x43, 0x56, 0xf9, 0x04, 0x6d, 0x80, 0x92, 0x06, 0x37, 0x9a, 0xca, 0x3d,
	0x86, 0xac, 0xf1, 0xfc, 0xcd, 0x66, 0x22, 0x7f, 0xf3, 0x3e, 0xba, 0x05, 0xbb, 0x2d, 0x9d, 0x93,
	0x7a, 0x35, 0x49, 0x5c, 0x72, 0x8c, 0x5f, 0xa2, 0x3d, 0xb8, 0x71, 0xac, 0xd7, 0x0f, 0x2f, 0xc5,
	0xf8, 0x94, 0xf5, 0x20, 0x53, 0x17, 0xeb, 0xba, 0xf5, 0xac, 0x81, 0x9f, 0xf0, 0x55, 0x44, 0xfb,
	0xfa, 0x19, 0xba, 0x0b, 0x1f, 0xca, 0x9c, 0xcb, 0x9a, 0x5a, 0x57, 0x8f, 0xf4, 0x1a, 0xe3, 0x1e,
	0x99, 0xaa, 0x1f, 0xef, 0xe6, 0x3e, 0x63, 0xec, 0x68, 0xfb, 0x13, 0x94, 0xfb, 0x00, 0x7d, 0x0b,
	0x5f, 0x4b, 0x0e, 0x6e, 0x54, 0x48, 0x4b, 0x27, 0x4d, 0xac, 0x9b, 0x7a, 0x5d, 0xd3, 0x89, 0x51,
	0x1f, 0xfd, 0x16, 0x83, 0x71, 0xe6, 0xc6, 0xba, 0x1a, 0x8d, 0xfd, 0x39, 0xa3, 0x2e, 0xb6, 0xbf,
	0x3c, 0x6d, 0x52, 0x2f, 0x2b, 0x5f, 0xdc, 0xff, 0xd7, 0x19, 0x98, 0x7d, 0xaa, 0x19, 0x68, 0x09,
	0xe6, 0x9f, 0x6a, 0x06, 0xf9, 0x5c, 0x99, 0x89, 0x7e, 0x7e, 0x21, 0xa2, 0x7e, 0xd9, 0xcf, 0x03,
	0x25, 0x1b, 0xfd, 0xfc, 0x52, 0x99, 0x8d, 0x7e, 0x7e, 0xa5, 0xcc, 0x45, 0x3f, 0x1f, 0x2a, 0xf3,
	0xd1, 0xcf, 0x47, 0xca, 0x42, 0xf4, 0xf3, 0x6b, 0x65, 0x31, 0xfa, 0xf9, 0x8d, 0x92, 0x8b, 0x7e,
	0x3e, 0x56, 0x96, 0xd8, 0x3d, 0x93, 0xe3, 0x3e, 0x54, 0xd4, 0xf8, 0xf7, 0x23, 0xe5, 0x30, 0xfe,
	0xfd, 0xb5, 0xa2, 0x45, 0xbf, 0xbf, 0xfe, 0x5c, 0xa9, 0xc4, 0xbf, 0x1f, 0x2a, 0x4f, 0xe2, 0xdf,
	0x8f, 0x95, 0xc6, 0x7d, 0x0a, 0x85, 0x64, 0xfe, 0x36, 0x3b, 0xe9, 0x56, 0xb3, 0xac, 0x5a, 0x6c,
	0x33, 0xa2, 0x7b, 0x8b, 0xc8, 0x79, 0x16, 0xd0, 0x7a, 0xc3, 0x22, 0x75, 0x5d, 0x2f, 0xf3, 0xeb,
	0xcc, 0x26, 0xac, 0x45, 0xbb, 0xce, 0xe0, 0x22, 0x0b, 0x37, 0xcb, 0x85, 0x17, 0xcf, 0x6f, 0x89,
	0x8e, 0x62, 0xf6, 0xfe, 0x13, 0x58, 0x1d, 0x8b, 0x94, 0x67, 0xb3, 0xa8, 0xb0, 0x31, 0x98, 0x5c,
	0xdf, 0x02, 0x64, 0xd4, 0x45, 0x89, 0xb4, 0xea, 0x35, 0xdd, 0xd2, 0x31, 0x1f, 0x60, 0x03, 0x94,
	0x18, 0x1e, 0x41, 0xb3, 0xf7, 0xbf, 0x81, 0xd5, 0xb1, 0x30, 0x6e, 0x36, 0x64, 0x34, 0x93, 0xaa,
	0x7e, 0xa2, 0x57, 0xc5, 0x47, 0x1c, 0x9a, 0x9a, 0x26, 0xe8, 0x5b, 0xc0, 0x32, 0xf7, 0xcb, 0xb0,
	0x92, 0xf6, 0x48, 0x4e, 0x4d, 0xd0, 0x2b, 0x40, 0x8e, 0xc1, 0x78, 0x29, 0xcb, 0xd9, 0xba, 0x6e,
	0x5a, 0xb8, 0xa5, 0x59, 0x2d, 0x36, 0xfe, 0xec, 0xfd, 0xc7, 0xb0, 0x18, 0xf9, 0xcc, 0x56, 0x00,
	0x4c, 0x53, 0x63, 0xec, 0xac, 0x93, 0x2f, 0x84, 0x82, 0x8a, 0xcb, 0x07, 0x42, 0x41, 0xc5, 0xe5,
	0x2f, 0x95, 0xec, 0xfd, 0xbf, 0xc8, 0x03, 0x8c, 0x9c, 0x80, 0x4c, 0xa6, 0x34, 0x9a, 0x3a, 0x56,
	0xad, 0x06, 0x26, 0x65, 0x5d, 0x64, 0x15, 0xe9, 0x65, 0x72, 0xa8, 0x62, 0x6c, 0xd4, 0x8f, 0x94,
	0x19, 0x26, 0xbe, 0x8d, 0xba, 0xd9, 0xaa, 0x54, 0x0c, 0xcd, 0x60, 0x44, 0x1e, 0xe7, 0x84, 0x2b,
	0x19, 0x9e, 0x08, 0x2e, 0x33, 0x98, 0x1b, 0x71, 0xea, 0x30, 0x29, 0xd7, 0xeb, 0x22, 0xeb, 0x3c,
	0x02, 0x34, 0xcb, 0xad, 0x98, 0x37, 0x78, 0xaa, 0xd1, 0x2c, 0x93, 0x4b, 0x5c, 0x66, 0x30, 0xb5,
	0xa5, 0xd7, 0xad, 0x88, 0xad, 0x1b, 0x78, 0x2c, 0x49, 0x59, 0xe6, 0x1d, 0xcf, 0x31, 0x96, 0x95,
	0xf2, 0x39, 0x4e, 0x5c, 0x66, 0x52, 0xa6, 0xa9, 0x6b, 0xe2, 0xea, 0x3a, 0xcf, 0x30, 0xa2, 0xec,
	0xe8, 0x46, 0xd3, 0x8a, 0x28, 0x62, 0xc4, 0x27, 0x0b, 0xe8, 0x97, 0xf0, 0x89, 0xec, 0x43, 0x2f,
	0x93, 0xa9, 0xb8, 0x91, 0xcc, 0x52, 0x16, 0x19, 0xf2, 0x18, 0x8a, 0xa5, 0xd7, 0x9a, 0x0d, 0xac,
	0x62, 0xa3, 0xfa, 0x9c, 0x48, 0xd5, 0xd8, 0xc0, 0x65, 0x1d, 0x2b, 0x39, 0xa1, 0xfd, 0x8e, 0x5a,
	0x55, 0x95, 0x6d, 0xa2, 0xaa, 0x59, 0xc6, 0x89, 0xd0, 0x36, 0xc0, 0x93, 0xc4, 0xa5, 0x04, 0x89,
	0x68, 0x31, 0x2f, 0x15, 0x69, 0x8c, 0x46, 0xe2, 0x59, 0x29, 0x05, 0xb6, 0x0c, 0xa3, 0xce, 0x15,
	0x69, 0x6a, 0xdf, 0x44, 0xfe, 0xb9, 0xf5, 0x5c, 0x64, 0xa7, 0x9b, 0x7a, 0x4d, 0x65, 0xbb, 0x26,
	0x72, 0xd1, 0x4d, 0x2e, 0x36, 0x54, 0xed, 0x89, 0x6e, 0x11, 0x91, 0x7c, 0xae, 0xac, 0x30, 0x43,
	0xc1, 0x7c, 0x5e, 0xb7, 0xd8, 0x28, 0x4c, 0xc8, 0x71, 0xc4, 0x49, 0xbc, 0x55, 0x76, 0x4e, 0x72,
	0x31, 0x55, 0xb5, 0x5c, 0x8f, 0xb7, 0x85, 0x89, 0x1c, 0x91, 0xb5, 0xde, 0xb4, 0x0c, 0x52, 0x33,
	0xcc, 0x9a, 0x6a, 0x69, 0xc7, 0xca, 0x1a, 0xeb, 0x77, 0xfc, 0x3c, 0x09, 0xa3, 0x55, 0xd2, 0xa8,
	0x57, 0x9f, 0x73, 0x4d, 0xfb, 0x4c, 0x2f, 0x2b, 0xe8, 0x32, 0xbc, 0x47, 0x69, 0xbc, 0x75, 0x26,
	0x69, 0x93, 0x78, 0xe5, 0x86, 0x6e, 0xf2, 0xc3, 0xd0, 0x7f, 0x30, 0x4c, 0x4b, 0xd9, 0x40, 0x0f,
	0xe1, 0x8b, 0xe9, 0xf4, 0x47, 0x2a, 0x0d, 0x4c, 0x24, 0x01, 0x68, 0xc4, 0xac, 0xf2, 0x59, 0xd7,
	0xcb, 0x9c, 0xfc, 0x36, 0xd9, 0x16, 0xa7, 0x8e, 0x9f, 0x44, 0x4c, 0xa0, 0x6c, 0xa1, 0xcf, 0xe0,
	0x17, 0xd7, 0xee, 0x52, 0xd9, 0x66, 0xb2, 0x7e, 0x3a, 0x95, 0xb3, 0xed, 0x54, 0x25, 0x5a, 0x91,
	0x89, 0xa2, 0xf8, 0xe0, 0x2c, 0x83, 0x9c, 0xa8, 0xd5, 0x16, 0xb3, 0x0d, 0x9e, 0xc0, 0x51, 0x4d,
	0xfd, 0xc1, 0xa8, 0xb5, 0x6a, 0xa4, 0xac, 0x5a, 0x2a, 0xc1, 0x4c, 0x86, 0x35, 0x75, 0xcc, 0xc4,
	0x3e, 0x1b, 0x8e, 0xb3, 0x41, 0xb3, 0xaa, 0xd6, 0x99, 0xbc, 0xb3, 0xf4, 0x23, 0x6c, 0x58, 0xcf,
	0x49, 0x13, 0x37, 0x2c, 0x91, 0x56, 0x4f, 0x0c, 0xa6, 0xdf, 0x1a, 0xa4, 0xda, 0x78, 0xa6, 0xec,
	0xa2, 0x4f, 0xe0, 0x4e, 0xfa, 0xe8, 0xd9, 0x14, 0xac, 0x63, 0x9d, 0x6b, 0x17, 0xc1, 0xc7, 0x8c,
	0xec, 0x3e, 0x40, 0xf7, 0xe1, 0xe3, 0xa9, 0xa7, 0x3f, 0x89, 0x7b, 0x83, 0x9d, 0x54, 0x34, 0xf1,
	0x9a, 0xda, 0x6c, 0xea, 0xe5, 0xa4, 0xa9, 0x10, 0xd3, 0xdd, 0x4d, 0x6e, 0x5c, 0xc9, 0xc1, 0xd5,
	0x6a, 0xf5, 0x39, 0x19, 0x7d, 0x59, 0xa1, 0xa6, 0x9b, 0xcc, 0xec, 0x50, 0x6e, 0x31, 0x2b, 0x66,
	0xd4, 0x57, 0xbd, 0xcc, 0xc4, 0xca, 0xf3, 0x54, 0xf6, 0xff, 0x6d, 0xf4, 0x39, 0x7c, 0x2a, 0xf1,
	0x05, 0x51, 0xd4, 0xb9, 0x1d, 0x64, 0x98, 0x16, 0x3b, 0x8a, 0x06, 0xe6, 0x87, 0x6f, 0xd4, 0x9a,
	0x55, 0xae, 0x53, 0xf5, 0xb2, 0xb2, 0x87, 0xbe, 0x86, 0x2f, 0xc7, 0x5a, 0x58, 0x44, 0x6b, 0xd4,
	0x9a, 0xaa, 0x65, 0x1c, 0x56, 0x75, 0xf2, 0xcc, 0xb0, 0x8e, 0xf9, 0xc2, 0xd8, 0xae, 0x35, 0xb4,
	0x46, 0x95, 0x19, 0x0d, 0x96, 0xae, 0x7c, 0xc8, 0x1a, 0x26, 0x8d, 0x0f, 0x5d, 0xf4, 0xf9, 0xd6,
	0x11, 0x4b, 0x8c, 0x9f, 0xe3, 0x14, 0x48, 0x66, 0x21, 0xe8, 0xf2, 0xa3, 0x0f, 0x77, 0xd0, 0x01,
	0xec, 0x47, 0x73, 0xb9, 0xe6, 0x34, 0x3e, 0xe2, 0x24, 0x1e, 0xc1, 0xc4, 0x49, 0x24, 0x25, 0xd7,
	0x5d, 0xa6, 0x7b, 0x18, 0xc5, 0xa8, 0x55, 0xac, 0xab, 0x65, 0xb6, 0x5d, 0x8c, 0x28, 0x94, 0x8f,
	0x19, 0x45, 0xc5, 0xe7, 0x44, 0xa4, 0x5d, 0xab, 0xdc, 0xbb, 0xff, 0xc7, 0x19, 0xc8, 0x27, 0xc2,
	0x1e, 0x98, 0x88, 0x11, 0x9a, 0xb2, 0x1a, 0x9b, 0xb0, 0x33, 0x6c, 0x05, 0x7c, 0x89, 0x8c, 0x6a,
	0x13, 0xfc, 0xa5, 0x64, 0xd0, 0x4d, 0xd8, 0x89, 0xd0, 0xf5, 0x9a, 0x8e, 0x8f, 0xf4, 0xba, 0xf6,
	0x3c, 0x6e, 0x98, 0x65, 0xa7, 0x1c, 0x37, 0x1c, 0xd5, 0x27, 0xbb, 0x98, 0x65, 0x9d, 0x4f, 0xb5,
	0x9c, 0xe7, 0xee, 0x3f, 0x06, 0x18, 0x05, 0x36, 0xb0, 0x85, 0xd5, 0xc8, 0x97, 0xec, 0x76, 0x25,
	0x8d, 0x29, 0xf6, 0x5b, 0x99, 0x11, 0x5f, 0xce, 0xa8, 0x27, 0x6b, 0x94, 0xcc, 0x7d, 0x0c, 0xca,
	0xf8, 0x8b, 0x3e, 0xd3, 0x83, 0x27, 0x3a, 0x16, 0xfb, 0x34, 0x23, 0xed, 0x6f, 0xc6, 0x78, 0x6c,
	0xeb, 0xe3, 0x8a, 0x0c, 0xab, 0xa8, 0x3f, 0x9b, 0xac, 0xc8, 0xde, 0xff, 0xeb, 0x0c, 0xc0, 0x28,
	0xf6, 0x05, 0x55, 0xe0, 0xb0, 0x6a, 0x98, 0x5c, 0xd8, 0x59, 0xaa, 0xc6, 0x68, 0xbc, 0xda, 0xa8,
	0x73, 0xa3, 0xdc, 0x6a, 0x10, 0x66, 0xd1, 0xf3, 0xab, 0x1a, 0x3f, 0x48, 0x36, 0x3f, 0xad, 0x51,
	0x37, 0x75, 0xad, 0x65, 0x19, 0x27, 0x3a, 0xc3, 0x17, 0x2c, 0x6d, 0x2a, 0x33, 0xe8, 0x10, 0xbe,
	0xbb, 0x6e, 0x3f, 0x97, 0xf4, 0x91, 0x61, 0x42, 0x68, 0xd4, 0x87, 0x31, 0xd6, 0x47, 0xd9, 0xa8,
	0x54, 0x74, 0xcc, 0xc8, 0x93, 0xf5, 0x64, 0x2a, 0xd9, 0xfb, 0x0f, 0x46, 0x49, 0x13, 0x22, 0x5a,
	0x84, 0x59, 0x0b, 0xc7, 0xee, 0xd9, 0x0b, 0x65, 0x86, 0xd9, 0x31, 0x75, 0xcf, 0xef, 0xd9, 0x5d,
	0xe9, 0xe7, 0xf7, 0xde, 0x28, 0xd9, 0xfb, 0x04, 0xd6, 0x26, 0xbe, 0xb2, 0xc9, 0x8c, 0x01, 0x0d,
	0xeb, 0x22, 0xc7, 0xf7, 0x73, 0x91, 0x32, 0xce, 0xcb, 0x3a, 0xb7, 0x14, 0x0b, 0x90, 0xe3, 0x4a,
	0x49, 0xe7, 0xc6, 0xe2, 0x0a, 0x80, 0x51, 0x97, 0x65, 0x66, 0x31, 0xb2, 0x1b, 0xa5, 0xb8, 0x9d,
	0x95, 0x99, 0xd9, 0x78, 0xf0, 0x47, 0x73, 0xb0, 0xce, 0xbf, 0xd0, 0x26, 0x07, 0x11, 0x3e, 0x50,
	0x9e, 0x07, 0x2d, 0x7c, 0x66, 0xfc, 0x83, 0x15, 0xa1, 0x1d, 0x06, 0x68, 0x77, 0xea, 0x67, 0x5f,
	0xf9, 0x37, 0x62, 0x77, 0xd7, 0x64, 0x1d, 0xff, 0x06, 0xf0, 0xfe, 0x89, 0xe7, 0x3a, 0xa5, 0x19,
	0xf4, 0x87, 0xb0, 0x9c, 0x8a, 0xa7, 0x47, 0x1f, 0xa5, 0xdc, 0x67, 0x97, 0x7c, 0x0a, 0x76, 0xf7,
	0xee, 0x5b, 0xb0, 0xe4, 0xe7, 0xc6, 0x66, 0x50, 0x0b, 0x60, 0xf4, 0x5d, 0x39, 0xf4, 0xe1, 0x78,
	0xb3, 0x89, 0x4f, 0xd9, 0xed, 0x96, 0xae, 0x42, 0x89, 0xbb, 0x75, 0x60, 0xed, 0xd0, 0xed, 0x3b,
	0x22, 0x26, 0xfa, 0x40, 0x7c, 0xeb, 0x0c, 0xdd, 0x9d, 0x88, 0x96, 0x9e, 0xf6, 0x89, 0xb7, 0xdd,
	0x8f, 0xdf, 0x86, 0x16, 0x8f, 0xf2, 0x3d, 0xac, 0x9a, 0x34, 0x4c, 0x7d, 0xfa, 0x23, 0xf5, 0x49,
	0xb8, 0x44, 0xc5, 0xf4, 0xdd, 0xfd, 0x11, 0x56, 0xc7, 0xbe, 0x43, 0x97, 0xda, 0x82, 0xe9, 0x9f,
	0xd6, 0x4b, 0x6d, 0xc1, 0x65, 0x9f, 0xb1, 0x9b, 0x39, 0xf8, 0x8b, 0x0c, 0x6c, 0xca, 0x19, 0x34,
	0x7d, 0xef, 0xfc, 0x42, 0x54, 0x39, 0xd4, 0x47, 0xad, 0xd1, 0xd7, 0x25, 0x84, 0xbd, 0x8f, 0xf6,
	0xde, 0xf6, 0xe9, 0xb5, 0xdd, 0xdb, 0x97, 0x62, 0x88, 0xaf, 0x27, 0x95, 0x66, 0x50, 0x03, 0x0a,
	0xc9, 0xaf, 0x2a, 0xa1, 0x5b, 0x97, 0x7c, 0x6e, 0x29, 0xea, 0xf2, 0xe6, 0x95, 0x9f, 0x63, 0x2a,
	0xcd, 0x1c, 0xfc, 0xe3, 0x2c, 0x14, 0x35, 0xda, 0x0f, 0xfd, 0x98, 0xb2, 0xa5, 0x77, 0xb1, 0x4b,
	0x7d, 0x64, 0x8d, 0x13, 0xe6, 0x58, 0x30, 0xf6, 0x24, 0x4d, 0xee, 0x5d, 0x8e, 0x10, 0x9f, 0xa8,
	0x05, 0xcb, 0xa9, 0xe8, 0xef, 0x54, 0xaf, 0xd3, 0x02, 0xd7, 0x53, 0xbd, 0x4e, 0x0d, 0x1c, 0x2f,
	0xcd, 0xa0, 0xbf, 0x05, 0x4a, 0x1c, 0x44, 0x1d, 0x75, 0x5c, 0x9a, 0x24, 0x94, 0xf1, 0x40, 0xeb,
	0xdd, 0x3b, 0x57, 0xe2, 0xc4, 0x27, 0xfd, 0x77, 0x60, 0x4b, 0xed, 0x75, 0x46, 0x97, 0x99, 0x38,
	0xe2, 0x04, 0x35, 0x61, 0xc3, 0xa4, 0xa1, 0xda, 0xeb, 0x8c, 0xc5, 0xcb, 0xdc, 0x4a, 0x75, 0x3c,
	0xf1, 0xb4, 0xbe, 0x9b, 0x74, 0x95, 0xa6, 0xe2, 0x57, 0x0e, 0xfe, 0xaf, 0xf8, 0x4e, 0x6a, 0xfc,
	0xd2, 0x59, 0xf1, 0xfc, 0xf8, 0xe1, 0x0d, 0x55, 0x38, 0x3f, 0xa4, 0x9e, 0xbb, 0xb7, 0x27, 0x5f,
	0x9d, 0x79, 0xc5, 0xe5, 0x43, 0xf0, 0x53, 0xd8, 0x10, 0xfd, 0xc8, 0x69, 0x05, 0xc2, 0xcf, 0x99,
	0x22, 0xd3, 0xa9, 0x4e, 0xd0, 0x2b, 0x7b, 0x55, 0x41, 0x31, 0x69, 0xdf, 0x11, 0x9e, 0x4d, 0x4c,
	0x79, 0x28, 0xfb, 0xd8, 0x13, 0xe4, 0xc8, 0xeb, 0x39, 0x95, 0x5f, 0x0f, 0xfe, 0x3a, 0x03, 0x5b,
	0xe6, 0xf4, 0xad, 0x6e, 0x01, 0x12, 0x5b, 0x9d, 0xfa, 0x68, 0xef, 0x9d, 0xb1, 0x8d, 0x9e, 0xf6,
	0x79, 0xd9, 0x2b, 0x27, 0x7d, 0xc2, 0xb7, 0xc2, 0x9c, 0x38, 0xc1, 0x8f, 0xae, 0x3e, 0x41, 0xa1,
	0xfa, 0xaf, 0x38, 0xc7, 0x97, 0xb0, 0xc1, 0xc8, 0x82, 0xfd, 0xa5, 0x26, 0x6c, 0xf2, 0x65, 0x98,
	0x3f, 0xeb, 0x32, 0x0e, 0x3f, 0xf8, 0x71, 0x87, 0x57, 0x3d, 0xe8, 0x86, 0xf4, 0x41, 0xbb, 0xeb,
	0x0d, 0x9d, 0x07, 0x67, 0x9e, 0xfc, 0x36, 0xfc, 0xe9, 0x02, 0xff, 0xff, 0xe5, 0xff, 0x0b, 0x00,
	0x00, 0xff, 0xff, 0xe6, 0x8a, 0x46, 0x7d, 0xa9, 0x5e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LocalSessionManagerClient is the client API for LocalSessionManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LocalSessionManagerClient interface {
	ReportRuleStats(ctx context.Context, in *RuleRecordTable, opts ...grpc.CallOption) (*protos.Void, error)
	CreateSession(ctx context.Context, in *LocalCreateSessionRequest, opts ...grpc.CallOption) (*LocalCreateSessionResponse, error)
	EndSession(ctx context.Context, in *LocalEndSessionRequest, opts ...grpc.CallOption) (*LocalEndSessionResponse, error)
	// A response to CreateBearer request defined in spgw service. Sends a mapping of dedicated bearer ID <-> policy.
	BindPolicy2Bearer(ctx context.Context, in *PolicyBearerBindingRequest, opts ...grpc.CallOption) (*PolicyBearerBindingResponse, error)
	// A set interface of subscribers -> currently active rules
	SetSessionRules(ctx context.Context, in *SessionRules, opts ...grpc.CallOption) (*protos.Void, error)
	UpdateTunnelIds(ctx context.Context, in *UpdateTunnelIdsRequest, opts ...grpc.CallOption) (*UpdateTunnelIdsResponse, error)
}

type localSessionManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalSessionManagerClient(cc grpc.ClientConnInterface) LocalSessionManagerClient {
	return &localSessionManagerClient{cc}
}

func (c *localSessionManagerClient) ReportRuleStats(ctx context.Context, in *RuleRecordTable, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.LocalSessionManager/ReportRuleStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localSessionManagerClient) CreateSession(ctx context.Context, in *LocalCreateSessionRequest, opts ...grpc.CallOption) (*LocalCreateSessionResponse, error) {
	out := new(LocalCreateSessionResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.LocalSessionManager/CreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localSessionManagerClient) EndSession(ctx context.Context, in *LocalEndSessionRequest, opts ...grpc.CallOption) (*LocalEndSessionResponse, error) {
	out := new(LocalEndSessionResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.LocalSessionManager/EndSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localSessionManagerClient) BindPolicy2Bearer(ctx context.Context, in *PolicyBearerBindingRequest, opts ...grpc.CallOption) (*PolicyBearerBindingResponse, error) {
	out := new(PolicyBearerBindingResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.LocalSessionManager/BindPolicy2Bearer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localSessionManagerClient) SetSessionRules(ctx context.Context, in *SessionRules, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.LocalSessionManager/SetSessionRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localSessionManagerClient) UpdateTunnelIds(ctx context.Context, in *UpdateTunnelIdsRequest, opts ...grpc.CallOption) (*UpdateTunnelIdsResponse, error) {
	out := new(UpdateTunnelIdsResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.LocalSessionManager/UpdateTunnelIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalSessionManagerServer is the server API for LocalSessionManager service.
type LocalSessionManagerServer interface {
	ReportRuleStats(context.Context, *RuleRecordTable) (*protos.Void, error)
	CreateSession(context.Context, *LocalCreateSessionRequest) (*LocalCreateSessionResponse, error)
	EndSession(context.Context, *LocalEndSessionRequest) (*LocalEndSessionResponse, error)
	// A response to CreateBearer request defined in spgw service. Sends a mapping of dedicated bearer ID <-> policy.
	BindPolicy2Bearer(context.Context, *PolicyBearerBindingRequest) (*PolicyBearerBindingResponse, error)
	// A set interface of subscribers -> currently active rules
	SetSessionRules(context.Context, *SessionRules) (*protos.Void, error)
	UpdateTunnelIds(context.Context, *UpdateTunnelIdsRequest) (*UpdateTunnelIdsResponse, error)
}

// UnimplementedLocalSessionManagerServer can be embedded to have forward compatible implementations.
type UnimplementedLocalSessionManagerServer struct {
}

func (*UnimplementedLocalSessionManagerServer) ReportRuleStats(ctx context.Context, req *RuleRecordTable) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportRuleStats not implemented")
}
func (*UnimplementedLocalSessionManagerServer) CreateSession(ctx context.Context, req *LocalCreateSessionRequest) (*LocalCreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (*UnimplementedLocalSessionManagerServer) EndSession(ctx context.Context, req *LocalEndSessionRequest) (*LocalEndSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndSession not implemented")
}
func (*UnimplementedLocalSessionManagerServer) BindPolicy2Bearer(ctx context.Context, req *PolicyBearerBindingRequest) (*PolicyBearerBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindPolicy2Bearer not implemented")
}
func (*UnimplementedLocalSessionManagerServer) SetSessionRules(ctx context.Context, req *SessionRules) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSessionRules not implemented")
}
func (*UnimplementedLocalSessionManagerServer) UpdateTunnelIds(ctx context.Context, req *UpdateTunnelIdsRequest) (*UpdateTunnelIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTunnelIds not implemented")
}

func RegisterLocalSessionManagerServer(s *grpc.Server, srv LocalSessionManagerServer) {
	s.RegisterService(&_LocalSessionManager_serviceDesc, srv)
}

func _LocalSessionManager_ReportRuleStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleRecordTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalSessionManagerServer).ReportRuleStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.LocalSessionManager/ReportRuleStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalSessionManagerServer).ReportRuleStats(ctx, req.(*RuleRecordTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalSessionManager_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocalCreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalSessionManagerServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.LocalSessionManager/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalSessionManagerServer).CreateSession(ctx, req.(*LocalCreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalSessionManager_EndSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocalEndSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalSessionManagerServer).EndSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.LocalSessionManager/EndSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalSessionManagerServer).EndSession(ctx, req.(*LocalEndSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalSessionManager_BindPolicy2Bearer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyBearerBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalSessionManagerServer).BindPolicy2Bearer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.LocalSessionManager/BindPolicy2Bearer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalSessionManagerServer).BindPolicy2Bearer(ctx, req.(*PolicyBearerBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalSessionManager_SetSessionRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRules)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalSessionManagerServer).SetSessionRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.LocalSessionManager/SetSessionRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalSessionManagerServer).SetSessionRules(ctx, req.(*SessionRules))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalSessionManager_UpdateTunnelIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTunnelIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalSessionManagerServer).UpdateTunnelIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.LocalSessionManager/UpdateTunnelIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalSessionManagerServer).UpdateTunnelIds(ctx, req.(*UpdateTunnelIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LocalSessionManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.LocalSessionManager",
	HandlerType: (*LocalSessionManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportRuleStats",
			Handler:    _LocalSessionManager_ReportRuleStats_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _LocalSessionManager_CreateSession_Handler,
		},
		{
			MethodName: "EndSession",
			Handler:    _LocalSessionManager_EndSession_Handler,
		},
		{
			MethodName: "BindPolicy2Bearer",
			Handler:    _LocalSessionManager_BindPolicy2Bearer_Handler,
		},
		{
			MethodName: "SetSessionRules",
			Handler:    _LocalSessionManager_SetSessionRules_Handler,
		},
		{
			MethodName: "UpdateTunnelIds",
			Handler:    _LocalSessionManager_UpdateTunnelIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/session_manager.proto",
}

// SessionProxyResponderClient is the client API for SessionProxyResponder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SessionProxyResponderClient interface {
	ChargingReAuth(ctx context.Context, in *ChargingReAuthRequest, opts ...grpc.CallOption) (*ChargingReAuthAnswer, error)
	// NOTE: if no session_id is specified, apply to all sessions for the IMSI
	PolicyReAuth(ctx context.Context, in *PolicyReAuthRequest, opts ...grpc.CallOption) (*PolicyReAuthAnswer, error)
}

type sessionProxyResponderClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionProxyResponderClient(cc grpc.ClientConnInterface) SessionProxyResponderClient {
	return &sessionProxyResponderClient{cc}
}

func (c *sessionProxyResponderClient) ChargingReAuth(ctx context.Context, in *ChargingReAuthRequest, opts ...grpc.CallOption) (*ChargingReAuthAnswer, error) {
	out := new(ChargingReAuthAnswer)
	err := c.cc.Invoke(ctx, "/magma.lte.SessionProxyResponder/ChargingReAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionProxyResponderClient) PolicyReAuth(ctx context.Context, in *PolicyReAuthRequest, opts ...grpc.CallOption) (*PolicyReAuthAnswer, error) {
	out := new(PolicyReAuthAnswer)
	err := c.cc.Invoke(ctx, "/magma.lte.SessionProxyResponder/PolicyReAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionProxyResponderServer is the server API for SessionProxyResponder service.
type SessionProxyResponderServer interface {
	ChargingReAuth(context.Context, *ChargingReAuthRequest) (*ChargingReAuthAnswer, error)
	// NOTE: if no session_id is specified, apply to all sessions for the IMSI
	PolicyReAuth(context.Context, *PolicyReAuthRequest) (*PolicyReAuthAnswer, error)
}

// UnimplementedSessionProxyResponderServer can be embedded to have forward compatible implementations.
type UnimplementedSessionProxyResponderServer struct {
}

func (*UnimplementedSessionProxyResponderServer) ChargingReAuth(ctx context.Context, req *ChargingReAuthRequest) (*ChargingReAuthAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChargingReAuth not implemented")
}
func (*UnimplementedSessionProxyResponderServer) PolicyReAuth(ctx context.Context, req *PolicyReAuthRequest) (*PolicyReAuthAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PolicyReAuth not implemented")
}

func RegisterSessionProxyResponderServer(s *grpc.Server, srv SessionProxyResponderServer) {
	s.RegisterService(&_SessionProxyResponder_serviceDesc, srv)
}

func _SessionProxyResponder_ChargingReAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChargingReAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionProxyResponderServer).ChargingReAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SessionProxyResponder/ChargingReAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionProxyResponderServer).ChargingReAuth(ctx, req.(*ChargingReAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionProxyResponder_PolicyReAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyReAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionProxyResponderServer).PolicyReAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SessionProxyResponder/PolicyReAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionProxyResponderServer).PolicyReAuth(ctx, req.(*PolicyReAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SessionProxyResponder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.SessionProxyResponder",
	HandlerType: (*SessionProxyResponderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChargingReAuth",
			Handler:    _SessionProxyResponder_ChargingReAuth_Handler,
		},
		{
			MethodName: "PolicyReAuth",
			Handler:    _SessionProxyResponder_PolicyReAuth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/session_manager.proto",
}

// CentralSessionControllerClient is the client API for CentralSessionController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CentralSessionControllerClient interface {
	// Notify OCS/PCRF of new session and return rules associated with subscriber
	// along with credits for each rule
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	// Updates OCS/PCRF with used credit and terminations from gateway
	UpdateSession(ctx context.Context, in *UpdateSessionRequest, opts ...grpc.CallOption) (*UpdateSessionResponse, error)
	// Terminates session in OCS/PCRF for a subscriber
	TerminateSession(ctx context.Context, in *SessionTerminateRequest, opts ...grpc.CallOption) (*SessionTerminateResponse, error)
}

type centralSessionControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCentralSessionControllerClient(cc grpc.ClientConnInterface) CentralSessionControllerClient {
	return &centralSessionControllerClient{cc}
}

func (c *centralSessionControllerClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.CentralSessionController/CreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centralSessionControllerClient) UpdateSession(ctx context.Context, in *UpdateSessionRequest, opts ...grpc.CallOption) (*UpdateSessionResponse, error) {
	out := new(UpdateSessionResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.CentralSessionController/UpdateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centralSessionControllerClient) TerminateSession(ctx context.Context, in *SessionTerminateRequest, opts ...grpc.CallOption) (*SessionTerminateResponse, error) {
	out := new(SessionTerminateResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.CentralSessionController/TerminateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CentralSessionControllerServer is the server API for CentralSessionController service.
type CentralSessionControllerServer interface {
	// Notify OCS/PCRF of new session and return rules associated with subscriber
	// along with credits for each rule
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	// Updates OCS/PCRF with used credit and terminations from gateway
	UpdateSession(context.Context, *UpdateSessionRequest) (*UpdateSessionResponse, error)
	// Terminates session in OCS/PCRF for a subscriber
	TerminateSession(context.Context, *SessionTerminateRequest) (*SessionTerminateResponse, error)
}

// UnimplementedCentralSessionControllerServer can be embedded to have forward compatible implementations.
type UnimplementedCentralSessionControllerServer struct {
}

func (*UnimplementedCentralSessionControllerServer) CreateSession(ctx context.Context, req *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (*UnimplementedCentralSessionControllerServer) UpdateSession(ctx context.Context, req *UpdateSessionRequest) (*UpdateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSession not implemented")
}
func (*UnimplementedCentralSessionControllerServer) TerminateSession(ctx context.Context, req *SessionTerminateRequest) (*SessionTerminateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateSession not implemented")
}

func RegisterCentralSessionControllerServer(s *grpc.Server, srv CentralSessionControllerServer) {
	s.RegisterService(&_CentralSessionController_serviceDesc, srv)
}

func _CentralSessionController_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralSessionControllerServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.CentralSessionController/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralSessionControllerServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentralSessionController_UpdateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralSessionControllerServer).UpdateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.CentralSessionController/UpdateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralSessionControllerServer).UpdateSession(ctx, req.(*UpdateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentralSessionController_TerminateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionTerminateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralSessionControllerServer).TerminateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.CentralSessionController/TerminateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralSessionControllerServer).TerminateSession(ctx, req.(*SessionTerminateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CentralSessionController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.CentralSessionController",
	HandlerType: (*CentralSessionControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _CentralSessionController_CreateSession_Handler,
		},
		{
			MethodName: "UpdateSession",
			Handler:    _CentralSessionController_UpdateSession_Handler,
		},
		{
			MethodName: "TerminateSession",
			Handler:    _CentralSessionController_TerminateSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/session_manager.proto",
}

// AmfPduSessionSmContextClient is the client API for AmfPduSessionSmContext service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AmfPduSessionSmContextClient interface {
	SetAmfSessionContext(ctx context.Context, in *SetSMSessionContext, opts ...grpc.CallOption) (*SmContextVoid, error)
}

type amfPduSessionSmContextClient struct {
	cc grpc.ClientConnInterface
}

func NewAmfPduSessionSmContextClient(cc grpc.ClientConnInterface) AmfPduSessionSmContextClient {
	return &amfPduSessionSmContextClient{cc}
}

func (c *amfPduSessionSmContextClient) SetAmfSessionContext(ctx context.Context, in *SetSMSessionContext, opts ...grpc.CallOption) (*SmContextVoid, error) {
	out := new(SmContextVoid)
	err := c.cc.Invoke(ctx, "/magma.lte.AmfPduSessionSmContext/SetAmfSessionContext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AmfPduSessionSmContextServer is the server API for AmfPduSessionSmContext service.
type AmfPduSessionSmContextServer interface {
	SetAmfSessionContext(context.Context, *SetSMSessionContext) (*SmContextVoid, error)
}

// UnimplementedAmfPduSessionSmContextServer can be embedded to have forward compatible implementations.
type UnimplementedAmfPduSessionSmContextServer struct {
}

func (*UnimplementedAmfPduSessionSmContextServer) SetAmfSessionContext(ctx context.Context, req *SetSMSessionContext) (*SmContextVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAmfSessionContext not implemented")
}

func RegisterAmfPduSessionSmContextServer(s *grpc.Server, srv AmfPduSessionSmContextServer) {
	s.RegisterService(&_AmfPduSessionSmContext_serviceDesc, srv)
}

func _AmfPduSessionSmContext_SetAmfSessionContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSMSessionContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmfPduSessionSmContextServer).SetAmfSessionContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.AmfPduSessionSmContext/SetAmfSessionContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmfPduSessionSmContextServer).SetAmfSessionContext(ctx, req.(*SetSMSessionContext))
	}
	return interceptor(ctx, in, info, handler)
}

var _AmfPduSessionSmContext_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.AmfPduSessionSmContext",
	HandlerType: (*AmfPduSessionSmContextServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetAmfSessionContext",
			Handler:    _AmfPduSessionSmContext_SetAmfSessionContext_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/session_manager.proto",
}

// SetInterfaceForUserPlaneClient is the client API for SetInterfaceForUserPlane service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SetInterfaceForUserPlaneClient interface {
	SetUPFNodeState(ctx context.Context, in *UPFNodeState, opts ...grpc.CallOption) (*SmContextVoid, error)
	SetUPFSessionsConfig(ctx context.Context, in *UPFSessionConfigState, opts ...grpc.CallOption) (*SmContextVoid, error)
	SendPagingReuest(ctx context.Context, in *UPFPagingInfo, opts ...grpc.CallOption) (*protos.Void, error)
}

type setInterfaceForUserPlaneClient struct {
	cc grpc.ClientConnInterface
}

func NewSetInterfaceForUserPlaneClient(cc grpc.ClientConnInterface) SetInterfaceForUserPlaneClient {
	return &setInterfaceForUserPlaneClient{cc}
}

func (c *setInterfaceForUserPlaneClient) SetUPFNodeState(ctx context.Context, in *UPFNodeState, opts ...grpc.CallOption) (*SmContextVoid, error) {
	out := new(SmContextVoid)
	err := c.cc.Invoke(ctx, "/magma.lte.SetInterfaceForUserPlane/SetUPFNodeState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *setInterfaceForUserPlaneClient) SetUPFSessionsConfig(ctx context.Context, in *UPFSessionConfigState, opts ...grpc.CallOption) (*SmContextVoid, error) {
	out := new(SmContextVoid)
	err := c.cc.Invoke(ctx, "/magma.lte.SetInterfaceForUserPlane/SetUPFSessionsConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *setInterfaceForUserPlaneClient) SendPagingReuest(ctx context.Context, in *UPFPagingInfo, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.SetInterfaceForUserPlane/SendPagingReuest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SetInterfaceForUserPlaneServer is the server API for SetInterfaceForUserPlane service.
type SetInterfaceForUserPlaneServer interface {
	SetUPFNodeState(context.Context, *UPFNodeState) (*SmContextVoid, error)
	SetUPFSessionsConfig(context.Context, *UPFSessionConfigState) (*SmContextVoid, error)
	SendPagingReuest(context.Context, *UPFPagingInfo) (*protos.Void, error)
}

// UnimplementedSetInterfaceForUserPlaneServer can be embedded to have forward compatible implementations.
type UnimplementedSetInterfaceForUserPlaneServer struct {
}

func (*UnimplementedSetInterfaceForUserPlaneServer) SetUPFNodeState(ctx context.Context, req *UPFNodeState) (*SmContextVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUPFNodeState not implemented")
}
func (*UnimplementedSetInterfaceForUserPlaneServer) SetUPFSessionsConfig(ctx context.Context, req *UPFSessionConfigState) (*SmContextVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUPFSessionsConfig not implemented")
}
func (*UnimplementedSetInterfaceForUserPlaneServer) SendPagingReuest(ctx context.Context, req *UPFPagingInfo) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPagingReuest not implemented")
}

func RegisterSetInterfaceForUserPlaneServer(s *grpc.Server, srv SetInterfaceForUserPlaneServer) {
	s.RegisterService(&_SetInterfaceForUserPlane_serviceDesc, srv)
}

func _SetInterfaceForUserPlane_SetUPFNodeState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UPFNodeState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SetInterfaceForUserPlaneServer).SetUPFNodeState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SetInterfaceForUserPlane/SetUPFNodeState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SetInterfaceForUserPlaneServer).SetUPFNodeState(ctx, req.(*UPFNodeState))
	}
	return interceptor(ctx, in, info, handler)
}

func _SetInterfaceForUserPlane_SetUPFSessionsConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UPFSessionConfigState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SetInterfaceForUserPlaneServer).SetUPFSessionsConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SetInterfaceForUserPlane/SetUPFSessionsConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SetInterfaceForUserPlaneServer).SetUPFSessionsConfig(ctx, req.(*UPFSessionConfigState))
	}
	return interceptor(ctx, in, info, handler)
}

func _SetInterfaceForUserPlane_SendPagingReuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UPFPagingInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SetInterfaceForUserPlaneServer).SendPagingReuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SetInterfaceForUserPlane/SendPagingReuest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SetInterfaceForUserPlaneServer).SendPagingReuest(ctx, req.(*UPFPagingInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _SetInterfaceForUserPlane_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.SetInterfaceForUserPlane",
	HandlerType: (*SetInterfaceForUserPlaneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetUPFNodeState",
			Handler:    _SetInterfaceForUserPlane_SetUPFNodeState_Handler,
		},
		{
			MethodName: "SetUPFSessionsConfig",
			Handler:    _SetInterfaceForUserPlane_SetUPFSessionsConfig_Handler,
		},
		{
			MethodName: "SendPagingReuest",
			Handler:    _SetInterfaceForUserPlane_SendPagingReuest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/session_manager.proto",
}

// SmfPduSessionSmContextClient is the client API for SmfPduSessionSmContext service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SmfPduSessionSmContextClient interface {
	SetAmfNotification(ctx context.Context, in *SetSmNotificationContext, opts ...grpc.CallOption) (*SmContextVoid, error)
	SetSmfSessionContext(ctx context.Context, in *SetSMSessionContextAccess, opts ...grpc.CallOption) (*SmContextVoid, error)
}

type smfPduSessionSmContextClient struct {
	cc grpc.ClientConnInterface
}

func NewSmfPduSessionSmContextClient(cc grpc.ClientConnInterface) SmfPduSessionSmContextClient {
	return &smfPduSessionSmContextClient{cc}
}

func (c *smfPduSessionSmContextClient) SetAmfNotification(ctx context.Context, in *SetSmNotificationContext, opts ...grpc.CallOption) (*SmContextVoid, error) {
	out := new(SmContextVoid)
	err := c.cc.Invoke(ctx, "/magma.lte.SmfPduSessionSmContext/SetAmfNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smfPduSessionSmContextClient) SetSmfSessionContext(ctx context.Context, in *SetSMSessionContextAccess, opts ...grpc.CallOption) (*SmContextVoid, error) {
	out := new(SmContextVoid)
	err := c.cc.Invoke(ctx, "/magma.lte.SmfPduSessionSmContext/SetSmfSessionContext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmfPduSessionSmContextServer is the server API for SmfPduSessionSmContext service.
type SmfPduSessionSmContextServer interface {
	SetAmfNotification(context.Context, *SetSmNotificationContext) (*SmContextVoid, error)
	SetSmfSessionContext(context.Context, *SetSMSessionContextAccess) (*SmContextVoid, error)
}

// UnimplementedSmfPduSessionSmContextServer can be embedded to have forward compatible implementations.
type UnimplementedSmfPduSessionSmContextServer struct {
}

func (*UnimplementedSmfPduSessionSmContextServer) SetAmfNotification(ctx context.Context, req *SetSmNotificationContext) (*SmContextVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAmfNotification not implemented")
}
func (*UnimplementedSmfPduSessionSmContextServer) SetSmfSessionContext(ctx context.Context, req *SetSMSessionContextAccess) (*SmContextVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSmfSessionContext not implemented")
}

func RegisterSmfPduSessionSmContextServer(s *grpc.Server, srv SmfPduSessionSmContextServer) {
	s.RegisterService(&_SmfPduSessionSmContext_serviceDesc, srv)
}

func _SmfPduSessionSmContext_SetAmfNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSmNotificationContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmfPduSessionSmContextServer).SetAmfNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SmfPduSessionSmContext/SetAmfNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmfPduSessionSmContextServer).SetAmfNotification(ctx, req.(*SetSmNotificationContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmfPduSessionSmContext_SetSmfSessionContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSMSessionContextAccess)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmfPduSessionSmContextServer).SetSmfSessionContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SmfPduSessionSmContext/SetSmfSessionContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmfPduSessionSmContextServer).SetSmfSessionContext(ctx, req.(*SetSMSessionContextAccess))
	}
	return interceptor(ctx, in, info, handler)
}

var _SmfPduSessionSmContext_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.SmfPduSessionSmContext",
	HandlerType: (*SmfPduSessionSmContextServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetAmfNotification",
			Handler:    _SmfPduSessionSmContext_SetAmfNotification_Handler,
		},
		{
			MethodName: "SetSmfSessionContext",
			Handler:    _SmfPduSessionSmContext_SetSmfSessionContext_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/session_manager.proto",
}

// AmfSmfSmNotificationClient is the client API for AmfSmfSmNotification service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AmfSmfSmNotificationClient interface {
	SetSmfNotification(ctx context.Context, in *SetSmNotificationContext, opts ...grpc.CallOption) (*SmContextVoid, error)
}

type amfSmfSmNotificationClient struct {
	cc grpc.ClientConnInterface
}

func NewAmfSmfSmNotificationClient(cc grpc.ClientConnInterface) AmfSmfSmNotificationClient {
	return &amfSmfSmNotificationClient{cc}
}

func (c *amfSmfSmNotificationClient) SetSmfNotification(ctx context.Context, in *SetSmNotificationContext, opts ...grpc.CallOption) (*SmContextVoid, error) {
	out := new(SmContextVoid)
	err := c.cc.Invoke(ctx, "/magma.lte.AmfSmfSmNotification/SetSmfNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AmfSmfSmNotificationServer is the server API for AmfSmfSmNotification service.
type AmfSmfSmNotificationServer interface {
	SetSmfNotification(context.Context, *SetSmNotificationContext) (*SmContextVoid, error)
}

// UnimplementedAmfSmfSmNotificationServer can be embedded to have forward compatible implementations.
type UnimplementedAmfSmfSmNotificationServer struct {
}

func (*UnimplementedAmfSmfSmNotificationServer) SetSmfNotification(ctx context.Context, req *SetSmNotificationContext) (*SmContextVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSmfNotification not implemented")
}

func RegisterAmfSmfSmNotificationServer(s *grpc.Server, srv AmfSmfSmNotificationServer) {
	s.RegisterService(&_AmfSmfSmNotification_serviceDesc, srv)
}

func _AmfSmfSmNotification_SetSmfNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSmNotificationContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmfSmfSmNotificationServer).SetSmfNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.AmfSmfSmNotification/SetSmfNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmfSmfSmNotificationServer).SetSmfNotification(ctx, req.(*SetSmNotificationContext))
	}
	return interceptor(ctx, in, info, handler)
}

var _AmfSmfSmNotification_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.AmfSmfSmNotification",
	HandlerType: (*AmfSmfSmNotificationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetSmfNotification",
			Handler:    _AmfSmfSmNotification_SetSmfNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/session_manager.proto",
}
