// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// S6AServiceClient is the client API for S6AService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type S6AServiceClient interface {
	// Delete a subscriber from mme. A grpc service in mme, client req initiated from subscriberdb.
	DeleteSubscriber(ctx context.Context, in *DeleteSubscriberRequest, opts ...grpc.CallOption) (*DeleteSubscriberResponse, error)
}

type s6AServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewS6AServiceClient(cc grpc.ClientConnInterface) S6AServiceClient {
	return &s6AServiceClient{cc}
}

func (c *s6AServiceClient) DeleteSubscriber(ctx context.Context, in *DeleteSubscriberRequest, opts ...grpc.CallOption) (*DeleteSubscriberResponse, error) {
	out := new(DeleteSubscriberResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.S6aService/DeleteSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// S6AServiceServer is the server API for S6AService service.
// All implementations should embed UnimplementedS6AServiceServer
// for forward compatibility
type S6AServiceServer interface {
	// Delete a subscriber from mme. A grpc service in mme, client req initiated from subscriberdb.
	DeleteSubscriber(context.Context, *DeleteSubscriberRequest) (*DeleteSubscriberResponse, error)
}

// UnimplementedS6AServiceServer should be embedded to have forward compatible implementations.
type UnimplementedS6AServiceServer struct {
}

func (UnimplementedS6AServiceServer) DeleteSubscriber(context.Context, *DeleteSubscriberRequest) (*DeleteSubscriberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubscriber not implemented")
}

// UnsafeS6AServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to S6AServiceServer will
// result in compilation errors.
type UnsafeS6AServiceServer interface {
	mustEmbedUnimplementedS6AServiceServer()
}

func RegisterS6AServiceServer(s grpc.ServiceRegistrar, srv S6AServiceServer) {
	s.RegisterService(&S6AService_ServiceDesc, srv)
}

func _S6AService_DeleteSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubscriberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S6AServiceServer).DeleteSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.S6aService/DeleteSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S6AServiceServer).DeleteSubscriber(ctx, req.(*DeleteSubscriberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// S6AService_ServiceDesc is the grpc.ServiceDesc for S6AService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var S6AService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.S6aService",
	HandlerType: (*S6AServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteSubscriber",
			Handler:    _S6AService_DeleteSubscriber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/s6a_service.proto",
}
