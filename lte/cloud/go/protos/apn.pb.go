//
//Copyright 2021 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: lte/protos/apn.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AggregatedMaximumBitrate_BitrateUnitsAMBR int32

const (
	AggregatedMaximumBitrate_BPS  AggregatedMaximumBitrate_BitrateUnitsAMBR = 0
	AggregatedMaximumBitrate_KBPS AggregatedMaximumBitrate_BitrateUnitsAMBR = 1
)

// Enum value maps for AggregatedMaximumBitrate_BitrateUnitsAMBR.
var (
	AggregatedMaximumBitrate_BitrateUnitsAMBR_name = map[int32]string{
		0: "BPS",
		1: "KBPS",
	}
	AggregatedMaximumBitrate_BitrateUnitsAMBR_value = map[string]int32{
		"BPS":  0,
		"KBPS": 1,
	}
)

func (x AggregatedMaximumBitrate_BitrateUnitsAMBR) Enum() *AggregatedMaximumBitrate_BitrateUnitsAMBR {
	p := new(AggregatedMaximumBitrate_BitrateUnitsAMBR)
	*p = x
	return p
}

func (x AggregatedMaximumBitrate_BitrateUnitsAMBR) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AggregatedMaximumBitrate_BitrateUnitsAMBR) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_apn_proto_enumTypes[0].Descriptor()
}

func (AggregatedMaximumBitrate_BitrateUnitsAMBR) Type() protoreflect.EnumType {
	return &file_lte_protos_apn_proto_enumTypes[0]
}

func (x AggregatedMaximumBitrate_BitrateUnitsAMBR) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AggregatedMaximumBitrate_BitrateUnitsAMBR.Descriptor instead.
func (AggregatedMaximumBitrate_BitrateUnitsAMBR) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_apn_proto_rawDescGZIP(), []int{1, 0}
}

type APNConfiguration_PDNType int32

const (
	APNConfiguration_IPV4         APNConfiguration_PDNType = 0
	APNConfiguration_IPV6         APNConfiguration_PDNType = 1
	APNConfiguration_IPV4V6       APNConfiguration_PDNType = 2
	APNConfiguration_IPV4_OR_IPV6 APNConfiguration_PDNType = 3
)

// Enum value maps for APNConfiguration_PDNType.
var (
	APNConfiguration_PDNType_name = map[int32]string{
		0: "IPV4",
		1: "IPV6",
		2: "IPV4V6",
		3: "IPV4_OR_IPV6",
	}
	APNConfiguration_PDNType_value = map[string]int32{
		"IPV4":         0,
		"IPV6":         1,
		"IPV4V6":       2,
		"IPV4_OR_IPV6": 3,
	}
)

func (x APNConfiguration_PDNType) Enum() *APNConfiguration_PDNType {
	p := new(APNConfiguration_PDNType)
	*p = x
	return p
}

func (x APNConfiguration_PDNType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APNConfiguration_PDNType) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_apn_proto_enumTypes[1].Descriptor()
}

func (APNConfiguration_PDNType) Type() protoreflect.EnumType {
	return &file_lte_protos_apn_proto_enumTypes[1]
}

func (x APNConfiguration_PDNType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use APNConfiguration_PDNType.Descriptor instead.
func (APNConfiguration_PDNType) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_apn_proto_rawDescGZIP(), []int{2, 0}
}

type APNConfig_PDNType int32

const (
	APNConfig_IPV4         APNConfig_PDNType = 0
	APNConfig_IPV6         APNConfig_PDNType = 1
	APNConfig_IPV4V6       APNConfig_PDNType = 2
	APNConfig_IPV4_OR_IPV6 APNConfig_PDNType = 3
)

// Enum value maps for APNConfig_PDNType.
var (
	APNConfig_PDNType_name = map[int32]string{
		0: "IPV4",
		1: "IPV6",
		2: "IPV4V6",
		3: "IPV4_OR_IPV6",
	}
	APNConfig_PDNType_value = map[string]int32{
		"IPV4":         0,
		"IPV6":         1,
		"IPV4V6":       2,
		"IPV4_OR_IPV6": 3,
	}
)

func (x APNConfig_PDNType) Enum() *APNConfig_PDNType {
	p := new(APNConfig_PDNType)
	*p = x
	return p
}

func (x APNConfig_PDNType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APNConfig_PDNType) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_apn_proto_enumTypes[2].Descriptor()
}

func (APNConfig_PDNType) Type() protoreflect.EnumType {
	return &file_lte_protos_apn_proto_enumTypes[2]
}

func (x APNConfig_PDNType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use APNConfig_PDNType.Descriptor instead.
func (APNConfig_PDNType) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_apn_proto_rawDescGZIP(), []int{3, 0}
}

type GatewayAPNConfig_APNFilter int32

const (
	GatewayAPNConfig_DEFAULT GatewayAPNConfig_APNFilter = 0
	GatewayAPNConfig_BLOCK   GatewayAPNConfig_APNFilter = 1
	GatewayAPNConfig_PERMIT  GatewayAPNConfig_APNFilter = 2
)

// Enum value maps for GatewayAPNConfig_APNFilter.
var (
	GatewayAPNConfig_APNFilter_name = map[int32]string{
		0: "DEFAULT",
		1: "BLOCK",
		2: "PERMIT",
	}
	GatewayAPNConfig_APNFilter_value = map[string]int32{
		"DEFAULT": 0,
		"BLOCK":   1,
		"PERMIT":  2,
	}
)

func (x GatewayAPNConfig_APNFilter) Enum() *GatewayAPNConfig_APNFilter {
	p := new(GatewayAPNConfig_APNFilter)
	*p = x
	return p
}

func (x GatewayAPNConfig_APNFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GatewayAPNConfig_APNFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_apn_proto_enumTypes[3].Descriptor()
}

func (GatewayAPNConfig_APNFilter) Type() protoreflect.EnumType {
	return &file_lte_protos_apn_proto_enumTypes[3]
}

func (x GatewayAPNConfig_APNFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GatewayAPNConfig_APNFilter.Descriptor instead.
func (GatewayAPNConfig_APNFilter) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_apn_proto_rawDescGZIP(), []int{4, 0}
}

type GatewayAPNConfig_EgressType int32

const (
	GatewayAPNConfig_VLAN GatewayAPNConfig_EgressType = 0
)

// Enum value maps for GatewayAPNConfig_EgressType.
var (
	GatewayAPNConfig_EgressType_name = map[int32]string{
		0: "VLAN",
	}
	GatewayAPNConfig_EgressType_value = map[string]int32{
		"VLAN": 0,
	}
)

func (x GatewayAPNConfig_EgressType) Enum() *GatewayAPNConfig_EgressType {
	p := new(GatewayAPNConfig_EgressType)
	*p = x
	return p
}

func (x GatewayAPNConfig_EgressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GatewayAPNConfig_EgressType) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_apn_proto_enumTypes[4].Descriptor()
}

func (GatewayAPNConfig_EgressType) Type() protoreflect.EnumType {
	return &file_lte_protos_apn_proto_enumTypes[4]
}

func (x GatewayAPNConfig_EgressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GatewayAPNConfig_EgressType.Descriptor instead.
func (GatewayAPNConfig_EgressType) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_apn_proto_rawDescGZIP(), []int{4, 1}
}

type GatewayAPNConfig_IpAllocatorType int32

const (
	GatewayAPNConfig_IP_POOL GatewayAPNConfig_IpAllocatorType = 0
	GatewayAPNConfig_DHCP    GatewayAPNConfig_IpAllocatorType = 1
)

// Enum value maps for GatewayAPNConfig_IpAllocatorType.
var (
	GatewayAPNConfig_IpAllocatorType_name = map[int32]string{
		0: "IP_POOL",
		1: "DHCP",
	}
	GatewayAPNConfig_IpAllocatorType_value = map[string]int32{
		"IP_POOL": 0,
		"DHCP":    1,
	}
)

func (x GatewayAPNConfig_IpAllocatorType) Enum() *GatewayAPNConfig_IpAllocatorType {
	p := new(GatewayAPNConfig_IpAllocatorType)
	*p = x
	return p
}

func (x GatewayAPNConfig_IpAllocatorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GatewayAPNConfig_IpAllocatorType) Descriptor() protoreflect.EnumDescriptor {
	return file_lte_protos_apn_proto_enumTypes[5].Descriptor()
}

func (GatewayAPNConfig_IpAllocatorType) Type() protoreflect.EnumType {
	return &file_lte_protos_apn_proto_enumTypes[5]
}

func (x GatewayAPNConfig_IpAllocatorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GatewayAPNConfig_IpAllocatorType.Descriptor instead.
func (GatewayAPNConfig_IpAllocatorType) EnumDescriptor() ([]byte, []int) {
	return file_lte_protos_apn_proto_rawDescGZIP(), []int{4, 2}
}

// For details about values see 29.212
type QoSProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassId                 int32  `protobuf:"varint,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	PriorityLevel           uint32 `protobuf:"varint,2,opt,name=priority_level,json=priorityLevel,proto3" json:"priority_level,omitempty"`
	PreemptionCapability    bool   `protobuf:"varint,3,opt,name=preemption_capability,json=preemptionCapability,proto3" json:"preemption_capability,omitempty"`
	PreemptionVulnerability bool   `protobuf:"varint,4,opt,name=preemption_vulnerability,json=preemptionVulnerability,proto3" json:"preemption_vulnerability,omitempty"`
}

func (x *QoSProfile) Reset() {
	*x = QoSProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_apn_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSProfile) ProtoMessage() {}

func (x *QoSProfile) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_apn_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSProfile.ProtoReflect.Descriptor instead.
func (*QoSProfile) Descriptor() ([]byte, []int) {
	return file_lte_protos_apn_proto_rawDescGZIP(), []int{0}
}

func (x *QoSProfile) GetClassId() int32 {
	if x != nil {
		return x.ClassId
	}
	return 0
}

func (x *QoSProfile) GetPriorityLevel() uint32 {
	if x != nil {
		return x.PriorityLevel
	}
	return 0
}

func (x *QoSProfile) GetPreemptionCapability() bool {
	if x != nil {
		return x.PreemptionCapability
	}
	return false
}

func (x *QoSProfile) GetPreemptionVulnerability() bool {
	if x != nil {
		return x.PreemptionVulnerability
	}
	return false
}

// APN authorized bitrate
type AggregatedMaximumBitrate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum uplink bitrate
	MaxBandwidthUl uint32 `protobuf:"varint,1,opt,name=max_bandwidth_ul,json=maxBandwidthUl,proto3" json:"max_bandwidth_ul,omitempty"`
	// Maximum downlink bitrate
	MaxBandwidthDl uint32 `protobuf:"varint,2,opt,name=max_bandwidth_dl,json=maxBandwidthDl,proto3" json:"max_bandwidth_dl,omitempty"`
	// Unit (either bps or Kbps)
	BrUnit AggregatedMaximumBitrate_BitrateUnitsAMBR `protobuf:"varint,3,opt,name=br_unit,json=brUnit,proto3,enum=magma.lte.AggregatedMaximumBitrate_BitrateUnitsAMBR" json:"br_unit,omitempty"`
}

func (x *AggregatedMaximumBitrate) Reset() {
	*x = AggregatedMaximumBitrate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_apn_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregatedMaximumBitrate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregatedMaximumBitrate) ProtoMessage() {}

func (x *AggregatedMaximumBitrate) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_apn_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregatedMaximumBitrate.ProtoReflect.Descriptor instead.
func (*AggregatedMaximumBitrate) Descriptor() ([]byte, []int) {
	return file_lte_protos_apn_proto_rawDescGZIP(), []int{1}
}

func (x *AggregatedMaximumBitrate) GetMaxBandwidthUl() uint32 {
	if x != nil {
		return x.MaxBandwidthUl
	}
	return 0
}

func (x *AggregatedMaximumBitrate) GetMaxBandwidthDl() uint32 {
	if x != nil {
		return x.MaxBandwidthDl
	}
	return 0
}

func (x *AggregatedMaximumBitrate) GetBrUnit() AggregatedMaximumBitrate_BitrateUnitsAMBR {
	if x != nil {
		return x.BrUnit
	}
	return AggregatedMaximumBitrate_BPS
}

type APNConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// APN identifier
	ContextId uint32 `protobuf:"varint,1,opt,name=context_id,json=contextId,proto3" json:"context_id,omitempty"`
	// Contains either the APN Name or wildcard "*"
	ServiceSelection string                       `protobuf:"bytes,2,opt,name=service_selection,json=serviceSelection,proto3" json:"service_selection,omitempty"`
	QosProfile       *APNConfiguration_QoSProfile `protobuf:"bytes,3,opt,name=qos_profile,json=qosProfile,proto3" json:"qos_profile,omitempty"`
	Ambr             *AggregatedMaximumBitrate    `protobuf:"bytes,4,opt,name=ambr,proto3" json:"ambr,omitempty"`
	Pdn              APNConfiguration_PDNType     `protobuf:"varint,5,opt,name=pdn,proto3,enum=magma.lte.APNConfiguration_PDNType" json:"pdn,omitempty"`
	// Optional static IP to allocate for this subscriber on this APN
	AssignedStaticIp string `protobuf:"bytes,6,opt,name=assigned_static_ip,json=assignedStaticIp,proto3" json:"assigned_static_ip,omitempty"`
	// resource is gateway-specific guidance for serving the APN
	Resource *APNConfiguration_APNResource `protobuf:"bytes,7,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (x *APNConfiguration) Reset() {
	*x = APNConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_apn_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APNConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APNConfiguration) ProtoMessage() {}

func (x *APNConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_apn_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APNConfiguration.ProtoReflect.Descriptor instead.
func (*APNConfiguration) Descriptor() ([]byte, []int) {
	return file_lte_protos_apn_proto_rawDescGZIP(), []int{2}
}

func (x *APNConfiguration) GetContextId() uint32 {
	if x != nil {
		return x.ContextId
	}
	return 0
}

func (x *APNConfiguration) GetServiceSelection() string {
	if x != nil {
		return x.ServiceSelection
	}
	return ""
}

func (x *APNConfiguration) GetQosProfile() *APNConfiguration_QoSProfile {
	if x != nil {
		return x.QosProfile
	}
	return nil
}

func (x *APNConfiguration) GetAmbr() *AggregatedMaximumBitrate {
	if x != nil {
		return x.Ambr
	}
	return nil
}

func (x *APNConfiguration) GetPdn() APNConfiguration_PDNType {
	if x != nil {
		return x.Pdn
	}
	return APNConfiguration_IPV4
}

func (x *APNConfiguration) GetAssignedStaticIp() string {
	if x != nil {
		return x.AssignedStaticIp
	}
	return ""
}

func (x *APNConfiguration) GetResource() *APNConfiguration_APNResource {
	if x != nil {
		return x.Resource
	}
	return nil
}

// Network wide APN configuration
type APNConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Contains either the APN Name or wildcard "*"
	ServiceSelection string                    `protobuf:"bytes,2,opt,name=service_selection,json=serviceSelection,proto3" json:"service_selection,omitempty"`
	QosProfile       *QoSProfile               `protobuf:"bytes,3,opt,name=qos_profile,json=qosProfile,proto3" json:"qos_profile,omitempty"`
	Ambr             *AggregatedMaximumBitrate `protobuf:"bytes,4,opt,name=ambr,proto3" json:"ambr,omitempty"`
	Pdn              APNConfig_PDNType         `protobuf:"varint,5,opt,name=pdn,proto3,enum=magma.lte.APNConfig_PDNType" json:"pdn,omitempty"`
}

func (x *APNConfig) Reset() {
	*x = APNConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_apn_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APNConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APNConfig) ProtoMessage() {}

func (x *APNConfig) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_apn_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APNConfig.ProtoReflect.Descriptor instead.
func (*APNConfig) Descriptor() ([]byte, []int) {
	return file_lte_protos_apn_proto_rawDescGZIP(), []int{3}
}

func (x *APNConfig) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *APNConfig) GetServiceSelection() string {
	if x != nil {
		return x.ServiceSelection
	}
	return ""
}

func (x *APNConfig) GetQosProfile() *QoSProfile {
	if x != nil {
		return x.QosProfile
	}
	return nil
}

func (x *APNConfig) GetAmbr() *AggregatedMaximumBitrate {
	if x != nil {
		return x.Ambr
	}
	return nil
}

func (x *APNConfig) GetPdn() APNConfig_PDNType {
	if x != nil {
		return x.Pdn
	}
	return APNConfig_IPV4
}

// Gateway specific APN configuration
type GatewayAPNConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApnId           uint32                            `protobuf:"varint,1,opt,name=apn_id,json=apnId,proto3" json:"apn_id,omitempty"`
	ApnFilter       GatewayAPNConfig_APNFilter        `protobuf:"varint,2,opt,name=apn_filter,json=apnFilter,proto3,enum=magma.lte.GatewayAPNConfig_APNFilter" json:"apn_filter,omitempty"`
	DnsPrimary      string                            `protobuf:"bytes,3,opt,name=dns_primary,json=dnsPrimary,proto3" json:"dns_primary,omitempty"`
	DnsSecondary    string                            `protobuf:"bytes,4,opt,name=dns_secondary,json=dnsSecondary,proto3" json:"dns_secondary,omitempty"`
	IpAllocatorType GatewayAPNConfig_IpAllocatorType  `protobuf:"varint,5,opt,name=ip_allocator_type,json=ipAllocatorType,proto3,enum=magma.lte.GatewayAPNConfig_IpAllocatorType" json:"ip_allocator_type,omitempty"`
	IpBlock         string                            `protobuf:"bytes,6,opt,name=ip_block,json=ipBlock,proto3" json:"ip_block,omitempty"`
	TransportConfig *GatewayAPNConfig_TransportConfig `protobuf:"bytes,7,opt,name=transport_config,json=transportConfig,proto3" json:"transport_config,omitempty"`
}

func (x *GatewayAPNConfig) Reset() {
	*x = GatewayAPNConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_apn_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayAPNConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayAPNConfig) ProtoMessage() {}

func (x *GatewayAPNConfig) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_apn_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayAPNConfig.ProtoReflect.Descriptor instead.
func (*GatewayAPNConfig) Descriptor() ([]byte, []int) {
	return file_lte_protos_apn_proto_rawDescGZIP(), []int{4}
}

func (x *GatewayAPNConfig) GetApnId() uint32 {
	if x != nil {
		return x.ApnId
	}
	return 0
}

func (x *GatewayAPNConfig) GetApnFilter() GatewayAPNConfig_APNFilter {
	if x != nil {
		return x.ApnFilter
	}
	return GatewayAPNConfig_DEFAULT
}

func (x *GatewayAPNConfig) GetDnsPrimary() string {
	if x != nil {
		return x.DnsPrimary
	}
	return ""
}

func (x *GatewayAPNConfig) GetDnsSecondary() string {
	if x != nil {
		return x.DnsSecondary
	}
	return ""
}

func (x *GatewayAPNConfig) GetIpAllocatorType() GatewayAPNConfig_IpAllocatorType {
	if x != nil {
		return x.IpAllocatorType
	}
	return GatewayAPNConfig_IP_POOL
}

func (x *GatewayAPNConfig) GetIpBlock() string {
	if x != nil {
		return x.IpBlock
	}
	return ""
}

func (x *GatewayAPNConfig) GetTransportConfig() *GatewayAPNConfig_TransportConfig {
	if x != nil {
		return x.TransportConfig
	}
	return nil
}

type ListApnConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// page_size is the maximum number of entities returned per request.
	PageSize uint32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// page_token is a serialized entity page token for paginated loads.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListApnConfigRequest) Reset() {
	*x = ListApnConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_apn_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListApnConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApnConfigRequest) ProtoMessage() {}

func (x *ListApnConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_apn_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApnConfigRequest.ProtoReflect.Descriptor instead.
func (*ListApnConfigRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_apn_proto_rawDescGZIP(), []int{5}
}

func (x *ListApnConfigRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListApnConfigRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListApnConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configs []*APNConfig `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
	// next_page_token is a serialized entity page token for subsequent paginated
	// loads.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListApnConfigResponse) Reset() {
	*x = ListApnConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_apn_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListApnConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApnConfigResponse) ProtoMessage() {}

func (x *ListApnConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_apn_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApnConfigResponse.ProtoReflect.Descriptor instead.
func (*ListApnConfigResponse) Descriptor() ([]byte, []int) {
	return file_lte_protos_apn_proto_rawDescGZIP(), []int{6}
}

func (x *ListApnConfigResponse) GetConfigs() []*APNConfig {
	if x != nil {
		return x.Configs
	}
	return nil
}

func (x *ListApnConfigResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListGatewayApnConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// page_size is the maximum number of entities returned per request.
	PageSize uint32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// page_token is a serialized entity page token for paginated loads.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// hardware id of the requesting gateway
	GatewayId string `protobuf:"bytes,3,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
}

func (x *ListGatewayApnConfigRequest) Reset() {
	*x = ListGatewayApnConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_apn_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGatewayApnConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGatewayApnConfigRequest) ProtoMessage() {}

func (x *ListGatewayApnConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_apn_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGatewayApnConfigRequest.ProtoReflect.Descriptor instead.
func (*ListGatewayApnConfigRequest) Descriptor() ([]byte, []int) {
	return file_lte_protos_apn_proto_rawDescGZIP(), []int{7}
}

func (x *ListGatewayApnConfigRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListGatewayApnConfigRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListGatewayApnConfigRequest) GetGatewayId() string {
	if x != nil {
		return x.GatewayId
	}
	return ""
}

type ListGatewayApnConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configs []*GatewayAPNConfig `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
	// next_page_token is a serialized entity page token for subsequent paginated
	// loads.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListGatewayApnConfigResponse) Reset() {
	*x = ListGatewayApnConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_apn_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGatewayApnConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGatewayApnConfigResponse) ProtoMessage() {}

func (x *ListGatewayApnConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_apn_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGatewayApnConfigResponse.ProtoReflect.Descriptor instead.
func (*ListGatewayApnConfigResponse) Descriptor() ([]byte, []int) {
	return file_lte_protos_apn_proto_rawDescGZIP(), []int{8}
}

func (x *ListGatewayApnConfigResponse) GetConfigs() []*GatewayAPNConfig {
	if x != nil {
		return x.Configs
	}
	return nil
}

func (x *ListGatewayApnConfigResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// APN QoS profile
type APNConfiguration_QoSProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassId                 int32  `protobuf:"varint,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	PriorityLevel           uint32 `protobuf:"varint,2,opt,name=priority_level,json=priorityLevel,proto3" json:"priority_level,omitempty"`
	PreemptionCapability    bool   `protobuf:"varint,3,opt,name=preemption_capability,json=preemptionCapability,proto3" json:"preemption_capability,omitempty"`
	PreemptionVulnerability bool   `protobuf:"varint,4,opt,name=preemption_vulnerability,json=preemptionVulnerability,proto3" json:"preemption_vulnerability,omitempty"`
}

func (x *APNConfiguration_QoSProfile) Reset() {
	*x = APNConfiguration_QoSProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_apn_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APNConfiguration_QoSProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APNConfiguration_QoSProfile) ProtoMessage() {}

func (x *APNConfiguration_QoSProfile) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_apn_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APNConfiguration_QoSProfile.ProtoReflect.Descriptor instead.
func (*APNConfiguration_QoSProfile) Descriptor() ([]byte, []int) {
	return file_lte_protos_apn_proto_rawDescGZIP(), []int{2, 0}
}

func (x *APNConfiguration_QoSProfile) GetClassId() int32 {
	if x != nil {
		return x.ClassId
	}
	return 0
}

func (x *APNConfiguration_QoSProfile) GetPriorityLevel() uint32 {
	if x != nil {
		return x.PriorityLevel
	}
	return 0
}

func (x *APNConfiguration_QoSProfile) GetPreemptionCapability() bool {
	if x != nil {
		return x.PreemptionCapability
	}
	return false
}

func (x *APNConfiguration_QoSProfile) GetPreemptionVulnerability() bool {
	if x != nil {
		return x.PreemptionVulnerability
	}
	return false
}

type APNConfiguration_APNResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApnName    string `protobuf:"bytes,1,opt,name=apn_name,json=apnName,proto3" json:"apn_name,omitempty"`
	GatewayIp  string `protobuf:"bytes,2,opt,name=gateway_ip,json=gatewayIp,proto3" json:"gateway_ip,omitempty"`
	GatewayMac string `protobuf:"bytes,3,opt,name=gateway_mac,json=gatewayMac,proto3" json:"gateway_mac,omitempty"`
	VlanId     uint32 `protobuf:"varint,4,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
}

func (x *APNConfiguration_APNResource) Reset() {
	*x = APNConfiguration_APNResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_apn_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APNConfiguration_APNResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APNConfiguration_APNResource) ProtoMessage() {}

func (x *APNConfiguration_APNResource) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_apn_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APNConfiguration_APNResource.ProtoReflect.Descriptor instead.
func (*APNConfiguration_APNResource) Descriptor() ([]byte, []int) {
	return file_lte_protos_apn_proto_rawDescGZIP(), []int{2, 1}
}

func (x *APNConfiguration_APNResource) GetApnName() string {
	if x != nil {
		return x.ApnName
	}
	return ""
}

func (x *APNConfiguration_APNResource) GetGatewayIp() string {
	if x != nil {
		return x.GatewayIp
	}
	return ""
}

func (x *APNConfiguration_APNResource) GetGatewayMac() string {
	if x != nil {
		return x.GatewayMac
	}
	return ""
}

func (x *APNConfiguration_APNResource) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

type GatewayAPNConfig_VlanConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanId uint32 `protobuf:"varint,4,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
}

func (x *GatewayAPNConfig_VlanConfig) Reset() {
	*x = GatewayAPNConfig_VlanConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_apn_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayAPNConfig_VlanConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayAPNConfig_VlanConfig) ProtoMessage() {}

func (x *GatewayAPNConfig_VlanConfig) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_apn_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayAPNConfig_VlanConfig.ProtoReflect.Descriptor instead.
func (*GatewayAPNConfig_VlanConfig) Descriptor() ([]byte, []int) {
	return file_lte_protos_apn_proto_rawDescGZIP(), []int{4, 0}
}

func (x *GatewayAPNConfig_VlanConfig) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

type GatewayAPNConfig_TransportConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GatewayIp  string                       `protobuf:"bytes,1,opt,name=gateway_ip,json=gatewayIp,proto3" json:"gateway_ip,omitempty"`
	GatewayMac string                       `protobuf:"bytes,2,opt,name=gateway_mac,json=gatewayMac,proto3" json:"gateway_mac,omitempty"`
	EgressType GatewayAPNConfig_EgressType  `protobuf:"varint,3,opt,name=egress_type,json=egressType,proto3,enum=magma.lte.GatewayAPNConfig_EgressType" json:"egress_type,omitempty"`
	VlanConfig *GatewayAPNConfig_VlanConfig `protobuf:"bytes,4,opt,name=vlan_config,json=vlanConfig,proto3" json:"vlan_config,omitempty"`
}

func (x *GatewayAPNConfig_TransportConfig) Reset() {
	*x = GatewayAPNConfig_TransportConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_protos_apn_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayAPNConfig_TransportConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayAPNConfig_TransportConfig) ProtoMessage() {}

func (x *GatewayAPNConfig_TransportConfig) ProtoReflect() protoreflect.Message {
	mi := &file_lte_protos_apn_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayAPNConfig_TransportConfig.ProtoReflect.Descriptor instead.
func (*GatewayAPNConfig_TransportConfig) Descriptor() ([]byte, []int) {
	return file_lte_protos_apn_proto_rawDescGZIP(), []int{4, 1}
}

func (x *GatewayAPNConfig_TransportConfig) GetGatewayIp() string {
	if x != nil {
		return x.GatewayIp
	}
	return ""
}

func (x *GatewayAPNConfig_TransportConfig) GetGatewayMac() string {
	if x != nil {
		return x.GatewayMac
	}
	return ""
}

func (x *GatewayAPNConfig_TransportConfig) GetEgressType() GatewayAPNConfig_EgressType {
	if x != nil {
		return x.EgressType
	}
	return GatewayAPNConfig_VLAN
}

func (x *GatewayAPNConfig_TransportConfig) GetVlanConfig() *GatewayAPNConfig_VlanConfig {
	if x != nil {
		return x.VlanConfig
	}
	return nil
}

var File_lte_protos_apn_proto protoreflect.FileDescriptor

var file_lte_protos_apn_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x61, 0x70, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x22, 0xbe, 0x01, 0x0a, 0x0a, 0x51, 0x6f, 0x53, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x33, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x18, 0x70, 0x72, 0x65, 0x65, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x70, 0x72, 0x65, 0x65, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x22, 0xe4, 0x01, 0x0a, 0x18, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x5f, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x42, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x55, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78,
	0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x64, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x44, 0x6c, 0x12, 0x4d, 0x0a, 0x07, 0x62, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x41, 0x4d, 0x42, 0x52, 0x52, 0x06, 0x62, 0x72, 0x55, 0x6e,
	0x69, 0x74, 0x22, 0x25, 0x0a, 0x10, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x73, 0x41, 0x4d, 0x42, 0x52, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x50, 0x53, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x4b, 0x42, 0x50, 0x53, 0x10, 0x01, 0x22, 0x8c, 0x06, 0x0a, 0x10, 0x41, 0x50,
	0x4e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0b, 0x71, 0x6f,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x41, 0x50, 0x4e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x6f, 0x53,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0a, 0x71, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x61, 0x6d, 0x62, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42,
	0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x52, 0x04, 0x61, 0x6d, 0x62, 0x72, 0x12, 0x35, 0x0a, 0x03,
	0x70, 0x64, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x41, 0x50, 0x4e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x44, 0x4e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03,
	0x70, 0x64, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49,
	0x70, 0x12, 0x43, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e,
	0x41, 0x50, 0x4e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x50, 0x4e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0xbe, 0x01, 0x0a, 0x0a, 0x51, 0x6f, 0x53, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x33, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x65, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x18,
	0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x75, 0x6c, 0x6e, 0x65,
	0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17,
	0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x81, 0x01, 0x0a, 0x0b, 0x41, 0x50, 0x4e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49,
	0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6d, 0x61, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d,
	0x61, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x07, 0x50,
	0x44, 0x4e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x34, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x36, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x50,
	0x56, 0x34, 0x56, 0x36, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x4f,
	0x52, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x03, 0x22, 0xa6, 0x02, 0x0a, 0x09, 0x41, 0x50, 0x4e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0b, 0x71, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x51, 0x6f, 0x53, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x0a, 0x71, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x61,
	0x6d, 0x62, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x52, 0x04,
	0x61, 0x6d, 0x62, 0x72, 0x12, 0x2e, 0x0a, 0x03, 0x70, 0x64, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x41, 0x50,
	0x4e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x44, 0x4e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x03, 0x70, 0x64, 0x6e, 0x22, 0x3b, 0x0a, 0x07, 0x50, 0x44, 0x4e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x34, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56,
	0x36, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x50, 0x56, 0x34, 0x56, 0x36, 0x10, 0x02, 0x12,
	0x10, 0x0a, 0x0c, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x4f, 0x52, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10,
	0x03, 0x22, 0x81, 0x06, 0x0a, 0x10, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x50, 0x4e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x6e, 0x49, 0x64, 0x12, 0x44, 0x0a,
	0x0a, 0x61, 0x70, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x50, 0x4e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x50, 0x4e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x61, 0x70, 0x6e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6e, 0x73,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x57, 0x0a, 0x11, 0x69, 0x70, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x50, 0x4e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x49, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0f, 0x69, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x70, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x56, 0x0a,
	0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x50, 0x4e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x25, 0x0a, 0x0a, 0x56, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x1a, 0xe3, 0x01, 0x0a,
	0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x70, 0x12,
	0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x61, 0x63,
	0x12, 0x47, 0x0a, 0x0b, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x50, 0x4e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x41, 0x50, 0x4e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x6c, 0x61, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x76, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x2f, 0x0a, 0x09, 0x41, 0x50, 0x4e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x54, 0x10, 0x02, 0x22, 0x16, 0x0a, 0x0a, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x4c, 0x41, 0x4e, 0x10, 0x00, 0x22, 0x28, 0x0a, 0x0f, 0x49,
	0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x49, 0x50, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44,
	0x48, 0x43, 0x50, 0x10, 0x01, 0x22, 0x52, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6f, 0x0a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e,
	0x41, 0x50, 0x4e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x78, 0x0a, 0x1b, 0x4c, 0x69,
	0x73, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x41, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x50, 0x4e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x32, 0xcf, 0x01, 0x0a, 0x0a, 0x41, 0x70, 0x6e, 0x44, 0x42, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x12, 0x55, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x12, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x12, 0x26, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x70, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x41, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x1b, 0x5a, 0x19, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f, 0x6c,
	0x74, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lte_protos_apn_proto_rawDescOnce sync.Once
	file_lte_protos_apn_proto_rawDescData = file_lte_protos_apn_proto_rawDesc
)

func file_lte_protos_apn_proto_rawDescGZIP() []byte {
	file_lte_protos_apn_proto_rawDescOnce.Do(func() {
		file_lte_protos_apn_proto_rawDescData = protoimpl.X.CompressGZIP(file_lte_protos_apn_proto_rawDescData)
	})
	return file_lte_protos_apn_proto_rawDescData
}

var file_lte_protos_apn_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_lte_protos_apn_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_lte_protos_apn_proto_goTypes = []interface{}{
	(AggregatedMaximumBitrate_BitrateUnitsAMBR)(0), // 0: magma.lte.AggregatedMaximumBitrate.BitrateUnitsAMBR
	(APNConfiguration_PDNType)(0),                  // 1: magma.lte.APNConfiguration.PDNType
	(APNConfig_PDNType)(0),                         // 2: magma.lte.APNConfig.PDNType
	(GatewayAPNConfig_APNFilter)(0),                // 3: magma.lte.GatewayAPNConfig.APNFilter
	(GatewayAPNConfig_EgressType)(0),               // 4: magma.lte.GatewayAPNConfig.EgressType
	(GatewayAPNConfig_IpAllocatorType)(0),          // 5: magma.lte.GatewayAPNConfig.IpAllocatorType
	(*QoSProfile)(nil),                             // 6: magma.lte.QoSProfile
	(*AggregatedMaximumBitrate)(nil),               // 7: magma.lte.AggregatedMaximumBitrate
	(*APNConfiguration)(nil),                       // 8: magma.lte.APNConfiguration
	(*APNConfig)(nil),                              // 9: magma.lte.APNConfig
	(*GatewayAPNConfig)(nil),                       // 10: magma.lte.GatewayAPNConfig
	(*ListApnConfigRequest)(nil),                   // 11: magma.lte.ListApnConfigRequest
	(*ListApnConfigResponse)(nil),                  // 12: magma.lte.ListApnConfigResponse
	(*ListGatewayApnConfigRequest)(nil),            // 13: magma.lte.ListGatewayApnConfigRequest
	(*ListGatewayApnConfigResponse)(nil),           // 14: magma.lte.ListGatewayApnConfigResponse
	(*APNConfiguration_QoSProfile)(nil),            // 15: magma.lte.APNConfiguration.QoSProfile
	(*APNConfiguration_APNResource)(nil),           // 16: magma.lte.APNConfiguration.APNResource
	(*GatewayAPNConfig_VlanConfig)(nil),            // 17: magma.lte.GatewayAPNConfig.VlanConfig
	(*GatewayAPNConfig_TransportConfig)(nil),       // 18: magma.lte.GatewayAPNConfig.TransportConfig
}
var file_lte_protos_apn_proto_depIdxs = []int32{
	0,  // 0: magma.lte.AggregatedMaximumBitrate.br_unit:type_name -> magma.lte.AggregatedMaximumBitrate.BitrateUnitsAMBR
	15, // 1: magma.lte.APNConfiguration.qos_profile:type_name -> magma.lte.APNConfiguration.QoSProfile
	7,  // 2: magma.lte.APNConfiguration.ambr:type_name -> magma.lte.AggregatedMaximumBitrate
	1,  // 3: magma.lte.APNConfiguration.pdn:type_name -> magma.lte.APNConfiguration.PDNType
	16, // 4: magma.lte.APNConfiguration.resource:type_name -> magma.lte.APNConfiguration.APNResource
	6,  // 5: magma.lte.APNConfig.qos_profile:type_name -> magma.lte.QoSProfile
	7,  // 6: magma.lte.APNConfig.ambr:type_name -> magma.lte.AggregatedMaximumBitrate
	2,  // 7: magma.lte.APNConfig.pdn:type_name -> magma.lte.APNConfig.PDNType
	3,  // 8: magma.lte.GatewayAPNConfig.apn_filter:type_name -> magma.lte.GatewayAPNConfig.APNFilter
	5,  // 9: magma.lte.GatewayAPNConfig.ip_allocator_type:type_name -> magma.lte.GatewayAPNConfig.IpAllocatorType
	18, // 10: magma.lte.GatewayAPNConfig.transport_config:type_name -> magma.lte.GatewayAPNConfig.TransportConfig
	9,  // 11: magma.lte.ListApnConfigResponse.configs:type_name -> magma.lte.APNConfig
	10, // 12: magma.lte.ListGatewayApnConfigResponse.configs:type_name -> magma.lte.GatewayAPNConfig
	4,  // 13: magma.lte.GatewayAPNConfig.TransportConfig.egress_type:type_name -> magma.lte.GatewayAPNConfig.EgressType
	17, // 14: magma.lte.GatewayAPNConfig.TransportConfig.vlan_config:type_name -> magma.lte.GatewayAPNConfig.VlanConfig
	11, // 15: magma.lte.ApnDBCloud.ListApnConfigs:input_type -> magma.lte.ListApnConfigRequest
	13, // 16: magma.lte.ApnDBCloud.ListGatewayApnConfigs:input_type -> magma.lte.ListGatewayApnConfigRequest
	12, // 17: magma.lte.ApnDBCloud.ListApnConfigs:output_type -> magma.lte.ListApnConfigResponse
	14, // 18: magma.lte.ApnDBCloud.ListGatewayApnConfigs:output_type -> magma.lte.ListGatewayApnConfigResponse
	17, // [17:19] is the sub-list for method output_type
	15, // [15:17] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_lte_protos_apn_proto_init() }
func file_lte_protos_apn_proto_init() {
	if File_lte_protos_apn_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lte_protos_apn_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_apn_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregatedMaximumBitrate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_apn_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APNConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_apn_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APNConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_apn_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayAPNConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_apn_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListApnConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_apn_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListApnConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_apn_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGatewayApnConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_apn_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGatewayApnConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_apn_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APNConfiguration_QoSProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_apn_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APNConfiguration_APNResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_apn_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayAPNConfig_VlanConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_protos_apn_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayAPNConfig_TransportConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lte_protos_apn_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lte_protos_apn_proto_goTypes,
		DependencyIndexes: file_lte_protos_apn_proto_depIdxs,
		EnumInfos:         file_lte_protos_apn_proto_enumTypes,
		MessageInfos:      file_lte_protos_apn_proto_msgTypes,
	}.Build()
	File_lte_protos_apn_proto = out.File
	file_lte_protos_apn_proto_rawDesc = nil
	file_lte_protos_apn_proto_goTypes = nil
	file_lte_protos_apn_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ApnDBCloudClient is the client API for ApnDBCloud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApnDBCloudClient interface {
	// ListApnConfigs lists network wide apn configuration.
	ListApnConfigs(ctx context.Context, in *ListApnConfigRequest, opts ...grpc.CallOption) (*ListApnConfigResponse, error)
	// ListGatewayApnConfigs lists gateway specific apn configuration
	ListGatewayApnConfigs(ctx context.Context, in *ListGatewayApnConfigRequest, opts ...grpc.CallOption) (*ListGatewayApnConfigResponse, error)
}

type apnDBCloudClient struct {
	cc grpc.ClientConnInterface
}

func NewApnDBCloudClient(cc grpc.ClientConnInterface) ApnDBCloudClient {
	return &apnDBCloudClient{cc}
}

func (c *apnDBCloudClient) ListApnConfigs(ctx context.Context, in *ListApnConfigRequest, opts ...grpc.CallOption) (*ListApnConfigResponse, error) {
	out := new(ListApnConfigResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.ApnDBCloud/ListApnConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apnDBCloudClient) ListGatewayApnConfigs(ctx context.Context, in *ListGatewayApnConfigRequest, opts ...grpc.CallOption) (*ListGatewayApnConfigResponse, error) {
	out := new(ListGatewayApnConfigResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.ApnDBCloud/ListGatewayApnConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApnDBCloudServer is the server API for ApnDBCloud service.
type ApnDBCloudServer interface {
	// ListApnConfigs lists network wide apn configuration.
	ListApnConfigs(context.Context, *ListApnConfigRequest) (*ListApnConfigResponse, error)
	// ListGatewayApnConfigs lists gateway specific apn configuration
	ListGatewayApnConfigs(context.Context, *ListGatewayApnConfigRequest) (*ListGatewayApnConfigResponse, error)
}

// UnimplementedApnDBCloudServer can be embedded to have forward compatible implementations.
type UnimplementedApnDBCloudServer struct {
}

func (*UnimplementedApnDBCloudServer) ListApnConfigs(context.Context, *ListApnConfigRequest) (*ListApnConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApnConfigs not implemented")
}
func (*UnimplementedApnDBCloudServer) ListGatewayApnConfigs(context.Context, *ListGatewayApnConfigRequest) (*ListGatewayApnConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGatewayApnConfigs not implemented")
}

func RegisterApnDBCloudServer(s *grpc.Server, srv ApnDBCloudServer) {
	s.RegisterService(&_ApnDBCloud_serviceDesc, srv)
}

func _ApnDBCloud_ListApnConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApnConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApnDBCloudServer).ListApnConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.ApnDBCloud/ListApnConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApnDBCloudServer).ListApnConfigs(ctx, req.(*ListApnConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApnDBCloud_ListGatewayApnConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGatewayApnConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApnDBCloudServer).ListGatewayApnConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.ApnDBCloud/ListGatewayApnConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApnDBCloudServer).ListGatewayApnConfigs(ctx, req.(*ListGatewayApnConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApnDBCloud_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.ApnDBCloud",
	HandlerType: (*ApnDBCloudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListApnConfigs",
			Handler:    _ApnDBCloud_ListApnConfigs_Handler,
		},
		{
			MethodName: "ListGatewayApnConfigs",
			Handler:    _ApnDBCloud_ListGatewayApnConfigs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/apn.proto",
}
