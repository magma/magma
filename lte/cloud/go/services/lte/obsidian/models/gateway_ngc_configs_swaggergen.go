// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GatewayNgcConfigs NextGeneration Core configuration for gateway
//
// swagger:model gateway_ngc_configs
type GatewayNgcConfigs struct {

	// AMF Default Slice Descriptor. This is an optional parameter that complements the Slice/Service type(s) to allow to differentiate amongst multiple Network Slices of the same Slice/Service type. This IE shall be absent if no SD value is associated with the SST. Range is 0-FFFFFF. See clause 28.4.2 of 3GPP TS 23.003.
	// Example: ffffff
	// Pattern: ^[A-Fa-f0-9]{1,6}$
	AmfDefaultSd string `json:"amf_default_sd,omitempty"`

	// AMF Default Slice Service Type. Values 0 to 127 correspond to the standardized SST range. Values 128 to 255 correspond to the Operator-specific range. See clause 28.4.2 of 3GPP TS 23.003. Standardized values are defined in clause 5.15.2.2 of 3GPP TS 23.501.
	// Example: 1
	// Maximum: 255
	// Minimum: 0
	AmfDefaultSst uint32 `json:"amf_default_sst,omitempty"`

	// FQDN (Fully Qualified Domain Name) of the AMF as defined in clause 28.3.2.5 of 3GPP TS 23.003.
	// Example: amf.example.org
	AmfName string `json:"amf_name,omitempty"`

	// String identifying the AMF Pointer (6 bits), range is 0-3F, as specified in clause 2.10.1 of 3GPP TS 23.003.
	// Example: 0
	// Pattern: ^[0-3][A-Fa-f0-9]{0,1}$
	AmfPointer string `json:"amf_pointer,omitempty"`

	// String identifying the AMF Region ID (8 bits), range is 0-FF, as specified in clause 2.10.1 of 3GPP TS 23.003.
	// Example: 1
	// Pattern: ^[A-Fa-f0-9]{1,2}$
	AmfRegionID string `json:"amf_region_id,omitempty"`

	// String identifying the AMF Set ID (10 bits), range is 0-3FF, as specified in clause 2.10.1 of 3GPP TS 23.003.
	// Example: 1
	// Pattern: ^[0-3][A-Fa-f0-9]{0,2}$
	AmfSetID string `json:"amf_set_id,omitempty"`
}

// Validate validates this gateway ngc configs
func (m *GatewayNgcConfigs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmfDefaultSd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmfDefaultSst(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmfPointer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmfRegionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmfSetID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GatewayNgcConfigs) validateAmfDefaultSd(formats strfmt.Registry) error {
	if swag.IsZero(m.AmfDefaultSd) { // not required
		return nil
	}

	if err := validate.Pattern("amf_default_sd", "body", m.AmfDefaultSd, `^[A-Fa-f0-9]{1,6}$`); err != nil {
		return err
	}

	return nil
}

func (m *GatewayNgcConfigs) validateAmfDefaultSst(formats strfmt.Registry) error {
	if swag.IsZero(m.AmfDefaultSst) { // not required
		return nil
	}

	if err := validate.MinimumUint("amf_default_sst", "body", uint64(m.AmfDefaultSst), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumUint("amf_default_sst", "body", uint64(m.AmfDefaultSst), 255, false); err != nil {
		return err
	}

	return nil
}

func (m *GatewayNgcConfigs) validateAmfPointer(formats strfmt.Registry) error {
	if swag.IsZero(m.AmfPointer) { // not required
		return nil
	}

	if err := validate.Pattern("amf_pointer", "body", m.AmfPointer, `^[0-3][A-Fa-f0-9]{0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *GatewayNgcConfigs) validateAmfRegionID(formats strfmt.Registry) error {
	if swag.IsZero(m.AmfRegionID) { // not required
		return nil
	}

	if err := validate.Pattern("amf_region_id", "body", m.AmfRegionID, `^[A-Fa-f0-9]{1,2}$`); err != nil {
		return err
	}

	return nil
}

func (m *GatewayNgcConfigs) validateAmfSetID(formats strfmt.Registry) error {
	if swag.IsZero(m.AmfSetID) { // not required
		return nil
	}

	if err := validate.Pattern("amf_set_id", "body", m.AmfSetID, `^[0-3][A-Fa-f0-9]{0,2}$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this gateway ngc configs based on context it is used
func (m *GatewayNgcConfigs) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GatewayNgcConfigs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GatewayNgcConfigs) UnmarshalBinary(b []byte) error {
	var res GatewayNgcConfigs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
