// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.10.0
// source: lte/cloud/go/services/lte/protos/enodeb_state.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EnodebStateLookupClient is the client API for EnodebStateLookup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnodebStateLookupClient interface {
	// GetEnodebState returns (gatewayID, ENB SN) -> EnodebState.
	GetEnodebState(ctx context.Context, in *GetEnodebStateRequest, opts ...grpc.CallOption) (*GetEnodebStateResponse, error)
	// SetEnodebState creates a (gatewayID, ENB SN) -> EnodebState record.
	SetEnodebState(ctx context.Context, in *SetEnodebStateRequest, opts ...grpc.CallOption) (*SetEnodebStateResponse, error)
}

type enodebStateLookupClient struct {
	cc grpc.ClientConnInterface
}

func NewEnodebStateLookupClient(cc grpc.ClientConnInterface) EnodebStateLookupClient {
	return &enodebStateLookupClient{cc}
}

func (c *enodebStateLookupClient) GetEnodebState(ctx context.Context, in *GetEnodebStateRequest, opts ...grpc.CallOption) (*GetEnodebStateResponse, error) {
	out := new(GetEnodebStateResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.lte.EnodebStateLookup/GetEnodebState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enodebStateLookupClient) SetEnodebState(ctx context.Context, in *SetEnodebStateRequest, opts ...grpc.CallOption) (*SetEnodebStateResponse, error) {
	out := new(SetEnodebStateResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.lte.EnodebStateLookup/SetEnodebState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnodebStateLookupServer is the server API for EnodebStateLookup service.
// All implementations must embed UnimplementedEnodebStateLookupServer
// for forward compatibility
type EnodebStateLookupServer interface {
	// GetEnodebState returns (gatewayID, ENB SN) -> EnodebState.
	GetEnodebState(context.Context, *GetEnodebStateRequest) (*GetEnodebStateResponse, error)
	// SetEnodebState creates a (gatewayID, ENB SN) -> EnodebState record.
	SetEnodebState(context.Context, *SetEnodebStateRequest) (*SetEnodebStateResponse, error)
	mustEmbedUnimplementedEnodebStateLookupServer()
}

// UnimplementedEnodebStateLookupServer must be embedded to have forward compatible implementations.
type UnimplementedEnodebStateLookupServer struct {
}

func (UnimplementedEnodebStateLookupServer) GetEnodebState(context.Context, *GetEnodebStateRequest) (*GetEnodebStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnodebState not implemented")
}
func (UnimplementedEnodebStateLookupServer) SetEnodebState(context.Context, *SetEnodebStateRequest) (*SetEnodebStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEnodebState not implemented")
}
func (UnimplementedEnodebStateLookupServer) mustEmbedUnimplementedEnodebStateLookupServer() {}

// UnsafeEnodebStateLookupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnodebStateLookupServer will
// result in compilation errors.
type UnsafeEnodebStateLookupServer interface {
	mustEmbedUnimplementedEnodebStateLookupServer()
}

func RegisterEnodebStateLookupServer(s grpc.ServiceRegistrar, srv EnodebStateLookupServer) {
	s.RegisterService(&EnodebStateLookup_ServiceDesc, srv)
}

func _EnodebStateLookup_GetEnodebState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnodebStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnodebStateLookupServer).GetEnodebState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.lte.EnodebStateLookup/GetEnodebState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnodebStateLookupServer).GetEnodebState(ctx, req.(*GetEnodebStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnodebStateLookup_SetEnodebState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEnodebStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnodebStateLookupServer).SetEnodebState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.lte.EnodebStateLookup/SetEnodebState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnodebStateLookupServer).SetEnodebState(ctx, req.(*SetEnodebStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnodebStateLookup_ServiceDesc is the grpc.ServiceDesc for EnodebStateLookup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnodebStateLookup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.lte.EnodebStateLookup",
	HandlerType: (*EnodebStateLookupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEnodebState",
			Handler:    _EnodebStateLookup_GetEnodebState_Handler,
		},
		{
			MethodName: "SetEnodebState",
			Handler:    _EnodebStateLookup_SetEnodebState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/cloud/go/services/lte/protos/enodeb_state.proto",
}
