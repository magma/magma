//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.10.0
// source: lte/cloud/go/services/lte/protos/enodeb_state.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetEnodebStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// network_id of the enodeb
	NetworkId string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// gateway_id of the reported state
	GatewayId string `protobuf:"bytes,2,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	// enodeb serial number
	EnodebSn string `protobuf:"bytes,3,opt,name=enodeb_sn,json=enodebSn,proto3" json:"enodeb_sn,omitempty"`
}

func (x *GetEnodebStateRequest) Reset() {
	*x = GetEnodebStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_cloud_go_services_lte_protos_enodeb_state_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEnodebStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnodebStateRequest) ProtoMessage() {}

func (x *GetEnodebStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_cloud_go_services_lte_protos_enodeb_state_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnodebStateRequest.ProtoReflect.Descriptor instead.
func (*GetEnodebStateRequest) Descriptor() ([]byte, []int) {
	return file_lte_cloud_go_services_lte_protos_enodeb_state_proto_rawDescGZIP(), []int{0}
}

func (x *GetEnodebStateRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *GetEnodebStateRequest) GetGatewayId() string {
	if x != nil {
		return x.GatewayId
	}
	return ""
}

func (x *GetEnodebStateRequest) GetEnodebSn() string {
	if x != nil {
		return x.EnodebSn
	}
	return ""
}

type GetEnodebStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// serialized enode state
	SerializedState []byte `protobuf:"bytes,1,opt,name=serialized_state,json=serializedState,proto3" json:"serialized_state,omitempty"`
}

func (x *GetEnodebStateResponse) Reset() {
	*x = GetEnodebStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_cloud_go_services_lte_protos_enodeb_state_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEnodebStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnodebStateResponse) ProtoMessage() {}

func (x *GetEnodebStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lte_cloud_go_services_lte_protos_enodeb_state_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnodebStateResponse.ProtoReflect.Descriptor instead.
func (*GetEnodebStateResponse) Descriptor() ([]byte, []int) {
	return file_lte_cloud_go_services_lte_protos_enodeb_state_proto_rawDescGZIP(), []int{1}
}

func (x *GetEnodebStateResponse) GetSerializedState() []byte {
	if x != nil {
		return x.SerializedState
	}
	return nil
}

type SetEnodebStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// network_id of the enodeb
	NetworkId string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// gateway_id of the reported state
	GatewayId string `protobuf:"bytes,2,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	// enodeb serial number
	EnodebSn string `protobuf:"bytes,3,opt,name=enodeb_sn,json=enodebSn,proto3" json:"enodeb_sn,omitempty"`
	// serialized enodeb state
	SerializedState []byte `protobuf:"bytes,4,opt,name=serialized_state,json=serializedState,proto3" json:"serialized_state,omitempty"`
}

func (x *SetEnodebStateRequest) Reset() {
	*x = SetEnodebStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_cloud_go_services_lte_protos_enodeb_state_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetEnodebStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEnodebStateRequest) ProtoMessage() {}

func (x *SetEnodebStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_cloud_go_services_lte_protos_enodeb_state_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEnodebStateRequest.ProtoReflect.Descriptor instead.
func (*SetEnodebStateRequest) Descriptor() ([]byte, []int) {
	return file_lte_cloud_go_services_lte_protos_enodeb_state_proto_rawDescGZIP(), []int{2}
}

func (x *SetEnodebStateRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *SetEnodebStateRequest) GetGatewayId() string {
	if x != nil {
		return x.GatewayId
	}
	return ""
}

func (x *SetEnodebStateRequest) GetEnodebSn() string {
	if x != nil {
		return x.EnodebSn
	}
	return ""
}

func (x *SetEnodebStateRequest) GetSerializedState() []byte {
	if x != nil {
		return x.SerializedState
	}
	return nil
}

type SetEnodebStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetEnodebStateResponse) Reset() {
	*x = SetEnodebStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_cloud_go_services_lte_protos_enodeb_state_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetEnodebStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEnodebStateResponse) ProtoMessage() {}

func (x *SetEnodebStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lte_cloud_go_services_lte_protos_enodeb_state_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEnodebStateResponse.ProtoReflect.Descriptor instead.
func (*SetEnodebStateResponse) Descriptor() ([]byte, []int) {
	return file_lte_cloud_go_services_lte_protos_enodeb_state_proto_rawDescGZIP(), []int{3}
}

var File_lte_cloud_go_services_lte_protos_enodeb_state_proto protoreflect.FileDescriptor

var file_lte_cloud_go_services_lte_protos_enodeb_state_proto_rawDesc = []byte{
	0x0a, 0x33, 0x6c, 0x74, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x6c, 0x74, 0x65, 0x22, 0x72, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x6f, 0x64, 0x65,
	0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x6e, 0x6f, 0x64, 0x65, 0x62, 0x5f, 0x73, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x53, 0x6e, 0x22, 0x43, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x45,
	0x6e, 0x6f, 0x64, 0x65, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x9d, 0x01,
	0x0a, 0x15, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x5f,
	0x73, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x62,
	0x53, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x18, 0x0a,
	0x16, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xd5, 0x01, 0x0a, 0x11, 0x45, 0x6e, 0x6f, 0x64,
	0x65, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x5f, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x24, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6c, 0x74, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f,
	0x0a, 0x0e, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x24, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x28, 0x5a, 0x26, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f, 0x6c, 0x74, 0x65, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x6c,
	0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_lte_cloud_go_services_lte_protos_enodeb_state_proto_rawDescOnce sync.Once
	file_lte_cloud_go_services_lte_protos_enodeb_state_proto_rawDescData = file_lte_cloud_go_services_lte_protos_enodeb_state_proto_rawDesc
)

func file_lte_cloud_go_services_lte_protos_enodeb_state_proto_rawDescGZIP() []byte {
	file_lte_cloud_go_services_lte_protos_enodeb_state_proto_rawDescOnce.Do(func() {
		file_lte_cloud_go_services_lte_protos_enodeb_state_proto_rawDescData = protoimpl.X.CompressGZIP(file_lte_cloud_go_services_lte_protos_enodeb_state_proto_rawDescData)
	})
	return file_lte_cloud_go_services_lte_protos_enodeb_state_proto_rawDescData
}

var file_lte_cloud_go_services_lte_protos_enodeb_state_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_lte_cloud_go_services_lte_protos_enodeb_state_proto_goTypes = []interface{}{
	(*GetEnodebStateRequest)(nil),  // 0: magma.lte.lte.GetEnodebStateRequest
	(*GetEnodebStateResponse)(nil), // 1: magma.lte.lte.GetEnodebStateResponse
	(*SetEnodebStateRequest)(nil),  // 2: magma.lte.lte.SetEnodebStateRequest
	(*SetEnodebStateResponse)(nil), // 3: magma.lte.lte.SetEnodebStateResponse
}
var file_lte_cloud_go_services_lte_protos_enodeb_state_proto_depIdxs = []int32{
	0, // 0: magma.lte.lte.EnodebStateLookup.GetEnodebState:input_type -> magma.lte.lte.GetEnodebStateRequest
	2, // 1: magma.lte.lte.EnodebStateLookup.SetEnodebState:input_type -> magma.lte.lte.SetEnodebStateRequest
	1, // 2: magma.lte.lte.EnodebStateLookup.GetEnodebState:output_type -> magma.lte.lte.GetEnodebStateResponse
	3, // 3: magma.lte.lte.EnodebStateLookup.SetEnodebState:output_type -> magma.lte.lte.SetEnodebStateResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_lte_cloud_go_services_lte_protos_enodeb_state_proto_init() }
func file_lte_cloud_go_services_lte_protos_enodeb_state_proto_init() {
	if File_lte_cloud_go_services_lte_protos_enodeb_state_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lte_cloud_go_services_lte_protos_enodeb_state_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEnodebStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_cloud_go_services_lte_protos_enodeb_state_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEnodebStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_cloud_go_services_lte_protos_enodeb_state_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetEnodebStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_cloud_go_services_lte_protos_enodeb_state_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetEnodebStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lte_cloud_go_services_lte_protos_enodeb_state_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lte_cloud_go_services_lte_protos_enodeb_state_proto_goTypes,
		DependencyIndexes: file_lte_cloud_go_services_lte_protos_enodeb_state_proto_depIdxs,
		MessageInfos:      file_lte_cloud_go_services_lte_protos_enodeb_state_proto_msgTypes,
	}.Build()
	File_lte_cloud_go_services_lte_protos_enodeb_state_proto = out.File
	file_lte_cloud_go_services_lte_protos_enodeb_state_proto_rawDesc = nil
	file_lte_cloud_go_services_lte_protos_enodeb_state_proto_goTypes = nil
	file_lte_cloud_go_services_lte_protos_enodeb_state_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EnodebStateLookupClient is the client API for EnodebStateLookup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EnodebStateLookupClient interface {
	// GetEnodebState returns (gatewayID, ENB SN) -> EnodebState.
	GetEnodebState(ctx context.Context, in *GetEnodebStateRequest, opts ...grpc.CallOption) (*GetEnodebStateResponse, error)
	// SetEnodebState creates a (gatewayID, ENB SN) -> EnodebState record.
	SetEnodebState(ctx context.Context, in *SetEnodebStateRequest, opts ...grpc.CallOption) (*SetEnodebStateResponse, error)
}

type enodebStateLookupClient struct {
	cc grpc.ClientConnInterface
}

func NewEnodebStateLookupClient(cc grpc.ClientConnInterface) EnodebStateLookupClient {
	return &enodebStateLookupClient{cc}
}

func (c *enodebStateLookupClient) GetEnodebState(ctx context.Context, in *GetEnodebStateRequest, opts ...grpc.CallOption) (*GetEnodebStateResponse, error) {
	out := new(GetEnodebStateResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.lte.EnodebStateLookup/GetEnodebState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enodebStateLookupClient) SetEnodebState(ctx context.Context, in *SetEnodebStateRequest, opts ...grpc.CallOption) (*SetEnodebStateResponse, error) {
	out := new(SetEnodebStateResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.lte.EnodebStateLookup/SetEnodebState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnodebStateLookupServer is the server API for EnodebStateLookup service.
type EnodebStateLookupServer interface {
	// GetEnodebState returns (gatewayID, ENB SN) -> EnodebState.
	GetEnodebState(context.Context, *GetEnodebStateRequest) (*GetEnodebStateResponse, error)
	// SetEnodebState creates a (gatewayID, ENB SN) -> EnodebState record.
	SetEnodebState(context.Context, *SetEnodebStateRequest) (*SetEnodebStateResponse, error)
}

// UnimplementedEnodebStateLookupServer can be embedded to have forward compatible implementations.
type UnimplementedEnodebStateLookupServer struct {
}

func (*UnimplementedEnodebStateLookupServer) GetEnodebState(context.Context, *GetEnodebStateRequest) (*GetEnodebStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnodebState not implemented")
}
func (*UnimplementedEnodebStateLookupServer) SetEnodebState(context.Context, *SetEnodebStateRequest) (*SetEnodebStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEnodebState not implemented")
}

func RegisterEnodebStateLookupServer(s *grpc.Server, srv EnodebStateLookupServer) {
	s.RegisterService(&_EnodebStateLookup_serviceDesc, srv)
}

func _EnodebStateLookup_GetEnodebState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnodebStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnodebStateLookupServer).GetEnodebState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.lte.EnodebStateLookup/GetEnodebState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnodebStateLookupServer).GetEnodebState(ctx, req.(*GetEnodebStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnodebStateLookup_SetEnodebState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEnodebStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnodebStateLookupServer).SetEnodebState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.lte.EnodebStateLookup/SetEnodebState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnodebStateLookupServer).SetEnodebState(ctx, req.(*SetEnodebStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EnodebStateLookup_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.lte.EnodebStateLookup",
	HandlerType: (*EnodebStateLookupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEnodebState",
			Handler:    _EnodebStateLookup_GetEnodebState_Handler,
		},
		{
			MethodName: "SetEnodebState",
			Handler:    _EnodebStateLookup_SetEnodebState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/cloud/go/services/lte/protos/enodeb_state.proto",
}
