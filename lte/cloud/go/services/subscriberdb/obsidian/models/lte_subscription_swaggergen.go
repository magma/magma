// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LteSubscription lte subscription
//
// swagger:model lte_subscription
type LteSubscription struct {

	// auth algo
	// Required: true
	// Enum: [MILENAGE]
	AuthAlgo string `json:"auth_algo"`

	// auth key
	// Example: AAAAAAAAAAAAAAAAAAAAAA==
	// Required: true
	// Format: byte
	AuthKey strfmt.Base64 `json:"auth_key"`

	// auth opc
	// Example: AAECAwQFBgcICQoLDA0ODw==
	// Format: byte
	AuthOpc strfmt.Base64 `json:"auth_opc,omitempty"`

	// state
	// Required: true
	// Enum: [INACTIVE ACTIVE]
	State string `json:"state"`

	// sub profile
	// Required: true
	SubProfile *SubProfile `json:"sub_profile"`
}

// Validate validates this lte subscription
func (m *LteSubscription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthAlgo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubProfile(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var lteSubscriptionTypeAuthAlgoPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MILENAGE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lteSubscriptionTypeAuthAlgoPropEnum = append(lteSubscriptionTypeAuthAlgoPropEnum, v)
	}
}

const (

	// LteSubscriptionAuthAlgoMILENAGE captures enum value "MILENAGE"
	LteSubscriptionAuthAlgoMILENAGE string = "MILENAGE"
)

// prop value enum
func (m *LteSubscription) validateAuthAlgoEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, lteSubscriptionTypeAuthAlgoPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LteSubscription) validateAuthAlgo(formats strfmt.Registry) error {

	if err := validate.RequiredString("auth_algo", "body", m.AuthAlgo); err != nil {
		return err
	}

	// value enum
	if err := m.validateAuthAlgoEnum("auth_algo", "body", m.AuthAlgo); err != nil {
		return err
	}

	return nil
}

func (m *LteSubscription) validateAuthKey(formats strfmt.Registry) error {

	if err := validate.Required("auth_key", "body", strfmt.Base64(m.AuthKey)); err != nil {
		return err
	}

	return nil
}

var lteSubscriptionTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INACTIVE","ACTIVE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lteSubscriptionTypeStatePropEnum = append(lteSubscriptionTypeStatePropEnum, v)
	}
}

const (

	// LteSubscriptionStateINACTIVE captures enum value "INACTIVE"
	LteSubscriptionStateINACTIVE string = "INACTIVE"

	// LteSubscriptionStateACTIVE captures enum value "ACTIVE"
	LteSubscriptionStateACTIVE string = "ACTIVE"
)

// prop value enum
func (m *LteSubscription) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, lteSubscriptionTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LteSubscription) validateState(formats strfmt.Registry) error {

	if err := validate.RequiredString("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *LteSubscription) validateSubProfile(formats strfmt.Registry) error {

	if err := validate.Required("sub_profile", "body", m.SubProfile); err != nil {
		return err
	}

	if err := validate.Required("sub_profile", "body", m.SubProfile); err != nil {
		return err
	}

	if m.SubProfile != nil {
		if err := m.SubProfile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sub_profile")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this lte subscription based on the context it is used
func (m *LteSubscription) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSubProfile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LteSubscription) contextValidateSubProfile(ctx context.Context, formats strfmt.Registry) error {

	if m.SubProfile != nil {
		if err := m.SubProfile.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sub_profile")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LteSubscription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LteSubscription) UnmarshalBinary(b []byte) error {
	var res LteSubscription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
