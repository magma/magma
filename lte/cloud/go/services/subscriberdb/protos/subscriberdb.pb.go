//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.10.0
// source: lte/cloud/go/services/subscriberdb/protos/subscriberdb.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	protos "magma/lte/cloud/go/protos"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetMSISDNsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// network_id of the subscriber
	NetworkId string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// msisdns whose IMSIs should be retrieved
	// An empty list returns all tracked MSISDNs
	Msisdns []string `protobuf:"bytes,2,rep,name=msisdns,proto3" json:"msisdns,omitempty"`
}

func (x *GetMSISDNsRequest) Reset() {
	*x = GetMSISDNsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMSISDNsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMSISDNsRequest) ProtoMessage() {}

func (x *GetMSISDNsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMSISDNsRequest.ProtoReflect.Descriptor instead.
func (*GetMSISDNsRequest) Descriptor() ([]byte, []int) {
	return file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_rawDescGZIP(), []int{0}
}

func (x *GetMSISDNsRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *GetMSISDNsRequest) GetMsisdns() []string {
	if x != nil {
		return x.Msisdns
	}
	return nil
}

type GetMSISDNsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// imsis_by_msisdn lists the requested imsis, keyed by their msisdn
	ImsisByMsisdn map[string]string `protobuf:"bytes,1,rep,name=imsis_by_msisdn,json=imsisByMsisdn,proto3" json:"imsis_by_msisdn,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetMSISDNsResponse) Reset() {
	*x = GetMSISDNsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMSISDNsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMSISDNsResponse) ProtoMessage() {}

func (x *GetMSISDNsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMSISDNsResponse.ProtoReflect.Descriptor instead.
func (*GetMSISDNsResponse) Descriptor() ([]byte, []int) {
	return file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_rawDescGZIP(), []int{1}
}

func (x *GetMSISDNsResponse) GetImsisByMsisdn() map[string]string {
	if x != nil {
		return x.ImsisByMsisdn
	}
	return nil
}

type SetMSISDNRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// network_id of the subscriber
	NetworkId string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// msisdn to set
	Msisdn string `protobuf:"bytes,2,opt,name=msisdn,proto3" json:"msisdn,omitempty"`
	// imsi whose MSISDN should be set
	Imsi string `protobuf:"bytes,3,opt,name=imsi,proto3" json:"imsi,omitempty"`
}

func (x *SetMSISDNRequest) Reset() {
	*x = SetMSISDNRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMSISDNRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMSISDNRequest) ProtoMessage() {}

func (x *SetMSISDNRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMSISDNRequest.ProtoReflect.Descriptor instead.
func (*SetMSISDNRequest) Descriptor() ([]byte, []int) {
	return file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_rawDescGZIP(), []int{2}
}

func (x *SetMSISDNRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *SetMSISDNRequest) GetMsisdn() string {
	if x != nil {
		return x.Msisdn
	}
	return ""
}

func (x *SetMSISDNRequest) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

type SetMSISDNResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetMSISDNResponse) Reset() {
	*x = SetMSISDNResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMSISDNResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMSISDNResponse) ProtoMessage() {}

func (x *SetMSISDNResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMSISDNResponse.ProtoReflect.Descriptor instead.
func (*SetMSISDNResponse) Descriptor() ([]byte, []int) {
	return file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_rawDescGZIP(), []int{3}
}

type DeleteMSISDNRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// network_id of the subscriber
	NetworkId string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// msisdn to delete
	Msisdn string `protobuf:"bytes,2,opt,name=msisdn,proto3" json:"msisdn,omitempty"`
}

func (x *DeleteMSISDNRequest) Reset() {
	*x = DeleteMSISDNRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMSISDNRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMSISDNRequest) ProtoMessage() {}

func (x *DeleteMSISDNRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMSISDNRequest.ProtoReflect.Descriptor instead.
func (*DeleteMSISDNRequest) Descriptor() ([]byte, []int) {
	return file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteMSISDNRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *DeleteMSISDNRequest) GetMsisdn() string {
	if x != nil {
		return x.Msisdn
	}
	return ""
}

type DeleteMSISDNResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteMSISDNResponse) Reset() {
	*x = DeleteMSISDNResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMSISDNResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMSISDNResponse) ProtoMessage() {}

func (x *DeleteMSISDNResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMSISDNResponse.ProtoReflect.Descriptor instead.
func (*DeleteMSISDNResponse) Descriptor() ([]byte, []int) {
	return file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_rawDescGZIP(), []int{5}
}

type GetIPsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// network_id of the subscriber
	NetworkId string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// ips whose IMSIs should be retrieved
	// An empty list returns all tracked IPs
	Ips []string `protobuf:"bytes,2,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *GetIPsRequest) Reset() {
	*x = GetIPsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIPsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIPsRequest) ProtoMessage() {}

func (x *GetIPsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIPsRequest.ProtoReflect.Descriptor instead.
func (*GetIPsRequest) Descriptor() ([]byte, []int) {
	return file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_rawDescGZIP(), []int{6}
}

func (x *GetIPsRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *GetIPsRequest) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type GetIPsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ip_mappings found
	IpMappings []*IPMapping `protobuf:"bytes,1,rep,name=ip_mappings,json=ipMappings,proto3" json:"ip_mappings,omitempty"`
}

func (x *GetIPsResponse) Reset() {
	*x = GetIPsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIPsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIPsResponse) ProtoMessage() {}

func (x *GetIPsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIPsResponse.ProtoReflect.Descriptor instead.
func (*GetIPsResponse) Descriptor() ([]byte, []int) {
	return file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_rawDescGZIP(), []int{7}
}

func (x *GetIPsResponse) GetIpMappings() []*IPMapping {
	if x != nil {
		return x.IpMappings
	}
	return nil
}

type SetIPsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// network_id of the subscriber
	NetworkId string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// ip_mappings to set
	IpMappings []*IPMapping `protobuf:"bytes,2,rep,name=ip_mappings,json=ipMappings,proto3" json:"ip_mappings,omitempty"`
}

func (x *SetIPsRequest) Reset() {
	*x = SetIPsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetIPsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetIPsRequest) ProtoMessage() {}

func (x *SetIPsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetIPsRequest.ProtoReflect.Descriptor instead.
func (*SetIPsRequest) Descriptor() ([]byte, []int) {
	return file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_rawDescGZIP(), []int{8}
}

func (x *SetIPsRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *SetIPsRequest) GetIpMappings() []*IPMapping {
	if x != nil {
		return x.IpMappings
	}
	return nil
}

type SetIPsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetIPsResponse) Reset() {
	*x = SetIPsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetIPsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetIPsResponse) ProtoMessage() {}

func (x *SetIPsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetIPsResponse.ProtoReflect.Descriptor instead.
func (*SetIPsResponse) Descriptor() ([]byte, []int) {
	return file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_rawDescGZIP(), []int{9}
}

type IPMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ip to set
	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	// imsi whose IP should be set
	Imsi string `protobuf:"bytes,2,opt,name=imsi,proto3" json:"imsi,omitempty"`
	// apn under which this IMSI is assigned the IP
	Apn string `protobuf:"bytes,3,opt,name=apn,proto3" json:"apn,omitempty"`
}

func (x *IPMapping) Reset() {
	*x = IPMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPMapping) ProtoMessage() {}

func (x *IPMapping) ProtoReflect() protoreflect.Message {
	mi := &file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPMapping.ProtoReflect.Descriptor instead.
func (*IPMapping) Descriptor() ([]byte, []int) {
	return file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_rawDescGZIP(), []int{10}
}

func (x *IPMapping) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *IPMapping) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *IPMapping) GetApn() string {
	if x != nil {
		return x.Apn
	}
	return ""
}

// ApnResourceInternal is the cloud-internal version of the ApnResource proto.
// HACK: This proto message is used exclusively during the generation of
// deterministic digests of apn resources, in order to capture its APN and
// gateway associations.
type ApnResourceInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// assoc_apns is a list of apn names associated to the resource (child association).
	AssocApns []string `protobuf:"bytes,1,rep,name=assoc_apns,json=assocApns,proto3" json:"assoc_apns,omitempty"`
	// assoc_gateways is a list of gateway ids associated to the resource (parent association).
	AssocGateways []string `protobuf:"bytes,2,rep,name=assoc_gateways,json=assocGateways,proto3" json:"assoc_gateways,omitempty"`
	// apn_resource is the original apn resource proto message.
	ApnResource *protos.APNConfiguration_APNResource `protobuf:"bytes,3,opt,name=apn_resource,json=apnResource,proto3" json:"apn_resource,omitempty"`
}

func (x *ApnResourceInternal) Reset() {
	*x = ApnResourceInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApnResourceInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApnResourceInternal) ProtoMessage() {}

func (x *ApnResourceInternal) ProtoReflect() protoreflect.Message {
	mi := &file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApnResourceInternal.ProtoReflect.Descriptor instead.
func (*ApnResourceInternal) Descriptor() ([]byte, []int) {
	return file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_rawDescGZIP(), []int{11}
}

func (x *ApnResourceInternal) GetAssocApns() []string {
	if x != nil {
		return x.AssocApns
	}
	return nil
}

func (x *ApnResourceInternal) GetAssocGateways() []string {
	if x != nil {
		return x.AssocGateways
	}
	return nil
}

func (x *ApnResourceInternal) GetApnResource() *protos.APNConfiguration_APNResource {
	if x != nil {
		return x.ApnResource
	}
	return nil
}

var File_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto protoreflect.FileDescriptor

var file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_rawDesc = []byte{
	0x0a, 0x3c, 0x6c, 0x74, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x64, 0x62, 0x1a, 0x14, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x61, 0x70, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x6c, 0x74,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4c, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x4d, 0x53, 0x49, 0x53, 0x44, 0x4e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x4d, 0x53, 0x49, 0x53, 0x44, 0x4e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x65, 0x0a, 0x0f, 0x69, 0x6d, 0x73, 0x69, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x6d, 0x73, 0x69,
	0x73, 0x64, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x53, 0x49, 0x53, 0x44, 0x4e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6d, 0x73, 0x69, 0x73, 0x42, 0x79, 0x4d, 0x73, 0x69,
	0x73, 0x64, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x69, 0x6d, 0x73, 0x69, 0x73, 0x42,
	0x79, 0x4d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x1a, 0x40, 0x0a, 0x12, 0x49, 0x6d, 0x73, 0x69, 0x73,
	0x42, 0x79, 0x4d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5d, 0x0a, 0x10, 0x53, 0x65, 0x74,
	0x4d, 0x53, 0x49, 0x53, 0x44, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x73,
	0x69, 0x73, 0x64, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x4d,
	0x53, 0x49, 0x53, 0x44, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x53, 0x49, 0x53, 0x44, 0x4e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x22, 0x16, 0x0a, 0x14, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x53, 0x49, 0x53, 0x44, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x40, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x49, 0x50, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x70, 0x73, 0x22, 0x54, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x49, 0x50, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x69, 0x70, 0x5f, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x64, 0x62, 0x2e, 0x49, 0x50, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52,
	0x0a, 0x69, 0x70, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x72, 0x0a, 0x0d, 0x53,
	0x65, 0x74, 0x49, 0x50, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0b, 0x69,
	0x70, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x64, 0x62, 0x2e, 0x49, 0x50, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x52, 0x0a, 0x69, 0x70, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x22,
	0x10, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x49, 0x50, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x41, 0x0a, 0x09, 0x49, 0x50, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d,
	0x73, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x61, 0x70, 0x6e, 0x22, 0xa7, 0x01, 0x0a, 0x13, 0x41, 0x70, 0x6e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x73, 0x73, 0x6f, 0x63, 0x5f, 0x61, 0x70, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x41, 0x70, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61,
	0x73, 0x73, 0x6f, 0x63, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x61, 0x70, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x41, 0x50, 0x4e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x50, 0x4e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x0b, 0x61, 0x70, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x32, 0x80,
	0x04, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x12, 0x65, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d, 0x53, 0x49, 0x53, 0x44, 0x4e,
	0x73, 0x12, 0x29, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x53,
	0x49, 0x53, 0x44, 0x4e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x53, 0x49, 0x53, 0x44, 0x4e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x09, 0x53, 0x65,
	0x74, 0x4d, 0x53, 0x49, 0x53, 0x44, 0x4e, 0x12, 0x28, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x64, 0x62,
	0x2e, 0x53, 0x65, 0x74, 0x4d, 0x53, 0x49, 0x53, 0x44, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x64, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x53,
	0x49, 0x53, 0x44, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b,
	0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x53, 0x49, 0x53, 0x44, 0x4e, 0x12, 0x2b,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x64, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x53,
	0x49, 0x53, 0x44, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x64, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x53, 0x49, 0x53, 0x44,
	0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x06, 0x47,
	0x65, 0x74, 0x49, 0x50, 0x73, 0x12, 0x25, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x64, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x50, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x50, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x06, 0x53, 0x65, 0x74, 0x49, 0x50, 0x73,
	0x12, 0x25, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x64, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x50, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x64, 0x62,
	0x2e, 0x53, 0x65, 0x74, 0x49, 0x50, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x31, 0x5a, 0x2f, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f, 0x6c, 0x74, 0x65, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x64, 0x62, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_rawDescOnce sync.Once
	file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_rawDescData = file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_rawDesc
)

func file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_rawDescGZIP() []byte {
	file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_rawDescOnce.Do(func() {
		file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_rawDescData = protoimpl.X.CompressGZIP(file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_rawDescData)
	})
	return file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_rawDescData
}

var file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_goTypes = []interface{}{
	(*GetMSISDNsRequest)(nil),                   // 0: magma.lte.subscriberdb.GetMSISDNsRequest
	(*GetMSISDNsResponse)(nil),                  // 1: magma.lte.subscriberdb.GetMSISDNsResponse
	(*SetMSISDNRequest)(nil),                    // 2: magma.lte.subscriberdb.SetMSISDNRequest
	(*SetMSISDNResponse)(nil),                   // 3: magma.lte.subscriberdb.SetMSISDNResponse
	(*DeleteMSISDNRequest)(nil),                 // 4: magma.lte.subscriberdb.DeleteMSISDNRequest
	(*DeleteMSISDNResponse)(nil),                // 5: magma.lte.subscriberdb.DeleteMSISDNResponse
	(*GetIPsRequest)(nil),                       // 6: magma.lte.subscriberdb.GetIPsRequest
	(*GetIPsResponse)(nil),                      // 7: magma.lte.subscriberdb.GetIPsResponse
	(*SetIPsRequest)(nil),                       // 8: magma.lte.subscriberdb.SetIPsRequest
	(*SetIPsResponse)(nil),                      // 9: magma.lte.subscriberdb.SetIPsResponse
	(*IPMapping)(nil),                           // 10: magma.lte.subscriberdb.IPMapping
	(*ApnResourceInternal)(nil),                 // 11: magma.lte.subscriberdb.ApnResourceInternal
	nil,                                         // 12: magma.lte.subscriberdb.GetMSISDNsResponse.ImsisByMsisdnEntry
	(*protos.APNConfiguration_APNResource)(nil), // 13: magma.lte.APNConfiguration.APNResource
}
var file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_depIdxs = []int32{
	12, // 0: magma.lte.subscriberdb.GetMSISDNsResponse.imsis_by_msisdn:type_name -> magma.lte.subscriberdb.GetMSISDNsResponse.ImsisByMsisdnEntry
	10, // 1: magma.lte.subscriberdb.GetIPsResponse.ip_mappings:type_name -> magma.lte.subscriberdb.IPMapping
	10, // 2: magma.lte.subscriberdb.SetIPsRequest.ip_mappings:type_name -> magma.lte.subscriberdb.IPMapping
	13, // 3: magma.lte.subscriberdb.ApnResourceInternal.apn_resource:type_name -> magma.lte.APNConfiguration.APNResource
	0,  // 4: magma.lte.subscriberdb.SubscriberLookup.GetMSISDNs:input_type -> magma.lte.subscriberdb.GetMSISDNsRequest
	2,  // 5: magma.lte.subscriberdb.SubscriberLookup.SetMSISDN:input_type -> magma.lte.subscriberdb.SetMSISDNRequest
	4,  // 6: magma.lte.subscriberdb.SubscriberLookup.DeleteMSISDN:input_type -> magma.lte.subscriberdb.DeleteMSISDNRequest
	6,  // 7: magma.lte.subscriberdb.SubscriberLookup.GetIPs:input_type -> magma.lte.subscriberdb.GetIPsRequest
	8,  // 8: magma.lte.subscriberdb.SubscriberLookup.SetIPs:input_type -> magma.lte.subscriberdb.SetIPsRequest
	1,  // 9: magma.lte.subscriberdb.SubscriberLookup.GetMSISDNs:output_type -> magma.lte.subscriberdb.GetMSISDNsResponse
	3,  // 10: magma.lte.subscriberdb.SubscriberLookup.SetMSISDN:output_type -> magma.lte.subscriberdb.SetMSISDNResponse
	5,  // 11: magma.lte.subscriberdb.SubscriberLookup.DeleteMSISDN:output_type -> magma.lte.subscriberdb.DeleteMSISDNResponse
	7,  // 12: magma.lte.subscriberdb.SubscriberLookup.GetIPs:output_type -> magma.lte.subscriberdb.GetIPsResponse
	9,  // 13: magma.lte.subscriberdb.SubscriberLookup.SetIPs:output_type -> magma.lte.subscriberdb.SetIPsResponse
	9,  // [9:14] is the sub-list for method output_type
	4,  // [4:9] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_init() }
func file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_init() {
	if File_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMSISDNsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMSISDNsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMSISDNRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMSISDNResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMSISDNRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMSISDNResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIPsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIPsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetIPsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetIPsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApnResourceInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_goTypes,
		DependencyIndexes: file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_depIdxs,
		MessageInfos:      file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_msgTypes,
	}.Build()
	File_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto = out.File
	file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_rawDesc = nil
	file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_goTypes = nil
	file_lte_cloud_go_services_subscriberdb_protos_subscriberdb_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SubscriberLookupClient is the client API for SubscriberLookup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SubscriberLookupClient interface {
	// GetMSISDNs returns MSISDN -> IMSI mappings.
	GetMSISDNs(ctx context.Context, in *GetMSISDNsRequest, opts ...grpc.CallOption) (*GetMSISDNsResponse, error)
	// SetMSISDN creates a MSISDN -> IMSI mapping.
	// Error if MSISDN has already been assigned.
	SetMSISDN(ctx context.Context, in *SetMSISDNRequest, opts ...grpc.CallOption) (*SetMSISDNResponse, error)
	// DeleteMSISDN removes the MSISDN -> IMSI mapping.
	DeleteMSISDN(ctx context.Context, in *DeleteMSISDNRequest, opts ...grpc.CallOption) (*DeleteMSISDNResponse, error)
	// GetIPs returns IP -> IMSI mappings.
	GetIPs(ctx context.Context, in *GetIPsRequest, opts ...grpc.CallOption) (*GetIPsResponse, error)
	// SetIPs creates an IP -> IMSI mapping.
	// Error if IP has already been assigned.
	SetIPs(ctx context.Context, in *SetIPsRequest, opts ...grpc.CallOption) (*SetIPsResponse, error)
}

type subscriberLookupClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriberLookupClient(cc grpc.ClientConnInterface) SubscriberLookupClient {
	return &subscriberLookupClient{cc}
}

func (c *subscriberLookupClient) GetMSISDNs(ctx context.Context, in *GetMSISDNsRequest, opts ...grpc.CallOption) (*GetMSISDNsResponse, error) {
	out := new(GetMSISDNsResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.subscriberdb.SubscriberLookup/GetMSISDNs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberLookupClient) SetMSISDN(ctx context.Context, in *SetMSISDNRequest, opts ...grpc.CallOption) (*SetMSISDNResponse, error) {
	out := new(SetMSISDNResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.subscriberdb.SubscriberLookup/SetMSISDN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberLookupClient) DeleteMSISDN(ctx context.Context, in *DeleteMSISDNRequest, opts ...grpc.CallOption) (*DeleteMSISDNResponse, error) {
	out := new(DeleteMSISDNResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.subscriberdb.SubscriberLookup/DeleteMSISDN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberLookupClient) GetIPs(ctx context.Context, in *GetIPsRequest, opts ...grpc.CallOption) (*GetIPsResponse, error) {
	out := new(GetIPsResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.subscriberdb.SubscriberLookup/GetIPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberLookupClient) SetIPs(ctx context.Context, in *SetIPsRequest, opts ...grpc.CallOption) (*SetIPsResponse, error) {
	out := new(SetIPsResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.subscriberdb.SubscriberLookup/SetIPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriberLookupServer is the server API for SubscriberLookup service.
type SubscriberLookupServer interface {
	// GetMSISDNs returns MSISDN -> IMSI mappings.
	GetMSISDNs(context.Context, *GetMSISDNsRequest) (*GetMSISDNsResponse, error)
	// SetMSISDN creates a MSISDN -> IMSI mapping.
	// Error if MSISDN has already been assigned.
	SetMSISDN(context.Context, *SetMSISDNRequest) (*SetMSISDNResponse, error)
	// DeleteMSISDN removes the MSISDN -> IMSI mapping.
	DeleteMSISDN(context.Context, *DeleteMSISDNRequest) (*DeleteMSISDNResponse, error)
	// GetIPs returns IP -> IMSI mappings.
	GetIPs(context.Context, *GetIPsRequest) (*GetIPsResponse, error)
	// SetIPs creates an IP -> IMSI mapping.
	// Error if IP has already been assigned.
	SetIPs(context.Context, *SetIPsRequest) (*SetIPsResponse, error)
}

// UnimplementedSubscriberLookupServer can be embedded to have forward compatible implementations.
type UnimplementedSubscriberLookupServer struct {
}

func (*UnimplementedSubscriberLookupServer) GetMSISDNs(context.Context, *GetMSISDNsRequest) (*GetMSISDNsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMSISDNs not implemented")
}
func (*UnimplementedSubscriberLookupServer) SetMSISDN(context.Context, *SetMSISDNRequest) (*SetMSISDNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMSISDN not implemented")
}
func (*UnimplementedSubscriberLookupServer) DeleteMSISDN(context.Context, *DeleteMSISDNRequest) (*DeleteMSISDNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMSISDN not implemented")
}
func (*UnimplementedSubscriberLookupServer) GetIPs(context.Context, *GetIPsRequest) (*GetIPsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIPs not implemented")
}
func (*UnimplementedSubscriberLookupServer) SetIPs(context.Context, *SetIPsRequest) (*SetIPsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIPs not implemented")
}

func RegisterSubscriberLookupServer(s *grpc.Server, srv SubscriberLookupServer) {
	s.RegisterService(&_SubscriberLookup_serviceDesc, srv)
}

func _SubscriberLookup_GetMSISDNs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMSISDNsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberLookupServer).GetMSISDNs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.subscriberdb.SubscriberLookup/GetMSISDNs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberLookupServer).GetMSISDNs(ctx, req.(*GetMSISDNsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberLookup_SetMSISDN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMSISDNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberLookupServer).SetMSISDN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.subscriberdb.SubscriberLookup/SetMSISDN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberLookupServer).SetMSISDN(ctx, req.(*SetMSISDNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberLookup_DeleteMSISDN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMSISDNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberLookupServer).DeleteMSISDN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.subscriberdb.SubscriberLookup/DeleteMSISDN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberLookupServer).DeleteMSISDN(ctx, req.(*DeleteMSISDNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberLookup_GetIPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIPsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberLookupServer).GetIPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.subscriberdb.SubscriberLookup/GetIPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberLookupServer).GetIPs(ctx, req.(*GetIPsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberLookup_SetIPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIPsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberLookupServer).SetIPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.subscriberdb.SubscriberLookup/SetIPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberLookupServer).SetIPs(ctx, req.(*SetIPsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubscriberLookup_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.subscriberdb.SubscriberLookup",
	HandlerType: (*SubscriberLookupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMSISDNs",
			Handler:    _SubscriberLookup_GetMSISDNs_Handler,
		},
		{
			MethodName: "SetMSISDN",
			Handler:    _SubscriberLookup_SetMSISDN_Handler,
		},
		{
			MethodName: "DeleteMSISDN",
			Handler:    _SubscriberLookup_DeleteMSISDN_Handler,
		},
		{
			MethodName: "GetIPs",
			Handler:    _SubscriberLookup_GetIPs_Handler,
		},
		{
			MethodName: "SetIPs",
			Handler:    _SubscriberLookup_SetIPs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/cloud/go/services/subscriberdb/protos/subscriberdb.proto",
}
