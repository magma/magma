// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.10.0
// source: lte/cloud/go/services/subscriberdb/protos/subscriberdb.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SubscriberLookupClient is the client API for SubscriberLookup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriberLookupClient interface {
	// GetMSISDNs returns MSISDN -> IMSI mappings.
	GetMSISDNs(ctx context.Context, in *GetMSISDNsRequest, opts ...grpc.CallOption) (*GetMSISDNsResponse, error)
	// SetMSISDN creates a MSISDN -> IMSI mapping.
	// Error if MSISDN has already been assigned.
	SetMSISDN(ctx context.Context, in *SetMSISDNRequest, opts ...grpc.CallOption) (*SetMSISDNResponse, error)
	// DeleteMSISDN removes the MSISDN -> IMSI mapping.
	DeleteMSISDN(ctx context.Context, in *DeleteMSISDNRequest, opts ...grpc.CallOption) (*DeleteMSISDNResponse, error)
	// GetIPs returns IP -> IMSI mappings.
	GetIPs(ctx context.Context, in *GetIPsRequest, opts ...grpc.CallOption) (*GetIPsResponse, error)
	// SetIPs creates an IP -> IMSI mapping.
	// Error if IP has already been assigned.
	SetIPs(ctx context.Context, in *SetIPsRequest, opts ...grpc.CallOption) (*SetIPsResponse, error)
}

type subscriberLookupClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriberLookupClient(cc grpc.ClientConnInterface) SubscriberLookupClient {
	return &subscriberLookupClient{cc}
}

func (c *subscriberLookupClient) GetMSISDNs(ctx context.Context, in *GetMSISDNsRequest, opts ...grpc.CallOption) (*GetMSISDNsResponse, error) {
	out := new(GetMSISDNsResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.subscriberdb.SubscriberLookup/GetMSISDNs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberLookupClient) SetMSISDN(ctx context.Context, in *SetMSISDNRequest, opts ...grpc.CallOption) (*SetMSISDNResponse, error) {
	out := new(SetMSISDNResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.subscriberdb.SubscriberLookup/SetMSISDN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberLookupClient) DeleteMSISDN(ctx context.Context, in *DeleteMSISDNRequest, opts ...grpc.CallOption) (*DeleteMSISDNResponse, error) {
	out := new(DeleteMSISDNResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.subscriberdb.SubscriberLookup/DeleteMSISDN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberLookupClient) GetIPs(ctx context.Context, in *GetIPsRequest, opts ...grpc.CallOption) (*GetIPsResponse, error) {
	out := new(GetIPsResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.subscriberdb.SubscriberLookup/GetIPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberLookupClient) SetIPs(ctx context.Context, in *SetIPsRequest, opts ...grpc.CallOption) (*SetIPsResponse, error) {
	out := new(SetIPsResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.subscriberdb.SubscriberLookup/SetIPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriberLookupServer is the server API for SubscriberLookup service.
// All implementations must embed UnimplementedSubscriberLookupServer
// for forward compatibility
type SubscriberLookupServer interface {
	// GetMSISDNs returns MSISDN -> IMSI mappings.
	GetMSISDNs(context.Context, *GetMSISDNsRequest) (*GetMSISDNsResponse, error)
	// SetMSISDN creates a MSISDN -> IMSI mapping.
	// Error if MSISDN has already been assigned.
	SetMSISDN(context.Context, *SetMSISDNRequest) (*SetMSISDNResponse, error)
	// DeleteMSISDN removes the MSISDN -> IMSI mapping.
	DeleteMSISDN(context.Context, *DeleteMSISDNRequest) (*DeleteMSISDNResponse, error)
	// GetIPs returns IP -> IMSI mappings.
	GetIPs(context.Context, *GetIPsRequest) (*GetIPsResponse, error)
	// SetIPs creates an IP -> IMSI mapping.
	// Error if IP has already been assigned.
	SetIPs(context.Context, *SetIPsRequest) (*SetIPsResponse, error)
	mustEmbedUnimplementedSubscriberLookupServer()
}

// UnimplementedSubscriberLookupServer must be embedded to have forward compatible implementations.
type UnimplementedSubscriberLookupServer struct {
}

func (UnimplementedSubscriberLookupServer) GetMSISDNs(context.Context, *GetMSISDNsRequest) (*GetMSISDNsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMSISDNs not implemented")
}
func (UnimplementedSubscriberLookupServer) SetMSISDN(context.Context, *SetMSISDNRequest) (*SetMSISDNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMSISDN not implemented")
}
func (UnimplementedSubscriberLookupServer) DeleteMSISDN(context.Context, *DeleteMSISDNRequest) (*DeleteMSISDNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMSISDN not implemented")
}
func (UnimplementedSubscriberLookupServer) GetIPs(context.Context, *GetIPsRequest) (*GetIPsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIPs not implemented")
}
func (UnimplementedSubscriberLookupServer) SetIPs(context.Context, *SetIPsRequest) (*SetIPsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIPs not implemented")
}
func (UnimplementedSubscriberLookupServer) mustEmbedUnimplementedSubscriberLookupServer() {}

// UnsafeSubscriberLookupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriberLookupServer will
// result in compilation errors.
type UnsafeSubscriberLookupServer interface {
	mustEmbedUnimplementedSubscriberLookupServer()
}

func RegisterSubscriberLookupServer(s grpc.ServiceRegistrar, srv SubscriberLookupServer) {
	s.RegisterService(&SubscriberLookup_ServiceDesc, srv)
}

func _SubscriberLookup_GetMSISDNs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMSISDNsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberLookupServer).GetMSISDNs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.subscriberdb.SubscriberLookup/GetMSISDNs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberLookupServer).GetMSISDNs(ctx, req.(*GetMSISDNsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberLookup_SetMSISDN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMSISDNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberLookupServer).SetMSISDN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.subscriberdb.SubscriberLookup/SetMSISDN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberLookupServer).SetMSISDN(ctx, req.(*SetMSISDNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberLookup_DeleteMSISDN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMSISDNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberLookupServer).DeleteMSISDN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.subscriberdb.SubscriberLookup/DeleteMSISDN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberLookupServer).DeleteMSISDN(ctx, req.(*DeleteMSISDNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberLookup_GetIPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIPsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberLookupServer).GetIPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.subscriberdb.SubscriberLookup/GetIPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberLookupServer).GetIPs(ctx, req.(*GetIPsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberLookup_SetIPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIPsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberLookupServer).SetIPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.subscriberdb.SubscriberLookup/SetIPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberLookupServer).SetIPs(ctx, req.(*SetIPsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscriberLookup_ServiceDesc is the grpc.ServiceDesc for SubscriberLookup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriberLookup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.subscriberdb.SubscriberLookup",
	HandlerType: (*SubscriberLookupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMSISDNs",
			Handler:    _SubscriberLookup_GetMSISDNs_Handler,
		},
		{
			MethodName: "SetMSISDN",
			Handler:    _SubscriberLookup_SetMSISDN_Handler,
		},
		{
			MethodName: "DeleteMSISDN",
			Handler:    _SubscriberLookup_DeleteMSISDN_Handler,
		},
		{
			MethodName: "GetIPs",
			Handler:    _SubscriberLookup_GetIPs_Handler,
		},
		{
			MethodName: "SetIPs",
			Handler:    _SubscriberLookup_SetIPs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/cloud/go/services/subscriberdb/protos/subscriberdb.proto",
}
