# Copyright 2022 The Magma Authors.

# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Definitions of the magma and sctpd debian artifacts. Look at the the comment in the
":release_build" target for information on how to build the magma and sctpd debian artifacts.
"""

load("@rules_pkg//pkg:deb.bzl", "pkg_deb")
load("@rules_pkg//pkg:mappings.bzl", "pkg_attributes", "pkg_filegroup", "pkg_files")
load("@rules_pkg//pkg:tar.bzl", "pkg_tar")
load("//bazel:deb_build.bzl", "PY_DEST")
load(":deb_dependencies.bzl", "MAGMA_DEPS", "OAI_DEPS", "OVS_DEPS")

SCTPD_PKGNAME = "magma-sctpd"

VERSION = "1.9.0"

VERSION_DEB = "{ver}-VERSION-SUFFIX".format(ver = VERSION)

ARCH = "amd64"

SCTPD_FILE_NAME = "{name}_{ver}_{arch}".format(
    name = SCTPD_PKGNAME,
    arch = ARCH,
    ver = VERSION_DEB,
)

MAGMA_PKGNAME = "magma"

MAGMA_FILE_NAME = "{name}_{ver}_{arch}".format(
    name = MAGMA_PKGNAME,
    arch = ARCH,
    ver = VERSION_DEB,
)

### META INFO

URL = "https://github.com/magma/magma/"

MAINTAINER = "The Magma Authors <main@lists.magmacore.org>"

### SCTPD BUILD

genrule(
    name = "gen_sctpd_version",
    outs = ["version"],
    cmd = "echo \"{ver}\" > \"$@\"".format(ver = VERSION),
)

pkg_files(
    name = "sctpd_version",
    srcs = [":gen_sctpd_version"],
    prefix = "/usr/local/share/sctpd/",
)

pkg_files(
    name = "sctpd_binary",
    srcs = ["//lte/gateway/c/sctpd/src:sctpd"],
    attributes = pkg_attributes(mode = "0755"),
    prefix = "/usr/local/sbin",
)

pkg_tar(
    name = "sctpd_content",
    srcs = [
        ":sctpd_binary",
        ":sctpd_version",
        "//lte/gateway/deploy/roles/magma/files/systemd:sctpd_service_definition",
    ],
    package_file_name = "{fname}.tar".format(fname = SCTPD_FILE_NAME),
)

pkg_deb(
    name = "sctpd_deb_pkg",
    architecture = ARCH,
    data = ":sctpd_content",
    description = "Magma SCTPD",
    homepage = URL,
    maintainer = MAINTAINER,
    package = SCTPD_PKGNAME,
    package_file_name = "{fname}.deb".format(fname = SCTPD_FILE_NAME),
    version = VERSION_DEB,
)

### MAGMA BUILD

pkg_filegroup(
    name = "magma_service_definitions",
    srcs = [
        "//lte/gateway/deploy/roles/magma/files/systemd:magma_lte_service_definitions",
        "//orc8r/tools/ansible/roles/fluent_bit/files:magma_fluent_bit_service_definition",
        "//orc8r/tools/ansible/roles/gateway_services/files:magma_orc8r_service_definitions",
    ],
    prefix = "/etc/systemd/system",
)

pkg_filegroup(
    name = "magma_ebpf",
    srcs = [
        "//lte/gateway/python/magma/kernsnoopd/ebpf:magma_ebpf_kernsnoopd",
        "//lte/gateway/python/magma/pipelined/ebpf:magma_ebpf_pipelined",
    ],
    prefix = "/var/opt/magma/ebpf",
)

pkg_filegroup(
    name = "magma_python_scripts",
    srcs = [
        "//lte/gateway/python/scripts:magma_lte_scripts",
        "//orc8r/gateway/python/scripts:magma_orc8r_scripts",
    ],
)

pkg_files(
    name = "magma_go_binaries",
    srcs = ["//feg/gateway/services/envoy_controller"],
    attributes = pkg_attributes(mode = "0755"),
    prefix = "/usr/local/bin",
)

pkg_files(
    name = "magma_c_binaries",
    srcs = [
        "//lte/gateway/c/connection_tracker/src:connectiond",
        "//lte/gateway/c/core:agw_of",
        "//lte/gateway/c/li_agent/src:liagentd",
        "//lte/gateway/c/session_manager:sessiond",
    ],
    attributes = pkg_attributes(mode = "0755"),
    prefix = "/usr/local/bin",
    renames = {"//lte/gateway/c/core:agw_of": "mme"},
)

pkg_filegroup(
    name = "magma_python_services",
    srcs = [
        "//lte/gateway/python:magma_python_lte_services",
        "//orc8r/gateway/python:magma_python_orc8r_services",
    ],
    prefix = PY_DEST,
)

pkg_filegroup(
    name = "magma_configs",
    srcs = [
        "//lte/gateway/configs:magma_config_files",
        "//lte/gateway/configs/templates:magma_lte_config_template_files",
        "//orc8r/gateway/configs/templates:magma_orc8r_config_template_files",
    ],
    prefix = "/etc/magma",
)

pkg_tar(
    name = "magma_content",
    srcs = [
        ":magma_c_binaries",
        ":magma_configs",
        ":magma_ebpf",
        ":magma_go_binaries",
        ":magma_python_scripts",
        ":magma_python_services",
        ":magma_service_definitions",
        "//lte/gateway/deploy/roles/magma/files:ansible_configs",
        "//orc8r/tools/ansible/roles/fluent_bit/files:magma_config_fluent_bit",
    ],
    package_file_name = "{fname}.tar".format(fname = MAGMA_FILE_NAME),
)

pkg_deb(
    name = "magma_deb_pkg",
    architecture = ARCH,
    data = ":magma_content",
    depends = MAGMA_DEPS + OAI_DEPS + OVS_DEPS,
    description = "Magma Access Gateway",
    homepage = URL,
    maintainer = MAINTAINER,
    package = MAGMA_PKGNAME,
    package_file_name = "{fname}.deb".format(fname = MAGMA_FILE_NAME),
    postinst = ":magma-postinst-bazel",
    provides = [MAGMA_PKGNAME],
    replaces = [MAGMA_PKGNAME],
    version = VERSION_DEB,
)

### CI BUILDS

config_setting(
    name = "is_production",
    values = {"define": "production=1"},
)

genrule(
    name = "update_deb_meta_info",
    srcs = ["update_deb_meta_info.sh.template"],
    outs = ["update_deb_meta_info.sh"],
    cmd =
        " && ".join([
            "cp $(location update_deb_meta_info.sh.template) $@",
            "sed -i 's/VERSION=REPLACE_ME/VERSION={ver}/' $@".format(ver = VERSION),
            "sed -i 's/MAGMA_INPUT_FILE_NAME=REPLACE_ME/MAGMA_INPUT_FILE_NAME={name}.deb/' $@".format(name = MAGMA_FILE_NAME),
            "sed -i 's/SCTPD_INPUT_FILE_NAME=REPLACE_ME/SCTPD_INPUT_FILE_NAME={name}.deb/' $@".format(name = SCTPD_FILE_NAME),
        ]) + select({
            ":is_production": " && sed -i 's/DEV_BUILD=true/DEV_BUILD=false/' $@",
            "//conditions:default": "",
        }),
    tags = ["manual"],
)

sh_binary(
    # Wrapper target for creating magma and sctpd debian artifacts with proper versions.
    # Creating the debian packages with rules_pkg must be reproducible. A version like
    # "1.9.0-1667381719-ebd3bb56" (<version>_<timestamp>_<hash>) would produce artifacts
    # that are not reproducible. This target builds the artifacts and changes the
    # version afterwards (also the description in case of "dev builds").
    # Use --config=production in order to create artifacts for production usage and CI, e.g.,
    # bazel run //lte/gateway/release:release_build --config=production
    name = "release_build",
    srcs = [":update_deb_meta_info"],
    data = [
        ":magma_deb_pkg",
        ":sctpd_deb_pkg",
    ],
    tags = ["manual"],
)
