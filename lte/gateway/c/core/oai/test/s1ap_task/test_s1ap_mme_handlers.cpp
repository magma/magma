/**
 * Copyright 2021 The Magma Authors.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <gtest/gtest.h>
#include <thread>

#include "lte/gateway/c/core/oai/test/mock_tasks/mock_tasks.hpp"

extern "C" {
#include "lte/gateway/c/core/common/dynamic_memory_check.h"
#include "lte/gateway/c/core/oai/common/log.h"
#include "lte/gateway/c/core/oai/lib/bstr/bstrlib.h"
}

#include "lte/gateway/c/core/oai/include/mme_config.hpp"
#include "lte/gateway/c/core/oai/include/mme_init.hpp"
#include "lte/gateway/c/core/oai/include/s1ap_state.hpp"
#include "lte/gateway/c/core/oai/tasks/s1ap/s1ap_mme_decoder.hpp"
#include "lte/gateway/c/core/oai/tasks/s1ap/s1ap_mme_nas_procedures.hpp"
#include "lte/gateway/c/core/oai/tasks/s1ap/s1ap_mme_handlers.hpp"
#include "lte/gateway/c/core/oai/test/s1ap_task/s1ap_mme_test_utils.h"
#include "lte/gateway/c/core/oai/tasks/s1ap/s1ap_state_manager.hpp"
#include "lte/gateway/c/core/oai/include/state_converter.hpp"
#include "xer_encoder.h"

extern bool hss_associated;
extern task_zmq_ctx_t task_zmq_ctx_mme;

namespace magma {
namespace lte {

extern task_zmq_ctx_t task_zmq_ctx_main_s1ap;

static int handle_message(zloop_t* loop, zsock_t* reader, void* arg) {
  MessageDef* received_message_p = receive_msg(reader);

  switch (ITTI_MSG_ID(received_message_p)) {
    default: {
    } break;
  }

  itti_free_msg_content(received_message_p);
  free(received_message_p);
  return 0;
}

class S1apMmeHandlersTest : public ::testing::Test {
  virtual void SetUp() {
    mme_app_handler = std::make_shared<MockMmeAppHandler>();
    sctp_handler = std::make_shared<MockSctpHandler>();

    itti_init(TASK_MAX, THREAD_MAX, MESSAGES_ID_MAX, tasks_info, messages_info,
              NULL, NULL);

    // initialize mme config
    mme_config_init(&mme_config);
    create_partial_lists(&mme_config);
    mme_config.use_stateless = false;
    hss_associated = true;

    task_id_t task_id_list[4] = {TASK_MME_APP, TASK_S1AP, TASK_SCTP,
                                 TASK_SERVICE303};
    init_task_context(TASK_MAIN, task_id_list, 4, handle_message,
                      &task_zmq_ctx_main_s1ap);

    std::thread task_mme_app(start_mock_mme_app_task, mme_app_handler);
    std::thread task_sctp(start_mock_sctp_task, sctp_handler);
    task_mme_app.detach();
    task_sctp.detach();

    s1ap_mme_init(&mme_config);

    // Setup new association for testing
    state = S1apStateManager::getInstance().get_state(false);
    assoc_id = 1;
    stream_id = 0;
    setup_new_association(state, assoc_id);
    std::this_thread::sleep_for(std::chrono::milliseconds(500));
  }

  virtual void TearDown() {
    // Sleep to ensure that messages are received and contexts are released
    std::this_thread::sleep_for(std::chrono::milliseconds(500));

    send_terminate_message_fatal(&task_zmq_ctx_main_s1ap);
    send_terminate_message_fatal(&task_zmq_ctx_mme);

    destroy_task_context(&task_zmq_ctx_main_s1ap);
    itti_free_desc_threads();

    free_mme_config(&mme_config);

    // Sleep to ensure that messages are received and contexts are released
    std::this_thread::sleep_for(std::chrono::milliseconds(200));
  }

 protected:
  std::shared_ptr<MockMmeAppHandler> mme_app_handler;
  std::shared_ptr<MockSctpHandler> sctp_handler;
  oai::S1apState* state;
  sctp_assoc_id_t assoc_id;
  sctp_stream_id_t stream_id;
};

TEST_F(S1apMmeHandlersTest, HandleS1SetupRequestFailureHss) {
  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(1);

  hss_associated = false;

  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  status_code_e pdu_rc = generate_s1_setup_request_pdu(&pdu_s1);
  ASSERT_EQ(pdu_rc, RETURNok);

  sctp_stream_id_t stream_id = 0;
  status_code_e rc =
      s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1);
  ASSERT_EQ(rc, RETURNok);

  // State validation
  ASSERT_EQ(state->num_enbs(), 0);

  // Freeing pdu and payload data
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);
}

TEST_F(S1apMmeHandlersTest, HandleS1SetupRequestFailureReseting) {
  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(1);

  oai::EnbDescription enb_associated;
  proto_map_uint32_enb_description_t enb_map;
  enb_map.map = state->mutable_enbs();
  enb_map.get(assoc_id, &enb_associated);
  enb_associated.set_s1_enb_state(magma::lte::oai::S1AP_RESETING);
  s1ap_state_update_enb_map(state, assoc_id, &enb_associated);

  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  status_code_e pdu_rc = generate_s1_setup_request_pdu(&pdu_s1);
  ASSERT_EQ(pdu_rc, RETURNok);

  sctp_stream_id_t stream_id = 0;
  status_code_e rc =
      s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1);
  ASSERT_EQ(rc, RETURNok);

  // State validation
  ASSERT_EQ(state->num_enbs(), 0);

  // Freeing pdu and payload data
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);
}

TEST_F(S1apMmeHandlersTest, HandleCloseSctpAssociation) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_s1ap_ue_context_release_req())
      .Times(0);

  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  ASSERT_EQ(RETURNok, generate_s1_setup_request_pdu(&pdu_s1));
  ASSERT_EQ(RETURNok,
            s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1));

  // State validation
  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 0));
  ASSERT_TRUE(is_num_enbs_valid(state, 1));

  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  handle_mme_ue_id_notification(state, assoc_id);

  // Send SCTP_CLOSE_ASSOCIATION mimicing SCTP task
  ASSERT_EQ(send_s1ap_close_sctp_association(assoc_id), RETURNok);

  // Freeing pdu and payload data
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);
}

TEST_F(S1apMmeHandlersTest, HandleICSResponseICSRelease) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  bool is_state_same = false;

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(2);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_s1ap_ue_context_release_req())
      .Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_context_setup_failure())
      .Times(0);

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_INIT, 0));

  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  ASSERT_EQ(RETURNok, generate_s1_setup_request_pdu(&pdu_s1));
  ASSERT_EQ(RETURNok,
            s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1));

  // State validation
  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 0));
  ASSERT_TRUE(is_num_enbs_valid(state, 1));

  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  handle_mme_ue_id_notification(state, assoc_id);

  // Generate downlink nas transport with dummy payload
  bstring p;
  std::string test_str = "test";
  STRING_TO_BSTRING(test_str, p);
  s1ap_generate_downlink_nas_transport(state, 1, 7, &p, 1, &is_state_same);
  bdestroy_wrapper(&p);

  // Authentication response proc packet bytes
  uint8_t auth_bytes[] = {
      0x00, 0x0d, 0x40, 0x3d, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1a, 0x00,
      0x14, 0x13, 0x07, 0x53, 0x10, 0x1e, 0x63, 0x7e, 0x5c, 0x58, 0xec,
      0x5a, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x64, 0x40, 0x08, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x00, 0x00, 0xa0,
      0x00, 0x43, 0x40, 0x06, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x01};

  ASSERT_EQ(simulate_pdu_s1_message(auth_bytes, sizeof(auth_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  uint8_t ics_bytes[] = {0x20, 0x09, 0x00, 0x22, 0x00, 0x00, 0x03, 0x00,
                         0x00, 0x40, 0x02, 0x00, 0x07, 0x00, 0x08, 0x40,
                         0x02, 0x00, 0x01, 0x00, 0x33, 0x40, 0x0f, 0x00,
                         0x00, 0x32, 0x40, 0x0a, 0x0a, 0x1f, 0xc0, 0xa8,
                         0x3c, 0x8d, 0x0a, 0x00, 0x01, 0x28};

  ASSERT_EQ(simulate_pdu_s1_message(ics_bytes, sizeof(ics_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  // Freeing pdu and payload data
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);

  // State validation
  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 1));
  ASSERT_TRUE(is_num_enbs_valid(state, 1));

  uint8_t ics_release_bytes[] = {0x00, 0x12, 0x40, 0x15, 0x00, 0x00, 0x03,
                                 0x00, 0x00, 0x00, 0x02, 0x00, 0x07, 0x00,
                                 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x02,
                                 0x40, 0x02, 0x02, 0x80};

  ASSERT_EQ(
      simulate_pdu_s1_message(ics_release_bytes, sizeof(ics_release_bytes),
                              state, assoc_id, stream_id),
      RETURNok);

  // State validation
  ASSERT_TRUE(is_num_enbs_valid(state, 1));
}

TEST_F(S1apMmeHandlersTest, HandleICSFailure) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  bool is_state_same = false;

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(2);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_s1ap_ue_context_release_req())
      .Times(0);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_context_setup_failure())
      .Times(1);

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_INIT, 0));

  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  ASSERT_EQ(RETURNok, generate_s1_setup_request_pdu(&pdu_s1));
  ASSERT_EQ(RETURNok,
            s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1));

  // State validation
  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 0));
  ASSERT_TRUE(is_num_enbs_valid(state, 1));

  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  handle_mme_ue_id_notification(state, assoc_id);

  // Generate downlink nas transport with dummy payload
  bstring p;
  std::string test_str = "test";
  STRING_TO_BSTRING(test_str, p);
  s1ap_generate_downlink_nas_transport(state, 1, 7, &p, 1, &is_state_same);
  bdestroy_wrapper(&p);

  // Simulate Authentication Rsp
  uint8_t auth_bytes[] = {
      0x00, 0x0d, 0x40, 0x3d, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1a, 0x00,
      0x14, 0x13, 0x07, 0x53, 0x10, 0x1e, 0x63, 0x7e, 0x5c, 0x58, 0xec,
      0x5a, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x64, 0x40, 0x08, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x00, 0x00, 0xa0,
      0x00, 0x43, 0x40, 0x06, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x01};

  ASSERT_EQ(simulate_pdu_s1_message(auth_bytes, sizeof(auth_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  // Simulate ICS Failure
  uint8_t ics_fail[] = {0x40, 0x09, 0x00, 0x15, 0x00, 0x00, 0x03, 0x00, 0x00,
                        0x40, 0x02, 0x00, 0x07, 0x00, 0x08, 0x40, 0x02, 0x00,
                        0x01, 0x00, 0x02, 0x40, 0x02, 0x00, 0x00};

  ASSERT_EQ(simulate_pdu_s1_message(ics_fail, sizeof(ics_fail), state, assoc_id,
                                    stream_id),
            RETURNok);

  // Freeing pdu and payload data
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);
}

TEST_F(S1apMmeHandlersTest, HandleUECapIndication) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_INIT, 0));

  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  ASSERT_EQ(RETURNok, generate_s1_setup_request_pdu(&pdu_s1));
  ASSERT_EQ(RETURNok,
            s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1));

  // State validation
  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 0));
  ASSERT_TRUE(is_num_enbs_valid(state, 1));

  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  handle_mme_ue_id_notification(state, assoc_id);

  uint8_t ue_cap_bytes[] = {
      0x00, 0x16, 0x40, 0x53, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x4a, 0x40,
      0x40, 0x3f, 0x01, 0xe8, 0x01, 0x03, 0xac, 0x59, 0x80, 0x07, 0x00,
      0x08, 0x20, 0x81, 0x83, 0x9b, 0x4e, 0x1c, 0x3f, 0xf8, 0x7f, 0xf0,
      0xff, 0xe1, 0xff, 0xc3, 0xff, 0x87, 0xff, 0x0f, 0xfe, 0x1f, 0xfd,
      0xf8, 0x37, 0x62, 0x78, 0x00, 0xa0, 0x18, 0x5f, 0x80, 0x00, 0x00,
      0x00, 0x1c, 0x07, 0xe0, 0xdd, 0x89, 0xe0, 0x00, 0x00, 0x00, 0x07,
      0x09, 0xf8, 0x37, 0x62, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00};

  bstring payload_ue_cap;
  payload_ue_cap = blk2bstr(&ue_cap_bytes, sizeof(ue_cap_bytes));
  S1ap_S1AP_PDU_t pdu_cap;
  memset(&pdu_cap, 0, sizeof(pdu_cap));

  ASSERT_EQ(s1ap_mme_decode_pdu(&pdu_cap, payload_ue_cap), RETURNok);
  ASSERT_EQ(s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_cap),
            RETURNok);

  // State validation
  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 1));
  ASSERT_TRUE(is_num_enbs_valid(state, 1));

  // Freeing pdu and payload data
  bdestroy_wrapper(&payload_ue_cap);
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_cap);
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);
}

TEST_F(S1apMmeHandlersTest, GenerateUEContextReleaseCommand) {
  oai::UeDescription ue_ref_p;
  ue_ref_p.set_enb_ue_s1ap_id(1);
  ue_ref_p.set_mme_ue_s1ap_id(1);
  ue_ref_p.set_sctp_assoc_id(assoc_id);
  ue_ref_p.set_comp_s1ap_id(S1AP_GENERATE_COMP_S1AP_ID(assoc_id, 1));

  ue_ref_p.mutable_s1ap_ue_context_rel_timer()->set_id(-1);
  ue_ref_p.mutable_s1ap_ue_context_rel_timer()->set_msec(1000);
  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(2);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_INIT, 0));

  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  ASSERT_EQ(RETURNok, generate_s1_setup_request_pdu(&pdu_s1));
  ASSERT_EQ(RETURNok,
            s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1));

  // State validation
  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 0));
  ASSERT_TRUE(is_num_enbs_valid(state, 1));

  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  // Invalid S1 Cause returns error
  ASSERT_EQ(RETURNerror, s1ap_mme_generate_ue_context_release_command(
                             state, &ue_ref_p, S1AP_IMPLICIT_CONTEXT_RELEASE,
                             INVALID_IMSI64, assoc_id, stream_id, 1, 1));
  // Valid S1 Causes passess successfully
  ASSERT_EQ(RETURNok, s1ap_mme_generate_ue_context_release_command(
                          state, &ue_ref_p, S1AP_INITIAL_CONTEXT_SETUP_FAILED,
                          INVALID_IMSI64, assoc_id, stream_id, 1, 1));

  EXPECT_NE(ue_ref_p.s1ap_ue_context_rel_timer().id(), S1AP_TIMER_INACTIVE_ID);

  // Freeing pdu and payload data
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);
}

TEST_F(S1apMmeHandlersTest, HandleUEContextRelease) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_INIT, 0));

  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  ASSERT_EQ(RETURNok, generate_s1_setup_request_pdu(&pdu_s1));
  ASSERT_EQ(RETURNok,
            s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1));

  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  handle_mme_ue_id_notification(state, assoc_id);

  // State validation
  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 1));
  ASSERT_TRUE(is_num_enbs_valid(state, 1));
  ASSERT_EQ(state->mmeid2associd_size(), 1);

  // Send UE context release command mimicing MME_APP
  MessageDef* message_p;
  message_p =
      itti_alloc_new_message(TASK_MME_APP, S1AP_UE_CONTEXT_RELEASE_COMMAND);
  S1AP_UE_CONTEXT_RELEASE_COMMAND(message_p).mme_ue_s1ap_id = 7;
  S1AP_UE_CONTEXT_RELEASE_COMMAND(message_p).enb_ue_s1ap_id = 1;
  S1AP_UE_CONTEXT_RELEASE_COMMAND(message_p).cause =
      S1AP_SCTP_SHUTDOWN_OR_RESET;
  ASSERT_EQ(send_msg_to_task(&task_zmq_ctx_main_s1ap, TASK_S1AP, message_p),
            RETURNok);

  std::this_thread::sleep_for(std::chrono::milliseconds(500));
  ASSERT_TRUE(is_num_enbs_valid(state, 1));

  uint8_t rel_comp_bytes[] = {0x20, 0x17, 0x00, 0x0f, 0x00, 0x00, 0x02,
                              0x00, 0x00, 0x40, 0x02, 0x00, 0x07, 0x00,
                              0x08, 0x40, 0x02, 0x00, 0x01};

  bstring payload_rel;
  payload_rel = blk2bstr(&rel_comp_bytes, sizeof(rel_comp_bytes));
  S1ap_S1AP_PDU_t pdu_rel;
  memset(&pdu_rel, 0, sizeof(pdu_rel));

  ASSERT_EQ(RETURNok, s1ap_mme_decode_pdu(&pdu_rel, payload_rel));
  ASSERT_EQ(RETURNok,
            s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_rel));

  // Freeing pdu and payload data
  bdestroy_wrapper(&payload_rel);
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_rel);
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);

  // Sleep to ensure that messages are received and contexts are released
  std::this_thread::sleep_for(std::chrono::milliseconds(500));

  ASSERT_EQ(state->mmeid2associd_size(), 0);
}

TEST_F(S1apMmeHandlersTest, HandleConnectionEstCnf) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);
  itti_mme_app_connection_establishment_cnf_t* establishment_cnf_p = NULL;

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(2);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_s1ap_ue_context_release_req())
      .Times(0);
  EXPECT_CALL(*mme_app_handler, nas_proc_dl_transfer_rej()).Times(0);

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_INIT, 0));

  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  ASSERT_EQ(RETURNok, generate_s1_setup_request_pdu(&pdu_s1));
  ASSERT_EQ(RETURNok,
            s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1));

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 0));

  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  handle_mme_ue_id_notification(state, assoc_id);

  ASSERT_EQ(state->mmeid2associd_size(), 1);

  // Send UE connection establishment cnf mimicing MME_APP

  ASSERT_EQ(send_conn_establishment_cnf(7, false, true, true), RETURNok);

  // Freeing pdu and payload data
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);
}

TEST_F(S1apMmeHandlersTest, HandleConnectionEstCnfExtUEAMBR) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(2);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_s1ap_ue_context_release_req())
      .Times(0);
  EXPECT_CALL(*mme_app_handler, nas_proc_dl_transfer_rej()).Times(0);

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_INIT, 0));

  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  ASSERT_EQ(RETURNok, generate_s1_setup_request_pdu(&pdu_s1));
  ASSERT_EQ(RETURNok,
            s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1));

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 0));

  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  handle_mme_ue_id_notification(state, assoc_id);

  ASSERT_EQ(state->mmeid2associd_size(), 1);

  // Send UE connection establishment cnf mimicing MME_APP

  ASSERT_EQ(send_conn_establishment_cnf(7, true, true, true), RETURNok);

  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);
}

TEST_F(S1apMmeHandlersTest, HandleS1apErabRelCmd) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(2);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_s1ap_ue_context_release_req())
      .Times(0);
  EXPECT_CALL(*mme_app_handler, nas_proc_dl_transfer_rej()).Times(0);

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_INIT, 0));

  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  ASSERT_EQ(RETURNok, generate_s1_setup_request_pdu(&pdu_s1));
  ASSERT_EQ(RETURNok,
            s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1));

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 0));

  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  handle_mme_ue_id_notification(state, assoc_id);

  ASSERT_EQ(state->mmeid2associd_size(), 1);

  // Send S1AP_ERAB_REL_CMD message to s1ap_mme_handlers
  ASSERT_EQ(send_s1ap_erab_rel_cmd(state, 7, 1), RETURNok);

  // Freeing pdu and payload data
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);
}

TEST_F(S1apMmeHandlersTest, HandleS1apErabSetupReq) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(2);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_INIT, 0));

  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  ASSERT_EQ(RETURNok, generate_s1_setup_request_pdu(&pdu_s1));
  ASSERT_EQ(RETURNok,
            s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1));

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 0));

  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  handle_mme_ue_id_notification(state, assoc_id);

  ASSERT_EQ(state->mmeid2associd_size(), 1);

  // Call S1AP_ERAB_SETUP_REQ message handler
  ASSERT_EQ(send_s1ap_erab_setup_req(state, 7, 1, 1), RETURNok);

  // Freeing pdu and payload data
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);
}

TEST_F(S1apMmeHandlersTest, HandleS1apErabReleaseComplete) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(3);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_e_rab_setup_rsp()).Times(1);

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_INIT, 0));

  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  ASSERT_EQ(generate_s1_setup_request_pdu(&pdu_s1), RETURNok);
  ASSERT_EQ(s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1),
            RETURNok);

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 0));

  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  handle_mme_ue_id_notification(state, assoc_id);

  ASSERT_EQ(state->mmeid2associd_size(), 1);

  // Call S1AP_ERAB_SETUP_REQ message handler
  ASSERT_EQ(send_s1ap_erab_setup_req(state, 7, 1, 1), RETURNok);

  // Simulate ERABSetupResponse
  uint8_t erab_setup_resp_bytes[] = {
      0x20, 0x05, 0x00, 0x22, 0x00, 0x00, 0x03, 0x00, 0x00, 0x40,
      0x02, 0x00, 0x07, 0x00, 0x08, 0x40, 0x02, 0x00, 0x01, 0x00,
      0x1c, 0x40, 0x0f, 0x00, 0x00, 0x27, 0x40, 0x0a, 0x0e, 0x1f,
      0xc0, 0xa8, 0x3c, 0x8d, 0x0a, 0x00, 0x01, 0x38};

  ASSERT_EQ(simulate_pdu_s1_message(erab_setup_resp_bytes,
                                    sizeof(erab_setup_resp_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  // Send S1AP_ERAB_REL_CMD message to s1ap_mme_handlers
  ASSERT_EQ(send_s1ap_erab_rel_cmd(state, 7, 1), RETURNok);

  // Simulate ERABReleaseResponse
  uint8_t erab_rel_comp_bytes[] = {
      0x20, 0x07, 0x00, 0x1e, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00,
      0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x45, 0x40, 0x0b, 0x01,
      0x00, 0x0f, 0x40, 0x01, 0x0c, 0x00, 0x0f, 0x40, 0x01, 0x0e};

  ASSERT_EQ(
      simulate_pdu_s1_message(erab_rel_comp_bytes, sizeof(erab_rel_comp_bytes),
                              state, assoc_id, stream_id),
      RETURNok);

  // Freeing pdu and payload data
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);
}

TEST_F(S1apMmeHandlersTest, HandleS1apErabResetReq) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(2);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_s1ap_ue_context_release_req())
      .Times(0);
  EXPECT_CALL(*mme_app_handler, nas_proc_dl_transfer_rej()).Times(0);

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_INIT, 0));

  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  ASSERT_EQ(RETURNok, generate_s1_setup_request_pdu(&pdu_s1));
  ASSERT_EQ(RETURNok,
            s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1));

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 0));

  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  handle_mme_ue_id_notification(state, assoc_id);

  ASSERT_EQ(state->mmeid2associd_size(), 1);

  // Send S1AP_ERAB_RESET_REQ mimicing MME_APP
  ASSERT_EQ(send_s1ap_erab_reset_req(assoc_id, stream_id, 1, 7), RETURNok);

  // Freeing pdu and payload data
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);
}

TEST_F(S1apMmeHandlersTest, HandleS1apUeCtxtModification) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(2);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_s1ap_ue_context_release_req())
      .Times(0);
  EXPECT_CALL(*mme_app_handler, nas_proc_dl_transfer_rej()).Times(0);

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_INIT, 0));

  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  ASSERT_EQ(RETURNok, generate_s1_setup_request_pdu(&pdu_s1));
  ASSERT_EQ(RETURNok,
            s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1));

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 0));

  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  handle_mme_ue_id_notification(state, assoc_id);

  // State validation
  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 1));
  ASSERT_TRUE(is_num_enbs_valid(state, 1));
  ASSERT_EQ(state->mmeid2associd_size(), 1);

  // Send S1AP_UE_CONTEXT_MODIFICATION_REQUEST mimicing MME_APP
  ASSERT_EQ(send_s1ap_ue_ctxt_mod(1, 7), RETURNok);

  // Freeing pdu and payload data
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);
}

TEST_F(S1apMmeHandlersTest, HandleS1apPathSwitchRequest) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(2);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_s1ap_ue_context_release_req())
      .Times(0);
  EXPECT_CALL(*mme_app_handler, nas_proc_dl_transfer_rej()).Times(0);

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_INIT, 0));

  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  ASSERT_EQ(RETURNok, generate_s1_setup_request_pdu(&pdu_s1));
  ASSERT_EQ(RETURNok,
            s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1));

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 0));

  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  handle_mme_ue_id_notification(state, assoc_id);

  // State validation
  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 1));
  ASSERT_TRUE(is_num_enbs_valid(state, 1));
  ASSERT_EQ(state->mmeid2associd_size(), 1);

  // Send S1AP_PATH_SWITCH_REQUEST_ACK mimicing MME_APP
  ASSERT_EQ(send_s1ap_path_switch_req(assoc_id, 1, 7), RETURNok);

  // Freeing pdu and payload data
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);
}

TEST_F(S1apMmeHandlersTest, HandleS1apPathSwitchFailure) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(2);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_s1ap_ue_context_release_req())
      .Times(0);
  EXPECT_CALL(*mme_app_handler, nas_proc_dl_transfer_rej()).Times(0);

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_INIT, 0));

  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  ASSERT_EQ(RETURNok, generate_s1_setup_request_pdu(&pdu_s1));
  ASSERT_EQ(RETURNok,
            s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1));

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 0));

  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  handle_mme_ue_id_notification(state, assoc_id);

  // Send S1AP_PATH_SWITCH_REQUEST_FAILURE mimicing MME_APP
  ASSERT_EQ(send_s1ap_path_switch_failure(assoc_id, 1, 7), RETURNok);

  // Freeing pdu and payload data
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);
}

TEST_F(S1apMmeHandlersTest, HandleMmeHandoverRequest) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(2);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_s1ap_ue_context_release_req())
      .Times(0);
  EXPECT_CALL(*mme_app_handler, nas_proc_dl_transfer_rej()).Times(0);

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_INIT, 0));

  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  ASSERT_EQ(RETURNok, generate_s1_setup_request_pdu(&pdu_s1));
  ASSERT_EQ(RETURNok,
            s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1));

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 0));

  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  handle_mme_ue_id_notification(state, assoc_id);

  // Send MME_APP_HANDOVER_REQUEST mimicing MME_APP
  ASSERT_EQ(send_s1ap_mme_handover_request(assoc_id, 7, 10), RETURNok);

  // State validation
  ASSERT_TRUE(is_num_enbs_valid(state, 1));
  ASSERT_EQ(state->mmeid2associd_size(), 1);

  // Freeing pdu and payload data
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);
}

TEST_F(S1apMmeHandlersTest, HandleS1apHandoverCommand) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_INIT, 0));

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(2);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_s1ap_ue_context_release_req())
      .Times(0);
  EXPECT_CALL(*mme_app_handler, nas_proc_dl_transfer_rej()).Times(0);

  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  ASSERT_EQ(RETURNok, generate_s1_setup_request_pdu(&pdu_s1));
  ASSERT_EQ(RETURNok,
            s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1));

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 0));

  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  handle_mme_ue_id_notification(state, assoc_id);

  // Send S1AP_HANDOVER_COMMAND mimicing MME_APP
  ASSERT_EQ(send_s1ap_mme_handover_command(assoc_id, 7, 1, 2, 10, 11),
            RETURNok);

  // Freeing pdu and payload data
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);

  // Sleep to ensure that messages are received
  std::this_thread::sleep_for(std::chrono::milliseconds(200));

  // State validation
  ASSERT_TRUE(is_ue_state_valid(assoc_id, 1, oai::S1AP_UE_HANDOVER));
}

TEST_F(S1apMmeHandlersTest, HandleMmeHandover) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);
  std::mutex mx;
  std::condition_variable cv;
  std::unique_lock<std::mutex> lock(mx);

  bool is_state_same = true;

  sctp_assoc_id_t target_assoc_id = 2;
  setup_new_association(state, target_assoc_id);

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(6);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_s1ap_ue_context_release_req())
      .Times(0);
  EXPECT_CALL(*mme_app_handler, nas_proc_dl_transfer_rej()).Times(0);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_handover_required()).Times(1);

  // Simulate first S1Setup
  uint8_t s1_bytes[] = {0x00, 0x11, 0x00, 0x2f, 0x00, 0x00, 0x04, 0x00, 0x3b,
                        0x00, 0x09, 0x00, 0x00, 0xf1, 0x10, 0x40, 0x00, 0x00,
                        0x00, 0x10, 0x00, 0x3c, 0x40, 0x0b, 0x80, 0x09, 0x22,
                        0x52, 0x41, 0x44, 0x49, 0x53, 0x59, 0x53, 0x22, 0x00,
                        0x40, 0x00, 0x07, 0x00, 0x00, 0x00, 0x40, 0x00, 0xf1,
                        0x10, 0x00, 0x89, 0x40, 0x01, 0x00};

  ASSERT_EQ(simulate_pdu_s1_message(s1_bytes, sizeof(s1_bytes), state, assoc_id,
                                    stream_id),
            RETURNok);

  // Simulate second S1Setup
  uint8_t s1_bytes_2[] = {0x00, 0x11, 0x00, 0x2f, 0x00, 0x00, 0x04, 0x00, 0x3b,
                          0x00, 0x09, 0x00, 0x00, 0xf1, 0x10, 0x40, 0x00, 0x00,
                          0x00, 0x20, 0x00, 0x3c, 0x40, 0x0b, 0x80, 0x09, 0x22,
                          0x52, 0x41, 0x44, 0x49, 0x53, 0x59, 0x53, 0x22, 0x00,
                          0x40, 0x00, 0x07, 0x00, 0x00, 0x00, 0x40, 0x00, 0xf1,
                          0x10, 0x00, 0x89, 0x40, 0x01, 0x00};
  ASSERT_EQ(simulate_pdu_s1_message(s1_bytes_2, sizeof(s1_bytes_2), state,
                                    target_assoc_id, stream_id),
            RETURNok);

  // Simulate InitialUEMessage - Attach Request
  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  handle_mme_ue_id_notification(state, assoc_id);

  // Simulate UECapabilityInfoIndication
  uint8_t ue_cap_bytes[] = {
      0x00, 0x16, 0x40, 0x53, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x4a, 0x40,
      0x40, 0x3f, 0x01, 0xe8, 0x01, 0x03, 0xac, 0x59, 0x80, 0x07, 0x00,
      0x08, 0x20, 0x81, 0x83, 0x9b, 0x4e, 0x1c, 0x3f, 0xf8, 0x7f, 0xf0,
      0xff, 0xe1, 0xff, 0xc3, 0xff, 0x87, 0xff, 0x0f, 0xfe, 0x1f, 0xfd,
      0xf8, 0x37, 0x62, 0x78, 0x00, 0xa0, 0x18, 0x5f, 0x80, 0x00, 0x00,
      0x00, 0x1c, 0x07, 0xe0, 0xdd, 0x89, 0xe0, 0x00, 0x00, 0x00, 0x07,
      0x09, 0xf8, 0x37, 0x62, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00};

  ASSERT_EQ(simulate_pdu_s1_message(ue_cap_bytes, sizeof(ue_cap_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  // Generate downlink nas transport with dummy payload
  bstring p;
  std::string test_str = "test";
  STRING_TO_BSTRING(test_str, p);
  s1ap_generate_downlink_nas_transport(state, 1, 7, &p, 1, &is_state_same);
  bdestroy_wrapper(&p);

  // Authentication response proc packet bytes
  uint8_t auth_bytes[] = {
      0x00, 0x0d, 0x40, 0x3d, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1a, 0x00,
      0x14, 0x13, 0x07, 0x53, 0x10, 0x1e, 0x63, 0x7e, 0x5c, 0x58, 0xec,
      0x5a, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x64, 0x40, 0x08, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x00, 0x00, 0xa0,
      0x00, 0x43, 0x40, 0x06, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x01};

  ASSERT_EQ(simulate_pdu_s1_message(auth_bytes, sizeof(auth_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  // Simulate InitialContextSetup
  uint8_t ics_bytes[] = {0x20, 0x09, 0x00, 0x22, 0x00, 0x00, 0x03, 0x00,
                         0x00, 0x40, 0x02, 0x00, 0x07, 0x00, 0x08, 0x40,
                         0x02, 0x00, 0x01, 0x00, 0x33, 0x40, 0x0f, 0x00,
                         0x00, 0x32, 0x40, 0x0a, 0x0a, 0x1f, 0xc0, 0xa8,
                         0x3c, 0x8d, 0x0a, 0x00, 0x01, 0x28};

  ASSERT_EQ(simulate_pdu_s1_message(ics_bytes, sizeof(ics_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  ASSERT_TRUE(is_ue_state_valid(assoc_id, 1, oai::S1AP_UE_CONNECTED));

  // Simulate Attach Complete
  uint8_t attach_compl_bytes[] = {
      0x00, 0x0d, 0x40, 0x37, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00,
      0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1a, 0x00, 0x0e, 0x0d,
      0x27, 0xeb, 0x9e, 0x7f, 0x7e, 0x01, 0x07, 0x43, 0x00, 0x03, 0x52, 0x00,
      0xc2, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x00, 0x00,
      0x10, 0x00, 0x43, 0x40, 0x06, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x01};

  ASSERT_EQ(
      simulate_pdu_s1_message(attach_compl_bytes, sizeof(attach_compl_bytes),
                              state, assoc_id, stream_id),
      RETURNok);

  // Simulate Handover Required
  uint8_t handover_req_bytes[] = {
      0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00,
      0x01, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00,
      0x00, 0x02, 0x40, 0x02, 0x04, 0x20, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00,
      0xf1, 0x10, 0x40, 0x00, 0x00, 0x00, 0x20, 0x00, 0xf1, 0x10, 0x00, 0x02,
      0x00, 0x68, 0x00, 0x29, 0x28, 0x60, 0x04, 0x00, 0x03, 0x90, 0x00, 0x00,
      0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xfd,
      0x00, 0x00, 0x00, 0x58, 0x30, 0x31, 0x32, 0x33, 0x34, 0x30, 0x36, 0x0a,
      0x38, 0x39, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x00};

  ASSERT_EQ(
      simulate_pdu_s1_message(handover_req_bytes, sizeof(handover_req_bytes),
                              state, assoc_id, stream_id),
      RETURNok);

  // Simulate Handover Acknowledge
  uint8_t handover_bytes[] = {
      0x20, 0x01, 0x00, 0x5d, 0x00, 0x00, 0x04, 0x00, 0x00, 0x40, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x40, 0x02, 0x00, 0x01, 0x00, 0x12, 0x40,
      0x10, 0x00, 0x00, 0x14, 0x40, 0x0b, 0x00, 0xa1, 0xf0, 0xc0, 0xa8,
      0x3c, 0x8d, 0x0a, 0x00, 0x01, 0x29, 0x00, 0x7b, 0x00, 0x36, 0x35,
      0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65,
      0x74, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
      0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e,
      0x74, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x20, 0x00, 0x31,
      0x32, 0x33, 0x34, 0x35, 0x36, 0x00, 0x01, 0x02, 0x03};

  ASSERT_EQ(simulate_pdu_s1_message(handover_bytes, sizeof(handover_bytes),
                                    state, target_assoc_id, stream_id),
            RETURNok);

  // Send S1AP_HANDOVER_COMMAND mimicing MME_APP
  ASSERT_EQ(send_s1ap_mme_handover_command(assoc_id, 7, 1, 2, 10, 2), RETURNok);

  oai::UeDescription* ue_ref_p = s1ap_state_get_ue_mmeid(7);
  cv.wait_for(lock, std::chrono::milliseconds(1000));
  ASSERT_EQ(ue_ref_p->s1ap_ue_state(), oai::S1AP_UE_HANDOVER);

  // Simulate ENB Status Transfer
  uint8_t enb_transfer[] = {0x00, 0x18, 0x40, 0x24, 0x00, 0x00, 0x03, 0x00,
                            0x00, 0x00, 0x02, 0x00, 0x07, 0x00, 0x08, 0x00,
                            0x02, 0x00, 0x01, 0x00, 0x5a, 0x00, 0x11, 0x00,
                            0x00, 0x00, 0x59, 0x40, 0x0b, 0x05, 0x00, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

  ASSERT_EQ(simulate_pdu_s1_message(enb_transfer, sizeof(enb_transfer), state,
                                    assoc_id, stream_id),
            RETURNok);

  // Simulate Handover Notify
  uint8_t handover_notify[] = {
      0x00, 0x02, 0x40, 0x25, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x02, 0x00, 0x64, 0x40,
      0x08, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x00, 0x00, 0x20, 0x00, 0x43,
      0x40, 0x06, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x02};

  ASSERT_EQ(simulate_pdu_s1_message(handover_notify, sizeof(handover_notify),
                                    state, target_assoc_id, stream_id),
            RETURNok);

  // Free up eRAB data on target eNB
  ue_ref_p = s1ap_state_get_ue_enbid(target_assoc_id, 2);
  ASSERT_EQ(ue_ref_p->s1ap_handover_state().target_enb_id(), 2);
}

TEST_F(S1apMmeHandlersTest, HandleMmeHandoverFailure) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);
  std::mutex mx;
  std::condition_variable cv;
  std::unique_lock<std::mutex> lock(mx);

  bool is_state_same = true;

  sctp_assoc_id_t target_assoc_id = 2;
  setup_new_association(state, target_assoc_id);

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(4);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_s1ap_ue_context_release_req())
      .Times(0);
  EXPECT_CALL(*mme_app_handler, nas_proc_dl_transfer_rej()).Times(0);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_handover_required()).Times(1);

  // Simulate first S1Setup
  uint8_t s1_bytes[] = {0x00, 0x11, 0x00, 0x2f, 0x00, 0x00, 0x04, 0x00, 0x3b,
                        0x00, 0x09, 0x00, 0x00, 0xf1, 0x10, 0x40, 0x00, 0x00,
                        0x00, 0x10, 0x00, 0x3c, 0x40, 0x0b, 0x80, 0x09, 0x22,
                        0x52, 0x41, 0x44, 0x49, 0x53, 0x59, 0x53, 0x22, 0x00,
                        0x40, 0x00, 0x07, 0x00, 0x00, 0x00, 0x40, 0x00, 0xf1,
                        0x10, 0x00, 0x89, 0x40, 0x01, 0x00};

  ASSERT_EQ(simulate_pdu_s1_message(s1_bytes, sizeof(s1_bytes), state, assoc_id,
                                    stream_id),
            RETURNok);

  // Simulate second S1Setup
  uint8_t s1_bytes_2[] = {0x00, 0x11, 0x00, 0x2f, 0x00, 0x00, 0x04, 0x00, 0x3b,
                          0x00, 0x09, 0x00, 0x00, 0xf1, 0x10, 0x40, 0x00, 0x00,
                          0x00, 0x20, 0x00, 0x3c, 0x40, 0x0b, 0x80, 0x09, 0x22,
                          0x52, 0x41, 0x44, 0x49, 0x53, 0x59, 0x53, 0x22, 0x00,
                          0x40, 0x00, 0x07, 0x00, 0x00, 0x00, 0x40, 0x00, 0xf1,
                          0x10, 0x00, 0x89, 0x40, 0x01, 0x00};
  ASSERT_EQ(simulate_pdu_s1_message(s1_bytes_2, sizeof(s1_bytes_2), state,
                                    target_assoc_id, stream_id),
            RETURNok);

  // Simulate InitialUEMessage - Attach Request
  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  handle_mme_ue_id_notification(state, assoc_id);

  // Simulate UECapabilityInfoIndication
  uint8_t ue_cap_bytes[] = {
      0x00, 0x16, 0x40, 0x53, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x4a, 0x40,
      0x40, 0x3f, 0x01, 0xe8, 0x01, 0x03, 0xac, 0x59, 0x80, 0x07, 0x00,
      0x08, 0x20, 0x81, 0x83, 0x9b, 0x4e, 0x1c, 0x3f, 0xf8, 0x7f, 0xf0,
      0xff, 0xe1, 0xff, 0xc3, 0xff, 0x87, 0xff, 0x0f, 0xfe, 0x1f, 0xfd,
      0xf8, 0x37, 0x62, 0x78, 0x00, 0xa0, 0x18, 0x5f, 0x80, 0x00, 0x00,
      0x00, 0x1c, 0x07, 0xe0, 0xdd, 0x89, 0xe0, 0x00, 0x00, 0x00, 0x07,
      0x09, 0xf8, 0x37, 0x62, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00};

  ASSERT_EQ(simulate_pdu_s1_message(ue_cap_bytes, sizeof(ue_cap_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  // Generate downlink nas transport with dummy payload
  bstring p;
  std::string test_str = "test";
  STRING_TO_BSTRING(test_str, p);
  s1ap_generate_downlink_nas_transport(state, 1, 7, &p, 1, &is_state_same);
  bdestroy_wrapper(&p);

  // Authentication response proc packet bytes
  uint8_t auth_bytes[] = {
      0x00, 0x0d, 0x40, 0x3d, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1a, 0x00,
      0x14, 0x13, 0x07, 0x53, 0x10, 0x1e, 0x63, 0x7e, 0x5c, 0x58, 0xec,
      0x5a, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x64, 0x40, 0x08, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x00, 0x00, 0xa0,
      0x00, 0x43, 0x40, 0x06, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x01};

  ASSERT_EQ(simulate_pdu_s1_message(auth_bytes, sizeof(auth_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  // Simulate InitialContextSetup
  uint8_t ics_bytes[] = {0x20, 0x09, 0x00, 0x22, 0x00, 0x00, 0x03, 0x00,
                         0x00, 0x40, 0x02, 0x00, 0x07, 0x00, 0x08, 0x40,
                         0x02, 0x00, 0x01, 0x00, 0x33, 0x40, 0x0f, 0x00,
                         0x00, 0x32, 0x40, 0x0a, 0x0a, 0x1f, 0xc0, 0xa8,
                         0x3c, 0x8d, 0x0a, 0x00, 0x01, 0x28};

  ASSERT_EQ(simulate_pdu_s1_message(ics_bytes, sizeof(ics_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  ASSERT_TRUE(is_ue_state_valid(assoc_id, 1, oai::S1AP_UE_CONNECTED));

  // Simulate Attach Complete
  uint8_t attach_compl_bytes[] = {
      0x00, 0x0d, 0x40, 0x37, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00,
      0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1a, 0x00, 0x0e, 0x0d,
      0x27, 0xeb, 0x9e, 0x7f, 0x7e, 0x01, 0x07, 0x43, 0x00, 0x03, 0x52, 0x00,
      0xc2, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x00, 0x00,
      0x10, 0x00, 0x43, 0x40, 0x06, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x01};

  ASSERT_EQ(
      simulate_pdu_s1_message(attach_compl_bytes, sizeof(attach_compl_bytes),
                              state, assoc_id, stream_id),
      RETURNok);

  // Simulate Handover Required
  uint8_t handover_req_bytes[] = {
      0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00,
      0x01, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00,
      0x00, 0x02, 0x40, 0x02, 0x04, 0x20, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00,
      0xf1, 0x10, 0x40, 0x00, 0x00, 0x00, 0x20, 0x00, 0xf1, 0x10, 0x00, 0x02,
      0x00, 0x68, 0x00, 0x29, 0x28, 0x60, 0x04, 0x00, 0x03, 0x90, 0x00, 0x00,
      0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xfd,
      0x00, 0x00, 0x00, 0x58, 0x30, 0x31, 0x32, 0x33, 0x34, 0x30, 0x36, 0x0a,
      0x38, 0x39, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x00};

  ASSERT_EQ(
      simulate_pdu_s1_message(handover_req_bytes, sizeof(handover_req_bytes),
                              state, assoc_id, stream_id),
      RETURNok);

  // Simulate Handover Failure
  uint8_t handover_fail_bytes[] = {0x40, 0x01, 0x00, 0x0f, 0x00, 0x00, 0x02,
                                   0x00, 0x00, 0x40, 0x02, 0x00, 0x07, 0x00,
                                   0x02, 0x40, 0x02, 0x01, 0x80};

  ASSERT_EQ(
      simulate_pdu_s1_message(handover_fail_bytes, sizeof(handover_fail_bytes),
                              state, target_assoc_id, stream_id),
      RETURNok);
}

TEST_F(S1apMmeHandlersTest, HandleMmeHandoverCancel) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);
  std::mutex mx;
  std::condition_variable cv;
  std::unique_lock<std::mutex> lock(mx);

  bool is_state_same = true;

  sctp_assoc_id_t target_assoc_id = 2;
  setup_new_association(state, target_assoc_id);

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(5);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_s1ap_ue_context_release_req())
      .Times(0);
  EXPECT_CALL(*mme_app_handler, nas_proc_dl_transfer_rej()).Times(0);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_handover_required()).Times(1);

  // Simulate first S1Setup
  uint8_t s1_bytes[] = {0x00, 0x11, 0x00, 0x2f, 0x00, 0x00, 0x04, 0x00, 0x3b,
                        0x00, 0x09, 0x00, 0x00, 0xf1, 0x10, 0x40, 0x00, 0x00,
                        0x00, 0x10, 0x00, 0x3c, 0x40, 0x0b, 0x80, 0x09, 0x22,
                        0x52, 0x41, 0x44, 0x49, 0x53, 0x59, 0x53, 0x22, 0x00,
                        0x40, 0x00, 0x07, 0x00, 0x00, 0x00, 0x40, 0x00, 0xf1,
                        0x10, 0x00, 0x89, 0x40, 0x01, 0x00};

  ASSERT_EQ(simulate_pdu_s1_message(s1_bytes, sizeof(s1_bytes), state, assoc_id,
                                    stream_id),
            RETURNok);

  // Simulate second S1Setup
  uint8_t s1_bytes_2[] = {0x00, 0x11, 0x00, 0x2f, 0x00, 0x00, 0x04, 0x00, 0x3b,
                          0x00, 0x09, 0x00, 0x00, 0xf1, 0x10, 0x40, 0x00, 0x00,
                          0x00, 0x20, 0x00, 0x3c, 0x40, 0x0b, 0x80, 0x09, 0x22,
                          0x52, 0x41, 0x44, 0x49, 0x53, 0x59, 0x53, 0x22, 0x00,
                          0x40, 0x00, 0x07, 0x00, 0x00, 0x00, 0x40, 0x00, 0xf1,
                          0x10, 0x00, 0x89, 0x40, 0x01, 0x00};
  ASSERT_EQ(simulate_pdu_s1_message(s1_bytes_2, sizeof(s1_bytes_2), state,
                                    target_assoc_id, stream_id),
            RETURNok);

  // Simulate InitialUEMessage - Attach Request
  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  handle_mme_ue_id_notification(state, assoc_id);

  // Simulate UECapabilityInfoIndication
  uint8_t ue_cap_bytes[] = {
      0x00, 0x16, 0x40, 0x53, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x4a, 0x40,
      0x40, 0x3f, 0x01, 0xe8, 0x01, 0x03, 0xac, 0x59, 0x80, 0x07, 0x00,
      0x08, 0x20, 0x81, 0x83, 0x9b, 0x4e, 0x1c, 0x3f, 0xf8, 0x7f, 0xf0,
      0xff, 0xe1, 0xff, 0xc3, 0xff, 0x87, 0xff, 0x0f, 0xfe, 0x1f, 0xfd,
      0xf8, 0x37, 0x62, 0x78, 0x00, 0xa0, 0x18, 0x5f, 0x80, 0x00, 0x00,
      0x00, 0x1c, 0x07, 0xe0, 0xdd, 0x89, 0xe0, 0x00, 0x00, 0x00, 0x07,
      0x09, 0xf8, 0x37, 0x62, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00};

  ASSERT_EQ(simulate_pdu_s1_message(ue_cap_bytes, sizeof(ue_cap_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  // Generate downlink nas transport with dummy payload
  bstring p;
  std::string test_str = "test";
  STRING_TO_BSTRING(test_str, p);
  s1ap_generate_downlink_nas_transport(state, 1, 7, &p, 1, &is_state_same);
  bdestroy_wrapper(&p);

  // Authentication response proc packet bytes
  uint8_t auth_bytes[] = {
      0x00, 0x0d, 0x40, 0x3d, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1a, 0x00,
      0x14, 0x13, 0x07, 0x53, 0x10, 0x1e, 0x63, 0x7e, 0x5c, 0x58, 0xec,
      0x5a, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x64, 0x40, 0x08, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x00, 0x00, 0xa0,
      0x00, 0x43, 0x40, 0x06, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x01};

  ASSERT_EQ(simulate_pdu_s1_message(auth_bytes, sizeof(auth_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  // Simulate InitialContextSetup
  uint8_t ics_bytes[] = {0x20, 0x09, 0x00, 0x22, 0x00, 0x00, 0x03, 0x00,
                         0x00, 0x40, 0x02, 0x00, 0x07, 0x00, 0x08, 0x40,
                         0x02, 0x00, 0x01, 0x00, 0x33, 0x40, 0x0f, 0x00,
                         0x00, 0x32, 0x40, 0x0a, 0x0a, 0x1f, 0xc0, 0xa8,
                         0x3c, 0x8d, 0x0a, 0x00, 0x01, 0x28};

  ASSERT_EQ(simulate_pdu_s1_message(ics_bytes, sizeof(ics_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  ASSERT_TRUE(is_ue_state_valid(assoc_id, 1, oai::S1AP_UE_CONNECTED));

  // Simulate Attach Complete
  uint8_t attach_compl_bytes[] = {
      0x00, 0x0d, 0x40, 0x37, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00,
      0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1a, 0x00, 0x0e, 0x0d,
      0x27, 0xeb, 0x9e, 0x7f, 0x7e, 0x01, 0x07, 0x43, 0x00, 0x03, 0x52, 0x00,
      0xc2, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x00, 0x00,
      0x10, 0x00, 0x43, 0x40, 0x06, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x01};

  ASSERT_EQ(
      simulate_pdu_s1_message(attach_compl_bytes, sizeof(attach_compl_bytes),
                              state, assoc_id, stream_id),
      RETURNok);

  // Simulate Handover Required
  uint8_t handover_req_bytes[] = {
      0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00,
      0x01, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00,
      0x00, 0x02, 0x40, 0x02, 0x04, 0x20, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00,
      0xf1, 0x10, 0x40, 0x00, 0x00, 0x00, 0x20, 0x00, 0xf1, 0x10, 0x00, 0x02,
      0x00, 0x68, 0x00, 0x29, 0x28, 0x60, 0x04, 0x00, 0x03, 0x90, 0x00, 0x00,
      0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xfd,
      0x00, 0x00, 0x00, 0x58, 0x30, 0x31, 0x32, 0x33, 0x34, 0x30, 0x36, 0x0a,
      0x38, 0x39, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x00};

  ASSERT_EQ(
      simulate_pdu_s1_message(handover_req_bytes, sizeof(handover_req_bytes),
                              state, assoc_id, stream_id),
      RETURNok);

  // Simulate Handover Acknowledge
  uint8_t handover_bytes[] = {
      0x20, 0x01, 0x00, 0x5d, 0x00, 0x00, 0x04, 0x00, 0x00, 0x40, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x40, 0x02, 0x00, 0x01, 0x00, 0x12, 0x40,
      0x10, 0x00, 0x00, 0x14, 0x40, 0x0b, 0x00, 0xa1, 0xf0, 0xc0, 0xa8,
      0x3c, 0x8d, 0x0a, 0x00, 0x01, 0x29, 0x00, 0x7b, 0x00, 0x36, 0x35,
      0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65,
      0x74, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
      0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e,
      0x74, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x20, 0x00, 0x31,
      0x32, 0x33, 0x34, 0x35, 0x36, 0x00, 0x01, 0x02, 0x03};

  ASSERT_EQ(simulate_pdu_s1_message(handover_bytes, sizeof(handover_bytes),
                                    state, target_assoc_id, stream_id),
            RETURNok);

  // Send S1AP_HANDOVER_COMMAND mimicing MME_APP
  ASSERT_EQ(send_s1ap_mme_handover_command(assoc_id, 7, 1, 2, 10, 11),
            RETURNok);

  oai::UeDescription* ue_ref_p = s1ap_state_get_ue_mmeid(7);
  cv.wait_for(lock, std::chrono::milliseconds(1000));
  ASSERT_EQ(ue_ref_p->s1ap_ue_state(), oai::S1AP_UE_HANDOVER);

  // Simulate Handover Cancel
  uint8_t hand_cancel[] = {0x00, 0x04, 0x00, 0x15, 0x00, 0x00, 0x03, 0x00, 0x00,
                           0x00, 0x02, 0x00, 0x07, 0x00, 0x08, 0x00, 0x02, 0x00,
                           0x01, 0x00, 0x02, 0x40, 0x02, 0x00, 0x80};

  ASSERT_EQ(simulate_pdu_s1_message(hand_cancel, sizeof(hand_cancel), state,
                                    assoc_id, stream_id),
            RETURNok);
}

TEST_F(S1apMmeHandlersTest, HandleErabSetupResponse) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  bool is_state_same = true;

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(2);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_e_rab_setup_rsp()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_s1ap_ue_context_release_req())
      .Times(0);
  EXPECT_CALL(*mme_app_handler, nas_proc_dl_transfer_rej()).Times(0);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_enb_reset_req()).Times(0);

  // Simulate S1Setup
  uint8_t s1_bytes[] = {0x00, 0x11, 0x00, 0x2f, 0x00, 0x00, 0x04, 0x00, 0x3b,
                        0x00, 0x09, 0x00, 0x00, 0xf1, 0x10, 0x40, 0x00, 0x00,
                        0x00, 0x10, 0x00, 0x3c, 0x40, 0x0b, 0x80, 0x09, 0x22,
                        0x52, 0x41, 0x44, 0x49, 0x53, 0x59, 0x53, 0x22, 0x00,
                        0x40, 0x00, 0x07, 0x00, 0x00, 0x00, 0x40, 0x00, 0xf1,
                        0x10, 0x00, 0x89, 0x40, 0x01, 0x00};

  ASSERT_EQ(simulate_pdu_s1_message(s1_bytes, sizeof(s1_bytes), state, assoc_id,
                                    stream_id),
            RETURNok);

  // Simulate InitialUEMessage - Attach Request
  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  handle_mme_ue_id_notification(state, assoc_id);

  // Simulate UECapabilityInfoIndication
  uint8_t ue_cap_bytes[] = {
      0x00, 0x16, 0x40, 0x53, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x4a, 0x40,
      0x40, 0x3f, 0x01, 0xe8, 0x01, 0x03, 0xac, 0x59, 0x80, 0x07, 0x00,
      0x08, 0x20, 0x81, 0x83, 0x9b, 0x4e, 0x1c, 0x3f, 0xf8, 0x7f, 0xf0,
      0xff, 0xe1, 0xff, 0xc3, 0xff, 0x87, 0xff, 0x0f, 0xfe, 0x1f, 0xfd,
      0xf8, 0x37, 0x62, 0x78, 0x00, 0xa0, 0x18, 0x5f, 0x80, 0x00, 0x00,
      0x00, 0x1c, 0x07, 0xe0, 0xdd, 0x89, 0xe0, 0x00, 0x00, 0x00, 0x07,
      0x09, 0xf8, 0x37, 0x62, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00};

  ASSERT_EQ(simulate_pdu_s1_message(ue_cap_bytes, sizeof(ue_cap_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  // Generate downlink nas transport with dummy payload
  bstring p;
  std::string test_str = "test";
  STRING_TO_BSTRING(test_str, p);
  s1ap_generate_downlink_nas_transport(state, 1, 7, &p, 1, &is_state_same);
  bdestroy_wrapper(&p);

  // Authentication response proc packet bytes
  uint8_t auth_bytes[] = {
      0x00, 0x0d, 0x40, 0x3d, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1a, 0x00,
      0x14, 0x13, 0x07, 0x53, 0x10, 0x1e, 0x63, 0x7e, 0x5c, 0x58, 0xec,
      0x5a, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x64, 0x40, 0x08, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x00, 0x00, 0xa0,
      0x00, 0x43, 0x40, 0x06, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x01};

  ASSERT_EQ(simulate_pdu_s1_message(auth_bytes, sizeof(auth_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  // Simulate InitialContextSetup
  uint8_t ics_bytes[] = {0x20, 0x09, 0x00, 0x22, 0x00, 0x00, 0x03, 0x00,
                         0x00, 0x40, 0x02, 0x00, 0x07, 0x00, 0x08, 0x40,
                         0x02, 0x00, 0x01, 0x00, 0x33, 0x40, 0x0f, 0x00,
                         0x00, 0x32, 0x40, 0x0a, 0x0a, 0x1f, 0xc0, 0xa8,
                         0x3c, 0x8d, 0x0a, 0x00, 0x01, 0x28};

  ASSERT_EQ(simulate_pdu_s1_message(ics_bytes, sizeof(ics_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  ASSERT_TRUE(is_ue_state_valid(assoc_id, 1, oai::S1AP_UE_CONNECTED));

  // Simulate Attach Complete
  uint8_t attach_compl_bytes[] = {
      0x00, 0x0d, 0x40, 0x37, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00,
      0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1a, 0x00, 0x0e, 0x0d,
      0x27, 0xeb, 0x9e, 0x7f, 0x7e, 0x01, 0x07, 0x43, 0x00, 0x03, 0x52, 0x00,
      0xc2, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x00, 0x00,
      0x10, 0x00, 0x43, 0x40, 0x06, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x01};

  ASSERT_EQ(
      simulate_pdu_s1_message(attach_compl_bytes, sizeof(attach_compl_bytes),
                              state, assoc_id, stream_id),
      RETURNok);

  // Simulate Uplink NAS Transport Erab Setup Req
  uint8_t uplink_nas_bytes[] = {
      0x00, 0x0d, 0x40, 0x33, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1a, 0x00,
      0x0a, 0x09, 0x27, 0xca, 0x02, 0x76, 0x29, 0x02, 0x62, 0x00, 0xc6,
      0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x00, 0x00,
      0xa0, 0x00, 0x43, 0x40, 0x06, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x01};

  ASSERT_EQ(simulate_pdu_s1_message(uplink_nas_bytes, sizeof(uplink_nas_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  // Simulate Erab Setup Rsp
  uint8_t erab_setup_rsp_bytes[] = {
      0x20, 0x05, 0x00, 0x22, 0x00, 0x00, 0x03, 0x00, 0x00, 0x40,
      0x02, 0x00, 0x07, 0x00, 0x08, 0x40, 0x02, 0x00, 0x01, 0x00,
      0x1c, 0x40, 0x0f, 0x00, 0x00, 0x27, 0x40, 0x0a, 0x0c, 0x1f,
      0xc0, 0xa8, 0x3c, 0x8d, 0x0a, 0x00, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(erab_setup_rsp_bytes,
                                    sizeof(erab_setup_rsp_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);
}

TEST_F(S1apMmeHandlersTest, HandleErrorIndicationMessage) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  bool is_state_same = true;

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(2);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_s1ap_ue_context_release_req())
      .Times(1);
  EXPECT_CALL(*mme_app_handler, nas_proc_dl_transfer_rej()).Times(0);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_enb_reset_req()).Times(0);

  // Simulate S1Setup
  uint8_t s1_bytes[] = {0x00, 0x11, 0x00, 0x2f, 0x00, 0x00, 0x04, 0x00, 0x3b,
                        0x00, 0x09, 0x00, 0x00, 0xf1, 0x10, 0x40, 0x00, 0x00,
                        0x00, 0x10, 0x00, 0x3c, 0x40, 0x0b, 0x80, 0x09, 0x22,
                        0x52, 0x41, 0x44, 0x49, 0x53, 0x59, 0x53, 0x22, 0x00,
                        0x40, 0x00, 0x07, 0x00, 0x00, 0x00, 0x40, 0x00, 0xf1,
                        0x10, 0x00, 0x89, 0x40, 0x01, 0x00};

  ASSERT_EQ(simulate_pdu_s1_message(s1_bytes, sizeof(s1_bytes), state, assoc_id,
                                    stream_id),
            RETURNok);

  // Simulate InitialUEMessage - Attach Request
  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  handle_mme_ue_id_notification(state, assoc_id);

  // Simulate UECapabilityInfoIndication
  uint8_t ue_cap_bytes[] = {
      0x00, 0x16, 0x40, 0x53, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x4a, 0x40,
      0x40, 0x3f, 0x01, 0xe8, 0x01, 0x03, 0xac, 0x59, 0x80, 0x07, 0x00,
      0x08, 0x20, 0x81, 0x83, 0x9b, 0x4e, 0x1c, 0x3f, 0xf8, 0x7f, 0xf0,
      0xff, 0xe1, 0xff, 0xc3, 0xff, 0x87, 0xff, 0x0f, 0xfe, 0x1f, 0xfd,
      0xf8, 0x37, 0x62, 0x78, 0x00, 0xa0, 0x18, 0x5f, 0x80, 0x00, 0x00,
      0x00, 0x1c, 0x07, 0xe0, 0xdd, 0x89, 0xe0, 0x00, 0x00, 0x00, 0x07,
      0x09, 0xf8, 0x37, 0x62, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00};

  ASSERT_EQ(simulate_pdu_s1_message(ue_cap_bytes, sizeof(ue_cap_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  // Generate downlink nas transport with dummy payload
  bstring p;
  std::string test_str = "test";
  STRING_TO_BSTRING(test_str, p);
  s1ap_generate_downlink_nas_transport(state, 1, 7, &p, 1, &is_state_same);
  bdestroy_wrapper(&p);

  // Authentication response proc packet bytes
  uint8_t auth_bytes[] = {
      0x00, 0x0d, 0x40, 0x3d, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1a, 0x00,
      0x14, 0x13, 0x07, 0x53, 0x10, 0x1e, 0x63, 0x7e, 0x5c, 0x58, 0xec,
      0x5a, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x64, 0x40, 0x08, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x00, 0x00, 0xa0,
      0x00, 0x43, 0x40, 0x06, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x01};

  ASSERT_EQ(simulate_pdu_s1_message(auth_bytes, sizeof(auth_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  // Simulate InitialContextSetup
  uint8_t ics_bytes[] = {0x20, 0x09, 0x00, 0x22, 0x00, 0x00, 0x03, 0x00,
                         0x00, 0x40, 0x02, 0x00, 0x07, 0x00, 0x08, 0x40,
                         0x02, 0x00, 0x01, 0x00, 0x33, 0x40, 0x0f, 0x00,
                         0x00, 0x32, 0x40, 0x0a, 0x0a, 0x1f, 0xc0, 0xa8,
                         0x3c, 0x8d, 0x0a, 0x00, 0x01, 0x28};

  ASSERT_EQ(simulate_pdu_s1_message(ics_bytes, sizeof(ics_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  ASSERT_TRUE(is_ue_state_valid(assoc_id, 1, oai::S1AP_UE_CONNECTED));

  // Simulate Attach Complete
  uint8_t attach_compl_bytes[] = {
      0x00, 0x0d, 0x40, 0x37, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00,
      0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1a, 0x00, 0x0e, 0x0d,
      0x27, 0xeb, 0x9e, 0x7f, 0x7e, 0x01, 0x07, 0x43, 0x00, 0x03, 0x52, 0x00,
      0xc2, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x00, 0x00,
      0x10, 0x00, 0x43, 0x40, 0x06, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x01};

  ASSERT_EQ(
      simulate_pdu_s1_message(attach_compl_bytes, sizeof(attach_compl_bytes),
                              state, assoc_id, stream_id),
      RETURNok);

  // Simulate Uplink NAS Transport
  uint8_t uplink_nas_bytes[] = {
      0x00, 0x0d, 0x40, 0x33, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1a, 0x00,
      0x0a, 0x09, 0x27, 0xca, 0x02, 0x76, 0x29, 0x02, 0x62, 0x00, 0xc6,
      0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x00, 0x00,
      0xa0, 0x00, 0x43, 0x40, 0x06, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x01};

  ASSERT_EQ(simulate_pdu_s1_message(uplink_nas_bytes, sizeof(uplink_nas_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  // Simulate Error Ind Message
  uint8_t error_ind_bytes[] = {0x00, 0x0f, 0x40, 0x15, 0x00, 0x00, 0x03,
                               0x00, 0x00, 0x40, 0x02, 0x00, 0x07, 0x00,
                               0x08, 0x40, 0x02, 0x00, 0x01, 0x00, 0x02,
                               0x40, 0x02, 0x01, 0xe0};

  ASSERT_EQ(simulate_pdu_s1_message(error_ind_bytes, sizeof(error_ind_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);
}

TEST_F(S1apMmeHandlersTest, HandleEnbResetPartial) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  bool is_state_same = true;

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(2);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_s1ap_ue_context_release_req())
      .Times(0);
  EXPECT_CALL(*mme_app_handler, nas_proc_dl_transfer_rej()).Times(0);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_enb_reset_req()).Times(1);

  // Simulate S1Setup
  uint8_t s1_bytes[] = {0x00, 0x11, 0x00, 0x2f, 0x00, 0x00, 0x04, 0x00, 0x3b,
                        0x00, 0x09, 0x00, 0x00, 0xf1, 0x10, 0x40, 0x00, 0x00,
                        0x00, 0x10, 0x00, 0x3c, 0x40, 0x0b, 0x80, 0x09, 0x22,
                        0x52, 0x41, 0x44, 0x49, 0x53, 0x59, 0x53, 0x22, 0x00,
                        0x40, 0x00, 0x07, 0x00, 0x00, 0x00, 0x40, 0x00, 0xf1,
                        0x10, 0x00, 0x89, 0x40, 0x01, 0x00};

  ASSERT_EQ(simulate_pdu_s1_message(s1_bytes, sizeof(s1_bytes), state, assoc_id,
                                    stream_id),
            RETURNok);

  // Simulate InitialUEMessage - Attach Request
  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  handle_mme_ue_id_notification(state, assoc_id);

  // Simulate UECapabilityInfoIndication
  uint8_t ue_cap_bytes[] = {
      0x00, 0x16, 0x40, 0x53, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x4a, 0x40,
      0x40, 0x3f, 0x01, 0xe8, 0x01, 0x03, 0xac, 0x59, 0x80, 0x07, 0x00,
      0x08, 0x20, 0x81, 0x83, 0x9b, 0x4e, 0x1c, 0x3f, 0xf8, 0x7f, 0xf0,
      0xff, 0xe1, 0xff, 0xc3, 0xff, 0x87, 0xff, 0x0f, 0xfe, 0x1f, 0xfd,
      0xf8, 0x37, 0x62, 0x78, 0x00, 0xa0, 0x18, 0x5f, 0x80, 0x00, 0x00,
      0x00, 0x1c, 0x07, 0xe0, 0xdd, 0x89, 0xe0, 0x00, 0x00, 0x00, 0x07,
      0x09, 0xf8, 0x37, 0x62, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00};

  ASSERT_EQ(simulate_pdu_s1_message(ue_cap_bytes, sizeof(ue_cap_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  // Generate downlink nas transport with dummy payload
  bstring p;
  std::string test_str = "test";
  STRING_TO_BSTRING(test_str, p);
  s1ap_generate_downlink_nas_transport(state, 1, 7, &p, 1, &is_state_same);
  bdestroy_wrapper(&p);

  // Authentication response proc packet bytes
  uint8_t auth_bytes[] = {
      0x00, 0x0d, 0x40, 0x3d, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1a, 0x00,
      0x14, 0x13, 0x07, 0x53, 0x10, 0x1e, 0x63, 0x7e, 0x5c, 0x58, 0xec,
      0x5a, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x64, 0x40, 0x08, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x00, 0x00, 0xa0,
      0x00, 0x43, 0x40, 0x06, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x01};

  ASSERT_EQ(simulate_pdu_s1_message(auth_bytes, sizeof(auth_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  // Simulate InitialContextSetup
  uint8_t ics_bytes[] = {0x20, 0x09, 0x00, 0x22, 0x00, 0x00, 0x03, 0x00,
                         0x00, 0x40, 0x02, 0x00, 0x07, 0x00, 0x08, 0x40,
                         0x02, 0x00, 0x01, 0x00, 0x33, 0x40, 0x0f, 0x00,
                         0x00, 0x32, 0x40, 0x0a, 0x0a, 0x1f, 0xc0, 0xa8,
                         0x3c, 0x8d, 0x0a, 0x00, 0x01, 0x28};

  ASSERT_EQ(simulate_pdu_s1_message(ics_bytes, sizeof(ics_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  ASSERT_TRUE(is_ue_state_valid(assoc_id, 1, oai::S1AP_UE_CONNECTED));

  // Simulate Attach Complete
  uint8_t attach_compl_bytes[] = {
      0x00, 0x0d, 0x40, 0x37, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00,
      0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1a, 0x00, 0x0e, 0x0d,
      0x27, 0xeb, 0x9e, 0x7f, 0x7e, 0x01, 0x07, 0x43, 0x00, 0x03, 0x52, 0x00,
      0xc2, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x00, 0x00,
      0x10, 0x00, 0x43, 0x40, 0x06, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x01};

  ASSERT_EQ(
      simulate_pdu_s1_message(attach_compl_bytes, sizeof(attach_compl_bytes),
                              state, assoc_id, stream_id),
      RETURNok);

  // Simulate ENB Reset
  uint8_t enb_reset[] = {0x00, 0x0e, 0x00, 0x16, 0x00, 0x00, 0x02, 0x00, 0x02,
                         0x40, 0x01, 0x43, 0x00, 0x5c, 0x00, 0x0a, 0x40, 0x00,
                         0x00, 0x5b, 0x00, 0x04, 0x60, 0x07, 0x00, 0x01};

  ASSERT_EQ(simulate_pdu_s1_message(enb_reset, sizeof(enb_reset), state,
                                    assoc_id, stream_id),
            RETURNok);
}

TEST_F(S1apMmeHandlersTest, HandleS1apPagingRequest) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_INIT, 0));

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_s1ap_ue_context_release_req())
      .Times(0);
  EXPECT_CALL(*mme_app_handler, nas_proc_dl_transfer_rej()).Times(0);

  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  ASSERT_EQ(RETURNok, generate_s1_setup_request_pdu(&pdu_s1));
  ASSERT_EQ(RETURNok,
            s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1));

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 0));

  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  bstring payload;
  payload = blk2bstr(&initial_ue_bytes, sizeof(initial_ue_bytes));
  S1ap_S1AP_PDU_t pdu;
  memset(&pdu, 0, sizeof(pdu));

  ASSERT_EQ(RETURNok, s1ap_mme_decode_pdu(&pdu, payload));
  ASSERT_EQ(RETURNok,
            s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu));

  handle_mme_ue_id_notification(state, assoc_id);

  // State validation
  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 1));
  ASSERT_TRUE(is_num_enbs_valid(state, 1));
  ASSERT_EQ(state->mmeid2associd_size(), 1);

  // Send S1AP_PAGING_REQUEST mimicing MME_APP
  ASSERT_EQ(send_s1ap_paging_request(assoc_id), RETURNok);

  // Freeing pdu and payload data
  bdestroy_wrapper(&payload);
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu);
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);
}

TEST_F(S1apMmeHandlersTest, HandleS1apErabModificationCnf) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_INIT, 0));

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(2);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_s1ap_ue_context_release_req())
      .Times(0);
  EXPECT_CALL(*mme_app_handler, nas_proc_dl_transfer_rej()).Times(0);

  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  ASSERT_EQ(RETURNok, generate_s1_setup_request_pdu(&pdu_s1));
  ASSERT_EQ(RETURNok,
            s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1));

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 0));

  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  handle_mme_ue_id_notification(state, assoc_id);

  // State validation
  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 1));
  ASSERT_TRUE(is_num_enbs_valid(state, 1));
  ASSERT_EQ(state->mmeid2associd_size(), 1);

  // Send S1AP_E_RAB_MODIFICATION_CNF mimicing MME_APP
  ASSERT_EQ(send_s1ap_erab_mod_confirm(1, 7), RETURNok);

  // Freeing pdu and payload data
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);
}

TEST_F(S1apMmeHandlersTest, HandlePathSwitchRequestSuccess) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  bool is_state_same = true;

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_INIT, 0));

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(5);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_path_switch_request()).Times(1);

  sctp_assoc_id_t switch_assoc_id = 2;
  setup_new_association(state, switch_assoc_id);

  // Simulate first S1Setup
  uint8_t s1_bytes[] = {0x00, 0x11, 0x00, 0x2f, 0x00, 0x00, 0x04, 0x00, 0x3b,
                        0x00, 0x09, 0x00, 0x00, 0xf1, 0x10, 0x40, 0x00, 0x00,
                        0x00, 0x10, 0x00, 0x3c, 0x40, 0x0b, 0x80, 0x09, 0x22,
                        0x52, 0x41, 0x44, 0x49, 0x53, 0x59, 0x53, 0x22, 0x00,
                        0x40, 0x00, 0x07, 0x00, 0x00, 0x00, 0x40, 0x00, 0xf1,
                        0x10, 0x00, 0x89, 0x40, 0x01, 0x00};

  ASSERT_EQ(simulate_pdu_s1_message(s1_bytes, sizeof(s1_bytes), state, assoc_id,
                                    stream_id),
            RETURNok);

  // Simulate second S1Setup
  uint8_t s1_bytes_2[] = {0x00, 0x11, 0x00, 0x2f, 0x00, 0x00, 0x04, 0x00, 0x3b,
                          0x00, 0x09, 0x00, 0x00, 0xf1, 0x10, 0x40, 0x00, 0x00,
                          0x00, 0x20, 0x00, 0x3c, 0x40, 0x0b, 0x80, 0x09, 0x22,
                          0x52, 0x41, 0x44, 0x49, 0x53, 0x59, 0x53, 0x22, 0x00,
                          0x40, 0x00, 0x07, 0x00, 0x00, 0x00, 0x40, 0x00, 0xf1,
                          0x10, 0x00, 0x89, 0x40, 0x01, 0x00};
  ASSERT_EQ(simulate_pdu_s1_message(s1_bytes_2, sizeof(s1_bytes_2), state,
                                    switch_assoc_id, stream_id),
            RETURNok);

  // Simulate InitialUEMessage - Attach Request
  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  handle_mme_ue_id_notification(state, assoc_id);

  // Simulate UECapabilityInfoIndication
  uint8_t ue_cap_bytes[] = {
      0x00, 0x16, 0x40, 0x53, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x4a, 0x40,
      0x40, 0x3f, 0x01, 0xe8, 0x01, 0x03, 0xac, 0x59, 0x80, 0x07, 0x00,
      0x08, 0x20, 0x81, 0x83, 0x9b, 0x4e, 0x1c, 0x3f, 0xf8, 0x7f, 0xf0,
      0xff, 0xe1, 0xff, 0xc3, 0xff, 0x87, 0xff, 0x0f, 0xfe, 0x1f, 0xfd,
      0xf8, 0x37, 0x62, 0x78, 0x00, 0xa0, 0x18, 0x5f, 0x80, 0x00, 0x00,
      0x00, 0x1c, 0x07, 0xe0, 0xdd, 0x89, 0xe0, 0x00, 0x00, 0x00, 0x07,
      0x09, 0xf8, 0x37, 0x62, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00};

  ASSERT_EQ(simulate_pdu_s1_message(ue_cap_bytes, sizeof(ue_cap_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  // Generate downlink nas transport (mocking S1AP_NAS_DL_DATA_REQ message to
  // move UE to S1AP_UE_CONNECTED)
  bstring p;
  std::string test_str = "test";
  STRING_TO_BSTRING(test_str, p);
  s1ap_generate_downlink_nas_transport(state, 1, 7, &p, 1, &is_state_same);
  bdestroy_wrapper(&p);

  // Authentication response proc packet bytes
  uint8_t auth_bytes[] = {
      0x00, 0x0d, 0x40, 0x3d, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1a, 0x00,
      0x14, 0x13, 0x07, 0x53, 0x10, 0x1e, 0x63, 0x7e, 0x5c, 0x58, 0xec,
      0x5a, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x64, 0x40, 0x08, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x00, 0x00, 0xa0,
      0x00, 0x43, 0x40, 0x06, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x01};

  ASSERT_EQ(simulate_pdu_s1_message(auth_bytes, sizeof(auth_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  // Simulate InitialContextSetup
  uint8_t ics_bytes[] = {0x20, 0x09, 0x00, 0x22, 0x00, 0x00, 0x03, 0x00,
                         0x00, 0x40, 0x02, 0x00, 0x07, 0x00, 0x08, 0x40,
                         0x02, 0x00, 0x01, 0x00, 0x33, 0x40, 0x0f, 0x00,
                         0x00, 0x32, 0x40, 0x0a, 0x0a, 0x1f, 0xc0, 0xa8,
                         0x3c, 0x8d, 0x0a, 0x00, 0x01, 0x28};

  ASSERT_EQ(simulate_pdu_s1_message(ics_bytes, sizeof(ics_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  // State validation
  ASSERT_TRUE(is_ue_state_valid(assoc_id, 1, oai::S1AP_UE_CONNECTED));
  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 1));

  // Simulate Attach Complete
  uint8_t attach_compl_bytes[] = {
      0x00, 0x0d, 0x40, 0x37, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00,
      0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1a, 0x00, 0x0e, 0x0d,
      0x27, 0xeb, 0x9e, 0x7f, 0x7e, 0x01, 0x07, 0x43, 0x00, 0x03, 0x52, 0x00,
      0xc2, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x00, 0x00,
      0x10, 0x00, 0x43, 0x40, 0x06, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x01};

  ASSERT_EQ(
      simulate_pdu_s1_message(attach_compl_bytes, sizeof(attach_compl_bytes),
                              state, assoc_id, stream_id),
      RETURNok);

  // Simulate ENBConfigurationTransfer PDU payload
  uint8_t enb_transfer_bytes[] = {
      0x00, 0x28, 0x40, 0x30, 0x00, 0x00, 0x01, 0x00, 0x81, 0x00, 0x29,
      0x40, 0x00, 0xf1, 0x10, 0x40, 0x00, 0x00, 0x00, 0x20, 0x00, 0xf1,
      0x10, 0x00, 0x02, 0x00, 0x00, 0xf1, 0x10, 0x40, 0x00, 0x00, 0x00,
      0x10, 0x00, 0xf1, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x98,
      0x40, 0x06, 0x01, 0xf0, 0xc0, 0xa8, 0x3c, 0x8d};

  ASSERT_EQ(
      simulate_pdu_s1_message(enb_transfer_bytes, sizeof(enb_transfer_bytes),
                              state, assoc_id, stream_id),
      RETURNok);

  // Simulate second ENBConfigurationTransfer PDU payload
  uint8_t enb_transfer_bytes_2[] = {
      0x00, 0x28, 0x40, 0x2a, 0x00, 0x00, 0x01, 0x00, 0x81, 0x00, 0x23, 0x00,
      0x00, 0xf1, 0x10, 0x40, 0x00, 0x00, 0x00, 0x20, 0x00, 0xf1, 0x10, 0x00,
      0x01, 0x00, 0x00, 0xf1, 0x10, 0x40, 0x00, 0x00, 0x00, 0x10, 0x00, 0xf1,
      0x10, 0x00, 0x02, 0x50, 0x0f, 0x80, 0xc0, 0xa8, 0x3c, 0x8d};

  ASSERT_EQ(simulate_pdu_s1_message(enb_transfer_bytes_2,
                                    sizeof(enb_transfer_bytes_2), state,
                                    switch_assoc_id, stream_id),
            RETURNok);

  // Simulate PathSwitchRequest PDU payload
  uint8_t path_switch_bytes[] = {
      0x00, 0x03, 0x00, 0x41, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x02, 0x00,
      0x02, 0x00, 0x16, 0x00, 0x0f, 0x00, 0x00, 0x17, 0x00, 0x0a, 0x0a, 0x1f,
      0xc0, 0xa8, 0x3c, 0x8d, 0x0a, 0x00, 0x01, 0x29, 0x00, 0x58, 0x00, 0x02,
      0x00, 0x07, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x00,
      0x00, 0x20, 0x00, 0x43, 0x40, 0x06, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x02,
      0x00, 0x6b, 0x40, 0x05, 0x18, 0x00, 0x0c, 0x00, 0x00};

  ASSERT_EQ(
      simulate_pdu_s1_message(path_switch_bytes, sizeof(path_switch_bytes),
                              state, switch_assoc_id, stream_id),
      RETURNok);

  // Confirm UE state update (assoc_id, enb_ue_s1ap_id)
  ASSERT_TRUE(is_ue_state_valid(switch_assoc_id, 2, oai::S1AP_UE_CONNECTED));

  // Simulate Detach request PDU payload
  uint8_t detach_req_bytes[] = {
      0x00, 0x0d, 0x40, 0x3f, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00,
      0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x02, 0x00, 0x1a, 0x00, 0x16, 0x15,
      0x27, 0x9e, 0xe4, 0xc3, 0xbf, 0x02, 0x07, 0x45, 0x09, 0x0b, 0xf6, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x01, 0x4e, 0x36, 0x15, 0x3b, 0x00, 0x64, 0x40,
      0x08, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x00, 0x00, 0x20, 0x00, 0x43, 0x40,
      0x06, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x02};

  ASSERT_EQ(simulate_pdu_s1_message(detach_req_bytes, sizeof(detach_req_bytes),
                                    state, switch_assoc_id, stream_id),
            RETURNok);
}

TEST_F(S1apMmeHandlersTest, HandleS1apNasNonDelivery) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_s1ap_ue_context_release_req())
      .Times(0);
  EXPECT_CALL(*mme_app_handler, nas_proc_dl_transfer_rej()).Times(1);

  bool is_state_same = false;

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_INIT, 0));

  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  ASSERT_EQ(RETURNok, generate_s1_setup_request_pdu(&pdu_s1));
  ASSERT_EQ(RETURNok,
            s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1));

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 0));

  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  handle_mme_ue_id_notification(state, assoc_id);

  // Generate downlink nas transport with dummy payload
  bstring p;
  std::string test_str = "test";
  STRING_TO_BSTRING(test_str, p);
  s1ap_generate_downlink_nas_transport(state, 1, 7, &p, 1, &is_state_same);
  bdestroy_wrapper(&p);

  // Authentication response proc packet bytes
  uint8_t auth_bytes[] = {
      0x00, 0x0d, 0x40, 0x3d, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1a, 0x00,
      0x14, 0x13, 0x07, 0x53, 0x10, 0x1e, 0x63, 0x7e, 0x5c, 0x58, 0xec,
      0x5a, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x64, 0x40, 0x08, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x00, 0x00, 0xa0,
      0x00, 0x43, 0x40, 0x06, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x01};

  ASSERT_EQ(simulate_pdu_s1_message(auth_bytes, sizeof(auth_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  uint8_t ics_bytes[] = {0x20, 0x09, 0x00, 0x22, 0x00, 0x00, 0x03, 0x00,
                         0x00, 0x40, 0x02, 0x00, 0x07, 0x00, 0x08, 0x40,
                         0x02, 0x00, 0x01, 0x00, 0x33, 0x40, 0x0f, 0x00,
                         0x00, 0x32, 0x40, 0x0a, 0x0a, 0x1f, 0xc0, 0xa8,
                         0x3c, 0x8d, 0x0a, 0x00, 0x01, 0x28};

  ASSERT_EQ(simulate_pdu_s1_message(ics_bytes, sizeof(ics_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  // Send NAS Non Delivery payload message
  uint8_t nas_non_delivery_bytes[] = {
      0x00, 0x10, 0x40, 0x28, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1a, 0x00,
      0x0f, 0x0e, 0x37, 0x2c, 0x71, 0xdc, 0xfa, 0x00, 0x07, 0x5d, 0x02,
      0x00, 0x02, 0xe0, 0xe0, 0xc1, 0x00, 0x02, 0x40, 0x02, 0x00, 0x60};

  ASSERT_EQ(simulate_pdu_s1_message(nas_non_delivery_bytes,
                                    sizeof(nas_non_delivery_bytes), state,
                                    assoc_id, 1),
            RETURNok);

  // State validation
  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 1));
  ASSERT_TRUE(is_num_enbs_valid(state, 1));
  ASSERT_EQ(state->mmeid2associd_size(), 1);

  // Freeing pdu and payload data
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);
}

TEST_F(S1apMmeHandlersTest, HandleBigNasPackets) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(1);

  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  ASSERT_EQ(RETURNok, generate_s1_setup_request_pdu(&pdu_s1));
  ASSERT_EQ(RETURNok,
            s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1));

  // State validation
  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 0));
  ASSERT_TRUE(is_num_enbs_valid(state, 1));

  uint8_t initial_ue_bytes[] = {
      0x0,  0xc,  0x40, 0x84, 0x46, 0x0,  0x0,  0xa,  0x0,  0xf2, 0x40, 0x1,
      0x0,  0x0,  0x64, 0x40, 0x8,  0x0,  0x0,  0xb8, 0x40, 0x84, 0xc6, 0x54,
      0x20, 0x0,  0x1a, 0x40, 0x83, 0xfb, 0x83, 0xf9, 0x7,  0x61, 0x43, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x80, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
      0x83, 0x83, 0x83, 0x83, 0x83, 0x0,  0xf2, 0x40, 0x1,  0x0,  0x0,  0x4b,
      0x40, 0x7,  0x0,  0x40, 0x21, 0x0,  0x92, 0x1e, 0x0,  0x0,  0x8,  0x40,
      0x4,  0x80, 0xff, 0xf0, 0x7f, 0x0,  0x43, 0x40, 0x6,  0x0,  0x6d, 0x33,
      0x87, 0x5b, 0xc2, 0x0,  0x86, 0x40, 0x1,  0x30, 0x0,  0x9b, 0x40, 0x2,
      0x0,  0x40, 0x1,  0x19, 0x40, 0x1,  0x0};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNerror);

  // Send SCTP_CLOSE_ASSOCIATION mimicing SCTP task
  ASSERT_EQ(send_s1ap_close_sctp_association(assoc_id), RETURNok);

  // Freeing pdu and payload data
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);
}

TEST_F(S1apMmeHandlersTest, MalformedInitialUEMissingENBUES1APID) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(1);

  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  ASSERT_EQ(RETURNok, generate_s1_setup_request_pdu(&pdu_s1));
  ASSERT_EQ(RETURNok,
            s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1));

  // State validation
  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 0));
  ASSERT_TRUE(is_num_enbs_valid(state, 1));

  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x03, 0x0e, 0x00, 0x00, 0x00, 0x54, 0x40, 0x19, 0xa2,
      0xba, 0x8b, 0x00, 0x5f, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x02, 0x00,
      0x01, 0x00, 0x1a, 0x00, 0x2d, 0x2c, 0x17, 0x6b, 0xf1, 0x10, 0x00, 0x19,
      0xb0, 0x10, 0x00, 0x86, 0x40, 0x01, 0x40, 0x00, 0x60, 0xbf, 0x4b, 0x51,
      0x01, 0x07, 0x41, 0x01, 0x0b, 0xf6, 0x00, 0xf1, 0x10, 0x00, 0x02, 0x01,
      0xf2, 0x00, 0x46, 0x53, 0x07, 0xe0, 0x01, 0x0c, 0x40, 0x01, 0x00, 0x00,
      0x00, 0x40, 0x05, 0x01, 0xd0, 0x11, 0xd1, 0x91, 0xe0, 0x6f, 0x04, 0xe0,
      0xf2, 0x60, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00, 0xf1, 0x10, 0x00,
      0x07, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x19, 0xb0,
      0x10, 0x00, 0x86, 0x02, 0x01, 0xd0, 0x11, 0xd1, 0x91, 0xe0, 0x6f, 0x04,
      0xe0, 0x00, 0x06, 0x00, 0x40, 0xf2, 0x00, 0x46, 0x53};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNerror);

  // Send SCTP_CLOSE_ASSOCIATION mimicing SCTP task
  ASSERT_EQ(send_s1ap_close_sctp_association(assoc_id), RETURNok);

  // Freeing pdu and payload data
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);
}

TEST_F(S1apMmeHandlersTest, ResetTypeS1apProtocolIEIDMissing) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(1);

  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  ASSERT_EQ(RETURNok, generate_s1_setup_request_pdu(&pdu_s1));
  ASSERT_EQ(RETURNok,
            s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1));

  // State validation
  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 0));
  ASSERT_TRUE(is_num_enbs_valid(state, 1));

  uint8_t initial_ue_bytes[] = {
      0x00, 0x0e, 0x40, 0x05, 0xc0, 0x00, 0x00, 0x0a, 0x00, 0x3b, 0x40, 0x01,
      0x24, 0x00, 0x5c, 0x40, 0x01, 0x00, 0x00, 0xea, 0x40, 0x5c, 0x40, 0x5f,
      0x40, 0x08, 0x5f, 0x40, 0x09, 0x00, 0x5b, 0x40, 0x09, 0x6c, 0x4f, 0x8f,
      0xcd, 0xa5, 0x80, 0x1b, 0x77, 0xa0, 0x7f, 0x5b, 0x40, 0x01, 0x00, 0x00,
      0x5b, 0x40, 0x05, 0x4c, 0x7e, 0x91, 0x2f, 0x69, 0x00, 0x5b, 0x40, 0x09,
      0x6c, 0x76, 0x0e, 0x40, 0x05, 0xc0, 0x00, 0x00, 0x0a, 0x00, 0x3b, 0x40,
      0x01, 0x24, 0x00, 0x5c, 0x6b, 0x75, 0x2c, 0x80, 0xdc, 0x00, 0x80, 0xf5,
      0x5b, 0x40, 0x09, 0x6c, 0x62, 0x65, 0x31, 0x1b, 0x80, 0xbb, 0x57, 0x7a,
      0x00, 0x5b, 0x59, 0x05, 0x4c, 0x0f, 0xc6, 0x9f, 0x08, 0x00, 0x5b, 0x37,
      0x05, 0x35, 0xff, 0x4f, 0x59, 0x17, 0x00, 0x5b, 0x40, 0x04, 0x28, 0x38,
      0x34, 0xf7, 0x00, 0x02, 0x03, 0x40, 0x00, 0x02, 0x40, 0x01, 0x20, 0x00,
      0x02, 0x40, 0x02, 0x01, 0x00, 0x00, 0x02, 0x40, 0x02, 0x00, 0x80};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNerror);

  // Send SCTP_CLOSE_ASSOCIATION mimicing SCTP task
  ASSERT_EQ(send_s1ap_close_sctp_association(assoc_id), RETURNok);

  // Freeing pdu and payload data
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);
}

TEST_F(S1apMmeHandlersTest, MalformedSONConfigurationTransferIE) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(1);

  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  ASSERT_EQ(RETURNok, generate_s1_setup_request_pdu(&pdu_s1));
  ASSERT_EQ(RETURNok,
            s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1));

  // State validation
  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 0));
  ASSERT_TRUE(is_num_enbs_valid(state, 1));

  uint8_t initial_ue_bytes[] = {
      0x00, 0x28, 0x40, 0x03, 0x0e, 0x00, 0x00, 0x00, 0x54, 0x40,
      0x7f, 0x50, 0x10, 0x00, 0x9c, 0x40, 0x14, 0x0c, 0x00, 0x93,
      0xff, 0xff, 0x01, 0x72, 0x00, 0x94, 0xbf, 0x0b, 0x40, 0x02,
      0x01, 0x00, 0x00, 0x00, 0x7f, 0xb4, 0x40, 0x40, 0x40,
  };

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNerror);

  // Send SCTP_CLOSE_ASSOCIATION mimicing SCTP task
  ASSERT_EQ(send_s1ap_close_sctp_association(assoc_id), RETURNok);

  // Freeing pdu and payload data
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);
}

TEST_F(S1apMmeHandlersTest, MissingRRCEstablishmentCauseIE) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(1);

  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  ASSERT_EQ(RETURNok, generate_s1_setup_request_pdu(&pdu_s1));
  ASSERT_EQ(RETURNok,
            s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1));

  // State validation
  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 0));
  ASSERT_TRUE(is_num_enbs_valid(state, 1));

  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x5f, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x2d, 0x2c, 0x17, 0x6b, 0xbf, 0x4b,
      0x51, 0x17, 0x07, 0x41, 0xfa, 0x00, 0x00, 0xfa, 0xf1, 0x10, 0x00,
      0x02, 0x01, 0x60, 0x00, 0x46, 0x53, 0x07, 0xe0, 0xf2, 0x00, 0x00,
      0x00, 0x00, 0x10, 0x00, 0x05, 0x02, 0x01, 0xd0, 0x11, 0xd1, 0x91,
      0xe0, 0x6f, 0x04, 0xe0, 0x00, 0x60, 0x00, 0x00, 0x43, 0x00, 0x06,
      0x00, 0x00, 0xf1, 0x10, 0x03, 0x07, 0x00, 0x64, 0x40, 0x08, 0x00,
      0x00, 0xf1, 0x10, 0x00, 0x19, 0xb0, 0x10, 0x00, 0x91, 0x40, 0x01,
      0x40, 0x00, 0x60, 0x00, 0x06, 0x00, 0x40, 0xf2, 0x00, 0x46, 0x53};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNerror);

  // Send SCTP_CLOSE_ASSOCIATION mimicing SCTP task
  ASSERT_EQ(send_s1ap_close_sctp_association(assoc_id), RETURNok);

  // Freeing pdu and payload data
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);
}

TEST_F(S1apMmeHandlersTest, CheckEUTRANCGIPLMNSize) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(1);
  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  ASSERT_EQ(RETURNok, generate_s1_setup_request_pdu(&pdu_s1));
  ASSERT_EQ(RETURNok,
            s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1));

  // State validation
  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 0));
  ASSERT_TRUE(is_num_enbs_valid(state, 1));

  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x3e, 0x00, 0x00, 0x0a, 0x00, 0x43, 0x40, 0x06,
      0x00, 0x9e, 0xca, 0x07, 0x9b, 0x40, 0x00, 0xf6, 0x40, 0x02, 0xbc,
      0x40, 0x00, 0xf2, 0x40, 0x01, 0x00, 0x00, 0xf2, 0x40, 0x01, 0x00,
      0x00, 0x08, 0x40, 0x04, 0x80, 0xa4, 0x00, 0x2d, 0x00, 0xf2, 0x40,
      0x01, 0x00, 0x00, 0x86, 0x40, 0x01, 0x00, 0x00, 0xe6, 0x40, 0x01,
      0x11, 0x00, 0x91, 0x40, 0x01, 0x00, 0x00, 0xf2, 0x40, 0x01, 0x00};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNerror);

  // Send SCTP_CLOSE_ASSOCIATION mimicing SCTP task
  ASSERT_EQ(send_s1ap_close_sctp_association(assoc_id), RETURNok);

  // Freeing pdu and payload data
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);
}

TEST_F(S1apMmeHandlersTest, MalformedS1SetupRequiredSupportedTAs) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(1);
  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  ASSERT_EQ(RETURNok, generate_s1_setup_request_pdu(&pdu_s1));
  ASSERT_EQ(RETURNok,
            s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1));

  // State validation
  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 0));
  ASSERT_TRUE(is_num_enbs_valid(state, 1));

  uint8_t initial_ue_bytes[] = {
      0x00, 0x11, 0x40, 0x80, 0xb4, 0x00, 0x00, 0x0a, 0x00, 0xea, 0x40, 0x01,
      0x20, 0x00, 0x89, 0x40, 0x01, 0x20, 0x00, 0x3b, 0x40, 0x08, 0x00, 0x12,
      0x7c, 0x80, 0x00, 0x2a, 0x00, 0x90, 0x00, 0x89, 0x40, 0x01, 0x40, 0x00,
      0x80, 0x40, 0x2a, 0x09, 0x00, 0x32, 0x92, 0xb4, 0xa0, 0xcb, 0xd5, 0xc7,
      0x00, 0x71, 0x3f, 0x92, 0xa0, 0xfc, 0x47, 0x0f, 0x00, 0xbf, 0x14, 0x4f,
      0xc0, 0x01, 0xcd, 0xc5, 0x80, 0x42, 0x8c, 0xdc, 0x80, 0x8c, 0x48, 0x6d,
      0xa0, 0x70, 0x8f, 0x02, 0x00, 0xe1, 0xf0, 0x82, 0x40, 0x00, 0x89, 0x40,
      0x01, 0x60, 0x00, 0xe4, 0x40, 0x01, 0x00, 0x00, 0x3c, 0x40, 0x27, 0x12,
      0x00, 0xf3, 0x9c, 0x91, 0xaa, 0xf3, 0x91, 0xa0, 0xa7, 0xf1, 0x9c, 0xbe,
      0x96, 0xf3, 0x88, 0xb0, 0x8c, 0xe1, 0x8e, 0xae, 0xc9, 0xbd, 0xf2, 0x8a,
      0xa8, 0x97, 0xf4, 0x8d, 0x9c, 0x89, 0xf1, 0xb9, 0xa2, 0xbc, 0xf3, 0xa4,
      0xaa, 0xb1, 0x00, 0xea, 0x40, 0x01, 0x00, 0x00, 0x80, 0x40, 0x2a, 0x09,
      0x00, 0xba, 0x78, 0xaa, 0x60, 0xbd, 0xfd, 0xf4, 0xa0, 0xdb, 0x74, 0xa3,
      0x20, 0x93, 0x3e, 0x88, 0xa0, 0xe5, 0x20, 0xec, 0x00, 0xed, 0x40, 0x78,
      0x20, 0x9f, 0xc7, 0x8f, 0x00, 0x11, 0x6c, 0x8f, 0xa0, 0x57, 0x06, 0x13,
      0xe0, 0x25, 0x69, 0xc1, 0x60};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNerror);

  // Send SCTP_CLOSE_ASSOCIATION mimicing SCTP task
  ASSERT_EQ(send_s1ap_close_sctp_association(assoc_id), RETURNok);

  // Freeing pdu and payload data
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);
}

TEST_F(S1apMmeHandlersTest, MalformedUplinkNasTransportENB_UE_S1AP_ID) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(1);
  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  ASSERT_EQ(RETURNok, generate_s1_setup_request_pdu(&pdu_s1));
  ASSERT_EQ(RETURNok,
            s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1));

  // State validation
  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 0));
  ASSERT_TRUE(is_num_enbs_valid(state, 1));

  uint8_t initial_ue_bytes[] = {
      0x00, 0x0d, 0x40, 0x05, 0xfa, 0x00, 0x00, 0xfa, 0x00, 0x08, 0x51, 0x00,
      0x34, 0x40, 0x06, 0x00, 0x88, 0x64, 0xc2, 0xaa, 0xda, 0x00, 0xb8, 0xbf,
      0x0c, 0x24, 0x00, 0x68, 0xab, 0x00, 0x44, 0x40, 0x21, 0x00, 0x92, 0xfc,
      0x56, 0xfd, 0xa6, 0x64, 0xc3, 0x0a, 0x10, 0x5a, 0xe7, 0xa6, 0x9a, 0xaa,
      0x9e, 0xed, 0x0f, 0xe8, 0x88, 0x7c, 0x8c, 0x67, 0xd4, 0xaa, 0xd8, 0x76,
      0x51, 0xca, 0x53, 0xda, 0xbd, 0x40, 0x04, 0x06, 0xf9, 0xe2, 0x9a, 0xf9,
      0x03, 0xff, 0xc8, 0x64, 0x00, 0x08, 0x40, 0x04, 0x80, 0x08, 0xbb, 0xd6,
      0x00, 0xba, 0xdb, 0xaf, 0xcf, 0xf1, 0x7f, 0x00, 0x00, 0x08, 0x40, 0x04,
      0x80, 0xfd, 0xc3, 0x43, 0x00, 0xb8, 0x40, 0x0b, 0x20, 0x80, 0xec, 0x58,
      0x99, 0xea, 0x82, 0x36, 0x2f, 0xcd, 0xc0, 0x01, 0x20, 0x40, 0x09, 0x00,
      0x9b, 0xb3, 0x6e, 0x07, 0xb6, 0x8e, 0x84, 0xd0};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNerror);

  // Send SCTP_CLOSE_ASSOCIATION mimicing SCTP task
  ASSERT_EQ(send_s1ap_close_sctp_association(assoc_id), RETURNok);

  // Freeing pdu and payload data
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);
}

TEST_F(S1apMmeHandlersTest, MalformedUplinkNasTransportMME_UE_S1AP_ID) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(1);
  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  ASSERT_EQ(RETURNok, generate_s1_setup_request_pdu(&pdu_s1));
  ASSERT_EQ(RETURNok,
            s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1));

  // State validation
  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, oai::S1AP_READY, 0));
  ASSERT_TRUE(is_num_enbs_valid(state, 1));

  uint8_t initial_ue_bytes[] = {
      0x00, 0x0d, 0x40, 0x80, 0x90, 0x00, 0x00, 0x0a, 0x00, 0x08, 0x40, 0x04,
      0x80, 0xd4, 0xf1, 0x74, 0x00, 0x08, 0x40, 0x05, 0xc0, 0x92, 0x8b, 0xbc,
      0x6f, 0x00, 0x9b, 0x40, 0x0d, 0x2b, 0x80, 0x85, 0x30, 0x9c, 0x9c, 0xe2,
      0x9a, 0xf9, 0x03, 0xff, 0xc8, 0x64, 0x00, 0x08, 0x40, 0x04, 0x80, 0x08,
      0xbb, 0xd6, 0x00, 0xba, 0x40, 0x21, 0x00, 0x92, 0xfc, 0x56, 0xfd, 0xa6,
      0x64, 0xc3, 0x0a, 0x90, 0x5a, 0xe7, 0xa6, 0x9a, 0xaa, 0x9e, 0xed, 0x0f,
      0xe8, 0x88, 0x7c, 0x8c, 0x67, 0xd4, 0xaa, 0xd8, 0x70, 0x51, 0xca, 0x53,
      0xda, 0xbd, 0x51, 0x00, 0x43, 0x40, 0x06, 0x00, 0x88, 0x77, 0xc2, 0xaa,
      0xda, 0x00, 0xb8, 0x40, 0x0c, 0x24, 0x00, 0x68, 0xab, 0x00, 0x44, 0xdb,
      0xaf, 0xcf, 0xf1, 0x7f, 0x00, 0x00, 0x08, 0x40, 0x04, 0x80, 0xfd, 0xc3,
      0x43, 0x00, 0xb8, 0x40, 0x0b, 0x20, 0x80, 0xec, 0x58, 0x99, 0xea, 0x82,
      0x36, 0x30, 0xcd, 0xc0, 0x01, 0x20, 0x40, 0x09, 0x00, 0x9b, 0xb3, 0x6e,
      0x07, 0xb6, 0x8e, 0x84, 0xd0};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNerror);

  // Send SCTP_CLOSE_ASSOCIATION mimicing SCTP task
  ASSERT_EQ(send_s1ap_close_sctp_association(assoc_id), RETURNok);

  // Freeing pdu and payload data
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);
}

}  // namespace lte
}  // namespace magma
