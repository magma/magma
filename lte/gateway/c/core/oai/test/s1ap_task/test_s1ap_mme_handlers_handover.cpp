/**
 * Copyright 2022 The Magma Authors.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <gtest/gtest.h>
#include <thread>

extern "C" {
#include "lte/gateway/c/core/common/dynamic_memory_check.h"
#include "lte/gateway/c/core/oai/common/log.h"
#include "lte/gateway/c/core/oai/include/mme_config.h"
#include "lte/gateway/c/core/oai/include/s1ap_state.h"
#include "lte/gateway/c/core/oai/lib/bstr/bstrlib.h"
#include "lte/gateway/c/core/oai/tasks/s1ap/s1ap_mme.h"
#include "lte/gateway/c/core/oai/tasks/s1ap/s1ap_mme_decoder.h"
#include "lte/gateway/c/core/oai/tasks/s1ap/s1ap_mme_handlers.h"
#include "lte/gateway/c/core/oai/tasks/s1ap/s1ap_mme_nas_procedures.h"
}

#include "lte/gateway/c/core/oai/tasks/s1ap/s1ap_state_manager.h"
#include "lte/gateway/c/core/oai/test/s1ap_task/s1ap_mme_test_utils.h"
#include "lte/gateway/c/core/oai/test/s1ap_task/s1ap_mme_handlers_test_fixture.h"

namespace magma {
namespace lte {

TEST_F(S1apMmeHandlersTest, HandleMmeHandoverRequest) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(2);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_s1ap_ue_context_release_req())
      .Times(0);
  EXPECT_CALL(*mme_app_handler, nas_proc_dl_transfer_rej()).Times(0);

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, S1AP_INIT, 0));

  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  ASSERT_EQ(RETURNok, generate_s1_setup_request_pdu(&pdu_s1));
  ASSERT_EQ(RETURNok,
            s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1));

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, S1AP_READY, 0));

  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  handle_mme_ue_id_notification(state, assoc_id);

  // Send MME_APP_HANDOVER_REQUEST mimicing MME_APP
  ASSERT_EQ(send_s1ap_mme_handover_request(assoc_id, 7, 10), RETURNok);

  // State validation
  ASSERT_TRUE(is_num_enbs_valid(state, 1));
  ASSERT_EQ(state->mmeid2associd.num_elements, 1);

  // Freeing pdu and payload data
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);
}

TEST_F(S1apMmeHandlersTest, HandleS1apHandoverCommand) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, S1AP_INIT, 0));

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(2);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_s1ap_ue_context_release_req())
      .Times(0);
  EXPECT_CALL(*mme_app_handler, nas_proc_dl_transfer_rej()).Times(0);

  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  ASSERT_EQ(RETURNok, generate_s1_setup_request_pdu(&pdu_s1));
  ASSERT_EQ(RETURNok,
            s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1));

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, S1AP_READY, 0));

  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  handle_mme_ue_id_notification(state, assoc_id);

  // Send S1AP_HANDOVER_COMMAND mimicing MME_APP
  ASSERT_EQ(send_s1ap_mme_handover_command(assoc_id, 7, 1, 2, 10, 11),
            RETURNok);

  // Freeing pdu and payload data
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);

  // Sleep to ensure that messages are received
  std::this_thread::sleep_for(std::chrono::milliseconds(200));

  // State validation
  ASSERT_TRUE(is_ue_state_valid(assoc_id, 1, S1AP_UE_HANDOVER));
}

TEST_F(S1apMmeHandlersTest, HandleMmeHandover) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);
  std::mutex mx;
  std::condition_variable cv;
  std::unique_lock<std::mutex> lock(mx);

  bool is_state_same = true;

  sctp_assoc_id_t target_assoc_id = 2;
  setup_new_association(state, target_assoc_id);

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(6);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_s1ap_ue_context_release_req())
      .Times(0);
  EXPECT_CALL(*mme_app_handler, nas_proc_dl_transfer_rej()).Times(0);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_handover_required()).Times(1);

  // Simulate first S1Setup
  uint8_t s1_bytes[] = {0x00, 0x11, 0x00, 0x2f, 0x00, 0x00, 0x04, 0x00, 0x3b,
                        0x00, 0x09, 0x00, 0x00, 0xf1, 0x10, 0x40, 0x00, 0x00,
                        0x00, 0x10, 0x00, 0x3c, 0x40, 0x0b, 0x80, 0x09, 0x22,
                        0x52, 0x41, 0x44, 0x49, 0x53, 0x59, 0x53, 0x22, 0x00,
                        0x40, 0x00, 0x07, 0x00, 0x00, 0x00, 0x40, 0x00, 0xf1,
                        0x10, 0x00, 0x89, 0x40, 0x01, 0x00};

  ASSERT_EQ(simulate_pdu_s1_message(s1_bytes, sizeof(s1_bytes), state, assoc_id,
                                    stream_id),
            RETURNok);

  // Simulate second S1Setup
  uint8_t s1_bytes_2[] = {0x00, 0x11, 0x00, 0x2f, 0x00, 0x00, 0x04, 0x00, 0x3b,
                          0x00, 0x09, 0x00, 0x00, 0xf1, 0x10, 0x40, 0x00, 0x00,
                          0x00, 0x20, 0x00, 0x3c, 0x40, 0x0b, 0x80, 0x09, 0x22,
                          0x52, 0x41, 0x44, 0x49, 0x53, 0x59, 0x53, 0x22, 0x00,
                          0x40, 0x00, 0x07, 0x00, 0x00, 0x00, 0x40, 0x00, 0xf1,
                          0x10, 0x00, 0x89, 0x40, 0x01, 0x00};
  ASSERT_EQ(simulate_pdu_s1_message(s1_bytes_2, sizeof(s1_bytes_2), state,
                                    target_assoc_id, stream_id),
            RETURNok);

  // Simulate InitialUEMessage - Attach Request
  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  handle_mme_ue_id_notification(state, assoc_id);

  // Simulate UECapabilityInfoIndication
  uint8_t ue_cap_bytes[] = {
      0x00, 0x16, 0x40, 0x53, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x4a, 0x40,
      0x40, 0x3f, 0x01, 0xe8, 0x01, 0x03, 0xac, 0x59, 0x80, 0x07, 0x00,
      0x08, 0x20, 0x81, 0x83, 0x9b, 0x4e, 0x1c, 0x3f, 0xf8, 0x7f, 0xf0,
      0xff, 0xe1, 0xff, 0xc3, 0xff, 0x87, 0xff, 0x0f, 0xfe, 0x1f, 0xfd,
      0xf8, 0x37, 0x62, 0x78, 0x00, 0xa0, 0x18, 0x5f, 0x80, 0x00, 0x00,
      0x00, 0x1c, 0x07, 0xe0, 0xdd, 0x89, 0xe0, 0x00, 0x00, 0x00, 0x07,
      0x09, 0xf8, 0x37, 0x62, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00};

  ASSERT_EQ(simulate_pdu_s1_message(ue_cap_bytes, sizeof(ue_cap_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  // Generate downlink nas transport with dummy payload
  bstring p;
  std::string test_str = "test";
  STRING_TO_BSTRING(test_str, p);
  s1ap_generate_downlink_nas_transport(state, 1, 7, &p, 1, &is_state_same);
  bdestroy_wrapper(&p);

  // Authentication response proc packet bytes
  uint8_t auth_bytes[] = {
      0x00, 0x0d, 0x40, 0x3d, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1a, 0x00,
      0x14, 0x13, 0x07, 0x53, 0x10, 0x1e, 0x63, 0x7e, 0x5c, 0x58, 0xec,
      0x5a, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x64, 0x40, 0x08, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x00, 0x00, 0xa0,
      0x00, 0x43, 0x40, 0x06, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x01};

  ASSERT_EQ(simulate_pdu_s1_message(auth_bytes, sizeof(auth_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  // Simulate InitialContextSetup
  uint8_t ics_bytes[] = {0x20, 0x09, 0x00, 0x22, 0x00, 0x00, 0x03, 0x00,
                         0x00, 0x40, 0x02, 0x00, 0x07, 0x00, 0x08, 0x40,
                         0x02, 0x00, 0x01, 0x00, 0x33, 0x40, 0x0f, 0x00,
                         0x00, 0x32, 0x40, 0x0a, 0x0a, 0x1f, 0xc0, 0xa8,
                         0x3c, 0x8d, 0x0a, 0x00, 0x01, 0x28};

  ASSERT_EQ(simulate_pdu_s1_message(ics_bytes, sizeof(ics_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  ASSERT_TRUE(is_ue_state_valid(assoc_id, 1, S1AP_UE_CONNECTED));

  // Simulate Attach Complete
  uint8_t attach_compl_bytes[] = {
      0x00, 0x0d, 0x40, 0x37, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00,
      0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1a, 0x00, 0x0e, 0x0d,
      0x27, 0xeb, 0x9e, 0x7f, 0x7e, 0x01, 0x07, 0x43, 0x00, 0x03, 0x52, 0x00,
      0xc2, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x00, 0x00,
      0x10, 0x00, 0x43, 0x40, 0x06, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x01};

  ASSERT_EQ(
      simulate_pdu_s1_message(attach_compl_bytes, sizeof(attach_compl_bytes),
                              state, assoc_id, stream_id),
      RETURNok);

  // Simulate Handover Required
  uint8_t handover_req_bytes[] = {
      0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00,
      0x01, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00,
      0x00, 0x02, 0x40, 0x02, 0x04, 0x20, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00,
      0xf1, 0x10, 0x40, 0x00, 0x00, 0x00, 0x20, 0x00, 0xf1, 0x10, 0x00, 0x02,
      0x00, 0x68, 0x00, 0x29, 0x28, 0x60, 0x04, 0x00, 0x03, 0x90, 0x00, 0x00,
      0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xfd,
      0x00, 0x00, 0x00, 0x58, 0x30, 0x31, 0x32, 0x33, 0x34, 0x30, 0x36, 0x0a,
      0x38, 0x39, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x00};

  ASSERT_EQ(
      simulate_pdu_s1_message(handover_req_bytes, sizeof(handover_req_bytes),
                              state, assoc_id, stream_id),
      RETURNok);

  // Simulate Handover Acknowledge
  uint8_t handover_bytes[] = {
      0x20, 0x01, 0x00, 0x5d, 0x00, 0x00, 0x04, 0x00, 0x00, 0x40, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x40, 0x02, 0x00, 0x01, 0x00, 0x12, 0x40,
      0x10, 0x00, 0x00, 0x14, 0x40, 0x0b, 0x00, 0xa1, 0xf0, 0xc0, 0xa8,
      0x3c, 0x8d, 0x0a, 0x00, 0x01, 0x29, 0x00, 0x7b, 0x00, 0x36, 0x35,
      0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65,
      0x74, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
      0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e,
      0x74, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x20, 0x00, 0x31,
      0x32, 0x33, 0x34, 0x35, 0x36, 0x00, 0x01, 0x02, 0x03};

  ASSERT_EQ(simulate_pdu_s1_message(handover_bytes, sizeof(handover_bytes),
                                    state, target_assoc_id, stream_id),
            RETURNok);

  // Send S1AP_HANDOVER_COMMAND mimicing MME_APP
  ASSERT_EQ(send_s1ap_mme_handover_command(assoc_id, 7, 1, 2, 10, 2), RETURNok);

  ue_description_t* ue_ref_p = s1ap_state_get_ue_mmeid(7);
  cv.wait_for(lock, std::chrono::milliseconds(1000));
  ASSERT_EQ(ue_ref_p->s1_ue_state, S1AP_UE_HANDOVER);

  // Simulate ENB Status Transfer
  uint8_t enb_transfer[] = {0x00, 0x18, 0x40, 0x24, 0x00, 0x00, 0x03, 0x00,
                            0x00, 0x00, 0x02, 0x00, 0x07, 0x00, 0x08, 0x00,
                            0x02, 0x00, 0x01, 0x00, 0x5a, 0x00, 0x11, 0x00,
                            0x00, 0x00, 0x59, 0x40, 0x0b, 0x05, 0x00, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

  ASSERT_EQ(simulate_pdu_s1_message(enb_transfer, sizeof(enb_transfer), state,
                                    assoc_id, stream_id),
            RETURNok);

  // Simulate Handover Notify
  uint8_t handover_notify[] = {
      0x00, 0x02, 0x40, 0x25, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x02, 0x00, 0x64, 0x40,
      0x08, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x00, 0x00, 0x20, 0x00, 0x43,
      0x40, 0x06, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x02};

  ASSERT_EQ(simulate_pdu_s1_message(handover_notify, sizeof(handover_notify),
                                    state, target_assoc_id, stream_id),
            RETURNok);

  // Free up eRAB data on target eNB
  ue_ref_p = s1ap_state_get_ue_enbid(target_assoc_id, 2);
  ASSERT_EQ(ue_ref_p->s1ap_handover_state.target_enb_id, 2);
  for (int i = 0;
       i < ue_ref_p->s1ap_handover_state.e_rab_admitted_list.no_of_items; i++) {
    bdestroy_wrapper(&ue_ref_p->s1ap_handover_state.e_rab_admitted_list.item[i]
                          .transport_layer_address);
  }
}

TEST_F(S1apMmeHandlersTest, HandleMmeHandoverFailure) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);
  std::mutex mx;
  std::condition_variable cv;
  std::unique_lock<std::mutex> lock(mx);

  bool is_state_same = true;

  sctp_assoc_id_t target_assoc_id = 2;
  setup_new_association(state, target_assoc_id);

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(4);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_s1ap_ue_context_release_req())
      .Times(0);
  EXPECT_CALL(*mme_app_handler, nas_proc_dl_transfer_rej()).Times(0);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_handover_required()).Times(1);

  // Simulate first S1Setup
  uint8_t s1_bytes[] = {0x00, 0x11, 0x00, 0x2f, 0x00, 0x00, 0x04, 0x00, 0x3b,
                        0x00, 0x09, 0x00, 0x00, 0xf1, 0x10, 0x40, 0x00, 0x00,
                        0x00, 0x10, 0x00, 0x3c, 0x40, 0x0b, 0x80, 0x09, 0x22,
                        0x52, 0x41, 0x44, 0x49, 0x53, 0x59, 0x53, 0x22, 0x00,
                        0x40, 0x00, 0x07, 0x00, 0x00, 0x00, 0x40, 0x00, 0xf1,
                        0x10, 0x00, 0x89, 0x40, 0x01, 0x00};

  ASSERT_EQ(simulate_pdu_s1_message(s1_bytes, sizeof(s1_bytes), state, assoc_id,
                                    stream_id),
            RETURNok);

  // Simulate second S1Setup
  uint8_t s1_bytes_2[] = {0x00, 0x11, 0x00, 0x2f, 0x00, 0x00, 0x04, 0x00, 0x3b,
                          0x00, 0x09, 0x00, 0x00, 0xf1, 0x10, 0x40, 0x00, 0x00,
                          0x00, 0x20, 0x00, 0x3c, 0x40, 0x0b, 0x80, 0x09, 0x22,
                          0x52, 0x41, 0x44, 0x49, 0x53, 0x59, 0x53, 0x22, 0x00,
                          0x40, 0x00, 0x07, 0x00, 0x00, 0x00, 0x40, 0x00, 0xf1,
                          0x10, 0x00, 0x89, 0x40, 0x01, 0x00};
  ASSERT_EQ(simulate_pdu_s1_message(s1_bytes_2, sizeof(s1_bytes_2), state,
                                    target_assoc_id, stream_id),
            RETURNok);

  // Simulate InitialUEMessage - Attach Request
  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  handle_mme_ue_id_notification(state, assoc_id);

  // Simulate UECapabilityInfoIndication
  uint8_t ue_cap_bytes[] = {
      0x00, 0x16, 0x40, 0x53, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x4a, 0x40,
      0x40, 0x3f, 0x01, 0xe8, 0x01, 0x03, 0xac, 0x59, 0x80, 0x07, 0x00,
      0x08, 0x20, 0x81, 0x83, 0x9b, 0x4e, 0x1c, 0x3f, 0xf8, 0x7f, 0xf0,
      0xff, 0xe1, 0xff, 0xc3, 0xff, 0x87, 0xff, 0x0f, 0xfe, 0x1f, 0xfd,
      0xf8, 0x37, 0x62, 0x78, 0x00, 0xa0, 0x18, 0x5f, 0x80, 0x00, 0x00,
      0x00, 0x1c, 0x07, 0xe0, 0xdd, 0x89, 0xe0, 0x00, 0x00, 0x00, 0x07,
      0x09, 0xf8, 0x37, 0x62, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00};

  ASSERT_EQ(simulate_pdu_s1_message(ue_cap_bytes, sizeof(ue_cap_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  // Generate downlink nas transport with dummy payload
  bstring p;
  std::string test_str = "test";
  STRING_TO_BSTRING(test_str, p);
  s1ap_generate_downlink_nas_transport(state, 1, 7, &p, 1, &is_state_same);
  bdestroy_wrapper(&p);

  // Authentication response proc packet bytes
  uint8_t auth_bytes[] = {
      0x00, 0x0d, 0x40, 0x3d, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1a, 0x00,
      0x14, 0x13, 0x07, 0x53, 0x10, 0x1e, 0x63, 0x7e, 0x5c, 0x58, 0xec,
      0x5a, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x64, 0x40, 0x08, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x00, 0x00, 0xa0,
      0x00, 0x43, 0x40, 0x06, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x01};

  ASSERT_EQ(simulate_pdu_s1_message(auth_bytes, sizeof(auth_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  // Simulate InitialContextSetup
  uint8_t ics_bytes[] = {0x20, 0x09, 0x00, 0x22, 0x00, 0x00, 0x03, 0x00,
                         0x00, 0x40, 0x02, 0x00, 0x07, 0x00, 0x08, 0x40,
                         0x02, 0x00, 0x01, 0x00, 0x33, 0x40, 0x0f, 0x00,
                         0x00, 0x32, 0x40, 0x0a, 0x0a, 0x1f, 0xc0, 0xa8,
                         0x3c, 0x8d, 0x0a, 0x00, 0x01, 0x28};

  ASSERT_EQ(simulate_pdu_s1_message(ics_bytes, sizeof(ics_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  ASSERT_TRUE(is_ue_state_valid(assoc_id, 1, S1AP_UE_CONNECTED));

  // Simulate Attach Complete
  uint8_t attach_compl_bytes[] = {
      0x00, 0x0d, 0x40, 0x37, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00,
      0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1a, 0x00, 0x0e, 0x0d,
      0x27, 0xeb, 0x9e, 0x7f, 0x7e, 0x01, 0x07, 0x43, 0x00, 0x03, 0x52, 0x00,
      0xc2, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x00, 0x00,
      0x10, 0x00, 0x43, 0x40, 0x06, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x01};

  ASSERT_EQ(
      simulate_pdu_s1_message(attach_compl_bytes, sizeof(attach_compl_bytes),
                              state, assoc_id, stream_id),
      RETURNok);

  // Simulate Handover Required
  uint8_t handover_req_bytes[] = {
      0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00,
      0x01, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00,
      0x00, 0x02, 0x40, 0x02, 0x04, 0x20, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00,
      0xf1, 0x10, 0x40, 0x00, 0x00, 0x00, 0x20, 0x00, 0xf1, 0x10, 0x00, 0x02,
      0x00, 0x68, 0x00, 0x29, 0x28, 0x60, 0x04, 0x00, 0x03, 0x90, 0x00, 0x00,
      0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xfd,
      0x00, 0x00, 0x00, 0x58, 0x30, 0x31, 0x32, 0x33, 0x34, 0x30, 0x36, 0x0a,
      0x38, 0x39, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x00};

  ASSERT_EQ(
      simulate_pdu_s1_message(handover_req_bytes, sizeof(handover_req_bytes),
                              state, assoc_id, stream_id),
      RETURNok);

  // Simulate Handover Failure
  uint8_t handover_fail_bytes[] = {0x40, 0x01, 0x00, 0x0f, 0x00, 0x00, 0x02,
                                   0x00, 0x00, 0x40, 0x02, 0x00, 0x07, 0x00,
                                   0x02, 0x40, 0x02, 0x01, 0x80};

  ASSERT_EQ(
      simulate_pdu_s1_message(handover_fail_bytes, sizeof(handover_fail_bytes),
                              state, target_assoc_id, stream_id),
      RETURNok);
}

TEST_F(S1apMmeHandlersTest, HandleMmeHandoverCancel) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);
  std::mutex mx;
  std::condition_variable cv;
  std::unique_lock<std::mutex> lock(mx);

  bool is_state_same = true;

  sctp_assoc_id_t target_assoc_id = 2;
  setup_new_association(state, target_assoc_id);

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(5);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_s1ap_ue_context_release_req())
      .Times(0);
  EXPECT_CALL(*mme_app_handler, nas_proc_dl_transfer_rej()).Times(0);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_handover_required()).Times(1);

  // Simulate first S1Setup
  uint8_t s1_bytes[] = {0x00, 0x11, 0x00, 0x2f, 0x00, 0x00, 0x04, 0x00, 0x3b,
                        0x00, 0x09, 0x00, 0x00, 0xf1, 0x10, 0x40, 0x00, 0x00,
                        0x00, 0x10, 0x00, 0x3c, 0x40, 0x0b, 0x80, 0x09, 0x22,
                        0x52, 0x41, 0x44, 0x49, 0x53, 0x59, 0x53, 0x22, 0x00,
                        0x40, 0x00, 0x07, 0x00, 0x00, 0x00, 0x40, 0x00, 0xf1,
                        0x10, 0x00, 0x89, 0x40, 0x01, 0x00};

  ASSERT_EQ(simulate_pdu_s1_message(s1_bytes, sizeof(s1_bytes), state, assoc_id,
                                    stream_id),
            RETURNok);

  // Simulate second S1Setup
  uint8_t s1_bytes_2[] = {0x00, 0x11, 0x00, 0x2f, 0x00, 0x00, 0x04, 0x00, 0x3b,
                          0x00, 0x09, 0x00, 0x00, 0xf1, 0x10, 0x40, 0x00, 0x00,
                          0x00, 0x20, 0x00, 0x3c, 0x40, 0x0b, 0x80, 0x09, 0x22,
                          0x52, 0x41, 0x44, 0x49, 0x53, 0x59, 0x53, 0x22, 0x00,
                          0x40, 0x00, 0x07, 0x00, 0x00, 0x00, 0x40, 0x00, 0xf1,
                          0x10, 0x00, 0x89, 0x40, 0x01, 0x00};
  ASSERT_EQ(simulate_pdu_s1_message(s1_bytes_2, sizeof(s1_bytes_2), state,
                                    target_assoc_id, stream_id),
            RETURNok);

  // Simulate InitialUEMessage - Attach Request
  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  handle_mme_ue_id_notification(state, assoc_id);

  // Simulate UECapabilityInfoIndication
  uint8_t ue_cap_bytes[] = {
      0x00, 0x16, 0x40, 0x53, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x4a, 0x40,
      0x40, 0x3f, 0x01, 0xe8, 0x01, 0x03, 0xac, 0x59, 0x80, 0x07, 0x00,
      0x08, 0x20, 0x81, 0x83, 0x9b, 0x4e, 0x1c, 0x3f, 0xf8, 0x7f, 0xf0,
      0xff, 0xe1, 0xff, 0xc3, 0xff, 0x87, 0xff, 0x0f, 0xfe, 0x1f, 0xfd,
      0xf8, 0x37, 0x62, 0x78, 0x00, 0xa0, 0x18, 0x5f, 0x80, 0x00, 0x00,
      0x00, 0x1c, 0x07, 0xe0, 0xdd, 0x89, 0xe0, 0x00, 0x00, 0x00, 0x07,
      0x09, 0xf8, 0x37, 0x62, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00};

  ASSERT_EQ(simulate_pdu_s1_message(ue_cap_bytes, sizeof(ue_cap_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  // Generate downlink nas transport with dummy payload
  bstring p;
  std::string test_str = "test";
  STRING_TO_BSTRING(test_str, p);
  s1ap_generate_downlink_nas_transport(state, 1, 7, &p, 1, &is_state_same);
  bdestroy_wrapper(&p);

  // Authentication response proc packet bytes
  uint8_t auth_bytes[] = {
      0x00, 0x0d, 0x40, 0x3d, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1a, 0x00,
      0x14, 0x13, 0x07, 0x53, 0x10, 0x1e, 0x63, 0x7e, 0x5c, 0x58, 0xec,
      0x5a, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x64, 0x40, 0x08, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x00, 0x00, 0xa0,
      0x00, 0x43, 0x40, 0x06, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x01};

  ASSERT_EQ(simulate_pdu_s1_message(auth_bytes, sizeof(auth_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  // Simulate InitialContextSetup
  uint8_t ics_bytes[] = {0x20, 0x09, 0x00, 0x22, 0x00, 0x00, 0x03, 0x00,
                         0x00, 0x40, 0x02, 0x00, 0x07, 0x00, 0x08, 0x40,
                         0x02, 0x00, 0x01, 0x00, 0x33, 0x40, 0x0f, 0x00,
                         0x00, 0x32, 0x40, 0x0a, 0x0a, 0x1f, 0xc0, 0xa8,
                         0x3c, 0x8d, 0x0a, 0x00, 0x01, 0x28};

  ASSERT_EQ(simulate_pdu_s1_message(ics_bytes, sizeof(ics_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  ASSERT_TRUE(is_ue_state_valid(assoc_id, 1, S1AP_UE_CONNECTED));

  // Simulate Attach Complete
  uint8_t attach_compl_bytes[] = {
      0x00, 0x0d, 0x40, 0x37, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00,
      0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1a, 0x00, 0x0e, 0x0d,
      0x27, 0xeb, 0x9e, 0x7f, 0x7e, 0x01, 0x07, 0x43, 0x00, 0x03, 0x52, 0x00,
      0xc2, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x00, 0x00,
      0x10, 0x00, 0x43, 0x40, 0x06, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x01};

  ASSERT_EQ(
      simulate_pdu_s1_message(attach_compl_bytes, sizeof(attach_compl_bytes),
                              state, assoc_id, stream_id),
      RETURNok);

  // Simulate Handover Required
  uint8_t handover_req_bytes[] = {
      0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00,
      0x01, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00,
      0x00, 0x02, 0x40, 0x02, 0x04, 0x20, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00,
      0xf1, 0x10, 0x40, 0x00, 0x00, 0x00, 0x20, 0x00, 0xf1, 0x10, 0x00, 0x02,
      0x00, 0x68, 0x00, 0x29, 0x28, 0x60, 0x04, 0x00, 0x03, 0x90, 0x00, 0x00,
      0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xfd,
      0x00, 0x00, 0x00, 0x58, 0x30, 0x31, 0x32, 0x33, 0x34, 0x30, 0x36, 0x0a,
      0x38, 0x39, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x00};

  ASSERT_EQ(
      simulate_pdu_s1_message(handover_req_bytes, sizeof(handover_req_bytes),
                              state, assoc_id, stream_id),
      RETURNok);

  // Simulate Handover Acknowledge
  uint8_t handover_bytes[] = {
      0x20, 0x01, 0x00, 0x5d, 0x00, 0x00, 0x04, 0x00, 0x00, 0x40, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x40, 0x02, 0x00, 0x01, 0x00, 0x12, 0x40,
      0x10, 0x00, 0x00, 0x14, 0x40, 0x0b, 0x00, 0xa1, 0xf0, 0xc0, 0xa8,
      0x3c, 0x8d, 0x0a, 0x00, 0x01, 0x29, 0x00, 0x7b, 0x00, 0x36, 0x35,
      0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65,
      0x74, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
      0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e,
      0x74, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x20, 0x00, 0x31,
      0x32, 0x33, 0x34, 0x35, 0x36, 0x00, 0x01, 0x02, 0x03};

  ASSERT_EQ(simulate_pdu_s1_message(handover_bytes, sizeof(handover_bytes),
                                    state, target_assoc_id, stream_id),
            RETURNok);

  // Send S1AP_HANDOVER_COMMAND mimicing MME_APP
  ASSERT_EQ(send_s1ap_mme_handover_command(assoc_id, 7, 1, 2, 10, 11),
            RETURNok);

  ue_description_t* ue_ref_p = s1ap_state_get_ue_mmeid(7);
  cv.wait_for(lock, std::chrono::milliseconds(1000));
  ASSERT_EQ(ue_ref_p->s1_ue_state, S1AP_UE_HANDOVER);

  // Simulate Handover Cancel
  uint8_t hand_cancel[] = {0x00, 0x04, 0x00, 0x15, 0x00, 0x00, 0x03, 0x00, 0x00,
                           0x00, 0x02, 0x00, 0x07, 0x00, 0x08, 0x00, 0x02, 0x00,
                           0x01, 0x00, 0x02, 0x40, 0x02, 0x00, 0x80};

  ASSERT_EQ(simulate_pdu_s1_message(hand_cancel, sizeof(hand_cancel), state,
                                    assoc_id, stream_id),
            RETURNok);
}

TEST_F(S1apMmeHandlersTest, HandleS1apPathSwitchRequest) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(2);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_s1ap_ue_context_release_req())
      .Times(0);
  EXPECT_CALL(*mme_app_handler, nas_proc_dl_transfer_rej()).Times(0);

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, S1AP_INIT, 0));

  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  ASSERT_EQ(RETURNok, generate_s1_setup_request_pdu(&pdu_s1));
  ASSERT_EQ(RETURNok,
            s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1));

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, S1AP_READY, 0));

  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  handle_mme_ue_id_notification(state, assoc_id);

  // State validation
  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, S1AP_READY, 1));
  ASSERT_TRUE(is_num_enbs_valid(state, 1));
  ASSERT_EQ(state->mmeid2associd.num_elements, 1);

  // Send S1AP_PATH_SWITCH_REQUEST_ACK mimicing MME_APP
  ASSERT_EQ(send_s1ap_path_switch_req(assoc_id, 1, 7), RETURNok);

  // Freeing pdu and payload data
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);
}

TEST_F(S1apMmeHandlersTest, HandleS1apPathSwitchFailure) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(2);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_s1ap_ue_context_release_req())
      .Times(0);
  EXPECT_CALL(*mme_app_handler, nas_proc_dl_transfer_rej()).Times(0);

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, S1AP_INIT, 0));

  S1ap_S1AP_PDU_t pdu_s1;
  memset(&pdu_s1, 0, sizeof(pdu_s1));
  ASSERT_EQ(RETURNok, generate_s1_setup_request_pdu(&pdu_s1));
  ASSERT_EQ(RETURNok,
            s1ap_mme_handle_message(state, assoc_id, stream_id, &pdu_s1));

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, S1AP_READY, 0));

  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  handle_mme_ue_id_notification(state, assoc_id);

  // Send S1AP_PATH_SWITCH_REQUEST_FAILURE mimicing MME_APP
  ASSERT_EQ(send_s1ap_path_switch_failure(assoc_id, 1, 7), RETURNok);

  // Freeing pdu and payload data
  ASN_STRUCT_FREE_CONTENTS_ONLY(asn_DEF_S1ap_S1AP_PDU, &pdu_s1);
}

TEST_F(S1apMmeHandlersTest, HandlePathSwitchRequestSuccess) {
  ASSERT_EQ(task_zmq_ctx_main_s1ap.ready, true);

  bool is_state_same = true;

  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, S1AP_INIT, 0));

  EXPECT_CALL(*sctp_handler, sctpd_send_dl()).Times(5);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_initial_ue_message()).Times(1);
  EXPECT_CALL(*mme_app_handler, mme_app_handle_path_switch_request()).Times(1);

  sctp_assoc_id_t switch_assoc_id = 2;
  setup_new_association(state, switch_assoc_id);

  // Simulate first S1Setup
  uint8_t s1_bytes[] = {0x00, 0x11, 0x00, 0x2f, 0x00, 0x00, 0x04, 0x00, 0x3b,
                        0x00, 0x09, 0x00, 0x00, 0xf1, 0x10, 0x40, 0x00, 0x00,
                        0x00, 0x10, 0x00, 0x3c, 0x40, 0x0b, 0x80, 0x09, 0x22,
                        0x52, 0x41, 0x44, 0x49, 0x53, 0x59, 0x53, 0x22, 0x00,
                        0x40, 0x00, 0x07, 0x00, 0x00, 0x00, 0x40, 0x00, 0xf1,
                        0x10, 0x00, 0x89, 0x40, 0x01, 0x00};

  ASSERT_EQ(simulate_pdu_s1_message(s1_bytes, sizeof(s1_bytes), state, assoc_id,
                                    stream_id),
            RETURNok);

  // Simulate second S1Setup
  uint8_t s1_bytes_2[] = {0x00, 0x11, 0x00, 0x2f, 0x00, 0x00, 0x04, 0x00, 0x3b,
                          0x00, 0x09, 0x00, 0x00, 0xf1, 0x10, 0x40, 0x00, 0x00,
                          0x00, 0x20, 0x00, 0x3c, 0x40, 0x0b, 0x80, 0x09, 0x22,
                          0x52, 0x41, 0x44, 0x49, 0x53, 0x59, 0x53, 0x22, 0x00,
                          0x40, 0x00, 0x07, 0x00, 0x00, 0x00, 0x40, 0x00, 0xf1,
                          0x10, 0x00, 0x89, 0x40, 0x01, 0x00};
  ASSERT_EQ(simulate_pdu_s1_message(s1_bytes_2, sizeof(s1_bytes_2), state,
                                    switch_assoc_id, stream_id),
            RETURNok);

  // Simulate InitialUEMessage - Attach Request
  uint8_t initial_ue_bytes[] = {
      0x00, 0x0c, 0x40, 0x48, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x02,
      0x00, 0x01, 0x00, 0x1a, 0x00, 0x20, 0x1f, 0x07, 0x41, 0x71, 0x08,
      0x09, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0xe0, 0xe0,
      0x00, 0x04, 0x02, 0x01, 0xd0, 0x11, 0x40, 0x08, 0x04, 0x02, 0x60,
      0x04, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1,
      0x10, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x86, 0x40, 0x01, 0x30};

  ASSERT_EQ(simulate_pdu_s1_message(initial_ue_bytes, sizeof(initial_ue_bytes),
                                    state, assoc_id, stream_id),
            RETURNok);

  handle_mme_ue_id_notification(state, assoc_id);

  // Simulate UECapabilityInfoIndication
  uint8_t ue_cap_bytes[] = {
      0x00, 0x16, 0x40, 0x53, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x4a, 0x40,
      0x40, 0x3f, 0x01, 0xe8, 0x01, 0x03, 0xac, 0x59, 0x80, 0x07, 0x00,
      0x08, 0x20, 0x81, 0x83, 0x9b, 0x4e, 0x1c, 0x3f, 0xf8, 0x7f, 0xf0,
      0xff, 0xe1, 0xff, 0xc3, 0xff, 0x87, 0xff, 0x0f, 0xfe, 0x1f, 0xfd,
      0xf8, 0x37, 0x62, 0x78, 0x00, 0xa0, 0x18, 0x5f, 0x80, 0x00, 0x00,
      0x00, 0x1c, 0x07, 0xe0, 0xdd, 0x89, 0xe0, 0x00, 0x00, 0x00, 0x07,
      0x09, 0xf8, 0x37, 0x62, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00};

  ASSERT_EQ(simulate_pdu_s1_message(ue_cap_bytes, sizeof(ue_cap_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  // Generate downlink nas transport (mocking S1AP_NAS_DL_DATA_REQ message to
  // move UE to S1AP_UE_CONNECTED)
  bstring p;
  std::string test_str = "test";
  STRING_TO_BSTRING(test_str, p);
  s1ap_generate_downlink_nas_transport(state, 1, 7, &p, 1, &is_state_same);
  bdestroy_wrapper(&p);

  // Authentication response proc packet bytes
  uint8_t auth_bytes[] = {
      0x00, 0x0d, 0x40, 0x3d, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1a, 0x00,
      0x14, 0x13, 0x07, 0x53, 0x10, 0x1e, 0x63, 0x7e, 0x5c, 0x58, 0xec,
      0x5a, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x64, 0x40, 0x08, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x00, 0x00, 0xa0,
      0x00, 0x43, 0x40, 0x06, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x01};

  ASSERT_EQ(simulate_pdu_s1_message(auth_bytes, sizeof(auth_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  // Simulate InitialContextSetup
  uint8_t ics_bytes[] = {0x20, 0x09, 0x00, 0x22, 0x00, 0x00, 0x03, 0x00,
                         0x00, 0x40, 0x02, 0x00, 0x07, 0x00, 0x08, 0x40,
                         0x02, 0x00, 0x01, 0x00, 0x33, 0x40, 0x0f, 0x00,
                         0x00, 0x32, 0x40, 0x0a, 0x0a, 0x1f, 0xc0, 0xa8,
                         0x3c, 0x8d, 0x0a, 0x00, 0x01, 0x28};

  ASSERT_EQ(simulate_pdu_s1_message(ics_bytes, sizeof(ics_bytes), state,
                                    assoc_id, stream_id),
            RETURNok);

  // State validation
  ASSERT_TRUE(is_ue_state_valid(assoc_id, 1, S1AP_UE_CONNECTED));
  ASSERT_TRUE(is_enb_state_valid(state, assoc_id, S1AP_READY, 1));

  // Simulate Attach Complete
  uint8_t attach_compl_bytes[] = {
      0x00, 0x0d, 0x40, 0x37, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00,
      0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1a, 0x00, 0x0e, 0x0d,
      0x27, 0xeb, 0x9e, 0x7f, 0x7e, 0x01, 0x07, 0x43, 0x00, 0x03, 0x52, 0x00,
      0xc2, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x00, 0x00,
      0x10, 0x00, 0x43, 0x40, 0x06, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x01};

  ASSERT_EQ(
      simulate_pdu_s1_message(attach_compl_bytes, sizeof(attach_compl_bytes),
                              state, assoc_id, stream_id),
      RETURNok);

  // Simulate ENBConfigurationTransfer PDU payload
  uint8_t enb_transfer_bytes[] = {
      0x00, 0x28, 0x40, 0x30, 0x00, 0x00, 0x01, 0x00, 0x81, 0x00, 0x29,
      0x40, 0x00, 0xf1, 0x10, 0x40, 0x00, 0x00, 0x00, 0x20, 0x00, 0xf1,
      0x10, 0x00, 0x02, 0x00, 0x00, 0xf1, 0x10, 0x40, 0x00, 0x00, 0x00,
      0x10, 0x00, 0xf1, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x98,
      0x40, 0x06, 0x01, 0xf0, 0xc0, 0xa8, 0x3c, 0x8d};

  ASSERT_EQ(
      simulate_pdu_s1_message(enb_transfer_bytes, sizeof(enb_transfer_bytes),
                              state, assoc_id, stream_id),
      RETURNok);

  // Simulate second ENBConfigurationTransfer PDU payload
  uint8_t enb_transfer_bytes_2[] = {
      0x00, 0x28, 0x40, 0x2a, 0x00, 0x00, 0x01, 0x00, 0x81, 0x00, 0x23, 0x00,
      0x00, 0xf1, 0x10, 0x40, 0x00, 0x00, 0x00, 0x20, 0x00, 0xf1, 0x10, 0x00,
      0x01, 0x00, 0x00, 0xf1, 0x10, 0x40, 0x00, 0x00, 0x00, 0x10, 0x00, 0xf1,
      0x10, 0x00, 0x02, 0x50, 0x0f, 0x80, 0xc0, 0xa8, 0x3c, 0x8d};

  ASSERT_EQ(simulate_pdu_s1_message(enb_transfer_bytes_2,
                                    sizeof(enb_transfer_bytes_2), state,
                                    switch_assoc_id, stream_id),
            RETURNok);

  // Simulate PathSwitchRequest PDU payload
  uint8_t path_switch_bytes[] = {
      0x00, 0x03, 0x00, 0x41, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x02, 0x00,
      0x02, 0x00, 0x16, 0x00, 0x0f, 0x00, 0x00, 0x17, 0x00, 0x0a, 0x0a, 0x1f,
      0xc0, 0xa8, 0x3c, 0x8d, 0x0a, 0x00, 0x01, 0x29, 0x00, 0x58, 0x00, 0x02,
      0x00, 0x07, 0x00, 0x64, 0x40, 0x08, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x00,
      0x00, 0x20, 0x00, 0x43, 0x40, 0x06, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x02,
      0x00, 0x6b, 0x40, 0x05, 0x18, 0x00, 0x0c, 0x00, 0x00};

  ASSERT_EQ(
      simulate_pdu_s1_message(path_switch_bytes, sizeof(path_switch_bytes),
                              state, switch_assoc_id, stream_id),
      RETURNok);

  // Confirm UE state update (assoc_id, enb_ue_s1ap_id)
  ASSERT_TRUE(is_ue_state_valid(switch_assoc_id, 2, S1AP_UE_CONNECTED));

  // Simulate Detach request PDU payload
  uint8_t detach_req_bytes[] = {
      0x00, 0x0d, 0x40, 0x3f, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00,
      0x07, 0x00, 0x08, 0x00, 0x02, 0x00, 0x02, 0x00, 0x1a, 0x00, 0x16, 0x15,
      0x27, 0x9e, 0xe4, 0xc3, 0xbf, 0x02, 0x07, 0x45, 0x09, 0x0b, 0xf6, 0x00,
      0xf1, 0x10, 0x00, 0x01, 0x01, 0x4e, 0x36, 0x15, 0x3b, 0x00, 0x64, 0x40,
      0x08, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x00, 0x00, 0x20, 0x00, 0x43, 0x40,
      0x06, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x02};

  ASSERT_EQ(simulate_pdu_s1_message(detach_req_bytes, sizeof(detach_req_bytes),
                                    state, switch_assoc_id, stream_id),
            RETURNok);
}

}  // namespace lte
}  // namespace magma
