// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_MMEUESTATE_MAGMA_LTE_TEST_FLAT_BUFFER_H_
#define FLATBUFFERS_GENERATED_MMEUESTATE_MAGMA_LTE_TEST_FLAT_BUFFER_H_

#include "flatbuffers/flatbuffers.h"

#include "mme_nas_state_generated.h"
#include "3gpp_23003_generated.h"
#include "3gpp_36413_generated.h"
#include "common_types_generated.h"
#include "3gpp_29274_generated.h"
#include "3gpp_24008_generated.h"

namespace magma {
namespace lte {
namespace test_flat_buffer {

struct BearerContext;

struct SgsApMsg;

struct SgsContext;

struct PdnContextArray;

struct BearerContextArray;

struct RegionalSubscriptionArray;

struct UeMmContext;
struct UeMmContextBuilder;

enum OngoingProcedure : uint8_t {
  OngoingProcedure_COMBINED_ATTACH = 0,
  OngoingProcedure_COMBINED_TAU    = 1,
  OngoingProcedure_MIN             = OngoingProcedure_COMBINED_ATTACH,
  OngoingProcedure_MAX             = OngoingProcedure_COMBINED_TAU
};

inline const OngoingProcedure (&EnumValuesOngoingProcedure())[2] {
  static const OngoingProcedure values[] = {OngoingProcedure_COMBINED_ATTACH,
                                            OngoingProcedure_COMBINED_TAU};
  return values;
}

inline const char* const* EnumNamesOngoingProcedure() {
  static const char* const names[3] = {"COMBINED_ATTACH", "COMBINED_TAU",
                                       nullptr};
  return names;
}

inline const char* EnumNameOngoingProcedure(OngoingProcedure e) {
  if (flatbuffers::IsOutRange(
          e, OngoingProcedure_COMBINED_ATTACH, OngoingProcedure_COMBINED_TAU))
    return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesOngoingProcedure()[index];
}

enum SgsFsmState : uint8_t {
  SgsFsmState_SGS_INVALID             = 0,
  SgsFsmState_SGS_NULL                = 1,
  SgsFsmState_SGS_LA_UPDATE_REQUESTED = 2,
  SgsFsmState_SGS_ASSOCIATED          = 3,
  SgsFsmState_SGS_STATE_MAX           = 4,
  SgsFsmState_MIN                     = SgsFsmState_SGS_INVALID,
  SgsFsmState_MAX                     = SgsFsmState_SGS_STATE_MAX
};

inline const SgsFsmState (&EnumValuesSgsFsmState())[5] {
  static const SgsFsmState values[] = {
      SgsFsmState_SGS_INVALID, SgsFsmState_SGS_NULL,
      SgsFsmState_SGS_LA_UPDATE_REQUESTED, SgsFsmState_SGS_ASSOCIATED,
      SgsFsmState_SGS_STATE_MAX};
  return values;
}

inline const char* const* EnumNamesSgsFsmState() {
  static const char* const names[6] = {
      "SGS_INVALID",    "SGS_NULL",      "SGS_LA_UPDATE_REQUESTED",
      "SGS_ASSOCIATED", "SGS_STATE_MAX", nullptr};
  return names;
}

inline const char* EnumNameSgsFsmState(SgsFsmState e) {
  if (flatbuffers::IsOutRange(
          e, SgsFsmState_SGS_INVALID, SgsFsmState_SGS_STATE_MAX))
    return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSgsFsmState()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) BearerContext FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t ebi_;
  uint8_t transaction_identifier_;
  int16_t padding0__;
  magma::lte::test_flat_buffer::Fteid s_gw_fteid_s1u_;
  magma::lte::test_flat_buffer::Fteid p_gw_fteid_s5_s8_up_;
  int32_t pdn_cx_id_;
  magma::lte::test_flat_buffer::EsmEbrContext esm_ebr_context_;
  magma::lte::test_flat_buffer::Fteid enb_fteid_s1u_;
  uint8_t qci_;
  uint8_t priority_level_;
  uint8_t preemption_vulnerability_;
  uint8_t preemption_capability_;

 public:
  BearerContext()
      : ebi_(0),
        transaction_identifier_(0),
        padding0__(0),
        s_gw_fteid_s1u_(),
        p_gw_fteid_s5_s8_up_(),
        pdn_cx_id_(0),
        esm_ebr_context_(),
        enb_fteid_s1u_(),
        qci_(0),
        priority_level_(0),
        preemption_vulnerability_(0),
        preemption_capability_(0) {
    (void) padding0__;
  }
  BearerContext(
      uint8_t _ebi, uint8_t _transaction_identifier,
      const magma::lte::test_flat_buffer::Fteid& _s_gw_fteid_s1u,
      const magma::lte::test_flat_buffer::Fteid& _p_gw_fteid_s5_s8_up,
      int32_t _pdn_cx_id,
      const magma::lte::test_flat_buffer::EsmEbrContext& _esm_ebr_context,
      const magma::lte::test_flat_buffer::Fteid& _enb_fteid_s1u, uint8_t _qci,
      uint8_t _priority_level,
      magma::lte::test_flat_buffer::PreEmptionVulnerability
          _preemption_vulnerability,
      magma::lte::test_flat_buffer::PreEmptionCapability _preemption_capability)
      : ebi_(flatbuffers::EndianScalar(_ebi)),
        transaction_identifier_(
            flatbuffers::EndianScalar(_transaction_identifier)),
        padding0__(0),
        s_gw_fteid_s1u_(_s_gw_fteid_s1u),
        p_gw_fteid_s5_s8_up_(_p_gw_fteid_s5_s8_up),
        pdn_cx_id_(flatbuffers::EndianScalar(_pdn_cx_id)),
        esm_ebr_context_(_esm_ebr_context),
        enb_fteid_s1u_(_enb_fteid_s1u),
        qci_(flatbuffers::EndianScalar(_qci)),
        priority_level_(flatbuffers::EndianScalar(_priority_level)),
        preemption_vulnerability_(flatbuffers::EndianScalar(
            static_cast<uint8_t>(_preemption_vulnerability))),
        preemption_capability_(flatbuffers::EndianScalar(
            static_cast<uint8_t>(_preemption_capability))) {
    (void) padding0__;
  }
  uint8_t ebi() const { return flatbuffers::EndianScalar(ebi_); }
  void mutate_ebi(uint8_t _ebi) { flatbuffers::WriteScalar(&ebi_, _ebi); }
  uint8_t transaction_identifier() const {
    return flatbuffers::EndianScalar(transaction_identifier_);
  }
  void mutate_transaction_identifier(uint8_t _transaction_identifier) {
    flatbuffers::WriteScalar(&transaction_identifier_, _transaction_identifier);
  }
  const magma::lte::test_flat_buffer::Fteid& s_gw_fteid_s1u() const {
    return s_gw_fteid_s1u_;
  }
  magma::lte::test_flat_buffer::Fteid& mutable_s_gw_fteid_s1u() {
    return s_gw_fteid_s1u_;
  }
  const magma::lte::test_flat_buffer::Fteid& p_gw_fteid_s5_s8_up() const {
    return p_gw_fteid_s5_s8_up_;
  }
  magma::lte::test_flat_buffer::Fteid& mutable_p_gw_fteid_s5_s8_up() {
    return p_gw_fteid_s5_s8_up_;
  }
  int32_t pdn_cx_id() const { return flatbuffers::EndianScalar(pdn_cx_id_); }
  void mutate_pdn_cx_id(int32_t _pdn_cx_id) {
    flatbuffers::WriteScalar(&pdn_cx_id_, _pdn_cx_id);
  }
  const magma::lte::test_flat_buffer::EsmEbrContext& esm_ebr_context() const {
    return esm_ebr_context_;
  }
  magma::lte::test_flat_buffer::EsmEbrContext& mutable_esm_ebr_context() {
    return esm_ebr_context_;
  }
  const magma::lte::test_flat_buffer::Fteid& enb_fteid_s1u() const {
    return enb_fteid_s1u_;
  }
  magma::lte::test_flat_buffer::Fteid& mutable_enb_fteid_s1u() {
    return enb_fteid_s1u_;
  }
  uint8_t qci() const { return flatbuffers::EndianScalar(qci_); }
  void mutate_qci(uint8_t _qci) { flatbuffers::WriteScalar(&qci_, _qci); }
  uint8_t priority_level() const {
    return flatbuffers::EndianScalar(priority_level_);
  }
  void mutate_priority_level(uint8_t _priority_level) {
    flatbuffers::WriteScalar(&priority_level_, _priority_level);
  }
  magma::lte::test_flat_buffer::PreEmptionVulnerability
  preemption_vulnerability() const {
    return static_cast<magma::lte::test_flat_buffer::PreEmptionVulnerability>(
        flatbuffers::EndianScalar(preemption_vulnerability_));
  }
  void mutate_preemption_vulnerability(
      magma::lte::test_flat_buffer::PreEmptionVulnerability
          _preemption_vulnerability) {
    flatbuffers::WriteScalar(
        &preemption_vulnerability_,
        static_cast<uint8_t>(_preemption_vulnerability));
  }
  magma::lte::test_flat_buffer::PreEmptionCapability preemption_capability()
      const {
    return static_cast<magma::lte::test_flat_buffer::PreEmptionCapability>(
        flatbuffers::EndianScalar(preemption_capability_));
  }
  void mutate_preemption_capability(
      magma::lte::test_flat_buffer::PreEmptionCapability
          _preemption_capability) {
    flatbuffers::WriteScalar(
        &preemption_capability_, static_cast<uint8_t>(_preemption_capability));
  }
};
FLATBUFFERS_STRUCT_END(BearerContext, 2208);

inline bool operator==(const BearerContext& lhs, const BearerContext& rhs) {
  return (lhs.ebi() == rhs.ebi()) &&
         (lhs.transaction_identifier() == rhs.transaction_identifier()) &&
         (lhs.s_gw_fteid_s1u() == rhs.s_gw_fteid_s1u()) &&
         (lhs.p_gw_fteid_s5_s8_up() == rhs.p_gw_fteid_s5_s8_up()) &&
         (lhs.pdn_cx_id() == rhs.pdn_cx_id()) &&
         (lhs.esm_ebr_context() == rhs.esm_ebr_context()) &&
         (lhs.enb_fteid_s1u() == rhs.enb_fteid_s1u()) &&
         (lhs.qci() == rhs.qci()) &&
         (lhs.priority_level() == rhs.priority_level()) &&
         (lhs.preemption_vulnerability() == rhs.preemption_vulnerability()) &&
         (lhs.preemption_capability() == rhs.preemption_capability());
}

inline bool operator!=(const BearerContext& lhs, const BearerContext& rhs) {
  return !(lhs == rhs);
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(2) SgsApMsg FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t bytes_[2048];
  uint16_t length_;

 public:
  SgsApMsg() : bytes_(), length_(0) {}
  SgsApMsg(uint16_t _length)
      : bytes_(), length_(flatbuffers::EndianScalar(_length)) {}
  SgsApMsg(flatbuffers::span<const uint8_t, 2048> _bytes, uint16_t _length)
      : length_(flatbuffers::EndianScalar(_length)) {
    flatbuffers::CastToArray(bytes_).CopyFromSpan(_bytes);
  }
  const flatbuffers::Array<uint8_t, 2048>* bytes() const {
    return &flatbuffers::CastToArray(bytes_);
  }
  flatbuffers::Array<uint8_t, 2048>* mutable_bytes() {
    return &flatbuffers::CastToArray(bytes_);
  }
  uint16_t length() const { return flatbuffers::EndianScalar(length_); }
  void mutate_length(uint16_t _length) {
    flatbuffers::WriteScalar(&length_, _length);
  }
};
FLATBUFFERS_STRUCT_END(SgsApMsg, 2050);

inline bool operator==(const SgsApMsg& lhs, const SgsApMsg& rhs) {
  return (lhs.bytes() == rhs.bytes()) && (lhs.length() == rhs.length());
}

inline bool operator!=(const SgsApMsg& lhs, const SgsApMsg& rhs) {
  return !(lhs == rhs);
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) SgsContext FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t sgs_state_;
  uint8_t vlr_reliable_;
  uint8_t neaf_;
  int8_t padding0__;
  magma::lte::test_flat_buffer::NasTimer ts6_1_timer_;
  magma::lte::test_flat_buffer::NasTimer ts8_timer_;
  uint32_t ts8_retransmission_count_;
  magma::lte::test_flat_buffer::NasTimer ts9_timer_;
  uint32_t ts9_retransmission_count_;
  magma::lte::test_flat_buffer::NasTimer ts10_timer_;
  uint32_t ts10_retransmission_count_;
  magma::lte::test_flat_buffer::NasTimer ts13_timer_;
  uint32_t ts13_retransmission_count_;
  magma::lte::test_flat_buffer::SgsApMsg sgsap_msg_;
  uint8_t ongoing_procedure_;
  uint8_t tau_active_flag_;
  uint8_t service_indicator_;
  uint8_t call_cancelled_;
  uint8_t mt_call_in_progress_;
  uint8_t is_emergency_call_;

 public:
  SgsContext()
      : sgs_state_(0),
        vlr_reliable_(0),
        neaf_(0),
        padding0__(0),
        ts6_1_timer_(),
        ts8_timer_(),
        ts8_retransmission_count_(0),
        ts9_timer_(),
        ts9_retransmission_count_(0),
        ts10_timer_(),
        ts10_retransmission_count_(0),
        ts13_timer_(),
        ts13_retransmission_count_(0),
        sgsap_msg_(),
        ongoing_procedure_(0),
        tau_active_flag_(0),
        service_indicator_(0),
        call_cancelled_(0),
        mt_call_in_progress_(0),
        is_emergency_call_(0) {
    (void) padding0__;
  }
  SgsContext(
      magma::lte::test_flat_buffer::SgsFsmState _sgs_state, bool _vlr_reliable,
      bool _neaf, const magma::lte::test_flat_buffer::NasTimer& _ts6_1_timer,
      const magma::lte::test_flat_buffer::NasTimer& _ts8_timer,
      uint32_t _ts8_retransmission_count,
      const magma::lte::test_flat_buffer::NasTimer& _ts9_timer,
      uint32_t _ts9_retransmission_count,
      const magma::lte::test_flat_buffer::NasTimer& _ts10_timer,
      uint32_t _ts10_retransmission_count,
      const magma::lte::test_flat_buffer::NasTimer& _ts13_timer,
      uint32_t _ts13_retransmission_count,
      const magma::lte::test_flat_buffer::SgsApMsg& _sgsap_msg,
      magma::lte::test_flat_buffer::OngoingProcedure _ongoing_procedure,
      bool _tau_active_flag, uint8_t _service_indicator, bool _call_cancelled,
      bool _mt_call_in_progress, bool _is_emergency_call)
      : sgs_state_(flatbuffers::EndianScalar(static_cast<uint8_t>(_sgs_state))),
        vlr_reliable_(
            flatbuffers::EndianScalar(static_cast<uint8_t>(_vlr_reliable))),
        neaf_(flatbuffers::EndianScalar(static_cast<uint8_t>(_neaf))),
        padding0__(0),
        ts6_1_timer_(_ts6_1_timer),
        ts8_timer_(_ts8_timer),
        ts8_retransmission_count_(
            flatbuffers::EndianScalar(_ts8_retransmission_count)),
        ts9_timer_(_ts9_timer),
        ts9_retransmission_count_(
            flatbuffers::EndianScalar(_ts9_retransmission_count)),
        ts10_timer_(_ts10_timer),
        ts10_retransmission_count_(
            flatbuffers::EndianScalar(_ts10_retransmission_count)),
        ts13_timer_(_ts13_timer),
        ts13_retransmission_count_(
            flatbuffers::EndianScalar(_ts13_retransmission_count)),
        sgsap_msg_(_sgsap_msg),
        ongoing_procedure_(flatbuffers::EndianScalar(
            static_cast<uint8_t>(_ongoing_procedure))),
        tau_active_flag_(
            flatbuffers::EndianScalar(static_cast<uint8_t>(_tau_active_flag))),
        service_indicator_(flatbuffers::EndianScalar(_service_indicator)),
        call_cancelled_(
            flatbuffers::EndianScalar(static_cast<uint8_t>(_call_cancelled))),
        mt_call_in_progress_(flatbuffers::EndianScalar(
            static_cast<uint8_t>(_mt_call_in_progress))),
        is_emergency_call_(flatbuffers::EndianScalar(
            static_cast<uint8_t>(_is_emergency_call))) {
    (void) padding0__;
  }
  magma::lte::test_flat_buffer::SgsFsmState sgs_state() const {
    return static_cast<magma::lte::test_flat_buffer::SgsFsmState>(
        flatbuffers::EndianScalar(sgs_state_));
  }
  void mutate_sgs_state(magma::lte::test_flat_buffer::SgsFsmState _sgs_state) {
    flatbuffers::WriteScalar(&sgs_state_, static_cast<uint8_t>(_sgs_state));
  }
  bool vlr_reliable() const {
    return flatbuffers::EndianScalar(vlr_reliable_) != 0;
  }
  void mutate_vlr_reliable(bool _vlr_reliable) {
    flatbuffers::WriteScalar(
        &vlr_reliable_, static_cast<uint8_t>(_vlr_reliable));
  }
  bool neaf() const { return flatbuffers::EndianScalar(neaf_) != 0; }
  void mutate_neaf(bool _neaf) {
    flatbuffers::WriteScalar(&neaf_, static_cast<uint8_t>(_neaf));
  }
  const magma::lte::test_flat_buffer::NasTimer& ts6_1_timer() const {
    return ts6_1_timer_;
  }
  magma::lte::test_flat_buffer::NasTimer& mutable_ts6_1_timer() {
    return ts6_1_timer_;
  }
  const magma::lte::test_flat_buffer::NasTimer& ts8_timer() const {
    return ts8_timer_;
  }
  magma::lte::test_flat_buffer::NasTimer& mutable_ts8_timer() {
    return ts8_timer_;
  }
  uint32_t ts8_retransmission_count() const {
    return flatbuffers::EndianScalar(ts8_retransmission_count_);
  }
  void mutate_ts8_retransmission_count(uint32_t _ts8_retransmission_count) {
    flatbuffers::WriteScalar(
        &ts8_retransmission_count_, _ts8_retransmission_count);
  }
  const magma::lte::test_flat_buffer::NasTimer& ts9_timer() const {
    return ts9_timer_;
  }
  magma::lte::test_flat_buffer::NasTimer& mutable_ts9_timer() {
    return ts9_timer_;
  }
  uint32_t ts9_retransmission_count() const {
    return flatbuffers::EndianScalar(ts9_retransmission_count_);
  }
  void mutate_ts9_retransmission_count(uint32_t _ts9_retransmission_count) {
    flatbuffers::WriteScalar(
        &ts9_retransmission_count_, _ts9_retransmission_count);
  }
  const magma::lte::test_flat_buffer::NasTimer& ts10_timer() const {
    return ts10_timer_;
  }
  magma::lte::test_flat_buffer::NasTimer& mutable_ts10_timer() {
    return ts10_timer_;
  }
  uint32_t ts10_retransmission_count() const {
    return flatbuffers::EndianScalar(ts10_retransmission_count_);
  }
  void mutate_ts10_retransmission_count(uint32_t _ts10_retransmission_count) {
    flatbuffers::WriteScalar(
        &ts10_retransmission_count_, _ts10_retransmission_count);
  }
  const magma::lte::test_flat_buffer::NasTimer& ts13_timer() const {
    return ts13_timer_;
  }
  magma::lte::test_flat_buffer::NasTimer& mutable_ts13_timer() {
    return ts13_timer_;
  }
  uint32_t ts13_retransmission_count() const {
    return flatbuffers::EndianScalar(ts13_retransmission_count_);
  }
  void mutate_ts13_retransmission_count(uint32_t _ts13_retransmission_count) {
    flatbuffers::WriteScalar(
        &ts13_retransmission_count_, _ts13_retransmission_count);
  }
  const magma::lte::test_flat_buffer::SgsApMsg& sgsap_msg() const {
    return sgsap_msg_;
  }
  magma::lte::test_flat_buffer::SgsApMsg& mutable_sgsap_msg() {
    return sgsap_msg_;
  }
  magma::lte::test_flat_buffer::OngoingProcedure ongoing_procedure() const {
    return static_cast<magma::lte::test_flat_buffer::OngoingProcedure>(
        flatbuffers::EndianScalar(ongoing_procedure_));
  }
  void mutate_ongoing_procedure(
      magma::lte::test_flat_buffer::OngoingProcedure _ongoing_procedure) {
    flatbuffers::WriteScalar(
        &ongoing_procedure_, static_cast<uint8_t>(_ongoing_procedure));
  }
  bool tau_active_flag() const {
    return flatbuffers::EndianScalar(tau_active_flag_) != 0;
  }
  void mutate_tau_active_flag(bool _tau_active_flag) {
    flatbuffers::WriteScalar(
        &tau_active_flag_, static_cast<uint8_t>(_tau_active_flag));
  }
  uint8_t service_indicator() const {
    return flatbuffers::EndianScalar(service_indicator_);
  }
  void mutate_service_indicator(uint8_t _service_indicator) {
    flatbuffers::WriteScalar(&service_indicator_, _service_indicator);
  }
  bool call_cancelled() const {
    return flatbuffers::EndianScalar(call_cancelled_) != 0;
  }
  void mutate_call_cancelled(bool _call_cancelled) {
    flatbuffers::WriteScalar(
        &call_cancelled_, static_cast<uint8_t>(_call_cancelled));
  }
  bool mt_call_in_progress() const {
    return flatbuffers::EndianScalar(mt_call_in_progress_) != 0;
  }
  void mutate_mt_call_in_progress(bool _mt_call_in_progress) {
    flatbuffers::WriteScalar(
        &mt_call_in_progress_, static_cast<uint8_t>(_mt_call_in_progress));
  }
  bool is_emergency_call() const {
    return flatbuffers::EndianScalar(is_emergency_call_) != 0;
  }
  void mutate_is_emergency_call(bool _is_emergency_call) {
    flatbuffers::WriteScalar(
        &is_emergency_call_, static_cast<uint8_t>(_is_emergency_call));
  }
};
FLATBUFFERS_STRUCT_END(SgsContext, 2116);

inline bool operator==(const SgsContext& lhs, const SgsContext& rhs) {
  return (lhs.sgs_state() == rhs.sgs_state()) &&
         (lhs.vlr_reliable() == rhs.vlr_reliable()) &&
         (lhs.neaf() == rhs.neaf()) &&
         (lhs.ts6_1_timer() == rhs.ts6_1_timer()) &&
         (lhs.ts8_timer() == rhs.ts8_timer()) &&
         (lhs.ts8_retransmission_count() == rhs.ts8_retransmission_count()) &&
         (lhs.ts9_timer() == rhs.ts9_timer()) &&
         (lhs.ts9_retransmission_count() == rhs.ts9_retransmission_count()) &&
         (lhs.ts10_timer() == rhs.ts10_timer()) &&
         (lhs.ts10_retransmission_count() == rhs.ts10_retransmission_count()) &&
         (lhs.ts13_timer() == rhs.ts13_timer()) &&
         (lhs.ts13_retransmission_count() == rhs.ts13_retransmission_count()) &&
         (lhs.sgsap_msg() == rhs.sgsap_msg()) &&
         (lhs.ongoing_procedure() == rhs.ongoing_procedure()) &&
         (lhs.tau_active_flag() == rhs.tau_active_flag()) &&
         (lhs.service_indicator() == rhs.service_indicator()) &&
         (lhs.call_cancelled() == rhs.call_cancelled()) &&
         (lhs.mt_call_in_progress() == rhs.mt_call_in_progress()) &&
         (lhs.is_emergency_call() == rhs.is_emergency_call());
}

inline bool operator!=(const SgsContext& lhs, const SgsContext& rhs) {
  return !(lhs == rhs);
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) PdnContextArray FLATBUFFERS_FINAL_CLASS {
 private:
  magma::lte::test_flat_buffer::PdnContext item_[10];

 public:
  PdnContextArray() : item_() {}
  PdnContextArray(
      flatbuffers::span<const magma::lte::test_flat_buffer::PdnContext, 10>
          _item) {
    flatbuffers::CastToArray(item_).CopyFromSpan(_item);
  }
  const flatbuffers::Array<magma::lte::test_flat_buffer::PdnContext, 10>* item()
      const {
    return &flatbuffers::CastToArray(item_);
  }
  flatbuffers::Array<magma::lte::test_flat_buffer::PdnContext, 10>*
  mutable_item() {
    return &flatbuffers::CastToArray(item_);
  }
};
FLATBUFFERS_STRUCT_END(PdnContextArray, 26720);

inline bool operator==(const PdnContextArray& lhs, const PdnContextArray& rhs) {
  return (lhs.item() == rhs.item());
}

inline bool operator!=(const PdnContextArray& lhs, const PdnContextArray& rhs) {
  return !(lhs == rhs);
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8)
BearerContextArray FLATBUFFERS_FINAL_CLASS {
 private:
  magma::lte::test_flat_buffer::BearerContext item_[11];

 public:
  BearerContextArray() : item_() {}
  BearerContextArray(
      flatbuffers::span<const magma::lte::test_flat_buffer::BearerContext, 11>
          _item) {
    flatbuffers::CastToArray(item_).CopyFromSpan(_item);
  }
  const flatbuffers::Array<magma::lte::test_flat_buffer::BearerContext, 11>*
  item() const {
    return &flatbuffers::CastToArray(item_);
  }
  flatbuffers::Array<magma::lte::test_flat_buffer::BearerContext, 11>*
  mutable_item() {
    return &flatbuffers::CastToArray(item_);
  }
};
FLATBUFFERS_STRUCT_END(BearerContextArray, 24288);

inline bool operator==(
    const BearerContextArray& lhs, const BearerContextArray& rhs) {
  return (lhs.item() == rhs.item());
}

inline bool operator!=(
    const BearerContextArray& lhs, const BearerContextArray& rhs) {
  return !(lhs == rhs);
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1)
RegionalSubscriptionArray FLATBUFFERS_FINAL_CLASS {
 private:
  magma::lte::test_flat_buffer::RegionalSubscription item_[10];

 public:
  RegionalSubscriptionArray() : item_() {}
  RegionalSubscriptionArray(
      flatbuffers::span<
          const magma::lte::test_flat_buffer::RegionalSubscription, 10>
          _item) {
    flatbuffers::CastToArray(item_).CopyFromSpan(_item);
  }
  const flatbuffers::Array<
      magma::lte::test_flat_buffer::RegionalSubscription, 10>*
  item() const {
    return &flatbuffers::CastToArray(item_);
  }
  flatbuffers::Array<magma::lte::test_flat_buffer::RegionalSubscription, 10>*
  mutable_item() {
    return &flatbuffers::CastToArray(item_);
  }
};
FLATBUFFERS_STRUCT_END(RegionalSubscriptionArray, 20);

inline bool operator==(
    const RegionalSubscriptionArray& lhs,
    const RegionalSubscriptionArray& rhs) {
  return (lhs.item() == rhs.item());
}

inline bool operator!=(
    const RegionalSubscriptionArray& lhs,
    const RegionalSubscriptionArray& rhs) {
  return !(lhs == rhs);
}

struct UeMmContext FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef UeMmContextBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MSISDN                                 = 4,
    VT_UE_CONTEXT_REL_CAUSE                   = 6,
    VT_MM_STATE                               = 8,
    VT_ECM_STATE                              = 10,
    VT_EMM_CONTEXT                            = 12,
    VT_SCTP_ASSOC_ID_KEY                      = 14,
    VT_ENB_UE_S1AP_ID                         = 16,
    VT_ENB_S1AP_ID_KEY                        = 18,
    VT_MME_UE_S1AP_ID                         = 20,
    VT_ATTACH_TYPE                            = 22,
    VT_SGS_DETACH_TYPE                        = 24,
    VT_E_UTRAN_CGI                            = 26,
    VT_CELL_AGE                               = 28,
    VT_LAI                                    = 30,
    VT_APN_CONFIG_PROFILE                     = 32,
    VT_SUBSCRIBER_STATUS                      = 34,
    VT_NETWORK_ACCESS_MODE                    = 36,
    VT_ACCESS_RESTRICTION_DATA                = 38,
    VT_APN_OI_REPLACEMENT                     = 40,
    VT_MME_TEID_S11                           = 42,
    VT_SUBSCRIBED_UE_AMBR                     = 44,
    VT_USED_UE_AMBR                           = 46,
    VT_NB_ACTIVE_PDN_CONTEXTS                 = 48,
    VT_PDN_CONTEXTS                           = 50,
    VT_BEARER_CONTEXTS                        = 52,
    VT_UE_RADIO_CAPABILITY                    = 54,
    VT_SEND_UE_PURGE_REQUEST                  = 56,
    VT_HSS_INITIATED_DETACH                   = 58,
    VT_LOCATION_INFO_CONFIRMED_IN_HSS         = 60,
    VT_PPF                                    = 62,
    VT_SUBSCRIPTION_KNOWN                     = 64,
    VT_PATH_SWITCH_REQ                        = 66,
    VT_GRANTED_SERVICE                        = 68,
    VT_NUM_REG_SUB                            = 70,
    VT_REG_SUB                                = 72,
    VT_CS_FALLBACK_INDICATOR                  = 74,
    VT_SGS_CONTEXT                            = 76,
    VT_RAU_TAU_TIMER                          = 78,
    VT_TIME_MOBILE_REACHABILITY_TIMER_STARTED = 80,
    VT_TIME_IMPLICIT_DETACH_TIMER_STARTED     = 82,
    VT_TIME_PAGING_RESPONSE_TIMER_STARTED     = 84,
    VT_PAGING_RETX_COUNT                      = 86,
    VT_TIME_ICS_RSP_TIMER_STARTED             = 88
  };
  const magma::lte::test_flat_buffer::Msisdn* msisdn() const {
    return GetStruct<const magma::lte::test_flat_buffer::Msisdn*>(VT_MSISDN);
  }
  magma::lte::test_flat_buffer::Msisdn* mutable_msisdn() {
    return GetStruct<magma::lte::test_flat_buffer::Msisdn*>(VT_MSISDN);
  }
  magma::lte::test_flat_buffer::S1Cause ue_context_rel_cause() const {
    return static_cast<magma::lte::test_flat_buffer::S1Cause>(
        GetField<uint32_t>(VT_UE_CONTEXT_REL_CAUSE, 0));
  }
  bool mutate_ue_context_rel_cause(
      magma::lte::test_flat_buffer::S1Cause _ue_context_rel_cause =
          static_cast<magma::lte::test_flat_buffer::S1Cause>(0)) {
    return SetField<uint32_t>(
        VT_UE_CONTEXT_REL_CAUSE, static_cast<uint32_t>(_ue_context_rel_cause),
        0);
  }
  magma::lte::test_flat_buffer::MmState mm_state() const {
    return static_cast<magma::lte::test_flat_buffer::MmState>(
        GetField<int8_t>(VT_MM_STATE, 0));
  }
  bool mutate_mm_state(
      magma::lte::test_flat_buffer::MmState _mm_state =
          static_cast<magma::lte::test_flat_buffer::MmState>(0)) {
    return SetField<int8_t>(VT_MM_STATE, static_cast<int8_t>(_mm_state), 0);
  }
  magma::lte::test_flat_buffer::EcmState ecm_state() const {
    return static_cast<magma::lte::test_flat_buffer::EcmState>(
        GetField<int8_t>(VT_ECM_STATE, 0));
  }
  bool mutate_ecm_state(
      magma::lte::test_flat_buffer::EcmState _ecm_state =
          static_cast<magma::lte::test_flat_buffer::EcmState>(0)) {
    return SetField<int8_t>(VT_ECM_STATE, static_cast<int8_t>(_ecm_state), 0);
  }
  const magma::lte::test_flat_buffer::EmmContext* emm_context() const {
    return GetStruct<const magma::lte::test_flat_buffer::EmmContext*>(
        VT_EMM_CONTEXT);
  }
  magma::lte::test_flat_buffer::EmmContext* mutable_emm_context() {
    return GetStruct<magma::lte::test_flat_buffer::EmmContext*>(VT_EMM_CONTEXT);
  }
  uint32_t sctp_assoc_id_key() const {
    return GetField<uint32_t>(VT_SCTP_ASSOC_ID_KEY, 0);
  }
  bool mutate_sctp_assoc_id_key(uint32_t _sctp_assoc_id_key = 0) {
    return SetField<uint32_t>(VT_SCTP_ASSOC_ID_KEY, _sctp_assoc_id_key, 0);
  }
  uint32_t enb_ue_s1ap_id() const {
    return GetField<uint32_t>(VT_ENB_UE_S1AP_ID, 0);
  }
  bool mutate_enb_ue_s1ap_id(uint32_t _enb_ue_s1ap_id = 0) {
    return SetField<uint32_t>(VT_ENB_UE_S1AP_ID, _enb_ue_s1ap_id, 0);
  }
  uint32_t enb_s1ap_id_key() const {
    return GetField<uint32_t>(VT_ENB_S1AP_ID_KEY, 0);
  }
  bool mutate_enb_s1ap_id_key(uint32_t _enb_s1ap_id_key = 0) {
    return SetField<uint32_t>(VT_ENB_S1AP_ID_KEY, _enb_s1ap_id_key, 0);
  }
  uint32_t mme_ue_s1ap_id() const {
    return GetField<uint32_t>(VT_MME_UE_S1AP_ID, 0);
  }
  bool mutate_mme_ue_s1ap_id(uint32_t _mme_ue_s1ap_id = 0) {
    return SetField<uint32_t>(VT_MME_UE_S1AP_ID, _mme_ue_s1ap_id, 0);
  }
  uint8_t attach_type() const { return GetField<uint8_t>(VT_ATTACH_TYPE, 0); }
  bool mutate_attach_type(uint8_t _attach_type = 0) {
    return SetField<uint8_t>(VT_ATTACH_TYPE, _attach_type, 0);
  }
  uint8_t sgs_detach_type() const {
    return GetField<uint8_t>(VT_SGS_DETACH_TYPE, 0);
  }
  bool mutate_sgs_detach_type(uint8_t _sgs_detach_type = 0) {
    return SetField<uint8_t>(VT_SGS_DETACH_TYPE, _sgs_detach_type, 0);
  }
  const magma::lte::test_flat_buffer::Ecgi* e_utran_cgi() const {
    return GetStruct<const magma::lte::test_flat_buffer::Ecgi*>(VT_E_UTRAN_CGI);
  }
  magma::lte::test_flat_buffer::Ecgi* mutable_e_utran_cgi() {
    return GetStruct<magma::lte::test_flat_buffer::Ecgi*>(VT_E_UTRAN_CGI);
  }
  uint64_t cell_age() const { return GetField<uint64_t>(VT_CELL_AGE, 0); }
  bool mutate_cell_age(uint64_t _cell_age = 0) {
    return SetField<uint64_t>(VT_CELL_AGE, _cell_age, 0);
  }
  const magma::lte::test_flat_buffer::Lai* lai() const {
    return GetStruct<const magma::lte::test_flat_buffer::Lai*>(VT_LAI);
  }
  magma::lte::test_flat_buffer::Lai* mutable_lai() {
    return GetStruct<magma::lte::test_flat_buffer::Lai*>(VT_LAI);
  }
  const magma::lte::test_flat_buffer::ApnConfigProfile* apn_config_profile()
      const {
    return GetStruct<const magma::lte::test_flat_buffer::ApnConfigProfile*>(
        VT_APN_CONFIG_PROFILE);
  }
  magma::lte::test_flat_buffer::ApnConfigProfile* mutable_apn_config_profile() {
    return GetStruct<magma::lte::test_flat_buffer::ApnConfigProfile*>(
        VT_APN_CONFIG_PROFILE);
  }
  magma::lte::test_flat_buffer::SubscriberStatus subscriber_status() const {
    return static_cast<magma::lte::test_flat_buffer::SubscriberStatus>(
        GetField<uint8_t>(VT_SUBSCRIBER_STATUS, 0));
  }
  bool mutate_subscriber_status(
      magma::lte::test_flat_buffer::SubscriberStatus _subscriber_status =
          static_cast<magma::lte::test_flat_buffer::SubscriberStatus>(0)) {
    return SetField<uint8_t>(
        VT_SUBSCRIBER_STATUS, static_cast<uint8_t>(_subscriber_status), 0);
  }
  magma::lte::test_flat_buffer::NetworkAccessMode network_access_mode() const {
    return static_cast<magma::lte::test_flat_buffer::NetworkAccessMode>(
        GetField<uint8_t>(VT_NETWORK_ACCESS_MODE, 0));
  }
  bool mutate_network_access_mode(
      magma::lte::test_flat_buffer::NetworkAccessMode _network_access_mode =
          static_cast<magma::lte::test_flat_buffer::NetworkAccessMode>(0)) {
    return SetField<uint8_t>(
        VT_NETWORK_ACCESS_MODE, static_cast<uint8_t>(_network_access_mode), 0);
  }
  uint32_t access_restriction_data() const {
    return GetField<uint32_t>(VT_ACCESS_RESTRICTION_DATA, 0);
  }
  bool mutate_access_restriction_data(uint32_t _access_restriction_data = 0) {
    return SetField<uint32_t>(
        VT_ACCESS_RESTRICTION_DATA, _access_restriction_data, 0);
  }
  const magma::lte::test_flat_buffer::ApnOi* apn_oi_replacement() const {
    return GetStruct<const magma::lte::test_flat_buffer::ApnOi*>(
        VT_APN_OI_REPLACEMENT);
  }
  magma::lte::test_flat_buffer::ApnOi* mutable_apn_oi_replacement() {
    return GetStruct<magma::lte::test_flat_buffer::ApnOi*>(
        VT_APN_OI_REPLACEMENT);
  }
  uint32_t mme_teid_s11() const {
    return GetField<uint32_t>(VT_MME_TEID_S11, 0);
  }
  bool mutate_mme_teid_s11(uint32_t _mme_teid_s11 = 0) {
    return SetField<uint32_t>(VT_MME_TEID_S11, _mme_teid_s11, 0);
  }
  const magma::lte::test_flat_buffer::Ambr* subscribed_ue_ambr() const {
    return GetStruct<const magma::lte::test_flat_buffer::Ambr*>(
        VT_SUBSCRIBED_UE_AMBR);
  }
  magma::lte::test_flat_buffer::Ambr* mutable_subscribed_ue_ambr() {
    return GetStruct<magma::lte::test_flat_buffer::Ambr*>(
        VT_SUBSCRIBED_UE_AMBR);
  }
  const magma::lte::test_flat_buffer::Ambr* used_ue_ambr() const {
    return GetStruct<const magma::lte::test_flat_buffer::Ambr*>(
        VT_USED_UE_AMBR);
  }
  magma::lte::test_flat_buffer::Ambr* mutable_used_ue_ambr() {
    return GetStruct<magma::lte::test_flat_buffer::Ambr*>(VT_USED_UE_AMBR);
  }
  uint8_t nb_active_pdn_contexts() const {
    return GetField<uint8_t>(VT_NB_ACTIVE_PDN_CONTEXTS, 0);
  }
  bool mutate_nb_active_pdn_contexts(uint8_t _nb_active_pdn_contexts = 0) {
    return SetField<uint8_t>(
        VT_NB_ACTIVE_PDN_CONTEXTS, _nb_active_pdn_contexts, 0);
  }
  const magma::lte::test_flat_buffer::PdnContextArray* pdn_contexts() const {
    return GetStruct<const magma::lte::test_flat_buffer::PdnContextArray*>(
        VT_PDN_CONTEXTS);
  }
  magma::lte::test_flat_buffer::PdnContextArray* mutable_pdn_contexts() {
    return GetStruct<magma::lte::test_flat_buffer::PdnContextArray*>(
        VT_PDN_CONTEXTS);
  }
  const magma::lte::test_flat_buffer::BearerContextArray* bearer_contexts()
      const {
    return GetStruct<const magma::lte::test_flat_buffer::BearerContextArray*>(
        VT_BEARER_CONTEXTS);
  }
  magma::lte::test_flat_buffer::BearerContextArray* mutable_bearer_contexts() {
    return GetStruct<magma::lte::test_flat_buffer::BearerContextArray*>(
        VT_BEARER_CONTEXTS);
  }
  const magma::lte::test_flat_buffer::UeRadioCapability* ue_radio_capability()
      const {
    return GetStruct<const magma::lte::test_flat_buffer::UeRadioCapability*>(
        VT_UE_RADIO_CAPABILITY);
  }
  magma::lte::test_flat_buffer::UeRadioCapability*
  mutable_ue_radio_capability() {
    return GetStruct<magma::lte::test_flat_buffer::UeRadioCapability*>(
        VT_UE_RADIO_CAPABILITY);
  }
  bool send_ue_purge_request() const {
    return GetField<uint8_t>(VT_SEND_UE_PURGE_REQUEST, 0) != 0;
  }
  bool mutate_send_ue_purge_request(bool _send_ue_purge_request = 0) {
    return SetField<uint8_t>(
        VT_SEND_UE_PURGE_REQUEST, static_cast<uint8_t>(_send_ue_purge_request),
        0);
  }
  bool hss_initiated_detach() const {
    return GetField<uint8_t>(VT_HSS_INITIATED_DETACH, 0) != 0;
  }
  bool mutate_hss_initiated_detach(bool _hss_initiated_detach = 0) {
    return SetField<uint8_t>(
        VT_HSS_INITIATED_DETACH, static_cast<uint8_t>(_hss_initiated_detach),
        0);
  }
  bool location_info_confirmed_in_hss() const {
    return GetField<uint8_t>(VT_LOCATION_INFO_CONFIRMED_IN_HSS, 0) != 0;
  }
  bool mutate_location_info_confirmed_in_hss(
      bool _location_info_confirmed_in_hss = 0) {
    return SetField<uint8_t>(
        VT_LOCATION_INFO_CONFIRMED_IN_HSS,
        static_cast<uint8_t>(_location_info_confirmed_in_hss), 0);
  }
  bool ppf() const { return GetField<uint8_t>(VT_PPF, 0) != 0; }
  bool mutate_ppf(bool _ppf = 0) {
    return SetField<uint8_t>(VT_PPF, static_cast<uint8_t>(_ppf), 0);
  }
  bool subscription_known() const {
    return GetField<uint8_t>(VT_SUBSCRIPTION_KNOWN, 0) != 0;
  }
  bool mutate_subscription_known(bool _subscription_known = 0) {
    return SetField<uint8_t>(
        VT_SUBSCRIPTION_KNOWN, static_cast<uint8_t>(_subscription_known), 0);
  }
  bool path_switch_req() const {
    return GetField<uint8_t>(VT_PATH_SWITCH_REQ, 0) != 0;
  }
  bool mutate_path_switch_req(bool _path_switch_req = 0) {
    return SetField<uint8_t>(
        VT_PATH_SWITCH_REQ, static_cast<uint8_t>(_path_switch_req), 0);
  }
  magma::lte::test_flat_buffer::GrantedService granted_service() const {
    return static_cast<magma::lte::test_flat_buffer::GrantedService>(
        GetField<uint8_t>(VT_GRANTED_SERVICE, 0));
  }
  bool mutate_granted_service(
      magma::lte::test_flat_buffer::GrantedService _granted_service =
          static_cast<magma::lte::test_flat_buffer::GrantedService>(0)) {
    return SetField<uint8_t>(
        VT_GRANTED_SERVICE, static_cast<uint8_t>(_granted_service), 0);
  }
  uint8_t num_reg_sub() const { return GetField<uint8_t>(VT_NUM_REG_SUB, 0); }
  bool mutate_num_reg_sub(uint8_t _num_reg_sub = 0) {
    return SetField<uint8_t>(VT_NUM_REG_SUB, _num_reg_sub, 0);
  }
  const magma::lte::test_flat_buffer::RegionalSubscriptionArray* reg_sub()
      const {
    return GetStruct<
        const magma::lte::test_flat_buffer::RegionalSubscriptionArray*>(
        VT_REG_SUB);
  }
  magma::lte::test_flat_buffer::RegionalSubscriptionArray* mutable_reg_sub() {
    return GetStruct<magma::lte::test_flat_buffer::RegionalSubscriptionArray*>(
        VT_REG_SUB);
  }
  int32_t cs_fallback_indicator() const {
    return GetField<int32_t>(VT_CS_FALLBACK_INDICATOR, 0);
  }
  bool mutate_cs_fallback_indicator(int32_t _cs_fallback_indicator = 0) {
    return SetField<int32_t>(
        VT_CS_FALLBACK_INDICATOR, _cs_fallback_indicator, 0);
  }
  const magma::lte::test_flat_buffer::SgsContext* sgs_context() const {
    return GetStruct<const magma::lte::test_flat_buffer::SgsContext*>(
        VT_SGS_CONTEXT);
  }
  magma::lte::test_flat_buffer::SgsContext* mutable_sgs_context() {
    return GetStruct<magma::lte::test_flat_buffer::SgsContext*>(VT_SGS_CONTEXT);
  }
  uint32_t rau_tau_timer() const {
    return GetField<uint32_t>(VT_RAU_TAU_TIMER, 0);
  }
  bool mutate_rau_tau_timer(uint32_t _rau_tau_timer = 0) {
    return SetField<uint32_t>(VT_RAU_TAU_TIMER, _rau_tau_timer, 0);
  }
  uint32_t time_mobile_reachability_timer_started() const {
    return GetField<uint32_t>(VT_TIME_MOBILE_REACHABILITY_TIMER_STARTED, 0);
  }
  bool mutate_time_mobile_reachability_timer_started(
      uint32_t _time_mobile_reachability_timer_started = 0) {
    return SetField<uint32_t>(
        VT_TIME_MOBILE_REACHABILITY_TIMER_STARTED,
        _time_mobile_reachability_timer_started, 0);
  }
  uint32_t time_implicit_detach_timer_started() const {
    return GetField<uint32_t>(VT_TIME_IMPLICIT_DETACH_TIMER_STARTED, 0);
  }
  bool mutate_time_implicit_detach_timer_started(
      uint32_t _time_implicit_detach_timer_started = 0) {
    return SetField<uint32_t>(
        VT_TIME_IMPLICIT_DETACH_TIMER_STARTED,
        _time_implicit_detach_timer_started, 0);
  }
  uint32_t time_paging_response_timer_started() const {
    return GetField<uint32_t>(VT_TIME_PAGING_RESPONSE_TIMER_STARTED, 0);
  }
  bool mutate_time_paging_response_timer_started(
      uint32_t _time_paging_response_timer_started = 0) {
    return SetField<uint32_t>(
        VT_TIME_PAGING_RESPONSE_TIMER_STARTED,
        _time_paging_response_timer_started, 0);
  }
  uint8_t paging_retx_count() const {
    return GetField<uint8_t>(VT_PAGING_RETX_COUNT, 0);
  }
  bool mutate_paging_retx_count(uint8_t _paging_retx_count = 0) {
    return SetField<uint8_t>(VT_PAGING_RETX_COUNT, _paging_retx_count, 0);
  }
  uint32_t time_ics_rsp_timer_started() const {
    return GetField<uint32_t>(VT_TIME_ICS_RSP_TIMER_STARTED, 0);
  }
  bool mutate_time_ics_rsp_timer_started(
      uint32_t _time_ics_rsp_timer_started = 0) {
    return SetField<uint32_t>(
        VT_TIME_ICS_RSP_TIMER_STARTED, _time_ics_rsp_timer_started, 0);
  }
  bool Verify(flatbuffers::Verifier& verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<magma::lte::test_flat_buffer::Msisdn>(
               verifier, VT_MSISDN) &&
           VerifyField<uint32_t>(verifier, VT_UE_CONTEXT_REL_CAUSE) &&
           VerifyField<int8_t>(verifier, VT_MM_STATE) &&
           VerifyField<int8_t>(verifier, VT_ECM_STATE) &&
           VerifyField<magma::lte::test_flat_buffer::EmmContext>(
               verifier, VT_EMM_CONTEXT) &&
           VerifyField<uint32_t>(verifier, VT_SCTP_ASSOC_ID_KEY) &&
           VerifyField<uint32_t>(verifier, VT_ENB_UE_S1AP_ID) &&
           VerifyField<uint32_t>(verifier, VT_ENB_S1AP_ID_KEY) &&
           VerifyField<uint32_t>(verifier, VT_MME_UE_S1AP_ID) &&
           VerifyField<uint8_t>(verifier, VT_ATTACH_TYPE) &&
           VerifyField<uint8_t>(verifier, VT_SGS_DETACH_TYPE) &&
           VerifyField<magma::lte::test_flat_buffer::Ecgi>(
               verifier, VT_E_UTRAN_CGI) &&
           VerifyField<uint64_t>(verifier, VT_CELL_AGE) &&
           VerifyField<magma::lte::test_flat_buffer::Lai>(verifier, VT_LAI) &&
           VerifyField<magma::lte::test_flat_buffer::ApnConfigProfile>(
               verifier, VT_APN_CONFIG_PROFILE) &&
           VerifyField<uint8_t>(verifier, VT_SUBSCRIBER_STATUS) &&
           VerifyField<uint8_t>(verifier, VT_NETWORK_ACCESS_MODE) &&
           VerifyField<uint32_t>(verifier, VT_ACCESS_RESTRICTION_DATA) &&
           VerifyField<magma::lte::test_flat_buffer::ApnOi>(
               verifier, VT_APN_OI_REPLACEMENT) &&
           VerifyField<uint32_t>(verifier, VT_MME_TEID_S11) &&
           VerifyField<magma::lte::test_flat_buffer::Ambr>(
               verifier, VT_SUBSCRIBED_UE_AMBR) &&
           VerifyField<magma::lte::test_flat_buffer::Ambr>(
               verifier, VT_USED_UE_AMBR) &&
           VerifyField<uint8_t>(verifier, VT_NB_ACTIVE_PDN_CONTEXTS) &&
           VerifyField<magma::lte::test_flat_buffer::PdnContextArray>(
               verifier, VT_PDN_CONTEXTS) &&
           VerifyField<magma::lte::test_flat_buffer::BearerContextArray>(
               verifier, VT_BEARER_CONTEXTS) &&
           VerifyField<magma::lte::test_flat_buffer::UeRadioCapability>(
               verifier, VT_UE_RADIO_CAPABILITY) &&
           VerifyField<uint8_t>(verifier, VT_SEND_UE_PURGE_REQUEST) &&
           VerifyField<uint8_t>(verifier, VT_HSS_INITIATED_DETACH) &&
           VerifyField<uint8_t>(verifier, VT_LOCATION_INFO_CONFIRMED_IN_HSS) &&
           VerifyField<uint8_t>(verifier, VT_PPF) &&
           VerifyField<uint8_t>(verifier, VT_SUBSCRIPTION_KNOWN) &&
           VerifyField<uint8_t>(verifier, VT_PATH_SWITCH_REQ) &&
           VerifyField<uint8_t>(verifier, VT_GRANTED_SERVICE) &&
           VerifyField<uint8_t>(verifier, VT_NUM_REG_SUB) &&
           VerifyField<magma::lte::test_flat_buffer::RegionalSubscriptionArray>(
               verifier, VT_REG_SUB) &&
           VerifyField<int32_t>(verifier, VT_CS_FALLBACK_INDICATOR) &&
           VerifyField<magma::lte::test_flat_buffer::SgsContext>(
               verifier, VT_SGS_CONTEXT) &&
           VerifyField<uint32_t>(verifier, VT_RAU_TAU_TIMER) &&
           VerifyField<uint32_t>(
               verifier, VT_TIME_MOBILE_REACHABILITY_TIMER_STARTED) &&
           VerifyField<uint32_t>(
               verifier, VT_TIME_IMPLICIT_DETACH_TIMER_STARTED) &&
           VerifyField<uint32_t>(
               verifier, VT_TIME_PAGING_RESPONSE_TIMER_STARTED) &&
           VerifyField<uint8_t>(verifier, VT_PAGING_RETX_COUNT) &&
           VerifyField<uint32_t>(verifier, VT_TIME_ICS_RSP_TIMER_STARTED) &&
           verifier.EndTable();
  }
};

struct UeMmContextBuilder {
  typedef UeMmContext Table;
  flatbuffers::FlatBufferBuilder& fbb_;
  flatbuffers::uoffset_t start_;
  void add_msisdn(const magma::lte::test_flat_buffer::Msisdn* msisdn) {
    fbb_.AddStruct(UeMmContext::VT_MSISDN, msisdn);
  }
  void add_ue_context_rel_cause(
      magma::lte::test_flat_buffer::S1Cause ue_context_rel_cause) {
    fbb_.AddElement<uint32_t>(
        UeMmContext::VT_UE_CONTEXT_REL_CAUSE,
        static_cast<uint32_t>(ue_context_rel_cause), 0);
  }
  void add_mm_state(magma::lte::test_flat_buffer::MmState mm_state) {
    fbb_.AddElement<int8_t>(
        UeMmContext::VT_MM_STATE, static_cast<int8_t>(mm_state), 0);
  }
  void add_ecm_state(magma::lte::test_flat_buffer::EcmState ecm_state) {
    fbb_.AddElement<int8_t>(
        UeMmContext::VT_ECM_STATE, static_cast<int8_t>(ecm_state), 0);
  }
  void add_emm_context(
      const magma::lte::test_flat_buffer::EmmContext* emm_context) {
    fbb_.AddStruct(UeMmContext::VT_EMM_CONTEXT, emm_context);
  }
  void add_sctp_assoc_id_key(uint32_t sctp_assoc_id_key) {
    fbb_.AddElement<uint32_t>(
        UeMmContext::VT_SCTP_ASSOC_ID_KEY, sctp_assoc_id_key, 0);
  }
  void add_enb_ue_s1ap_id(uint32_t enb_ue_s1ap_id) {
    fbb_.AddElement<uint32_t>(
        UeMmContext::VT_ENB_UE_S1AP_ID, enb_ue_s1ap_id, 0);
  }
  void add_enb_s1ap_id_key(uint32_t enb_s1ap_id_key) {
    fbb_.AddElement<uint32_t>(
        UeMmContext::VT_ENB_S1AP_ID_KEY, enb_s1ap_id_key, 0);
  }
  void add_mme_ue_s1ap_id(uint32_t mme_ue_s1ap_id) {
    fbb_.AddElement<uint32_t>(
        UeMmContext::VT_MME_UE_S1AP_ID, mme_ue_s1ap_id, 0);
  }
  void add_attach_type(uint8_t attach_type) {
    fbb_.AddElement<uint8_t>(UeMmContext::VT_ATTACH_TYPE, attach_type, 0);
  }
  void add_sgs_detach_type(uint8_t sgs_detach_type) {
    fbb_.AddElement<uint8_t>(
        UeMmContext::VT_SGS_DETACH_TYPE, sgs_detach_type, 0);
  }
  void add_e_utran_cgi(const magma::lte::test_flat_buffer::Ecgi* e_utran_cgi) {
    fbb_.AddStruct(UeMmContext::VT_E_UTRAN_CGI, e_utran_cgi);
  }
  void add_cell_age(uint64_t cell_age) {
    fbb_.AddElement<uint64_t>(UeMmContext::VT_CELL_AGE, cell_age, 0);
  }
  void add_lai(const magma::lte::test_flat_buffer::Lai* lai) {
    fbb_.AddStruct(UeMmContext::VT_LAI, lai);
  }
  void add_apn_config_profile(
      const magma::lte::test_flat_buffer::ApnConfigProfile*
          apn_config_profile) {
    fbb_.AddStruct(UeMmContext::VT_APN_CONFIG_PROFILE, apn_config_profile);
  }
  void add_subscriber_status(
      magma::lte::test_flat_buffer::SubscriberStatus subscriber_status) {
    fbb_.AddElement<uint8_t>(
        UeMmContext::VT_SUBSCRIBER_STATUS,
        static_cast<uint8_t>(subscriber_status), 0);
  }
  void add_network_access_mode(
      magma::lte::test_flat_buffer::NetworkAccessMode network_access_mode) {
    fbb_.AddElement<uint8_t>(
        UeMmContext::VT_NETWORK_ACCESS_MODE,
        static_cast<uint8_t>(network_access_mode), 0);
  }
  void add_access_restriction_data(uint32_t access_restriction_data) {
    fbb_.AddElement<uint32_t>(
        UeMmContext::VT_ACCESS_RESTRICTION_DATA, access_restriction_data, 0);
  }
  void add_apn_oi_replacement(
      const magma::lte::test_flat_buffer::ApnOi* apn_oi_replacement) {
    fbb_.AddStruct(UeMmContext::VT_APN_OI_REPLACEMENT, apn_oi_replacement);
  }
  void add_mme_teid_s11(uint32_t mme_teid_s11) {
    fbb_.AddElement<uint32_t>(UeMmContext::VT_MME_TEID_S11, mme_teid_s11, 0);
  }
  void add_subscribed_ue_ambr(
      const magma::lte::test_flat_buffer::Ambr* subscribed_ue_ambr) {
    fbb_.AddStruct(UeMmContext::VT_SUBSCRIBED_UE_AMBR, subscribed_ue_ambr);
  }
  void add_used_ue_ambr(
      const magma::lte::test_flat_buffer::Ambr* used_ue_ambr) {
    fbb_.AddStruct(UeMmContext::VT_USED_UE_AMBR, used_ue_ambr);
  }
  void add_nb_active_pdn_contexts(uint8_t nb_active_pdn_contexts) {
    fbb_.AddElement<uint8_t>(
        UeMmContext::VT_NB_ACTIVE_PDN_CONTEXTS, nb_active_pdn_contexts, 0);
  }
  void add_pdn_contexts(
      const magma::lte::test_flat_buffer::PdnContextArray* pdn_contexts) {
    fbb_.AddStruct(UeMmContext::VT_PDN_CONTEXTS, pdn_contexts);
  }
  void add_bearer_contexts(
      const magma::lte::test_flat_buffer::BearerContextArray* bearer_contexts) {
    fbb_.AddStruct(UeMmContext::VT_BEARER_CONTEXTS, bearer_contexts);
  }
  void add_ue_radio_capability(
      const magma::lte::test_flat_buffer::UeRadioCapability*
          ue_radio_capability) {
    fbb_.AddStruct(UeMmContext::VT_UE_RADIO_CAPABILITY, ue_radio_capability);
  }
  void add_send_ue_purge_request(bool send_ue_purge_request) {
    fbb_.AddElement<uint8_t>(
        UeMmContext::VT_SEND_UE_PURGE_REQUEST,
        static_cast<uint8_t>(send_ue_purge_request), 0);
  }
  void add_hss_initiated_detach(bool hss_initiated_detach) {
    fbb_.AddElement<uint8_t>(
        UeMmContext::VT_HSS_INITIATED_DETACH,
        static_cast<uint8_t>(hss_initiated_detach), 0);
  }
  void add_location_info_confirmed_in_hss(bool location_info_confirmed_in_hss) {
    fbb_.AddElement<uint8_t>(
        UeMmContext::VT_LOCATION_INFO_CONFIRMED_IN_HSS,
        static_cast<uint8_t>(location_info_confirmed_in_hss), 0);
  }
  void add_ppf(bool ppf) {
    fbb_.AddElement<uint8_t>(UeMmContext::VT_PPF, static_cast<uint8_t>(ppf), 0);
  }
  void add_subscription_known(bool subscription_known) {
    fbb_.AddElement<uint8_t>(
        UeMmContext::VT_SUBSCRIPTION_KNOWN,
        static_cast<uint8_t>(subscription_known), 0);
  }
  void add_path_switch_req(bool path_switch_req) {
    fbb_.AddElement<uint8_t>(
        UeMmContext::VT_PATH_SWITCH_REQ, static_cast<uint8_t>(path_switch_req),
        0);
  }
  void add_granted_service(
      magma::lte::test_flat_buffer::GrantedService granted_service) {
    fbb_.AddElement<uint8_t>(
        UeMmContext::VT_GRANTED_SERVICE, static_cast<uint8_t>(granted_service),
        0);
  }
  void add_num_reg_sub(uint8_t num_reg_sub) {
    fbb_.AddElement<uint8_t>(UeMmContext::VT_NUM_REG_SUB, num_reg_sub, 0);
  }
  void add_reg_sub(
      const magma::lte::test_flat_buffer::RegionalSubscriptionArray* reg_sub) {
    fbb_.AddStruct(UeMmContext::VT_REG_SUB, reg_sub);
  }
  void add_cs_fallback_indicator(int32_t cs_fallback_indicator) {
    fbb_.AddElement<int32_t>(
        UeMmContext::VT_CS_FALLBACK_INDICATOR, cs_fallback_indicator, 0);
  }
  void add_sgs_context(
      const magma::lte::test_flat_buffer::SgsContext* sgs_context) {
    fbb_.AddStruct(UeMmContext::VT_SGS_CONTEXT, sgs_context);
  }
  void add_rau_tau_timer(uint32_t rau_tau_timer) {
    fbb_.AddElement<uint32_t>(UeMmContext::VT_RAU_TAU_TIMER, rau_tau_timer, 0);
  }
  void add_time_mobile_reachability_timer_started(
      uint32_t time_mobile_reachability_timer_started) {
    fbb_.AddElement<uint32_t>(
        UeMmContext::VT_TIME_MOBILE_REACHABILITY_TIMER_STARTED,
        time_mobile_reachability_timer_started, 0);
  }
  void add_time_implicit_detach_timer_started(
      uint32_t time_implicit_detach_timer_started) {
    fbb_.AddElement<uint32_t>(
        UeMmContext::VT_TIME_IMPLICIT_DETACH_TIMER_STARTED,
        time_implicit_detach_timer_started, 0);
  }
  void add_time_paging_response_timer_started(
      uint32_t time_paging_response_timer_started) {
    fbb_.AddElement<uint32_t>(
        UeMmContext::VT_TIME_PAGING_RESPONSE_TIMER_STARTED,
        time_paging_response_timer_started, 0);
  }
  void add_paging_retx_count(uint8_t paging_retx_count) {
    fbb_.AddElement<uint8_t>(
        UeMmContext::VT_PAGING_RETX_COUNT, paging_retx_count, 0);
  }
  void add_time_ics_rsp_timer_started(uint32_t time_ics_rsp_timer_started) {
    fbb_.AddElement<uint32_t>(
        UeMmContext::VT_TIME_ICS_RSP_TIMER_STARTED, time_ics_rsp_timer_started,
        0);
  }
  explicit UeMmContextBuilder(flatbuffers::FlatBufferBuilder& _fbb)
      : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<UeMmContext> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o         = flatbuffers::Offset<UeMmContext>(end);
    return o;
  }
};

inline flatbuffers::Offset<UeMmContext> CreateUeMmContext(
    flatbuffers::FlatBufferBuilder& _fbb,
    const magma::lte::test_flat_buffer::Msisdn* msisdn = nullptr,
    magma::lte::test_flat_buffer::S1Cause ue_context_rel_cause =
        magma::lte::test_flat_buffer::S1Cause_S1AP_INVALID_CAUSE,
    magma::lte::test_flat_buffer::MmState mm_state =
        magma::lte::test_flat_buffer::MmState_UE_UNREGISTERED,
    magma::lte::test_flat_buffer::EcmState ecm_state =
        magma::lte::test_flat_buffer::EcmState_ECM_IDLE,
    const magma::lte::test_flat_buffer::EmmContext* emm_context = nullptr,
    uint32_t sctp_assoc_id_key = 0, uint32_t enb_ue_s1ap_id = 0,
    uint32_t enb_s1ap_id_key = 0, uint32_t mme_ue_s1ap_id = 0,
    uint8_t attach_type = 0, uint8_t sgs_detach_type = 0,
    const magma::lte::test_flat_buffer::Ecgi* e_utran_cgi = nullptr,
    uint64_t cell_age                                     = 0,
    const magma::lte::test_flat_buffer::Lai* lai          = nullptr,
    const magma::lte::test_flat_buffer::ApnConfigProfile* apn_config_profile =
        nullptr,
    magma::lte::test_flat_buffer::SubscriberStatus subscriber_status =
        magma::lte::test_flat_buffer::SubscriberStatus_SS_SERVICE_GRANTED,
    magma::lte::test_flat_buffer::NetworkAccessMode network_access_mode =
        magma::lte::test_flat_buffer::NetworkAccessMode_NAM_PACKET_AND_CIRCUIT,
    uint32_t access_restriction_data                                  = 0,
    const magma::lte::test_flat_buffer::ApnOi* apn_oi_replacement     = nullptr,
    uint32_t mme_teid_s11                                             = 0,
    const magma::lte::test_flat_buffer::Ambr* subscribed_ue_ambr      = nullptr,
    const magma::lte::test_flat_buffer::Ambr* used_ue_ambr            = nullptr,
    uint8_t nb_active_pdn_contexts                                    = 0,
    const magma::lte::test_flat_buffer::PdnContextArray* pdn_contexts = nullptr,
    const magma::lte::test_flat_buffer::BearerContextArray* bearer_contexts =
        nullptr,
    const magma::lte::test_flat_buffer::UeRadioCapability* ue_radio_capability =
        nullptr,
    bool send_ue_purge_request = false, bool hss_initiated_detach = false,
    bool location_info_confirmed_in_hss = false, bool ppf = false,
    bool subscription_known = false, bool path_switch_req = false,
    magma::lte::test_flat_buffer::GrantedService granted_service =
        magma::lte::test_flat_buffer::GrantedService_GRANTED_SERVICE_EPS_ONLY,
    uint8_t num_reg_sub = 0,
    const magma::lte::test_flat_buffer::RegionalSubscriptionArray* reg_sub =
        nullptr,
    int32_t cs_fallback_indicator                               = 0,
    const magma::lte::test_flat_buffer::SgsContext* sgs_context = nullptr,
    uint32_t rau_tau_timer                                      = 0,
    uint32_t time_mobile_reachability_timer_started             = 0,
    uint32_t time_implicit_detach_timer_started                 = 0,
    uint32_t time_paging_response_timer_started                 = 0,
    uint8_t paging_retx_count = 0, uint32_t time_ics_rsp_timer_started = 0) {
  UeMmContextBuilder builder_(_fbb);
  builder_.add_cell_age(cell_age);
  builder_.add_time_ics_rsp_timer_started(time_ics_rsp_timer_started);
  builder_.add_time_paging_response_timer_started(
      time_paging_response_timer_started);
  builder_.add_time_implicit_detach_timer_started(
      time_implicit_detach_timer_started);
  builder_.add_time_mobile_reachability_timer_started(
      time_mobile_reachability_timer_started);
  builder_.add_rau_tau_timer(rau_tau_timer);
  builder_.add_sgs_context(sgs_context);
  builder_.add_cs_fallback_indicator(cs_fallback_indicator);
  builder_.add_reg_sub(reg_sub);
  builder_.add_ue_radio_capability(ue_radio_capability);
  builder_.add_bearer_contexts(bearer_contexts);
  builder_.add_pdn_contexts(pdn_contexts);
  builder_.add_used_ue_ambr(used_ue_ambr);
  builder_.add_subscribed_ue_ambr(subscribed_ue_ambr);
  builder_.add_mme_teid_s11(mme_teid_s11);
  builder_.add_apn_oi_replacement(apn_oi_replacement);
  builder_.add_access_restriction_data(access_restriction_data);
  builder_.add_apn_config_profile(apn_config_profile);
  builder_.add_lai(lai);
  builder_.add_e_utran_cgi(e_utran_cgi);
  builder_.add_mme_ue_s1ap_id(mme_ue_s1ap_id);
  builder_.add_enb_s1ap_id_key(enb_s1ap_id_key);
  builder_.add_enb_ue_s1ap_id(enb_ue_s1ap_id);
  builder_.add_sctp_assoc_id_key(sctp_assoc_id_key);
  builder_.add_emm_context(emm_context);
  builder_.add_ue_context_rel_cause(ue_context_rel_cause);
  builder_.add_msisdn(msisdn);
  builder_.add_paging_retx_count(paging_retx_count);
  builder_.add_num_reg_sub(num_reg_sub);
  builder_.add_granted_service(granted_service);
  builder_.add_path_switch_req(path_switch_req);
  builder_.add_subscription_known(subscription_known);
  builder_.add_ppf(ppf);
  builder_.add_location_info_confirmed_in_hss(location_info_confirmed_in_hss);
  builder_.add_hss_initiated_detach(hss_initiated_detach);
  builder_.add_send_ue_purge_request(send_ue_purge_request);
  builder_.add_nb_active_pdn_contexts(nb_active_pdn_contexts);
  builder_.add_network_access_mode(network_access_mode);
  builder_.add_subscriber_status(subscriber_status);
  builder_.add_sgs_detach_type(sgs_detach_type);
  builder_.add_attach_type(attach_type);
  builder_.add_ecm_state(ecm_state);
  builder_.add_mm_state(mm_state);
  return builder_.Finish();
}

inline const magma::lte::test_flat_buffer::UeMmContext* GetUeMmContext(
    const void* buf) {
  return flatbuffers::GetRoot<magma::lte::test_flat_buffer::UeMmContext>(buf);
}

inline const magma::lte::test_flat_buffer::UeMmContext*
GetSizePrefixedUeMmContext(const void* buf) {
  return flatbuffers::GetSizePrefixedRoot<
      magma::lte::test_flat_buffer::UeMmContext>(buf);
}

inline UeMmContext* GetMutableUeMmContext(void* buf) {
  return flatbuffers::GetMutableRoot<UeMmContext>(buf);
}

inline magma::lte::test_flat_buffer::UeMmContext*
GetMutableSizePrefixedUeMmContext(void* buf) {
  return flatbuffers::GetMutableSizePrefixedRoot<
      magma::lte::test_flat_buffer::UeMmContext>(buf);
}

inline bool VerifyUeMmContextBuffer(flatbuffers::Verifier& verifier) {
  return verifier.VerifyBuffer<magma::lte::test_flat_buffer::UeMmContext>(
      nullptr);
}

inline bool VerifySizePrefixedUeMmContextBuffer(
    flatbuffers::Verifier& verifier) {
  return verifier
      .VerifySizePrefixedBuffer<magma::lte::test_flat_buffer::UeMmContext>(
          nullptr);
}

inline void FinishUeMmContextBuffer(
    flatbuffers::FlatBufferBuilder& fbb,
    flatbuffers::Offset<magma::lte::test_flat_buffer::UeMmContext> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedUeMmContextBuffer(
    flatbuffers::FlatBufferBuilder& fbb,
    flatbuffers::Offset<magma::lte::test_flat_buffer::UeMmContext> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace test_flat_buffer
}  // namespace lte
}  // namespace magma

#endif  // FLATBUFFERS_GENERATED_MMEUESTATE_MAGMA_LTE_TEST_FLAT_BUFFER_H_
