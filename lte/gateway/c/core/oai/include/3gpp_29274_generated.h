// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_3GPP29274_MAGMA_LTE_TEST_FLAT_BUFFER_H_
#define FLATBUFFERS_GENERATED_3GPP29274_MAGMA_LTE_TEST_FLAT_BUFFER_H_

#include "flatbuffers/flatbuffers.h"

#include "common_types_generated.h"

namespace magma {
namespace lte {
namespace test_flat_buffer {

struct BearerQos;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) BearerQos FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t pci_;
  uint8_t pl_;
  uint8_t pvi_;
  uint8_t qci_;
  int32_t padding0__;
  magma::lte::test_flat_buffer::Ambr gbr_;
  magma::lte::test_flat_buffer::Ambr mbr_;

 public:
  BearerQos()
      : pci_(0), pl_(0), pvi_(0), qci_(0), padding0__(0), gbr_(), mbr_() {
    (void) padding0__;
  }
  BearerQos(
      bool _pci, uint8_t _pl, bool _pvi, uint8_t _qci,
      const magma::lte::test_flat_buffer::Ambr& _gbr,
      const magma::lte::test_flat_buffer::Ambr& _mbr)
      : pci_(flatbuffers::EndianScalar(static_cast<uint8_t>(_pci))),
        pl_(flatbuffers::EndianScalar(_pl)),
        pvi_(flatbuffers::EndianScalar(static_cast<uint8_t>(_pvi))),
        qci_(flatbuffers::EndianScalar(_qci)),
        padding0__(0),
        gbr_(_gbr),
        mbr_(_mbr) {
    (void) padding0__;
  }
  bool pci() const { return flatbuffers::EndianScalar(pci_) != 0; }
  void mutate_pci(bool _pci) {
    flatbuffers::WriteScalar(&pci_, static_cast<uint8_t>(_pci));
  }
  uint8_t pl() const { return flatbuffers::EndianScalar(pl_); }
  void mutate_pl(uint8_t _pl) { flatbuffers::WriteScalar(&pl_, _pl); }
  bool pvi() const { return flatbuffers::EndianScalar(pvi_) != 0; }
  void mutate_pvi(bool _pvi) {
    flatbuffers::WriteScalar(&pvi_, static_cast<uint8_t>(_pvi));
  }
  uint8_t qci() const { return flatbuffers::EndianScalar(qci_); }
  void mutate_qci(uint8_t _qci) { flatbuffers::WriteScalar(&qci_, _qci); }
  const magma::lte::test_flat_buffer::Ambr& gbr() const { return gbr_; }
  magma::lte::test_flat_buffer::Ambr& mutable_gbr() { return gbr_; }
  const magma::lte::test_flat_buffer::Ambr& mbr() const { return mbr_; }
  magma::lte::test_flat_buffer::Ambr& mutable_mbr() { return mbr_; }
};
FLATBUFFERS_STRUCT_END(BearerQos, 56);

inline bool operator==(const BearerQos& lhs, const BearerQos& rhs) {
  return (lhs.pci() == rhs.pci()) && (lhs.pl() == rhs.pl()) &&
         (lhs.pvi() == rhs.pvi()) && (lhs.qci() == rhs.qci()) &&
         (lhs.gbr() == rhs.gbr()) && (lhs.mbr() == rhs.mbr());
}

inline bool operator!=(const BearerQos& lhs, const BearerQos& rhs) {
  return !(lhs == rhs);
}

}  // namespace test_flat_buffer
}  // namespace lte
}  // namespace magma

#endif  // FLATBUFFERS_GENERATED_3GPP29274_MAGMA_LTE_TEST_FLAT_BUFFER_H_
