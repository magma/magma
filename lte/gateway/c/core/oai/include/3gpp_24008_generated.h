// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_3GPP24008_MAGMA_LTE_TEST_FLAT_BUFFER_H_
#define FLATBUFFERS_GENERATED_3GPP24008_MAGMA_LTE_TEST_FLAT_BUFFER_H_

#include "flatbuffers/flatbuffers.h"

namespace magma {
namespace lte {
namespace test_flat_buffer {

struct MsNetworkCapability;

struct PcoProtocolOrContainerId;

struct ProtocolConfigurationOptions;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1)
MsNetworkCapability FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t bytes_[10];
  uint8_t length_;

 public:
  MsNetworkCapability() : bytes_(), length_(0) {}
  MsNetworkCapability(uint8_t _length)
      : bytes_(), length_(flatbuffers::EndianScalar(_length)) {}
  MsNetworkCapability(
      flatbuffers::span<const uint8_t, 10> _bytes, uint8_t _length)
      : length_(flatbuffers::EndianScalar(_length)) {
    flatbuffers::CastToArray(bytes_).CopyFromSpan(_bytes);
  }
  const flatbuffers::Array<uint8_t, 10>* bytes() const {
    return &flatbuffers::CastToArray(bytes_);
  }
  flatbuffers::Array<uint8_t, 10>* mutable_bytes() {
    return &flatbuffers::CastToArray(bytes_);
  }
  uint8_t length() const { return flatbuffers::EndianScalar(length_); }
  void mutate_length(uint8_t _length) {
    flatbuffers::WriteScalar(&length_, _length);
  }
};
FLATBUFFERS_STRUCT_END(MsNetworkCapability, 11);

inline bool operator==(
    const MsNetworkCapability& lhs, const MsNetworkCapability& rhs) {
  return (lhs.bytes() == rhs.bytes()) && (lhs.length() == rhs.length());
}

inline bool operator!=(
    const MsNetworkCapability& lhs, const MsNetworkCapability& rhs) {
  return !(lhs == rhs);
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(2)
PcoProtocolOrContainerId FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t id_;
  uint8_t length_;
  uint8_t contents_[64];
  int8_t padding0__;

 public:
  PcoProtocolOrContainerId() : id_(0), length_(0), contents_(), padding0__(0) {
    (void) padding0__;
  }
  PcoProtocolOrContainerId(uint16_t _id, uint8_t _length)
      : id_(flatbuffers::EndianScalar(_id)),
        length_(flatbuffers::EndianScalar(_length)),
        contents_(),
        padding0__(0) {
    (void) padding0__;
  }
  PcoProtocolOrContainerId(
      uint16_t _id, uint8_t _length,
      flatbuffers::span<const uint8_t, 64> _contents)
      : id_(flatbuffers::EndianScalar(_id)),
        length_(flatbuffers::EndianScalar(_length)),
        padding0__(0) {
    flatbuffers::CastToArray(contents_).CopyFromSpan(_contents);
    (void) padding0__;
  }
  uint16_t id() const { return flatbuffers::EndianScalar(id_); }
  void mutate_id(uint16_t _id) { flatbuffers::WriteScalar(&id_, _id); }
  uint8_t length() const { return flatbuffers::EndianScalar(length_); }
  void mutate_length(uint8_t _length) {
    flatbuffers::WriteScalar(&length_, _length);
  }
  const flatbuffers::Array<uint8_t, 64>* contents() const {
    return &flatbuffers::CastToArray(contents_);
  }
  flatbuffers::Array<uint8_t, 64>* mutable_contents() {
    return &flatbuffers::CastToArray(contents_);
  }
};
FLATBUFFERS_STRUCT_END(PcoProtocolOrContainerId, 68);

inline bool operator==(
    const PcoProtocolOrContainerId& lhs, const PcoProtocolOrContainerId& rhs) {
  return (lhs.id() == rhs.id()) && (lhs.length() == rhs.length()) &&
         (lhs.contents() == rhs.contents());
}

inline bool operator!=(
    const PcoProtocolOrContainerId& lhs, const PcoProtocolOrContainerId& rhs) {
  return !(lhs == rhs);
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(2)
ProtocolConfigurationOptions FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t ext_;
  uint8_t configuration_protocol_;
  uint8_t num_protocol_or_container_id_;
  int8_t padding0__;
  magma::lte::test_flat_buffer::PcoProtocolOrContainerId
      protocol_or_container_ids_[30];

 public:
  ProtocolConfigurationOptions()
      : ext_(0),
        configuration_protocol_(0),
        num_protocol_or_container_id_(0),
        padding0__(0),
        protocol_or_container_ids_() {
    (void) padding0__;
  }
  ProtocolConfigurationOptions(
      bool _ext, uint8_t _configuration_protocol,
      uint8_t _num_protocol_or_container_id)
      : ext_(flatbuffers::EndianScalar(static_cast<uint8_t>(_ext))),
        configuration_protocol_(
            flatbuffers::EndianScalar(_configuration_protocol)),
        num_protocol_or_container_id_(
            flatbuffers::EndianScalar(_num_protocol_or_container_id)),
        padding0__(0),
        protocol_or_container_ids_() {
    (void) padding0__;
  }
  ProtocolConfigurationOptions(
      bool _ext, uint8_t _configuration_protocol,
      uint8_t _num_protocol_or_container_id,
      flatbuffers::span<
          const magma::lte::test_flat_buffer::PcoProtocolOrContainerId, 30>
          _protocol_or_container_ids)
      : ext_(flatbuffers::EndianScalar(static_cast<uint8_t>(_ext))),
        configuration_protocol_(
            flatbuffers::EndianScalar(_configuration_protocol)),
        num_protocol_or_container_id_(
            flatbuffers::EndianScalar(_num_protocol_or_container_id)),
        padding0__(0) {
    (void) padding0__;
    flatbuffers::CastToArray(protocol_or_container_ids_)
        .CopyFromSpan(_protocol_or_container_ids);
  }
  bool ext() const { return flatbuffers::EndianScalar(ext_) != 0; }
  void mutate_ext(bool _ext) {
    flatbuffers::WriteScalar(&ext_, static_cast<uint8_t>(_ext));
  }
  uint8_t configuration_protocol() const {
    return flatbuffers::EndianScalar(configuration_protocol_);
  }
  void mutate_configuration_protocol(uint8_t _configuration_protocol) {
    flatbuffers::WriteScalar(&configuration_protocol_, _configuration_protocol);
  }
  uint8_t num_protocol_or_container_id() const {
    return flatbuffers::EndianScalar(num_protocol_or_container_id_);
  }
  void mutate_num_protocol_or_container_id(
      uint8_t _num_protocol_or_container_id) {
    flatbuffers::WriteScalar(
        &num_protocol_or_container_id_, _num_protocol_or_container_id);
  }
  /// #define PCO_UNSPEC_MAXIMUM_PROTOCOL_ID_OR_CONTAINER_ID 30
  const flatbuffers::Array<
      magma::lte::test_flat_buffer::PcoProtocolOrContainerId, 30>*
  protocol_or_container_ids() const {
    return &flatbuffers::CastToArray(protocol_or_container_ids_);
  }
  flatbuffers::Array<
      magma::lte::test_flat_buffer::PcoProtocolOrContainerId, 30>*
  mutable_protocol_or_container_ids() {
    return &flatbuffers::CastToArray(protocol_or_container_ids_);
  }
};
FLATBUFFERS_STRUCT_END(ProtocolConfigurationOptions, 2044);

inline bool operator==(
    const ProtocolConfigurationOptions& lhs,
    const ProtocolConfigurationOptions& rhs) {
  return (lhs.ext() == rhs.ext()) &&
         (lhs.configuration_protocol() == rhs.configuration_protocol()) &&
         (lhs.num_protocol_or_container_id() ==
          rhs.num_protocol_or_container_id()) &&
         (lhs.protocol_or_container_ids() == rhs.protocol_or_container_ids());
}

inline bool operator!=(
    const ProtocolConfigurationOptions& lhs,
    const ProtocolConfigurationOptions& rhs) {
  return !(lhs == rhs);
}

}  // namespace test_flat_buffer
}  // namespace lte
}  // namespace magma

#endif  // FLATBUFFERS_GENERATED_3GPP24008_MAGMA_LTE_TEST_FLAT_BUFFER_H_
