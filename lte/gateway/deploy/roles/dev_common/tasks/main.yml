---
# Copyright 2020 The Magma Authors.

# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Check that Ansible version is >=2.2
  assert:
    that: ansible_version.major > 2 or
      (ansible_version.major == 2 and ansible_version.minor >= 2)
    msg: "Ansible upgrade needed. Current version is {{ ansible_version.full }}"
  when: preburn

- name: Install ansible for Ubuntu systems
  when: preburn and ansible_distribution == "Ubuntu"
  apt:
    state: present
    pkg:
      - ansible
  retries: 5

- name: Copy ssh keepAlive configs
  copy: src={{ item.src }} dest={{ item.dest }}
  become: yes
  with_items:
    - {src: 'sshd_config', dest: '/etc/ssh/sshd_config'}
  when: preburn

- name: Restart service ssh
  become: yes
  service:
    name: ssh
    state: restarted
  when: preburn

- name: Install ansible community collection
  shell: su - {{ ansible_user }} -c 'ansible-galaxy collection install community.general'
  ignore_errors: yes

- name: Set build environment variables
  lineinfile:
    dest: /etc/environment
    state: present
    line: "{{ item }}"
  with_items:
    -  MAGMA_ROOT={{ magma_root }}
    -  OAI_BUILD={{ oai_build }}
    -  C_BUILD={{ c_build }}
    -  GO_BUILD={{ go_build }}
    -  CCACHE_DIR="{{magma_root}}/.cache/gateway/ccache"
    -  MAGMA_DEV_MODE=1
    -  XDG_CACHE_HOME="{{magma_root}}/.cache"
    -  SWAGGER_CODEGEN_JAR={{ swagger_codegen_jar }}
    -  CODEGEN_ROOT={{ codegen_root }}
    -  ASAN_OPTIONS=abort_on_error=1:disable_coredump=0:unmap_shadow_on_exit=1
  when: full_provision

- name: "Go export"
  lineinfile:
    dest: "/home/{{ ansible_user }}/.profile"
    state: present
    line: "{{ item }}"
  with_items:
    - export PATH=$PATH:"/usr/local/go/bin"

- name: Create the ccache directory
  file:
    path: "{{magma_root}}/.cache/gateway/ccache"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  when: full_provision

#################################
# Add common convenience aliases
#################################

- name: Set a convenience function for disabling TCP checksumming for traffic test
  lineinfile:
    dest: /home/{{ ansible_user }}/.bashrc
    state: present
    line: "alias disable-tcp-checksumming='sudo ethtool --offload eth1 rx off tx off; sudo ethtool --offload eth2 rx off tx off'"
  when: full_provision

##############################
# Install dependency packages
##############################

- name: Install convenience packages for development
  apt:
    state: present
    update_cache: no
    pkg:
      - byobu
      - vim
      - aptitude
  retries: 5
  when: preburn

- name: Install debugger packages
  apt:
    pkg: gdb
    state: present
    update_cache: no
  retries: 5
  when: preburn

- name: Install monitoring packages
  apt:
    state: present
    update_cache: no
    pkg:
      - htop
      - iotop
  retries: 5
  when: preburn

# TODO: remove this after migrating magma_test box image to plain Debian
- name: Install lxml
  apt: pkg=python3-lxml state=present update_cache=no
  when: preburn

- name: Install prereqs for FPM
  tags: dev
  apt:
    state: present
    update_cache: no
    pkg:
      - ruby
      - ruby-dev
      - build-essential
      - rubygems
      - libffi-dev
      - python3-setuptools
      - python-setuptools
      - libssl-dev
      - apt-transport-https
  retries: 5
  when: preburn

- name: Setup FPM so we can build packages
  tags: dev
  shell: gem install fpm
  when: preburn

- name: Common install dependencies for building and shipping client release
  tags: dev
  apt:
    state: present
    update_cache: no
    pkg:
      - autogen
      - autoconf
      - build-essential
      - ccache
      - clang-format-7
      - ninja-build
      - git
      - libtool
      - python3-apt
      - python3-setuptools
      - python3-requests
      - python3-pip
      - python3-debian
      - net-tools # ifconfig
      - tcpdump
      - curl
  retries: 5
  when: preburn

- name: Install build requirements for Debian systems
  when: preburn and ansible_distribution == "Debian"
  apt:
    state: present
    pkg:
      - clang-3.8
      - python3-aioeventlet
  retries: 5

- name: Install build requirements for Ubuntu systems
  # python3-aioeventlet manually built with fpm and uploaded to jfrog focal-dev repo
  # due to upstream versioning bug
  when: preburn and ansible_distribution == "Ubuntu"
  apt:
    state: present
    pkg:
      - clang
      - cmake
      - make
      - python3-aioeventlet
  retries: 5

# /etc/environment doesn't expand variables, so if we want to modify the path,
# we need to do it in profile.d
- name: Create the env script
  file:
    path: /etc/profile.d/env.sh
    state: touch
  when: full_provision

- name: Override the default compiler with cache
  lineinfile:
    dest: /etc/profile.d/env.sh
    state: present
    line: "{{ item }}"
  with_items:
    - PATH="/usr/lib/ccache:{{ ansible_env.PATH }}"
  when: full_provision

########################################
# Install common Magma dev dependencies
########################################

- name: Install common Magma gateway dev dependencies
  apt:
    state: present
    update_cache: yes
    pkg:
      # install gRPC
      - grpc-dev
      # install protobuf
      - libprotobuf-dev
      - libprotoc-dev
      - libxml2-dev
      - libxslt-dev
      - protobuf-compiler
      # install ethtool for disabling TCP checksumming
      - ethtool
      - ifupdown
      - libffi-dev
      - iperf3
      - libsystemd-dev
      - pkg-config
      - libpcap-dev
      - libtins-dev
      - libmnl-dev
      - libcurl4-openssl-dev
  retries: 5
  when: preburn

- name: Install Debian Magma gateway dev dependencies
  retries: 5
  when: preburn and ansible_distribution == "Debian"
  apt:
    state: present
    update_cache: no
    pkg:
      - libprotobuf10
      - libprotobuf-lite10
      - libprotoc10
      - libssl1.0-dev

- name: Install Ubuntu Magma gateway dev dependencies
  retries: 5
  when: preburn and ansible_distribution == "Ubuntu"
  apt:
    state: present
    update_cache: no
    pkg:
      - libprotobuf17
      - libprotobuf-lite17
      - libprotoc17
      - libssl-dev

###############################################
# Download and build libprotobuf-mutator
###############################################

- name: Clone libprotobuf-mutator repo
  become: yes
  git:
    repo: 'https://github.com/google/libprotobuf-mutator'
    dest: "{{ tmp_libprotobuf_mutator_dir }}"
    version: v1.0
    force: yes
  when: preburn and ansible_distribution == "Ubuntu"

- name: Create a build directory for libprotobuf-mutator
  file:
    path: "{{ tmp_libprotobuf_mutator_dir }}/build"
    state: directory
  when: preburn and ansible_distribution == "Ubuntu"

# Fails build unless we add -DLIB_PROTO_MUTATOR_DOWNLOAD_PROTOBUF=ON
#  to download and build updated proto lib.
- name: Build libprotobuf-mutator
  become: yes
  shell: |
    cd {{ tmp_libprotobuf_mutator_dir }}/build && \
    cmake .. -GNinja -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_BUILD_TYPE=Debug -DLIB_PROTO_MUTATOR_DOWNLOAD_PROTOBUF=ON && \
    ninja && \
    ninja install
  when: preburn and ansible_distribution == "Ubuntu"

###############################################
# Download and build sentry-native
###############################################

- name: Install Sentry Native SDK
  vars:
    sentry_native_version: "0.4.9"
  get_url:
    url: "https://github.com/getsentry/sentry-native/releases/download/{{ sentry_native_version }}/sentry-native.zip"
    dest: "{{ tmp_directory }}/sentry-native.zip"
  when: preburn and ansible_distribution == "Ubuntu"

- name: Create a directory for Sentry Native
  file:
    path: "{{ tmp_directory }}/sentry-native"
    state: directory
  when: preburn and ansible_distribution == "Ubuntu"

- name: Unpack Sentry Native SDK
  unarchive:
    src: "{{ tmp_directory }}/sentry-native.zip"
    dest: "{{ tmp_directory }}/sentry-native"
    remote_src: yes
  when: preburn and ansible_distribution == "Ubuntu"

- name: Build and Install Sentry Native SDK
  shell: |
    cd {{ tmp_directory }}/sentry-native && \
    cmake -B build -DCMAKE_BUILD_TYPE=RelWithDebInfo && \
    cmake --build build --parallel && \
    cmake --install build --prefix install --config RelWithDebInfo && \
    cd build && make install
  when: preburn and ansible_distribution == "Ubuntu"

###############################################
# Download and build swagger-codegen
###############################################

- name: Clone swagger-codegen repo
  become: yes
  git:
    repo: 'https://github.com/swagger-api/swagger-codegen'
    dest: "{{ codegen_root }}"
    version: v2.2.3
    force: yes
  when: preburn

- name: Setup build requirements for python sdk
  become: yes
  apt:
    pkg: openjdk-8-jdk
    state: present
    update_cache: yes
  retries: 5
  when: preburn

- name: Download maven
  get_url:
    url: "http://mirrors.ibiblio.org/apache/maven/maven-3/{{ mvn_version }}/binaries/apache-maven-{{ mvn_version }}-bin.tar.gz"
    dest: "{{ mvn_dir }}-bin.tar.gz"
    checksum: "sha1:{{ mvn_sha1 }}"
  when: preburn

- name: Unarchive maven
  unarchive:
    src: "{{ mvn_dir }}-bin.tar.gz"
    dest: /var/tmp
    remote_src: yes
  when: preburn

- name: Upload script to build swagger-codegen
  become: yes
  copy:
    src: build_swagger_codegen.sh
    dest: /var/tmp/build_swagger_codegen.sh
    mode: 0755
  when: preburn

- name: Build swagger code-gen
  become: yes
  command: "/var/tmp/build_swagger_codegen.sh"
  args:
    creates: "{{ swagger_codegen_jar }}"
  environment:
    M2_HOME: "{{ mvn_dir }}"
    CODEGEN_ROOT: "{{ codegen_root }}"
  when: preburn

- name: Download gHZ binary from artifactory
  get_url:
    url: https://artifactory.magmacore.org:443/artifactory/blob-prod/ghz
    dest: /usr/local/bin/ghz
    mode: 0755
  when: full_provision

- name: Fix kernel commandline for interface naming.
  shell: |
    sed -i 's/enp0s3/eth0/g' /etc/netplan/50-cloud-init.yaml
    sed -i 's/GRUB_CMDLINE_LINUX=""/GRUB_CMDLINE_LINUX="net.ifnames=0 biosdevname=0"/g' /etc/default/grub
    grub-mkconfig -o /boot/grub/grub.cfg
  when: preburn

- name: Create links for clang-format
  become: yes
  command: "update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-7 1000"
  when: preburn

- file:
    path: /var/tmp/test_results
    state: directory
    mode: 0777

- name: Patch multipath conf
  when: preburn and ansible_distribution == "Ubuntu"
  patch:
    src: patches/multipath-conf.patch
    dest: /etc/multipath.conf

- name: Copy Interface file.
  copy:
    src: magma_interfaces
    dest: /etc/network/interfaces
  when: preburn and ansible_distribution == "Ubuntu"

- name: Remove netplan and enable networking.
  shell: |
    systemctl unmask networking
    systemctl enable networking
    apt-get --assume-yes purge nplan netplan.i
  when: preburn
  ignore_errors: true

- name: Copy Resolve file.
  copy:
    src: magma_resolv.conf
    dest: /etc/systemd/resolved.conf
  when: preburn and ansible_distribution == "Ubuntu"
