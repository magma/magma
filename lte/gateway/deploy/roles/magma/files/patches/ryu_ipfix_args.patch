--- a/ryu/ofproto/nx_actions.py
+++ b/ryu/ofproto/nx_actions.py
@@ -2149,16 +2149,24 @@ def generate(ofp_name, ofpp_name):
                                                collector_set_id=1,
                                                obs_domain_id=2,
                                                obs_point_id=3,
+                                               apn_mac_addr=[10,0,2,0,0,5],
+                                               msisdn=b'magmaIsTheBest',
+                                               apn_name=b'big_tower123',
+                                               pdp_start_epoch=b'90\x00\x00\x00\x00\x00\x00',
                                                sampling_port=8080)]
         """
         _subtype = nicira_ext.NXAST_SAMPLE2

         # probability, collector_set_id, obs_domain_id,
-        # obs_point_id, sampling_port
-        _fmt_str = '!HIIIH6x'
+        # obs_point_id, msisdn, apn_mac_addr, apn_name, sampling_port
+        _fmt_str = '!HIIIH16s6B24s8s6x'

         def __init__(self,
                      probability,
+                     msisdn,
+                     apn_mac_addr,
+                     apn_name,
+                     pdp_start_epoch,
                      collector_set_id=0,
                      obs_domain_id=0,
                      obs_point_id=0,
@@ -2171,15 +2179,36 @@ def generate(ofp_name, ofpp_name):
             self.obs_point_id = obs_point_id
             self.sampling_port = sampling_port

+            self.msisdn = msisdn
+            self.apn_mac_addr = apn_mac_addr
+            self.apn_name = apn_name
+            self.pdp_start_epoch = pdp_start_epoch
+
+
         @classmethod
         def parser(cls, buf):
             (probability,
              collector_set_id,
              obs_domain_id,
              obs_point_id,
-             sampling_port) = struct.unpack_from(
+             sampling_port,
+             msisdn,
+             apn_mac_addr_0,
+             apn_mac_addr_1,
+             apn_mac_addr_2,
+             apn_mac_addr_3,
+             apn_mac_addr_4,
+             apn_mac_addr_5,
+             apn_name,
+             pdp_start_epoch) = struct.unpack_from(
                 cls._fmt_str, buf, 0)
+
+            apn_mac_addr = [apn_mac_addr_0, apn_mac_addr_1, apn_mac_addr_2, apn_mac_addr_3, apn_mac_addr_4, apn_mac_addr_5]
             return cls(probability,
+                       msisdn,
+                       apn_mac_addr,
+                       apn_name,
+                       pdp_start_epoch,
                        collector_set_id,
                        obs_domain_id,
                        obs_point_id,
@@ -2192,7 +2221,12 @@ def generate(ofp_name, ofpp_name):
                           self.collector_set_id,
                           self.obs_domain_id,
                           self.obs_point_id,
-                          self.sampling_port)
+                          self.sampling_port,
+                          self.msisdn,
+                          *self.apn_mac_addr,
+                          self.apn_name,
+                          self.pdp_start_epoch)
+
             return data

     class NXActionFinTimeout(NXAction):
