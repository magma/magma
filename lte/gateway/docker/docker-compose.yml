version: "3.7"

# Standard logging for each service
x-logging: &logging_anchor
  driver: ${LOG_DRIVER}

# Standard volumes mounted
x-standard-volumes: &volumes_anchor
  - ${CONFIGS_DEFAULT_VOLUME}:/etc/magma/
  - ${CONFIGS_TEMPLATES_PATH}:/etc/magma/templates
  - ${ROOTCA_PATH}:/var/opt/magma/certs/rootCA.pem
  - ${CERTS_VOLUME}:/var/opt/magma/certs
  - ${CONFIGS_OVERRIDE_VOLUME}:/var/opt/magma/configs
  - ${SNOWFLAKE_PATH}:/etc/snowflake

x-generic-service: &service
  volumes: *volumes_anchor
  logging: *logging_anchor
  restart: always
  network_mode: host

# Generic python anchor to avoid repetition for agw python services
x-agw-python-service: &pyservice
  <<: *service

# Generic anchor for lte c services
x-lte-cservice: &ltecservice
  <<: *service
  image: ${DOCKER_REGISTRY}gateway_c:${IMAGE_VERSION}

services:
  magmad:
    <<: *pyservice
    container_name: magmad
    image: magmad:${IMAGE_VERSION}
    environment:
      DOCKER_REGISTRY: ${DOCKER_REGISTRY}
      DOCKER_USERNAME: ${DOCKER_USERNAME}
      DOCKER_PASSWORD: ${DOCKER_PASSWORD}
  mobilityd:
    <<: *pyservice
    container_name: mobilityd
    image: mobilityd:${IMAGE_VERSION}
    depends_on:
      - redis
  directoryd:
    <<: *pyservice
    container_name: directoryd
    image: directoryd:${IMAGE_VERSION}
    depends_on:
      - redis
  subscriberdb:
    <<: *pyservice
    container_name: subscriberdb
    image: subscriberdb:${IMAGE_VERSION}
  policydb:
    <<: *pyservice
    container_name: policydb
    image: policydb:${IMAGE_VERSION}
    depends_on:
      - redis
  pipelined:
    <<: *pyservice
    container_name: pipelined
    image: pipelined:${IMAGE_VERSION}

  state:
    <<: *pyservice
    container_name: state
    image: state:${IMAGE_VERSION}
    depends_on:
      - redis
  eventd:
    <<: *pyservice
    container_name: eventd
    image: eventd:${IMAGE_VERSION}
  control_proxy:
    <<: *pyservice
    container_name: control_proxy
    image: control_proxy:${IMAGE_VERSION}
  ctraced:
    <<: *pyservice
    container_name: ctraced
    image: ctraced:${IMAGE_VERSION}


  sessiond:
    <<: *ltecservice
    container_name: sessiond
    ulimits:
      core: -1
    security_opt:
      - seccomp:unconfined
    privileged: true
    environment:
      MAGMA_PRINT_GRPC_PAYLOAD: 1
    healthcheck:
      test: ["CMD", "nc", "-zv", "localhost","50065"]
      timeout: "4s"
      retries: 3
    command: >
      sh -c "mkdir -p /var/opt/magma/cores &&
        sysctl -w kernel.core_pattern=/var/opt/magma/cores/core.%e.%t &&
        /usr/local/bin/sessiond"

  sctpd:
    <<: *ltecservice
    container_name: sctpd
    environment:
      MAGMA_PRINT_GRPC_PAYLOAD: 1
    command: /usr/local/bin/sctpd

  connectiond:
    <<: *ltecservice
    container_name: connectiond
    privileged: true
    command: /usr/local/bin/connectiond

  liagentd:
    <<: *ltecservice
    container_name: liagentd
    privileged: true
    command: /usr/local/bin/liagentd

  mme:
    <<: *ltecservice
    container_name: oai_mme
    ulimits:
      core: -1
    security_opt:
      - seccomp:unconfined
    privileged: true
    command: /usr/local/bin/mme -c /var/opt/magma/tmp/mme.conf -s /var/opt/magma/tmp/spgw.conf

  #envoy_controller:
  #  <<: *cservice
  #  container_name: envoy_controller
  #  image: envoy_controller:${IMAGE_VERSION}


  # pipelined:
  #   <<: *pyservice
  #   container_name: mobilityd

  # Prototype ??
  # ovs:
  #   image: openvswitch
  #   container_name: ovs

  redis:
    image: 'bitnami/redis:${IMAGE_VERSION}'
    container_name: redis
    networks:
      - agw
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
  # dnsmasq:
  #   image: storytel/dnsmasq
  #   container_name: dnsmasq
  #   networks:
  #     - agw
  #   cap_add:
  #     - NET_ADMIN

  # connectiond:
  #   <<: *pyservice
  #   container_name: connectiond
  #   healthcheck:
  #     test: ["CMD", "nc", "-zv", "localhost","9109"]
  #     timeout: "4s"
  #     retries: 3
  #   command: envdir /var/opt/magma/envdir /var/opt/magma/bin/aaa_server -logtostderr=true -v=0
  #
  # control_proxy:
  #   <<: *pyservice
  #   container_name: control_proxy
  #   command: >
      # sh -c "/usr/local/bin/generate_nghttpx_config.py &&
      #        /usr/bin/env nghttpx --conf /var/opt/magma/tmp/nghttpx.conf /var/opt/magma/certs/controller.key /var/opt/magma/certs/controller.crt"
  #
  #
  #
  # health:
  #   <<: *feggoservice
  #   image: ${DOCKER_REGISTRY}cwag_go:${IMAGE_VERSION}
  #   container_name: health
  #   # Needed in order to enable/disable ICMP
  #   privileged: true
  #   volumes:
  #     - ${ROOTCA_PATH}:/var/opt/magma/certs/rootCA.pem
  #     - ${CERTS_VOLUME}:/var/opt/magma/certs
  #     - ${CONFIGS_OVERRIDE_VOLUME}:/var/opt/magma/configs
  #     - ${CONFIGS_DEFAULT_VOLUME}:/etc/magma
  #     - ${CONFIGS_TEMPLATES_PATH}:/etc/magma/templates
  #     - ${CONTROL_PROXY_PATH}:/etc/magma/control_proxy.yml
  #     - /etc/snowflake:/etc/snowflake
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   command: envdir /var/opt/magma/envdir /var/opt/magma/bin/gateway_health -logtostderr=true -v=0
  #
  #
  # redirectd:
  #   <<: *ltepyservice
  #   container_name: redirectd
  #   command: python3.8 -m magma.redirectd.main
  #

  # redis:
  #   <<: *pyservice
  #   container_name: redis
  #   command: >
  #     /bin/bash -c "/usr/local/bin/generate_service_config.py --service=redis --template=redis &&
  #            /usr/bin/redis-server /var/opt/magma/tmp/redis.conf --daemonize no &&
  #            /usr/bin/redis-cli shutdown"
  #
  #
  # td-agent-bit:
  #   <<: *pyservice
  #   container_name: td-agent-bit
  #   logging:
  #     driver: "json-file"
  #   command: >
  #       /bin/bash -c "/usr/local/bin/generate_fluent_bit_config.py &&
  #       /opt/td-agent-bit/bin/td-agent-bit -c /var/opt/magma/tmp/td-agent-bit.conf"


networks:
  agw:
