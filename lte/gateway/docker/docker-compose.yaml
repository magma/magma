---
version: "3.7"

# Standard logging for each service
x-logging: &logging_anchor
  driver: ${LOG_DRIVER}

# Standard volumes mounted
x-standard-volumes: &volumes_anchor
  - ${CERTS_VOLUME}:/var/opt/magma/certs
  - ${CONFIGS_TEMPLATES_PATH}:/etc/magma/templates
  - ${CONFIGS_DEFAULT_VOLUME}:/etc/magma
  - ${CONFIGS_OVERRIDE_VOLUME}:/var/opt/magma/configs
  - ${CONFIGS_OVERRIDE_TMP_VOLUME}:/var/opt/magma/tmp
  - ${ROOTCA_PATH}:/var/opt/magma/certs/rootCA.pem
  - /etc/snowflake:/etc/snowflake
  - /var/opt/magma/fluent-bit:/var/opt/magma/fluent-bit
  - ./:/var/opt/magma/docker
  - /var/run:/var/run
  - /tmp:/tmp
  - /var/log:/var/log
  - /etc/openvswitch:/etc/openvswitch

x-generic-service: &service
  volumes: *volumes_anchor
  logging: *logging_anchor
  restart: always
  network_mode: host

# Generic python anchor to avoid repetition for agw python services
x-agw-python-service: &pyservice
  <<: *service
  image: ${DOCKER_REGISTRY}agw_gateway_python:${IMAGE_VERSION}

# Generic anchor for lte c services
x-lte-cservice: &ltecservice
  <<: *service
  image: ${DOCKER_REGISTRY}agw_gateway_c:${IMAGE_VERSION}

services:
  magmad:
    <<: *pyservice
    container_name: magmad
    environment:
      DOCKER_REGISTRY: ${DOCKER_REGISTRY}
      DOCKER_USERNAME: ${DOCKER_USERNAME}
      DOCKER_PASSWORD: ${DOCKER_PASSWORD}
    command: >
      /bin/bash -c "
        /usr/bin/env python3 /usr/local/bin/generate_oai_config.py &&
        /usr/bin/env python3 -m magma.magmad.main"

  redis:
    <<: *pyservice
    container_name: redis
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6380", "ping"]
      timeout: "4s"
      retries: 3
    command: >
      /bin/bash -c "/usr/local/bin/generate_service_config.py --service=redis --template=redis &&
             /usr/bin/redis-server /var/opt/magma/tmp/redis.conf --daemonize no &&
             /usr/bin/redis-cli shutdown"

  directoryd:
    <<: *pyservice
    container_name: directoryd
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "nc", "-zv", "localhost", "50067"]
      timeout: "4s"
      retries: 3
    command: /usr/bin/env python3 -m magma.directoryd.main

  subscriberdb:
    <<: *pyservice
    container_name: subscriberdb
    healthcheck:
      test: ["CMD", "nc", "-zv", "localhost", "50051"]
      timeout: "4s"
      retries: 3
    command: /usr/bin/env python3 -m magma.subscriberdb.main

  enodebd:
    <<: *pyservice
    container_name: enodebd
    healthcheck:
      test: ["CMD", "nc", "-zv", "localhost", "60055"]
      timeout: "4s"
      retries: 3
    cap_add:
      - NET_ADMIN  # The container is invoking iptables and needs NET_ADMIN for that
    command: /usr/bin/env python3 -m magma.enodebd.main

  state:
    <<: *pyservice
    container_name: state
    healthcheck:
      test: ["CMD", "nc", "-zv", "localhost", "50074"]
      timeout: "4s"
      retries: 3
    depends_on:
      - redis
    command: /usr/bin/env python3 -m magma.state.main

  policydb:
    <<: *pyservice
    container_name: policydb
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "nc", "-zv", "localhost", "50068"]
      timeout: "4s"
      retries: 3
    command: /usr/bin/env python3 -m magma.policydb.main

  health:
    <<: *pyservice
    container_name: health
    healthcheck:
      test: ["CMD", "nc", "-zv", "localhost", "50080"]
      timeout: "4s"
      retries: 3
    # Needed in order to enable/disable ICMP
    privileged: true
    command: /usr/bin/env python3 -m magma.health.main

  monitord:
    <<: *pyservice
    container_name: monitord
    healthcheck:
      test: ["CMD", "nc", "-zv", "localhost", "50076"]
      timeout: "4s"
      retries: 3
    command: /usr/bin/env python3 -m magma.monitord.main

  redirectd:
    <<: *pyservice
    container_name: redirectd
    healthcheck:
      test: ["CMD", "nc", "-zv", "localhost", "50071"]
      timeout: "4s"
      retries: 3
    command: /usr/bin/env python3 -m magma.redirectd.main

  smsd:
    <<: *pyservice
    container_name: smsd
    healthcheck:
      test: ["CMD", "nc", "-zv", "localhost", "50078"]
      timeout: "4s"
      retries: 3
    command: /usr/bin/env python3 -m magma.smsd.main

  control_proxy:
    <<: *pyservice
    container_name: control_proxy
    healthcheck:
      test: ["CMD", "nc", "-zv", "localhost", "8443"]
      timeout: "4s"
      retries: 3
    command: >
      sh -c "/usr/local/bin/generate_nghttpx_config.py &&
             sed -i 's/errorlog-syslog=yes/errorlog-syslog=no/' /var/opt/magma/tmp/nghttpx.conf &&
             /usr/bin/env nghttpx --conf /var/opt/magma/tmp/nghttpx.conf /var/opt/magma/certs/controller.key /var/opt/magma/certs/controller.crt"

  ctraced:
    <<: *pyservice
    container_name: ctraced
    healthcheck:
      test: ["CMD", "nc", "-zv", "localhost", "50079"]
      timeout: "4s"
      retries: 3
    command: /usr/bin/env python3 -m magma.ctraced.main

  sctpd:
    <<: *ltecservice
    container_name: sctpd
    privileged: true
    ulimits:
      core: -1
    security_opt:
      - seccomp:unconfined
    environment:
      MAGMA_PRINT_GRPC_PAYLOAD: 0
    command: /usr/local/bin/sctpd

  oai_mme:
    <<: *ltecservice
    container_name: oai_mme
    healthcheck:
      test: ["CMD", "nc", "-zv", "localhost", "50073"]
      timeout: "4s"
      retries: 3
    ulimits:
      core: -1
    security_opt:
      - seccomp:unconfined
    privileged: true
    environment:
      MAGMA_PRINT_GRPC_PAYLOAD: 0
    depends_on:
      - magmad
    cap_add:
      - NET_ADMIN
      - NET_RAW
    command: >
      sh -c "/usr/local/bin/oai_mme -c /var/opt/magma/tmp/mme.conf -s /var/opt/magma/tmp/spgw.conf"

  pipelined:
    <<: *pyservice
    container_name: pipelined
    security_opt:
      - seccomp:unconfined
    privileged: true
    environment:
      MAGMA_PRINT_GRPC_PAYLOAD: 0
    pid: "host"
    cap_add:
      - NET_ADMIN
      - NET_RAW
      - SYS_NICE
    healthcheck:
      test: ["CMD", "nc", "-zv", "localhost", "50063"]
      timeout: "4s"
      retries: 3
    command: >
      bash -c "/usr/bin/ovs-vsctl --all destroy Flow_Sample_Collector_Set &&
        /usr/bin/ovs-vsctl set bridge gtp_br0 protocols=OpenFlow10,OpenFlow13,OpenFlow14 other-config:disable-in-band=true &&
        /usr/bin/ovs-vsctl set-controller gtp_br0 tcp:127.0.0.1:6633 tcp:127.0.0.1:6654 &&
        /usr/bin/ovs-vsctl set-fail-mode gtp_br0 secure &&
        /usr/bin/ovs-vsctl set-manager ptcp:6640 &&
        /usr/bin/env python3 -m magma.pipelined.main"

  sessiond:
    <<: *ltecservice
    container_name: sessiond
    ulimits:
      core: -1
    security_opt:
      - seccomp:unconfined
    privileged: true
    environment:
      MAGMA_PRINT_GRPC_PAYLOAD: 0
    depends_on:
      - directoryd
    healthcheck:
      test: ["CMD", "nc", "-zv", "localhost", "50065"]
      timeout: "4s"
      retries: 3
    cap_drop:
      - ALL
    command: >
      sh -c "mkdir -p /var/opt/magma/docker/cores &&
        sysctl -w kernel.core_pattern=/var/opt/magma/docker/cores/core.%e.%t &&
        /usr/local/bin/sessiond"

  mobilityd:
    <<: *pyservice
    container_name: mobilityd
    healthcheck:
      test: ["CMD", "nc", "-zv", "localhost", "60051"]
      timeout: "4s"
      retries: 3
    command:
      sh -c "sleep 5 && /usr/bin/env python3 -m magma.mobilityd.main"

  td-agent-bit:
    <<: *pyservice
    container_name: td-agent-bit
    healthcheck:
      test: ["CMD", "nc", "-zv", "localhost", "5140"]
      timeout: "4s"
      retries: 3
    logging:
      driver: "json-file"
    command: >
        /bin/bash -c "/usr/local/bin/generate_fluent_bit_config.py &&
        /opt/td-agent-bit/bin/td-agent-bit -c /var/opt/magma/tmp/td-agent-bit.conf"

  eventd:
    <<: *pyservice
    container_name: eventd
    healthcheck:
      test: ["CMD", "nc", "-zv", "localhost", "50075"]
      timeout: "4s"
      retries: 3
    command: /usr/bin/env python3 -m magma.eventd.main

  connectiond:
    <<: *ltecservice
    container_name: connectiond
    healthcheck:
      test: ["CMD", "nc", "-zv", "localhost", "50082"]
      timeout: "4s"
      retries: 3
    privileged: true
    command: /usr/local/bin/connectiond

  liagentd:
    <<: *ltecservice
    container_name: liagentd
    healthcheck:
      test: ["CMD", "nc", "-zv", "localhost", "50065"]
      timeout: "4s"
      retries: 3
    privileged: true
    command: /usr/local/bin/liagentd
    restart: "no"
