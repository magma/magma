# Copyright 2023 The Magma Authors.

# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

################################################################
# Builder Image (can also be used as developer's image)
################################################################
FROM registry.access.redhat.com/ubi8/ubi:latest as magma-mme-base

ENV FEATURES=mme_oai
ENV MAGMA_ROOT=/magma
ENV BUILD_TYPE=RelWithDebInfo
ENV C_BUILD=/build/c
ENV TZ=Europe/Paris
# Copy RHEL certificates for builder image
COPY ./etc-pki-entitlement /etc/pki/entitlement
# Copy the subscription manager configurations
COPY ./rhsm-conf /etc/rhsm
COPY ./rhsm-ca /etc/rhsm/ca

RUN mkdir -p $C_BUILD

RUN rm /etc/rhsm-host && \
    yum repolist --disablerepo=* && \
    subscription-manager repos --enable codeready-builder-for-rhel-8-x86_64-rpms \
  && yum update -y \
  && yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm \
  && yum install dnf-plugins-core -y \
  && yum install -y --enablerepo="codeready-builder-for-rhel-8-x86_64-rpms" \
    psmisc \
    git \
    python3 \
    python3-setuptools \
    python3-pip \
    libselinux-python3 \
    vim \
    gcc \
    cmake \
    automake \
    autoconf \
    tmux \
    ninja-build \
    json-devel \
    libxml2-devel \
    libconfig-devel \
    czmq-devel \
    libasan \
    liblsan \
    libubsan \
    protobuf-compiler \
    ruby \
    ruby-devel \
    sqlite \
    sqlite-devel \
  && ln -s /usr/bin/python3 /usr/bin/python

RUN yum install -y \
    gnupg \
    wget \
    autoconf \
    automake \
    make \
    bzip2 \
    libtool \
    curl \
    make \
    unzip \
    git \
    git-clang-format \
    clang-tools-extra \
    ninja-build \
    pkg-config \
    gcc \
    gcc-c++ \
    ca-certificates \
    vim \
    openssl-devel \
    golang \
    python2 \
    perl \
    glog-devel \
    binutils-devel \
    boost-devel \
    libunwind-devel \
    double-conversion-devel \
    # Install FreeDiameter requirements
    lksctp-tools \
    lksctp-tools-devel \
    bison \
    flex \
    patch \
    libidn-devel \
    libgcrypt-devel \
    # Install libgtpnl requirements
    libmnl-devel \
    # Install Nettle requirements
    libconfig-devel \
    libxml2-devel \
    libyaml-devel \
    gmp-devel \
    xz \
    yaml-cpp-devel \
  && ln -s /usr/bin/python2.7 /usr/local/bin/python

RUN yum install -y \
    # for some reasons diff, cmp and file are not present in ubi
    diffutils \
    file \
    # debugging
    gdb \
    iputils \
    net-tools \
    valgrind \
    tcpdump \
    openssh-server \
    systemd-devel \
    tree

RUN yum install -y \
    # redis is temporary --> has to be deployed w/ an other pod/container
    redis \
    python3-pip && \
    pip3 install jinja2-cli \
  && yum clean all -y \
  && rm -rf /var/cache/yum /var/cache/dnf \
  && rm -f /etc/pki/entitlement/*pem /etc/rhsm/ca/*pem

# Add Converged MME sources to the container
WORKDIR /patches
COPY  lte/gateway/c/core/oai/patches/0001-opencoord.org.freeDiameter.patch /patches
COPY  lte/gateway/c/core/oai/patches/0002-opencoord.org.freeDiameter.patch /patches

# All works will be done from the root of the file system
WORKDIR /

# git clone may fail on our OC cluster (could not resolve github.com, other sites
# may happen), we may have to tweak some limits...
# Prefer to fail as soon as possible if it has to happen
RUN  git clone --recurse-submodules -b v1.15.0 https://github.com/grpc/grpc && \
     git clone https://github.com/jupp0r/prometheus-cpp.git && \
     git clone https://github.com/cpp-redis/cpp_redis.git && \
     wget https://ftp.gnu.org/gnu/nettle/nettle-2.5.tar.gz && \
     wget https://www.gnupg.org/ftp/gcrypt/gnutls/v3.1/gnutls-3.1.23.tar.xz && \
     git clone https://liblfds.org/git/liblfds && \
     git clone https://gitea.osmocom.org/cellular-infrastructure/libgtpnl && \
     git clone https://github.com/OPENAIRINTERFACE/asn1c.git && \
     git clone https://github.com/OPENAIRINTERFACE/opencord.org.freeDiameter.git freediameter && \
     git clone https://github.com/nlohmann/json.git

##### GRPC and its dependencies
RUN echo "/usr/local/lib" > /etc/ld.so.conf.d/local-lib.conf && \
    echo "/usr/local/lib64" >> /etc/ld.so.conf.d/local-lib.conf && \
    # Moved git clone --recurse-submodules -b v1.15.0 https://github.com/grpc/grpc && \
    echo "Install c-ares" && \
    cd /grpc && \
    cd third_party/cares/cares && \
    git fetch origin && \
    git checkout cares-1_13_0 && \
    mkdir -p _build && \
    cd _build && \
    cmake -Wno-dev -DCMAKE_BUILD_TYPE=Release .. && \
    make -j`nproc` && \
    make install && \
    cd /grpc && \
    rm -rf third_party/cares/cares/_build && \
    echo "Install zlib" && \
    cd third_party/zlib && \
    mkdir -p _build && \
    cd _build && \
    cmake -DCMAKE_BUILD_TYPE=Release .. && \
    make -j`nproc` && \
    make install && \
    cd /grpc && \
    rm -rf third_party/zlib/_build && \
    echo "Install protobuf" && \
    cd third_party/protobuf && \
    git submodule update --init --recursive  && \
    ./autogen.sh  && \
    ./configure  && \
    make -j`nproc` && \
    make install && \
    git clean -x -d -ff -q && \
    cd /grpc && \
    ldconfig && \
    echo "Install GRPC" && \
    mkdir -p _build && \
    cd _build && \
    cmake \
        -DgRPC_INSTALL=ON \
        -DBUILD_SHARED_LIBS=ON \
        -DgRPC_BUILD_TESTS=OFF \
        -DgRPC_PROTOBUF_PROVIDER=package \
        -DgRPC_ZLIB_PROVIDER=package \
        -DgRPC_CARES_PROVIDER=package \
        -DgRPC_SSL_PROVIDER=package \
        -DCMAKE_BUILD_TYPE=Release \
        .. && \
    make -j`nproc` && \
    make install && \
    cd .. && rm -R --interactive=never _build


##### Prometheus CPP
RUN cd prometheus-cpp && \
    # Moved git clone https://github.com/jupp0r/prometheus-cpp.git && \
    git checkout d8326b2bba945a435f299e7526c403d7a1f68c1f && \
    git submodule init && git submodule update && \
    mkdir _build && \
    cd _build/ && \
    cmake .. && \
    make -j`nproc` && \
    make install && \
    cd .. && rm -R --interactive=never _build

##### Redis CPP
RUN cd cpp_redis && \
    # Moved git clone https://github.com/cpp-redis/cpp_redis.git && \
    git checkout bbe38a7f83de943ffcc90271092d689ae02b3489 && \
    git submodule init && git submodule update && \
    mkdir _build && cd _build && \
    cmake .. -DCMAKE_BUILD_TYPE=Release && \
    make -j`nproc` && \
    make install && \
    cd .. && rm -R --interactive=never _build

##### NETTLE / gnutls
RUN tar -xf nettle-2.5.tar.gz && \
    # Moved wget https://ftp.gnu.org/gnu/nettle/nettle-2.5.tar.gz && \
    cd nettle-2.5 && \
    mkdir _build && \
    cd _build/ && \
    ../configure --libdir=/usr/lib && \
    make -j`nproc` && \
    make install && \
    ldconfig -v && \
    cd / && \
    rm -R --interactive=never nettle-2.5.tar.gz nettle-2.5/_build && \
    # Moved wget https://www.gnupg.org/ftp/gcrypt/gnutls/v3.1/gnutls-3.1.23.tar.xz && \
    tar xf gnutls-3.1.23.tar.xz && \
    cd gnutls-3.1.23 && \
    ./configure --with-libnettle-prefix=/usr --prefix=/usr && \
    sed -i -e "s#elif 0#elif 1#" gl/fseterr.c && \
    make -j`nproc` && \
    make install && \
    make clean 2>&1 > /dev/null && \
    cd / && \
    rm -R --interactive=never gnutls-3.1.23.tar.xz && \
    ldconfig -v

##### liblfds
# https://www.liblfds.org/mediawiki/index.php?title=r7.1.0:Building_Guide_(liblfds)
RUN cd /liblfds/liblfds/liblfds7.1.0/liblfds710/build/gcc_gnumake/ && \
    make -j`nproc` && \
    make ar_install && \
    make clean

##### libgtpnl
# review https://github.com/OPENAIRINTERFACE/openair-cn/blob/master/build/tools/build_helper.gtpnl
RUN cd libgtpnl && \
    # Moved git clone https://git.osmocom.org/libgtpnl && \
    git reset --hard 345d687 && \
    autoreconf -fi && \
    ./configure && \
    make -j`nproc` && \
    make install && \
    make clean 2>&1 > /dev/null && \
    ldconfig

#####  asn1c
RUN cd asn1c && \
    # Moved git clone https://github.com/OPENAIRINTERFACE/asn1c.git && \
    git checkout f12568d617dbf48497588f8e227d70388fa217c9 && \
    autoreconf -iv && \
    ./configure && \
    make -j`nproc` && \
    make install && \
    git clean -x -d -ff -q

##### FreeDiameter
RUN cd freediameter && \
    # Moved git clone https://github.com/OPENAIRINTERFACE/opencord.org.freeDiameter.git freediameter && \
    git pull origin master && \
    git log -n1 && \
    echo "Patching dict_S6as6d" && \
    patch -p1 < /patches/0001-opencoord.org.freeDiameter.patch && \
    patch -p1 < /patches/0002-opencoord.org.freeDiameter.patch && \
    mkdir _build && \
    cd _build && \
    cmake -DBUILD_TESTING=false ../ && \
    grep DISABLE_SCTP CMakeCache.txt && \
    awk '{if (/^DISABLE_SCTP/) gsub(/OFF/, "ON"); print}' CMakeCache.txt > tmp && mv tmp CMakeCache.txt && \
    grep DISABLE_SCTP CMakeCache.txt && \
    make -j`nproc` && \
    make install && \
    cd ../ && rm -R --interactive=never _build

##### lib nlohmann json
RUN cd json && \
    # Moved git clone https://github.com/nlohmann/json.git && \
    git log -n1 && \
    mkdir _build && \
    cd _build && \
    cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DJSON_BuildTests=OFF .. && \
    make -j`nproc` && \
    make install && \
    cd ../ && rm -Rf _build && \
    ldconfig --verbose

# Install bazel
WORKDIR /usr/sbin
RUN wget --progress=dot:giga https://github.com/bazelbuild/bazelisk/releases/download/v1.10.0/bazelisk-linux-amd64 && \
    chmod +x bazelisk-linux-amd64 && \
    ln -sf /usr/sbin/bazelisk-linux-amd64 /usr/sbin/bazel

RUN mkdir -p /usr/lib/x86_64-linux-gnu/ && \
    ln -s /lib64/libglog.so /usr/lib/x86_64-linux-gnu/libglog.so.0 && \
    ln -s /lib64/libgnutls.so /usr/lib/libgnutls.so && \
    ldconfig --verbose

# Starting from here, we are building MAGMA services (sctpd and mme)
FROM magma-mme-base as magma-mme-builder

# Add Converged MME sources to the container
COPY ./ $MAGMA_ROOT

# Build MME executables
RUN export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig/ && \
    # Remove entitlements
    rm -Rf $MAGMA_ROOT/etc-pki-entitlement $MAGMA_ROOT/rhsm-conf $MAGMA_ROOT/rhsm-ca && \
    cd $MAGMA_ROOT && \
    echo $FEATURES && \
    bazel build //lte/gateway/c/core:mme_oai --define=disable_sentry_native=1 && \
    bazel build //lte/gateway/c/sctpd/src:sctpd --define=disable_sentry_native=1 && \
    mv $MAGMA_ROOT/bazel-bin/lte/gateway/c/core/mme_oai $MAGMA_ROOT/bazel-bin/lte/gateway/c/core/oai_mme && \
    echo 'Shared libraries for oai_mme' && \
    ldd $MAGMA_ROOT/bazel-bin/lte/gateway/c/core/oai_mme && \
    echo 'Shared libraries for sctpd' && \
    ldd $MAGMA_ROOT/bazel-bin/lte/gateway/c/sctpd/src/sctpd

# Prepare config file
RUN cd $MAGMA_ROOT/lte/gateway/docker/mme/configs/ && \
    echo -e '{ \n' \
    '"realm": "magma.com",	 \n'\
    '"use_stateless": "", \n'\
    '"conf_dir": "/magma-mme/etc", \n'\
    '"hss_hostname": "hss", \n'\
    '"mcc": "001", \n'\
    '"mnc": "01", \n'\
    '"mmeGid": "1", \n'\
    '"mmeCode": "1", \n'\
    '"tac": "1", \n'\
    '"non_eps_service_control": "OFF", \n'\
    '"csfb_mcc": "001", \n'\
    '"csfb_mnc": "01", \n'\
    '"lac": "1", \n'\
    '"s1ap_iface_name": "eth0", \n'\
    '"s1ap_ip": "192.168.61.133/24", \n'\
    '"s11_iface_name": "eth0", \n'\
    '"mme_s11_ip": "192.168.61.133/24", \n'\
    '"oai_log_level": "INFO", \n'\
    '"remote_sgw_ip": "192.168.61.130", \n'\
    '"attachedEnodebTacs": [], \n'\
    '"attached_enodeb_tacs": [1] }' \
    > mme_vars.json && \
    jinja2 ../../../configs/templates/mme.conf.template mme_vars.json --format=json  > mme.conf

# For developer's to have the same run env as in target image to debug
FROM magma-mme-builder as magma-dev-mme

# Copy the configuration file templates and mean to modify/generate certificates
WORKDIR /magma-mme/bin
RUN cp $MAGMA_ROOT/bazel-bin/lte/gateway/c/core/oai_mme .
RUN cp $MAGMA_ROOT/bazel-bin/lte/gateway/c/sctpd/src/sctpd .
WORKDIR /magma-mme/etc
RUN cp $MAGMA_ROOT/lte/gateway/docker/mme/configs/mme.conf .
RUN cp $MAGMA_ROOT/lte/gateway/docker/mme/configs/mme_fd.conf .

# Create running dirs
WORKDIR /var/opt/magma/configs
# Adding mme configuration for stateful run
RUN echo "use_stateless: false" > mme.yml

WORKDIR /etc/magma
RUN cp $MAGMA_ROOT/lte/gateway/configs/control_proxy.yml .
RUN cp $MAGMA_ROOT/lte/gateway/configs/redis.yml .
RUN cp $MAGMA_ROOT/lte/gateway/configs/service_registry.yml .

WORKDIR /magma-mme/scripts
RUN cp $MAGMA_ROOT/lte/gateway/c/core/oai/test/check_mme_s6a_certificate . && \
    sed -i -e "s@^.*THIS_SCRIPT_PATH@#@" \
           -e "s@\$SUDO@@" \
           -e "s@echo_error@echo@" \
           -e "s@echo_success@echo@" \
           -e "s@echo_warning@echo@" check_mme_s6a_certificate

WORKDIR /magma-mme
RUN openssl rand -out /root/.rnd 128

################################################################
# Target Image
################################################################
FROM registry.access.redhat.com/ubi8/ubi-minimal:latest as magma-mme
ENV MAGMA_ROOT=/magma
ENV C_BUILD=/build/c

# Copy RHEL certificates for builder image
COPY ./etc-pki-entitlement /etc/pki/entitlement
# Copy the subscription manager configurations
COPY ./rhsm-conf /etc/rhsm
COPY ./rhsm-ca /etc/rhsm/ca

# Install a few tools (may not be necessary later on)
ENV TZ=Europe/Paris
RUN microdnf update -y && \
    microdnf -y install \
      libubsan \
      libasan \
      liblsan \
      sqlite \
      psmisc \
      procps-ng \
      tcpdump \
      openssl \
      boost \
      libicu \
      libidn \
      libconfig \
      lksctp-tools \
      net-tools \
      tzdata && \
    microdnf clean all -y && \
    rm -rf /var/cache/yum /var/cache/dnf && \
    rm -f /etc/pki/entitlement/*pem /etc/rhsm/ca/*pem

# Copy runtime-used shared libraries from builder
WORKDIR /lib64
COPY --from=magma-mme-builder \
# From epel8, cannot be installed on minimal UBI
    /lib64/libyaml-cpp.so.0.6 \
    /lib64/libgflags.so.2.1 \
    /lib64/libglog.so.0 \
    /lib64/libdouble-conversion.so.3 \
    /lib64/libunwind.so.8 \
    /lib64/libzmq.so.5 \
    /lib64/libczmq.so.4 \
    /lib64/libsodium.so.23 \
    /lib64/libpgm-5.2.so.0 \
# From GRPC src build
    /usr/local/lib/libgrpc.so \
    /usr/local/lib/libgrpc++.so \
    /usr/local/lib/libgpr.so \
    /usr/local/lib/libaddress_sorting.so \
    /usr/local/lib/libcares.so.2 \
    /usr/local/lib/libprotobuf.so.17 \
# From Free Diameter src build
    /usr/local/lib/libfdcore.so.6 \
    /usr/local/lib/libfdproto.so.6 \
# From nettle/gnutls src build
    /lib64/libgnutls.so.28 \
    /lib/libnettle.so.4 \
    /lib/libhogweed.so.2 \
    /lib64/

# Copy all fdx files from freeDiameter installation
WORKDIR /usr/local/lib/freeDiameter
COPY --from=magma-mme-builder /usr/local/lib/freeDiameter/* ./

# Refresh library cache
RUN ldconfig

# Copy pre-built binaries for MME and SCTPD
WORKDIR /magma-mme/bin
COPY --from=magma-mme-builder \
    $MAGMA_ROOT/bazel-bin/lte/gateway/c/core/oai_mme \
    $MAGMA_ROOT/bazel-bin/lte/gateway/c/sctpd/src/sctpd \
    ./

# Copy the configuration file templates and mean to modify/generate certificates
WORKDIR /magma-mme/etc
COPY --from=magma-mme-builder \
    $MAGMA_ROOT/lte/gateway/docker/mme/configs/mme.conf \
    $MAGMA_ROOT/lte/gateway/docker/mme/configs/mme_fd.conf \
    /magma-mme/etc/

# Create running dirs
WORKDIR /var/opt/magma/configs
# Adding mme configuration for stateful run
RUN echo "use_stateless: false" > mme.yml && \
    openssl rand -out /root/.rnd 128 && \
    echo 'Shared libraries for oai_mme' && \
    ldd /magma-mme/bin/oai_mme && \
    echo 'Shared libraries for sctpd' && \
    ldd /magma-mme/bin/sctpd

WORKDIR /etc/magma
COPY --from=magma-mme-builder \
    $MAGMA_ROOT/lte/gateway/configs/control_proxy.yml \
    $MAGMA_ROOT/lte/gateway/configs/redis.yml \
    $MAGMA_ROOT/lte/gateway/configs/service_registry.yml \
    $MAGMA_ROOT/lte/gateway/configs/sctpd.yml \
    /etc/magma/

# Adding means to re-generate certificates
WORKDIR /magma-mme/scripts
COPY --from=magma-mme-builder $MAGMA_ROOT/lte/gateway/c/core/oai/test/check_mme_s6a_certificate .
RUN sed -i -e "s@^.*THIS_SCRIPT_PATH@#@" \
           -e "s@\$SUDO@@" \
           -e "s@echo_error@echo@" \
           -e "s@echo_success@echo@" \
           -e "s@echo_warning@echo@" check_mme_s6a_certificate

WORKDIR /magma-mme

# use this label for CI purpose
LABEL use-separate-hss-realm="true"

# expose ports
EXPOSE 3870/tcp 5870/tcp 2123/udp

# For the moment, let have a dummy command
CMD ["sleep", "infinity"]
