
enum Constants : uint {
  CHARGING_CHARACTERISTICS_LENGTH_P1 = 5,
}

enum S1Cause : uint {
  S1AP_INVALID_CAUSE = 0,
  S1AP_NAS_NORMAL_RELEASE,
  S1AP_NAS_DETACH,
  S1AP_RADIO_EUTRAN_GENERATED_REASON,
  S1AP_RADIO_UNKNOWN_E_RAB_ID,
  S1AP_IMPLICIT_CONTEXT_RELEASE,
  S1AP_INITIAL_CONTEXT_SETUP_FAILED,
  S1AP_SCTP_SHUTDOWN_OR_RESET,
  S1AP_INVALID_ENB_ID,
  S1AP_INVALID_MME_UE_S1AP_ID,
  S1AP_CSFB_TRIGGERED,
  S1AP_NAS_UE_NOT_AVAILABLE_FOR_PS,
  S1AP_SYSTEM_FAILURE,
  S1AP_RADIO_MULTIPLE_E_RAB_ID,
  S1AP_NAS_MME_OFFLOADING,
  S1AP_NAS_MME_PENDING_OFFLOADING
}

enum MmState : byte {
  UE_UNREGISTERED = 0,
  UE_REGISTERED
}

enum EcmState : byte {
  ECM_IDLE = 0,
  ECM_CONNECTED
} 

struct Ecgi {
  /// plmn_t
  plmn:[byte:3];
  ///  eci_t The ECI shall be of fixed length of 28 bits 
  cell_identity:uint; 
}

enum PdnTypeValue:ubyte {
  IPv4        = 0,
  IPv6        = 1,
  IPv4_AND_v6 = 2,
  IPv4_OR_v6  = 3,
  IP_MAX
} 

struct In6Addr {
  u6_addr8:[byte:16];
}

struct Address {
  ipv4_address_in_addr:uint32;
  ipv6_address:In6Addr;
}

struct IpAddress {
  pdn_type:PdnTypeValue;
  address:Address;
}

enum PreEmptionVulnerability:ubyte {
  PRE_EMPTION_VULNERABILITY_ENABLED  = 0,
  PRE_EMPTION_VULNERABILITY_DISABLED = 1,
  PRE_EMPTION_VULNERABILITY_MAX
}

enum PreEmptionCapability:ubyte {
  PRE_EMPTION_CAPABILITY_ENABLED  = 0,
  PRE_EMPTION_CAPABILITY_DISABLED = 1,
  PRE_EMPTION_CAPABILITY_MAX
}

struct AllocationRetentionPriority {
  priority_level:ubyte;
  pre_emp_vulnerability:PreEmptionVulnerability;
  pre_emp_capability:PreEmptionCapability;
}

struct EpsSubscribedQosProfile {
  qci:ubyte;
  allocation_retention_priority:AllocationRetentionPriority;
}

enum ApnAmbrBitRateUnit:ubyte {
  BPS  = 0,
  KBPS = 1
}

struct Ambr {
  br_unit:ApnAmbrBitRateUnit;
  br_ul:ulong;
  br_dl:ulong;
}

struct ChargingCharacteristics {
  /// CHARGING_CHARACTERISTICS_LENGTH + 1
  value:[ubyte:5]; 
  length:ubyte;
}

struct ApnConfiguration {
  context_identifier:uint;

  /// Each APN configuration can have 0, 1, or 2 ip address:
  ///  - 0 means subscribed is dynamically allocated by P-GW depending on the
  ///  pdn_type
  ///  - 1 Only one type of IP address is returned by HSS
  ///  - 2 IPv4 and IPv6 address are returned by HSS and are statically
  /// allocated
  nb_ip_address:ubyte;
  ip_address:[IpAddress:2];
  pdn_type:PdnTypeValue;
  service_selection:[byte:100];
  service_selection_length:byte;
  subscribed_qos:EpsSubscribedQosProfile;
  ambr:Ambr;
  charging_characteristics:ChargingCharacteristics;
} 

enum AllApnConfInd:ubyte {
  ALL_APN_CONFIGURATIONS_INCLUDED            = 0,
  MODIFIED_ADDED_APN_CONFIGURATIONS_INCLUDED = 1,
  ALL_APN_MAX
}

struct ApnConfigProfile {
  context_identifier:uint;
  all_apn_conf_ind:AllApnConfInd;
  /// Number of APNs provided
  nb_apns:ubyte;
  /// List of APNs configuration 1 to n elements // MAX_APN_PER_UE
  apn_configuration:[ApnConfiguration:10]; 
}

struct Paa {
  pdn_type:PdnTypeValue;
  ipv4_address:uint;
  ipv6_address:In6Addr;
  /// Note in rel.8 the ipv6 prefix length has a fixed value of /64 
  ipv6_prefix_length:ubyte;
  vlan:uint;
}


table PcoProtocolOrContainerId {
  id:ushort;
  /// length:ubyte;
  contents:[ubyte];
}

table ProtocolConfigurationOptions {
  ext:bool;
  configuration_protocol:ubyte;
  /// num_protocol_or_container_id:ubyte;
  /// arbitrary value, can be greater than defined (250/3)
  /// Setting this value to 30 to support maximum possible number of protocol id
  /// or container id defined in 24.008 release 13
  /// #define PCO_UNSPEC_MAXIMUM_PROTOCOL_ID_OR_CONTAINER_ID 30
  protocol_or_container_ids:[PcoProtocolOrContainerId];
}

/// ESM procedure transaction states 
enum EsmPtState:ubyte {
  ESM_PROCEDURE_TRANSACTION_INACTIVE = 0,
  ESM_PROCEDURE_TRANSACTION_PENDING,
  ESM_PROCEDURE_TRANSACTION_MAX
}

/*
 * Structure of a PDN connection
 * -----------------------------
 * A PDN connection is the association between a UE represented by
 * one IPv4 address and/or one IPv6 prefix and a PDN represented by
 * an Access Point Name (APN).
 */
struct EsmPdn {
  /// Identity of the procedure transaction executed
  /// to activate the PDN connection entry
  pti:ubyte;    
  /// Emergency bearer services indicator
  is_emergency:bool;
  /// Aggregate Maximum Bit Rate of this APN
  ambr:uint32;          
  /// Indicates whether the UE is allowed to subsequently
  /// request another PDN connectivity to the same APN
  /// using an address PDN type (IPv4 or IPv6) other
  /// than the one already activated      
  addr_realloc:int; 
  /// Number of allocated EPS bearers;
  /// default EPS bearer is defined at index 0 
  n_bearers:ubyte;
  /// procedure transaction state  
  pt_state:EsmPtState;
  // may go for ubyte  
  esm_cause:int;
}


table PdnContext {
  context_identifier:uint;

  /// APN in Use:an ID at P-GW through which a user can access the Subscribed APN
  ///            This APN shall be composed of the APN Network
  ///            Identifier and the default APN Operator Identifier,
  ///            as specified in TS 23.003 [9],
  ///            clause 9.1.2 (EURECOM: "mnc<MNC>.mcc<MCC>.gprs").
  ///            Any received value in the APN OI Replacement field is not
  ///            applied here.
  apn_in_use:[ubyte];

  /// APN Subscribed: The subscribed APN received from the HSS 
  apn_subscribed:[ubyte];

  /// PDN Type: IPv4, IPv6 or IPv4v6
  pdn_type:PdnType;

  /// paa: IPv4 address and/or IPv6 prefix of UE set by
  ///          S11 CREATE_SESSION_RESPONSE
  ///          NOTE:
  ///          The MME might not have information on the allocated IPv4 address.
  ///          Alternatively, following mobility involving a pre-release 8 SGSN,
  ///          This IPv4 address might not be the one allocated to the UE.
  paa:Paa;

  /* APN-OI Replacement: APN level APN-OI Replacement which has same role as
   *            UE level APN-OI Replacement but with higher priority than
   *            UE level APN-OI Replacement. This is and optional parameter.
   *            When available, it shall be used to construct the PDN GW
   *            FQDN instead of UE level APN-OI Replacement.
   */
  apn_oi_replacement:[ubyte];

  /// PDN GW Address in Use(control plane): The IP address of the PDN GW
  ///           currently
  ///           used for sending control plane signalling.
  p_gw_address_s5_s8_cp:IpAddress;

  /// PDN GW TEID for S5/S8 (control plane), for GTP-based S5/S8 only 
  p_gw_teid_s5_s8_cp:uint;

  /// EPS subscribed QoS profile:
  ///     The bearer level QoS parameter values for that
  ///     APN's default bearer's QCI and ARP (see clause 4.7.3).
  default_bearer_eps_subscribed_qos_profile:EpsSubscribedQosProfile;

  /// Subscribed APN-AMBR: The Maximum Aggregated uplink and downlink MBR values
  ///            to be shared across all Non-GBR bearers,
  ///             which are established for this APN, according to the
  ///            subscription of the user.
  subscribed_apn_ambr:Ambr;

  /// p_gw_apn_ambr: The Maximum Aggregated uplink and downlink MBR values to be
  ///           shared across all Non-GBR bearers, which are established for this
  ///           APN, as decided by the PDN GW.
  p_gw_apn_ambr:Ambr;

  /// default_ebi: Identifies the EPS Bearer Id of the default bearer
  /// within the given PDN connection.
  default_ebi:ubyte;

  /// bearer_contexts[]: contains bearer indexes in
  ///           ue_mm_context_t.bearer_contexts[], or -1
  /// BEARERS_PER_UE = 11 
  bearer_contexts:[ubyte]; 

  /// S-GW teid and IP address for User-Plane
  /// set by S11 CREATE_SESSION_RESPONSE
  s_gw_address_s11_s4:IpAddress;
  s_gw_teid_s11_s4:uint32;

  esm_data:EsmPdn;
  /// is_active == true indicates, PDN is active 
  is_active:bool;

  pco:ProtocolConfigurationOptions;
  ue_rej_act_def_ber_req:bool;
  route_s11_messages_to_s8_task:bool;
}

enum EmmProcAttachType:ubyte {
  EMM_ATTACH_TYPE_EPS = 0,
  EMM_ATTACH_TYPE_COMBINED_EPS_IMSI,
  EMM_ATTACH_TYPE_EMERGENCY,
  EMM_ATTACH_TYPE_RESERVED
}

enum AdditionalUpdateType:ubyte {
  NO_ADDITIONAL_INFORMATION = 0,
  SMS_ONLY                  = 1,
  MAX                       = 2,
  SENTINEL_MAX              = 255
}

struct emm_context {
  /// Dynamically allocated context indicator
  is_dynamic:bool;
  /// Attachment indicator  
  is_attached:bool;
  /// Emergency bearer services indicator  
  is_emergency:bool; 
  /// If the IMSI was used for identification in
  /// the initial NAS message
  is_initial_identity_imsi:bool;  
  is_guti_based_attach:bool;
  /// EPS/Combined/etc.
  attach_type:EmmProcAttachType; 
  additional_update_type:AdditionalUpdateType;
  /// TAU Update type - Normal Update, Periodic,
  /// combined TAU,combined TAU with IMSI
  tau_updt_type:ubyte; 
  /// Num attach request received
  num_attach_request:uint; 

  emm_procedures_t* emm_procedures;

  /// this bitmask is here because we wanted to avoid modifying the EmmCommon
  /// interface
  /// bitmask, see significance of bits in original C code 
  common_proc_mask:uint32; 
  /// bitmask, see significance of bits in original C code 
  member_present_mask:uint32; 
  /// bitmask, see significance of bits in original C code 
  member_valid_mask:uint32; 


  /// imsi present mean we know it but was not checked with identity proc, or was
  /// not provided in initial message
  /// The IMSI provided by the UE or the MME, set valid when
  /// identification returns IMSI 
  imsi_t _imsi;     
  /// The IMSI provided by the UE or the MME, set valid when
  /// identification returns IMSI 
  _imsi64:uint64; 
  /// Useful for 5.4.2.7.c 
  saved_imsi64:uint64;   
  imei_t _imei;          /* The IMEI provided by the UE                     */
  imeisv_t _imeisv;      /* The IMEISV provided by the UE                   */
  // bool                   _guti_is_new; /* The GUTI assigned to the UE is new
  // */
  guti_t _guti;         /* The GUTI assigned to the UE                     */
  guti_t _old_guti;     /* The old GUTI (GUTI REALLOCATION)                */
  tai_list_t _tai_list; /* TACs the the UE is registered to                */
  tai_t _lvr_tai;
  tai_t originating_tai;

  MobileStationClassmark2
      _mob_st_clsMark2; /* Mobile station classmark2 provided by the UE */
  ksi_t ksi;            /*key set identifier  */
  ue_network_capability_t _ue_network_capability;
  ms_network_capability_t _ms_network_capability;
  ue_additional_security_capability_t ue_additional_security_capability;
  drx_parameter_t _drx_parameter;

  int remaining_vectors;                       // remaining unused vectors
  auth_vector_t _vector[MAX_EPS_AUTH_VECTORS]; /* EPS authentication vector */
  emm_security_context_t
      _security; /* Current EPS security context: The security context which has
                    been activated most recently. Note that a current EPS
                                                          security context
                    originating from either a mapped or native EPS security
                    context may exist simultaneously with a native non-current
                    EPS security context.*/

  // Requirement MME24.301R10_4.4.2.1_2
  emm_security_context_t
      _non_current_security; /* Non-current EPS security context: A native EPS
                                security context that is not the current one. A
                                non-current EPS security context may be stored
                                along with a current EPS security context in the
                                UE and the MME. A non-current EPS security
                                context does not contain an EPS AS security
                                context. A non-current EPS security context is
                                either of type 'full
                                                          native' or of type
                                'partial native'.     */

  /// EMM failure cause code
  emm_cause:uint; 

  emm_fsm_state_t _emm_fsm_state;

  nas_timer_t T3422; /* Detach timer         */
  void* t3422_arg;

  struct esm_context_s esm_ctx;

  ue_network_capability_t
      tau_ue_network_capability; /* stored TAU Request IE Requirement
                                    MME24.301R10_5.5.3.2.4_4*/
  ms_network_capability_t
      tau_ms_network_capability;          /* stored TAU Request IE Requirement
                                             MME24.301R10_5.5.3.2.4_4*/
  drx_parameter_t _current_drx_parameter; /* stored TAU Request IE Requirement
                                             MME24.301R10_5.5.3.2.4_4*/
  eps_bearer_context_status_t
      _eps_bearer_context_status; /* stored TAU Request IE Requirement
                                     MME24.301R10_5.5.3.2.4_5*/
  eps_network_feature_support_t _eps_network_feature_support;

  // TODO: DO BETTER  WITH BELOW
  bstring esm_msg; /* ESM message contained within the initial request*/
#define EMM_CN_SAP_BUFFER_SIZE 4096


  // CSFB related parameters
  csfb_params_t csfbparams;
  // VOLTE parameters
  volte_params_t volte_params;
  bool is_imsi_only_detach;
  /* Set the flag if pcrf initiated bearer deact and UE is in Idle state
   *if this flag is set after receving service req, send detach
   */
  bool nw_init_bearer_deactv;
  new_attach_info_t* new_attach_info;
  bool initiate_identity_after_smc;
  emm_context_state_t emm_context_state;
};

table UeMmContext {
  // msisdn: The basic MSISDN of the UE. The presence is dictated by its storage
  // in the HSS, set by S6A UPDATE LOCATION ANSWER
  msisdn:string; 

  ue_context_rel_cause:S1Cause;
  mm_state:MmState;
  ecm_state:EcmState;

  /// Last known E-UTRAN cell, set by nas_attach_req_t 
  e_utran_cgi:Ecgi;

  ///cell_age: Time elapsed since the last E-UTRAN Cell Global Identity was
  ///           acquired. Set by nas_auth_param_req_t
  cell_age:ulong; /// time_t
  
  /// TODO: add csg_id 
  /// TODO: add csg_membership 
  /// TODO Access mode: Access mode of last known ECGI when the UE was active 

  /// apn_config_profile: set by S6A UPDATE LOCATION ANSWER 
  apn_config_profile:ApnConfigProfile;

  /// charging_characteristics: set by S6A UPDATE LOCATION ANSWER
  default_charging_characteristics:ChargingCharacteristics;

  /// access_restriction_data: The access restriction subscription information.
  ///           set by S6A UPDATE LOCATION ANSWER
  access_restriction_data:uint;

  /// apn_oi_replacement: Indicates the domain name to replace the APN-OI
  /// when constructing the PDN GW FQDN upon which to perform a
  /// DNS resolution.
  /// This replacement applies for all the APNs provided in the
  /// subscriber's profile. See TS 23.003 [9] clause 9.1.2 for more
  apn_oi_replacement:[ubyte];
  mme_teid_s11:uint;
  /// SCTP assoc id
  sctp_assoc_id_key:uint;

  /// eNB UE S1AP ID,  Unique identity the UE within eNodeB 
  enb_ue_s1ap_id:uint;
  /// enb_s1ap_id_key = enb-ue-s1ap-id <24 bits> | enb-id <8 bits> 
  enb_s1ap_id_key:uint;

  /// MME UE S1AP ID, Unique identity the UE within MME 
  mme_ue_s1ap_id:uint;

  /// Subscribed UE-AMBR: The Maximum Aggregated uplink and downlink MBR values
  ///          to be shared across all Non-GBR bearers according to the
  ///          subscription of the user. Set by S6A UPDATE LOCATION ANSWER
  subscribed_ue_ambr:Ambr;
  /// used_ue_ambr: The currently used Maximum Aggregated uplink and downlink
  ///          MBR values to be shared across all Non-GBR bearers.
  ///          Set by S6A UPDATE LOCATION ANSWER
  used_ue_ambr:Ambr;
  /// rau_tau_timer: Indicates a subscribed Periodic RAU/TAU Timer value
  ///           Set by S6A UPDATE LOCATION ANSWER
  rau_tau_timer:uint;

  nb_active_pdn_contexts:ubyte;
  pdn_contexts[PdnContext]; /// MAX_APN_PER_UE

  emm_context_t emm_context;
  bearer_context_t* bearer_contexts[BEARERS_PER_UE];

  /// ue_radio_capability: Store the radio capabilities as received in
  ///           S1AP UE capability indication message
  ue_radio_capability[ubyte];

  /* mobile_reachability_timer: Start when UE moves to idle state.
   *             Stop when UE moves to connected state
   */
  nas_timer_t mobile_reachability_timer;
  time_t time_mobile_reachability_timer_started;
  /* implicit_detach_timer: Start at the expiry of Mobile Reachability timer.
   * Stop when UE moves to connected state
   */
  nas_timer_t implicit_detach_timer;
  time_t time_implicit_detach_timer_started;
  /* Initial Context Setup Procedure Guard timer */
  nas_timer_t initial_context_setup_rsp_timer;
  time_t time_ics_rsp_timer_started;
  /* UE Context Modification Procedure Guard timer */
  nas_timer_t ue_context_modification_timer;
  /* Timer for retrying paging messages */
#define MAX_PAGING_RETRY_COUNT 1
  uint8_t paging_retx_count;
  nas_timer_t paging_response_timer;
  time_t time_paging_response_timer_started;
  /* send_ue_purge_request: If true MME shall send S6a- Purge Req to
   * delete contexts at HSS
   */
  bool send_ue_purge_request;

  bool hss_initiated_detach;
  bool location_info_confirmed_in_hss;
  /* S6a- update location request guard timer */
  nas_timer_t ulr_response_timer;
  sgs_context_t* sgs_context;
  uint8_t attach_type;
  lai_t lai;
  int cs_fallback_indicator;
  uint8_t sgs_detach_type;
  /* granted_service_t: informs the granted service to UE */
  granted_service_t granted_service;
  /*  paging_proceeding_flag (PPF) shall set to true, when UE moves to
   * connected. Indicates that paging procedure can be prooceeded, Is set to
   * false, due to "Inactivity of UE including lack of periodic TAU"
   */
  bool ppf;

#define SUBSCRIPTION_UNKNOWN false
#define SUBSCRIPTION_KNOWN true
  bool subscription_known;
  ambr_t used_ambr;
  subscriber_status_t subscriber_status;
  network_access_mode_t network_access_mode;
  uint8_t num_reg_sub;
  regional_subscription_t reg_sub[MAX_REGIONAL_SUB];

  bool path_switch_req;
  bool erab_mod_ind;
  /* Storing activate_dedicated_bearer_req messages received
   * when UE is in ECM_IDLE state*/
  emm_cn_activate_dedicated_bearer_req_t* pending_ded_ber_req[BEARERS_PER_UE];
  LIST_HEAD(s11_procedures_s, mme_app_s11_proc_s) * s11_procedures;
}

root_type UeMmContext;

 