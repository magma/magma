version: 2.1

aliases:
  - &appdir
    working_directory: "nms/app"
  - &only_master
    filters:
      branches:
        only: master
  - &only_release
    filters:
      branches:
        only: v*
  - &master_and_develop
    filters:
      branches:
        only:
          - master
          - develop
  - &lte_build_verify
    paths: "orc8r lte"
  - &c_cpp_build_verify
    paths: "orc8r/gateway/c orc8r/protos lte/gateway/c lte/protos feg/protos orc8r/protos lte/gateway/Makefile"
  - &session_manager_build_verify
    paths: "orc8r/gateway/c orc8r/protos lte/gateway/c/session_manager lte/protos feg/protos orc8r/protos"
  - &mme_build_verify
    paths: "orc8r/gateway/c orc8r/protos lte/gateway/c/core lte/gateway/c/sctpd lte/protos feg/protos orc8r/protos"
  - &li_agent_build_verify
    paths: "orc8r/gateway/c orc8r/protos lte/gateway/c/li_agent lte/protos orc8r/protos"
  - &connection_tracker_build_verify
    paths: "orc8r/gateway/c orc8r/protos lte/gateway/c/connection_tracker lte/protos orc8r/protos"
  - &federated_build_verify
    paths: "orc8r lte feg"
  - &all_gateways_build_verify
    paths: "orc8r lte feg cwf"
  - &nms_build_verify
    paths: "nms"
  - &orc8r_build_verify
    paths: "orc8r"
  - &cwf_build_verify
    paths: "cwf lte feg"
  - &docs_only
    paths: "docs"

executors:
  node:
    docker:
      - image: circleci/node:10-buster-browsers-legacy

orbs:
  artifactory: circleci/artifactory@0.0.7
  codecov: codecov/codecov@1.1.3

  python:
    commands:
      set_version:
        parameters:
          python_version:
            description: Valid Python version to set
            type: string
            default: "3.7.0"
        steps:
          - run:
              name: Set Python version
              command: pyenv global <<parameters.python_version>>
          - run:
              name: Upgrade Pip
              command: pip install --upgrade pip

  docker:
    commands:
      install-dc:
        parameters:
          compose_version:
            description: Docker-compose version to install
            type: string
            default: "1.29.1"
        steps:
          - run:
              name: Install Docker Compose
              command: |
                sudo curl -L https://github.com/docker/compose/releases/download/<<parameters.compose_version>>/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
                sudo chmod +x ~/docker-compose
                sudo mv ~/docker-compose /usr/local/bin/docker-compose

  build:
    commands:
      determinator:
        parameters:
          paths:
            description: Space seperated list of paths to tests against.
            type: string
        steps:
          - run:
              name: Checking for changes
              command: |
                if [ "${CIRCLE_BRANCH}" = "master" ]; then
                  echo "Determinator does not run on master"
                  exit 0
                fi

                paths=".circleci circleci <<parameters.paths>>"
                echo "Checking paths [$paths]"
                for path in $paths; do
                  if [[ $(git diff master^ --name-only $path) ]]; then
                    echo "Found changes in $path"
                    exit 0
                  fi
                done
                echo "No changes in [$paths]"
                circleci step halt

commands:
  install-go:
    description: Install go from sources
    parameters:
      go-version:
        description: go version default 1.15.7
        type: string
        default: "1.15.7"
    steps:
      - run: |
          sudo rm -rf /usr/local/go
          GO_VERSION=<< parameters.go-version >>
          wget "https://golang.org/dl/go$GO_VERSION.linux-amd64.tar.gz" -O ./go.tar
          sudo tar -C /usr/local -xzf go.tar
          export PATH=$PATH:/usr/local/go/bin


  run-with-retry:
    description: Run command with retry
    parameters:
      command:
        description: Command to run
        type: string
      workdir:
        description: Path to cd into
        type: string
      retry-count:
        description: Number of retry
        type: integer
        default: 3
      sleep:
        description: Wait duration until next retry
        type: integer
        default: 5
    steps:
      - run: |
          retry() {
             MAX_RETRY=<< parameters.retry-count >>
             n=0
             until [ $n -ge $MAX_RETRY ]
             do
                "$@" && break
                n=$[$n+1]
                sleep << parameters.sleep >>
             done
             if [ $n -ge $MAX_RETRY ]; then
               echo "failed: ${@}" >&2
               exit 1
             fi
          }
          cd << parameters.workdir >>
          retry << parameters.command >>

  yarn-install:
    steps:
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "nms/app/yarn.lock" }}
      - run:
          name: Install Dependencies
          <<: *appdir
          command: |
            if [ $(node -v) == 'v6.1.0' ]; then
              source $NVM_DIR/nvm.sh
              nvm install stable
            fi
            yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "nms/app/yarn.lock" }}
          paths:
            - ~/.cache/yarn

  apt-install-yarn:
    steps:
      - run:
          <<: *appdir
          command: |
            sudo apt-get install -y apt-transport-https
            curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
            echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
            sudo apt-get update -y
            sudo apt-get install -y yarn

  apt-install-chrome:
    steps:
      - run:
          <<: *appdir
          command: |
            # Install latest chrome dev package
            # Note: this installs the necessary libs to make the bundled version of Chromium that Puppeteer
            # installs, work.
            curl -sS https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
            echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google.list
            sudo apt-get update -y
            sudo apt-get install -y google-chrome-stable libxss1 --no-install-recommends
            sudo rm -rf /var/lib/apt/lists/*

  apt-focal-install-aioeventlet:
    steps:
      - run:
          <<: *appdir
          command: |
            # Install python3-aioeventlet from the magma apt repo
            cat ${MAGMA_ROOT}/orc8r/tools/ansible/roles/pkgrepo/files/jfrog.pub | sudo apt-key add -
            echo "deb https://facebookconnectivity.jfrog.io/artifactory/list/dev-focal/ focal main" | sudo tee /etc/apt/sources.list.d/fbc.list
            sudo apt-get update -y
            sudo apt-get install -y python3-aioeventlet
            sudo rm -rf /var/lib/apt/lists/*

  tag-push-docker:
    description: Tag docker image and push it
    parameters:
      job_name:
        description: Name of the tag-push-docker task
        type: string
        default: publish docker images to docker registry
      tag:
        description: Containers to tag and push
        type: string
        default: ${CIRCLE_SHA1:0:8}
      registry:
        description: Registry to push to
        type: string
        default: ${DOCKER_REGISTRY}
      username:
        description: Username to log in as
        type: string
        default: ${DOCKER_USERNAME}
      password:
        description: Password to log in using
        type: string
        default: ${DOCKER_PASSWORD}
      project:
        description: Project images are linked to
        type: string
        default: ""
      images:
        description: Images you want to tag and push separated by |
        type: string
      tag-latest:
        default: false
        type: boolean
    steps:
      - run:
          name: << parameters.job_name >>
          command: |
            if [ "${CIRCLE_BRANCH}" != "master" ]; then
              echo "Push only happens for master branch"
              exit 0
            fi

            DOCKER_REGISTRY="<< parameters.registry >>"
            DOCKER_USERNAME="<< parameters.username >>"
            DOCKER_PASSWORD="<< parameters.password >>"

            docker login "${DOCKER_REGISTRY}" -u "${DOCKER_USERNAME}" -p "${DOCKER_PASSWORD}"

            IMAGES="<< parameters.images >>"
            IMAGES_ARRAY=($(echo $IMAGES | tr "|" "\n"))
            PROJECT=<< parameters.project >>
            TAG=<< parameters.tag >>
            TAG_LATEST=<< parameters.tag-latest >>

            function tag_and_push {
              docker tag "$IMAGE_ID" "${DOCKER_REGISTRY}/$IMAGE:$1"
              echo "Pushing ${DOCKER_REGISTRY}/$IMAGE:$1"
              docker push "${DOCKER_REGISTRY}/$IMAGE:$1"
            }

            for IMAGE in "${IMAGES_ARRAY[@]}"; do
              IMAGE_TOSEARCH=$IMAGE
              if [ ! -z $PROJECT ]; then
                IMAGE_TOSEARCH="${PROJECT}_${IMAGE}"
              fi
              IMAGE_ID=$(docker images "$IMAGE_TOSEARCH:latest" --format "{{.ID}}")
              tag_and_push "$TAG"
              if [ "$TAG_LATEST" = true ]; then
                tag_and_push "latest"
              fi
            done

  sentry-upload:
    parameters:
      executable_name:
        description: Name of executable that should be pushed to sentry
        type: string
    steps:
      - run:
          name: Upload debug artifacts for an executable to Sentry.io
          command: |
            # The assumption here is that packages.tar.gz was tarred in
            # $MAGMA_ROOT/circleci in the magma_integ_test step
            cd circleci/executables

            SENTRY_ORG="lf-9c"
            NATIVE_PROJECT="lab-agws-native"
            EXEC="<< parameters.executable_name >>"
            objcopy --only-keep-debug "$EXEC" "$EXEC".debug
            objcopy --strip-debug --strip-unneeded "$EXEC"
            objcopy --add-gnu-debuglink="$EXEC".debug "$EXEC"

            # [Optional] Log included debug information
            sentry-cli difutil check "$EXEC"
            sentry-cli difutil check "$EXEC".debug

            # Upload the debug artifact with `symtab`, `debug`, and `sources`
            sentry-cli upload-dif --log-level=info --org="$SENTRY_ORG" --project="$NATIVE_PROJECT" --include-sources  "$EXEC".debug
            # Upload the stripped executable with `unwind`
            sentry-cli upload-dif --log-level=info --org="$SENTRY_ORG" --project="$NATIVE_PROJECT" "$EXEC"

  sentry-release:
    steps:
      - run: curl -sL https://sentry.io/get-cli/ | bash
      - run:
          name: Export Sentry Env Vars
          command: |
            echo export SENTRY_ENVIRONMENT="staging" >> $BASH_ENV
            echo export SENTRY_ORG="lf-9c" >> $BASH_ENV
      - sentry-upload:
          executable_name: sessiond
      - sentry-upload:
          executable_name: mme
      - run:
          name: Create a release in Sentry.io with the commit hash
          command: |
            COMMIT_HASH_WITH_VERSION="1.7.0-${CIRCLE_SHA1:0:8}"
            sentry-cli --log-level=info releases new -p lab-agws-python -p lab-agws-native ${COMMIT_HASH_WITH_VERSION}
            sentry-cli --log-level=info releases set-commits --auto --ignore-missing ${COMMIT_HASH_WITH_VERSION}
            sentry-cli --log-level=info releases finalize ${COMMIT_HASH_WITH_VERSION}


  magma_integ_test:
    parameters:
      stack:
        description: Which stack to run integ tests for (cwf, lte)
        type: string
      test:
        description: Should run tests (True, False)
        type: string
      build:
        description: Should build deployment artifacts (True, False)
        type: string
      deploy:
        description: Should deploy artifacts (True, False)
        type: string
    steps:
      - checkout
      - build/determinator:
          <<: *lte_build_verify
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run:
          name: Install tools
          command: |
            sudo apt-get update
            sudo apt-get install -y openvpn
      - run:
          name: Configure and start VPN client
          command: |
            echo $MAGMA_OVPN_CONF | base64 -d - > ciworker.conf
            sudo mv ciworker.conf /etc/openvpn/client.conf
            sudo service openvpn@client restart
      - run:
          name: Decode and set secrets
          command: |
            cd ${MAGMA_ROOT}/circleci
            echo $MAGMA_NODE_PKEY | base64 -d - > ci_node.pem
            chmod 0400 ci_node.pem
            echo $CI_OPERATOR_KEY | base64 -d - > ci_operator.key.pem
            echo $CI_OPERATOR | base64 -d - > ci_operator.pem

            echo $MAGMA_ROOTCA | base64 -d - > rootCA.pem
            echo $MAGMA_CONTROL_PROXY | base64 -d - > control_proxy.yml

            echo export AWS_DEFAULT_REGION="us-east-1" >> $BASH_ENV
            echo export AWS_ACCESS_KEY_ID="$(printenv MAGMA_DEPLOY_AWS_ACCESS_KEY_ID)" >> $BASH_ENV
            echo export AWS_SECRET_ACCESS_KEY="$(printenv MAGMA_DEPLOY_AWS_SECRET_ACCESS_KEY)" >> $BASH_ENV
      - python/set_version
      - run:
          name: Install python prerequisites
          command: pip3 install fabric3 jsonpickle requests PyYAML awscli
      # sleep 10 just in case the vpn client takes time to spin up
      - run:
          name: Run remote integ test
          command: |
            sleep 10
            cd ${MAGMA_ROOT}/circleci
            fab <<parameters.stack>> integ_test:repo=${CIRCLE_REPOSITORY_URL},branch=${CIRCLE_BRANCH},sha1=${CIRCLE_SHA1},run_integ_test=<<parameters.test>>,build_package=<<parameters.build>>,deploy_artifacts=<<parameters.deploy>>

            mkdir -p versions
            cp *_version versions || true
          no_output_timeout: 20m
      - run:
          name: Copy debian packages to new JFROG repo
          command: |
            cd ${MAGMA_ROOT}/circleci
            PACKAGE_FILE=packages.tar.gz
            if [ -f "${PACKAGE_FILE}" ]; then
               echo "${PACKAGE_FILE} exists"
               rm -rf *.deb
               tar xvf ${PACKAGE_FILE}
               for i in `ls -a1 *.deb`
               do
                  echo "Pushing package $i to JFROG artifiactory: ${JFROG_DEBIANLOCAL_REGISTRY}"
                  curl -uci-bot:${JFROG_CIBOT_APIKEYS} -XPUT "${JFROG_DEBIANLOCAL_REGISTRY}/focal-ci/$i;deb.distribution=focal-ci;deb.component=main;deb.architecture=amd64" -T $i
               done
            else
               echo "${PACKAGE_FILE} does NOT exist"
               echo "No debian packages to push to JFROG"
            fi
      - store_artifacts:
          path: /tmp/logs
      - store_test_results:
          path: /tmp/test-results
      - run:
          name: Double-check that the node is freed
          command: |
            cd ${MAGMA_ROOT}/circleci
            lease_id=$(cat lease_id.out)
            lease_node=$(cat lease_node.out)
            curl -X POST "https://api-staging.magma.etagecom.io/magma/v1/ci/nodes/${lease_node}/release/${lease_id}" -k --key ci_operator.key.pem --cert ci_operator.pem || true
          when: always
      - magma_slack_notify

  magma_slack_notify:
    description: Notify Slack on magma job failure
    steps:
      - run:
          command: |
            echo 'export SLACK_BUILD_STATUS="fail"' >> $BASH_ENV
          name: Slack - Setting Failure Condition
          when: on_fail
      - run:
          command: |
            echo 'export SLACK_BUILD_STATUS="success"' >> $BASH_ENV
          name: Slack - Setting Success Condition
          when: on_success
      - run:
          name: Send message to Slack
          command: |
            if [ "$SLACK_BUILD_STATUS" != "fail" ] || [ "$CIRCLE_BRANCH" != "master" ]; then
              echo "This command will only execute on failure on master."
              exit 0
            fi

            author=$(git show -s --format='%an')
            email=$(git show -s --format='%ae')
            rel_time=$(git show -s --format='%cr')
            abs_time=$(git show -s --format='%cd')
            gh_text="<https://github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/commit/${CIRCLE_SHA1}|${CIRCLE_SHA1:0:8}> by ${author} <${email}> ${rel_time} (${abs_time})"

            pretext="Job \`${CIRCLE_JOB}\` #${CIRCLE_BUILD_NUM} on branch \`${CIRCLE_BRANCH}\` of ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME} failed. Check the <${CIRCLE_BUILD_URL}|build logs> for details."
            color="#8b0902"

            slack_data=$(cat \<<EOF
            {
              "channel": "${SLACK_CHANNEL_CI}",
              "text": "*CircleCI Job Failure*",
              "attachments": [
                {
                  "color": "${color}",
                  "pretext": "${pretext}",
                  "fallback": "CircleCI job failure notification",
                  "fields": [
                    {
                      "title": "Revision",
                      "value": "${gh_text}",
                      "short": false
                    }
                  ]
                }
              ]
            }
            EOF
            )
            echo $slack_data
            curl -X POST -H 'Content-type: application/json' --data "${slack_data}" "${SLACK_WEBHOOK_OSS}"
          when: always

  persist-githash-version:
    parameters:
      file_prefix:
        type: string
    steps:
      - run:
          name: Create version file
          command: |
            cd ${MAGMA_ROOT}/circleci
            mkdir -p versions
            echo "${CIRCLE_SHA1:0:8}" > versions/<< parameters.file_prefix >>_version

  notify-magma:
    description: Notify Slack when an artifact is published
    parameters:
      artifact_name:
        description: Name of the artifact to include in the message
        type: string
      version_path:
        description: Path to file that will contain the artifact version
        type: string
    steps:
      - run:
          name: Send slack message
          command: |
            if [ "${CIRCLE_BRANCH}" != "master" ]; then
              exit 0
            fi

            author=$(git show -s --format='%an')
            email=$(git show -s --format='%ae')
            rel_time=$(git show -s --format='%cr')
            abs_time=$(git show -s --format='%cd')
            gh_text="<https://github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/commit/${CIRCLE_SHA1}|${CIRCLE_SHA1:0:8}> by ${author} <${email}> ${rel_time} (${abs_time})"

            if [ -f ${MAGMA_ROOT}/circleci/<< parameters.version_path >> ]; then
              ver=$(cat ${MAGMA_ROOT}/circleci/<< parameters.version_path >>)
            else
              ver="Unknown artifact version (this should never happen!)"
            fi

            pretext="Production artifact has been published. Promote or deploy it by following the appropriate oncall procedures."

            slack_data=$(cat \<<EOF
            {
              "channel": "${SLACK_CHANNEL_ARTIFACTS}",
              "text": "*<< parameters.artifact_name >> Artifact Has Been Published*",
              "attachments": [
                {
                  "color": "#36a64f",
                  "pretext": "${pretext}",
                  "fallback": "CircleCI workflow success notification",
                  "fields": [
                    {
                      "title": "Artifact Version",
                      "value": "\`${ver}\`",
                      "short": false
                    },
                    {
                      "title": "Revision",
                      "value": "${gh_text}",
                      "short": false
                    }
                  ]
                }
              ]
            }
            EOF
            )
            curl -X POST -H 'Content-type: application/json' --data "${slack_data}" "${SLACK_WEBHOOK_OSS}"

jobs:
  backport:
    machine:
      image: ubuntu-1604:201903-01
    environment:
      MAGMA_ROOT: /home/circleci/project
    steps:
      - checkout
      - python/set_version
      - run:
          command: |
            mkdir ~/.magma
            echo ${GITHUB_ACCESS_TOKEN} > ~/.magma/github_access_token
      - run:
          name: Install python prerequisites
          command: pip3 install fabric3 jsonpickle requests PyYAML PyGithub
      - run:
          command: |
            cd ${MAGMA_ROOT}/circleci/release
            fab find_release_commits
  ### CLOUD
  cloud-test:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    environment:
      MAGMA_ROOT: /home/circleci/project
    steps:
      - checkout
      - build/determinator:
          <<: *all_gateways_build_verify
      - docker/install-dc
      - python/set_version
      - run:
          command: |
            cd ${MAGMA_ROOT}/orc8r/cloud/docker
            python3 build.py --tests --up
          no_output_timeout: 15m
      - store_test_results:
          path: /home/circleci/project/orc8r/cloud/test-results
      - magma_slack_notify

  # Fail if code doesn't pass formatting requirements.
  # Upload test coverage statistics.
  cloud_lint:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    environment:
      MAGMA_ROOT: /home/circleci/project
    steps:
      - checkout
      - build/determinator:
          <<: *all_gateways_build_verify
      - docker/install-dc
      - python/set_version
      - run:
          name: Lint cloud Go code
          command: |
            cd ${MAGMA_ROOT}/orc8r/cloud/docker
            python3 build.py --lint
      - run:
          name: Generate test coverage
          command: |
            cd ${MAGMA_ROOT}/orc8r/cloud/docker
            python3 build.py --coverage
      - codecov/upload:
          file: /home/circleci/project/orc8r/cloud/coverage/all.gocov
          flags: cloud_lint
      - magma_slack_notify

  # Fail if checked-in generated code doesn't match output from
  # generation command.
  insync-checkin:
    machine:
      image: ubuntu-1604:201903-01
      #docker_layer_caching: true
    environment:
      MAGMA_ROOT: /home/circleci/project
    steps:
      - checkout
      - build/determinator:
          <<: *all_gateways_build_verify
      - docker/install-dc
      - python/set_version
      - run:
          command: |
            cd ${MAGMA_ROOT}/orc8r/cloud/docker
            python3 build.py --generate
      - run: sudo chown -R circleci $MAGMA_ROOT/*
      - run: git add .
      - run: git status
      - run: git diff-index --quiet HEAD
      - magma_slack_notify

  # Fail if terraform variables, helm charts and orcl is out of sync
  deploy-sync-checkin:
    machine:
      image: ubuntu-1604:201903-01
      # docker_layer_caching: true
    environment:
      MAGMA_ROOT: /home/circleci/project
    steps:
      - checkout
      - build/determinator:
          <<: *all_gateways_build_verify
      - docker/install-dc
      - python/set_version
      - run:
          command: |
            cd ${MAGMA_ROOT}/orc8r/cloud/deploy/orc8r_deployer/docker
            ./run_deployer.bash --deploy-dir /tmp/deploy_dir --build --test check_all
      - magma_slack_notify

  orc8r-build:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    environment:
      MODULE_DIR: /home/circleci/project
      MAGMA_ROOT: /home/circleci/project
    steps:
      - checkout
      - build/determinator:
          <<: *all_gateways_build_verify
      - docker/install-dc
      - run: sudo apt-get update
      - python/set_version
      - run:
          command: |
            cd ${MAGMA_ROOT}/orc8r/cloud/docker
            python3 build.py --all --nocache --parallel
      - tag-push-docker:
          project: orc8r
          images: "nginx|controller"
          tag-latest: true
      - tag-push-docker:
          project: orc8r
          images: "nginx|controller"
          tag-latest: true
          registry: $JFROG_DOCKER_ORC8R_REGISTRY
          username: $JFROG_USERNAME
          password: $JFROG_PASSWORD
      - persist-githash-version:
          file_prefix: orc8r
      - notify-magma:
          artifact_name: Orchestrator Images
          version_path: versions/orc8r_version
      - magma_slack_notify

  ### GATEWAY

  orc8r-gateway-test:
    docker:
      - image: circleci/golang:1.13-buster-node-browsers-legacy
    environment:
      GO111MODULE: 'on'
    steps:
      - checkout
      - build/determinator:
          <<: *orc8r_build_verify
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run-with-retry:
          command: go mod download
          workdir: ${MAGMA_ROOT}/cwf/gateway
      - run:
          command: |
            cd ${MAGMA_ROOT}/orc8r/gateway/go
            go test ./...
            go vet ./...
      - magma_slack_notify

  feg-lint:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    resource_class: large
    environment:
      GO111MODULE: 'on'
    steps:
      - checkout
      - build/determinator:
          <<: *federated_build_verify
      - install-go
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run: ./circleci/golang_before_install.sh
      - run-with-retry:
         command: go mod download
         workdir: ${MAGMA_ROOT}/cwf/gateway
      - run:
          name: Go lint code
          command: |
            cd ${MAGMA_ROOT}/feg/gateway
            make -C ${MAGMA_ROOT}/feg/gateway lint
      - run:
          name: Generate test coverage
          command: |
            cd ${MAGMA_ROOT}/feg/gateway
            make -C ${MAGMA_ROOT}/feg/gateway cover
      - codecov/upload:
          file: /home/circleci/project/feg/gateway/coverage/feg.gocov
          flags: feg-lint
      - magma_slack_notify

  feg-precommit:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    resource_class: large
    environment:
      GO111MODULE: 'on'
    steps:
      - checkout
      - build/determinator:
          <<: *federated_build_verify
      - install-go
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run: ./circleci/golang_before_install.sh
      - run-with-retry:
         command: go mod download
         workdir: ${MAGMA_ROOT}/cwf/gateway
      - run:
          name: make feg precommit
          command: |
            cd ${MAGMA_ROOT}/feg/gateway
            make -C ${MAGMA_ROOT}/feg/gateway precommit
      - store_test_results:
          path: /tmp/test-results
      - magma_slack_notify

  feg-build:
    parameters:
      tag-latest:
        default: false
        type: boolean
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    resource_class: large
    environment:
      MAGMA_ROOT: /home/circleci/project
    steps:
      - checkout
      - docker/install-dc
      - python/set_version
      - build/determinator:
          <<: *federated_build_verify
      - run:
          name: generate test certs and snowflake
          command: |
            # TODO add rootCA.pem and snowflake files in the ubuntu-1604:201903-01 image
            # create directories
            cd ${MAGMA_ROOT} && mkdir -p .cache/test_certs/ && mkdir -p .cache/feg/
            # create test certs
            cd ${MAGMA_ROOT}/.cache/test_certs/
            openssl genrsa -out rootCA.key 2048
            openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 365000 -out rootCA.pem -subj "/C=US/CN=rootca.magma.test"
            # create snowflake
            cd ${MAGMA_ROOT}/.cache/feg/ && touch snowflake
      - run:
          name: build docker
          command: |
            cd ${MAGMA_ROOT}/feg/gateway/docker
            DOCKER_REGISTRY=feg_ python3 build.py
      - run:
          name: run docker containers and check health
          command: |
            cd ${MAGMA_ROOT}/feg/gateway/docker
            DOCKER_REGISTRY=feg_ python3 build.py -e
      - tag-push-docker:
          job_name: publish docker images to facebookincubator docker registry
          project: feg
          images: "gateway_go|gateway_python"
          registry: $DOCKER_FEG_REGISTRY
          tag-latest: <<parameters.tag-latest>>
      - tag-push-docker:
          job_name: publish docker images to magmacore docker registry
          project: feg
          images: "gateway_go|gateway_python"
          registry: $JFROG_DOCKER_FEG_REGISTRY
          username: $JFROG_USERNAME
          password: $JFROG_PASSWORD
          tag-latest: <<parameters.tag-latest>>
      - persist-githash-version:
          file_prefix: feg
      - notify-magma:
          artifact_name: FeG
          version_path: versions/feg_version
      - magma_slack_notify

  cwag-precommit:
    docker:
      - image: circleci/golang:1.13-buster-node-browsers-legacy
    environment:
      GO111MODULE: 'on'
    steps:
      - checkout
      - build/determinator:
          <<: *all_gateways_build_verify
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run: ./circleci/golang_before_install.sh
      - run-with-retry:
         command: go mod download
         workdir: ${MAGMA_ROOT}/cwf/gateway
      - run:
          command: |
            cd ${MAGMA_ROOT}/cwf/gateway
            make -C ${MAGMA_ROOT}/cwf/gateway precommit
            cd ${MAGMA_ROOT}/cwf/gateway
            make -C ${MAGMA_ROOT}/cwf/gateway/integ_tests precommit
      - magma_slack_notify

  cwag-build:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    resource_class: large
    environment:
      MAGMA_ROOT: /home/circleci/project
    steps:
      - checkout
      - build/determinator:
          <<: *cwf_build_verify
      - run-with-retry:
          retry-count: 2
          workdir: $MAGMA_ROOT/cwf/gateway/docker
          command: docker-compose build --parallel
      # TODO bring up the containers and check for crashloops

  cwf-integ-test:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - build/determinator:
          <<: *all_gateways_build_verify
      - magma_integ_test:
          stack: cwf
          test: 'True'
          build: 'False'
          deploy: 'False'

  cwag-deploy:
    parameters:
      tag:
        description: Containers tag
        type: string
        default: ${CIRCLE_SHA1:0:8}
      images:
        description: Images to deploy
        type: string
        default: 'cwag_go|gateway_go|gateway_python|gateway_sessiond|gateway_pipelined'
      tag-latest:
        default: false
        type: boolean
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    environment:
      MAGMA_ROOT: /home/circleci/project
      DOCKER_REGISTRY: cwf_
    steps:
      - checkout
      - build/determinator:
          <<: *cwf_build_verify
      - docker/install-dc
      - run-with-retry:
          retry-count: 2
          workdir: $MAGMA_ROOT/cwf/gateway/docker
          command: docker-compose -f docker-compose.yml -f docker-compose.override.yml build --parallel
      - tag-push-docker:
          project: cwf
          images: <<parameters.images>>
          tag: <<parameters.tag>>
          registry: $DOCKER_MAGMA_REGISTRY
          tag-latest: <<parameters.tag-latest>>
      - tag-push-docker:
          project: cwf
          images: <<parameters.images>>
          tag: <<parameters.tag>>
          tag-latest: <<parameters.tag-latest>>
          registry: $JFROG_DOCKER_CWF_REGISTRY
          username: $JFROG_USERNAME
          password: $JFROG_PASSWORD
      - persist-githash-version:
          file_prefix: cwag
      - notify-magma:
          artifact_name: CWAG
          version_path: versions/cwag_version
      - magma_slack_notify

  mme-clang-tidy:
    machine:
      image: ubuntu-2004:202010-01
      docker_layer_caching: true
    environment:
      MAGMA_ROOT: /home/circleci/project
      BRANCH: << pipeline.git.branch >>
      REVISION: << pipeline.git.revision >>
    steps:
      - checkout
      - build/determinator:
          <<: *c_cpp_build_verify
      - run:
          command: |
            cd $MAGMA_ROOT/lte/gateway/docker/mme
            docker build -t magma-mme-build -f Dockerfile.ubuntu20.04 ../../../../
            docker run --env BRANCH=$BRANCH --env REVISION=$REVISION -v $MAGMA_ROOT:/magma -i -t magma-mme-build:latest /bin/bash -c 'cd /magma/lte/gateway;make clang_tidy_oai_upload'
          no_output_timeout: 20m
      - magma_slack_notify

  c-cpp-codecov:
    machine:
      image: ubuntu-2004:202010-01
      docker_layer_caching: true
    environment:
      MAGMA_ROOT: /home/circleci/project
    steps:
      - checkout
      - build/determinator:
          <<: *c_cpp_build_verify
      - run:
          command: |
            cd $MAGMA_ROOT/lte/gateway/docker/mme
            docker build -t magma/c_cpp_build -f Dockerfile.ubuntu20.04 ../../../../
            ci_env=`bash <(curl -s https://codecov.io/env)`
            docker run $ci_env -e CI=true -v /home/circleci/project:/magma -v /home/circleci/project/lte/gateway/configs:/etc/magma -i -t magma/c_cpp_build:latest /bin/bash -c "cd /magma/lte/gateway;make coverage;ls -al /tmp/;bash <(curl -s https://codecov.io/bash) -f /build/c/coverage.info -F c_cpp"
          no_output_timeout: 20m
      - magma_slack_notify

  session_manager_test:
    machine:
      image: ubuntu-2004:202010-01
      docker_layer_caching: true
    resource_class: large
    environment:
      MAGMA_ROOT: /home/circleci/project
    steps:
      - checkout
      - build/determinator:
          <<: *session_manager_build_verify
      - run:
          name: Build the base c/c++ container
          command: |
            cd $MAGMA_ROOT/lte/gateway/docker/mme
            docker build -t magma/c_cpp_build -f Dockerfile.ubuntu20.04 ../../../../
      - run:
          name: Run common tests
          command: |
            docker run -v /home/circleci/project:/magma -v /home/circleci/project/lte/gateway/configs:/etc/magma -i -t magma/c_cpp_build:latest /bin/bash -c "cd /magma/lte/gateway;make test_common;"
      - run:
          name: Run session_manager tests
          command: |
            docker run -v /home/circleci/project:/magma -v /home/circleci/project/lte/gateway/configs:/etc/magma -i -t magma/c_cpp_build:latest /bin/bash -c "cd /magma/lte/gateway;make test_session_manager;"
          no_output_timeout: 5m
      - magma_slack_notify

  mme_test:
    machine:
      image: ubuntu-2004:202010-01
      docker_layer_caching: true
    resource_class: large
    environment:
      MAGMA_ROOT: /home/circleci/project
    steps:
      - checkout
      - build/determinator:
          <<: *mme_build_verify
      - run:
          name: Build the base c/c++ container
          command: |
            cd $MAGMA_ROOT/lte/gateway/docker/mme
            docker build -t magma/c_cpp_build -f Dockerfile.ubuntu20.04 ../../../../
      - run:
          name: Run common tests
          command: |
            docker run -v /home/circleci/project:/magma -v /home/circleci/project/lte/gateway/configs:/etc/magma -i -t magma/c_cpp_build:latest /bin/bash -c "cd /magma/lte/gateway;make test_common;"
      - run:
          name: Run sctpd tests with Debug build type
          command: |
            docker run -v /home/circleci/project:/magma -v /home/circleci/project/lte/gateway/configs:/etc/magma -i -t magma/c_cpp_build:latest /bin/bash -c "cd /magma/lte/gateway;make test_sctpd BUILD_TYPE=Debug;"
      - run:
          name: Run sctpd tests with RelWithDebInfo build type
          command: |
            docker run -v /home/circleci/project:/magma -v /home/circleci/project/lte/gateway/configs:/etc/magma -i -t magma/c_cpp_build:latest /bin/bash -c "cd /magma/lte/gateway;make test_sctpd BUILD_TYPE=RelWithDebInfo;"
      - run:
          name: Run mme tests with Debug build type
          command: |
            docker run -v /home/circleci/project:/magma -v /home/circleci/project/lte/gateway/configs:/etc/magma -i -t magma/c_cpp_build:latest /bin/bash -c "cd /magma/lte/gateway;make test_oai BUILD_TYPE=Debug;"
      - run:
          name: Run mme tests with RelWithDebInfo build type
          command: |
            docker run -v /home/circleci/project:/magma -v /home/circleci/project/lte/gateway/configs:/etc/magma -i -t magma/c_cpp_build:latest /bin/bash -c "cd /magma/lte/gateway;make test_oai BUILD_TYPE=RelWithDebInfo;"
      - magma_slack_notify

  mme-clang-warnings:
    machine:
      image: ubuntu-2004:202010-01
      docker_layer_caching: true
    environment:
      MAGMA_ROOT: /home/circleci/project
      BRANCH: << pipeline.git.branch >>
      REVISION: << pipeline.git.revision >>
    steps:
      - checkout
      - run:
          command: |
            cd $MAGMA_ROOT/lte/gateway/docker/mme
            docker build -t magma-mme-build -f Dockerfile.ubuntu20.04 ../../../../
            docker run --env BRANCH=$BRANCH --env REVISION=$REVISION -v /home/circleci/project:/magma -v /home/circleci/project/lte/gateway/configs:/etc/magma -i -t magma-mme-build:latest /bin/bash -c "cd /magma/lte/gateway;make clang_warning_oai_upload"
          no_output_timeout: 20m
      - magma_slack_notify

  li_agent_test:
    machine:
      image: ubuntu-2004:202010-01
      docker_layer_caching: true
    resource_class: large
    environment:
      MAGMA_ROOT: /home/circleci/project
    steps:
      - checkout
      - build/determinator:
          <<: *li_agent_build_verify
      - run:
          name: Build the base c/c++ container
          command: |
            cd $MAGMA_ROOT/lte/gateway/docker/mme
            docker build -t magma/c_cpp_build -f Dockerfile.ubuntu20.04 ../../../../
      - run:
          name: Run common tests
          command: |
            docker run -v $MAGMA_ROOT:/magma -v $MAGMA_ROOT/lte/gateway/configs:/etc/magma -i -t magma/c_cpp_build:latest /bin/bash -c "cd /magma/lte/gateway;make test_common;"
      - run:
          name: Run li agent tests
          command: |
            docker run -v $MAGMA_ROOT:/magma -v $MAGMA_ROOT/lte/gateway/configs:/etc/magma -i -t magma/c_cpp_build:latest /bin/bash -c "cd /magma/lte/gateway;make test_li_agent;"
          no_output_timeout: 5m
      - magma_slack_notify

  connection-tracker-test:
    machine:
      image: ubuntu-2004:202010-01
      docker_layer_caching: true
    resource_class: large
    environment:
      MAGMA_ROOT: /home/circleci/project
    steps:
      - checkout
      - build/determinator:
          <<: *connection_tracker_build_verify
      - run:
          name: Build the base c/c++ container
          command: |
            cd $MAGMA_ROOT/lte/gateway/docker/mme
            docker build -t magma/c_cpp_build -f Dockerfile.ubuntu20.04 ../../../../
      - run:
          name: Build connection tracker with BUILD_TYPE=Debug
          command: |
            # TODO run unit tests once we write some tests
            docker run -v $MAGMA_ROOT:/magma -v $MAGMA_ROOT/lte/gateway/configs:/etc/magma -i -t magma/c_cpp_build:latest /bin/bash -c "cd /magma/lte/gateway;make build_connection_tracker BUILD_TYPE=Debug;"
          no_output_timeout: 5m
      - run:
          name: Build connection tracker with BUILD_TYPE=RelWithDebInfo
          command: |
            # TODO run unit tests once we write some tests
            docker run -v $MAGMA_ROOT:/magma -v $MAGMA_ROOT/lte/gateway/configs:/etc/magma -i -t magma/c_cpp_build:latest /bin/bash -c "cd /magma/lte/gateway;make build_connection_tracker BUILD_TYPE=RelWithDebInfo;"
          no_output_timeout: 5m
      - magma_slack_notify

  lte-test:
    machine:
      image: ubuntu-2004:202104-01
    environment:
      MAGMA_ROOT: /home/circleci/project
      PYTHON_BUILD: ${MAGMA_ROOT}/build
      PIP_CACHE_HOME: ${MAGMA_ROOT}/.pipcache
      MAGMA_DEV_MODE: 1
      SKIP_SUDO_TESTS: 1
      CODEGEN_ROOT: /home/circleci/project/.codegen
      SWAGGER_CODEGEN_JAR: /home/circleci/project/.codegen/swagger-codegen-cli.jar
    steps:
      - checkout
      - run: pyenv install 3.8.5
      - python/set_version:
          python_version: "3.8.5"
      - build/determinator:
          <<: *lte_build_verify
      - apt-focal-install-aioeventlet
      - run: mkdir -p /var/tmp/test_results
      - run: mkdir -p /var/tmp/codecovs
      - run: sudo apt-get update -y
      - run: sudo apt-get install -y libsystemd-dev pkg-config curl zip unzip net-tools
      - run: sudo apt-get install -y virtualenv python-babel python-dev build-essential autogen autoconf libtool python3-apt python3-requests python3-pip python-protobuf
      - run: pip3 install setuptools==49.6.0
      - run:
          command: |
            sudo curl -Lfs https://github.com/google/protobuf/releases/download/v3.1.0/protoc-3.1.0-linux-x86_64.zip -o protoc3.zip
            sudo unzip protoc3.zip -d protoc3
            sudo mv protoc3/bin/protoc /bin/protoc
            sudo chmod a+rx /bin/protoc
            sudo rm -rf protoc3.zip protoc3
            mkdir ${CODEGEN_ROOT}
            wget https://repo1.maven.org/maven2/io/swagger/swagger-codegen-cli/2.2.3/swagger-codegen-cli-2.2.3.jar -O $SWAGGER_CODEGEN_JAR
            make -C $MAGMA_ROOT/lte/gateway/python test_all
      - store_test_results:
          path: /var/tmp/test_results
      - codecov/upload:
          file: /var/tmp/codecovs/cover_lte.xml
          flags: lte-test
      - codecov/upload:
          file: /var/tmp/codecovs/cover_orc8r.xml
          flags: lte-test
      - magma_slack_notify

  lte-integ-test:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - build/determinator:
          <<: *lte_build_verify
      - magma_integ_test:
          stack: lte
          test: 'True'
          build: 'False'
          deploy: 'False'

  lte-agw-deploy:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - build/determinator:
          <<: *lte_build_verify
      - magma_integ_test:
          stack: lte
          test: 'False'
          build: 'True'
          deploy: 'True'
      - sentry-release
      - notify-magma:
          artifact_name: LTE AGW
          version_path: versions/magma_version

  ## CWF OPERATOR

  cwf-operator-precommit:
    docker:
      - image: circleci/golang:1.13-buster-node-browsers-legacy
    environment:
      GO111MODULE: 'on'
    steps:
      - checkout
      - build/determinator:
          paths: "cwf/k8s"
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run: ./circleci/golang_before_install.sh
      - run-with-retry:
          command: go mod download
          workdir: ${MAGMA_ROOT}/cwf/k8s/cwf_operator
      - run:
          command: |
            cd ${MAGMA_ROOT}/cwf/k8s/cwf_operator
            make -C ${MAGMA_ROOT}/cwf/k8s/cwf_operator precommit
      - magma_slack_notify

  cwf-operator-build:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    environment:
      MAGMA_ROOT: /home/circleci/project
    steps:
      - checkout
      - build/determinator:
          paths: "cwf/k8s"
      - docker/install-dc
      - run:
          command: |
            cd ${MAGMA_ROOT}/cwf/k8s/cwf_operator/docker
            DOCKER_REGISTRY=cwf_ docker-compose build --parallel
      - tag-push-docker:
          project: cwf
          images: "operator"
          registry: $DOCKER_MAGMA_REGISTRY
      - tag-push-docker:
          project: cwf
          images: "operator"
          registry: $JFROG_DOCKER_CWF_REGISTRY
          username: $JFROG_USERNAME
          password: $JFROG_PASSWORD
      - persist-githash-version:
          file_prefix: cwf_operator
      - notify-magma:
          artifact_name: CWF Operator
          version_path: versions/cwf_operator_version
      - magma_slack_notify

  ### NMS

  nms-flow-test:
    executor: node
    steps:
      - checkout
      - build/determinator:
          <<: *nms_build_verify
      - run:
          name: install flow
          <<: *appdir
          # Extract the specified flow version from the .flowconfig
          command: yarn add --dev -W flow-bin@$(x=$(grep "\[version\]" .flowconfig -A 1 | tail -n 1); echo ${x:1})
      - yarn-install
      - run:
          name: flow typecheck
          <<: *appdir
          command: yarn run flow
      - magma_slack_notify

  eslint:
    executor: node
    steps:
      - checkout
      - build/determinator:
          <<: *nms_build_verify
      - yarn-install
      - run:
          name: eslint
          <<: *appdir
          command: yarn run eslint ./
      - magma_slack_notify

  nms-yarn-test:
    executor: node
    steps:
      - checkout
      - build/determinator:
          <<: *nms_build_verify
      - yarn-install
      - run:
          name: yarn test
          <<: *appdir
          command: yarn test:ci
      - magma_slack_notify

  nms-e2e-test:
    machine:
      image: ubuntu-1604:201903-01
    environment:
      NMS_ROOT: ${MAGMA_ROOT}/nms/app/packages/magmalte
      PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: 'true'
      PUPPETEER_EXECUTABLE_PATH: /usr/bin/google-chrome-stable
    steps:
      - checkout
      - build/determinator:
          <<: *nms_build_verify
      - docker/install-dc
      - apt-install-yarn
      - apt-install-chrome
      - yarn-install
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run:
          command: |
            source $NVM_DIR/nvm.sh
            nvm install stable
            cd ${MAGMA_ROOT}/nms/app/packages/magmalte
            ./e2e_test_setup.sh
      - store_artifacts:
          path: /tmp/nms_artifacts
      - magma_slack_notify

  nms-build:
    machine:
      image: ubuntu-1604:201903-01
    environment:
      NMS_ROOT: ${MAGMA_ROOT}/nms/app/packages/magmalte
    steps:
      - checkout
      - build/determinator:
          <<: *nms_build_verify
      - docker/install-dc
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run:
          command: |
            cd ${MAGMA_ROOT}/nms/app/packages/magmalte
            docker-compose build magmalte
      - tag-push-docker:
          project: magmalte
          images: "magmalte"
      - tag-push-docker:
          project: magmalte
          images: "magmalte"
          tag-latest: true
          registry: $JFROG_DOCKER_ORC8R_REGISTRY
          username: $JFROG_USERNAME
          password: $JFROG_PASSWORD
      - persist-githash-version:
          file_prefix: nms
      - notify-magma:
          artifact_name: NMS
          version_path: versions/nms_version
      - magma_slack_notify

  ### XWF

  xwfm-test:
    parameters:
      notify_magma_ci:
        description: "should run magma_slack_notify for #magma_ci channel"
        type: boolean
        default: true
      notify_xwfm_ci:
        description: "should run magma_slack_notify for #xwfm_ci channel"
        type: boolean
        default: true
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    steps:
      - checkout
      - docker/install-dc
      - run:
          name: Loading openvswitch kernel module
          command: sudo modprobe openvswitch
      - run:
          name: Setup Environment Variables
          command: |
            echo export MAGMA_ROOT=$(pwd) >> $BASH_ENV
            echo export RUN_UID=$RANDOM >> $BASH_ENV
      - run:
          command: |
            env
            docker login -u ${XWF_ARTIFACTORY_USER} -p ${XWF_ARTIFACTORY_API_KEY} ${XWF_ARTIFACTORY_LINK}
            cd ${MAGMA_ROOT}/xwf/docker/
            docker-compose pull || true
            docker-compose build --parallel && docker-compose up -d && docker exec tests pytest --log-cli-level=info code/tests.py
      - when:
          condition: <<parameters.notify_magma_ci>>
          steps:
            - magma_slack_notify
      - when:
          condition: <<parameters.notify_xwfm_ci>>
          steps:
            - magma_slack_notify

  xwfm-deploy:
    parameters:
      tag:
        description: Containers tag
        type: string
        default: ${CIRCLE_SHA1:0:8}
      tag-latest:
        default: false
        type: boolean
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    environment:
      MAGMA_ROOT: /home/circleci/project
    steps:
      - checkout
      - docker/install-dc
      - run:
          name: Build xwf go radius
          command: |
            cd ${MAGMA_ROOT}/feg
            docker build --build-arg BUILD_NUM=${CIRCLE_SHA1:0:8} --tag goradius -f radius/src/Dockerfile ./
      - tag-push-docker:
          images: 'goradius'
          tag: <<parameters.tag>>
          registry: $DOCKER_MAGMA_REGISTRY
          tag-latest: <<parameters.tag-latest>>
      - run:
          name: Load openvswitch kernel module for xwf integ test
          command: sudo modprobe openvswitch
      - run:
          name: Build xwfm-integ-tests
          command: |
            cd ${MAGMA_ROOT}
            docker build --tag xwfm-integ-tests -f xwf/gateway/integ_tests/gw/Dockerfile ./
      - tag-push-docker:
          images: 'xwfm-integ-tests'
          tag: <<parameters.tag>>
          registry: $DOCKER_MAGMA_REGISTRY
          tag-latest: <<parameters.tag-latest>>
      - magma_slack_notify

  publish-amis-to-marketplace:
    machine:
      image: ubuntu-2004:202104-01
      docker_layer_caching: true
    parameters:
      aws_account:
        description: AWS account to push to
        type: string
        default: "FB"
    environment:
      MAGMA_ROOT: /home/circleci/project
      CODE_DIR: /home/circleci/project/experimental/cloudstrapper
      VARS_DIR: /home/circleci/project/experimental/cloudstrapper/playbooks/roles/vars
      WORK_DIR: /home/circleci/project/experimental/cloudstrapper/playbooks
    steps:
      - checkout
      - run: sudo apt-get update && sudo apt -y upgrade
      - run: pyenv install 3.7.0
      - python/set_version:
          python_version: "3.7.0"
      - run:
          name: Install Dependencies
          command: |
              pip install ansible awscli boto3
              sudo apt-get update
      - run:
          name: Propagate AWS credentials to ansible and create version
          command: |
            GIT_TAG="$(cd $MAGMA_ROOT && git describe --tags `git rev-list --tags --max-count=1`)"
            if [ "<<parameters.aws_account>>" = "FB" ]; then
              sed -i -e "s@awsAccessKey:@& ${AWS_ACCESS_KEY_AMI_QUENTIN}@1"  $VARS_DIR/secrets.yaml
              sed -i -e "s@awsSecretKey:@& ${AWS_SECRET_ACCESS_KEY_AMI_QUENTIN}@1"  $VARS_DIR/secrets.yaml
              echo export VERSION="$GIT_TAG$CIRCLE_BUILD_NUM" >> $BASH_ENV
            elif  [ "<<parameters.aws_account>>" = "LF" ]; then
              sed -i -e "s@awsAccessKey:@& ${AWS_ACCESS_KEY_AMI_LF}@1"  $VARS_DIR/secrets.yaml
              sed -i -e "s@awsSecretKey:@& ${AWS_SECRET_ACCESS_KEY_AMI_LF}@1"  $VARS_DIR/secrets.yaml
              echo export VERSION="$GIT_TAG" >> $BASH_ENV
            fi
            echo export GIT_TAG="$GIT_TAG" >> $BASH_ENV
            echo export PACKAGE_VERSION="${GIT_TAG:1}" >> $BASH_ENV
      - run:
          name: Propagate AWS region information
          command: |
            sed -i -e '/^awsAgwRegion: /s/:.*$/: us-east-1/' $VARS_DIR/cluster.yaml
            sed -i -e '/^awsOrc8rRegion: /s/:.*$/: us-east-1/' $VARS_DIR/cluster.yaml
            sed -i -e '/^awsAgwAz: /s/:.*$/: us-east-1b/' $VARS_DIR/cluster.yaml
            sed -i -e '/^buildAwsRegion: /s/:.*$/: us-east-1/' $VARS_DIR/build.yaml
            sed -i -e '/^buildAwsAz: /s/:.*$/: us-east-1b/' $VARS_DIR/build.yaml
      - run:
          name: Propagate names for AWS essential components
          command: |
            sed -i -e '/^secgroupDefault: /s/:.*$/: publish-amis-to-marketplace-secgroup/' $VARS_DIR/defaults.yaml
            sed -i -e '/^bucketDefault: /s/:.*$/: publish-amis-to-marketplace-bucket2/' $VARS_DIR/defaults.yaml
            sed -i -e '/^stackEssentialsDefault: /s/:.*$/: publish-amis-to-marketplace-stack/' $VARS_DIR/defaults.yaml
            sed -i -e '/^keyBoot: /s/:.*$/: publish-amis-to-marketplace-keyboot/' $VARS_DIR/defaults.yaml
            sed -i -e '/^keyHost: /s/:.*$/: publish-amis-to-marketplace-keyhost/' $VARS_DIR/defaults.yaml
      - run:
          name: Setup AWS essentials components
          command: |
            ansible-playbook $WORK_DIR/aws-prerequisites.yaml -e "dirLocalInventory=$VARS_DIR" --tags keyCreate,essentialsCreate
      - run:
          name: Propagate Tags for Cloudstrapper instances
          command: |
            sed -i -e '/^devOpsCloudstrapper: /s/:.*$/: publishAmisToMarketplaceDevopsCloudstrapper/' $VARS_DIR/defaults.yaml
            sed -i -e '/^primaryCloudstrapper: /s/:.*$/: publishAmisToMarketplacePrimaryCloudstrapper/' $VARS_DIR/defaults.yaml
            sed -i -e '/^stackDevOpsCloudstrapper: /s/:.*$/: publish-amis-to-marketplace-stack-devopscloustrapper/' $VARS_DIR/defaults.yaml
            sed -i -e '/^stackCloudstrapper: /s/:.*$/: publish-amis-to-marketplace-stack-cloustrapper/' $VARS_DIR/defaults.yaml
            sed -i -e '/^devOpsAmi: /s/:.*$/: cloudstrapper-'"$VERSION"'/' $VARS_DIR/defaults.yaml
            sed -i -e '/^buildUbuntuAmi: /s/:.*$/: ami-09e67e426f25ce0d7/' $VARS_DIR/build.yaml
            sed -i -e '/^buildAgwVersion: /s/:.*$/: '"$GIT_TAG"'/' $VARS_DIR/build.yaml
            sed -i -e '/^buildAgwPackage: /s/:.*$/: '"$PACKAGE_VERSION"'/' $VARS_DIR/build.yaml
      - run:
          name: Generate Cloudstrapper AMI
          no_output_timeout: 30m
          command: |
            ansible-playbook $WORK_DIR/devops-provision.yaml -e "dirLocalInventory=$VARS_DIR"
            echo "Waiting one minute for the instance to boot up."
            sleep 60
            ansible-playbook $WORK_DIR/devops-configure.yaml -e "devops=tag_Name_publishAmisToMarketplaceDevopsCloudstrapper" -e "dirLocalInventory=$VARS_DIR" -i $VARS_DIR/common_instance_aws_ec2.yaml -u ubuntu --skip-tags usingGitSshKey,buildMagma,pubMagma,helm,pubHelm
            ansible-playbook $WORK_DIR/devops-init.yaml -e "dirLocalInventory=$VARS_DIR"
      - notify-magma:
          artifact_name: Cloudstrapper AWS AMI
          version_path: $VERSION
      - run:
          name: Propagate variables for AGW AMI build
          command: |
            sed -i -e '/^buildAgwAmiName: /s/:.*$/: agw-ami-'"$VERSION"'/' $VARS_DIR/build.yaml
            sed -i -e '/^buildGwTagName: /s/:.*$/: publishAmisToMarketplaceAgw/' $VARS_DIR/build.yaml
            sed -i -e '/^awsAgwAmi: /s/:.*$/: ami-09e67e426f25ce0d7/' $VARS_DIR/cluster.yaml
      - run:
          name: Generate AGW AMI
          no_output_timeout: 30m
          command: |
            ansible-playbook $WORK_DIR/agw-provision.yaml -e "idSite=DevOps" -e "idGw=publishAmisToMarketplaceAgw" -e "dirLocalInventory=$VARS_DIR" --tags infra,inventory  -e "agwDevops=1" --skip-tags createBridge,cleanupBridge,cleanupNet
            echo "Waiting one minute for the instance to boot up."
            sleep 60
            ansible-playbook $WORK_DIR/ami-configure.yaml -i "$VARS_DIR/common_instance_aws_ec2.yaml" -e "dirLocalInventory=$VARS_DIR" -e "aminode=tag_Name_publishAmisToMarketplaceAgw" -e "ansible_python_interpreter=/usr/bin/python3" -u ubuntu
            ansible-playbook $WORK_DIR/ami-init.yaml -e "dirLocalInventory=$VARS_DIR"
      - run:
          name: Export qcow2 image for fb aws account in s3
          no_output_timeout: 30m
          command: |
            if [ "<<parameters.aws_account>>" = "FB" ]; then
              ansible-playbook $WORK_DIR/devops-convert-to-qcow2.yaml -e "dirLocalInventory=$VARS_DIR" -e "agwAmiName=agw-ami-$VERSION"
            fi
      - run:
          name: Clean AWS resources
          when: always
          command: |
            ansible-playbook $WORK_DIR/cleanup.yaml -e "dirLocalInventory=$VARS_DIR" --tags agw,subnet,secgroup,vpc,keys --skip-tags orc8r  -e "{"deleteStacks": [stackDevOpspublishAmisToMarketplaceAgw, publish-amis-to-marketplace-stack-devopscloustrapper, publish-amis-to-marketplace-stack, stackDevOpsNetwork]}"
      - notify-magma:
          artifact_name: AGW AWS AMI
          version_path: $VERSION
      - magma_slack_notify
workflows:
  version: 2

  cloud:
    jobs:
      - insync-checkin
      - deploy-sync-checkin
      - cloud_lint
      - cloud-test
      - orc8r-build:
          requires:
            - insync-checkin
            - deploy-sync-checkin
            - cloud_lint
            - cloud-test

  lib_gateway:
    jobs:
      - orc8r-gateway-test

  agw:
    jobs:
      - lte-test
      - session_manager_test
      - li_agent_test
      - connection-tracker-test
      - mme_test
      - mme-clang-tidy:
          <<: *only_master
      - mme-clang-warnings:
          <<: *only_master
      - lte-integ-test:
          <<: *master_and_develop
      - lte-agw-deploy:
          <<: *only_master
          requires:
            - lte-test
            - mme_test
            - lte-integ-test
      - c-cpp-codecov

  release:
    jobs:
      - release-hold:
          <<: *only_release
          type: approval
      - lte-agw-deploy:
          <<: *only_release
          requires:
            - release-hold
      - cwag-deploy:
          <<: *only_release
          requires:
            - release-hold
      - cwf-operator-build:
          <<: *only_release
          requires:
            - release-hold
      - feg-build:
          <<: *only_release
          requires:
            - release-hold
      - orc8r-build:
          <<: *only_release
          requires:
            - release-hold
      - nms-build:
          <<: *only_release
          requires:
            - release-hold
      - publish-amis-to-marketplace:
          aws_account: "LF"
          <<: *only_release
          requires:
            - release-hold
  feg:
    jobs:
      - feg-lint
      - feg-precommit
      - feg-build:
          requires:
            - feg-precommit
          tag-latest: true

  cwag:
    jobs:
      - cwag-precommit
      - cwag-build
      - cwf-integ-test:
          <<: *master_and_develop
      - xwfm-test:
          <<: *master_and_develop
      - cwag-deploy:
          <<: *only_master
          requires:
            - cwag-precommit
            - cwf-integ-test
          tag-latest: true
      - xwfm-deploy:
          <<: *only_master
          name: xwfm-deploy-latest
          requires:
            - cwag-deploy
            - xwfm-test
          tag-latest: true
      - cwag-deploy:
          <<: *only_master
          name: cwag-deploy-latest
          requires:
            - cwag-deploy
            - xwfm-deploy-latest
          images: 'gateway_python|gateway_pipelined|gateway_go'
          tag-latest: true


  cwf_operator:
    jobs:
      - cwf-operator-precommit
      - cwf-operator-build:
          requires:
            - cwf-operator-precommit

  hourly_xwfm:
    triggers:
      - schedule:
          cron: "0 * * * *"
          <<: *only_master
    jobs:
      - xwfm-test:
          notify_magma_ci: false

  weekly_ami_push:
    triggers:
      - schedule:
          cron: "0 0 * * 0"
          <<: *only_master
    jobs:
      - publish-amis-to-marketplace

  nms:
    jobs:
      - nms-flow-test
      - eslint
      - nms-yarn-test:
          requires:
            - nms-flow-test
      - nms-e2e-test:
          requires:
            - nms-flow-test
            - eslint
            - nms-yarn-test
      - nms-build:
          requires:
            - nms-flow-test
            - eslint
            - nms-yarn-test
            - nms-e2e-test

  github:
    jobs:
      - backport:
          <<: *only_master
