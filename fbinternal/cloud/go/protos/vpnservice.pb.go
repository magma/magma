//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: fbinternal/protos/vpnservice.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	protos "magma/orc8r/lib/go/protos"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VPNCertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Represents an x509 certificate request (.csr file)
	Request []byte `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"` // CSR in ASN.1 DER encoding
}

func (x *VPNCertRequest) Reset() {
	*x = VPNCertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fbinternal_protos_vpnservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VPNCertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPNCertRequest) ProtoMessage() {}

func (x *VPNCertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fbinternal_protos_vpnservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPNCertRequest.ProtoReflect.Descriptor instead.
func (*VPNCertRequest) Descriptor() ([]byte, []int) {
	return file_fbinternal_protos_vpnservice_proto_rawDescGZIP(), []int{0}
}

func (x *VPNCertRequest) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

type VPNCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Represents an x509 certificate used to connect with OpenVPN (.crt file)
	Serial string `protobuf:"bytes,1,opt,name=serial,proto3" json:"serial,omitempty"` // Serial number of certificate, given by signer
	Cert   []byte `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`     // Certificate in ASN.1 DER encoding
}

func (x *VPNCertificate) Reset() {
	*x = VPNCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fbinternal_protos_vpnservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VPNCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPNCertificate) ProtoMessage() {}

func (x *VPNCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_fbinternal_protos_vpnservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPNCertificate.ProtoReflect.Descriptor instead.
func (*VPNCertificate) Descriptor() ([]byte, []int) {
	return file_fbinternal_protos_vpnservice_proto_rawDescGZIP(), []int{1}
}

func (x *VPNCertificate) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

func (x *VPNCertificate) GetCert() []byte {
	if x != nil {
		return x.Cert
	}
	return nil
}

type PSK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaKey []byte `protobuf:"bytes,1,opt,name=ta_key,json=taKey,proto3" json:"ta_key,omitempty"`
}

func (x *PSK) Reset() {
	*x = PSK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fbinternal_protos_vpnservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PSK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PSK) ProtoMessage() {}

func (x *PSK) ProtoReflect() protoreflect.Message {
	mi := &file_fbinternal_protos_vpnservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PSK.ProtoReflect.Descriptor instead.
func (*PSK) Descriptor() ([]byte, []int) {
	return file_fbinternal_protos_vpnservice_proto_rawDescGZIP(), []int{2}
}

func (x *PSK) GetTaKey() []byte {
	if x != nil {
		return x.TaKey
	}
	return nil
}

var File_fbinternal_protos_vpnservice_proto protoreflect.FileDescriptor

var file_fbinternal_protos_vpnservice_proto_rawDesc = []byte{
	0x0a, 0x22, 0x66, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x76, 0x70, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0x1c, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x2a, 0x0a, 0x0e, 0x56, 0x50, 0x4e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3c, 0x0a, 0x0e, 0x56,
	0x50, 0x4e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x22, 0x1c, 0x0a, 0x03, 0x50, 0x53, 0x4b,
	0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x32, 0xce, 0x01, 0x0a, 0x0a, 0x56, 0x50, 0x4e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x47, 0x65, 0x74, 0x43, 0x41, 0x12,
	0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f,
	0x69, 0x64, 0x1a, 0x13, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72,
	0x2e, 0x43, 0x41, 0x43, 0x65, 0x72, 0x74, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x12, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x66, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x56, 0x50, 0x4e, 0x43,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x66, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x56, 0x50,
	0x4e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x38,
	0x0a, 0x0a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x53, 0x4b, 0x12, 0x11, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a,
	0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x50, 0x53, 0x4b, 0x22, 0x00, 0x42, 0x22, 0x5a, 0x20, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2f, 0x66, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fbinternal_protos_vpnservice_proto_rawDescOnce sync.Once
	file_fbinternal_protos_vpnservice_proto_rawDescData = file_fbinternal_protos_vpnservice_proto_rawDesc
)

func file_fbinternal_protos_vpnservice_proto_rawDescGZIP() []byte {
	file_fbinternal_protos_vpnservice_proto_rawDescOnce.Do(func() {
		file_fbinternal_protos_vpnservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_fbinternal_protos_vpnservice_proto_rawDescData)
	})
	return file_fbinternal_protos_vpnservice_proto_rawDescData
}

var file_fbinternal_protos_vpnservice_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_fbinternal_protos_vpnservice_proto_goTypes = []interface{}{
	(*VPNCertRequest)(nil), // 0: magma.fbinternal.VPNCertRequest
	(*VPNCertificate)(nil), // 1: magma.fbinternal.VPNCertificate
	(*PSK)(nil),            // 2: magma.fbinternal.PSK
	(*protos.Void)(nil),    // 3: magma.orc8r.Void
	(*protos.CACert)(nil),  // 4: magma.orc8r.CACert
}
var file_fbinternal_protos_vpnservice_proto_depIdxs = []int32{
	3, // 0: magma.fbinternal.VPNService.GetCA:input_type -> magma.orc8r.Void
	0, // 1: magma.fbinternal.VPNService.RequestCert:input_type -> magma.fbinternal.VPNCertRequest
	3, // 2: magma.fbinternal.VPNService.RequestPSK:input_type -> magma.orc8r.Void
	4, // 3: magma.fbinternal.VPNService.GetCA:output_type -> magma.orc8r.CACert
	1, // 4: magma.fbinternal.VPNService.RequestCert:output_type -> magma.fbinternal.VPNCertificate
	2, // 5: magma.fbinternal.VPNService.RequestPSK:output_type -> magma.fbinternal.PSK
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_fbinternal_protos_vpnservice_proto_init() }
func file_fbinternal_protos_vpnservice_proto_init() {
	if File_fbinternal_protos_vpnservice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fbinternal_protos_vpnservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VPNCertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fbinternal_protos_vpnservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VPNCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fbinternal_protos_vpnservice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PSK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fbinternal_protos_vpnservice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fbinternal_protos_vpnservice_proto_goTypes,
		DependencyIndexes: file_fbinternal_protos_vpnservice_proto_depIdxs,
		MessageInfos:      file_fbinternal_protos_vpnservice_proto_msgTypes,
	}.Build()
	File_fbinternal_protos_vpnservice_proto = out.File
	file_fbinternal_protos_vpnservice_proto_rawDesc = nil
	file_fbinternal_protos_vpnservice_proto_goTypes = nil
	file_fbinternal_protos_vpnservice_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VPNServiceClient is the client API for VPNService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VPNServiceClient interface {
	// Return the CA (ca.crt)
	GetCA(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*protos.CACert, error)
	// Given a request (client.csr), return a signed certificate (client.crt)
	RequestCert(ctx context.Context, in *VPNCertRequest, opts ...grpc.CallOption) (*VPNCertificate, error)
	// Request for the PSK (preshared key, i.e. tls-auth key used in openvpn)
	// See https://community.openvpn.net/openvpn/wiki/Hardening#Useof--tls-auth
	// for detail
	RequestPSK(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*PSK, error)
}

type vPNServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVPNServiceClient(cc grpc.ClientConnInterface) VPNServiceClient {
	return &vPNServiceClient{cc}
}

func (c *vPNServiceClient) GetCA(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*protos.CACert, error) {
	out := new(protos.CACert)
	err := c.cc.Invoke(ctx, "/magma.fbinternal.VPNService/GetCA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vPNServiceClient) RequestCert(ctx context.Context, in *VPNCertRequest, opts ...grpc.CallOption) (*VPNCertificate, error) {
	out := new(VPNCertificate)
	err := c.cc.Invoke(ctx, "/magma.fbinternal.VPNService/RequestCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vPNServiceClient) RequestPSK(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*PSK, error) {
	out := new(PSK)
	err := c.cc.Invoke(ctx, "/magma.fbinternal.VPNService/RequestPSK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VPNServiceServer is the server API for VPNService service.
type VPNServiceServer interface {
	// Return the CA (ca.crt)
	GetCA(context.Context, *protos.Void) (*protos.CACert, error)
	// Given a request (client.csr), return a signed certificate (client.crt)
	RequestCert(context.Context, *VPNCertRequest) (*VPNCertificate, error)
	// Request for the PSK (preshared key, i.e. tls-auth key used in openvpn)
	// See https://community.openvpn.net/openvpn/wiki/Hardening#Useof--tls-auth
	// for detail
	RequestPSK(context.Context, *protos.Void) (*PSK, error)
}

// UnimplementedVPNServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVPNServiceServer struct {
}

func (*UnimplementedVPNServiceServer) GetCA(context.Context, *protos.Void) (*protos.CACert, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCA not implemented")
}
func (*UnimplementedVPNServiceServer) RequestCert(context.Context, *VPNCertRequest) (*VPNCertificate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestCert not implemented")
}
func (*UnimplementedVPNServiceServer) RequestPSK(context.Context, *protos.Void) (*PSK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPSK not implemented")
}

func RegisterVPNServiceServer(s *grpc.Server, srv VPNServiceServer) {
	s.RegisterService(&_VPNService_serviceDesc, srv)
}

func _VPNService_GetCA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VPNServiceServer).GetCA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.fbinternal.VPNService/GetCA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VPNServiceServer).GetCA(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _VPNService_RequestCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VPNCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VPNServiceServer).RequestCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.fbinternal.VPNService/RequestCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VPNServiceServer).RequestCert(ctx, req.(*VPNCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VPNService_RequestPSK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VPNServiceServer).RequestPSK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.fbinternal.VPNService/RequestPSK",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VPNServiceServer).RequestPSK(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _VPNService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.fbinternal.VPNService",
	HandlerType: (*VPNServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCA",
			Handler:    _VPNService_GetCA_Handler,
		},
		{
			MethodName: "RequestCert",
			Handler:    _VPNService_RequestCert_Handler,
		},
		{
			MethodName: "RequestPSK",
			Handler:    _VPNService_RequestPSK_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fbinternal/protos/vpnservice.proto",
}
