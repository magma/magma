// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: testcontroller.proto

package protos

import (
	context "context"
	storage "fbinternal/cloud/go/services/testcontroller/storage"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	protos "magma/orc8r/lib/go/protos"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateTestCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Test *storage.MutableTestCase `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
}

func (x *CreateTestCaseRequest) Reset() {
	*x = CreateTestCaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testcontroller_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestCaseRequest) ProtoMessage() {}

func (x *CreateTestCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testcontroller_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestCaseRequest.ProtoReflect.Descriptor instead.
func (*CreateTestCaseRequest) Descriptor() ([]byte, []int) {
	return file_testcontroller_proto_rawDescGZIP(), []int{0}
}

func (x *CreateTestCaseRequest) GetTest() *storage.MutableTestCase {
	if x != nil {
		return x.Test
	}
	return nil
}

type GetTestCasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pks []int64 `protobuf:"varint,1,rep,packed,name=pks,proto3" json:"pks,omitempty"`
}

func (x *GetTestCasesRequest) Reset() {
	*x = GetTestCasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testcontroller_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestCasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestCasesRequest) ProtoMessage() {}

func (x *GetTestCasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testcontroller_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestCasesRequest.ProtoReflect.Descriptor instead.
func (*GetTestCasesRequest) Descriptor() ([]byte, []int) {
	return file_testcontroller_proto_rawDescGZIP(), []int{1}
}

func (x *GetTestCasesRequest) GetPks() []int64 {
	if x != nil {
		return x.Pks
	}
	return nil
}

type GetTestCasesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tests map[int64]*storage.TestCase `protobuf:"bytes,1,rep,name=tests,proto3" json:"tests,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetTestCasesResponse) Reset() {
	*x = GetTestCasesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testcontroller_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestCasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestCasesResponse) ProtoMessage() {}

func (x *GetTestCasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testcontroller_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestCasesResponse.ProtoReflect.Descriptor instead.
func (*GetTestCasesResponse) Descriptor() ([]byte, []int) {
	return file_testcontroller_proto_rawDescGZIP(), []int{2}
}

func (x *GetTestCasesResponse) GetTests() map[int64]*storage.TestCase {
	if x != nil {
		return x.Tests
	}
	return nil
}

type DeleteTestCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pk int64 `protobuf:"varint,1,opt,name=pk,proto3" json:"pk,omitempty"`
}

func (x *DeleteTestCaseRequest) Reset() {
	*x = DeleteTestCaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testcontroller_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTestCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestCaseRequest) ProtoMessage() {}

func (x *DeleteTestCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testcontroller_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestCaseRequest.ProtoReflect.Descriptor instead.
func (*DeleteTestCaseRequest) Descriptor() ([]byte, []int) {
	return file_testcontroller_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteTestCaseRequest) GetPk() int64 {
	if x != nil {
		return x.Pk
	}
	return 0
}

type GetNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string              `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	Tag *wrappers.StringValue `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *GetNodesRequest) Reset() {
	*x = GetNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testcontroller_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodesRequest) ProtoMessage() {}

func (x *GetNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testcontroller_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodesRequest.ProtoReflect.Descriptor instead.
func (*GetNodesRequest) Descriptor() ([]byte, []int) {
	return file_testcontroller_proto_rawDescGZIP(), []int{4}
}

func (x *GetNodesRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *GetNodesRequest) GetTag() *wrappers.StringValue {
	if x != nil {
		return x.Tag
	}
	return nil
}

type GetNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes map[string]*storage.CINode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetNodesResponse) Reset() {
	*x = GetNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testcontroller_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodesResponse) ProtoMessage() {}

func (x *GetNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testcontroller_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodesResponse.ProtoReflect.Descriptor instead.
func (*GetNodesResponse) Descriptor() ([]byte, []int) {
	return file_testcontroller_proto_rawDescGZIP(), []int{5}
}

func (x *GetNodesResponse) GetNodes() map[string]*storage.CINode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type CreateOrUpdateNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node *storage.MutableCINode `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *CreateOrUpdateNodeRequest) Reset() {
	*x = CreateOrUpdateNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testcontroller_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrUpdateNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateNodeRequest) ProtoMessage() {}

func (x *CreateOrUpdateNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testcontroller_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateNodeRequest.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateNodeRequest) Descriptor() ([]byte, []int) {
	return file_testcontroller_proto_rawDescGZIP(), []int{6}
}

func (x *CreateOrUpdateNodeRequest) GetNode() *storage.MutableCINode {
	if x != nil {
		return x.Node
	}
	return nil
}

type DeleteNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteNodeRequest) Reset() {
	*x = DeleteNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testcontroller_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeRequest) ProtoMessage() {}

func (x *DeleteNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testcontroller_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodeRequest.ProtoReflect.Descriptor instead.
func (*DeleteNodeRequest) Descriptor() ([]byte, []int) {
	return file_testcontroller_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteNodeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReserveNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tag string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *ReserveNodeRequest) Reset() {
	*x = ReserveNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testcontroller_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReserveNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveNodeRequest) ProtoMessage() {}

func (x *ReserveNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testcontroller_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveNodeRequest.ProtoReflect.Descriptor instead.
func (*ReserveNodeRequest) Descriptor() ([]byte, []int) {
	return file_testcontroller_proto_rawDescGZIP(), []int{8}
}

func (x *ReserveNodeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReserveNodeRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type LeaseNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *LeaseNodeRequest) Reset() {
	*x = LeaseNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testcontroller_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaseNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaseNodeRequest) ProtoMessage() {}

func (x *LeaseNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testcontroller_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaseNodeRequest.ProtoReflect.Descriptor instead.
func (*LeaseNodeRequest) Descriptor() ([]byte, []int) {
	return file_testcontroller_proto_rawDescGZIP(), []int{9}
}

func (x *LeaseNodeRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type LeaseNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lease *storage.NodeLease `protobuf:"bytes,1,opt,name=lease,proto3" json:"lease,omitempty"`
}

func (x *LeaseNodeResponse) Reset() {
	*x = LeaseNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testcontroller_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaseNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaseNodeResponse) ProtoMessage() {}

func (x *LeaseNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testcontroller_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaseNodeResponse.ProtoReflect.Descriptor instead.
func (*LeaseNodeResponse) Descriptor() ([]byte, []int) {
	return file_testcontroller_proto_rawDescGZIP(), []int{10}
}

func (x *LeaseNodeResponse) GetLease() *storage.NodeLease {
	if x != nil {
		return x.Lease
	}
	return nil
}

type ReleaseNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeID  string `protobuf:"bytes,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	LeaseID string `protobuf:"bytes,2,opt,name=leaseID,proto3" json:"leaseID,omitempty"`
}

func (x *ReleaseNodeRequest) Reset() {
	*x = ReleaseNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testcontroller_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseNodeRequest) ProtoMessage() {}

func (x *ReleaseNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testcontroller_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseNodeRequest.ProtoReflect.Descriptor instead.
func (*ReleaseNodeRequest) Descriptor() ([]byte, []int) {
	return file_testcontroller_proto_rawDescGZIP(), []int{11}
}

func (x *ReleaseNodeRequest) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *ReleaseNodeRequest) GetLeaseID() string {
	if x != nil {
		return x.LeaseID
	}
	return ""
}

var File_testcontroller_proto protoreflect.FileDescriptor

var file_testcontroller_proto_rawDesc = []byte{
	0x0a, 0x14, 0x74, 0x65, 0x73, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f, 0x6f,
	0x72, 0x63, 0x38, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x47, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f,
	0x66, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x65, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x04, 0x74, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x66, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x22, 0x27, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x70, 0x6b,
	0x73, 0x22, 0xdb, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x05, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x66, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x1a, 0x6b, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x27, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x70, 0x6b, 0x22, 0x53, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x2e, 0x0a,
	0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0xd1, 0x01,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x52, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0x69, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x62,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x43, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x67, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a,
	0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x49,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x23, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x36, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x24, 0x0a, 0x10, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x5d, 0x0a,
	0x11, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0x46, 0x0a, 0x12,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x49, 0x44, 0x32, 0xd5, 0x02, 0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x7d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x12, 0x34, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x66, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x12, 0x36, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x5d, 0x0a,
	0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12,
	0x36, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x32, 0x86, 0x05, 0x0a,
	0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x61, 0x73, 0x6f, 0x72, 0x12, 0x71, 0x0a, 0x08, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x66, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x66, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56,
	0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x32, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x0b,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x66, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x09, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x31, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x62, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0b,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x66, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56,
	0x6f, 0x69, 0x64, 0x22, 0x00, 0x42, 0x3a, 0x5a, 0x38, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f, 0x66,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x67, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_testcontroller_proto_rawDescOnce sync.Once
	file_testcontroller_proto_rawDescData = file_testcontroller_proto_rawDesc
)

func file_testcontroller_proto_rawDescGZIP() []byte {
	file_testcontroller_proto_rawDescOnce.Do(func() {
		file_testcontroller_proto_rawDescData = protoimpl.X.CompressGZIP(file_testcontroller_proto_rawDescData)
	})
	return file_testcontroller_proto_rawDescData
}

var file_testcontroller_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_testcontroller_proto_goTypes = []interface{}{
	(*CreateTestCaseRequest)(nil),     // 0: magma.fbinternal.testcontroller.CreateTestCaseRequest
	(*GetTestCasesRequest)(nil),       // 1: magma.fbinternal.testcontroller.GetTestCasesRequest
	(*GetTestCasesResponse)(nil),      // 2: magma.fbinternal.testcontroller.GetTestCasesResponse
	(*DeleteTestCaseRequest)(nil),     // 3: magma.fbinternal.testcontroller.DeleteTestCaseRequest
	(*GetNodesRequest)(nil),           // 4: magma.fbinternal.testcontroller.GetNodesRequest
	(*GetNodesResponse)(nil),          // 5: magma.fbinternal.testcontroller.GetNodesResponse
	(*CreateOrUpdateNodeRequest)(nil), // 6: magma.fbinternal.testcontroller.CreateOrUpdateNodeRequest
	(*DeleteNodeRequest)(nil),         // 7: magma.fbinternal.testcontroller.DeleteNodeRequest
	(*ReserveNodeRequest)(nil),        // 8: magma.fbinternal.testcontroller.ReserveNodeRequest
	(*LeaseNodeRequest)(nil),          // 9: magma.fbinternal.testcontroller.LeaseNodeRequest
	(*LeaseNodeResponse)(nil),         // 10: magma.fbinternal.testcontroller.LeaseNodeResponse
	(*ReleaseNodeRequest)(nil),        // 11: magma.fbinternal.testcontroller.ReleaseNodeRequest
	nil,                               // 12: magma.fbinternal.testcontroller.GetTestCasesResponse.TestsEntry
	nil,                               // 13: magma.fbinternal.testcontroller.GetNodesResponse.NodesEntry
	(*storage.MutableTestCase)(nil),   // 14: magma.fbinternal.testcontroller.storage.MutableTestCase
	(*wrappers.StringValue)(nil),      // 15: google.protobuf.StringValue
	(*storage.MutableCINode)(nil),     // 16: magma.fbinternal.testcontroller.storage.MutableCINode
	(*storage.NodeLease)(nil),         // 17: magma.fbinternal.testcontroller.storage.NodeLease
	(*storage.TestCase)(nil),          // 18: magma.fbinternal.testcontroller.storage.TestCase
	(*storage.CINode)(nil),            // 19: magma.fbinternal.testcontroller.storage.CINode
	(*protos.Void)(nil),               // 20: magma.orc8r.Void
}
var file_testcontroller_proto_depIdxs = []int32{
	14, // 0: magma.fbinternal.testcontroller.CreateTestCaseRequest.test:type_name -> magma.fbinternal.testcontroller.storage.MutableTestCase
	12, // 1: magma.fbinternal.testcontroller.GetTestCasesResponse.tests:type_name -> magma.fbinternal.testcontroller.GetTestCasesResponse.TestsEntry
	15, // 2: magma.fbinternal.testcontroller.GetNodesRequest.tag:type_name -> google.protobuf.StringValue
	13, // 3: magma.fbinternal.testcontroller.GetNodesResponse.nodes:type_name -> magma.fbinternal.testcontroller.GetNodesResponse.NodesEntry
	16, // 4: magma.fbinternal.testcontroller.CreateOrUpdateNodeRequest.node:type_name -> magma.fbinternal.testcontroller.storage.MutableCINode
	17, // 5: magma.fbinternal.testcontroller.LeaseNodeResponse.lease:type_name -> magma.fbinternal.testcontroller.storage.NodeLease
	18, // 6: magma.fbinternal.testcontroller.GetTestCasesResponse.TestsEntry.value:type_name -> magma.fbinternal.testcontroller.storage.TestCase
	19, // 7: magma.fbinternal.testcontroller.GetNodesResponse.NodesEntry.value:type_name -> magma.fbinternal.testcontroller.storage.CINode
	1,  // 8: magma.fbinternal.testcontroller.TestController.GetTestCases:input_type -> magma.fbinternal.testcontroller.GetTestCasesRequest
	0,  // 9: magma.fbinternal.testcontroller.TestController.CreateOrUpdateTestCase:input_type -> magma.fbinternal.testcontroller.CreateTestCaseRequest
	3,  // 10: magma.fbinternal.testcontroller.TestController.DeleteTestCase:input_type -> magma.fbinternal.testcontroller.DeleteTestCaseRequest
	4,  // 11: magma.fbinternal.testcontroller.NodeLeasor.GetNodes:input_type -> magma.fbinternal.testcontroller.GetNodesRequest
	6,  // 12: magma.fbinternal.testcontroller.NodeLeasor.CreateOrUpdateNode:input_type -> magma.fbinternal.testcontroller.CreateOrUpdateNodeRequest
	7,  // 13: magma.fbinternal.testcontroller.NodeLeasor.DeleteNode:input_type -> magma.fbinternal.testcontroller.DeleteNodeRequest
	8,  // 14: magma.fbinternal.testcontroller.NodeLeasor.ReserveNode:input_type -> magma.fbinternal.testcontroller.ReserveNodeRequest
	9,  // 15: magma.fbinternal.testcontroller.NodeLeasor.LeaseNode:input_type -> magma.fbinternal.testcontroller.LeaseNodeRequest
	11, // 16: magma.fbinternal.testcontroller.NodeLeasor.ReleaseNode:input_type -> magma.fbinternal.testcontroller.ReleaseNodeRequest
	2,  // 17: magma.fbinternal.testcontroller.TestController.GetTestCases:output_type -> magma.fbinternal.testcontroller.GetTestCasesResponse
	20, // 18: magma.fbinternal.testcontroller.TestController.CreateOrUpdateTestCase:output_type -> magma.orc8r.Void
	20, // 19: magma.fbinternal.testcontroller.TestController.DeleteTestCase:output_type -> magma.orc8r.Void
	5,  // 20: magma.fbinternal.testcontroller.NodeLeasor.GetNodes:output_type -> magma.fbinternal.testcontroller.GetNodesResponse
	20, // 21: magma.fbinternal.testcontroller.NodeLeasor.CreateOrUpdateNode:output_type -> magma.orc8r.Void
	20, // 22: magma.fbinternal.testcontroller.NodeLeasor.DeleteNode:output_type -> magma.orc8r.Void
	10, // 23: magma.fbinternal.testcontroller.NodeLeasor.ReserveNode:output_type -> magma.fbinternal.testcontroller.LeaseNodeResponse
	10, // 24: magma.fbinternal.testcontroller.NodeLeasor.LeaseNode:output_type -> magma.fbinternal.testcontroller.LeaseNodeResponse
	20, // 25: magma.fbinternal.testcontroller.NodeLeasor.ReleaseNode:output_type -> magma.orc8r.Void
	17, // [17:26] is the sub-list for method output_type
	8,  // [8:17] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_testcontroller_proto_init() }
func file_testcontroller_proto_init() {
	if File_testcontroller_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_testcontroller_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestCaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testcontroller_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestCasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testcontroller_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestCasesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testcontroller_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTestCaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testcontroller_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testcontroller_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testcontroller_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrUpdateNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testcontroller_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testcontroller_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReserveNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testcontroller_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaseNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testcontroller_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaseNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testcontroller_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_testcontroller_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_testcontroller_proto_goTypes,
		DependencyIndexes: file_testcontroller_proto_depIdxs,
		MessageInfos:      file_testcontroller_proto_msgTypes,
	}.Build()
	File_testcontroller_proto = out.File
	file_testcontroller_proto_rawDesc = nil
	file_testcontroller_proto_goTypes = nil
	file_testcontroller_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TestControllerClient is the client API for TestController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestControllerClient interface {
	GetTestCases(ctx context.Context, in *GetTestCasesRequest, opts ...grpc.CallOption) (*GetTestCasesResponse, error)
	CreateOrUpdateTestCase(ctx context.Context, in *CreateTestCaseRequest, opts ...grpc.CallOption) (*protos.Void, error)
	DeleteTestCase(ctx context.Context, in *DeleteTestCaseRequest, opts ...grpc.CallOption) (*protos.Void, error)
}

type testControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewTestControllerClient(cc grpc.ClientConnInterface) TestControllerClient {
	return &testControllerClient{cc}
}

func (c *testControllerClient) GetTestCases(ctx context.Context, in *GetTestCasesRequest, opts ...grpc.CallOption) (*GetTestCasesResponse, error) {
	out := new(GetTestCasesResponse)
	err := c.cc.Invoke(ctx, "/magma.fbinternal.testcontroller.TestController/GetTestCases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testControllerClient) CreateOrUpdateTestCase(ctx context.Context, in *CreateTestCaseRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.fbinternal.testcontroller.TestController/CreateOrUpdateTestCase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testControllerClient) DeleteTestCase(ctx context.Context, in *DeleteTestCaseRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.fbinternal.testcontroller.TestController/DeleteTestCase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestControllerServer is the server API for TestController service.
type TestControllerServer interface {
	GetTestCases(context.Context, *GetTestCasesRequest) (*GetTestCasesResponse, error)
	CreateOrUpdateTestCase(context.Context, *CreateTestCaseRequest) (*protos.Void, error)
	DeleteTestCase(context.Context, *DeleteTestCaseRequest) (*protos.Void, error)
}

// UnimplementedTestControllerServer can be embedded to have forward compatible implementations.
type UnimplementedTestControllerServer struct {
}

func (*UnimplementedTestControllerServer) GetTestCases(context.Context, *GetTestCasesRequest) (*GetTestCasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestCases not implemented")
}
func (*UnimplementedTestControllerServer) CreateOrUpdateTestCase(context.Context, *CreateTestCaseRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateTestCase not implemented")
}
func (*UnimplementedTestControllerServer) DeleteTestCase(context.Context, *DeleteTestCaseRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTestCase not implemented")
}

func RegisterTestControllerServer(s *grpc.Server, srv TestControllerServer) {
	s.RegisterService(&_TestController_serviceDesc, srv)
}

func _TestController_GetTestCases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestCasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestControllerServer).GetTestCases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.fbinternal.testcontroller.TestController/GetTestCases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestControllerServer).GetTestCases(ctx, req.(*GetTestCasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestController_CreateOrUpdateTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestControllerServer).CreateOrUpdateTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.fbinternal.testcontroller.TestController/CreateOrUpdateTestCase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestControllerServer).CreateOrUpdateTestCase(ctx, req.(*CreateTestCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestController_DeleteTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTestCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestControllerServer).DeleteTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.fbinternal.testcontroller.TestController/DeleteTestCase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestControllerServer).DeleteTestCase(ctx, req.(*DeleteTestCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.fbinternal.testcontroller.TestController",
	HandlerType: (*TestControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTestCases",
			Handler:    _TestController_GetTestCases_Handler,
		},
		{
			MethodName: "CreateOrUpdateTestCase",
			Handler:    _TestController_CreateOrUpdateTestCase_Handler,
		},
		{
			MethodName: "DeleteTestCase",
			Handler:    _TestController_DeleteTestCase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testcontroller.proto",
}

// NodeLeasorClient is the client API for NodeLeasor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeLeasorClient interface {
	GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error)
	CreateOrUpdateNode(ctx context.Context, in *CreateOrUpdateNodeRequest, opts ...grpc.CallOption) (*protos.Void, error)
	DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*protos.Void, error)
	ReserveNode(ctx context.Context, in *ReserveNodeRequest, opts ...grpc.CallOption) (*LeaseNodeResponse, error)
	LeaseNode(ctx context.Context, in *LeaseNodeRequest, opts ...grpc.CallOption) (*LeaseNodeResponse, error)
	ReleaseNode(ctx context.Context, in *ReleaseNodeRequest, opts ...grpc.CallOption) (*protos.Void, error)
}

type nodeLeasorClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeLeasorClient(cc grpc.ClientConnInterface) NodeLeasorClient {
	return &nodeLeasorClient{cc}
}

func (c *nodeLeasorClient) GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error) {
	out := new(GetNodesResponse)
	err := c.cc.Invoke(ctx, "/magma.fbinternal.testcontroller.NodeLeasor/GetNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeLeasorClient) CreateOrUpdateNode(ctx context.Context, in *CreateOrUpdateNodeRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.fbinternal.testcontroller.NodeLeasor/CreateOrUpdateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeLeasorClient) DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.fbinternal.testcontroller.NodeLeasor/DeleteNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeLeasorClient) ReserveNode(ctx context.Context, in *ReserveNodeRequest, opts ...grpc.CallOption) (*LeaseNodeResponse, error) {
	out := new(LeaseNodeResponse)
	err := c.cc.Invoke(ctx, "/magma.fbinternal.testcontroller.NodeLeasor/ReserveNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeLeasorClient) LeaseNode(ctx context.Context, in *LeaseNodeRequest, opts ...grpc.CallOption) (*LeaseNodeResponse, error) {
	out := new(LeaseNodeResponse)
	err := c.cc.Invoke(ctx, "/magma.fbinternal.testcontroller.NodeLeasor/LeaseNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeLeasorClient) ReleaseNode(ctx context.Context, in *ReleaseNodeRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.fbinternal.testcontroller.NodeLeasor/ReleaseNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeLeasorServer is the server API for NodeLeasor service.
type NodeLeasorServer interface {
	GetNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error)
	CreateOrUpdateNode(context.Context, *CreateOrUpdateNodeRequest) (*protos.Void, error)
	DeleteNode(context.Context, *DeleteNodeRequest) (*protos.Void, error)
	ReserveNode(context.Context, *ReserveNodeRequest) (*LeaseNodeResponse, error)
	LeaseNode(context.Context, *LeaseNodeRequest) (*LeaseNodeResponse, error)
	ReleaseNode(context.Context, *ReleaseNodeRequest) (*protos.Void, error)
}

// UnimplementedNodeLeasorServer can be embedded to have forward compatible implementations.
type UnimplementedNodeLeasorServer struct {
}

func (*UnimplementedNodeLeasorServer) GetNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (*UnimplementedNodeLeasorServer) CreateOrUpdateNode(context.Context, *CreateOrUpdateNodeRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateNode not implemented")
}
func (*UnimplementedNodeLeasorServer) DeleteNode(context.Context, *DeleteNodeRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (*UnimplementedNodeLeasorServer) ReserveNode(context.Context, *ReserveNodeRequest) (*LeaseNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveNode not implemented")
}
func (*UnimplementedNodeLeasorServer) LeaseNode(context.Context, *LeaseNodeRequest) (*LeaseNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaseNode not implemented")
}
func (*UnimplementedNodeLeasorServer) ReleaseNode(context.Context, *ReleaseNodeRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseNode not implemented")
}

func RegisterNodeLeasorServer(s *grpc.Server, srv NodeLeasorServer) {
	s.RegisterService(&_NodeLeasor_serviceDesc, srv)
}

func _NodeLeasor_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeLeasorServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.fbinternal.testcontroller.NodeLeasor/GetNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeLeasorServer).GetNodes(ctx, req.(*GetNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeLeasor_CreateOrUpdateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeLeasorServer).CreateOrUpdateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.fbinternal.testcontroller.NodeLeasor/CreateOrUpdateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeLeasorServer).CreateOrUpdateNode(ctx, req.(*CreateOrUpdateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeLeasor_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeLeasorServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.fbinternal.testcontroller.NodeLeasor/DeleteNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeLeasorServer).DeleteNode(ctx, req.(*DeleteNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeLeasor_ReserveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeLeasorServer).ReserveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.fbinternal.testcontroller.NodeLeasor/ReserveNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeLeasorServer).ReserveNode(ctx, req.(*ReserveNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeLeasor_LeaseNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaseNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeLeasorServer).LeaseNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.fbinternal.testcontroller.NodeLeasor/LeaseNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeLeasorServer).LeaseNode(ctx, req.(*LeaseNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeLeasor_ReleaseNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeLeasorServer).ReleaseNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.fbinternal.testcontroller.NodeLeasor/ReleaseNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeLeasorServer).ReleaseNode(ctx, req.(*ReleaseNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeLeasor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.fbinternal.testcontroller.NodeLeasor",
	HandlerType: (*NodeLeasorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodes",
			Handler:    _NodeLeasor_GetNodes_Handler,
		},
		{
			MethodName: "CreateOrUpdateNode",
			Handler:    _NodeLeasor_CreateOrUpdateNode_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _NodeLeasor_DeleteNode_Handler,
		},
		{
			MethodName: "ReserveNode",
			Handler:    _NodeLeasor_ReserveNode_Handler,
		},
		{
			MethodName: "LeaseNode",
			Handler:    _NodeLeasor_LeaseNode_Handler,
		},
		{
			MethodName: "ReleaseNode",
			Handler:    _NodeLeasor_ReleaseNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testcontroller.proto",
}
