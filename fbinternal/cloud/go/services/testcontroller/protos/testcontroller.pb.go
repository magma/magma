// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fbinternal/cloud/go/services/testcontroller/protos/testcontroller.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	storage "magma/fbinternal/cloud/go/services/testcontroller/storage"
	protos "magma/orc8r/lib/go/protos"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CreateTestCaseRequest struct {
	Test                 *storage.MutableTestCase `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *CreateTestCaseRequest) Reset()         { *m = CreateTestCaseRequest{} }
func (m *CreateTestCaseRequest) String() string { return proto.CompactTextString(m) }
func (*CreateTestCaseRequest) ProtoMessage()    {}
func (*CreateTestCaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9dd56868ed73aa3, []int{0}
}

func (m *CreateTestCaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateTestCaseRequest.Unmarshal(m, b)
}
func (m *CreateTestCaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateTestCaseRequest.Marshal(b, m, deterministic)
}
func (m *CreateTestCaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTestCaseRequest.Merge(m, src)
}
func (m *CreateTestCaseRequest) XXX_Size() int {
	return xxx_messageInfo_CreateTestCaseRequest.Size(m)
}
func (m *CreateTestCaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTestCaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTestCaseRequest proto.InternalMessageInfo

func (m *CreateTestCaseRequest) GetTest() *storage.MutableTestCase {
	if m != nil {
		return m.Test
	}
	return nil
}

type GetTestCasesRequest struct {
	Pks                  []int64  `protobuf:"varint,1,rep,packed,name=pks,proto3" json:"pks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTestCasesRequest) Reset()         { *m = GetTestCasesRequest{} }
func (m *GetTestCasesRequest) String() string { return proto.CompactTextString(m) }
func (*GetTestCasesRequest) ProtoMessage()    {}
func (*GetTestCasesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9dd56868ed73aa3, []int{1}
}

func (m *GetTestCasesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTestCasesRequest.Unmarshal(m, b)
}
func (m *GetTestCasesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTestCasesRequest.Marshal(b, m, deterministic)
}
func (m *GetTestCasesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTestCasesRequest.Merge(m, src)
}
func (m *GetTestCasesRequest) XXX_Size() int {
	return xxx_messageInfo_GetTestCasesRequest.Size(m)
}
func (m *GetTestCasesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTestCasesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTestCasesRequest proto.InternalMessageInfo

func (m *GetTestCasesRequest) GetPks() []int64 {
	if m != nil {
		return m.Pks
	}
	return nil
}

type GetTestCasesResponse struct {
	Tests                map[int64]*storage.TestCase `protobuf:"bytes,1,rep,name=tests,proto3" json:"tests,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *GetTestCasesResponse) Reset()         { *m = GetTestCasesResponse{} }
func (m *GetTestCasesResponse) String() string { return proto.CompactTextString(m) }
func (*GetTestCasesResponse) ProtoMessage()    {}
func (*GetTestCasesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9dd56868ed73aa3, []int{2}
}

func (m *GetTestCasesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTestCasesResponse.Unmarshal(m, b)
}
func (m *GetTestCasesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTestCasesResponse.Marshal(b, m, deterministic)
}
func (m *GetTestCasesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTestCasesResponse.Merge(m, src)
}
func (m *GetTestCasesResponse) XXX_Size() int {
	return xxx_messageInfo_GetTestCasesResponse.Size(m)
}
func (m *GetTestCasesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTestCasesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTestCasesResponse proto.InternalMessageInfo

func (m *GetTestCasesResponse) GetTests() map[int64]*storage.TestCase {
	if m != nil {
		return m.Tests
	}
	return nil
}

type DeleteTestCaseRequest struct {
	Pk                   int64    `protobuf:"varint,1,opt,name=pk,proto3" json:"pk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteTestCaseRequest) Reset()         { *m = DeleteTestCaseRequest{} }
func (m *DeleteTestCaseRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteTestCaseRequest) ProtoMessage()    {}
func (*DeleteTestCaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9dd56868ed73aa3, []int{3}
}

func (m *DeleteTestCaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteTestCaseRequest.Unmarshal(m, b)
}
func (m *DeleteTestCaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteTestCaseRequest.Marshal(b, m, deterministic)
}
func (m *DeleteTestCaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTestCaseRequest.Merge(m, src)
}
func (m *DeleteTestCaseRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteTestCaseRequest.Size(m)
}
func (m *DeleteTestCaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTestCaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTestCaseRequest proto.InternalMessageInfo

func (m *DeleteTestCaseRequest) GetPk() int64 {
	if m != nil {
		return m.Pk
	}
	return 0
}

type GetNodesRequest struct {
	Ids                  []string              `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	Tag                  *wrappers.StringValue `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GetNodesRequest) Reset()         { *m = GetNodesRequest{} }
func (m *GetNodesRequest) String() string { return proto.CompactTextString(m) }
func (*GetNodesRequest) ProtoMessage()    {}
func (*GetNodesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9dd56868ed73aa3, []int{4}
}

func (m *GetNodesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNodesRequest.Unmarshal(m, b)
}
func (m *GetNodesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNodesRequest.Marshal(b, m, deterministic)
}
func (m *GetNodesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodesRequest.Merge(m, src)
}
func (m *GetNodesRequest) XXX_Size() int {
	return xxx_messageInfo_GetNodesRequest.Size(m)
}
func (m *GetNodesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodesRequest proto.InternalMessageInfo

func (m *GetNodesRequest) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *GetNodesRequest) GetTag() *wrappers.StringValue {
	if m != nil {
		return m.Tag
	}
	return nil
}

type GetNodesResponse struct {
	Nodes                map[string]*storage.CINode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *GetNodesResponse) Reset()         { *m = GetNodesResponse{} }
func (m *GetNodesResponse) String() string { return proto.CompactTextString(m) }
func (*GetNodesResponse) ProtoMessage()    {}
func (*GetNodesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9dd56868ed73aa3, []int{5}
}

func (m *GetNodesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNodesResponse.Unmarshal(m, b)
}
func (m *GetNodesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNodesResponse.Marshal(b, m, deterministic)
}
func (m *GetNodesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodesResponse.Merge(m, src)
}
func (m *GetNodesResponse) XXX_Size() int {
	return xxx_messageInfo_GetNodesResponse.Size(m)
}
func (m *GetNodesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodesResponse proto.InternalMessageInfo

func (m *GetNodesResponse) GetNodes() map[string]*storage.CINode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type CreateOrUpdateNodeRequest struct {
	Node                 *storage.MutableCINode `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *CreateOrUpdateNodeRequest) Reset()         { *m = CreateOrUpdateNodeRequest{} }
func (m *CreateOrUpdateNodeRequest) String() string { return proto.CompactTextString(m) }
func (*CreateOrUpdateNodeRequest) ProtoMessage()    {}
func (*CreateOrUpdateNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9dd56868ed73aa3, []int{6}
}

func (m *CreateOrUpdateNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateOrUpdateNodeRequest.Unmarshal(m, b)
}
func (m *CreateOrUpdateNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateOrUpdateNodeRequest.Marshal(b, m, deterministic)
}
func (m *CreateOrUpdateNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOrUpdateNodeRequest.Merge(m, src)
}
func (m *CreateOrUpdateNodeRequest) XXX_Size() int {
	return xxx_messageInfo_CreateOrUpdateNodeRequest.Size(m)
}
func (m *CreateOrUpdateNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOrUpdateNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOrUpdateNodeRequest proto.InternalMessageInfo

func (m *CreateOrUpdateNodeRequest) GetNode() *storage.MutableCINode {
	if m != nil {
		return m.Node
	}
	return nil
}

type DeleteNodeRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteNodeRequest) Reset()         { *m = DeleteNodeRequest{} }
func (m *DeleteNodeRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteNodeRequest) ProtoMessage()    {}
func (*DeleteNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9dd56868ed73aa3, []int{7}
}

func (m *DeleteNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteNodeRequest.Unmarshal(m, b)
}
func (m *DeleteNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteNodeRequest.Marshal(b, m, deterministic)
}
func (m *DeleteNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteNodeRequest.Merge(m, src)
}
func (m *DeleteNodeRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteNodeRequest.Size(m)
}
func (m *DeleteNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteNodeRequest proto.InternalMessageInfo

func (m *DeleteNodeRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ReserveNodeRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tag                  string   `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReserveNodeRequest) Reset()         { *m = ReserveNodeRequest{} }
func (m *ReserveNodeRequest) String() string { return proto.CompactTextString(m) }
func (*ReserveNodeRequest) ProtoMessage()    {}
func (*ReserveNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9dd56868ed73aa3, []int{8}
}

func (m *ReserveNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReserveNodeRequest.Unmarshal(m, b)
}
func (m *ReserveNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReserveNodeRequest.Marshal(b, m, deterministic)
}
func (m *ReserveNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReserveNodeRequest.Merge(m, src)
}
func (m *ReserveNodeRequest) XXX_Size() int {
	return xxx_messageInfo_ReserveNodeRequest.Size(m)
}
func (m *ReserveNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReserveNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReserveNodeRequest proto.InternalMessageInfo

func (m *ReserveNodeRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ReserveNodeRequest) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

type LeaseNodeRequest struct {
	Tag                  string   `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LeaseNodeRequest) Reset()         { *m = LeaseNodeRequest{} }
func (m *LeaseNodeRequest) String() string { return proto.CompactTextString(m) }
func (*LeaseNodeRequest) ProtoMessage()    {}
func (*LeaseNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9dd56868ed73aa3, []int{9}
}

func (m *LeaseNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeaseNodeRequest.Unmarshal(m, b)
}
func (m *LeaseNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeaseNodeRequest.Marshal(b, m, deterministic)
}
func (m *LeaseNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaseNodeRequest.Merge(m, src)
}
func (m *LeaseNodeRequest) XXX_Size() int {
	return xxx_messageInfo_LeaseNodeRequest.Size(m)
}
func (m *LeaseNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaseNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LeaseNodeRequest proto.InternalMessageInfo

func (m *LeaseNodeRequest) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

type LeaseNodeResponse struct {
	Lease                *storage.NodeLease `protobuf:"bytes,1,opt,name=lease,proto3" json:"lease,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *LeaseNodeResponse) Reset()         { *m = LeaseNodeResponse{} }
func (m *LeaseNodeResponse) String() string { return proto.CompactTextString(m) }
func (*LeaseNodeResponse) ProtoMessage()    {}
func (*LeaseNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9dd56868ed73aa3, []int{10}
}

func (m *LeaseNodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeaseNodeResponse.Unmarshal(m, b)
}
func (m *LeaseNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeaseNodeResponse.Marshal(b, m, deterministic)
}
func (m *LeaseNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaseNodeResponse.Merge(m, src)
}
func (m *LeaseNodeResponse) XXX_Size() int {
	return xxx_messageInfo_LeaseNodeResponse.Size(m)
}
func (m *LeaseNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaseNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LeaseNodeResponse proto.InternalMessageInfo

func (m *LeaseNodeResponse) GetLease() *storage.NodeLease {
	if m != nil {
		return m.Lease
	}
	return nil
}

type ReleaseNodeRequest struct {
	NodeID               string   `protobuf:"bytes,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	LeaseID              string   `protobuf:"bytes,2,opt,name=leaseID,proto3" json:"leaseID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReleaseNodeRequest) Reset()         { *m = ReleaseNodeRequest{} }
func (m *ReleaseNodeRequest) String() string { return proto.CompactTextString(m) }
func (*ReleaseNodeRequest) ProtoMessage()    {}
func (*ReleaseNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9dd56868ed73aa3, []int{11}
}

func (m *ReleaseNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseNodeRequest.Unmarshal(m, b)
}
func (m *ReleaseNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseNodeRequest.Marshal(b, m, deterministic)
}
func (m *ReleaseNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseNodeRequest.Merge(m, src)
}
func (m *ReleaseNodeRequest) XXX_Size() int {
	return xxx_messageInfo_ReleaseNodeRequest.Size(m)
}
func (m *ReleaseNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseNodeRequest proto.InternalMessageInfo

func (m *ReleaseNodeRequest) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *ReleaseNodeRequest) GetLeaseID() string {
	if m != nil {
		return m.LeaseID
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateTestCaseRequest)(nil), "magma.fbinternal.testcontroller.CreateTestCaseRequest")
	proto.RegisterType((*GetTestCasesRequest)(nil), "magma.fbinternal.testcontroller.GetTestCasesRequest")
	proto.RegisterType((*GetTestCasesResponse)(nil), "magma.fbinternal.testcontroller.GetTestCasesResponse")
	proto.RegisterMapType((map[int64]*storage.TestCase)(nil), "magma.fbinternal.testcontroller.GetTestCasesResponse.TestsEntry")
	proto.RegisterType((*DeleteTestCaseRequest)(nil), "magma.fbinternal.testcontroller.DeleteTestCaseRequest")
	proto.RegisterType((*GetNodesRequest)(nil), "magma.fbinternal.testcontroller.GetNodesRequest")
	proto.RegisterType((*GetNodesResponse)(nil), "magma.fbinternal.testcontroller.GetNodesResponse")
	proto.RegisterMapType((map[string]*storage.CINode)(nil), "magma.fbinternal.testcontroller.GetNodesResponse.NodesEntry")
	proto.RegisterType((*CreateOrUpdateNodeRequest)(nil), "magma.fbinternal.testcontroller.CreateOrUpdateNodeRequest")
	proto.RegisterType((*DeleteNodeRequest)(nil), "magma.fbinternal.testcontroller.DeleteNodeRequest")
	proto.RegisterType((*ReserveNodeRequest)(nil), "magma.fbinternal.testcontroller.ReserveNodeRequest")
	proto.RegisterType((*LeaseNodeRequest)(nil), "magma.fbinternal.testcontroller.LeaseNodeRequest")
	proto.RegisterType((*LeaseNodeResponse)(nil), "magma.fbinternal.testcontroller.LeaseNodeResponse")
	proto.RegisterType((*ReleaseNodeRequest)(nil), "magma.fbinternal.testcontroller.ReleaseNodeRequest")
}

func init() {
	proto.RegisterFile("fbinternal/cloud/go/services/testcontroller/protos/testcontroller.proto", fileDescriptor_f9dd56868ed73aa3)
}

var fileDescriptor_f9dd56868ed73aa3 = []byte{
	// 717 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x96, 0xcf, 0x6f, 0xd3, 0x4a,
	0x10, 0xc7, 0x1b, 0xa7, 0xe9, 0x7b, 0x99, 0x3e, 0xe5, 0xb5, 0x0b, 0xad, 0x52, 0x0b, 0x41, 0x65,
	0x90, 0xda, 0x93, 0x4d, 0x53, 0xa8, 0xa2, 0x8a, 0x03, 0xd0, 0x96, 0x50, 0x54, 0x40, 0x72, 0x69,
	0x91, 0x90, 0x7a, 0x70, 0xe2, 0xad, 0x65, 0xc5, 0xf1, 0xba, 0xbb, 0x9b, 0x42, 0x0f, 0x5c, 0xf9,
	0xff, 0x38, 0x70, 0xe2, 0x9f, 0x41, 0xfb, 0xc3, 0x71, 0xdc, 0x58, 0xc4, 0x86, 0x93, 0xed, 0xc9,
	0xf8, 0x33, 0x33, 0xdf, 0x9d, 0xaf, 0x15, 0xe8, 0x5d, 0xf6, 0xc3, 0x98, 0x63, 0x1a, 0x7b, 0x91,
	0x33, 0x88, 0xc8, 0xd8, 0x77, 0x02, 0xe2, 0x30, 0x4c, 0xaf, 0xc3, 0x01, 0x66, 0x0e, 0xc7, 0x8c,
	0x0f, 0x48, 0xcc, 0x29, 0x89, 0x22, 0x4c, 0x9d, 0x84, 0x12, 0x4e, 0x6e, 0x47, 0x6d, 0x19, 0x45,
	0x0f, 0x46, 0x5e, 0x30, 0xf2, 0xec, 0x0c, 0x67, 0xe7, 0xd3, 0xcc, 0xfb, 0x01, 0x21, 0x41, 0x84,
	0x15, 0xa4, 0x3f, 0xbe, 0x74, 0x3e, 0x53, 0x2f, 0x49, 0x30, 0x65, 0x0a, 0x60, 0x6e, 0x10, 0x3a,
	0xe8, 0x4e, 0x6a, 0x0c, 0xc8, 0x68, 0x44, 0x62, 0xfd, 0xd3, 0x8b, 0x2a, 0x4d, 0x32, 0x4e, 0xa8,
	0x17, 0xe0, 0xf4, 0xaa, 0x10, 0x16, 0x86, 0xb5, 0x03, 0x8a, 0x3d, 0x8e, 0x3f, 0x60, 0xc6, 0x0f,
	0x3c, 0x86, 0x5d, 0x7c, 0x35, 0xc6, 0x8c, 0xa3, 0x13, 0x58, 0x14, 0x80, 0x76, 0x6d, 0xb3, 0xb6,
	0xbd, 0xdc, 0xe9, 0xda, 0x73, 0xc6, 0xb0, 0x53, 0xec, 0xdb, 0x31, 0xf7, 0xfa, 0x51, 0x86, 0x93,
	0x14, 0x6b, 0x0b, 0xee, 0xf4, 0x30, 0x4f, 0x83, 0x2c, 0x2d, 0xb2, 0x02, 0xf5, 0x64, 0xc8, 0xda,
	0xb5, 0xcd, 0xfa, 0x76, 0xdd, 0x15, 0xb7, 0xd6, 0xcf, 0x1a, 0xdc, 0xcd, 0x67, 0xb2, 0x84, 0xc4,
	0x0c, 0xa3, 0x73, 0x68, 0x08, 0x92, 0x4a, 0x5e, 0xee, 0x3c, 0x9f, 0xdb, 0x50, 0x11, 0xc5, 0x16,
	0x11, 0x76, 0x14, 0x73, 0x7a, 0xe3, 0x2a, 0x9c, 0x39, 0x04, 0xc8, 0x82, 0xa2, 0xa1, 0x21, 0xbe,
	0x91, 0x43, 0xd7, 0x5d, 0x71, 0x8b, 0x7a, 0xd0, 0xb8, 0xf6, 0xa2, 0x31, 0x6e, 0x1b, 0x52, 0x88,
	0x9d, 0xd2, 0x42, 0x4c, 0x14, 0x50, 0xef, 0xef, 0x1b, 0xdd, 0x9a, 0xb5, 0x05, 0x6b, 0x87, 0x38,
	0xc2, 0xb3, 0x6a, 0xb7, 0xc0, 0x48, 0x86, 0xba, 0xac, 0x91, 0x0c, 0xad, 0x53, 0xf8, 0xbf, 0x87,
	0xf9, 0x3b, 0xe2, 0xe7, 0xb4, 0x0a, 0x7d, 0x35, 0x7e, 0xd3, 0x15, 0xb7, 0xc8, 0x86, 0x3a, 0xf7,
	0x02, 0xdd, 0xd8, 0x3d, 0x5b, 0xed, 0x91, 0x9d, 0xee, 0x91, 0x7d, 0xca, 0x69, 0x18, 0x07, 0xe7,
	0xa2, 0xb8, 0x2b, 0x12, 0xad, 0xef, 0x35, 0x58, 0xc9, 0xa8, 0x5a, 0x57, 0x17, 0x1a, 0xb1, 0x08,
	0x68, 0x5d, 0x9f, 0x95, 0xd1, 0x35, 0x47, 0xb0, 0xe5, 0x93, 0xd6, 0x54, 0xa2, 0xcc, 0x10, 0x20,
	0x0b, 0x4e, 0x6b, 0xda, 0x54, 0x9a, 0x1e, 0xe5, 0x35, 0x75, 0x4a, 0x6b, 0x7a, 0x70, 0x2c, 0xb8,
	0xd3, 0x8a, 0x06, 0xb0, 0xa1, 0xf6, 0xf7, 0x3d, 0x3d, 0x4b, 0x7c, 0x8f, 0x63, 0x99, 0xa0, 0x25,
	0x7b, 0x03, 0x8b, 0xa2, 0x21, 0xbd, 0xc3, 0x7b, 0x55, 0x77, 0x58, 0x57, 0x93, 0x0c, 0xeb, 0x21,
	0xac, 0xaa, 0xa3, 0x9b, 0x2e, 0xd0, 0x02, 0x23, 0xf4, 0xf5, 0x64, 0x46, 0xe8, 0x5b, 0x7b, 0x80,
	0x5c, 0x2c, 0x0c, 0xf8, 0xbb, 0x2c, 0x21, 0x48, 0x7a, 0x6e, 0x4d, 0x75, 0x32, 0x8f, 0x60, 0xe5,
	0x04, 0x7b, 0x2c, 0xf7, 0x96, 0xce, 0xaa, 0x65, 0x59, 0x17, 0xb0, 0x3a, 0x95, 0xa5, 0xcf, 0xef,
	0x35, 0x34, 0x22, 0x11, 0xd4, 0x43, 0x76, 0x4a, 0x0f, 0x29, 0x28, 0x12, 0xe7, 0x2a, 0x80, 0xf5,
	0x4a, 0x34, 0x1f, 0xdd, 0x6e, 0x63, 0x1d, 0x96, 0xc4, 0xfc, 0xc7, 0x87, 0xba, 0x13, 0xfd, 0x84,
	0xda, 0xf0, 0x8f, 0xcc, 0x3d, 0x3e, 0xd4, 0x83, 0xa4, 0x8f, 0x9d, 0x1f, 0x06, 0xb4, 0xe4, 0x7e,
	0x4f, 0x6a, 0xa2, 0xaf, 0xf0, 0xdf, 0xb4, 0x1d, 0xd1, 0x93, 0x8a, 0xee, 0x95, 0xad, 0x98, 0x4f,
	0xff, 0xc8, 0xf3, 0xd6, 0x02, 0xc2, 0xb0, 0x9e, 0x5f, 0x92, 0x34, 0x09, 0xcd, 0xdf, 0x89, 0xc2,
	0xaf, 0xa3, 0xb9, 0xaa, 0xdf, 0x93, 0xdf, 0x66, 0xfb, 0x9c, 0x84, 0xbe, 0xb5, 0x80, 0x2e, 0xa0,
	0x95, 0x77, 0x77, 0x09, 0x7c, 0xe1, 0xe7, 0xa0, 0x10, 0xdf, 0xf9, 0xd6, 0x50, 0xb6, 0x12, 0x87,
	0x46, 0x28, 0xba, 0x82, 0x7f, 0x53, 0x2b, 0xa2, 0xc7, 0x15, 0x5c, 0xab, 0x2a, 0xec, 0x54, 0xf6,
	0xb9, 0xd4, 0x11, 0xcd, 0x9a, 0x0d, 0xed, 0x97, 0xd4, 0xb0, 0xc0, 0xa1, 0xc5, 0x3a, 0x9e, 0x01,
	0x64, 0x56, 0x43, 0x9d, 0x92, 0x1a, 0xce, 0xc5, 0x7e, 0x81, 0xe5, 0x29, 0x73, 0xa2, 0xdd, 0xb9,
	0xdc, 0x59, 0x2b, 0x9b, 0xf3, 0x9b, 0x99, 0x71, 0xa8, 0xb5, 0x80, 0x38, 0x34, 0x27, 0x61, 0xb4,
	0x53, 0x05, 0xf1, 0x37, 0x55, 0x3f, 0x8a, 0x79, 0x27, 0x7e, 0x2e, 0x35, 0xef, 0x6d, 0xf7, 0x17,
	0x0a, 0xf9, 0x72, 0xff, 0x53, 0x57, 0x46, 0x9d, 0xea, 0xff, 0x91, 0xfa, 0x4b, 0xf2, 0xba, 0xfb,
	0x2b, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x06, 0xf2, 0x88, 0x60, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TestControllerClient is the client API for TestController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestControllerClient interface {
	GetTestCases(ctx context.Context, in *GetTestCasesRequest, opts ...grpc.CallOption) (*GetTestCasesResponse, error)
	CreateOrUpdateTestCase(ctx context.Context, in *CreateTestCaseRequest, opts ...grpc.CallOption) (*protos.Void, error)
	DeleteTestCase(ctx context.Context, in *DeleteTestCaseRequest, opts ...grpc.CallOption) (*protos.Void, error)
}

type testControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewTestControllerClient(cc grpc.ClientConnInterface) TestControllerClient {
	return &testControllerClient{cc}
}

func (c *testControllerClient) GetTestCases(ctx context.Context, in *GetTestCasesRequest, opts ...grpc.CallOption) (*GetTestCasesResponse, error) {
	out := new(GetTestCasesResponse)
	err := c.cc.Invoke(ctx, "/magma.fbinternal.testcontroller.TestController/GetTestCases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testControllerClient) CreateOrUpdateTestCase(ctx context.Context, in *CreateTestCaseRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.fbinternal.testcontroller.TestController/CreateOrUpdateTestCase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testControllerClient) DeleteTestCase(ctx context.Context, in *DeleteTestCaseRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.fbinternal.testcontroller.TestController/DeleteTestCase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestControllerServer is the server API for TestController service.
type TestControllerServer interface {
	GetTestCases(context.Context, *GetTestCasesRequest) (*GetTestCasesResponse, error)
	CreateOrUpdateTestCase(context.Context, *CreateTestCaseRequest) (*protos.Void, error)
	DeleteTestCase(context.Context, *DeleteTestCaseRequest) (*protos.Void, error)
}

// UnimplementedTestControllerServer can be embedded to have forward compatible implementations.
type UnimplementedTestControllerServer struct {
}

func (*UnimplementedTestControllerServer) GetTestCases(ctx context.Context, req *GetTestCasesRequest) (*GetTestCasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestCases not implemented")
}
func (*UnimplementedTestControllerServer) CreateOrUpdateTestCase(ctx context.Context, req *CreateTestCaseRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateTestCase not implemented")
}
func (*UnimplementedTestControllerServer) DeleteTestCase(ctx context.Context, req *DeleteTestCaseRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTestCase not implemented")
}

func RegisterTestControllerServer(s *grpc.Server, srv TestControllerServer) {
	s.RegisterService(&_TestController_serviceDesc, srv)
}

func _TestController_GetTestCases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestCasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestControllerServer).GetTestCases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.fbinternal.testcontroller.TestController/GetTestCases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestControllerServer).GetTestCases(ctx, req.(*GetTestCasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestController_CreateOrUpdateTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestControllerServer).CreateOrUpdateTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.fbinternal.testcontroller.TestController/CreateOrUpdateTestCase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestControllerServer).CreateOrUpdateTestCase(ctx, req.(*CreateTestCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestController_DeleteTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTestCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestControllerServer).DeleteTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.fbinternal.testcontroller.TestController/DeleteTestCase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestControllerServer).DeleteTestCase(ctx, req.(*DeleteTestCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.fbinternal.testcontroller.TestController",
	HandlerType: (*TestControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTestCases",
			Handler:    _TestController_GetTestCases_Handler,
		},
		{
			MethodName: "CreateOrUpdateTestCase",
			Handler:    _TestController_CreateOrUpdateTestCase_Handler,
		},
		{
			MethodName: "DeleteTestCase",
			Handler:    _TestController_DeleteTestCase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fbinternal/cloud/go/services/testcontroller/protos/testcontroller.proto",
}

// NodeLeasorClient is the client API for NodeLeasor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeLeasorClient interface {
	GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error)
	CreateOrUpdateNode(ctx context.Context, in *CreateOrUpdateNodeRequest, opts ...grpc.CallOption) (*protos.Void, error)
	DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*protos.Void, error)
	ReserveNode(ctx context.Context, in *ReserveNodeRequest, opts ...grpc.CallOption) (*LeaseNodeResponse, error)
	LeaseNode(ctx context.Context, in *LeaseNodeRequest, opts ...grpc.CallOption) (*LeaseNodeResponse, error)
	ReleaseNode(ctx context.Context, in *ReleaseNodeRequest, opts ...grpc.CallOption) (*protos.Void, error)
}

type nodeLeasorClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeLeasorClient(cc grpc.ClientConnInterface) NodeLeasorClient {
	return &nodeLeasorClient{cc}
}

func (c *nodeLeasorClient) GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error) {
	out := new(GetNodesResponse)
	err := c.cc.Invoke(ctx, "/magma.fbinternal.testcontroller.NodeLeasor/GetNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeLeasorClient) CreateOrUpdateNode(ctx context.Context, in *CreateOrUpdateNodeRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.fbinternal.testcontroller.NodeLeasor/CreateOrUpdateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeLeasorClient) DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.fbinternal.testcontroller.NodeLeasor/DeleteNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeLeasorClient) ReserveNode(ctx context.Context, in *ReserveNodeRequest, opts ...grpc.CallOption) (*LeaseNodeResponse, error) {
	out := new(LeaseNodeResponse)
	err := c.cc.Invoke(ctx, "/magma.fbinternal.testcontroller.NodeLeasor/ReserveNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeLeasorClient) LeaseNode(ctx context.Context, in *LeaseNodeRequest, opts ...grpc.CallOption) (*LeaseNodeResponse, error) {
	out := new(LeaseNodeResponse)
	err := c.cc.Invoke(ctx, "/magma.fbinternal.testcontroller.NodeLeasor/LeaseNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeLeasorClient) ReleaseNode(ctx context.Context, in *ReleaseNodeRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.fbinternal.testcontroller.NodeLeasor/ReleaseNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeLeasorServer is the server API for NodeLeasor service.
type NodeLeasorServer interface {
	GetNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error)
	CreateOrUpdateNode(context.Context, *CreateOrUpdateNodeRequest) (*protos.Void, error)
	DeleteNode(context.Context, *DeleteNodeRequest) (*protos.Void, error)
	ReserveNode(context.Context, *ReserveNodeRequest) (*LeaseNodeResponse, error)
	LeaseNode(context.Context, *LeaseNodeRequest) (*LeaseNodeResponse, error)
	ReleaseNode(context.Context, *ReleaseNodeRequest) (*protos.Void, error)
}

// UnimplementedNodeLeasorServer can be embedded to have forward compatible implementations.
type UnimplementedNodeLeasorServer struct {
}

func (*UnimplementedNodeLeasorServer) GetNodes(ctx context.Context, req *GetNodesRequest) (*GetNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (*UnimplementedNodeLeasorServer) CreateOrUpdateNode(ctx context.Context, req *CreateOrUpdateNodeRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateNode not implemented")
}
func (*UnimplementedNodeLeasorServer) DeleteNode(ctx context.Context, req *DeleteNodeRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (*UnimplementedNodeLeasorServer) ReserveNode(ctx context.Context, req *ReserveNodeRequest) (*LeaseNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveNode not implemented")
}
func (*UnimplementedNodeLeasorServer) LeaseNode(ctx context.Context, req *LeaseNodeRequest) (*LeaseNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaseNode not implemented")
}
func (*UnimplementedNodeLeasorServer) ReleaseNode(ctx context.Context, req *ReleaseNodeRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseNode not implemented")
}

func RegisterNodeLeasorServer(s *grpc.Server, srv NodeLeasorServer) {
	s.RegisterService(&_NodeLeasor_serviceDesc, srv)
}

func _NodeLeasor_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeLeasorServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.fbinternal.testcontroller.NodeLeasor/GetNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeLeasorServer).GetNodes(ctx, req.(*GetNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeLeasor_CreateOrUpdateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeLeasorServer).CreateOrUpdateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.fbinternal.testcontroller.NodeLeasor/CreateOrUpdateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeLeasorServer).CreateOrUpdateNode(ctx, req.(*CreateOrUpdateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeLeasor_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeLeasorServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.fbinternal.testcontroller.NodeLeasor/DeleteNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeLeasorServer).DeleteNode(ctx, req.(*DeleteNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeLeasor_ReserveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeLeasorServer).ReserveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.fbinternal.testcontroller.NodeLeasor/ReserveNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeLeasorServer).ReserveNode(ctx, req.(*ReserveNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeLeasor_LeaseNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaseNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeLeasorServer).LeaseNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.fbinternal.testcontroller.NodeLeasor/LeaseNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeLeasorServer).LeaseNode(ctx, req.(*LeaseNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeLeasor_ReleaseNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeLeasorServer).ReleaseNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.fbinternal.testcontroller.NodeLeasor/ReleaseNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeLeasorServer).ReleaseNode(ctx, req.(*ReleaseNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeLeasor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.fbinternal.testcontroller.NodeLeasor",
	HandlerType: (*NodeLeasorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodes",
			Handler:    _NodeLeasor_GetNodes_Handler,
		},
		{
			MethodName: "CreateOrUpdateNode",
			Handler:    _NodeLeasor_CreateOrUpdateNode_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _NodeLeasor_DeleteNode_Handler,
		},
		{
			MethodName: "ReserveNode",
			Handler:    _NodeLeasor_ReserveNode_Handler,
		},
		{
			MethodName: "LeaseNode",
			Handler:    _NodeLeasor_LeaseNode_Handler,
		},
		{
			MethodName: "ReleaseNode",
			Handler:    _NodeLeasor_ReleaseNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fbinternal/cloud/go/services/testcontroller/protos/testcontroller.proto",
}
