// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.10.0
// source: orc8r/cloud/go/services/streamer/protos/provider.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protos "magma/orc8r/lib/go/protos"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamProviderClient is the client API for StreamProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamProviderClient interface {
	GetUpdates(ctx context.Context, in *protos.StreamRequest, opts ...grpc.CallOption) (*protos.DataUpdateBatch, error)
}

type streamProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamProviderClient(cc grpc.ClientConnInterface) StreamProviderClient {
	return &streamProviderClient{cc}
}

func (c *streamProviderClient) GetUpdates(ctx context.Context, in *protos.StreamRequest, opts ...grpc.CallOption) (*protos.DataUpdateBatch, error) {
	out := new(protos.DataUpdateBatch)
	err := c.cc.Invoke(ctx, "/magma.orc8r.streamer.StreamProvider/GetUpdates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamProviderServer is the server API for StreamProvider service.
// All implementations must embed UnimplementedStreamProviderServer
// for forward compatibility
type StreamProviderServer interface {
	GetUpdates(context.Context, *protos.StreamRequest) (*protos.DataUpdateBatch, error)
	mustEmbedUnimplementedStreamProviderServer()
}

// UnimplementedStreamProviderServer must be embedded to have forward compatible implementations.
type UnimplementedStreamProviderServer struct {
}

func (UnimplementedStreamProviderServer) GetUpdates(context.Context, *protos.StreamRequest) (*protos.DataUpdateBatch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpdates not implemented")
}
func (UnimplementedStreamProviderServer) mustEmbedUnimplementedStreamProviderServer() {}

// UnsafeStreamProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamProviderServer will
// result in compilation errors.
type UnsafeStreamProviderServer interface {
	mustEmbedUnimplementedStreamProviderServer()
}

func RegisterStreamProviderServer(s grpc.ServiceRegistrar, srv StreamProviderServer) {
	s.RegisterService(&StreamProvider_ServiceDesc, srv)
}

func _StreamProvider_GetUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.StreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamProviderServer).GetUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.streamer.StreamProvider/GetUpdates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamProviderServer).GetUpdates(ctx, req.(*protos.StreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamProvider_ServiceDesc is the grpc.ServiceDesc for StreamProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.streamer.StreamProvider",
	HandlerType: (*StreamProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUpdates",
			Handler:    _StreamProvider_GetUpdates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orc8r/cloud/go/services/streamer/protos/provider.proto",
}
