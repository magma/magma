// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protos "magma/orc8r/lib/go/protos"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DirectoryLookupClient is the client API for DirectoryLookup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DirectoryLookupClient interface {
	// HWIDsToHostname
	// GetHostnameForHWID returns the hostname mapped to by hardware ID.
	GetHostnameForHWID(ctx context.Context, in *GetHostnameForHWIDRequest, opts ...grpc.CallOption) (*GetHostnameForHWIDResponse, error)
	// MapHWIDsToHostnames maps {hwid -> hostname}.
	MapHWIDsToHostnames(ctx context.Context, in *MapHWIDToHostnameRequest, opts ...grpc.CallOption) (*protos.Void, error)
	// UnmapHWIDsToHostnames removes {hwid -> hostname} for an specific hwid.
	UnmapHWIDsToHostnames(ctx context.Context, in *UnmapHWIDToHostnameRequest, opts ...grpc.CallOption) (*protos.Void, error)
	// IDsToIMSI
	// GetIMSIForSessionID returns the IMSI mapped to by session ID.
	GetIMSIForSessionID(ctx context.Context, in *GetIMSIForSessionIDRequest, opts ...grpc.CallOption) (*GetIMSIForSessionIDResponse, error)
	// MapSessionIDsToIMSIs maps {session ID -> IMSI}.
	MapSessionIDsToIMSIs(ctx context.Context, in *MapSessionIDToIMSIRequest, opts ...grpc.CallOption) (*protos.Void, error)
	// UnmapSessionIDsToIMSIs removes {session ID -> IMSI} for an specific session ID.
	UnmapSessionIDsToIMSIs(ctx context.Context, in *UnmapSessionIDToIMSIRequest, opts ...grpc.CallOption) (*protos.Void, error)
	// CTeid
	// GetHWIDForSgwCTeid returns the HwId mapped to by sgw control plane Sgw Teid
	GetHWIDForSgwCTeid(ctx context.Context, in *GetHWIDForSgwCTeidRequest, opts ...grpc.CallOption) (*GetHWIDForSgwCTeidResponse, error)
	// MapSgwCTeidToHWID maps {teid -> HwId}.
	MapSgwCTeidToHWID(ctx context.Context, in *MapSgwCTeidToHWIDRequest, opts ...grpc.CallOption) (*protos.Void, error)
	// UnmapSgwCTeidToHWID removes {teid -> HwId} for an specific Teid.
	UnmapSgwCTeidToHWID(ctx context.Context, in *UnmapSgwCTeidToHWIDRequest, opts ...grpc.CallOption) (*protos.Void, error)
	// GetNewSgwCTeid get an available teid
	GetNewSgwCTeid(ctx context.Context, in *GetNewSgwCTeidRequest, opts ...grpc.CallOption) (*GetNewSgwCTeidResponse, error)
	// UTeid
	// GetHWIDForSgwUTeid returns the HwId mapped to by sgw control plane Sgw Teid
	GetHWIDForSgwUTeid(ctx context.Context, in *GetHWIDForSgwUTeidRequest, opts ...grpc.CallOption) (*GetHWIDForSgwUTeidResponse, error)
	// MapSgwUTeidToHWID maps {teid -> HwId}.
	MapSgwUTeidToHWID(ctx context.Context, in *MapSgwUTeidToHWIDRequest, opts ...grpc.CallOption) (*protos.Void, error)
	// UnmapSgwUTeidToHWID removes {teid -> HwId} for an specific Teid.
	UnmapSgwUTeidToHWID(ctx context.Context, in *UnmapSgwUTeidToHWIDRequest, opts ...grpc.CallOption) (*protos.Void, error)
	// GetNewSgwUTeid get an available teid
	GetNewSgwUTeid(ctx context.Context, in *GetNewSgwUTeidRequest, opts ...grpc.CallOption) (*GetNewSgwUTeidResponse, error)
}

type directoryLookupClient struct {
	cc grpc.ClientConnInterface
}

func NewDirectoryLookupClient(cc grpc.ClientConnInterface) DirectoryLookupClient {
	return &directoryLookupClient{cc}
}

func (c *directoryLookupClient) GetHostnameForHWID(ctx context.Context, in *GetHostnameForHWIDRequest, opts ...grpc.CallOption) (*GetHostnameForHWIDResponse, error) {
	out := new(GetHostnameForHWIDResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.directoryd.DirectoryLookup/GetHostnameForHWID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryLookupClient) MapHWIDsToHostnames(ctx context.Context, in *MapHWIDToHostnameRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.directoryd.DirectoryLookup/MapHWIDsToHostnames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryLookupClient) UnmapHWIDsToHostnames(ctx context.Context, in *UnmapHWIDToHostnameRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.directoryd.DirectoryLookup/UnmapHWIDsToHostnames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryLookupClient) GetIMSIForSessionID(ctx context.Context, in *GetIMSIForSessionIDRequest, opts ...grpc.CallOption) (*GetIMSIForSessionIDResponse, error) {
	out := new(GetIMSIForSessionIDResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.directoryd.DirectoryLookup/GetIMSIForSessionID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryLookupClient) MapSessionIDsToIMSIs(ctx context.Context, in *MapSessionIDToIMSIRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.directoryd.DirectoryLookup/MapSessionIDsToIMSIs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryLookupClient) UnmapSessionIDsToIMSIs(ctx context.Context, in *UnmapSessionIDToIMSIRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.directoryd.DirectoryLookup/UnmapSessionIDsToIMSIs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryLookupClient) GetHWIDForSgwCTeid(ctx context.Context, in *GetHWIDForSgwCTeidRequest, opts ...grpc.CallOption) (*GetHWIDForSgwCTeidResponse, error) {
	out := new(GetHWIDForSgwCTeidResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.directoryd.DirectoryLookup/GetHWIDForSgwCTeid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryLookupClient) MapSgwCTeidToHWID(ctx context.Context, in *MapSgwCTeidToHWIDRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.directoryd.DirectoryLookup/MapSgwCTeidToHWID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryLookupClient) UnmapSgwCTeidToHWID(ctx context.Context, in *UnmapSgwCTeidToHWIDRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.directoryd.DirectoryLookup/UnmapSgwCTeidToHWID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryLookupClient) GetNewSgwCTeid(ctx context.Context, in *GetNewSgwCTeidRequest, opts ...grpc.CallOption) (*GetNewSgwCTeidResponse, error) {
	out := new(GetNewSgwCTeidResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.directoryd.DirectoryLookup/GetNewSgwCTeid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryLookupClient) GetHWIDForSgwUTeid(ctx context.Context, in *GetHWIDForSgwUTeidRequest, opts ...grpc.CallOption) (*GetHWIDForSgwUTeidResponse, error) {
	out := new(GetHWIDForSgwUTeidResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.directoryd.DirectoryLookup/GetHWIDForSgwUTeid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryLookupClient) MapSgwUTeidToHWID(ctx context.Context, in *MapSgwUTeidToHWIDRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.directoryd.DirectoryLookup/MapSgwUTeidToHWID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryLookupClient) UnmapSgwUTeidToHWID(ctx context.Context, in *UnmapSgwUTeidToHWIDRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.directoryd.DirectoryLookup/UnmapSgwUTeidToHWID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryLookupClient) GetNewSgwUTeid(ctx context.Context, in *GetNewSgwUTeidRequest, opts ...grpc.CallOption) (*GetNewSgwUTeidResponse, error) {
	out := new(GetNewSgwUTeidResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.directoryd.DirectoryLookup/GetNewSgwUTeid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirectoryLookupServer is the server API for DirectoryLookup service.
// All implementations should embed UnimplementedDirectoryLookupServer
// for forward compatibility
type DirectoryLookupServer interface {
	// HWIDsToHostname
	// GetHostnameForHWID returns the hostname mapped to by hardware ID.
	GetHostnameForHWID(context.Context, *GetHostnameForHWIDRequest) (*GetHostnameForHWIDResponse, error)
	// MapHWIDsToHostnames maps {hwid -> hostname}.
	MapHWIDsToHostnames(context.Context, *MapHWIDToHostnameRequest) (*protos.Void, error)
	// UnmapHWIDsToHostnames removes {hwid -> hostname} for an specific hwid.
	UnmapHWIDsToHostnames(context.Context, *UnmapHWIDToHostnameRequest) (*protos.Void, error)
	// IDsToIMSI
	// GetIMSIForSessionID returns the IMSI mapped to by session ID.
	GetIMSIForSessionID(context.Context, *GetIMSIForSessionIDRequest) (*GetIMSIForSessionIDResponse, error)
	// MapSessionIDsToIMSIs maps {session ID -> IMSI}.
	MapSessionIDsToIMSIs(context.Context, *MapSessionIDToIMSIRequest) (*protos.Void, error)
	// UnmapSessionIDsToIMSIs removes {session ID -> IMSI} for an specific session ID.
	UnmapSessionIDsToIMSIs(context.Context, *UnmapSessionIDToIMSIRequest) (*protos.Void, error)
	// CTeid
	// GetHWIDForSgwCTeid returns the HwId mapped to by sgw control plane Sgw Teid
	GetHWIDForSgwCTeid(context.Context, *GetHWIDForSgwCTeidRequest) (*GetHWIDForSgwCTeidResponse, error)
	// MapSgwCTeidToHWID maps {teid -> HwId}.
	MapSgwCTeidToHWID(context.Context, *MapSgwCTeidToHWIDRequest) (*protos.Void, error)
	// UnmapSgwCTeidToHWID removes {teid -> HwId} for an specific Teid.
	UnmapSgwCTeidToHWID(context.Context, *UnmapSgwCTeidToHWIDRequest) (*protos.Void, error)
	// GetNewSgwCTeid get an available teid
	GetNewSgwCTeid(context.Context, *GetNewSgwCTeidRequest) (*GetNewSgwCTeidResponse, error)
	// UTeid
	// GetHWIDForSgwUTeid returns the HwId mapped to by sgw control plane Sgw Teid
	GetHWIDForSgwUTeid(context.Context, *GetHWIDForSgwUTeidRequest) (*GetHWIDForSgwUTeidResponse, error)
	// MapSgwUTeidToHWID maps {teid -> HwId}.
	MapSgwUTeidToHWID(context.Context, *MapSgwUTeidToHWIDRequest) (*protos.Void, error)
	// UnmapSgwUTeidToHWID removes {teid -> HwId} for an specific Teid.
	UnmapSgwUTeidToHWID(context.Context, *UnmapSgwUTeidToHWIDRequest) (*protos.Void, error)
	// GetNewSgwUTeid get an available teid
	GetNewSgwUTeid(context.Context, *GetNewSgwUTeidRequest) (*GetNewSgwUTeidResponse, error)
}

// UnimplementedDirectoryLookupServer should be embedded to have forward compatible implementations.
type UnimplementedDirectoryLookupServer struct {
}

func (UnimplementedDirectoryLookupServer) GetHostnameForHWID(context.Context, *GetHostnameForHWIDRequest) (*GetHostnameForHWIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostnameForHWID not implemented")
}
func (UnimplementedDirectoryLookupServer) MapHWIDsToHostnames(context.Context, *MapHWIDToHostnameRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapHWIDsToHostnames not implemented")
}
func (UnimplementedDirectoryLookupServer) UnmapHWIDsToHostnames(context.Context, *UnmapHWIDToHostnameRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnmapHWIDsToHostnames not implemented")
}
func (UnimplementedDirectoryLookupServer) GetIMSIForSessionID(context.Context, *GetIMSIForSessionIDRequest) (*GetIMSIForSessionIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIMSIForSessionID not implemented")
}
func (UnimplementedDirectoryLookupServer) MapSessionIDsToIMSIs(context.Context, *MapSessionIDToIMSIRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapSessionIDsToIMSIs not implemented")
}
func (UnimplementedDirectoryLookupServer) UnmapSessionIDsToIMSIs(context.Context, *UnmapSessionIDToIMSIRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnmapSessionIDsToIMSIs not implemented")
}
func (UnimplementedDirectoryLookupServer) GetHWIDForSgwCTeid(context.Context, *GetHWIDForSgwCTeidRequest) (*GetHWIDForSgwCTeidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHWIDForSgwCTeid not implemented")
}
func (UnimplementedDirectoryLookupServer) MapSgwCTeidToHWID(context.Context, *MapSgwCTeidToHWIDRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapSgwCTeidToHWID not implemented")
}
func (UnimplementedDirectoryLookupServer) UnmapSgwCTeidToHWID(context.Context, *UnmapSgwCTeidToHWIDRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnmapSgwCTeidToHWID not implemented")
}
func (UnimplementedDirectoryLookupServer) GetNewSgwCTeid(context.Context, *GetNewSgwCTeidRequest) (*GetNewSgwCTeidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewSgwCTeid not implemented")
}
func (UnimplementedDirectoryLookupServer) GetHWIDForSgwUTeid(context.Context, *GetHWIDForSgwUTeidRequest) (*GetHWIDForSgwUTeidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHWIDForSgwUTeid not implemented")
}
func (UnimplementedDirectoryLookupServer) MapSgwUTeidToHWID(context.Context, *MapSgwUTeidToHWIDRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapSgwUTeidToHWID not implemented")
}
func (UnimplementedDirectoryLookupServer) UnmapSgwUTeidToHWID(context.Context, *UnmapSgwUTeidToHWIDRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnmapSgwUTeidToHWID not implemented")
}
func (UnimplementedDirectoryLookupServer) GetNewSgwUTeid(context.Context, *GetNewSgwUTeidRequest) (*GetNewSgwUTeidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewSgwUTeid not implemented")
}

// UnsafeDirectoryLookupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DirectoryLookupServer will
// result in compilation errors.
type UnsafeDirectoryLookupServer interface {
	mustEmbedUnimplementedDirectoryLookupServer()
}

func RegisterDirectoryLookupServer(s grpc.ServiceRegistrar, srv DirectoryLookupServer) {
	s.RegisterService(&DirectoryLookup_ServiceDesc, srv)
}

func _DirectoryLookup_GetHostnameForHWID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostnameForHWIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryLookupServer).GetHostnameForHWID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.directoryd.DirectoryLookup/GetHostnameForHWID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryLookupServer).GetHostnameForHWID(ctx, req.(*GetHostnameForHWIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryLookup_MapHWIDsToHostnames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapHWIDToHostnameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryLookupServer).MapHWIDsToHostnames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.directoryd.DirectoryLookup/MapHWIDsToHostnames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryLookupServer).MapHWIDsToHostnames(ctx, req.(*MapHWIDToHostnameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryLookup_UnmapHWIDsToHostnames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnmapHWIDToHostnameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryLookupServer).UnmapHWIDsToHostnames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.directoryd.DirectoryLookup/UnmapHWIDsToHostnames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryLookupServer).UnmapHWIDsToHostnames(ctx, req.(*UnmapHWIDToHostnameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryLookup_GetIMSIForSessionID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIMSIForSessionIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryLookupServer).GetIMSIForSessionID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.directoryd.DirectoryLookup/GetIMSIForSessionID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryLookupServer).GetIMSIForSessionID(ctx, req.(*GetIMSIForSessionIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryLookup_MapSessionIDsToIMSIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapSessionIDToIMSIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryLookupServer).MapSessionIDsToIMSIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.directoryd.DirectoryLookup/MapSessionIDsToIMSIs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryLookupServer).MapSessionIDsToIMSIs(ctx, req.(*MapSessionIDToIMSIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryLookup_UnmapSessionIDsToIMSIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnmapSessionIDToIMSIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryLookupServer).UnmapSessionIDsToIMSIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.directoryd.DirectoryLookup/UnmapSessionIDsToIMSIs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryLookupServer).UnmapSessionIDsToIMSIs(ctx, req.(*UnmapSessionIDToIMSIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryLookup_GetHWIDForSgwCTeid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHWIDForSgwCTeidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryLookupServer).GetHWIDForSgwCTeid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.directoryd.DirectoryLookup/GetHWIDForSgwCTeid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryLookupServer).GetHWIDForSgwCTeid(ctx, req.(*GetHWIDForSgwCTeidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryLookup_MapSgwCTeidToHWID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapSgwCTeidToHWIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryLookupServer).MapSgwCTeidToHWID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.directoryd.DirectoryLookup/MapSgwCTeidToHWID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryLookupServer).MapSgwCTeidToHWID(ctx, req.(*MapSgwCTeidToHWIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryLookup_UnmapSgwCTeidToHWID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnmapSgwCTeidToHWIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryLookupServer).UnmapSgwCTeidToHWID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.directoryd.DirectoryLookup/UnmapSgwCTeidToHWID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryLookupServer).UnmapSgwCTeidToHWID(ctx, req.(*UnmapSgwCTeidToHWIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryLookup_GetNewSgwCTeid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewSgwCTeidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryLookupServer).GetNewSgwCTeid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.directoryd.DirectoryLookup/GetNewSgwCTeid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryLookupServer).GetNewSgwCTeid(ctx, req.(*GetNewSgwCTeidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryLookup_GetHWIDForSgwUTeid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHWIDForSgwUTeidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryLookupServer).GetHWIDForSgwUTeid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.directoryd.DirectoryLookup/GetHWIDForSgwUTeid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryLookupServer).GetHWIDForSgwUTeid(ctx, req.(*GetHWIDForSgwUTeidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryLookup_MapSgwUTeidToHWID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapSgwUTeidToHWIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryLookupServer).MapSgwUTeidToHWID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.directoryd.DirectoryLookup/MapSgwUTeidToHWID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryLookupServer).MapSgwUTeidToHWID(ctx, req.(*MapSgwUTeidToHWIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryLookup_UnmapSgwUTeidToHWID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnmapSgwUTeidToHWIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryLookupServer).UnmapSgwUTeidToHWID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.directoryd.DirectoryLookup/UnmapSgwUTeidToHWID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryLookupServer).UnmapSgwUTeidToHWID(ctx, req.(*UnmapSgwUTeidToHWIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryLookup_GetNewSgwUTeid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewSgwUTeidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryLookupServer).GetNewSgwUTeid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.directoryd.DirectoryLookup/GetNewSgwUTeid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryLookupServer).GetNewSgwUTeid(ctx, req.(*GetNewSgwUTeidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DirectoryLookup_ServiceDesc is the grpc.ServiceDesc for DirectoryLookup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DirectoryLookup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.directoryd.DirectoryLookup",
	HandlerType: (*DirectoryLookupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHostnameForHWID",
			Handler:    _DirectoryLookup_GetHostnameForHWID_Handler,
		},
		{
			MethodName: "MapHWIDsToHostnames",
			Handler:    _DirectoryLookup_MapHWIDsToHostnames_Handler,
		},
		{
			MethodName: "UnmapHWIDsToHostnames",
			Handler:    _DirectoryLookup_UnmapHWIDsToHostnames_Handler,
		},
		{
			MethodName: "GetIMSIForSessionID",
			Handler:    _DirectoryLookup_GetIMSIForSessionID_Handler,
		},
		{
			MethodName: "MapSessionIDsToIMSIs",
			Handler:    _DirectoryLookup_MapSessionIDsToIMSIs_Handler,
		},
		{
			MethodName: "UnmapSessionIDsToIMSIs",
			Handler:    _DirectoryLookup_UnmapSessionIDsToIMSIs_Handler,
		},
		{
			MethodName: "GetHWIDForSgwCTeid",
			Handler:    _DirectoryLookup_GetHWIDForSgwCTeid_Handler,
		},
		{
			MethodName: "MapSgwCTeidToHWID",
			Handler:    _DirectoryLookup_MapSgwCTeidToHWID_Handler,
		},
		{
			MethodName: "UnmapSgwCTeidToHWID",
			Handler:    _DirectoryLookup_UnmapSgwCTeidToHWID_Handler,
		},
		{
			MethodName: "GetNewSgwCTeid",
			Handler:    _DirectoryLookup_GetNewSgwCTeid_Handler,
		},
		{
			MethodName: "GetHWIDForSgwUTeid",
			Handler:    _DirectoryLookup_GetHWIDForSgwUTeid_Handler,
		},
		{
			MethodName: "MapSgwUTeidToHWID",
			Handler:    _DirectoryLookup_MapSgwUTeidToHWID_Handler,
		},
		{
			MethodName: "UnmapSgwUTeidToHWID",
			Handler:    _DirectoryLookup_UnmapSgwUTeidToHWID_Handler,
		},
		{
			MethodName: "GetNewSgwUTeid",
			Handler:    _DirectoryLookup_GetNewSgwUTeid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orc8r/cloud/go/services/directoryd/protos/directoryd.proto",
}
