// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PingResult ping result
//
// swagger:model ping_result
type PingResult struct {

	// avg response ms
	// Example: 35.69900131225586
	AvgResponseMs float32 `json:"avg_response_ms,omitempty"`

	// error
	// Example: error
	Error string `json:"error,omitempty"`

	// host or ip
	// Example: example.com
	// Required: true
	// Min Length: 1
	HostOrIP *string `json:"host_or_ip"`

	// num packets
	// Example: 4
	// Required: true
	NumPackets *int32 `json:"num_packets"`

	// packets received
	// Example: 4
	PacketsReceived int32 `json:"packets_received,omitempty"`

	// packets transmitted
	// Example: 4
	PacketsTransmitted int32 `json:"packets_transmitted,omitempty"`
}

// Validate validates this ping result
func (m *PingResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHostOrIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumPackets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PingResult) validateHostOrIP(formats strfmt.Registry) error {

	if err := validate.Required("host_or_ip", "body", m.HostOrIP); err != nil {
		return err
	}

	if err := validate.MinLength("host_or_ip", "body", *m.HostOrIP, 1); err != nil {
		return err
	}

	return nil
}

func (m *PingResult) validateNumPackets(formats strfmt.Registry) error {

	if err := validate.Required("num_packets", "body", m.NumPackets); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this ping result based on context it is used
func (m *PingResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PingResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PingResult) UnmarshalBinary(b []byte) error {
	var res PingResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
