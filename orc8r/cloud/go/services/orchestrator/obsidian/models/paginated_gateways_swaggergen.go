// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaginatedGateways Page of gateways
//
// swagger:model paginated_gateways
type PaginatedGateways struct {

	// gateways
	// Required: true
	Gateways map[string]*MagmadGateway `json:"gateways"`

	// page token
	// Required: true
	PageToken *PageToken `json:"page_token"`

	// Estimated total number of gateways
	// Example: 10
	// Required: true
	TotalCount int64 `json:"total_count"`
}

// Validate validates this paginated gateways
func (m *PaginatedGateways) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGateways(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePageToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaginatedGateways) validateGateways(formats strfmt.Registry) error {

	if err := validate.Required("gateways", "body", m.Gateways); err != nil {
		return err
	}

	for k := range m.Gateways {

		if err := validate.Required("gateways"+"."+k, "body", m.Gateways[k]); err != nil {
			return err
		}
		if val, ok := m.Gateways[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("gateways" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("gateways" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *PaginatedGateways) validatePageToken(formats strfmt.Registry) error {

	if err := validate.Required("page_token", "body", m.PageToken); err != nil {
		return err
	}

	if err := validate.Required("page_token", "body", m.PageToken); err != nil {
		return err
	}

	if m.PageToken != nil {
		if err := m.PageToken.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("page_token")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("page_token")
			}
			return err
		}
	}

	return nil
}

func (m *PaginatedGateways) validateTotalCount(formats strfmt.Registry) error {

	if err := validate.Required("total_count", "body", int64(m.TotalCount)); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this paginated gateways based on the context it is used
func (m *PaginatedGateways) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGateways(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePageToken(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaginatedGateways) contextValidateGateways(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.Required("gateways", "body", m.Gateways); err != nil {
		return err
	}

	for k := range m.Gateways {

		if val, ok := m.Gateways[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *PaginatedGateways) contextValidatePageToken(ctx context.Context, formats strfmt.Registry) error {

	if m.PageToken != nil {
		if err := m.PageToken.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("page_token")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("page_token")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaginatedGateways) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaginatedGateways) UnmarshalBinary(b []byte) error {
	var res PaginatedGateways
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
