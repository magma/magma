//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.10.0
// source: orc8r/cloud/go/services/state/protos/indexer.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	protos "magma/orc8r/lib/go/protos"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// states to reindex
	States []*protos.State `protobuf:"bytes,1,rep,name=states,proto3" json:"states,omitempty"`
	// network_id of the states
	NetworkId string `protobuf:"bytes,2,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
}

func (x *IndexRequest) Reset() {
	*x = IndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_cloud_go_services_state_protos_indexer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexRequest) ProtoMessage() {}

func (x *IndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_cloud_go_services_state_protos_indexer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexRequest.ProtoReflect.Descriptor instead.
func (*IndexRequest) Descriptor() ([]byte, []int) {
	return file_orc8r_cloud_go_services_state_protos_indexer_proto_rawDescGZIP(), []int{0}
}

func (x *IndexRequest) GetStates() []*protos.State {
	if x != nil {
		return x.States
	}
	return nil
}

func (x *IndexRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

type IndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// state_errors are errors experienced trying to index specific pieces of state.
	StateErrors []*protos.IDAndError `protobuf:"bytes,1,rep,name=state_errors,json=stateErrors,proto3" json:"state_errors,omitempty"`
}

func (x *IndexResponse) Reset() {
	*x = IndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_cloud_go_services_state_protos_indexer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexResponse) ProtoMessage() {}

func (x *IndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_cloud_go_services_state_protos_indexer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexResponse.ProtoReflect.Descriptor instead.
func (*IndexResponse) Descriptor() ([]byte, []int) {
	return file_orc8r_cloud_go_services_state_protos_indexer_proto_rawDescGZIP(), []int{1}
}

func (x *IndexResponse) GetStateErrors() []*protos.IDAndError {
	if x != nil {
		return x.StateErrors
	}
	return nil
}

type DeIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// states to reindex
	States []*protos.State `protobuf:"bytes,1,rep,name=states,proto3" json:"states,omitempty"`
	// network_id of the states
	NetworkId string `protobuf:"bytes,2,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
}

func (x *DeIndexRequest) Reset() {
	*x = DeIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_cloud_go_services_state_protos_indexer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeIndexRequest) ProtoMessage() {}

func (x *DeIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_cloud_go_services_state_protos_indexer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeIndexRequest.ProtoReflect.Descriptor instead.
func (*DeIndexRequest) Descriptor() ([]byte, []int) {
	return file_orc8r_cloud_go_services_state_protos_indexer_proto_rawDescGZIP(), []int{2}
}

func (x *DeIndexRequest) GetStates() []*protos.State {
	if x != nil {
		return x.States
	}
	return nil
}

func (x *DeIndexRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

type DeIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// state_errors are errors experienced trying to deindex specific pieces of state.
	StateErrors []*protos.IDAndError `protobuf:"bytes,1,rep,name=state_errors,json=stateErrors,proto3" json:"state_errors,omitempty"`
}

func (x *DeIndexResponse) Reset() {
	*x = DeIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_cloud_go_services_state_protos_indexer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeIndexResponse) ProtoMessage() {}

func (x *DeIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_cloud_go_services_state_protos_indexer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeIndexResponse.ProtoReflect.Descriptor instead.
func (*DeIndexResponse) Descriptor() ([]byte, []int) {
	return file_orc8r_cloud_go_services_state_protos_indexer_proto_rawDescGZIP(), []int{3}
}

func (x *DeIndexResponse) GetStateErrors() []*protos.IDAndError {
	if x != nil {
		return x.StateErrors
	}
	return nil
}

type PrepareReindexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// indexer_id being reindexed
	IndexerId string `protobuf:"bytes,1,opt,name=indexer_id,json=indexerId,proto3" json:"indexer_id,omitempty"`
	// from_version is the indexer's current (actual) version
	FromVersion uint32 `protobuf:"varint,2,opt,name=from_version,json=fromVersion,proto3" json:"from_version,omitempty"`
	// to_version is the indexer's future (desired) version
	ToVersion uint32 `protobuf:"varint,3,opt,name=to_version,json=toVersion,proto3" json:"to_version,omitempty"`
	// is_first is true iff this is the first time this indexer is being reindexed
	IsFirst bool `protobuf:"varint,4,opt,name=is_first,json=isFirst,proto3" json:"is_first,omitempty"`
}

func (x *PrepareReindexRequest) Reset() {
	*x = PrepareReindexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_cloud_go_services_state_protos_indexer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareReindexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareReindexRequest) ProtoMessage() {}

func (x *PrepareReindexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_cloud_go_services_state_protos_indexer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareReindexRequest.ProtoReflect.Descriptor instead.
func (*PrepareReindexRequest) Descriptor() ([]byte, []int) {
	return file_orc8r_cloud_go_services_state_protos_indexer_proto_rawDescGZIP(), []int{4}
}

func (x *PrepareReindexRequest) GetIndexerId() string {
	if x != nil {
		return x.IndexerId
	}
	return ""
}

func (x *PrepareReindexRequest) GetFromVersion() uint32 {
	if x != nil {
		return x.FromVersion
	}
	return 0
}

func (x *PrepareReindexRequest) GetToVersion() uint32 {
	if x != nil {
		return x.ToVersion
	}
	return 0
}

func (x *PrepareReindexRequest) GetIsFirst() bool {
	if x != nil {
		return x.IsFirst
	}
	return false
}

type PrepareReindexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PrepareReindexResponse) Reset() {
	*x = PrepareReindexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_cloud_go_services_state_protos_indexer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareReindexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareReindexResponse) ProtoMessage() {}

func (x *PrepareReindexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_cloud_go_services_state_protos_indexer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareReindexResponse.ProtoReflect.Descriptor instead.
func (*PrepareReindexResponse) Descriptor() ([]byte, []int) {
	return file_orc8r_cloud_go_services_state_protos_indexer_proto_rawDescGZIP(), []int{5}
}

type CompleteReindexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// indexer_id being reindexed
	IndexerId string `protobuf:"bytes,1,opt,name=indexer_id,json=indexerId,proto3" json:"indexer_id,omitempty"`
	// from_version is the indexer's current (actual) version
	FromVersion uint32 `protobuf:"varint,2,opt,name=from_version,json=fromVersion,proto3" json:"from_version,omitempty"`
	// to_version is the indexer's future (desired) version
	ToVersion uint32 `protobuf:"varint,3,opt,name=to_version,json=toVersion,proto3" json:"to_version,omitempty"`
}

func (x *CompleteReindexRequest) Reset() {
	*x = CompleteReindexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_cloud_go_services_state_protos_indexer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteReindexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteReindexRequest) ProtoMessage() {}

func (x *CompleteReindexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_cloud_go_services_state_protos_indexer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteReindexRequest.ProtoReflect.Descriptor instead.
func (*CompleteReindexRequest) Descriptor() ([]byte, []int) {
	return file_orc8r_cloud_go_services_state_protos_indexer_proto_rawDescGZIP(), []int{6}
}

func (x *CompleteReindexRequest) GetIndexerId() string {
	if x != nil {
		return x.IndexerId
	}
	return ""
}

func (x *CompleteReindexRequest) GetFromVersion() uint32 {
	if x != nil {
		return x.FromVersion
	}
	return 0
}

func (x *CompleteReindexRequest) GetToVersion() uint32 {
	if x != nil {
		return x.ToVersion
	}
	return 0
}

type CompleteReindexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CompleteReindexResponse) Reset() {
	*x = CompleteReindexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_cloud_go_services_state_protos_indexer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteReindexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteReindexResponse) ProtoMessage() {}

func (x *CompleteReindexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_cloud_go_services_state_protos_indexer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteReindexResponse.ProtoReflect.Descriptor instead.
func (*CompleteReindexResponse) Descriptor() ([]byte, []int) {
	return file_orc8r_cloud_go_services_state_protos_indexer_proto_rawDescGZIP(), []int{7}
}

var File_orc8r_cloud_go_services_state_protos_indexer_proto protoreflect.FileDescriptor

var file_orc8r_cloud_go_services_state_protos_indexer_proto_rawDesc = []byte{
	0x0a, 0x32, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38,
	0x72, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x1d, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x33, 0x30, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x59, 0x0a, 0x0c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x0d, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0c,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72,
	0x2e, 0x49, 0x44, 0x41, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x5b, 0x0a, 0x0e, 0x44, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x0f, 0x44, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x49, 0x44, 0x41,
	0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x52, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x79, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x19, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x80, 0x03, 0x0a, 0x07, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x07, 0x44, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x21, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63,
	0x38, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x52, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6a, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x29, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63,
	0x38, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2c, 0x5a,
	0x2a, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_orc8r_cloud_go_services_state_protos_indexer_proto_rawDescOnce sync.Once
	file_orc8r_cloud_go_services_state_protos_indexer_proto_rawDescData = file_orc8r_cloud_go_services_state_protos_indexer_proto_rawDesc
)

func file_orc8r_cloud_go_services_state_protos_indexer_proto_rawDescGZIP() []byte {
	file_orc8r_cloud_go_services_state_protos_indexer_proto_rawDescOnce.Do(func() {
		file_orc8r_cloud_go_services_state_protos_indexer_proto_rawDescData = protoimpl.X.CompressGZIP(file_orc8r_cloud_go_services_state_protos_indexer_proto_rawDescData)
	})
	return file_orc8r_cloud_go_services_state_protos_indexer_proto_rawDescData
}

var file_orc8r_cloud_go_services_state_protos_indexer_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_orc8r_cloud_go_services_state_protos_indexer_proto_goTypes = []interface{}{
	(*IndexRequest)(nil),            // 0: magma.orc8r.state.IndexRequest
	(*IndexResponse)(nil),           // 1: magma.orc8r.state.IndexResponse
	(*DeIndexRequest)(nil),          // 2: magma.orc8r.state.DeIndexRequest
	(*DeIndexResponse)(nil),         // 3: magma.orc8r.state.DeIndexResponse
	(*PrepareReindexRequest)(nil),   // 4: magma.orc8r.state.PrepareReindexRequest
	(*PrepareReindexResponse)(nil),  // 5: magma.orc8r.state.PrepareReindexResponse
	(*CompleteReindexRequest)(nil),  // 6: magma.orc8r.state.CompleteReindexRequest
	(*CompleteReindexResponse)(nil), // 7: magma.orc8r.state.CompleteReindexResponse
	(*protos.State)(nil),            // 8: magma.orc8r.State
	(*protos.IDAndError)(nil),       // 9: magma.orc8r.IDAndError
}
var file_orc8r_cloud_go_services_state_protos_indexer_proto_depIdxs = []int32{
	8, // 0: magma.orc8r.state.IndexRequest.states:type_name -> magma.orc8r.State
	9, // 1: magma.orc8r.state.IndexResponse.state_errors:type_name -> magma.orc8r.IDAndError
	8, // 2: magma.orc8r.state.DeIndexRequest.states:type_name -> magma.orc8r.State
	9, // 3: magma.orc8r.state.DeIndexResponse.state_errors:type_name -> magma.orc8r.IDAndError
	0, // 4: magma.orc8r.state.Indexer.Index:input_type -> magma.orc8r.state.IndexRequest
	2, // 5: magma.orc8r.state.Indexer.DeIndex:input_type -> magma.orc8r.state.DeIndexRequest
	4, // 6: magma.orc8r.state.Indexer.PrepareReindex:input_type -> magma.orc8r.state.PrepareReindexRequest
	6, // 7: magma.orc8r.state.Indexer.CompleteReindex:input_type -> magma.orc8r.state.CompleteReindexRequest
	1, // 8: magma.orc8r.state.Indexer.Index:output_type -> magma.orc8r.state.IndexResponse
	3, // 9: magma.orc8r.state.Indexer.DeIndex:output_type -> magma.orc8r.state.DeIndexResponse
	5, // 10: magma.orc8r.state.Indexer.PrepareReindex:output_type -> magma.orc8r.state.PrepareReindexResponse
	7, // 11: magma.orc8r.state.Indexer.CompleteReindex:output_type -> magma.orc8r.state.CompleteReindexResponse
	8, // [8:12] is the sub-list for method output_type
	4, // [4:8] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_orc8r_cloud_go_services_state_protos_indexer_proto_init() }
func file_orc8r_cloud_go_services_state_protos_indexer_proto_init() {
	if File_orc8r_cloud_go_services_state_protos_indexer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_orc8r_cloud_go_services_state_protos_indexer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_cloud_go_services_state_protos_indexer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_cloud_go_services_state_protos_indexer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_cloud_go_services_state_protos_indexer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_cloud_go_services_state_protos_indexer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareReindexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_cloud_go_services_state_protos_indexer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareReindexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_cloud_go_services_state_protos_indexer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteReindexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_cloud_go_services_state_protos_indexer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteReindexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_orc8r_cloud_go_services_state_protos_indexer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_orc8r_cloud_go_services_state_protos_indexer_proto_goTypes,
		DependencyIndexes: file_orc8r_cloud_go_services_state_protos_indexer_proto_depIdxs,
		MessageInfos:      file_orc8r_cloud_go_services_state_protos_indexer_proto_msgTypes,
	}.Build()
	File_orc8r_cloud_go_services_state_protos_indexer_proto = out.File
	file_orc8r_cloud_go_services_state_protos_indexer_proto_rawDesc = nil
	file_orc8r_cloud_go_services_state_protos_indexer_proto_goTypes = nil
	file_orc8r_cloud_go_services_state_protos_indexer_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IndexerClient is the client API for Indexer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IndexerClient interface {
	// Index a set of states by forwarding to locally-registered indexers.
	Index(ctx context.Context, in *IndexRequest, opts ...grpc.CallOption) (*IndexResponse, error)
	// DeIndex removes a set of states by forwarding to locally-registered indexers.
	DeIndex(ctx context.Context, in *DeIndexRequest, opts ...grpc.CallOption) (*DeIndexResponse, error)
	// PrepareReindex of a particular indexer.
	PrepareReindex(ctx context.Context, in *PrepareReindexRequest, opts ...grpc.CallOption) (*PrepareReindexResponse, error)
	// CompleteReindex of a particular indexer.
	CompleteReindex(ctx context.Context, in *CompleteReindexRequest, opts ...grpc.CallOption) (*CompleteReindexResponse, error)
}

type indexerClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexerClient(cc grpc.ClientConnInterface) IndexerClient {
	return &indexerClient{cc}
}

func (c *indexerClient) Index(ctx context.Context, in *IndexRequest, opts ...grpc.CallOption) (*IndexResponse, error) {
	out := new(IndexResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.state.Indexer/Index", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) DeIndex(ctx context.Context, in *DeIndexRequest, opts ...grpc.CallOption) (*DeIndexResponse, error) {
	out := new(DeIndexResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.state.Indexer/DeIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) PrepareReindex(ctx context.Context, in *PrepareReindexRequest, opts ...grpc.CallOption) (*PrepareReindexResponse, error) {
	out := new(PrepareReindexResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.state.Indexer/PrepareReindex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) CompleteReindex(ctx context.Context, in *CompleteReindexRequest, opts ...grpc.CallOption) (*CompleteReindexResponse, error) {
	out := new(CompleteReindexResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.state.Indexer/CompleteReindex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndexerServer is the server API for Indexer service.
type IndexerServer interface {
	// Index a set of states by forwarding to locally-registered indexers.
	Index(context.Context, *IndexRequest) (*IndexResponse, error)
	// DeIndex removes a set of states by forwarding to locally-registered indexers.
	DeIndex(context.Context, *DeIndexRequest) (*DeIndexResponse, error)
	// PrepareReindex of a particular indexer.
	PrepareReindex(context.Context, *PrepareReindexRequest) (*PrepareReindexResponse, error)
	// CompleteReindex of a particular indexer.
	CompleteReindex(context.Context, *CompleteReindexRequest) (*CompleteReindexResponse, error)
}

// UnimplementedIndexerServer can be embedded to have forward compatible implementations.
type UnimplementedIndexerServer struct {
}

func (*UnimplementedIndexerServer) Index(context.Context, *IndexRequest) (*IndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Index not implemented")
}
func (*UnimplementedIndexerServer) DeIndex(context.Context, *DeIndexRequest) (*DeIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeIndex not implemented")
}
func (*UnimplementedIndexerServer) PrepareReindex(context.Context, *PrepareReindexRequest) (*PrepareReindexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareReindex not implemented")
}
func (*UnimplementedIndexerServer) CompleteReindex(context.Context, *CompleteReindexRequest) (*CompleteReindexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteReindex not implemented")
}

func RegisterIndexerServer(s *grpc.Server, srv IndexerServer) {
	s.RegisterService(&_Indexer_serviceDesc, srv)
}

func _Indexer_Index_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).Index(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.state.Indexer/Index",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).Index(ctx, req.(*IndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_DeIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).DeIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.state.Indexer/DeIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).DeIndex(ctx, req.(*DeIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_PrepareReindex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareReindexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).PrepareReindex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.state.Indexer/PrepareReindex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).PrepareReindex(ctx, req.(*PrepareReindexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_CompleteReindex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteReindexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).CompleteReindex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.state.Indexer/CompleteReindex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).CompleteReindex(ctx, req.(*CompleteReindexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Indexer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.state.Indexer",
	HandlerType: (*IndexerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Index",
			Handler:    _Indexer_Index_Handler,
		},
		{
			MethodName: "DeIndex",
			Handler:    _Indexer_DeIndex_Handler,
		},
		{
			MethodName: "PrepareReindex",
			Handler:    _Indexer_PrepareReindex_Handler,
		},
		{
			MethodName: "CompleteReindex",
			Handler:    _Indexer_CompleteReindex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orc8r/cloud/go/services/state/protos/indexer.proto",
}
