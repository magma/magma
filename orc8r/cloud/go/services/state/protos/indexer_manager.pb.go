//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.10.0
// source: orc8r/cloud/go/services/state/protos/indexer_manager.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetIndexersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetIndexersRequest) Reset() {
	*x = GetIndexersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIndexersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIndexersRequest) ProtoMessage() {}

func (x *GetIndexersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIndexersRequest.ProtoReflect.Descriptor instead.
func (*GetIndexersRequest) Descriptor() ([]byte, []int) {
	return file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_rawDescGZIP(), []int{0}
}

type GetIndexersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// indexers_by_id contains all tracked indexers, keyed by their ID.
	IndexersById map[string]*IndexerInfo `protobuf:"bytes,1,rep,name=indexers_by_id,json=indexersById,proto3" json:"indexers_by_id,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetIndexersResponse) Reset() {
	*x = GetIndexersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIndexersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIndexersResponse) ProtoMessage() {}

func (x *GetIndexersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIndexersResponse.ProtoReflect.Descriptor instead.
func (*GetIndexersResponse) Descriptor() ([]byte, []int) {
	return file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_rawDescGZIP(), []int{1}
}

func (x *GetIndexersResponse) GetIndexersById() map[string]*IndexerInfo {
	if x != nil {
		return x.IndexersById
	}
	return nil
}

type StartReindexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// indexer_id is the ID of the indexer to reindex.
	// If indexer_id is empty, will reindex all necessary indexers.
	IndexerId string `protobuf:"bytes,1,opt,name=indexer_id,json=indexerId,proto3" json:"indexer_id,omitempty"`
	// force the reindex to occur.
	// By default, start reindex will fail if automatic reindexing is enabled.
	// Set force=true to overrule this default.
	Force bool `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *StartReindexRequest) Reset() {
	*x = StartReindexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartReindexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartReindexRequest) ProtoMessage() {}

func (x *StartReindexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartReindexRequest.ProtoReflect.Descriptor instead.
func (*StartReindexRequest) Descriptor() ([]byte, []int) {
	return file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_rawDescGZIP(), []int{2}
}

func (x *StartReindexRequest) GetIndexerId() string {
	if x != nil {
		return x.IndexerId
	}
	return ""
}

func (x *StartReindexRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type StartReindexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// update contains a human-readable update on reindex progress
	Update string `protobuf:"bytes,1,opt,name=update,proto3" json:"update,omitempty"`
}

func (x *StartReindexResponse) Reset() {
	*x = StartReindexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartReindexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartReindexResponse) ProtoMessage() {}

func (x *StartReindexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartReindexResponse.ProtoReflect.Descriptor instead.
func (*StartReindexResponse) Descriptor() ([]byte, []int) {
	return file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_rawDescGZIP(), []int{3}
}

func (x *StartReindexResponse) GetUpdate() string {
	if x != nil {
		return x.Update
	}
	return ""
}

// IndexerInfo provides info about a state indexer.
type IndexerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// indexer_id is the indexer's ID.
	IndexerId string `protobuf:"bytes,1,opt,name=indexer_id,json=indexerId,proto3" json:"indexer_id,omitempty"`
	// actual_version is the indexer's current version.
	ActualVersion uint32 `protobuf:"varint,2,opt,name=actual_version,json=actualVersion,proto3" json:"actual_version,omitempty"`
	// desired_version is the version to which the indexer will be reindexed.
	DesiredVersion uint32 `protobuf:"varint,3,opt,name=desired_version,json=desiredVersion,proto3" json:"desired_version,omitempty"`
}

func (x *IndexerInfo) Reset() {
	*x = IndexerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexerInfo) ProtoMessage() {}

func (x *IndexerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexerInfo.ProtoReflect.Descriptor instead.
func (*IndexerInfo) Descriptor() ([]byte, []int) {
	return file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_rawDescGZIP(), []int{4}
}

func (x *IndexerInfo) GetIndexerId() string {
	if x != nil {
		return x.IndexerId
	}
	return ""
}

func (x *IndexerInfo) GetActualVersion() uint32 {
	if x != nil {
		return x.ActualVersion
	}
	return 0
}

func (x *IndexerInfo) GetDesiredVersion() uint32 {
	if x != nil {
		return x.DesiredVersion
	}
	return 0
}

var File_orc8r_cloud_go_services_state_protos_indexer_manager_proto protoreflect.FileDescriptor

var file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a,
	0x0e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72,
	0x63, 0x38, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x72, 0x73, 0x42, 0x79, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x73, 0x42, 0x79, 0x49, 0x64, 0x1a, 0x5f, 0x0a,
	0x11, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x73, 0x42, 0x79, 0x49, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38,
	0x72, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4a,
	0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x2e, 0x0a, 0x14, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x7c, 0x0a, 0x0b, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0xd5, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x73, 0x12, 0x25, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0c, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38,
	0x72, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x42, 0x2c, 0x5a, 0x2a, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_rawDescOnce sync.Once
	file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_rawDescData = file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_rawDesc
)

func file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_rawDescGZIP() []byte {
	file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_rawDescOnce.Do(func() {
		file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_rawDescData)
	})
	return file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_rawDescData
}

var file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_goTypes = []interface{}{
	(*GetIndexersRequest)(nil),   // 0: magma.orc8r.state.GetIndexersRequest
	(*GetIndexersResponse)(nil),  // 1: magma.orc8r.state.GetIndexersResponse
	(*StartReindexRequest)(nil),  // 2: magma.orc8r.state.StartReindexRequest
	(*StartReindexResponse)(nil), // 3: magma.orc8r.state.StartReindexResponse
	(*IndexerInfo)(nil),          // 4: magma.orc8r.state.IndexerInfo
	nil,                          // 5: magma.orc8r.state.GetIndexersResponse.IndexersByIdEntry
}
var file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_depIdxs = []int32{
	5, // 0: magma.orc8r.state.GetIndexersResponse.indexers_by_id:type_name -> magma.orc8r.state.GetIndexersResponse.IndexersByIdEntry
	4, // 1: magma.orc8r.state.GetIndexersResponse.IndexersByIdEntry.value:type_name -> magma.orc8r.state.IndexerInfo
	0, // 2: magma.orc8r.state.IndexerManager.GetIndexers:input_type -> magma.orc8r.state.GetIndexersRequest
	2, // 3: magma.orc8r.state.IndexerManager.StartReindex:input_type -> magma.orc8r.state.StartReindexRequest
	1, // 4: magma.orc8r.state.IndexerManager.GetIndexers:output_type -> magma.orc8r.state.GetIndexersResponse
	3, // 5: magma.orc8r.state.IndexerManager.StartReindex:output_type -> magma.orc8r.state.StartReindexResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_init() }
func file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_init() {
	if File_orc8r_cloud_go_services_state_protos_indexer_manager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIndexersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIndexersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartReindexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartReindexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_goTypes,
		DependencyIndexes: file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_depIdxs,
		MessageInfos:      file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_msgTypes,
	}.Build()
	File_orc8r_cloud_go_services_state_protos_indexer_manager_proto = out.File
	file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_rawDesc = nil
	file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_goTypes = nil
	file_orc8r_cloud_go_services_state_protos_indexer_manager_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IndexerManagerClient is the client API for IndexerManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IndexerManagerClient interface {
	// GetIndexers returns indexer info for all tracked indexers.
	GetIndexers(ctx context.Context, in *GetIndexersRequest, opts ...grpc.CallOption) (*GetIndexersResponse, error)
	// StartReindex kicks off any required reindex jobs for some or all indexers.
	// Blocks till reindex job returns, streaming loggable updates.
	StartReindex(ctx context.Context, in *StartReindexRequest, opts ...grpc.CallOption) (IndexerManager_StartReindexClient, error)
}

type indexerManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexerManagerClient(cc grpc.ClientConnInterface) IndexerManagerClient {
	return &indexerManagerClient{cc}
}

func (c *indexerManagerClient) GetIndexers(ctx context.Context, in *GetIndexersRequest, opts ...grpc.CallOption) (*GetIndexersResponse, error) {
	out := new(GetIndexersResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.state.IndexerManager/GetIndexers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerManagerClient) StartReindex(ctx context.Context, in *StartReindexRequest, opts ...grpc.CallOption) (IndexerManager_StartReindexClient, error) {
	stream, err := c.cc.NewStream(ctx, &_IndexerManager_serviceDesc.Streams[0], "/magma.orc8r.state.IndexerManager/StartReindex", opts...)
	if err != nil {
		return nil, err
	}
	x := &indexerManagerStartReindexClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IndexerManager_StartReindexClient interface {
	Recv() (*StartReindexResponse, error)
	grpc.ClientStream
}

type indexerManagerStartReindexClient struct {
	grpc.ClientStream
}

func (x *indexerManagerStartReindexClient) Recv() (*StartReindexResponse, error) {
	m := new(StartReindexResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IndexerManagerServer is the server API for IndexerManager service.
type IndexerManagerServer interface {
	// GetIndexers returns indexer info for all tracked indexers.
	GetIndexers(context.Context, *GetIndexersRequest) (*GetIndexersResponse, error)
	// StartReindex kicks off any required reindex jobs for some or all indexers.
	// Blocks till reindex job returns, streaming loggable updates.
	StartReindex(*StartReindexRequest, IndexerManager_StartReindexServer) error
}

// UnimplementedIndexerManagerServer can be embedded to have forward compatible implementations.
type UnimplementedIndexerManagerServer struct {
}

func (*UnimplementedIndexerManagerServer) GetIndexers(context.Context, *GetIndexersRequest) (*GetIndexersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndexers not implemented")
}
func (*UnimplementedIndexerManagerServer) StartReindex(*StartReindexRequest, IndexerManager_StartReindexServer) error {
	return status.Errorf(codes.Unimplemented, "method StartReindex not implemented")
}

func RegisterIndexerManagerServer(s *grpc.Server, srv IndexerManagerServer) {
	s.RegisterService(&_IndexerManager_serviceDesc, srv)
}

func _IndexerManager_GetIndexers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIndexersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerManagerServer).GetIndexers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.state.IndexerManager/GetIndexers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerManagerServer).GetIndexers(ctx, req.(*GetIndexersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerManager_StartReindex_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartReindexRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IndexerManagerServer).StartReindex(m, &indexerManagerStartReindexServer{stream})
}

type IndexerManager_StartReindexServer interface {
	Send(*StartReindexResponse) error
	grpc.ServerStream
}

type indexerManagerStartReindexServer struct {
	grpc.ServerStream
}

func (x *indexerManagerStartReindexServer) Send(m *StartReindexResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _IndexerManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.state.IndexerManager",
	HandlerType: (*IndexerManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIndexers",
			Handler:    _IndexerManager_GetIndexers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartReindex",
			Handler:       _IndexerManager_StartReindex_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "orc8r/cloud/go/services/state/protos/indexer_manager.proto",
}
