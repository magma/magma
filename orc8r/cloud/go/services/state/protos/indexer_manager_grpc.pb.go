// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IndexerManagerClient is the client API for IndexerManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IndexerManagerClient interface {
	// GetIndexers returns indexer info for all tracked indexers.
	GetIndexers(ctx context.Context, in *GetIndexersRequest, opts ...grpc.CallOption) (*GetIndexersResponse, error)
	// StartReindex kicks off any required reindex jobs for some or all indexers.
	// Blocks till reindex job returns, streaming loggable updates.
	StartReindex(ctx context.Context, in *StartReindexRequest, opts ...grpc.CallOption) (IndexerManager_StartReindexClient, error)
}

type indexerManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexerManagerClient(cc grpc.ClientConnInterface) IndexerManagerClient {
	return &indexerManagerClient{cc}
}

func (c *indexerManagerClient) GetIndexers(ctx context.Context, in *GetIndexersRequest, opts ...grpc.CallOption) (*GetIndexersResponse, error) {
	out := new(GetIndexersResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.state.IndexerManager/GetIndexers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerManagerClient) StartReindex(ctx context.Context, in *StartReindexRequest, opts ...grpc.CallOption) (IndexerManager_StartReindexClient, error) {
	stream, err := c.cc.NewStream(ctx, &IndexerManager_ServiceDesc.Streams[0], "/magma.orc8r.state.IndexerManager/StartReindex", opts...)
	if err != nil {
		return nil, err
	}
	x := &indexerManagerStartReindexClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IndexerManager_StartReindexClient interface {
	Recv() (*StartReindexResponse, error)
	grpc.ClientStream
}

type indexerManagerStartReindexClient struct {
	grpc.ClientStream
}

func (x *indexerManagerStartReindexClient) Recv() (*StartReindexResponse, error) {
	m := new(StartReindexResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IndexerManagerServer is the server API for IndexerManager service.
// All implementations should embed UnimplementedIndexerManagerServer
// for forward compatibility
type IndexerManagerServer interface {
	// GetIndexers returns indexer info for all tracked indexers.
	GetIndexers(context.Context, *GetIndexersRequest) (*GetIndexersResponse, error)
	// StartReindex kicks off any required reindex jobs for some or all indexers.
	// Blocks till reindex job returns, streaming loggable updates.
	StartReindex(*StartReindexRequest, IndexerManager_StartReindexServer) error
}

// UnimplementedIndexerManagerServer should be embedded to have forward compatible implementations.
type UnimplementedIndexerManagerServer struct {
}

func (UnimplementedIndexerManagerServer) GetIndexers(context.Context, *GetIndexersRequest) (*GetIndexersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndexers not implemented")
}
func (UnimplementedIndexerManagerServer) StartReindex(*StartReindexRequest, IndexerManager_StartReindexServer) error {
	return status.Errorf(codes.Unimplemented, "method StartReindex not implemented")
}

// UnsafeIndexerManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndexerManagerServer will
// result in compilation errors.
type UnsafeIndexerManagerServer interface {
	mustEmbedUnimplementedIndexerManagerServer()
}

func RegisterIndexerManagerServer(s grpc.ServiceRegistrar, srv IndexerManagerServer) {
	s.RegisterService(&IndexerManager_ServiceDesc, srv)
}

func _IndexerManager_GetIndexers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIndexersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerManagerServer).GetIndexers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.state.IndexerManager/GetIndexers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerManagerServer).GetIndexers(ctx, req.(*GetIndexersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerManager_StartReindex_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartReindexRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IndexerManagerServer).StartReindex(m, &indexerManagerStartReindexServer{stream})
}

type IndexerManager_StartReindexServer interface {
	Send(*StartReindexResponse) error
	grpc.ServerStream
}

type indexerManagerStartReindexServer struct {
	grpc.ServerStream
}

func (x *indexerManagerStartReindexServer) Send(m *StartReindexResponse) error {
	return x.ServerStream.SendMsg(m)
}

// IndexerManager_ServiceDesc is the grpc.ServiceDesc for IndexerManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IndexerManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.state.IndexerManager",
	HandlerType: (*IndexerManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIndexers",
			Handler:    _IndexerManager_GetIndexers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartReindex",
			Handler:       _IndexerManager_StartReindex_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "orc8r/cloud/go/services/state/protos/indexer_manager.proto",
}
