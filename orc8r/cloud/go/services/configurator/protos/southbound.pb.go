//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.10.0
// source: orc8r/cloud/go/services/configurator/protos/southbound.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	protos "magma/orc8r/lib/go/protos"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetMconfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HardwareID string `protobuf:"bytes,1,opt,name=hardwareID,proto3" json:"hardwareID,omitempty"`
}

func (x *GetMconfigRequest) Reset() {
	*x = GetMconfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_cloud_go_services_configurator_protos_southbound_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMconfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMconfigRequest) ProtoMessage() {}

func (x *GetMconfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_cloud_go_services_configurator_protos_southbound_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMconfigRequest.ProtoReflect.Descriptor instead.
func (*GetMconfigRequest) Descriptor() ([]byte, []int) {
	return file_orc8r_cloud_go_services_configurator_protos_southbound_proto_rawDescGZIP(), []int{0}
}

func (x *GetMconfigRequest) GetHardwareID() string {
	if x != nil {
		return x.HardwareID
	}
	return ""
}

type GetMconfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// configs contains the mconfigs for the requested hardware ID
	// The contained configs_by_key should be str->any.Any, where the any.Any
	// is a BytesValue wrapper containing the the config.
	// Each config is (1) marshaled to an any.Any then (2) JSON-serialized
	// before being placed into the BytesValue wrapper.
	// TODO(#2310): revert configs.configs_by_key to containing each config just marshaled to any.Any (not additionally serialized to JSON)
	Configs *protos.GatewayConfigs `protobuf:"bytes,1,opt,name=configs,proto3" json:"configs,omitempty"`
	// logicalID is the entity ID of the gateway in the configurator graph
	LogicalID string `protobuf:"bytes,2,opt,name=logicalID,proto3" json:"logicalID,omitempty"`
}

func (x *GetMconfigResponse) Reset() {
	*x = GetMconfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_cloud_go_services_configurator_protos_southbound_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMconfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMconfigResponse) ProtoMessage() {}

func (x *GetMconfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_cloud_go_services_configurator_protos_southbound_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMconfigResponse.ProtoReflect.Descriptor instead.
func (*GetMconfigResponse) Descriptor() ([]byte, []int) {
	return file_orc8r_cloud_go_services_configurator_protos_southbound_proto_rawDescGZIP(), []int{1}
}

func (x *GetMconfigResponse) GetConfigs() *protos.GatewayConfigs {
	if x != nil {
		return x.Configs
	}
	return nil
}

func (x *GetMconfigResponse) GetLogicalID() string {
	if x != nil {
		return x.LogicalID
	}
	return ""
}

var File_orc8r_cloud_go_services_configurator_protos_southbound_proto protoreflect.FileDescriptor

var file_orc8r_cloud_go_services_configurator_protos_southbound_proto_rawDesc = []byte{
	0x0a, 0x3c, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x6f,
	0x75, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x1a, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x33, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x49, 0x44, 0x22, 0x69, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x32,
	0xcb, 0x01, 0x0a, 0x16, 0x53, 0x6f, 0x75, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x4d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x1b, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x4d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x12, 0x2b, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x33, 0x5a,
	0x31, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_orc8r_cloud_go_services_configurator_protos_southbound_proto_rawDescOnce sync.Once
	file_orc8r_cloud_go_services_configurator_protos_southbound_proto_rawDescData = file_orc8r_cloud_go_services_configurator_protos_southbound_proto_rawDesc
)

func file_orc8r_cloud_go_services_configurator_protos_southbound_proto_rawDescGZIP() []byte {
	file_orc8r_cloud_go_services_configurator_protos_southbound_proto_rawDescOnce.Do(func() {
		file_orc8r_cloud_go_services_configurator_protos_southbound_proto_rawDescData = protoimpl.X.CompressGZIP(file_orc8r_cloud_go_services_configurator_protos_southbound_proto_rawDescData)
	})
	return file_orc8r_cloud_go_services_configurator_protos_southbound_proto_rawDescData
}

var file_orc8r_cloud_go_services_configurator_protos_southbound_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_orc8r_cloud_go_services_configurator_protos_southbound_proto_goTypes = []interface{}{
	(*GetMconfigRequest)(nil),     // 0: magma.orc8r.configurator.GetMconfigRequest
	(*GetMconfigResponse)(nil),    // 1: magma.orc8r.configurator.GetMconfigResponse
	(*protos.GatewayConfigs)(nil), // 2: magma.orc8r.GatewayConfigs
	(*protos.Void)(nil),           // 3: magma.orc8r.Void
}
var file_orc8r_cloud_go_services_configurator_protos_southbound_proto_depIdxs = []int32{
	2, // 0: magma.orc8r.configurator.GetMconfigResponse.configs:type_name -> magma.orc8r.GatewayConfigs
	3, // 1: magma.orc8r.configurator.SouthboundConfigurator.GetMconfig:input_type -> magma.orc8r.Void
	0, // 2: magma.orc8r.configurator.SouthboundConfigurator.GetMconfigInternal:input_type -> magma.orc8r.configurator.GetMconfigRequest
	2, // 3: magma.orc8r.configurator.SouthboundConfigurator.GetMconfig:output_type -> magma.orc8r.GatewayConfigs
	1, // 4: magma.orc8r.configurator.SouthboundConfigurator.GetMconfigInternal:output_type -> magma.orc8r.configurator.GetMconfigResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_orc8r_cloud_go_services_configurator_protos_southbound_proto_init() }
func file_orc8r_cloud_go_services_configurator_protos_southbound_proto_init() {
	if File_orc8r_cloud_go_services_configurator_protos_southbound_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_orc8r_cloud_go_services_configurator_protos_southbound_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMconfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_cloud_go_services_configurator_protos_southbound_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMconfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_orc8r_cloud_go_services_configurator_protos_southbound_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_orc8r_cloud_go_services_configurator_protos_southbound_proto_goTypes,
		DependencyIndexes: file_orc8r_cloud_go_services_configurator_protos_southbound_proto_depIdxs,
		MessageInfos:      file_orc8r_cloud_go_services_configurator_protos_southbound_proto_msgTypes,
	}.Build()
	File_orc8r_cloud_go_services_configurator_protos_southbound_proto = out.File
	file_orc8r_cloud_go_services_configurator_protos_southbound_proto_rawDesc = nil
	file_orc8r_cloud_go_services_configurator_protos_southbound_proto_goTypes = nil
	file_orc8r_cloud_go_services_configurator_protos_southbound_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SouthboundConfiguratorClient is the client API for SouthboundConfigurator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SouthboundConfiguratorClient interface {
	GetMconfig(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*protos.GatewayConfigs, error)
	// GetMconfigInternal exists to support the existing streamer mconfig
	// policy. This should be removed when we migrate gateway mconfig updates
	// from streamer to this southbound configurator servicer.
	GetMconfigInternal(ctx context.Context, in *GetMconfigRequest, opts ...grpc.CallOption) (*GetMconfigResponse, error)
}

type southboundConfiguratorClient struct {
	cc grpc.ClientConnInterface
}

func NewSouthboundConfiguratorClient(cc grpc.ClientConnInterface) SouthboundConfiguratorClient {
	return &southboundConfiguratorClient{cc}
}

func (c *southboundConfiguratorClient) GetMconfig(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*protos.GatewayConfigs, error) {
	out := new(protos.GatewayConfigs)
	err := c.cc.Invoke(ctx, "/magma.orc8r.configurator.SouthboundConfigurator/GetMconfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *southboundConfiguratorClient) GetMconfigInternal(ctx context.Context, in *GetMconfigRequest, opts ...grpc.CallOption) (*GetMconfigResponse, error) {
	out := new(GetMconfigResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.configurator.SouthboundConfigurator/GetMconfigInternal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SouthboundConfiguratorServer is the server API for SouthboundConfigurator service.
type SouthboundConfiguratorServer interface {
	GetMconfig(context.Context, *protos.Void) (*protos.GatewayConfigs, error)
	// GetMconfigInternal exists to support the existing streamer mconfig
	// policy. This should be removed when we migrate gateway mconfig updates
	// from streamer to this southbound configurator servicer.
	GetMconfigInternal(context.Context, *GetMconfigRequest) (*GetMconfigResponse, error)
}

// UnimplementedSouthboundConfiguratorServer can be embedded to have forward compatible implementations.
type UnimplementedSouthboundConfiguratorServer struct {
}

func (*UnimplementedSouthboundConfiguratorServer) GetMconfig(context.Context, *protos.Void) (*protos.GatewayConfigs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMconfig not implemented")
}
func (*UnimplementedSouthboundConfiguratorServer) GetMconfigInternal(context.Context, *GetMconfigRequest) (*GetMconfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMconfigInternal not implemented")
}

func RegisterSouthboundConfiguratorServer(s *grpc.Server, srv SouthboundConfiguratorServer) {
	s.RegisterService(&_SouthboundConfigurator_serviceDesc, srv)
}

func _SouthboundConfigurator_GetMconfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundConfiguratorServer).GetMconfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.configurator.SouthboundConfigurator/GetMconfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundConfiguratorServer).GetMconfig(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _SouthboundConfigurator_GetMconfigInternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMconfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundConfiguratorServer).GetMconfigInternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.configurator.SouthboundConfigurator/GetMconfigInternal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundConfiguratorServer).GetMconfigInternal(ctx, req.(*GetMconfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SouthboundConfigurator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.configurator.SouthboundConfigurator",
	HandlerType: (*SouthboundConfiguratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMconfig",
			Handler:    _SouthboundConfigurator_GetMconfig_Handler,
		},
		{
			MethodName: "GetMconfigInternal",
			Handler:    _SouthboundConfigurator_GetMconfigInternal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orc8r/cloud/go/services/configurator/protos/southbound.proto",
}
