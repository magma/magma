// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Resource The resource to which the user is either denied or allowed access to read/write
// swagger:model resource
type Resource struct {

	// action
	// Enum: [READ WRITE]
	Action string `json:"action,omitempty"`

	// effect
	// Enum: [DENY ALLOW]
	Effect string `json:"effect,omitempty"`

	// resource
	Resource string `json:"resource,omitempty"`

	// resource type
	// Enum: [NETWORK_ID TENANT_ID URI]
	ResourceType string `json:"resourceType,omitempty"`
}

// Validate validates this resource
func (m *Resource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEffect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var resourceTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["READ","WRITE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resourceTypeActionPropEnum = append(resourceTypeActionPropEnum, v)
	}
}

const (

	// ResourceActionREAD captures enum value "READ"
	ResourceActionREAD string = "READ"

	// ResourceActionWRITE captures enum value "WRITE"
	ResourceActionWRITE string = "WRITE"
)

// prop value enum
func (m *Resource) validateActionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, resourceTypeActionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Resource) validateAction(formats strfmt.Registry) error {

	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

var resourceTypeEffectPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DENY","ALLOW"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resourceTypeEffectPropEnum = append(resourceTypeEffectPropEnum, v)
	}
}

const (

	// ResourceEffectDENY captures enum value "DENY"
	ResourceEffectDENY string = "DENY"

	// ResourceEffectALLOW captures enum value "ALLOW"
	ResourceEffectALLOW string = "ALLOW"
)

// prop value enum
func (m *Resource) validateEffectEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, resourceTypeEffectPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Resource) validateEffect(formats strfmt.Registry) error {

	if swag.IsZero(m.Effect) { // not required
		return nil
	}

	// value enum
	if err := m.validateEffectEnum("effect", "body", m.Effect); err != nil {
		return err
	}

	return nil
}

var resourceTypeResourceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NETWORK_ID","TENANT_ID","URI"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resourceTypeResourceTypePropEnum = append(resourceTypeResourceTypePropEnum, v)
	}
}

const (

	// ResourceResourceTypeNETWORKID captures enum value "NETWORK_ID"
	ResourceResourceTypeNETWORKID string = "NETWORK_ID"

	// ResourceResourceTypeTENANTID captures enum value "TENANT_ID"
	ResourceResourceTypeTENANTID string = "TENANT_ID"

	// ResourceResourceTypeURI captures enum value "URI"
	ResourceResourceTypeURI string = "URI"
)

// prop value enum
func (m *Resource) validateResourceTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, resourceTypeResourceTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Resource) validateResourceType(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceType) { // not required
		return nil
	}

	// value enum
	if err := m.validateResourceTypeEnum("resourceType", "body", m.ResourceType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Resource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Resource) UnmarshalBinary(b []byte) error {
	var res Resource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
