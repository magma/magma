// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Policy The policy specifies whether a user is  either denied or allowed access to read/write a resource.
// If the resource is of type URI, the path field should be filled in. If the resource is of
// type NETWORK_ID or TENANT_ID, the resourceIDs field should be filled in.
//
// Example: {"action":"WRITE","effect":"ALLOW","path":"**","resourceType":"URI"}
//
// swagger:model policy
type Policy struct {

	// action
	// Enum: [READ WRITE]
	Action string `json:"action,omitempty"`

	// effect
	// Enum: [DENY ALLOW]
	Effect string `json:"effect,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// resource i ds
	ResourceIDs []string `json:"resourceIDs"`

	// resource type
	// Enum: [NETWORK_ID TENANT_ID URI]
	ResourceType string `json:"resourceType,omitempty"`
}

// Validate validates this policy
func (m *Policy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEffect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var policyTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["READ","WRITE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyTypeActionPropEnum = append(policyTypeActionPropEnum, v)
	}
}

const (

	// PolicyActionREAD captures enum value "READ"
	PolicyActionREAD string = "READ"

	// PolicyActionWRITE captures enum value "WRITE"
	PolicyActionWRITE string = "WRITE"
)

// prop value enum
func (m *Policy) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policyTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Policy) validateAction(formats strfmt.Registry) error {
	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

var policyTypeEffectPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DENY","ALLOW"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyTypeEffectPropEnum = append(policyTypeEffectPropEnum, v)
	}
}

const (

	// PolicyEffectDENY captures enum value "DENY"
	PolicyEffectDENY string = "DENY"

	// PolicyEffectALLOW captures enum value "ALLOW"
	PolicyEffectALLOW string = "ALLOW"
)

// prop value enum
func (m *Policy) validateEffectEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policyTypeEffectPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Policy) validateEffect(formats strfmt.Registry) error {
	if swag.IsZero(m.Effect) { // not required
		return nil
	}

	// value enum
	if err := m.validateEffectEnum("effect", "body", m.Effect); err != nil {
		return err
	}

	return nil
}

var policyTypeResourceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NETWORK_ID","TENANT_ID","URI"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyTypeResourceTypePropEnum = append(policyTypeResourceTypePropEnum, v)
	}
}

const (

	// PolicyResourceTypeNETWORKID captures enum value "NETWORK_ID"
	PolicyResourceTypeNETWORKID string = "NETWORK_ID"

	// PolicyResourceTypeTENANTID captures enum value "TENANT_ID"
	PolicyResourceTypeTENANTID string = "TENANT_ID"

	// PolicyResourceTypeURI captures enum value "URI"
	PolicyResourceTypeURI string = "URI"
)

// prop value enum
func (m *Policy) validateResourceTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policyTypeResourceTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Policy) validateResourceType(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceType) { // not required
		return nil
	}

	// value enum
	if err := m.validateResourceTypeEnum("resourceType", "body", m.ResourceType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this policy based on context it is used
func (m *Policy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Policy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Policy) UnmarshalBinary(b []byte) error {
	var res Policy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
