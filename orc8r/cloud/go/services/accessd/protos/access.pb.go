//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

//
// Access Control Related Definitions:
//
//  Access Control is based on the concept of one cloud Entity (operator)
//  represented by its Identity, managing (READ/WRITE access) or
//  monitoring (READ only access) one or more other entities represented by
//  their own Identities
//  Since Identity is a polymorphic type, any entity can play a role of operator
//  as well as any entity can be a 'managed' entity.
//
//  Each Operator 'owns' Access Control List which consists of all entities
//  managed by an operator and their permissions.
//  The operator's access control list (AccessControl.List) is represented by a
//  map of managed/monitored entity Identities keyed by entity's Hash String
//
//  All ACLs are stored as a map keyed by the Operator's Identity unique Hash
//  String provided by the Operator's Identity implementation.
//  Operator's Identity is itself included in the map's value
//  for security & convenience:
//
//  key: Operator Hash String => value: AccessControl.List
//  where:
//      AccessControl.List => {
//        Identity operator
//        map<string, Entity> entities
//      }
//      where:
//          Entity => {
//              Identity id
//              int32 permissions
//          }
//
//  The Identity Hash includes the Identity type, so two Identities may only be
//  equal if they are of the same type.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.10.0
// source: orc8r/cloud/go/services/accessd/protos/access.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	protos "magma/orc8r/lib/go/protos"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// All permission definitions are used as bitmasks & should be 2**N
type AccessControl_Permission int32

const (
	AccessControl_NONE  AccessControl_Permission = 0
	AccessControl_READ  AccessControl_Permission = 1
	AccessControl_WRITE AccessControl_Permission = 2
)

// Enum value maps for AccessControl_Permission.
var (
	AccessControl_Permission_name = map[int32]string{
		0: "NONE",
		1: "READ",
		2: "WRITE",
	}
	AccessControl_Permission_value = map[string]int32{
		"NONE":  0,
		"READ":  1,
		"WRITE": 2,
	}
)

func (x AccessControl_Permission) Enum() *AccessControl_Permission {
	p := new(AccessControl_Permission)
	*p = x
	return p
}

func (x AccessControl_Permission) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessControl_Permission) Descriptor() protoreflect.EnumDescriptor {
	return file_orc8r_cloud_go_services_accessd_protos_access_proto_enumTypes[0].Descriptor()
}

func (AccessControl_Permission) Type() protoreflect.EnumType {
	return &file_orc8r_cloud_go_services_accessd_protos_access_proto_enumTypes[0]
}

func (x AccessControl_Permission) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessControl_Permission.Descriptor instead.
func (AccessControl_Permission) EnumDescriptor() ([]byte, []int) {
	return file_orc8r_cloud_go_services_accessd_protos_access_proto_rawDescGZIP(), []int{0, 0}
}

// Access Control Data Structures & Definitions
type AccessControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AccessControl) Reset() {
	*x = AccessControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_cloud_go_services_accessd_protos_access_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessControl) ProtoMessage() {}

func (x *AccessControl) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_cloud_go_services_accessd_protos_access_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessControl.ProtoReflect.Descriptor instead.
func (*AccessControl) Descriptor() ([]byte, []int) {
	return file_orc8r_cloud_go_services_accessd_protos_access_proto_rawDescGZIP(), []int{0}
}

// "Managed/monitored" entity record
type AccessControl_Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *protos.Identity         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Permissions AccessControl_Permission `protobuf:"varint,2,opt,name=permissions,proto3,enum=magma.orc8r.accessd.AccessControl_Permission" json:"permissions,omitempty"` // permissions bitmask, READ|WRITE == full access
}

func (x *AccessControl_Entity) Reset() {
	*x = AccessControl_Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_cloud_go_services_accessd_protos_access_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessControl_Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessControl_Entity) ProtoMessage() {}

func (x *AccessControl_Entity) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_cloud_go_services_accessd_protos_access_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessControl_Entity.ProtoReflect.Descriptor instead.
func (*AccessControl_Entity) Descriptor() ([]byte, []int) {
	return file_orc8r_cloud_go_services_accessd_protos_access_proto_rawDescGZIP(), []int{0, 0}
}

func (x *AccessControl_Entity) GetId() *protos.Identity {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AccessControl_Entity) GetPermissions() AccessControl_Permission {
	if x != nil {
		return x.Permissions
	}
	return AccessControl_NONE
}

// Operator's Access Control List (map)
type AccessControl_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator *protos.Identity `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// Map entity's hash string -> entity
	Entities map[string]*AccessControl_Entity `protobuf:"bytes,2,rep,name=entities,proto3" json:"entities,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AccessControl_List) Reset() {
	*x = AccessControl_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_cloud_go_services_accessd_protos_access_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessControl_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessControl_List) ProtoMessage() {}

func (x *AccessControl_List) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_cloud_go_services_accessd_protos_access_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessControl_List.ProtoReflect.Descriptor instead.
func (*AccessControl_List) Descriptor() ([]byte, []int) {
	return file_orc8r_cloud_go_services_accessd_protos_access_proto_rawDescGZIP(), []int{0, 1}
}

func (x *AccessControl_List) GetOperator() *protos.Identity {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *AccessControl_List) GetEntities() map[string]*AccessControl_Entity {
	if x != nil {
		return x.Entities
	}
	return nil
}

// RPC Request/Response used to 1) manage AND 2) check permissions
// 1. When Adding or Modifying permissions entities will represent managed
// entities Operator's permissions
// 2. When verifying permissions, entities will represent a list of
// Identities and their corresponding permissions requested by the operator
type AccessControl_ListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator *protos.Identity        `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"` // Identity of operator => entities' manager
	Entities []*AccessControl_Entity `protobuf:"bytes,2,rep,name=entities,proto3" json:"entities,omitempty"` // Operated/managed entities & permissions
}

func (x *AccessControl_ListRequest) Reset() {
	*x = AccessControl_ListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_cloud_go_services_accessd_protos_access_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessControl_ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessControl_ListRequest) ProtoMessage() {}

func (x *AccessControl_ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_cloud_go_services_accessd_protos_access_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessControl_ListRequest.ProtoReflect.Descriptor instead.
func (*AccessControl_ListRequest) Descriptor() ([]byte, []int) {
	return file_orc8r_cloud_go_services_accessd_protos_access_proto_rawDescGZIP(), []int{0, 2}
}

func (x *AccessControl_ListRequest) GetOperator() *protos.Identity {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *AccessControl_ListRequest) GetEntities() []*AccessControl_Entity {
	if x != nil {
		return x.Entities
	}
	return nil
}

// RPC Request used to verify permissions for operator on a given entity
type AccessControl_PermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator *protos.Identity `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"` // Identity of operator => entities' manager
	Entity   *protos.Identity `protobuf:"bytes,2,opt,name=entity,proto3" json:"entity,omitempty"`     // Operated/managed entity
}

func (x *AccessControl_PermissionsRequest) Reset() {
	*x = AccessControl_PermissionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_cloud_go_services_accessd_protos_access_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessControl_PermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessControl_PermissionsRequest) ProtoMessage() {}

func (x *AccessControl_PermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_cloud_go_services_accessd_protos_access_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessControl_PermissionsRequest.ProtoReflect.Descriptor instead.
func (*AccessControl_PermissionsRequest) Descriptor() ([]byte, []int) {
	return file_orc8r_cloud_go_services_accessd_protos_access_proto_rawDescGZIP(), []int{0, 3}
}

func (x *AccessControl_PermissionsRequest) GetOperator() *protos.Identity {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *AccessControl_PermissionsRequest) GetEntity() *protos.Identity {
	if x != nil {
		return x.Entity
	}
	return nil
}

type AccessControl_Lists struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Acls []*AccessControl_List `protobuf:"bytes,1,rep,name=acls,proto3" json:"acls,omitempty"`
}

func (x *AccessControl_Lists) Reset() {
	*x = AccessControl_Lists{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_cloud_go_services_accessd_protos_access_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessControl_Lists) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessControl_Lists) ProtoMessage() {}

func (x *AccessControl_Lists) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_cloud_go_services_accessd_protos_access_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessControl_Lists.ProtoReflect.Descriptor instead.
func (*AccessControl_Lists) Descriptor() ([]byte, []int) {
	return file_orc8r_cloud_go_services_accessd_protos_access_proto_rawDescGZIP(), []int{0, 4}
}

func (x *AccessControl_Lists) GetAcls() []*AccessControl_List {
	if x != nil {
		return x.Acls
	}
	return nil
}

var File_orc8r_cloud_go_services_accessd_protos_access_proto protoreflect.FileDescriptor

var file_orc8r_cloud_go_services_accessd_protos_access_proto_rawDesc = []byte{
	0x0a, 0x33, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63,
	0x38, 0x72, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x64, 0x1a, 0x19, 0x6f, 0x72, 0x63, 0x38,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xfe, 0x05, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x1a, 0x80, 0x01, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4f, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x64, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xf4, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x51, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72,
	0x63, 0x38, 0x72, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x64, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x66, 0x0a, 0x0d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x64, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x87,
	0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x45, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38,
	0x72, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x64, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x76, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x2d, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x1a, 0x44, 0x0a, 0x05, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x04, 0x61, 0x63, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x64, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x04, 0x61, 0x63, 0x6c, 0x73, 0x22, 0x2b, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x52, 0x49, 0x54,
	0x45, 0x10, 0x02, 0x32, 0xfc, 0x05, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x0b,
	0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x64, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00,
	0x12, 0x55, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x2e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72,
	0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x64, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72,
	0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56,
	0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x41, 0x43, 0x4c, 0x12, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x27,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x64, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x41, 0x43, 0x4c, 0x73, 0x12, 0x1a, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x64, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x73, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x64, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x64, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x10, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x64, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f,
	0x69, 0x64, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72,
	0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x1a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f,
	0x72, 0x63, 0x38, 0x72, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x11, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64,
	0x22, 0x00, 0x42, 0x2e, 0x5a, 0x2c, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f, 0x6f, 0x72, 0x63, 0x38,
	0x72, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_orc8r_cloud_go_services_accessd_protos_access_proto_rawDescOnce sync.Once
	file_orc8r_cloud_go_services_accessd_protos_access_proto_rawDescData = file_orc8r_cloud_go_services_accessd_protos_access_proto_rawDesc
)

func file_orc8r_cloud_go_services_accessd_protos_access_proto_rawDescGZIP() []byte {
	file_orc8r_cloud_go_services_accessd_protos_access_proto_rawDescOnce.Do(func() {
		file_orc8r_cloud_go_services_accessd_protos_access_proto_rawDescData = protoimpl.X.CompressGZIP(file_orc8r_cloud_go_services_accessd_protos_access_proto_rawDescData)
	})
	return file_orc8r_cloud_go_services_accessd_protos_access_proto_rawDescData
}

var file_orc8r_cloud_go_services_accessd_protos_access_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_orc8r_cloud_go_services_accessd_protos_access_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_orc8r_cloud_go_services_accessd_protos_access_proto_goTypes = []interface{}{
	(AccessControl_Permission)(0),            // 0: magma.orc8r.accessd.AccessControl.Permission
	(*AccessControl)(nil),                    // 1: magma.orc8r.accessd.AccessControl
	(*AccessControl_Entity)(nil),             // 2: magma.orc8r.accessd.AccessControl.Entity
	(*AccessControl_List)(nil),               // 3: magma.orc8r.accessd.AccessControl.List
	(*AccessControl_ListRequest)(nil),        // 4: magma.orc8r.accessd.AccessControl.ListRequest
	(*AccessControl_PermissionsRequest)(nil), // 5: magma.orc8r.accessd.AccessControl.PermissionsRequest
	(*AccessControl_Lists)(nil),              // 6: magma.orc8r.accessd.AccessControl.Lists
	nil,                                      // 7: magma.orc8r.accessd.AccessControl.List.EntitiesEntry
	(*protos.Identity)(nil),                  // 8: magma.orc8r.Identity
	(*protos.Identity_List)(nil),             // 9: magma.orc8r.Identity.List
	(*protos.Void)(nil),                      // 10: magma.orc8r.Void
}
var file_orc8r_cloud_go_services_accessd_protos_access_proto_depIdxs = []int32{
	8,  // 0: magma.orc8r.accessd.AccessControl.Entity.id:type_name -> magma.orc8r.Identity
	0,  // 1: magma.orc8r.accessd.AccessControl.Entity.permissions:type_name -> magma.orc8r.accessd.AccessControl.Permission
	8,  // 2: magma.orc8r.accessd.AccessControl.List.operator:type_name -> magma.orc8r.Identity
	7,  // 3: magma.orc8r.accessd.AccessControl.List.entities:type_name -> magma.orc8r.accessd.AccessControl.List.EntitiesEntry
	8,  // 4: magma.orc8r.accessd.AccessControl.ListRequest.operator:type_name -> magma.orc8r.Identity
	2,  // 5: magma.orc8r.accessd.AccessControl.ListRequest.entities:type_name -> magma.orc8r.accessd.AccessControl.Entity
	8,  // 6: magma.orc8r.accessd.AccessControl.PermissionsRequest.operator:type_name -> magma.orc8r.Identity
	8,  // 7: magma.orc8r.accessd.AccessControl.PermissionsRequest.entity:type_name -> magma.orc8r.Identity
	3,  // 8: magma.orc8r.accessd.AccessControl.Lists.acls:type_name -> magma.orc8r.accessd.AccessControl.List
	2,  // 9: magma.orc8r.accessd.AccessControl.List.EntitiesEntry.value:type_name -> magma.orc8r.accessd.AccessControl.Entity
	4,  // 10: magma.orc8r.accessd.AccessControlManager.SetOperator:input_type -> magma.orc8r.accessd.AccessControl.ListRequest
	4,  // 11: magma.orc8r.accessd.AccessControlManager.UpdateOperator:input_type -> magma.orc8r.accessd.AccessControl.ListRequest
	8,  // 12: magma.orc8r.accessd.AccessControlManager.DeleteOperator:input_type -> magma.orc8r.Identity
	8,  // 13: magma.orc8r.accessd.AccessControlManager.GetOperatorACL:input_type -> magma.orc8r.Identity
	9,  // 14: magma.orc8r.accessd.AccessControlManager.GetOperatorsACLs:input_type -> magma.orc8r.Identity.List
	5,  // 15: magma.orc8r.accessd.AccessControlManager.GetPermissions:input_type -> magma.orc8r.accessd.AccessControl.PermissionsRequest
	4,  // 16: magma.orc8r.accessd.AccessControlManager.CheckPermissions:input_type -> magma.orc8r.accessd.AccessControl.ListRequest
	10, // 17: magma.orc8r.accessd.AccessControlManager.ListOperators:input_type -> magma.orc8r.Void
	8,  // 18: magma.orc8r.accessd.AccessControlManager.DeleteEntity:input_type -> magma.orc8r.Identity
	10, // 19: magma.orc8r.accessd.AccessControlManager.SetOperator:output_type -> magma.orc8r.Void
	10, // 20: magma.orc8r.accessd.AccessControlManager.UpdateOperator:output_type -> magma.orc8r.Void
	10, // 21: magma.orc8r.accessd.AccessControlManager.DeleteOperator:output_type -> magma.orc8r.Void
	3,  // 22: magma.orc8r.accessd.AccessControlManager.GetOperatorACL:output_type -> magma.orc8r.accessd.AccessControl.List
	6,  // 23: magma.orc8r.accessd.AccessControlManager.GetOperatorsACLs:output_type -> magma.orc8r.accessd.AccessControl.Lists
	2,  // 24: magma.orc8r.accessd.AccessControlManager.GetPermissions:output_type -> magma.orc8r.accessd.AccessControl.Entity
	10, // 25: magma.orc8r.accessd.AccessControlManager.CheckPermissions:output_type -> magma.orc8r.Void
	9,  // 26: magma.orc8r.accessd.AccessControlManager.ListOperators:output_type -> magma.orc8r.Identity.List
	10, // 27: magma.orc8r.accessd.AccessControlManager.DeleteEntity:output_type -> magma.orc8r.Void
	19, // [19:28] is the sub-list for method output_type
	10, // [10:19] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_orc8r_cloud_go_services_accessd_protos_access_proto_init() }
func file_orc8r_cloud_go_services_accessd_protos_access_proto_init() {
	if File_orc8r_cloud_go_services_accessd_protos_access_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_orc8r_cloud_go_services_accessd_protos_access_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_cloud_go_services_accessd_protos_access_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessControl_Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_cloud_go_services_accessd_protos_access_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessControl_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_cloud_go_services_accessd_protos_access_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessControl_ListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_cloud_go_services_accessd_protos_access_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessControl_PermissionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_cloud_go_services_accessd_protos_access_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessControl_Lists); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_orc8r_cloud_go_services_accessd_protos_access_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_orc8r_cloud_go_services_accessd_protos_access_proto_goTypes,
		DependencyIndexes: file_orc8r_cloud_go_services_accessd_protos_access_proto_depIdxs,
		EnumInfos:         file_orc8r_cloud_go_services_accessd_protos_access_proto_enumTypes,
		MessageInfos:      file_orc8r_cloud_go_services_accessd_protos_access_proto_msgTypes,
	}.Build()
	File_orc8r_cloud_go_services_accessd_protos_access_proto = out.File
	file_orc8r_cloud_go_services_accessd_protos_access_proto_rawDesc = nil
	file_orc8r_cloud_go_services_accessd_protos_access_proto_goTypes = nil
	file_orc8r_cloud_go_services_accessd_protos_access_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AccessControlManagerClient is the client API for AccessControlManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccessControlManagerClient interface {
	// Overwrites Permissions for operator Identity to manage others
	// Request includes ACL to set for the Operator
	// If the Operator doesn't exist - creates a new operator with the given ACL
	SetOperator(ctx context.Context, in *AccessControl_ListRequest, opts ...grpc.CallOption) (*protos.Void, error)
	// Adds Permissions for one Identity to manage others
	// Request includes ACL to add (append to the existing ACL) for the Operator
	UpdateOperator(ctx context.Context, in *AccessControl_ListRequest, opts ...grpc.CallOption) (*protos.Void, error)
	// Removes all operator's permissions (the entire operator's ACL)
	DeleteOperator(ctx context.Context, in *protos.Identity, opts ...grpc.CallOption) (*protos.Void, error)
	// Returns the managing Identity's permissions list
	GetOperatorACL(ctx context.Context, in *protos.Identity, opts ...grpc.CallOption) (*AccessControl_List, error)
	// Returns the managing Identity's permissions list
	GetOperatorsACLs(ctx context.Context, in *protos.Identity_List, opts ...grpc.CallOption) (*AccessControl_Lists, error)
	// Returns the managing Identity's permissions for a given entity
	// NOTE: Takes into account wildcards for the entity's type in the ACL
	GetPermissions(ctx context.Context, in *AccessControl_PermissionsRequest, opts ...grpc.CallOption) (*AccessControl_Entity, error)
	// CheckPermissions verifies Operator permissions for a list of given
	// Identities. AccessControl.ListRequest.entities is a list of
	// Identities and their corresponding permissions requested by the operator
	// CheckPermissions will return success only if all requested permissions
	// are satisfied (AND logic)
	// Intended to be used for multi-Identity requests such as Network Identity
	// AND REST API Identity, etc.
	CheckPermissions(ctx context.Context, in *AccessControl_ListRequest, opts ...grpc.CallOption) (*protos.Void, error)
	// Lists all globally registered operators on the cloud
	ListOperators(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*protos.Identity_List, error)
	// Cleanup a given entity from all Operators' ACLs
	DeleteEntity(ctx context.Context, in *protos.Identity, opts ...grpc.CallOption) (*protos.Void, error)
}

type accessControlManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessControlManagerClient(cc grpc.ClientConnInterface) AccessControlManagerClient {
	return &accessControlManagerClient{cc}
}

func (c *accessControlManagerClient) SetOperator(ctx context.Context, in *AccessControl_ListRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.accessd.AccessControlManager/SetOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessControlManagerClient) UpdateOperator(ctx context.Context, in *AccessControl_ListRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.accessd.AccessControlManager/UpdateOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessControlManagerClient) DeleteOperator(ctx context.Context, in *protos.Identity, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.accessd.AccessControlManager/DeleteOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessControlManagerClient) GetOperatorACL(ctx context.Context, in *protos.Identity, opts ...grpc.CallOption) (*AccessControl_List, error) {
	out := new(AccessControl_List)
	err := c.cc.Invoke(ctx, "/magma.orc8r.accessd.AccessControlManager/GetOperatorACL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessControlManagerClient) GetOperatorsACLs(ctx context.Context, in *protos.Identity_List, opts ...grpc.CallOption) (*AccessControl_Lists, error) {
	out := new(AccessControl_Lists)
	err := c.cc.Invoke(ctx, "/magma.orc8r.accessd.AccessControlManager/GetOperatorsACLs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessControlManagerClient) GetPermissions(ctx context.Context, in *AccessControl_PermissionsRequest, opts ...grpc.CallOption) (*AccessControl_Entity, error) {
	out := new(AccessControl_Entity)
	err := c.cc.Invoke(ctx, "/magma.orc8r.accessd.AccessControlManager/GetPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessControlManagerClient) CheckPermissions(ctx context.Context, in *AccessControl_ListRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.accessd.AccessControlManager/CheckPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessControlManagerClient) ListOperators(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*protos.Identity_List, error) {
	out := new(protos.Identity_List)
	err := c.cc.Invoke(ctx, "/magma.orc8r.accessd.AccessControlManager/ListOperators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessControlManagerClient) DeleteEntity(ctx context.Context, in *protos.Identity, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.accessd.AccessControlManager/DeleteEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessControlManagerServer is the server API for AccessControlManager service.
type AccessControlManagerServer interface {
	// Overwrites Permissions for operator Identity to manage others
	// Request includes ACL to set for the Operator
	// If the Operator doesn't exist - creates a new operator with the given ACL
	SetOperator(context.Context, *AccessControl_ListRequest) (*protos.Void, error)
	// Adds Permissions for one Identity to manage others
	// Request includes ACL to add (append to the existing ACL) for the Operator
	UpdateOperator(context.Context, *AccessControl_ListRequest) (*protos.Void, error)
	// Removes all operator's permissions (the entire operator's ACL)
	DeleteOperator(context.Context, *protos.Identity) (*protos.Void, error)
	// Returns the managing Identity's permissions list
	GetOperatorACL(context.Context, *protos.Identity) (*AccessControl_List, error)
	// Returns the managing Identity's permissions list
	GetOperatorsACLs(context.Context, *protos.Identity_List) (*AccessControl_Lists, error)
	// Returns the managing Identity's permissions for a given entity
	// NOTE: Takes into account wildcards for the entity's type in the ACL
	GetPermissions(context.Context, *AccessControl_PermissionsRequest) (*AccessControl_Entity, error)
	// CheckPermissions verifies Operator permissions for a list of given
	// Identities. AccessControl.ListRequest.entities is a list of
	// Identities and their corresponding permissions requested by the operator
	// CheckPermissions will return success only if all requested permissions
	// are satisfied (AND logic)
	// Intended to be used for multi-Identity requests such as Network Identity
	// AND REST API Identity, etc.
	CheckPermissions(context.Context, *AccessControl_ListRequest) (*protos.Void, error)
	// Lists all globally registered operators on the cloud
	ListOperators(context.Context, *protos.Void) (*protos.Identity_List, error)
	// Cleanup a given entity from all Operators' ACLs
	DeleteEntity(context.Context, *protos.Identity) (*protos.Void, error)
}

// UnimplementedAccessControlManagerServer can be embedded to have forward compatible implementations.
type UnimplementedAccessControlManagerServer struct {
}

func (*UnimplementedAccessControlManagerServer) SetOperator(context.Context, *AccessControl_ListRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOperator not implemented")
}
func (*UnimplementedAccessControlManagerServer) UpdateOperator(context.Context, *AccessControl_ListRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOperator not implemented")
}
func (*UnimplementedAccessControlManagerServer) DeleteOperator(context.Context, *protos.Identity) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOperator not implemented")
}
func (*UnimplementedAccessControlManagerServer) GetOperatorACL(context.Context, *protos.Identity) (*AccessControl_List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperatorACL not implemented")
}
func (*UnimplementedAccessControlManagerServer) GetOperatorsACLs(context.Context, *protos.Identity_List) (*AccessControl_Lists, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperatorsACLs not implemented")
}
func (*UnimplementedAccessControlManagerServer) GetPermissions(context.Context, *AccessControl_PermissionsRequest) (*AccessControl_Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissions not implemented")
}
func (*UnimplementedAccessControlManagerServer) CheckPermissions(context.Context, *AccessControl_ListRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPermissions not implemented")
}
func (*UnimplementedAccessControlManagerServer) ListOperators(context.Context, *protos.Void) (*protos.Identity_List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperators not implemented")
}
func (*UnimplementedAccessControlManagerServer) DeleteEntity(context.Context, *protos.Identity) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntity not implemented")
}

func RegisterAccessControlManagerServer(s *grpc.Server, srv AccessControlManagerServer) {
	s.RegisterService(&_AccessControlManager_serviceDesc, srv)
}

func _AccessControlManager_SetOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessControl_ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessControlManagerServer).SetOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.accessd.AccessControlManager/SetOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessControlManagerServer).SetOperator(ctx, req.(*AccessControl_ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessControlManager_UpdateOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessControl_ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessControlManagerServer).UpdateOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.accessd.AccessControlManager/UpdateOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessControlManagerServer).UpdateOperator(ctx, req.(*AccessControl_ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessControlManager_DeleteOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessControlManagerServer).DeleteOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.accessd.AccessControlManager/DeleteOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessControlManagerServer).DeleteOperator(ctx, req.(*protos.Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessControlManager_GetOperatorACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessControlManagerServer).GetOperatorACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.accessd.AccessControlManager/GetOperatorACL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessControlManagerServer).GetOperatorACL(ctx, req.(*protos.Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessControlManager_GetOperatorsACLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Identity_List)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessControlManagerServer).GetOperatorsACLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.accessd.AccessControlManager/GetOperatorsACLs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessControlManagerServer).GetOperatorsACLs(ctx, req.(*protos.Identity_List))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessControlManager_GetPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessControl_PermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessControlManagerServer).GetPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.accessd.AccessControlManager/GetPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessControlManagerServer).GetPermissions(ctx, req.(*AccessControl_PermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessControlManager_CheckPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessControl_ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessControlManagerServer).CheckPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.accessd.AccessControlManager/CheckPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessControlManagerServer).CheckPermissions(ctx, req.(*AccessControl_ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessControlManager_ListOperators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessControlManagerServer).ListOperators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.accessd.AccessControlManager/ListOperators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessControlManagerServer).ListOperators(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessControlManager_DeleteEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessControlManagerServer).DeleteEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.accessd.AccessControlManager/DeleteEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessControlManagerServer).DeleteEntity(ctx, req.(*protos.Identity))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccessControlManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.accessd.AccessControlManager",
	HandlerType: (*AccessControlManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetOperator",
			Handler:    _AccessControlManager_SetOperator_Handler,
		},
		{
			MethodName: "UpdateOperator",
			Handler:    _AccessControlManager_UpdateOperator_Handler,
		},
		{
			MethodName: "DeleteOperator",
			Handler:    _AccessControlManager_DeleteOperator_Handler,
		},
		{
			MethodName: "GetOperatorACL",
			Handler:    _AccessControlManager_GetOperatorACL_Handler,
		},
		{
			MethodName: "GetOperatorsACLs",
			Handler:    _AccessControlManager_GetOperatorsACLs_Handler,
		},
		{
			MethodName: "GetPermissions",
			Handler:    _AccessControlManager_GetPermissions_Handler,
		},
		{
			MethodName: "CheckPermissions",
			Handler:    _AccessControlManager_CheckPermissions_Handler,
		},
		{
			MethodName: "ListOperators",
			Handler:    _AccessControlManager_ListOperators_Handler,
		},
		{
			MethodName: "DeleteEntity",
			Handler:    _AccessControlManager_DeleteEntity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orc8r/cloud/go/services/accessd/protos/access.proto",
}
