// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SwaggerSpecClient is the client API for SwaggerSpec service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SwaggerSpecClient interface {
	// GetPartialSpec returns partial Swagger specification of the service's REST API.
	GetPartialSpec(ctx context.Context, in *PartialSpecRequest, opts ...grpc.CallOption) (*PartialSpecResponse, error)
	// GetStandaloneSpec returns a standalone Swagger specification of the
	// service's REST API.
	GetStandaloneSpec(ctx context.Context, in *StandaloneSpecRequest, opts ...grpc.CallOption) (*StandaloneSpecResponse, error)
}

type swaggerSpecClient struct {
	cc grpc.ClientConnInterface
}

func NewSwaggerSpecClient(cc grpc.ClientConnInterface) SwaggerSpecClient {
	return &swaggerSpecClient{cc}
}

func (c *swaggerSpecClient) GetPartialSpec(ctx context.Context, in *PartialSpecRequest, opts ...grpc.CallOption) (*PartialSpecResponse, error) {
	out := new(PartialSpecResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.obsidian.swagger.SwaggerSpec/GetPartialSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swaggerSpecClient) GetStandaloneSpec(ctx context.Context, in *StandaloneSpecRequest, opts ...grpc.CallOption) (*StandaloneSpecResponse, error) {
	out := new(StandaloneSpecResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.obsidian.swagger.SwaggerSpec/GetStandaloneSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwaggerSpecServer is the server API for SwaggerSpec service.
// All implementations should embed UnimplementedSwaggerSpecServer
// for forward compatibility
type SwaggerSpecServer interface {
	// GetPartialSpec returns partial Swagger specification of the service's REST API.
	GetPartialSpec(context.Context, *PartialSpecRequest) (*PartialSpecResponse, error)
	// GetStandaloneSpec returns a standalone Swagger specification of the
	// service's REST API.
	GetStandaloneSpec(context.Context, *StandaloneSpecRequest) (*StandaloneSpecResponse, error)
}

// UnimplementedSwaggerSpecServer should be embedded to have forward compatible implementations.
type UnimplementedSwaggerSpecServer struct {
}

func (UnimplementedSwaggerSpecServer) GetPartialSpec(context.Context, *PartialSpecRequest) (*PartialSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartialSpec not implemented")
}
func (UnimplementedSwaggerSpecServer) GetStandaloneSpec(context.Context, *StandaloneSpecRequest) (*StandaloneSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStandaloneSpec not implemented")
}

// UnsafeSwaggerSpecServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SwaggerSpecServer will
// result in compilation errors.
type UnsafeSwaggerSpecServer interface {
	mustEmbedUnimplementedSwaggerSpecServer()
}

func RegisterSwaggerSpecServer(s grpc.ServiceRegistrar, srv SwaggerSpecServer) {
	s.RegisterService(&SwaggerSpec_ServiceDesc, srv)
}

func _SwaggerSpec_GetPartialSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartialSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwaggerSpecServer).GetPartialSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.obsidian.swagger.SwaggerSpec/GetPartialSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwaggerSpecServer).GetPartialSpec(ctx, req.(*PartialSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwaggerSpec_GetStandaloneSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StandaloneSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwaggerSpecServer).GetStandaloneSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.obsidian.swagger.SwaggerSpec/GetStandaloneSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwaggerSpecServer).GetStandaloneSpec(ctx, req.(*StandaloneSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SwaggerSpec_ServiceDesc is the grpc.ServiceDesc for SwaggerSpec service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SwaggerSpec_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.obsidian.swagger.SwaggerSpec",
	HandlerType: (*SwaggerSpecServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPartialSpec",
			Handler:    _SwaggerSpec_GetPartialSpec_Handler,
		},
		{
			MethodName: "GetStandaloneSpec",
			Handler:    _SwaggerSpec_GetStandaloneSpec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orc8r/cloud/go/obsidian/swagger/protos/swagger.proto",
}
