// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ImportingDef importing def
// swagger:model importingDef
type ImportingDef struct {

	// bar
	// Required: true
	Bar *BarDef `json:"bar"`

	// baz
	// Required: true
	// Min Length: 1
	Baz *string `json:"baz"`

	// foo
	// Required: true
	Foo *FooDef `json:"foo"`
}

// Validate validates this importing def
func (m *ImportingDef) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBar(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaz(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFoo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImportingDef) validateBar(formats strfmt.Registry) error {

	if err := validate.Required("bar", "body", m.Bar); err != nil {
		return err
	}

	if m.Bar != nil {
		if err := m.Bar.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bar")
			}
			return err
		}
	}

	return nil
}

func (m *ImportingDef) validateBaz(formats strfmt.Registry) error {

	if err := validate.Required("baz", "body", m.Baz); err != nil {
		return err
	}

	if err := validate.MinLength("baz", "body", string(*m.Baz), 1); err != nil {
		return err
	}

	return nil
}

func (m *ImportingDef) validateFoo(formats strfmt.Registry) error {

	if err := validate.Required("foo", "body", m.Foo); err != nil {
		return err
	}

	if m.Foo != nil {
		if err := m.Foo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("foo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ImportingDef) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImportingDef) UnmarshalBinary(b []byte) error {
	var res ImportingDef
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
