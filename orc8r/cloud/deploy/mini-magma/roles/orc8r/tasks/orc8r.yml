---
- name: Install Orc8r
  kubernetes.core.helm:
    name: orc8r
    chart_ref: orc8r/orc8r
    release_namespace: "{{ magma_namespace }}"
    create_namespace: true
    values:

      nms:
        magmalte:
          image:
            repository: "{{ magma_docker_registry }}/magmalte"
            tag: "{{ magma_docker_tag }}"
            pullPolicy: IfNotPresent

          env:
            api_host: orc8r-nginx-proxy
            mysql_host: postgresql
            mysql_user: postgres
            mysql_pass: postgres

        nginx:
          image:
            pullPolicy: IfNotPresent

          service:
            type: "{{ magma_service_type }}"

        secret:
          certs: orc8r-secrets-certs

      nginx:

        replicas: 1

        image:
          repository: "{{ magma_docker_registry }}/nginx"
          tag: "{{ magma_docker_tag }}"

        spec:
          hostname: controller.{{ orc8r_domain }}

        service:
          type: "{{ magma_service_type }}"

      controller:

        replicas: 1

        image:
          repository: "{{ magma_docker_registry }}/controller"
          tag: "{{ magma_docker_tag }}"

        podDisruptionBudget:
          enabled: true

      metrics:
        prometheus:
          includeOrc8rAlerts: true
          create: true

        prometheusCache:
          create: true
          limit: 500000

        prometheusConfigurer:
          create: true

        alertmanager:
          create: true

        alertmanagerConfigurer:
          create: true

        metrics:
          volumes:
            prometheusConfig:
              volumeSpec:
                persistentVolumeClaim:
                  claimName: promcfg
            prometheusData:
              volumeSpec:
                persistentVolumeClaim:
                  claimName: promdata

        userGrafana:
          image:
            tag: 6.7.6

          volumes:
            datasources:
              volumeSpec:
                persistentVolumeClaim:
                  claimName: grafanadatasources

            dashboardproviders:
              volumeSpec:
                persistentVolumeClaim:
                  claimName: grafanaproviders

            dashboards:
              volumeSpec:
                persistentVolumeClaim:
                  claimName: grafanadashboards

            grafanaData:
              volumeSpec:
                persistentVolumeClaim:
                  claimName: grafanadata

      secrets:
        create: true
        docker:
          registry: docker.io
          username: username
          password: password
        secret:
          certs:
            enabled: true
            files:
              rootCA.pem: |
                {{ rootCA_pem['content'] | b64decode }}
              rootCA.key: |
                {{ rootCA_key['content'] | b64decode }}
              controller.crt: |
                {{ controller_crt['content'] | b64decode }}
              controller.key: |
                {{ controller_key['content'] | b64decode }}
              admin_operator.pem: |
                {{ admin_operator_pem['content'] | b64decode }}
              admin_operator.key.pem: |
                {{ admin_operator_key_pem['content'] | b64decode }}
              fluentd.pem: |
                {{ fluentd_pem['content'] | b64decode }}
              fluentd.key: |
                {{ fluentd_key['content'] | b64decode }}
              bootstrapper.key: |
                {{ bootstrapper_key['content'] | b64decode }}
              certifier.key: |
                {{ certifier_key['content'] | b64decode }}
              certifier.pem: |
                {{ certifier_pem['content'] | b64decode }}
              nms_nginx.key.pem: |
                {{ nms_nginx_key_pem['content'] | b64decode }}
              nms_nginx.pem: |
                {{ nms_nginx_pem['content'] | b64decode }}
