// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// SystemStatus system status
// swagger:model system_status
type SystemStatus struct {

	// cpu idle
	CPUIdle uint64 `json:"cpu_idle,omitempty" magma_alt_name:"CpuIdle"`

	// cpu system
	CPUSystem uint64 `json:"cpu_system,omitempty" magma_alt_name:"CpuSystem"`

	// cpu user
	CPUUser uint64 `json:"cpu_user,omitempty" magma_alt_name:"CpuUser"`

	// disk partitions
	DiskPartitions []*DiskPartition `json:"disk_partitions,omitempty"`

	// mem available
	MemAvailable uint64 `json:"mem_available,omitempty"`

	// mem free
	MemFree uint64 `json:"mem_free,omitempty"`

	// mem total
	MemTotal uint64 `json:"mem_total,omitempty"`

	// mem used
	MemUsed uint64 `json:"mem_used,omitempty"`

	// swap free
	SwapFree uint64 `json:"swap_free,omitempty"`

	// swap total
	SwapTotal uint64 `json:"swap_total,omitempty"`

	// swap used
	SwapUsed uint64 `json:"swap_used,omitempty"`

	// time
	Time uint64 `json:"time,omitempty"`

	// uptime secs
	UptimeSecs uint64 `json:"uptime_secs,omitempty"`
}

// Validate validates this system status
func (m *SystemStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiskPartitions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemStatus) validateDiskPartitions(formats strfmt.Registry) error {

	if swag.IsZero(m.DiskPartitions) { // not required
		return nil
	}

	for i := 0; i < len(m.DiskPartitions); i++ {
		if swag.IsZero(m.DiskPartitions[i]) { // not required
			continue
		}

		if m.DiskPartitions[i] != nil {
			if err := m.DiskPartitions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("disk_partitions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SystemStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SystemStatus) UnmarshalBinary(b []byte) error {
	var res SystemStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
