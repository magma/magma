// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RedirectInformation redirect information
// swagger:model redirect_information
type RedirectInformation struct {

	// address type
	// Required: true
	// Enum: [IPv4 IPv6 URL SIP_URI]
	AddressType *string `json:"address_type"`

	// server address
	// Required: true
	ServerAddress *string `json:"server_address"`

	// support
	// Required: true
	// Enum: [DISABLED ENABLED]
	Support *string `json:"support"`
}

// Validate validates this redirect information
func (m *RedirectInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddressType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupport(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var redirectInformationTypeAddressTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IPv4","IPv6","URL","SIP_URI"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		redirectInformationTypeAddressTypePropEnum = append(redirectInformationTypeAddressTypePropEnum, v)
	}
}

const (

	// RedirectInformationAddressTypeIPV4 captures enum value "IPv4"
	RedirectInformationAddressTypeIPV4 string = "IPv4"

	// RedirectInformationAddressTypeIPV6 captures enum value "IPv6"
	RedirectInformationAddressTypeIPV6 string = "IPv6"

	// RedirectInformationAddressTypeURL captures enum value "URL"
	RedirectInformationAddressTypeURL string = "URL"

	// RedirectInformationAddressTypeSIPURI captures enum value "SIP_URI"
	RedirectInformationAddressTypeSIPURI string = "SIP_URI"
)

// prop value enum
func (m *RedirectInformation) validateAddressTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, redirectInformationTypeAddressTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RedirectInformation) validateAddressType(formats strfmt.Registry) error {

	if err := validate.Required("address_type", "body", m.AddressType); err != nil {
		return err
	}

	// value enum
	if err := m.validateAddressTypeEnum("address_type", "body", *m.AddressType); err != nil {
		return err
	}

	return nil
}

func (m *RedirectInformation) validateServerAddress(formats strfmt.Registry) error {

	if err := validate.Required("server_address", "body", m.ServerAddress); err != nil {
		return err
	}

	return nil
}

var redirectInformationTypeSupportPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DISABLED","ENABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		redirectInformationTypeSupportPropEnum = append(redirectInformationTypeSupportPropEnum, v)
	}
}

const (

	// RedirectInformationSupportDISABLED captures enum value "DISABLED"
	RedirectInformationSupportDISABLED string = "DISABLED"

	// RedirectInformationSupportENABLED captures enum value "ENABLED"
	RedirectInformationSupportENABLED string = "ENABLED"
)

// prop value enum
func (m *RedirectInformation) validateSupportEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, redirectInformationTypeSupportPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RedirectInformation) validateSupport(formats strfmt.Registry) error {

	if err := validate.Required("support", "body", m.Support); err != nil {
		return err
	}

	// value enum
	if err := m.validateSupportEnum("support", "body", *m.Support); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RedirectInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RedirectInformation) UnmarshalBinary(b []byte) error {
	var res RedirectInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
