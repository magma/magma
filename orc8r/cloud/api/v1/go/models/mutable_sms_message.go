// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MutableSMSMessage mutable sms message
//
// swagger:model mutable_sms_message
type MutableSMSMessage struct {

	// imsi
	// Required: true
	Imsi SubscriberID `json:"imsi"`

	// message
	// Example: Hello world!
	// Required: true
	// Min Length: 1
	Message string `json:"message"`

	// source msisdn
	// Example: 123456
	// Required: true
	// Min Length: 1
	SourceMsisdn string `json:"source_msisdn"`
}

// Validate validates this mutable sms message
func (m *MutableSMSMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImsi(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceMsisdn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MutableSMSMessage) validateImsi(formats strfmt.Registry) error {

	if err := validate.Required("imsi", "body", SubscriberID(m.Imsi)); err != nil {
		return err
	}

	if err := m.Imsi.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("imsi")
		}
		return err
	}

	return nil
}

func (m *MutableSMSMessage) validateMessage(formats strfmt.Registry) error {

	if err := validate.RequiredString("message", "body", m.Message); err != nil {
		return err
	}

	if err := validate.MinLength("message", "body", m.Message, 1); err != nil {
		return err
	}

	return nil
}

func (m *MutableSMSMessage) validateSourceMsisdn(formats strfmt.Registry) error {

	if err := validate.RequiredString("source_msisdn", "body", m.SourceMsisdn); err != nil {
		return err
	}

	if err := validate.MinLength("source_msisdn", "body", m.SourceMsisdn, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this mutable sms message based on the context it is used
func (m *MutableSMSMessage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateImsi(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MutableSMSMessage) contextValidateImsi(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Imsi.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("imsi")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MutableSMSMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MutableSMSMessage) UnmarshalBinary(b []byte) error {
	var res MutableSMSMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
