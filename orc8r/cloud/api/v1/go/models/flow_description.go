// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FlowDescription flow description
// swagger:model flow_description
type FlowDescription struct {

	// action
	// Required: true
	// Enum: [PERMIT DENY]
	Action *string `json:"action"`

	// match
	// Required: true
	Match *FlowMatch `json:"match"`
}

// Validate validates this flow description
func (m *FlowDescription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatch(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var flowDescriptionTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PERMIT","DENY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		flowDescriptionTypeActionPropEnum = append(flowDescriptionTypeActionPropEnum, v)
	}
}

const (

	// FlowDescriptionActionPERMIT captures enum value "PERMIT"
	FlowDescriptionActionPERMIT string = "PERMIT"

	// FlowDescriptionActionDENY captures enum value "DENY"
	FlowDescriptionActionDENY string = "DENY"
)

// prop value enum
func (m *FlowDescription) validateActionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, flowDescriptionTypeActionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FlowDescription) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	// value enum
	if err := m.validateActionEnum("action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

func (m *FlowDescription) validateMatch(formats strfmt.Registry) error {

	if err := validate.Required("match", "body", m.Match); err != nil {
		return err
	}

	if m.Match != nil {
		if err := m.Match.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("match")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FlowDescription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FlowDescription) UnmarshalBinary(b []byte) error {
	var res FlowDescription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
