// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubscriberIPAllocation An IP address which has been allocated for a subscriber for a specific APN
// swagger:model subscriber_ip_allocation
type SubscriberIPAllocation struct {

	// apn
	// Required: true
	// Min Length: 1
	APN string `json:"apn"`

	// ip
	// Required: true
	// Min Length: 1
	// Format: ipv4
	IP strfmt.IPv4 `json:"ip"`
}

// Validate validates this subscriber ip allocation
func (m *SubscriberIPAllocation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPN(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIP(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubscriberIPAllocation) validateAPN(formats strfmt.Registry) error {

	if err := validate.RequiredString("apn", "body", string(m.APN)); err != nil {
		return err
	}

	if err := validate.MinLength("apn", "body", string(m.APN), 1); err != nil {
		return err
	}

	return nil
}

func (m *SubscriberIPAllocation) validateIP(formats strfmt.Registry) error {

	if err := validate.Required("ip", "body", strfmt.IPv4(m.IP)); err != nil {
		return err
	}

	if err := validate.MinLength("ip", "body", string(m.IP), 1); err != nil {
		return err
	}

	if err := validate.FormatOf("ip", "body", "ipv4", m.IP.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubscriberIPAllocation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubscriberIPAllocation) UnmarshalBinary(b []byte) error {
	var res SubscriberIPAllocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
