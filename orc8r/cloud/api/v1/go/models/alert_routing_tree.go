// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AlertRoutingTree alert routing tree
// swagger:model alert_routing_tree
type AlertRoutingTree struct {

	// continue
	Continue bool `json:"continue,omitempty"`

	// group by
	GroupBy []string `json:"group_by"`

	// group interval
	GroupInterval string `json:"group_interval,omitempty"`

	// group wait
	GroupWait string `json:"group_wait,omitempty"`

	// match
	Match *AlertRoutingTreeMatch `json:"match,omitempty"`

	// match re
	MatchRe *AlertRoutingTreeMatchRe `json:"match_re,omitempty"`

	// receiver
	// Required: true
	Receiver *string `json:"receiver"`

	// repeat interval
	RepeatInterval string `json:"repeat_interval,omitempty"`

	// routes
	Routes []*AlertRoutingTree `json:"routes"`
}

// Validate validates this alert routing tree
func (m *AlertRoutingTree) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchRe(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceiver(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoutes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertRoutingTree) validateMatch(formats strfmt.Registry) error {

	if swag.IsZero(m.Match) { // not required
		return nil
	}

	if m.Match != nil {
		if err := m.Match.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("match")
			}
			return err
		}
	}

	return nil
}

func (m *AlertRoutingTree) validateMatchRe(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchRe) { // not required
		return nil
	}

	if m.MatchRe != nil {
		if err := m.MatchRe.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("match_re")
			}
			return err
		}
	}

	return nil
}

func (m *AlertRoutingTree) validateReceiver(formats strfmt.Registry) error {

	if err := validate.Required("receiver", "body", m.Receiver); err != nil {
		return err
	}

	return nil
}

func (m *AlertRoutingTree) validateRoutes(formats strfmt.Registry) error {

	if swag.IsZero(m.Routes) { // not required
		return nil
	}

	for i := 0; i < len(m.Routes); i++ {
		if swag.IsZero(m.Routes[i]) { // not required
			continue
		}

		if m.Routes[i] != nil {
			if err := m.Routes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("routes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AlertRoutingTree) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AlertRoutingTree) UnmarshalBinary(b []byte) error {
	var res AlertRoutingTree
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AlertRoutingTreeMatch alert routing tree match
// swagger:model AlertRoutingTreeMatch
type AlertRoutingTreeMatch struct {

	// label
	Label string `json:"label,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this alert routing tree match
func (m *AlertRoutingTreeMatch) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AlertRoutingTreeMatch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AlertRoutingTreeMatch) UnmarshalBinary(b []byte) error {
	var res AlertRoutingTreeMatch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AlertRoutingTreeMatchRe alert routing tree match re
// swagger:model AlertRoutingTreeMatchRe
type AlertRoutingTreeMatchRe struct {

	// label
	Label string `json:"label,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this alert routing tree match re
func (m *AlertRoutingTreeMatchRe) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AlertRoutingTreeMatchRe) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AlertRoutingTreeMatchRe) UnmarshalBinary(b []byte) error {
	var res AlertRoutingTreeMatchRe
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
