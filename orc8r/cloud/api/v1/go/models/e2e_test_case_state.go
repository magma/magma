// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// E2eTestCaseState Test case execution state
// swagger:model e2e_test_case_state
type E2eTestCaseState struct {

	// current state
	CurrentState string `json:"current_state,omitempty"`

	// error
	Error string `json:"error,omitempty"`

	// is executing
	// Required: true
	IsExecuting *bool `json:"is_executing"`

	// last execution time
	// Format: date-time
	LastExecutionTime strfmt.DateTime `json:"last_execution_time,omitempty"`

	// next scheduled time
	// Format: date-time
	NextScheduledTime strfmt.DateTime `json:"next_scheduled_time,omitempty"`
}

// Validate validates this e2e test case state
func (m *E2eTestCaseState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIsExecuting(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastExecutionTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextScheduledTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *E2eTestCaseState) validateIsExecuting(formats strfmt.Registry) error {

	if err := validate.Required("is_executing", "body", m.IsExecuting); err != nil {
		return err
	}

	return nil
}

func (m *E2eTestCaseState) validateLastExecutionTime(formats strfmt.Registry) error {

	if swag.IsZero(m.LastExecutionTime) { // not required
		return nil
	}

	if err := validate.FormatOf("last_execution_time", "body", "date-time", m.LastExecutionTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *E2eTestCaseState) validateNextScheduledTime(formats strfmt.Registry) error {

	if swag.IsZero(m.NextScheduledTime) { // not required
		return nil
	}

	if err := validate.FormatOf("next_scheduled_time", "body", "date-time", m.NextScheduledTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *E2eTestCaseState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *E2eTestCaseState) UnmarshalBinary(b []byte) error {
	var res E2eTestCaseState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
