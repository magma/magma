// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetworkFederationConfigs Federation configuration for a network
// swagger:model network_federation_configs
type NetworkFederationConfigs struct {

	// aaa server
	// Required: true
	AaaServer *AaaServer `json:"aaa_server"`

	// csfb
	Csfb *Csfb `json:"csfb,omitempty"`

	// eap aka
	// Required: true
	EapAka *EapAka `json:"eap_aka"`

	// eap sim
	EapSim *EapSim `json:"eap_sim,omitempty"`

	// gx
	// Required: true
	Gx *Gx `json:"gx"`

	// gy
	// Required: true
	Gy *Gy `json:"gy"`

	// health
	// Required: true
	Health *Health `json:"health"`

	// hss
	// Required: true
	Hss *Hss `json:"hss"`

	// nh routes
	NhRoutes NhRoutes `json:"nh_routes,omitempty"`

	// s6a
	// Required: true
	S6a *S6a `json:"s6a"`

	// s8
	S8 *S8 `json:"s8,omitempty"`

	// served network ids
	// Required: true
	ServedNetworkIds ServedNetworkIds `json:"served_network_ids"`

	// served nh ids
	ServedNhIds ServedNhIds `json:"served_nh_ids,omitempty"`

	// swx
	// Required: true
	Swx *Swx `json:"swx"`
}

// Validate validates this network federation configs
func (m *NetworkFederationConfigs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAaaServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCsfb(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEapAka(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEapSim(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGx(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHss(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNhRoutes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateS6a(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateS8(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServedNetworkIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServedNhIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSwx(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkFederationConfigs) validateAaaServer(formats strfmt.Registry) error {

	if err := validate.Required("aaa_server", "body", m.AaaServer); err != nil {
		return err
	}

	if m.AaaServer != nil {
		if err := m.AaaServer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aaa_server")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkFederationConfigs) validateCsfb(formats strfmt.Registry) error {

	if swag.IsZero(m.Csfb) { // not required
		return nil
	}

	if m.Csfb != nil {
		if err := m.Csfb.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("csfb")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkFederationConfigs) validateEapAka(formats strfmt.Registry) error {

	if err := validate.Required("eap_aka", "body", m.EapAka); err != nil {
		return err
	}

	if m.EapAka != nil {
		if err := m.EapAka.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eap_aka")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkFederationConfigs) validateEapSim(formats strfmt.Registry) error {

	if swag.IsZero(m.EapSim) { // not required
		return nil
	}

	if m.EapSim != nil {
		if err := m.EapSim.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eap_sim")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkFederationConfigs) validateGx(formats strfmt.Registry) error {

	if err := validate.Required("gx", "body", m.Gx); err != nil {
		return err
	}

	if m.Gx != nil {
		if err := m.Gx.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gx")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkFederationConfigs) validateGy(formats strfmt.Registry) error {

	if err := validate.Required("gy", "body", m.Gy); err != nil {
		return err
	}

	if m.Gy != nil {
		if err := m.Gy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gy")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkFederationConfigs) validateHealth(formats strfmt.Registry) error {

	if err := validate.Required("health", "body", m.Health); err != nil {
		return err
	}

	if m.Health != nil {
		if err := m.Health.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkFederationConfigs) validateHss(formats strfmt.Registry) error {

	if err := validate.Required("hss", "body", m.Hss); err != nil {
		return err
	}

	if m.Hss != nil {
		if err := m.Hss.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hss")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkFederationConfigs) validateNhRoutes(formats strfmt.Registry) error {

	if swag.IsZero(m.NhRoutes) { // not required
		return nil
	}

	if err := m.NhRoutes.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("nh_routes")
		}
		return err
	}

	return nil
}

func (m *NetworkFederationConfigs) validateS6a(formats strfmt.Registry) error {

	if err := validate.Required("s6a", "body", m.S6a); err != nil {
		return err
	}

	if m.S6a != nil {
		if err := m.S6a.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s6a")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkFederationConfigs) validateS8(formats strfmt.Registry) error {

	if swag.IsZero(m.S8) { // not required
		return nil
	}

	if m.S8 != nil {
		if err := m.S8.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s8")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkFederationConfigs) validateServedNetworkIds(formats strfmt.Registry) error {

	if err := validate.Required("served_network_ids", "body", m.ServedNetworkIds); err != nil {
		return err
	}

	if err := m.ServedNetworkIds.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("served_network_ids")
		}
		return err
	}

	return nil
}

func (m *NetworkFederationConfigs) validateServedNhIds(formats strfmt.Registry) error {

	if swag.IsZero(m.ServedNhIds) { // not required
		return nil
	}

	if err := m.ServedNhIds.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("served_nh_ids")
		}
		return err
	}

	return nil
}

func (m *NetworkFederationConfigs) validateSwx(formats strfmt.Registry) error {

	if err := validate.Required("swx", "body", m.Swx); err != nil {
		return err
	}

	if m.Swx != nil {
		if err := m.Swx.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("swx")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkFederationConfigs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkFederationConfigs) UnmarshalBinary(b []byte) error {
	var res NetworkFederationConfigs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
