// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CellularGatewayPoolRecord Record in a gateway pool
//
// swagger:model cellular_gateway_pool_record
type CellularGatewayPoolRecord struct {

	// gateway pool id
	// Required: true
	GatewayPoolID GatewayPoolID `json:"gateway_pool_id"`

	// mme code
	// Example: 1
	// Required: true
	// Maximum: 65535
	// Minimum: 0
	MmeCode uint32 `json:"mme_code"`

	// mme relative capacity
	// Example: 10
	// Required: true
	// Maximum: 255
	// Minimum: 0
	MmeRelativeCapacity uint32 `json:"mme_relative_capacity"`
}

// Validate validates this cellular gateway pool record
func (m *CellularGatewayPoolRecord) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGatewayPoolID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMmeCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMmeRelativeCapacity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CellularGatewayPoolRecord) validateGatewayPoolID(formats strfmt.Registry) error {

	if err := validate.Required("gateway_pool_id", "body", GatewayPoolID(m.GatewayPoolID)); err != nil {
		return err
	}

	if err := m.GatewayPoolID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("gateway_pool_id")
		}
		return err
	}

	return nil
}

func (m *CellularGatewayPoolRecord) validateMmeCode(formats strfmt.Registry) error {

	if err := validate.Required("mme_code", "body", uint32(m.MmeCode)); err != nil {
		return err
	}

	if err := validate.MinimumUint("mme_code", "body", uint64(m.MmeCode), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumUint("mme_code", "body", uint64(m.MmeCode), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *CellularGatewayPoolRecord) validateMmeRelativeCapacity(formats strfmt.Registry) error {

	if err := validate.Required("mme_relative_capacity", "body", uint32(m.MmeRelativeCapacity)); err != nil {
		return err
	}

	if err := validate.MinimumUint("mme_relative_capacity", "body", uint64(m.MmeRelativeCapacity), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumUint("mme_relative_capacity", "body", uint64(m.MmeRelativeCapacity), 255, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this cellular gateway pool record based on the context it is used
func (m *CellularGatewayPoolRecord) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGatewayPoolID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CellularGatewayPoolRecord) contextValidateGatewayPoolID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.GatewayPoolID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("gateway_pool_id")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CellularGatewayPoolRecord) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CellularGatewayPoolRecord) UnmarshalBinary(b []byte) error {
	var res CellularGatewayPoolRecord
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
