// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PrometheusTargetsMetadata prometheus targets metadata
//
// swagger:model prometheus_targets_metadata
type PrometheusTargetsMetadata struct {

	// help
	// Example: Final number of samples on their first compaction
	// Required: true
	Help *string `json:"help"`

	// metric
	// Example: prometheus_tsdb_compaction_chunk_samples
	// Required: true
	Metric *string `json:"metric"`

	// target
	// Required: true
	Target *PrometheusTargetMetadata `json:"target"`

	// type
	// Example: histogram
	// Required: true
	Type *string `json:"type"`

	// unit
	// Example: string
	// Required: true
	Unit *string `json:"unit"`
}

// Validate validates this prometheus targets metadata
func (m *PrometheusTargetsMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHelp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetric(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrometheusTargetsMetadata) validateHelp(formats strfmt.Registry) error {

	if err := validate.Required("help", "body", m.Help); err != nil {
		return err
	}

	return nil
}

func (m *PrometheusTargetsMetadata) validateMetric(formats strfmt.Registry) error {

	if err := validate.Required("metric", "body", m.Metric); err != nil {
		return err
	}

	return nil
}

func (m *PrometheusTargetsMetadata) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	if m.Target != nil {
		if err := m.Target.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target")
			}
			return err
		}
	}

	return nil
}

func (m *PrometheusTargetsMetadata) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *PrometheusTargetsMetadata) validateUnit(formats strfmt.Registry) error {

	if err := validate.Required("unit", "body", m.Unit); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this prometheus targets metadata based on the context it is used
func (m *PrometheusTargetsMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrometheusTargetsMetadata) contextValidateTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.Target != nil {
		if err := m.Target.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrometheusTargetsMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrometheusTargetsMetadata) UnmarshalBinary(b []byte) error {
	var res PrometheusTargetsMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
