// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChallengeKey challenge key
// swagger:model challenge_key
type ChallengeKey struct {

	// key
	// Format: byte
	Key *strfmt.Base64 `json:"key,omitempty"`

	// key type
	// Required: true
	// Enum: [ECHO SOFTWARE_ECDSA_SHA256]
	KeyType string `json:"key_type"`
}

// Validate validates this challenge key
func (m *ChallengeKey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChallengeKey) validateKey(formats strfmt.Registry) error {

	if swag.IsZero(m.Key) { // not required
		return nil
	}

	// Format "byte" (base64 string) is already validated when unmarshalled

	return nil
}

var challengeKeyTypeKeyTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ECHO","SOFTWARE_ECDSA_SHA256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		challengeKeyTypeKeyTypePropEnum = append(challengeKeyTypeKeyTypePropEnum, v)
	}
}

const (

	// ChallengeKeyKeyTypeECHO captures enum value "ECHO"
	ChallengeKeyKeyTypeECHO string = "ECHO"

	// ChallengeKeyKeyTypeSOFTWAREECDSASHA256 captures enum value "SOFTWARE_ECDSA_SHA256"
	ChallengeKeyKeyTypeSOFTWAREECDSASHA256 string = "SOFTWARE_ECDSA_SHA256"
)

// prop value enum
func (m *ChallengeKey) validateKeyTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, challengeKeyTypeKeyTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ChallengeKey) validateKeyType(formats strfmt.Registry) error {

	if err := validate.RequiredString("key_type", "body", string(m.KeyType)); err != nil {
		return err
	}

	// value enum
	if err := m.validateKeyTypeEnum("key_type", "body", m.KeyType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChallengeKey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChallengeKey) UnmarshalBinary(b []byte) error {
	var res ChallengeKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
