// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LTESubscription lte subscription
// swagger:model lte_subscription
type LTESubscription struct {

	// auth algo
	// Required: true
	// Enum: [MILENAGE]
	AuthAlgo string `json:"auth_algo"`

	// auth key
	// Required: true
	// Format: byte
	AuthKey strfmt.Base64 `json:"auth_key"`

	// auth opc
	// Format: byte
	AuthOpc strfmt.Base64 `json:"auth_opc,omitempty"`

	// state
	// Required: true
	// Enum: [INACTIVE ACTIVE]
	State string `json:"state"`

	// sub profile
	// Required: true
	SubProfile SubProfile `json:"sub_profile"`
}

// Validate validates this lte subscription
func (m *LTESubscription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthAlgo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthOpc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubProfile(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var lteSubscriptionTypeAuthAlgoPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MILENAGE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lteSubscriptionTypeAuthAlgoPropEnum = append(lteSubscriptionTypeAuthAlgoPropEnum, v)
	}
}

const (

	// LTESubscriptionAuthAlgoMILENAGE captures enum value "MILENAGE"
	LTESubscriptionAuthAlgoMILENAGE string = "MILENAGE"
)

// prop value enum
func (m *LTESubscription) validateAuthAlgoEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, lteSubscriptionTypeAuthAlgoPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LTESubscription) validateAuthAlgo(formats strfmt.Registry) error {

	if err := validate.RequiredString("auth_algo", "body", string(m.AuthAlgo)); err != nil {
		return err
	}

	// value enum
	if err := m.validateAuthAlgoEnum("auth_algo", "body", m.AuthAlgo); err != nil {
		return err
	}

	return nil
}

func (m *LTESubscription) validateAuthKey(formats strfmt.Registry) error {

	if err := validate.Required("auth_key", "body", strfmt.Base64(m.AuthKey)); err != nil {
		return err
	}

	// Format "byte" (base64 string) is already validated when unmarshalled

	return nil
}

func (m *LTESubscription) validateAuthOpc(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthOpc) { // not required
		return nil
	}

	// Format "byte" (base64 string) is already validated when unmarshalled

	return nil
}

var lteSubscriptionTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INACTIVE","ACTIVE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lteSubscriptionTypeStatePropEnum = append(lteSubscriptionTypeStatePropEnum, v)
	}
}

const (

	// LTESubscriptionStateINACTIVE captures enum value "INACTIVE"
	LTESubscriptionStateINACTIVE string = "INACTIVE"

	// LTESubscriptionStateACTIVE captures enum value "ACTIVE"
	LTESubscriptionStateACTIVE string = "ACTIVE"
)

// prop value enum
func (m *LTESubscription) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, lteSubscriptionTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LTESubscription) validateState(formats strfmt.Registry) error {

	if err := validate.RequiredString("state", "body", string(m.State)); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *LTESubscription) validateSubProfile(formats strfmt.Registry) error {

	if err := m.SubProfile.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sub_profile")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LTESubscription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LTESubscription) UnmarshalBinary(b []byte) error {
	var res LTESubscription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
