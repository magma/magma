// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SlackAction slack action
// swagger:model slack_action
type SlackAction struct {

	// confirm
	Confirm *SlackConfirmField `json:"confirm,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// style
	Style string `json:"style,omitempty"`

	// text
	// Required: true
	Text *string `json:"text"`

	// type
	// Required: true
	Type *string `json:"type"`

	// url
	// Required: true
	URL *string `json:"url"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this slack action
func (m *SlackAction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfirm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateText(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SlackAction) validateConfirm(formats strfmt.Registry) error {

	if swag.IsZero(m.Confirm) { // not required
		return nil
	}

	if m.Confirm != nil {
		if err := m.Confirm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("confirm")
			}
			return err
		}
	}

	return nil
}

func (m *SlackAction) validateText(formats strfmt.Registry) error {

	if err := validate.Required("text", "body", m.Text); err != nil {
		return err
	}

	return nil
}

func (m *SlackAction) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *SlackAction) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SlackAction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SlackAction) UnmarshalBinary(b []byte) error {
	var res SlackAction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
