// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LTEGateway Full description of an LTE gateway
// swagger:model lte_gateway
type LTEGateway struct {

	// apn resources
	APNResources APNResources `json:"apn_resources,omitempty"`

	// cellular
	// Required: true
	Cellular *GatewayCellularConfigs `json:"cellular"`

	// connected enodeb serials
	// Required: true
	ConnectedENODEBSerials ENODEBSerials `json:"connected_enodeb_serials"`

	// description
	// Required: true
	Description GatewayDescription `json:"description"`

	// device
	// Required: true
	Device *GatewayDevice `json:"device"`

	// id
	// Required: true
	ID GatewayID `json:"id"`

	// magmad
	// Required: true
	Magmad *MagmadGatewayConfigs `json:"magmad"`

	// name
	// Required: true
	Name GatewayName `json:"name"`

	// status
	Status *GatewayStatus `json:"status,omitempty"`

	// tier
	// Required: true
	Tier TierID `json:"tier"`
}

// Validate validates this lte gateway
func (m *LTEGateway) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPNResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCellular(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectedENODEBSerials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMagmad(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LTEGateway) validateAPNResources(formats strfmt.Registry) error {

	if swag.IsZero(m.APNResources) { // not required
		return nil
	}

	if err := m.APNResources.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("apn_resources")
		}
		return err
	}

	return nil
}

func (m *LTEGateway) validateCellular(formats strfmt.Registry) error {

	if err := validate.Required("cellular", "body", m.Cellular); err != nil {
		return err
	}

	if m.Cellular != nil {
		if err := m.Cellular.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cellular")
			}
			return err
		}
	}

	return nil
}

func (m *LTEGateway) validateConnectedENODEBSerials(formats strfmt.Registry) error {

	if err := validate.Required("connected_enodeb_serials", "body", m.ConnectedENODEBSerials); err != nil {
		return err
	}

	if err := m.ConnectedENODEBSerials.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("connected_enodeb_serials")
		}
		return err
	}

	return nil
}

func (m *LTEGateway) validateDescription(formats strfmt.Registry) error {

	if err := m.Description.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("description")
		}
		return err
	}

	return nil
}

func (m *LTEGateway) validateDevice(formats strfmt.Registry) error {

	if err := validate.Required("device", "body", m.Device); err != nil {
		return err
	}

	if m.Device != nil {
		if err := m.Device.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device")
			}
			return err
		}
	}

	return nil
}

func (m *LTEGateway) validateID(formats strfmt.Registry) error {

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *LTEGateway) validateMagmad(formats strfmt.Registry) error {

	if err := validate.Required("magmad", "body", m.Magmad); err != nil {
		return err
	}

	if m.Magmad != nil {
		if err := m.Magmad.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("magmad")
			}
			return err
		}
	}

	return nil
}

func (m *LTEGateway) validateName(formats strfmt.Registry) error {

	if err := m.Name.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("name")
		}
		return err
	}

	return nil
}

func (m *LTEGateway) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *LTEGateway) validateTier(formats strfmt.Registry) error {

	if err := m.Tier.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tier")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LTEGateway) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LTEGateway) UnmarshalBinary(b []byte) error {
	var res LTEGateway
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
