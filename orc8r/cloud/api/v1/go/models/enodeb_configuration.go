// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ENODEBConfiguration Configuration for an enodeB. Unfilled fields will be inherited from LTE network and gateway configuration.
//
// swagger:model enodeb_configuration
type ENODEBConfiguration struct {

	// bandwidth mhz
	// Example: 20
	// Enum: [3 5 10 15 20]
	BandwidthMhz uint32 `json:"bandwidth_mhz,omitempty"`

	// cell id
	// Example: 138777000
	// Required: true
	// Maximum: 2.68435455e+08
	CellID *uint32 `json:"cell_id"`

	// device class
	// Example: Baicells ID TDD/FDD
	// Required: true
	// Enum: [Baicells Nova-233 G2 OD FDD Baicells Nova-243 OD TDD Baicells Neutrino 224 ID FDD Baicells ID TDD/FDD NuRAN Cavium OC-LTE]
	DeviceClass string `json:"device_class"`

	// earfcndl
	// Example: 44590
	Earfcndl uint32 `json:"earfcndl,omitempty"`

	// pci
	// Example: 260
	// Maximum: 503
	// Minimum: > 0
	Pci uint32 `json:"pci,omitempty"`

	// special subframe pattern
	// Example: 7
	// Maximum: 9
	SpecialSubframePattern uint32 `json:"special_subframe_pattern,omitempty"`

	// subframe assignment
	// Example: 2
	// Maximum: 6
	SubframeAssignment uint32 `json:"subframe_assignment,omitempty"`

	// tac
	// Example: 1
	// Maximum: 65535
	// Minimum: 1
	Tac uint32 `json:"tac,omitempty"`

	// transmit enabled
	// Example: true
	// Required: true
	TransmitEnabled *bool `json:"transmit_enabled"`
}

// Validate validates this enodeb configuration
func (m *ENODEBConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBandwidthMhz(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCellID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePci(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpecialSubframePattern(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubframeAssignment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTac(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransmitEnabled(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var enodebConfigurationTypeBandwidthMhzPropEnum []interface{}

func init() {
	var res []uint32
	if err := json.Unmarshal([]byte(`[3,5,10,15,20]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		enodebConfigurationTypeBandwidthMhzPropEnum = append(enodebConfigurationTypeBandwidthMhzPropEnum, v)
	}
}

// prop value enum
func (m *ENODEBConfiguration) validateBandwidthMhzEnum(path, location string, value uint32) error {
	if err := validate.EnumCase(path, location, value, enodebConfigurationTypeBandwidthMhzPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ENODEBConfiguration) validateBandwidthMhz(formats strfmt.Registry) error {
	if swag.IsZero(m.BandwidthMhz) { // not required
		return nil
	}

	// value enum
	if err := m.validateBandwidthMhzEnum("bandwidth_mhz", "body", m.BandwidthMhz); err != nil {
		return err
	}

	return nil
}

func (m *ENODEBConfiguration) validateCellID(formats strfmt.Registry) error {

	if err := validate.Required("cell_id", "body", m.CellID); err != nil {
		return err
	}

	if err := validate.MaximumUint("cell_id", "body", uint64(*m.CellID), 2.68435455e+08, false); err != nil {
		return err
	}

	return nil
}

var enodebConfigurationTypeDeviceClassPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Baicells Nova-233 G2 OD FDD","Baicells Nova-243 OD TDD","Baicells Neutrino 224 ID FDD","Baicells ID TDD/FDD","NuRAN Cavium OC-LTE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		enodebConfigurationTypeDeviceClassPropEnum = append(enodebConfigurationTypeDeviceClassPropEnum, v)
	}
}

const (

	// ENODEBConfigurationDeviceClassBaicellsNovaDash233G2ODFDD captures enum value "Baicells Nova-233 G2 OD FDD"
	ENODEBConfigurationDeviceClassBaicellsNovaDash233G2ODFDD string = "Baicells Nova-233 G2 OD FDD"

	// ENODEBConfigurationDeviceClassBaicellsNovaDash243ODTDD captures enum value "Baicells Nova-243 OD TDD"
	ENODEBConfigurationDeviceClassBaicellsNovaDash243ODTDD string = "Baicells Nova-243 OD TDD"

	// ENODEBConfigurationDeviceClassBaicellsNeutrino224IDFDD captures enum value "Baicells Neutrino 224 ID FDD"
	ENODEBConfigurationDeviceClassBaicellsNeutrino224IDFDD string = "Baicells Neutrino 224 ID FDD"

	// ENODEBConfigurationDeviceClassBaicellsIDTDDFDD captures enum value "Baicells ID TDD/FDD"
	ENODEBConfigurationDeviceClassBaicellsIDTDDFDD string = "Baicells ID TDD/FDD"

	// ENODEBConfigurationDeviceClassNuRANCaviumOCDashLTE captures enum value "NuRAN Cavium OC-LTE"
	ENODEBConfigurationDeviceClassNuRANCaviumOCDashLTE string = "NuRAN Cavium OC-LTE"
)

// prop value enum
func (m *ENODEBConfiguration) validateDeviceClassEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, enodebConfigurationTypeDeviceClassPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ENODEBConfiguration) validateDeviceClass(formats strfmt.Registry) error {

	if err := validate.RequiredString("device_class", "body", m.DeviceClass); err != nil {
		return err
	}

	// value enum
	if err := m.validateDeviceClassEnum("device_class", "body", m.DeviceClass); err != nil {
		return err
	}

	return nil
}

func (m *ENODEBConfiguration) validatePci(formats strfmt.Registry) error {
	if swag.IsZero(m.Pci) { // not required
		return nil
	}

	if err := validate.MinimumUint("pci", "body", uint64(m.Pci), 0, true); err != nil {
		return err
	}

	if err := validate.MaximumUint("pci", "body", uint64(m.Pci), 503, false); err != nil {
		return err
	}

	return nil
}

func (m *ENODEBConfiguration) validateSpecialSubframePattern(formats strfmt.Registry) error {
	if swag.IsZero(m.SpecialSubframePattern) { // not required
		return nil
	}

	if err := validate.MaximumUint("special_subframe_pattern", "body", uint64(m.SpecialSubframePattern), 9, false); err != nil {
		return err
	}

	return nil
}

func (m *ENODEBConfiguration) validateSubframeAssignment(formats strfmt.Registry) error {
	if swag.IsZero(m.SubframeAssignment) { // not required
		return nil
	}

	if err := validate.MaximumUint("subframe_assignment", "body", uint64(m.SubframeAssignment), 6, false); err != nil {
		return err
	}

	return nil
}

func (m *ENODEBConfiguration) validateTac(formats strfmt.Registry) error {
	if swag.IsZero(m.Tac) { // not required
		return nil
	}

	if err := validate.MinimumUint("tac", "body", uint64(m.Tac), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumUint("tac", "body", uint64(m.Tac), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *ENODEBConfiguration) validateTransmitEnabled(formats strfmt.Registry) error {

	if err := validate.Required("transmit_enabled", "body", m.TransmitEnabled); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this enodeb configuration based on context it is used
func (m *ENODEBConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ENODEBConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ENODEBConfiguration) UnmarshalBinary(b []byte) error {
	var res ENODEBConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
