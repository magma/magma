// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LiUes li ues
// swagger:model li_ues
type LiUes struct {

	// imsis
	// Required: true
	Imsis []string `json:"imsis"`

	// ips
	// Required: true
	Ips []string `json:"ips"`

	// macs
	// Required: true
	Macs []string `json:"macs"`

	// msisdns
	// Required: true
	Msisdns []string `json:"msisdns"`
}

// Validate validates this li ues
func (m *LiUes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImsis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMacs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMsisdns(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LiUes) validateImsis(formats strfmt.Registry) error {

	if err := validate.Required("imsis", "body", m.Imsis); err != nil {
		return err
	}

	return nil
}

func (m *LiUes) validateIps(formats strfmt.Registry) error {

	if err := validate.Required("ips", "body", m.Ips); err != nil {
		return err
	}

	return nil
}

func (m *LiUes) validateMacs(formats strfmt.Registry) error {

	if err := validate.Required("macs", "body", m.Macs); err != nil {
		return err
	}

	return nil
}

func (m *LiUes) validateMsisdns(formats strfmt.Registry) error {

	if err := validate.Required("msisdns", "body", m.Msisdns); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LiUes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LiUes) UnmarshalBinary(b []byte) error {
	var res LiUes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
