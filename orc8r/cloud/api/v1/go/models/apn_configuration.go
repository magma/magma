// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APNConfiguration apn configuration
// swagger:model apn_configuration
type APNConfiguration struct {

	// ambr
	// Required: true
	Ambr *AggregatedMaximumBitrate `json:"ambr"`

	// qos profile
	// Required: true
	QosProfile *QosProfile `json:"qos_profile"`
}

// Validate validates this apn configuration
func (m *APNConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQosProfile(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APNConfiguration) validateAmbr(formats strfmt.Registry) error {

	if err := validate.Required("ambr", "body", m.Ambr); err != nil {
		return err
	}

	if m.Ambr != nil {
		if err := m.Ambr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ambr")
			}
			return err
		}
	}

	return nil
}

func (m *APNConfiguration) validateQosProfile(formats strfmt.Registry) error {

	if err := validate.Required("qos_profile", "body", m.QosProfile); err != nil {
		return err
	}

	if m.QosProfile != nil {
		if err := m.QosProfile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qos_profile")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APNConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APNConfiguration) UnmarshalBinary(b []byte) error {
	var res APNConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
