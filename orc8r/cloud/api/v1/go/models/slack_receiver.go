// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SlackReceiver slack receiver
// swagger:model slack_receiver
type SlackReceiver struct {

	// actions
	Actions []*SlackAction `json:"actions"`

	// api url
	// Required: true
	APIURL *string `json:"api_url"`

	// callback id
	CallbackID string `json:"callback_id,omitempty"`

	// channel
	Channel string `json:"channel,omitempty"`

	// color
	Color string `json:"color,omitempty"`

	// fallback
	Fallback string `json:"fallback,omitempty"`

	// fields
	Fields []*SlackField `json:"fields"`

	// footer
	Footer string `json:"footer,omitempty"`

	// icon emoji
	IconEmoji string `json:"icon_emoji,omitempty"`

	// icon url
	IconURL string `json:"icon_url,omitempty"`

	// image url
	ImageURL string `json:"image_url,omitempty"`

	// link names
	LinkNames bool `json:"link_names,omitempty"`

	// pretext
	Pretext string `json:"pretext,omitempty"`

	// short fields
	ShortFields bool `json:"short_fields,omitempty"`

	// text
	Text string `json:"text,omitempty"`

	// thumb url
	ThumbURL string `json:"thumb_url,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this slack receiver
func (m *SlackReceiver) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAPIURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SlackReceiver) validateActions(formats strfmt.Registry) error {

	if swag.IsZero(m.Actions) { // not required
		return nil
	}

	for i := 0; i < len(m.Actions); i++ {
		if swag.IsZero(m.Actions[i]) { // not required
			continue
		}

		if m.Actions[i] != nil {
			if err := m.Actions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SlackReceiver) validateAPIURL(formats strfmt.Registry) error {

	if err := validate.Required("api_url", "body", m.APIURL); err != nil {
		return err
	}

	return nil
}

func (m *SlackReceiver) validateFields(formats strfmt.Registry) error {

	if swag.IsZero(m.Fields) { // not required
		return nil
	}

	for i := 0; i < len(m.Fields); i++ {
		if swag.IsZero(m.Fields[i]) { // not required
			continue
		}

		if m.Fields[i] != nil {
			if err := m.Fields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SlackReceiver) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SlackReceiver) UnmarshalBinary(b []byte) error {
	var res SlackReceiver
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
