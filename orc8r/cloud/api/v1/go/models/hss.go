// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Hss HSS configuration
// swagger:model hss
type Hss struct {

	// default sub profile
	DefaultSubProfile *SubscriptionProfile `json:"default_sub_profile,omitempty"`

	// lte auth amf
	// Format: byte
	LTEAuthAmf strfmt.Base64 `json:"lte_auth_amf,omitempty"`

	// lte auth op
	// Format: byte
	LTEAuthOp strfmt.Base64 `json:"lte_auth_op,omitempty"`

	// server
	Server *DiameterServerConfigs `json:"server,omitempty"`

	// stream subscribers
	StreamSubscribers bool `json:"stream_subscribers,omitempty"`

	// sub profiles
	SubProfiles map[string]SubscriptionProfile `json:"sub_profiles,omitempty"`
}

// Validate validates this hss
func (m *Hss) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultSubProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLTEAuthAmf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLTEAuthOp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubProfiles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Hss) validateDefaultSubProfile(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultSubProfile) { // not required
		return nil
	}

	if m.DefaultSubProfile != nil {
		if err := m.DefaultSubProfile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("default_sub_profile")
			}
			return err
		}
	}

	return nil
}

func (m *Hss) validateLTEAuthAmf(formats strfmt.Registry) error {

	if swag.IsZero(m.LTEAuthAmf) { // not required
		return nil
	}

	// Format "byte" (base64 string) is already validated when unmarshalled

	return nil
}

func (m *Hss) validateLTEAuthOp(formats strfmt.Registry) error {

	if swag.IsZero(m.LTEAuthOp) { // not required
		return nil
	}

	// Format "byte" (base64 string) is already validated when unmarshalled

	return nil
}

func (m *Hss) validateServer(formats strfmt.Registry) error {

	if swag.IsZero(m.Server) { // not required
		return nil
	}

	if m.Server != nil {
		if err := m.Server.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("server")
			}
			return err
		}
	}

	return nil
}

func (m *Hss) validateSubProfiles(formats strfmt.Registry) error {

	if swag.IsZero(m.SubProfiles) { // not required
		return nil
	}

	for k := range m.SubProfiles {

		if err := validate.Required("sub_profiles"+"."+k, "body", m.SubProfiles[k]); err != nil {
			return err
		}
		if val, ok := m.SubProfiles[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Hss) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Hss) UnmarshalBinary(b []byte) error {
	var res Hss
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
