// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GatewayDevice Information about the physical device corresponding to a gateway
// swagger:model gateway_device
type GatewayDevice struct {

	// hardware id
	// Required: true
	// Min Length: 1
	HardwareID string `json:"hardware_id"`

	// key
	// Required: true
	Key *ChallengeKey `json:"key"`
}

// Validate validates this gateway device
func (m *GatewayDevice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHardwareID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GatewayDevice) validateHardwareID(formats strfmt.Registry) error {

	if err := validate.RequiredString("hardware_id", "body", string(m.HardwareID)); err != nil {
		return err
	}

	if err := validate.MinLength("hardware_id", "body", string(m.HardwareID), 1); err != nil {
		return err
	}

	return nil
}

func (m *GatewayDevice) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	if m.Key != nil {
		if err := m.Key.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("key")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GatewayDevice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GatewayDevice) UnmarshalBinary(b []byte) error {
	var res GatewayDevice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
