// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetworkProbeData Network Probe State
// swagger:model network_probe_data
type NetworkProbeData struct {

	// The timestamp in ISO 8601 format of last exported record
	// Required: true
	// Format: date-time
	LastExported strfmt.DateTime `json:"last_exported"`

	// sequence number
	// Required: true
	SequenceNumber uint32 `json:"sequence_number"`

	// target id
	// Required: true
	TargetID string `json:"target_id"`
}

// Validate validates this network probe data
func (m *NetworkProbeData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastExported(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSequenceNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkProbeData) validateLastExported(formats strfmt.Registry) error {

	if err := validate.Required("last_exported", "body", strfmt.DateTime(m.LastExported)); err != nil {
		return err
	}

	if err := validate.FormatOf("last_exported", "body", "date-time", m.LastExported.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NetworkProbeData) validateSequenceNumber(formats strfmt.Registry) error {

	if err := validate.Required("sequence_number", "body", uint32(m.SequenceNumber)); err != nil {
		return err
	}

	return nil
}

func (m *NetworkProbeData) validateTargetID(formats strfmt.Registry) error {

	if err := validate.RequiredString("target_id", "body", string(m.TargetID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkProbeData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkProbeData) UnmarshalBinary(b []byte) error {
	var res NetworkProbeData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
