// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DiameterServerConfigs Diameter Configuration of The Server
// swagger:model diameter_server_configs
type DiameterServerConfigs struct {

	// address
	// Pattern: [^\:]+(:[0-9]{1,5})?
	Address string `json:"address,omitempty"`

	// dest host
	DestHost string `json:"dest_host,omitempty"`

	// dest realm
	DestRealm string `json:"dest_realm,omitempty"`

	// local address
	// Pattern: [0-9a-f\:\.]*(:[0-9]{1,5})?
	LocalAddress string `json:"local_address,omitempty"`

	// protocol
	// Enum: [tcp tcp4 tcp6 sctp sctp4 sctp6]
	Protocol string `json:"protocol,omitempty"`
}

// Validate validates this diameter server configs
func (m *DiameterServerConfigs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DiameterServerConfigs) validateAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if err := validate.Pattern("address", "body", string(m.Address), `[^\:]+(:[0-9]{1,5})?`); err != nil {
		return err
	}

	return nil
}

func (m *DiameterServerConfigs) validateLocalAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.LocalAddress) { // not required
		return nil
	}

	if err := validate.Pattern("local_address", "body", string(m.LocalAddress), `[0-9a-f\:\.]*(:[0-9]{1,5})?`); err != nil {
		return err
	}

	return nil
}

var diameterServerConfigsTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["tcp","tcp4","tcp6","sctp","sctp4","sctp6"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		diameterServerConfigsTypeProtocolPropEnum = append(diameterServerConfigsTypeProtocolPropEnum, v)
	}
}

const (

	// DiameterServerConfigsProtocolTCP captures enum value "tcp"
	DiameterServerConfigsProtocolTCP string = "tcp"

	// DiameterServerConfigsProtocolTcp4 captures enum value "tcp4"
	DiameterServerConfigsProtocolTcp4 string = "tcp4"

	// DiameterServerConfigsProtocolTcp6 captures enum value "tcp6"
	DiameterServerConfigsProtocolTcp6 string = "tcp6"

	// DiameterServerConfigsProtocolSctp captures enum value "sctp"
	DiameterServerConfigsProtocolSctp string = "sctp"

	// DiameterServerConfigsProtocolSctp4 captures enum value "sctp4"
	DiameterServerConfigsProtocolSctp4 string = "sctp4"

	// DiameterServerConfigsProtocolSctp6 captures enum value "sctp6"
	DiameterServerConfigsProtocolSctp6 string = "sctp6"
)

// prop value enum
func (m *DiameterServerConfigs) validateProtocolEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, diameterServerConfigsTypeProtocolPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DiameterServerConfigs) validateProtocol(formats strfmt.Registry) error {

	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DiameterServerConfigs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DiameterServerConfigs) UnmarshalBinary(b []byte) error {
	var res DiameterServerConfigs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
