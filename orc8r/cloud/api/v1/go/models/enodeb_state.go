// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ENODEBState Single Enodeb State
// swagger:model enodeb_state
type ENODEBState struct {

	// enodeb configured
	// Required: true
	ENODEBConfigured *bool `json:"enodeb_configured"`

	// enodeb connected
	// Required: true
	ENODEBConnected *bool `json:"enodeb_connected"`

	// fsm state
	// Required: true
	FsmState *string `json:"fsm_state"`

	// gps connected
	// Required: true
	GpsConnected *bool `json:"gps_connected"`

	// gps latitude
	// Required: true
	GpsLatitude *string `json:"gps_latitude"`

	// gps longitude
	// Required: true
	GpsLongitude *string `json:"gps_longitude"`

	// ip address
	// Format: ipv4
	IPAddress strfmt.IPv4 `json:"ip_address,omitempty"`

	// mme connected
	// Required: true
	MmeConnected *bool `json:"mme_connected"`

	// opstate enabled
	// Required: true
	OpstateEnabled *bool `json:"opstate_enabled"`

	// ptp connected
	// Required: true
	PtpConnected *bool `json:"ptp_connected"`

	// Gateway ID from which the enodeb state was reported
	ReportingGatewayID string `json:"reporting_gateway_id,omitempty"`

	// rf tx desired
	// Required: true
	RfTxDesired *bool `json:"rf_tx_desired"`

	// rf tx on
	// Required: true
	RfTxOn *bool `json:"rf_tx_on"`

	// Time at which the state was reported in ms
	TimeReported uint64 `json:"time_reported,omitempty"`

	// ues connected
	UesConnected int32 `json:"ues_connected,omitempty"`
}

// Validate validates this enodeb state
func (m *ENODEBState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateENODEBConfigured(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateENODEBConnected(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFsmState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpsConnected(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpsLatitude(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpsLongitude(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMmeConnected(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpstateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePtpConnected(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRfTxDesired(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRfTxOn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ENODEBState) validateENODEBConfigured(formats strfmt.Registry) error {

	if err := validate.Required("enodeb_configured", "body", m.ENODEBConfigured); err != nil {
		return err
	}

	return nil
}

func (m *ENODEBState) validateENODEBConnected(formats strfmt.Registry) error {

	if err := validate.Required("enodeb_connected", "body", m.ENODEBConnected); err != nil {
		return err
	}

	return nil
}

func (m *ENODEBState) validateFsmState(formats strfmt.Registry) error {

	if err := validate.Required("fsm_state", "body", m.FsmState); err != nil {
		return err
	}

	return nil
}

func (m *ENODEBState) validateGpsConnected(formats strfmt.Registry) error {

	if err := validate.Required("gps_connected", "body", m.GpsConnected); err != nil {
		return err
	}

	return nil
}

func (m *ENODEBState) validateGpsLatitude(formats strfmt.Registry) error {

	if err := validate.Required("gps_latitude", "body", m.GpsLatitude); err != nil {
		return err
	}

	return nil
}

func (m *ENODEBState) validateGpsLongitude(formats strfmt.Registry) error {

	if err := validate.Required("gps_longitude", "body", m.GpsLongitude); err != nil {
		return err
	}

	return nil
}

func (m *ENODEBState) validateIPAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.IPAddress) { // not required
		return nil
	}

	if err := validate.FormatOf("ip_address", "body", "ipv4", m.IPAddress.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ENODEBState) validateMmeConnected(formats strfmt.Registry) error {

	if err := validate.Required("mme_connected", "body", m.MmeConnected); err != nil {
		return err
	}

	return nil
}

func (m *ENODEBState) validateOpstateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("opstate_enabled", "body", m.OpstateEnabled); err != nil {
		return err
	}

	return nil
}

func (m *ENODEBState) validatePtpConnected(formats strfmt.Registry) error {

	if err := validate.Required("ptp_connected", "body", m.PtpConnected); err != nil {
		return err
	}

	return nil
}

func (m *ENODEBState) validateRfTxDesired(formats strfmt.Registry) error {

	if err := validate.Required("rf_tx_desired", "body", m.RfTxDesired); err != nil {
		return err
	}

	return nil
}

func (m *ENODEBState) validateRfTxOn(formats strfmt.Registry) error {

	if err := validate.Required("rf_tx_on", "body", m.RfTxOn); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ENODEBState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ENODEBState) UnmarshalBinary(b []byte) error {
	var res ENODEBState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
