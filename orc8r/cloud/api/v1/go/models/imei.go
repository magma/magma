// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Imei IMEI (type allocation code and serial number)
// swagger:model imei
type Imei struct {

	// snr
	// Pattern: ^(\d{6})$
	Snr string `json:"snr,omitempty"`

	// tac
	// Required: true
	// Pattern: ^(\d{8})$
	Tac string `json:"tac"`
}

// Validate validates this imei
func (m *Imei) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSnr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTac(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Imei) validateSnr(formats strfmt.Registry) error {

	if swag.IsZero(m.Snr) { // not required
		return nil
	}

	if err := validate.Pattern("snr", "body", string(m.Snr), `^(\d{6})$`); err != nil {
		return err
	}

	return nil
}

func (m *Imei) validateTac(formats strfmt.Registry) error {

	if err := validate.RequiredString("tac", "body", string(m.Tac)); err != nil {
		return err
	}

	if err := validate.Pattern("tac", "body", string(m.Tac), `^(\d{8})$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Imei) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Imei) UnmarshalBinary(b []byte) error {
	var res Imei
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
