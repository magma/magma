// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ElasticHit elastic hit
// swagger:model elastic_hit
type ElasticHit struct {

	// id
	// Required: true
	ID *string `json:"_id"`

	// index
	// Required: true
	Index *string `json:"_index"`

	// primary term
	PrimaryTerm string `json:"_primary_term,omitempty"`

	// score
	Score float64 `json:"_score,omitempty"`

	// seq no
	SeqNo float64 `json:"_seq_no,omitempty"`

	// sort
	Sort []float64 `json:"_sort"`

	// source
	// Required: true
	Source map[string]string `json:"_source"`

	// type
	// Required: true
	Type *string `json:"_type"`
}

// Validate validates this elastic hit
func (m *ElasticHit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ElasticHit) validateID(formats strfmt.Registry) error {

	if err := validate.Required("_id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ElasticHit) validateIndex(formats strfmt.Registry) error {

	if err := validate.Required("_index", "body", m.Index); err != nil {
		return err
	}

	return nil
}

func (m *ElasticHit) validateSource(formats strfmt.Registry) error {

	return nil
}

func (m *ElasticHit) validateType(formats strfmt.Registry) error {

	if err := validate.Required("_type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ElasticHit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ElasticHit) UnmarshalBinary(b []byte) error {
	var res ElasticHit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
