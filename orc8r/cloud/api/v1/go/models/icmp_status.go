// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IcmpStatus ICMP status of a subscriber device
// swagger:model icmp_status
type IcmpStatus struct {

	// Timestamp of last reported status for the subscriber in ms
	LastReportedTime int64 `json:"last_reported_time,omitempty"`

	// latency ms
	// Required: true
	LatencyMs *float32 `json:"latency_ms"`
}

// Validate validates this icmp status
func (m *IcmpStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLatencyMs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IcmpStatus) validateLatencyMs(formats strfmt.Registry) error {

	if err := validate.Required("latency_ms", "body", m.LatencyMs); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IcmpStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IcmpStatus) UnmarshalBinary(b []byte) error {
	var res IcmpStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
