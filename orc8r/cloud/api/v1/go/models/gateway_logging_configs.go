// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GatewayLoggingConfigs Configuration for gateway logging (local and aggregation configs)
// swagger:model gateway_logging_configs
type GatewayLoggingConfigs struct {

	// aggregation
	Aggregation *AggregationLoggingConfigs `json:"aggregation,omitempty"`

	// event verbosity
	EventVerbosity *int32 `json:"event_verbosity,omitempty"`

	// log level
	// Required: true
	// Enum: [DEBUG INFO WARNING ERROR FATAL]
	LogLevel *string `json:"log_level"`
}

// Validate validates this gateway logging configs
func (m *GatewayLoggingConfigs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAggregation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GatewayLoggingConfigs) validateAggregation(formats strfmt.Registry) error {

	if swag.IsZero(m.Aggregation) { // not required
		return nil
	}

	if m.Aggregation != nil {
		if err := m.Aggregation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aggregation")
			}
			return err
		}
	}

	return nil
}

var gatewayLoggingConfigsTypeLogLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DEBUG","INFO","WARNING","ERROR","FATAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gatewayLoggingConfigsTypeLogLevelPropEnum = append(gatewayLoggingConfigsTypeLogLevelPropEnum, v)
	}
}

const (

	// GatewayLoggingConfigsLogLevelDEBUG captures enum value "DEBUG"
	GatewayLoggingConfigsLogLevelDEBUG string = "DEBUG"

	// GatewayLoggingConfigsLogLevelINFO captures enum value "INFO"
	GatewayLoggingConfigsLogLevelINFO string = "INFO"

	// GatewayLoggingConfigsLogLevelWARNING captures enum value "WARNING"
	GatewayLoggingConfigsLogLevelWARNING string = "WARNING"

	// GatewayLoggingConfigsLogLevelERROR captures enum value "ERROR"
	GatewayLoggingConfigsLogLevelERROR string = "ERROR"

	// GatewayLoggingConfigsLogLevelFATAL captures enum value "FATAL"
	GatewayLoggingConfigsLogLevelFATAL string = "FATAL"
)

// prop value enum
func (m *GatewayLoggingConfigs) validateLogLevelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, gatewayLoggingConfigsTypeLogLevelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GatewayLoggingConfigs) validateLogLevel(formats strfmt.Registry) error {

	if err := validate.Required("log_level", "body", m.LogLevel); err != nil {
		return err
	}

	// value enum
	if err := m.validateLogLevelEnum("log_level", "body", *m.LogLevel); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GatewayLoggingConfigs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GatewayLoggingConfigs) UnmarshalBinary(b []byte) error {
	var res GatewayLoggingConfigs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
