// Code generated by go-swagger; DO NOT EDIT.

package subscribers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new subscribers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for subscribers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteLTENetworkIDMsisdnsMsisdn removes m s i s d n association
*/
func (a *Client) DeleteLTENetworkIDMsisdnsMsisdn(params *DeleteLTENetworkIDMsisdnsMsisdnParams) (*DeleteLTENetworkIDMsisdnsMsisdnNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLTENetworkIDMsisdnsMsisdnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLTENetworkIDMsisdnsMsisdn",
		Method:             "DELETE",
		PathPattern:        "/lte/{network_id}/msisdns/{msisdn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteLTENetworkIDMsisdnsMsisdnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLTENetworkIDMsisdnsMsisdnNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteLTENetworkIDMsisdnsMsisdnDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteLTENetworkIDSubscribersSubscriberID removes a subscriber from the network
*/
func (a *Client) DeleteLTENetworkIDSubscribersSubscriberID(params *DeleteLTENetworkIDSubscribersSubscriberIDParams) (*DeleteLTENetworkIDSubscribersSubscriberIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLTENetworkIDSubscribersSubscriberIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLTENetworkIDSubscribersSubscriberID",
		Method:             "DELETE",
		PathPattern:        "/lte/{network_id}/subscribers/{subscriber_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteLTENetworkIDSubscribersSubscriberIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLTENetworkIDSubscribersSubscriberIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteLTENetworkIDSubscribersSubscriberIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLTENetworkIDMsisdns lists m s i s DNS in the network
*/
func (a *Client) GetLTENetworkIDMsisdns(params *GetLTENetworkIDMsisdnsParams) (*GetLTENetworkIDMsisdnsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDMsisdnsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLTENetworkIDMsisdns",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/msisdns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDMsisdnsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDMsisdnsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDMsisdnsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLTENetworkIDMsisdnsMsisdn retrieves subscriber ID for the m s i s d n
*/
func (a *Client) GetLTENetworkIDMsisdnsMsisdn(params *GetLTENetworkIDMsisdnsMsisdnParams) (*GetLTENetworkIDMsisdnsMsisdnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDMsisdnsMsisdnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLTENetworkIDMsisdnsMsisdn",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/msisdns/{msisdn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDMsisdnsMsisdnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDMsisdnsMsisdnOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDMsisdnsMsisdnDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLTENetworkIDSubscriberState lists subscriber state in the network
*/
func (a *Client) GetLTENetworkIDSubscriberState(params *GetLTENetworkIDSubscriberStateParams) (*GetLTENetworkIDSubscriberStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDSubscriberStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLTENetworkIDSubscriberState",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/subscriber_state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDSubscriberStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDSubscriberStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDSubscriberStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLTENetworkIDSubscriberStateSubscriberID lists a subscriber s state
*/
func (a *Client) GetLTENetworkIDSubscriberStateSubscriberID(params *GetLTENetworkIDSubscriberStateSubscriberIDParams) (*GetLTENetworkIDSubscriberStateSubscriberIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDSubscriberStateSubscriberIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLTENetworkIDSubscriberStateSubscriberID",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/subscriber_state/{subscriber_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDSubscriberStateSubscriberIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDSubscriberStateSubscriberIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDSubscriberStateSubscriberIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLTENetworkIDSubscribers lists subscribers in the network
*/
func (a *Client) GetLTENetworkIDSubscribers(params *GetLTENetworkIDSubscribersParams) (*GetLTENetworkIDSubscribersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDSubscribersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLTENetworkIDSubscribers",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/subscribers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDSubscribersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDSubscribersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDSubscribersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLTENetworkIDSubscribersSubscriberID retrieves the subscriber info
*/
func (a *Client) GetLTENetworkIDSubscribersSubscriberID(params *GetLTENetworkIDSubscribersSubscriberIDParams) (*GetLTENetworkIDSubscribersSubscriberIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDSubscribersSubscriberIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLTENetworkIDSubscribersSubscriberID",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/subscribers/{subscriber_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDSubscribersSubscriberIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDSubscribersSubscriberIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDSubscribersSubscriberIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLTENetworkIDSubscribersV2 lists subscribers in the network with pagination support
*/
func (a *Client) GetLTENetworkIDSubscribersV2(params *GetLTENetworkIDSubscribersV2Params) (*GetLTENetworkIDSubscribersV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDSubscribersV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLTENetworkIDSubscribersV2",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/subscribers_v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDSubscribersV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDSubscribersV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDSubscribersV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostLTENetworkIDMsisdns adds a new m s i s d n to the network
*/
func (a *Client) PostLTENetworkIDMsisdns(params *PostLTENetworkIDMsisdnsParams) (*PostLTENetworkIDMsisdnsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLTENetworkIDMsisdnsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLTENetworkIDMsisdns",
		Method:             "POST",
		PathPattern:        "/lte/{network_id}/msisdns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostLTENetworkIDMsisdnsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLTENetworkIDMsisdnsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostLTENetworkIDMsisdnsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostLTENetworkIDSubscribers adds a new subscriber to the network
*/
func (a *Client) PostLTENetworkIDSubscribers(params *PostLTENetworkIDSubscribersParams) (*PostLTENetworkIDSubscribersCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLTENetworkIDSubscribersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLTENetworkIDSubscribers",
		Method:             "POST",
		PathPattern:        "/lte/{network_id}/subscribers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostLTENetworkIDSubscribersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLTENetworkIDSubscribersCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostLTENetworkIDSubscribersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostLTENetworkIDSubscribersSubscriberIDActivate activates a subscriber
*/
func (a *Client) PostLTENetworkIDSubscribersSubscriberIDActivate(params *PostLTENetworkIDSubscribersSubscriberIDActivateParams) (*PostLTENetworkIDSubscribersSubscriberIDActivateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLTENetworkIDSubscribersSubscriberIDActivateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLTENetworkIDSubscribersSubscriberIDActivate",
		Method:             "POST",
		PathPattern:        "/lte/{network_id}/subscribers/{subscriber_id}/activate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostLTENetworkIDSubscribersSubscriberIDActivateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLTENetworkIDSubscribersSubscriberIDActivateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostLTENetworkIDSubscribersSubscriberIDActivateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostLTENetworkIDSubscribersSubscriberIDDeactivate deactivates a subscriber
*/
func (a *Client) PostLTENetworkIDSubscribersSubscriberIDDeactivate(params *PostLTENetworkIDSubscribersSubscriberIDDeactivateParams) (*PostLTENetworkIDSubscribersSubscriberIDDeactivateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLTENetworkIDSubscribersSubscriberIDDeactivateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLTENetworkIDSubscribersSubscriberIDDeactivate",
		Method:             "POST",
		PathPattern:        "/lte/{network_id}/subscribers/{subscriber_id}/deactivate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostLTENetworkIDSubscribersSubscriberIDDeactivateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLTENetworkIDSubscribersSubscriberIDDeactivateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostLTENetworkIDSubscribersSubscriberIDDeactivateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostLTENetworkIDSubscribersV2 adds new subscribers to the network
*/
func (a *Client) PostLTENetworkIDSubscribersV2(params *PostLTENetworkIDSubscribersV2Params) (*PostLTENetworkIDSubscribersV2Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLTENetworkIDSubscribersV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLTENetworkIDSubscribersV2",
		Method:             "POST",
		PathPattern:        "/lte/{network_id}/subscribers_v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostLTENetworkIDSubscribersV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLTENetworkIDSubscribersV2Created)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostLTENetworkIDSubscribersV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutLTENetworkIDSubscribersSubscriberID modifies subscriber info
*/
func (a *Client) PutLTENetworkIDSubscribersSubscriberID(params *PutLTENetworkIDSubscribersSubscriberIDParams) (*PutLTENetworkIDSubscribersSubscriberIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLTENetworkIDSubscribersSubscriberIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLTENetworkIDSubscribersSubscriberID",
		Method:             "PUT",
		PathPattern:        "/lte/{network_id}/subscribers/{subscriber_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLTENetworkIDSubscribersSubscriberIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLTENetworkIDSubscribersSubscriberIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLTENetworkIDSubscribersSubscriberIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutLTENetworkIDSubscribersSubscriberIDLTESubProfile changes a subscriber s data profile
*/
func (a *Client) PutLTENetworkIDSubscribersSubscriberIDLTESubProfile(params *PutLTENetworkIDSubscribersSubscriberIDLTESubProfileParams) (*PutLTENetworkIDSubscribersSubscriberIDLTESubProfileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLTENetworkIDSubscribersSubscriberIDLTESubProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLTENetworkIDSubscribersSubscriberIDLTESubProfile",
		Method:             "PUT",
		PathPattern:        "/lte/{network_id}/subscribers/{subscriber_id}/lte/sub_profile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLTENetworkIDSubscribersSubscriberIDLTESubProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLTENetworkIDSubscribersSubscriberIDLTESubProfileNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLTENetworkIDSubscribersSubscriberIDLTESubProfileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
