// Code generated by go-swagger; DO NOT EDIT.

package subscribers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetLTENetworkIDSubscribersVerboseFalseParams creates a new GetLTENetworkIDSubscribersVerboseFalseParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetLTENetworkIDSubscribersVerboseFalseParams() *GetLTENetworkIDSubscribersVerboseFalseParams {
	return &GetLTENetworkIDSubscribersVerboseFalseParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetLTENetworkIDSubscribersVerboseFalseParamsWithTimeout creates a new GetLTENetworkIDSubscribersVerboseFalseParams object
// with the ability to set a timeout on a request.
func NewGetLTENetworkIDSubscribersVerboseFalseParamsWithTimeout(timeout time.Duration) *GetLTENetworkIDSubscribersVerboseFalseParams {
	return &GetLTENetworkIDSubscribersVerboseFalseParams{
		timeout: timeout,
	}
}

// NewGetLTENetworkIDSubscribersVerboseFalseParamsWithContext creates a new GetLTENetworkIDSubscribersVerboseFalseParams object
// with the ability to set a context for a request.
func NewGetLTENetworkIDSubscribersVerboseFalseParamsWithContext(ctx context.Context) *GetLTENetworkIDSubscribersVerboseFalseParams {
	return &GetLTENetworkIDSubscribersVerboseFalseParams{
		Context: ctx,
	}
}

// NewGetLTENetworkIDSubscribersVerboseFalseParamsWithHTTPClient creates a new GetLTENetworkIDSubscribersVerboseFalseParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetLTENetworkIDSubscribersVerboseFalseParamsWithHTTPClient(client *http.Client) *GetLTENetworkIDSubscribersVerboseFalseParams {
	return &GetLTENetworkIDSubscribersVerboseFalseParams{
		HTTPClient: client,
	}
}

/*
GetLTENetworkIDSubscribersVerboseFalseParams contains all the parameters to send to the API endpoint

	for the get LTE network ID subscribers verbose false operation.

	Typically these are written to a http.Request.
*/
type GetLTENetworkIDSubscribersVerboseFalseParams struct {

	/* IP.

	   Filter to subscribers assigned the passed IP address
	*/
	IP *string

	/* Msisdn.

	   Filter to subscribers with the passed MSISDN
	*/
	Msisdn *string

	/* NetworkID.

	   Network ID
	*/
	NetworkID string

	/* PageSize.

	   Maximum number of entities to return

	   Format: uint32
	*/
	PageSize *uint32

	/* PageToken.

	   Opaque page token for paginated requests
	*/
	PageToken *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get LTE network ID subscribers verbose false params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetLTENetworkIDSubscribersVerboseFalseParams) WithDefaults() *GetLTENetworkIDSubscribersVerboseFalseParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get LTE network ID subscribers verbose false params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetLTENetworkIDSubscribersVerboseFalseParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get LTE network ID subscribers verbose false params
func (o *GetLTENetworkIDSubscribersVerboseFalseParams) WithTimeout(timeout time.Duration) *GetLTENetworkIDSubscribersVerboseFalseParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get LTE network ID subscribers verbose false params
func (o *GetLTENetworkIDSubscribersVerboseFalseParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get LTE network ID subscribers verbose false params
func (o *GetLTENetworkIDSubscribersVerboseFalseParams) WithContext(ctx context.Context) *GetLTENetworkIDSubscribersVerboseFalseParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get LTE network ID subscribers verbose false params
func (o *GetLTENetworkIDSubscribersVerboseFalseParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get LTE network ID subscribers verbose false params
func (o *GetLTENetworkIDSubscribersVerboseFalseParams) WithHTTPClient(client *http.Client) *GetLTENetworkIDSubscribersVerboseFalseParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get LTE network ID subscribers verbose false params
func (o *GetLTENetworkIDSubscribersVerboseFalseParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIP adds the ip to the get LTE network ID subscribers verbose false params
func (o *GetLTENetworkIDSubscribersVerboseFalseParams) WithIP(ip *string) *GetLTENetworkIDSubscribersVerboseFalseParams {
	o.SetIP(ip)
	return o
}

// SetIP adds the ip to the get LTE network ID subscribers verbose false params
func (o *GetLTENetworkIDSubscribersVerboseFalseParams) SetIP(ip *string) {
	o.IP = ip
}

// WithMsisdn adds the msisdn to the get LTE network ID subscribers verbose false params
func (o *GetLTENetworkIDSubscribersVerboseFalseParams) WithMsisdn(msisdn *string) *GetLTENetworkIDSubscribersVerboseFalseParams {
	o.SetMsisdn(msisdn)
	return o
}

// SetMsisdn adds the msisdn to the get LTE network ID subscribers verbose false params
func (o *GetLTENetworkIDSubscribersVerboseFalseParams) SetMsisdn(msisdn *string) {
	o.Msisdn = msisdn
}

// WithNetworkID adds the networkID to the get LTE network ID subscribers verbose false params
func (o *GetLTENetworkIDSubscribersVerboseFalseParams) WithNetworkID(networkID string) *GetLTENetworkIDSubscribersVerboseFalseParams {
	o.SetNetworkID(networkID)
	return o
}

// SetNetworkID adds the networkId to the get LTE network ID subscribers verbose false params
func (o *GetLTENetworkIDSubscribersVerboseFalseParams) SetNetworkID(networkID string) {
	o.NetworkID = networkID
}

// WithPageSize adds the pageSize to the get LTE network ID subscribers verbose false params
func (o *GetLTENetworkIDSubscribersVerboseFalseParams) WithPageSize(pageSize *uint32) *GetLTENetworkIDSubscribersVerboseFalseParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get LTE network ID subscribers verbose false params
func (o *GetLTENetworkIDSubscribersVerboseFalseParams) SetPageSize(pageSize *uint32) {
	o.PageSize = pageSize
}

// WithPageToken adds the pageToken to the get LTE network ID subscribers verbose false params
func (o *GetLTENetworkIDSubscribersVerboseFalseParams) WithPageToken(pageToken *string) *GetLTENetworkIDSubscribersVerboseFalseParams {
	o.SetPageToken(pageToken)
	return o
}

// SetPageToken adds the pageToken to the get LTE network ID subscribers verbose false params
func (o *GetLTENetworkIDSubscribersVerboseFalseParams) SetPageToken(pageToken *string) {
	o.PageToken = pageToken
}

// WriteToRequest writes these params to a swagger request
func (o *GetLTENetworkIDSubscribersVerboseFalseParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IP != nil {

		// query param ip
		var qrIP string

		if o.IP != nil {
			qrIP = *o.IP
		}
		qIP := qrIP
		if qIP != "" {

			if err := r.SetQueryParam("ip", qIP); err != nil {
				return err
			}
		}
	}

	if o.Msisdn != nil {

		// query param msisdn
		var qrMsisdn string

		if o.Msisdn != nil {
			qrMsisdn = *o.Msisdn
		}
		qMsisdn := qrMsisdn
		if qMsisdn != "" {

			if err := r.SetQueryParam("msisdn", qMsisdn); err != nil {
				return err
			}
		}
	}

	// path param network_id
	if err := r.SetPathParam("network_id", o.NetworkID); err != nil {
		return err
	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize uint32

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatUint32(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.PageToken != nil {

		// query param page_token
		var qrPageToken string

		if o.PageToken != nil {
			qrPageToken = *o.PageToken
		}
		qPageToken := qrPageToken
		if qPageToken != "" {

			if err := r.SetQueryParam("page_token", qPageToken); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
