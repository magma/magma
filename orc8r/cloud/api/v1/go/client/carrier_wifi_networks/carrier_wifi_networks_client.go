// Code generated by go-swagger; DO NOT EDIT.

package carrier_wifi_networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new carrier wifi networks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for carrier wifi networks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteCwfNetworkID deletes a carrier wifi network
*/
func (a *Client) DeleteCwfNetworkID(params *DeleteCwfNetworkIDParams) (*DeleteCwfNetworkIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCwfNetworkIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCwfNetworkID",
		Method:             "DELETE",
		PathPattern:        "/cwf/{network_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteCwfNetworkIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCwfNetworkIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteCwfNetworkIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteCwfNetworkIDCarrierWifi deletes network carrier wifi configs
*/
func (a *Client) DeleteCwfNetworkIDCarrierWifi(params *DeleteCwfNetworkIDCarrierWifiParams) (*DeleteCwfNetworkIDCarrierWifiNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCwfNetworkIDCarrierWifiParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCwfNetworkIDCarrierWifi",
		Method:             "DELETE",
		PathPattern:        "/cwf/{network_id}/carrier_wifi",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteCwfNetworkIDCarrierWifiReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCwfNetworkIDCarrierWifiNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteCwfNetworkIDCarrierWifiDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteCwfNetworkIDHaPairsHaPairID deletes high availability gateway pair for carrier wifi network
*/
func (a *Client) DeleteCwfNetworkIDHaPairsHaPairID(params *DeleteCwfNetworkIDHaPairsHaPairIDParams) (*DeleteCwfNetworkIDHaPairsHaPairIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCwfNetworkIDHaPairsHaPairIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCwfNetworkIDHaPairsHaPairID",
		Method:             "DELETE",
		PathPattern:        "/cwf/{network_id}/ha_pairs/{ha_pair_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteCwfNetworkIDHaPairsHaPairIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCwfNetworkIDHaPairsHaPairIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteCwfNetworkIDHaPairsHaPairIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteCwfNetworkIDSubscriberConfigBaseNamesBaseName adds a network wide base name
*/
func (a *Client) DeleteCwfNetworkIDSubscriberConfigBaseNamesBaseName(params *DeleteCwfNetworkIDSubscriberConfigBaseNamesBaseNameParams) (*DeleteCwfNetworkIDSubscriberConfigBaseNamesBaseNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCwfNetworkIDSubscriberConfigBaseNamesBaseNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCwfNetworkIDSubscriberConfigBaseNamesBaseName",
		Method:             "DELETE",
		PathPattern:        "/cwf/{network_id}/subscriber_config/base_names/{base_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteCwfNetworkIDSubscriberConfigBaseNamesBaseNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCwfNetworkIDSubscriberConfigBaseNamesBaseNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteCwfNetworkIDSubscriberConfigBaseNamesBaseNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteCwfNetworkIDSubscriberConfigRuleNamesRuleID adds a network wide rule name
*/
func (a *Client) DeleteCwfNetworkIDSubscriberConfigRuleNamesRuleID(params *DeleteCwfNetworkIDSubscriberConfigRuleNamesRuleIDParams) (*DeleteCwfNetworkIDSubscriberConfigRuleNamesRuleIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCwfNetworkIDSubscriberConfigRuleNamesRuleIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCwfNetworkIDSubscriberConfigRuleNamesRuleID",
		Method:             "DELETE",
		PathPattern:        "/cwf/{network_id}/subscriber_config/rule_names/{rule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteCwfNetworkIDSubscriberConfigRuleNamesRuleIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCwfNetworkIDSubscriberConfigRuleNamesRuleIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteCwfNetworkIDSubscriberConfigRuleNamesRuleIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCwf lists all carrier wifi network i ds
*/
func (a *Client) GetCwf(params *GetCwfParams) (*GetCwfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCwfParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCwf",
		Method:             "GET",
		PathPattern:        "/cwf",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCwfReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCwfOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCwfDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCwfNetworkID describes a carrier wifi network
*/
func (a *Client) GetCwfNetworkID(params *GetCwfNetworkIDParams) (*GetCwfNetworkIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCwfNetworkIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCwfNetworkID",
		Method:             "GET",
		PathPattern:        "/cwf/{network_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCwfNetworkIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCwfNetworkIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCwfNetworkIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCwfNetworkIDCarrierWifi retrieves network carrier wifi configs
*/
func (a *Client) GetCwfNetworkIDCarrierWifi(params *GetCwfNetworkIDCarrierWifiParams) (*GetCwfNetworkIDCarrierWifiOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCwfNetworkIDCarrierWifiParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCwfNetworkIDCarrierWifi",
		Method:             "GET",
		PathPattern:        "/cwf/{network_id}/carrier_wifi",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCwfNetworkIDCarrierWifiReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCwfNetworkIDCarrierWifiOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCwfNetworkIDCarrierWifiDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCwfNetworkIDDescription gets description of a carrier wifi network
*/
func (a *Client) GetCwfNetworkIDDescription(params *GetCwfNetworkIDDescriptionParams) (*GetCwfNetworkIDDescriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCwfNetworkIDDescriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCwfNetworkIDDescription",
		Method:             "GET",
		PathPattern:        "/cwf/{network_id}/description",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCwfNetworkIDDescriptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCwfNetworkIDDescriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCwfNetworkIDDescriptionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCwfNetworkIDHaPairs lists all high availability gateway pairs in carrier wifi network
*/
func (a *Client) GetCwfNetworkIDHaPairs(params *GetCwfNetworkIDHaPairsParams) (*GetCwfNetworkIDHaPairsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCwfNetworkIDHaPairsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCwfNetworkIDHaPairs",
		Method:             "GET",
		PathPattern:        "/cwf/{network_id}/ha_pairs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCwfNetworkIDHaPairsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCwfNetworkIDHaPairsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCwfNetworkIDHaPairsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCwfNetworkIDHaPairsHaPairID retrieves high availability gateway pair for carrier wifi network
*/
func (a *Client) GetCwfNetworkIDHaPairsHaPairID(params *GetCwfNetworkIDHaPairsHaPairIDParams) (*GetCwfNetworkIDHaPairsHaPairIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCwfNetworkIDHaPairsHaPairIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCwfNetworkIDHaPairsHaPairID",
		Method:             "GET",
		PathPattern:        "/cwf/{network_id}/ha_pairs/{ha_pair_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCwfNetworkIDHaPairsHaPairIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCwfNetworkIDHaPairsHaPairIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCwfNetworkIDHaPairsHaPairIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCwfNetworkIDHaPairsHaPairIDStatus retrieves status of a carrier wifi h a pair
*/
func (a *Client) GetCwfNetworkIDHaPairsHaPairIDStatus(params *GetCwfNetworkIDHaPairsHaPairIDStatusParams) (*GetCwfNetworkIDHaPairsHaPairIDStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCwfNetworkIDHaPairsHaPairIDStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCwfNetworkIDHaPairsHaPairIDStatus",
		Method:             "GET",
		PathPattern:        "/cwf/{network_id}/ha_pairs/{ha_pair_id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCwfNetworkIDHaPairsHaPairIDStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCwfNetworkIDHaPairsHaPairIDStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCwfNetworkIDHaPairsHaPairIDStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCwfNetworkIDLiUes gets monitored l i u es for carrier wifi network
*/
func (a *Client) GetCwfNetworkIDLiUes(params *GetCwfNetworkIDLiUesParams) (*GetCwfNetworkIDLiUesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCwfNetworkIDLiUesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCwfNetworkIDLiUes",
		Method:             "GET",
		PathPattern:        "/cwf/{network_id}/li_ues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCwfNetworkIDLiUesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCwfNetworkIDLiUesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCwfNetworkIDLiUesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCwfNetworkIDName gets name of a carrier wifi network
*/
func (a *Client) GetCwfNetworkIDName(params *GetCwfNetworkIDNameParams) (*GetCwfNetworkIDNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCwfNetworkIDNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCwfNetworkIDName",
		Method:             "GET",
		PathPattern:        "/cwf/{network_id}/name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCwfNetworkIDNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCwfNetworkIDNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCwfNetworkIDNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCwfNetworkIDSubscriberConfig gets a network wide subscriber config
*/
func (a *Client) GetCwfNetworkIDSubscriberConfig(params *GetCwfNetworkIDSubscriberConfigParams) (*GetCwfNetworkIDSubscriberConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCwfNetworkIDSubscriberConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCwfNetworkIDSubscriberConfig",
		Method:             "GET",
		PathPattern:        "/cwf/{network_id}/subscriber_config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCwfNetworkIDSubscriberConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCwfNetworkIDSubscriberConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCwfNetworkIDSubscriberConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCwfNetworkIDSubscriberConfigBaseNames gets network wide base names
*/
func (a *Client) GetCwfNetworkIDSubscriberConfigBaseNames(params *GetCwfNetworkIDSubscriberConfigBaseNamesParams) (*GetCwfNetworkIDSubscriberConfigBaseNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCwfNetworkIDSubscriberConfigBaseNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCwfNetworkIDSubscriberConfigBaseNames",
		Method:             "GET",
		PathPattern:        "/cwf/{network_id}/subscriber_config/base_names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCwfNetworkIDSubscriberConfigBaseNamesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCwfNetworkIDSubscriberConfigBaseNamesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCwfNetworkIDSubscriberConfigBaseNamesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCwfNetworkIDSubscriberConfigRuleNames gets network wide rule names
*/
func (a *Client) GetCwfNetworkIDSubscriberConfigRuleNames(params *GetCwfNetworkIDSubscriberConfigRuleNamesParams) (*GetCwfNetworkIDSubscriberConfigRuleNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCwfNetworkIDSubscriberConfigRuleNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCwfNetworkIDSubscriberConfigRuleNames",
		Method:             "GET",
		PathPattern:        "/cwf/{network_id}/subscriber_config/rule_names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCwfNetworkIDSubscriberConfigRuleNamesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCwfNetworkIDSubscriberConfigRuleNamesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCwfNetworkIDSubscriberConfigRuleNamesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCwfNetworkIDSubscribersSubscriberIDDirectoryRecord gets the directory record of a subscriber
*/
func (a *Client) GetCwfNetworkIDSubscribersSubscriberIDDirectoryRecord(params *GetCwfNetworkIDSubscribersSubscriberIDDirectoryRecordParams) (*GetCwfNetworkIDSubscribersSubscriberIDDirectoryRecordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCwfNetworkIDSubscribersSubscriberIDDirectoryRecordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCwfNetworkIDSubscribersSubscriberIDDirectoryRecord",
		Method:             "GET",
		PathPattern:        "/cwf/{network_id}/subscribers/{subscriber_id}/directory_record",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCwfNetworkIDSubscribersSubscriberIDDirectoryRecordReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCwfNetworkIDSubscribersSubscriberIDDirectoryRecordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCwfNetworkIDSubscribersSubscriberIDDirectoryRecordDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostCwf creates a new carrier wifi network
*/
func (a *Client) PostCwf(params *PostCwfParams) (*PostCwfCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCwfParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCwf",
		Method:             "POST",
		PathPattern:        "/cwf",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostCwfReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostCwfCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostCwfDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostCwfNetworkIDHaPairs creates new high availability gateway pair in carrier wifi network
*/
func (a *Client) PostCwfNetworkIDHaPairs(params *PostCwfNetworkIDHaPairsParams) (*PostCwfNetworkIDHaPairsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCwfNetworkIDHaPairsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCwfNetworkIDHaPairs",
		Method:             "POST",
		PathPattern:        "/cwf/{network_id}/ha_pairs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostCwfNetworkIDHaPairsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostCwfNetworkIDHaPairsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostCwfNetworkIDHaPairsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostCwfNetworkIDSubscriberConfigBaseNamesBaseName adds a network wide base name
*/
func (a *Client) PostCwfNetworkIDSubscriberConfigBaseNamesBaseName(params *PostCwfNetworkIDSubscriberConfigBaseNamesBaseNameParams) (*PostCwfNetworkIDSubscriberConfigBaseNamesBaseNameCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCwfNetworkIDSubscriberConfigBaseNamesBaseNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCwfNetworkIDSubscriberConfigBaseNamesBaseName",
		Method:             "POST",
		PathPattern:        "/cwf/{network_id}/subscriber_config/base_names/{base_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostCwfNetworkIDSubscriberConfigBaseNamesBaseNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostCwfNetworkIDSubscriberConfigBaseNamesBaseNameCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostCwfNetworkIDSubscriberConfigBaseNamesBaseNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostCwfNetworkIDSubscriberConfigRuleNamesRuleID adds a network wide rule name
*/
func (a *Client) PostCwfNetworkIDSubscriberConfigRuleNamesRuleID(params *PostCwfNetworkIDSubscriberConfigRuleNamesRuleIDParams) (*PostCwfNetworkIDSubscriberConfigRuleNamesRuleIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCwfNetworkIDSubscriberConfigRuleNamesRuleIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCwfNetworkIDSubscriberConfigRuleNamesRuleID",
		Method:             "POST",
		PathPattern:        "/cwf/{network_id}/subscriber_config/rule_names/{rule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostCwfNetworkIDSubscriberConfigRuleNamesRuleIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostCwfNetworkIDSubscriberConfigRuleNamesRuleIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostCwfNetworkIDSubscriberConfigRuleNamesRuleIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutCwfNetworkID updates an entire carrier wifi network
*/
func (a *Client) PutCwfNetworkID(params *PutCwfNetworkIDParams) (*PutCwfNetworkIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCwfNetworkIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCwfNetworkID",
		Method:             "PUT",
		PathPattern:        "/cwf/{network_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutCwfNetworkIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutCwfNetworkIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutCwfNetworkIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutCwfNetworkIDCarrierWifi modifies network carrier wifi configs
*/
func (a *Client) PutCwfNetworkIDCarrierWifi(params *PutCwfNetworkIDCarrierWifiParams) (*PutCwfNetworkIDCarrierWifiOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCwfNetworkIDCarrierWifiParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCwfNetworkIDCarrierWifi",
		Method:             "PUT",
		PathPattern:        "/cwf/{network_id}/carrier_wifi",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutCwfNetworkIDCarrierWifiReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutCwfNetworkIDCarrierWifiOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutCwfNetworkIDCarrierWifiDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutCwfNetworkIDDescription updates the description of a carrier wifi network
*/
func (a *Client) PutCwfNetworkIDDescription(params *PutCwfNetworkIDDescriptionParams) (*PutCwfNetworkIDDescriptionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCwfNetworkIDDescriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCwfNetworkIDDescription",
		Method:             "PUT",
		PathPattern:        "/cwf/{network_id}/description",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutCwfNetworkIDDescriptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutCwfNetworkIDDescriptionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutCwfNetworkIDDescriptionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutCwfNetworkIDHaPairsHaPairID modifies high availability gateway pair for carrier wifi network
*/
func (a *Client) PutCwfNetworkIDHaPairsHaPairID(params *PutCwfNetworkIDHaPairsHaPairIDParams) (*PutCwfNetworkIDHaPairsHaPairIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCwfNetworkIDHaPairsHaPairIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCwfNetworkIDHaPairsHaPairID",
		Method:             "PUT",
		PathPattern:        "/cwf/{network_id}/ha_pairs/{ha_pair_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutCwfNetworkIDHaPairsHaPairIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutCwfNetworkIDHaPairsHaPairIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutCwfNetworkIDHaPairsHaPairIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutCwfNetworkIDLiUes updates monitored l i u es for carrier wifi network
*/
func (a *Client) PutCwfNetworkIDLiUes(params *PutCwfNetworkIDLiUesParams) (*PutCwfNetworkIDLiUesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCwfNetworkIDLiUesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCwfNetworkIDLiUes",
		Method:             "PUT",
		PathPattern:        "/cwf/{network_id}/li_ues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutCwfNetworkIDLiUesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutCwfNetworkIDLiUesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutCwfNetworkIDLiUesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutCwfNetworkIDName updates the name of a carrier wifi network
*/
func (a *Client) PutCwfNetworkIDName(params *PutCwfNetworkIDNameParams) (*PutCwfNetworkIDNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCwfNetworkIDNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCwfNetworkIDName",
		Method:             "PUT",
		PathPattern:        "/cwf/{network_id}/name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutCwfNetworkIDNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutCwfNetworkIDNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutCwfNetworkIDNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutCwfNetworkIDSubscriberConfig updates a network wide subscriber config
*/
func (a *Client) PutCwfNetworkIDSubscriberConfig(params *PutCwfNetworkIDSubscriberConfigParams) (*PutCwfNetworkIDSubscriberConfigNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCwfNetworkIDSubscriberConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCwfNetworkIDSubscriberConfig",
		Method:             "PUT",
		PathPattern:        "/cwf/{network_id}/subscriber_config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutCwfNetworkIDSubscriberConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutCwfNetworkIDSubscriberConfigNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutCwfNetworkIDSubscriberConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutCwfNetworkIDSubscriberConfigBaseNames updates network wide base names
*/
func (a *Client) PutCwfNetworkIDSubscriberConfigBaseNames(params *PutCwfNetworkIDSubscriberConfigBaseNamesParams) (*PutCwfNetworkIDSubscriberConfigBaseNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCwfNetworkIDSubscriberConfigBaseNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCwfNetworkIDSubscriberConfigBaseNames",
		Method:             "PUT",
		PathPattern:        "/cwf/{network_id}/subscriber_config/base_names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutCwfNetworkIDSubscriberConfigBaseNamesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutCwfNetworkIDSubscriberConfigBaseNamesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutCwfNetworkIDSubscriberConfigBaseNamesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutCwfNetworkIDSubscriberConfigRuleNames updates network wide rule names
*/
func (a *Client) PutCwfNetworkIDSubscriberConfigRuleNames(params *PutCwfNetworkIDSubscriberConfigRuleNamesParams) (*PutCwfNetworkIDSubscriberConfigRuleNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCwfNetworkIDSubscriberConfigRuleNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCwfNetworkIDSubscriberConfigRuleNames",
		Method:             "PUT",
		PathPattern:        "/cwf/{network_id}/subscriber_config/rule_names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutCwfNetworkIDSubscriberConfigRuleNamesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutCwfNetworkIDSubscriberConfigRuleNamesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutCwfNetworkIDSubscriberConfigRuleNamesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
