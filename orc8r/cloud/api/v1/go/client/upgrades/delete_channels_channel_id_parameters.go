// Code generated by go-swagger; DO NOT EDIT.

package upgrades

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteChannelsChannelIDParams creates a new DeleteChannelsChannelIDParams object
// with the default values initialized.
func NewDeleteChannelsChannelIDParams() *DeleteChannelsChannelIDParams {
	var ()
	return &DeleteChannelsChannelIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteChannelsChannelIDParamsWithTimeout creates a new DeleteChannelsChannelIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteChannelsChannelIDParamsWithTimeout(timeout time.Duration) *DeleteChannelsChannelIDParams {
	var ()
	return &DeleteChannelsChannelIDParams{

		timeout: timeout,
	}
}

// NewDeleteChannelsChannelIDParamsWithContext creates a new DeleteChannelsChannelIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteChannelsChannelIDParamsWithContext(ctx context.Context) *DeleteChannelsChannelIDParams {
	var ()
	return &DeleteChannelsChannelIDParams{

		Context: ctx,
	}
}

// NewDeleteChannelsChannelIDParamsWithHTTPClient creates a new DeleteChannelsChannelIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteChannelsChannelIDParamsWithHTTPClient(client *http.Client) *DeleteChannelsChannelIDParams {
	var ()
	return &DeleteChannelsChannelIDParams{
		HTTPClient: client,
	}
}

/*DeleteChannelsChannelIDParams contains all the parameters to send to the API endpoint
for the delete channels channel ID operation typically these are written to a http.Request
*/
type DeleteChannelsChannelIDParams struct {

	/*ChannelID
	  Release Channel ID

	*/
	ChannelID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete channels channel ID params
func (o *DeleteChannelsChannelIDParams) WithTimeout(timeout time.Duration) *DeleteChannelsChannelIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete channels channel ID params
func (o *DeleteChannelsChannelIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete channels channel ID params
func (o *DeleteChannelsChannelIDParams) WithContext(ctx context.Context) *DeleteChannelsChannelIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete channels channel ID params
func (o *DeleteChannelsChannelIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete channels channel ID params
func (o *DeleteChannelsChannelIDParams) WithHTTPClient(client *http.Client) *DeleteChannelsChannelIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete channels channel ID params
func (o *DeleteChannelsChannelIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChannelID adds the channelID to the delete channels channel ID params
func (o *DeleteChannelsChannelIDParams) WithChannelID(channelID string) *DeleteChannelsChannelIDParams {
	o.SetChannelID(channelID)
	return o
}

// SetChannelID adds the channelId to the delete channels channel ID params
func (o *DeleteChannelsChannelIDParams) SetChannelID(channelID string) {
	o.ChannelID = channelID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteChannelsChannelIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param channel_id
	if err := r.SetPathParam("channel_id", o.ChannelID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
