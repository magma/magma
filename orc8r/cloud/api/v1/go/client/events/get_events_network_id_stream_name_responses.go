// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"magma/orc8r/cloud/api/v1/go/models"
)

// GetEventsNetworkIDStreamNameReader is a Reader for the GetEventsNetworkIDStreamName structure.
type GetEventsNetworkIDStreamNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEventsNetworkIDStreamNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEventsNetworkIDStreamNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetEventsNetworkIDStreamNameDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetEventsNetworkIDStreamNameOK creates a GetEventsNetworkIDStreamNameOK with default headers values
func NewGetEventsNetworkIDStreamNameOK() *GetEventsNetworkIDStreamNameOK {
	return &GetEventsNetworkIDStreamNameOK{}
}

/*
GetEventsNetworkIDStreamNameOK describes a response with status code 200, with default header values.

Success
*/
type GetEventsNetworkIDStreamNameOK struct {
	Payload []*models.Event
}

func (o *GetEventsNetworkIDStreamNameOK) Error() string {
	return fmt.Sprintf("[GET /events/{network_id}/{stream_name}][%d] getEventsNetworkIdStreamNameOK  %+v", 200, o.Payload)
}
func (o *GetEventsNetworkIDStreamNameOK) GetPayload() []*models.Event {
	return o.Payload
}

func (o *GetEventsNetworkIDStreamNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEventsNetworkIDStreamNameDefault creates a GetEventsNetworkIDStreamNameDefault with default headers values
func NewGetEventsNetworkIDStreamNameDefault(code int) *GetEventsNetworkIDStreamNameDefault {
	return &GetEventsNetworkIDStreamNameDefault{
		_statusCode: code,
	}
}

/*
GetEventsNetworkIDStreamNameDefault describes a response with status code -1, with default header values.

Unexpected Error
*/
type GetEventsNetworkIDStreamNameDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get events network ID stream name default response
func (o *GetEventsNetworkIDStreamNameDefault) Code() int {
	return o._statusCode
}

func (o *GetEventsNetworkIDStreamNameDefault) Error() string {
	return fmt.Sprintf("[GET /events/{network_id}/{stream_name}][%d] GetEventsNetworkIDStreamName default  %+v", o._statusCode, o.Payload)
}
func (o *GetEventsNetworkIDStreamNameDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetEventsNetworkIDStreamNameDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
