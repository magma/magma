// Code generated by go-swagger; DO NOT EDIT.

package lte_networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new lte networks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for lte networks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteLTENetworkID(params *DeleteLTENetworkIDParams, opts ...ClientOption) (*DeleteLTENetworkIDNoContent, error)

	DeleteLTENetworkIDDNSRecordsDomain(params *DeleteLTENetworkIDDNSRecordsDomainParams, opts ...ClientOption) (*DeleteLTENetworkIDDNSRecordsDomainNoContent, error)

	DeleteLTENetworkIDGatewayPoolsGatewayPoolID(params *DeleteLTENetworkIDGatewayPoolsGatewayPoolIDParams, opts ...ClientOption) (*DeleteLTENetworkIDGatewayPoolsGatewayPoolIDNoContent, error)

	DeleteLTENetworkIDSubscriberConfigBaseNamesBaseName(params *DeleteLTENetworkIDSubscriberConfigBaseNamesBaseNameParams, opts ...ClientOption) (*DeleteLTENetworkIDSubscriberConfigBaseNamesBaseNameNoContent, error)

	DeleteLTENetworkIDSubscriberConfigRuleNamesRuleID(params *DeleteLTENetworkIDSubscriberConfigRuleNamesRuleIDParams, opts ...ClientOption) (*DeleteLTENetworkIDSubscriberConfigRuleNamesRuleIDNoContent, error)

	GetLTE(params *GetLTEParams, opts ...ClientOption) (*GetLTEOK, error)

	GetLTENetworkID(params *GetLTENetworkIDParams, opts ...ClientOption) (*GetLTENetworkIDOK, error)

	GetLTENetworkIDCellular(params *GetLTENetworkIDCellularParams, opts ...ClientOption) (*GetLTENetworkIDCellularOK, error)

	GetLTENetworkIDCellularEpc(params *GetLTENetworkIDCellularEpcParams, opts ...ClientOption) (*GetLTENetworkIDCellularEpcOK, error)

	GetLTENetworkIDCellularFegNetworkID(params *GetLTENetworkIDCellularFegNetworkIDParams, opts ...ClientOption) (*GetLTENetworkIDCellularFegNetworkIDOK, error)

	GetLTENetworkIDCellularRan(params *GetLTENetworkIDCellularRanParams, opts ...ClientOption) (*GetLTENetworkIDCellularRanOK, error)

	GetLTENetworkIDDNS(params *GetLTENetworkIDDNSParams, opts ...ClientOption) (*GetLTENetworkIDDNSOK, error)

	GetLTENetworkIDDNSRecords(params *GetLTENetworkIDDNSRecordsParams, opts ...ClientOption) (*GetLTENetworkIDDNSRecordsOK, error)

	GetLTENetworkIDDNSRecordsDomain(params *GetLTENetworkIDDNSRecordsDomainParams, opts ...ClientOption) (*GetLTENetworkIDDNSRecordsDomainOK, error)

	GetLTENetworkIDDescription(params *GetLTENetworkIDDescriptionParams, opts ...ClientOption) (*GetLTENetworkIDDescriptionOK, error)

	GetLTENetworkIDFeatures(params *GetLTENetworkIDFeaturesParams, opts ...ClientOption) (*GetLTENetworkIDFeaturesOK, error)

	GetLTENetworkIDGatewayPools(params *GetLTENetworkIDGatewayPoolsParams, opts ...ClientOption) (*GetLTENetworkIDGatewayPoolsOK, error)

	GetLTENetworkIDGatewayPoolsGatewayPoolID(params *GetLTENetworkIDGatewayPoolsGatewayPoolIDParams, opts ...ClientOption) (*GetLTENetworkIDGatewayPoolsGatewayPoolIDOK, error)

	GetLTENetworkIDName(params *GetLTENetworkIDNameParams, opts ...ClientOption) (*GetLTENetworkIDNameOK, error)

	GetLTENetworkIDSubscriberConfig(params *GetLTENetworkIDSubscriberConfigParams, opts ...ClientOption) (*GetLTENetworkIDSubscriberConfigOK, error)

	GetLTENetworkIDSubscriberConfigBaseNames(params *GetLTENetworkIDSubscriberConfigBaseNamesParams, opts ...ClientOption) (*GetLTENetworkIDSubscriberConfigBaseNamesOK, error)

	GetLTENetworkIDSubscriberConfigRuleNames(params *GetLTENetworkIDSubscriberConfigRuleNamesParams, opts ...ClientOption) (*GetLTENetworkIDSubscriberConfigRuleNamesOK, error)

	PostLTE(params *PostLTEParams, opts ...ClientOption) (*PostLTECreated, error)

	PostLTENetworkIDDNSRecordsDomain(params *PostLTENetworkIDDNSRecordsDomainParams, opts ...ClientOption) (*PostLTENetworkIDDNSRecordsDomainCreated, error)

	PostLTENetworkIDGatewayPools(params *PostLTENetworkIDGatewayPoolsParams, opts ...ClientOption) (*PostLTENetworkIDGatewayPoolsCreated, error)

	PostLTENetworkIDSubscriberConfigBaseNamesBaseName(params *PostLTENetworkIDSubscriberConfigBaseNamesBaseNameParams, opts ...ClientOption) (*PostLTENetworkIDSubscriberConfigBaseNamesBaseNameCreated, error)

	PostLTENetworkIDSubscriberConfigRuleNamesRuleID(params *PostLTENetworkIDSubscriberConfigRuleNamesRuleIDParams, opts ...ClientOption) (*PostLTENetworkIDSubscriberConfigRuleNamesRuleIDCreated, error)

	PutLTENetworkID(params *PutLTENetworkIDParams, opts ...ClientOption) (*PutLTENetworkIDNoContent, error)

	PutLTENetworkIDCellular(params *PutLTENetworkIDCellularParams, opts ...ClientOption) (*PutLTENetworkIDCellularNoContent, error)

	PutLTENetworkIDCellularEpc(params *PutLTENetworkIDCellularEpcParams, opts ...ClientOption) (*PutLTENetworkIDCellularEpcNoContent, error)

	PutLTENetworkIDCellularFegNetworkID(params *PutLTENetworkIDCellularFegNetworkIDParams, opts ...ClientOption) (*PutLTENetworkIDCellularFegNetworkIDNoContent, error)

	PutLTENetworkIDCellularRan(params *PutLTENetworkIDCellularRanParams, opts ...ClientOption) (*PutLTENetworkIDCellularRanNoContent, error)

	PutLTENetworkIDDNS(params *PutLTENetworkIDDNSParams, opts ...ClientOption) (*PutLTENetworkIDDNSNoContent, error)

	PutLTENetworkIDDNSRecords(params *PutLTENetworkIDDNSRecordsParams, opts ...ClientOption) (*PutLTENetworkIDDNSRecordsNoContent, error)

	PutLTENetworkIDDNSRecordsDomain(params *PutLTENetworkIDDNSRecordsDomainParams, opts ...ClientOption) (*PutLTENetworkIDDNSRecordsDomainNoContent, error)

	PutLTENetworkIDDescription(params *PutLTENetworkIDDescriptionParams, opts ...ClientOption) (*PutLTENetworkIDDescriptionNoContent, error)

	PutLTENetworkIDFeatures(params *PutLTENetworkIDFeaturesParams, opts ...ClientOption) (*PutLTENetworkIDFeaturesNoContent, error)

	PutLTENetworkIDGatewayPoolsGatewayPoolID(params *PutLTENetworkIDGatewayPoolsGatewayPoolIDParams, opts ...ClientOption) (*PutLTENetworkIDGatewayPoolsGatewayPoolIDCreated, error)

	PutLTENetworkIDName(params *PutLTENetworkIDNameParams, opts ...ClientOption) (*PutLTENetworkIDNameNoContent, error)

	PutLTENetworkIDSubscriberConfig(params *PutLTENetworkIDSubscriberConfigParams, opts ...ClientOption) (*PutLTENetworkIDSubscriberConfigNoContent, error)

	PutLTENetworkIDSubscriberConfigBaseNames(params *PutLTENetworkIDSubscriberConfigBaseNamesParams, opts ...ClientOption) (*PutLTENetworkIDSubscriberConfigBaseNamesNoContent, error)

	PutLTENetworkIDSubscriberConfigRuleNames(params *PutLTENetworkIDSubscriberConfigRuleNamesParams, opts ...ClientOption) (*PutLTENetworkIDSubscriberConfigRuleNamesNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteLTENetworkID deletes an LTE network
*/
func (a *Client) DeleteLTENetworkID(params *DeleteLTENetworkIDParams, opts ...ClientOption) (*DeleteLTENetworkIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLTENetworkIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteLTENetworkID",
		Method:             "DELETE",
		PathPattern:        "/lte/{network_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteLTENetworkIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLTENetworkIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteLTENetworkIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteLTENetworkIDDNSRecordsDomain deletes the DNS record for a specific domain
*/
func (a *Client) DeleteLTENetworkIDDNSRecordsDomain(params *DeleteLTENetworkIDDNSRecordsDomainParams, opts ...ClientOption) (*DeleteLTENetworkIDDNSRecordsDomainNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLTENetworkIDDNSRecordsDomainParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteLTENetworkIDDNSRecordsDomain",
		Method:             "DELETE",
		PathPattern:        "/lte/{network_id}/dns/records/{domain}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteLTENetworkIDDNSRecordsDomainReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLTENetworkIDDNSRecordsDomainNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteLTENetworkIDDNSRecordsDomainDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteLTENetworkIDGatewayPoolsGatewayPoolID deletes gateway pool from LTE network
*/
func (a *Client) DeleteLTENetworkIDGatewayPoolsGatewayPoolID(params *DeleteLTENetworkIDGatewayPoolsGatewayPoolIDParams, opts ...ClientOption) (*DeleteLTENetworkIDGatewayPoolsGatewayPoolIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLTENetworkIDGatewayPoolsGatewayPoolIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteLTENetworkIDGatewayPoolsGatewayPoolID",
		Method:             "DELETE",
		PathPattern:        "/lte/{network_id}/gateway_pools/{gateway_pool_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteLTENetworkIDGatewayPoolsGatewayPoolIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLTENetworkIDGatewayPoolsGatewayPoolIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteLTENetworkIDGatewayPoolsGatewayPoolIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteLTENetworkIDSubscriberConfigBaseNamesBaseName adds a network wide base name
*/
func (a *Client) DeleteLTENetworkIDSubscriberConfigBaseNamesBaseName(params *DeleteLTENetworkIDSubscriberConfigBaseNamesBaseNameParams, opts ...ClientOption) (*DeleteLTENetworkIDSubscriberConfigBaseNamesBaseNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLTENetworkIDSubscriberConfigBaseNamesBaseNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteLTENetworkIDSubscriberConfigBaseNamesBaseName",
		Method:             "DELETE",
		PathPattern:        "/lte/{network_id}/subscriber_config/base_names/{base_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteLTENetworkIDSubscriberConfigBaseNamesBaseNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLTENetworkIDSubscriberConfigBaseNamesBaseNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteLTENetworkIDSubscriberConfigBaseNamesBaseNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteLTENetworkIDSubscriberConfigRuleNamesRuleID adds a network wide rule name
*/
func (a *Client) DeleteLTENetworkIDSubscriberConfigRuleNamesRuleID(params *DeleteLTENetworkIDSubscriberConfigRuleNamesRuleIDParams, opts ...ClientOption) (*DeleteLTENetworkIDSubscriberConfigRuleNamesRuleIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLTENetworkIDSubscriberConfigRuleNamesRuleIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteLTENetworkIDSubscriberConfigRuleNamesRuleID",
		Method:             "DELETE",
		PathPattern:        "/lte/{network_id}/subscriber_config/rule_names/{rule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteLTENetworkIDSubscriberConfigRuleNamesRuleIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLTENetworkIDSubscriberConfigRuleNamesRuleIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteLTENetworkIDSubscriberConfigRuleNamesRuleIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetLTE lists all LTE network i ds
*/
func (a *Client) GetLTE(params *GetLTEParams, opts ...ClientOption) (*GetLTEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLTE",
		Method:             "GET",
		PathPattern:        "/lte",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTEDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetLTENetworkID describes an LTE network
*/
func (a *Client) GetLTENetworkID(params *GetLTENetworkIDParams, opts ...ClientOption) (*GetLTENetworkIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLTENetworkID",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetLTENetworkIDCellular gets cellular configuration of LTE network
*/
func (a *Client) GetLTENetworkIDCellular(params *GetLTENetworkIDCellularParams, opts ...ClientOption) (*GetLTENetworkIDCellularOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDCellularParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLTENetworkIDCellular",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/cellular",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDCellularReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDCellularOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDCellularDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetLTENetworkIDCellularEpc gets e p c configuration of LTE network
*/
func (a *Client) GetLTENetworkIDCellularEpc(params *GetLTENetworkIDCellularEpcParams, opts ...ClientOption) (*GetLTENetworkIDCellularEpcOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDCellularEpcParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLTENetworkIDCellularEpc",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/cellular/epc",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDCellularEpcReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDCellularEpcOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDCellularEpcDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetLTENetworkIDCellularFegNetworkID gets federation gateway network ID for the network
*/
func (a *Client) GetLTENetworkIDCellularFegNetworkID(params *GetLTENetworkIDCellularFegNetworkIDParams, opts ...ClientOption) (*GetLTENetworkIDCellularFegNetworkIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDCellularFegNetworkIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLTENetworkIDCellularFegNetworkID",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/cellular/feg_network_id",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDCellularFegNetworkIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDCellularFegNetworkIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDCellularFegNetworkIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetLTENetworkIDCellularRan gets r a n configuration of LTE network
*/
func (a *Client) GetLTENetworkIDCellularRan(params *GetLTENetworkIDCellularRanParams, opts ...ClientOption) (*GetLTENetworkIDCellularRanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDCellularRanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLTENetworkIDCellularRan",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/cellular/ran",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDCellularRanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDCellularRanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDCellularRanDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetLTENetworkIDDNS gets DNS configuration of LTE network
*/
func (a *Client) GetLTENetworkIDDNS(params *GetLTENetworkIDDNSParams, opts ...ClientOption) (*GetLTENetworkIDDNSOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDDNSParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLTENetworkIDDNS",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/dns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDDNSReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDDNSOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDDNSDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetLTENetworkIDDNSRecords gets the DNS config records for the LTE network
*/
func (a *Client) GetLTENetworkIDDNSRecords(params *GetLTENetworkIDDNSRecordsParams, opts ...ClientOption) (*GetLTENetworkIDDNSRecordsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDDNSRecordsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLTENetworkIDDNSRecords",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/dns/records",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDDNSRecordsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDDNSRecordsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDDNSRecordsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetLTENetworkIDDNSRecordsDomain gets the DNS config record for a specific domain
*/
func (a *Client) GetLTENetworkIDDNSRecordsDomain(params *GetLTENetworkIDDNSRecordsDomainParams, opts ...ClientOption) (*GetLTENetworkIDDNSRecordsDomainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDDNSRecordsDomainParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLTENetworkIDDNSRecordsDomain",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/dns/records/{domain}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDDNSRecordsDomainReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDDNSRecordsDomainOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDDNSRecordsDomainDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetLTENetworkIDDescription gets description of an LTE network
*/
func (a *Client) GetLTENetworkIDDescription(params *GetLTENetworkIDDescriptionParams, opts ...ClientOption) (*GetLTENetworkIDDescriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDDescriptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLTENetworkIDDescription",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/description",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDDescriptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDDescriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDDescriptionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetLTENetworkIDFeatures gets feature flags for LTE network
*/
func (a *Client) GetLTENetworkIDFeatures(params *GetLTENetworkIDFeaturesParams, opts ...ClientOption) (*GetLTENetworkIDFeaturesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDFeaturesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLTENetworkIDFeatures",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/features",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDFeaturesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDFeaturesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDFeaturesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetLTENetworkIDGatewayPools lists all gateway pools in LTE network
*/
func (a *Client) GetLTENetworkIDGatewayPools(params *GetLTENetworkIDGatewayPoolsParams, opts ...ClientOption) (*GetLTENetworkIDGatewayPoolsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDGatewayPoolsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLTENetworkIDGatewayPools",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/gateway_pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDGatewayPoolsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDGatewayPoolsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDGatewayPoolsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetLTENetworkIDGatewayPoolsGatewayPoolID retrieves gateway pool from LTE network
*/
func (a *Client) GetLTENetworkIDGatewayPoolsGatewayPoolID(params *GetLTENetworkIDGatewayPoolsGatewayPoolIDParams, opts ...ClientOption) (*GetLTENetworkIDGatewayPoolsGatewayPoolIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDGatewayPoolsGatewayPoolIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLTENetworkIDGatewayPoolsGatewayPoolID",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/gateway_pools/{gateway_pool_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDGatewayPoolsGatewayPoolIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDGatewayPoolsGatewayPoolIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDGatewayPoolsGatewayPoolIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetLTENetworkIDName gets name of an LTE network
*/
func (a *Client) GetLTENetworkIDName(params *GetLTENetworkIDNameParams, opts ...ClientOption) (*GetLTENetworkIDNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLTENetworkIDName",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetLTENetworkIDSubscriberConfig gets a network wide subscriber config
*/
func (a *Client) GetLTENetworkIDSubscriberConfig(params *GetLTENetworkIDSubscriberConfigParams, opts ...ClientOption) (*GetLTENetworkIDSubscriberConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDSubscriberConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLTENetworkIDSubscriberConfig",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/subscriber_config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDSubscriberConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDSubscriberConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDSubscriberConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetLTENetworkIDSubscriberConfigBaseNames gets network wide base names
*/
func (a *Client) GetLTENetworkIDSubscriberConfigBaseNames(params *GetLTENetworkIDSubscriberConfigBaseNamesParams, opts ...ClientOption) (*GetLTENetworkIDSubscriberConfigBaseNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDSubscriberConfigBaseNamesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLTENetworkIDSubscriberConfigBaseNames",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/subscriber_config/base_names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDSubscriberConfigBaseNamesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDSubscriberConfigBaseNamesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDSubscriberConfigBaseNamesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetLTENetworkIDSubscriberConfigRuleNames gets network wide rule names
*/
func (a *Client) GetLTENetworkIDSubscriberConfigRuleNames(params *GetLTENetworkIDSubscriberConfigRuleNamesParams, opts ...ClientOption) (*GetLTENetworkIDSubscriberConfigRuleNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDSubscriberConfigRuleNamesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLTENetworkIDSubscriberConfigRuleNames",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/subscriber_config/rule_names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDSubscriberConfigRuleNamesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDSubscriberConfigRuleNamesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDSubscriberConfigRuleNamesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostLTE creates a new LTE network
*/
func (a *Client) PostLTE(params *PostLTEParams, opts ...ClientOption) (*PostLTECreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLTEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostLTE",
		Method:             "POST",
		PathPattern:        "/lte",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostLTEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLTECreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostLTEDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostLTENetworkIDDNSRecordsDomain creates a DNS record for a specific domain
*/
func (a *Client) PostLTENetworkIDDNSRecordsDomain(params *PostLTENetworkIDDNSRecordsDomainParams, opts ...ClientOption) (*PostLTENetworkIDDNSRecordsDomainCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLTENetworkIDDNSRecordsDomainParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostLTENetworkIDDNSRecordsDomain",
		Method:             "POST",
		PathPattern:        "/lte/{network_id}/dns/records/{domain}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostLTENetworkIDDNSRecordsDomainReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLTENetworkIDDNSRecordsDomainCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostLTENetworkIDDNSRecordsDomainDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostLTENetworkIDGatewayPools creates new gateway pool in LTE network
*/
func (a *Client) PostLTENetworkIDGatewayPools(params *PostLTENetworkIDGatewayPoolsParams, opts ...ClientOption) (*PostLTENetworkIDGatewayPoolsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLTENetworkIDGatewayPoolsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostLTENetworkIDGatewayPools",
		Method:             "POST",
		PathPattern:        "/lte/{network_id}/gateway_pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostLTENetworkIDGatewayPoolsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLTENetworkIDGatewayPoolsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostLTENetworkIDGatewayPoolsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostLTENetworkIDSubscriberConfigBaseNamesBaseName adds a network wide base name
*/
func (a *Client) PostLTENetworkIDSubscriberConfigBaseNamesBaseName(params *PostLTENetworkIDSubscriberConfigBaseNamesBaseNameParams, opts ...ClientOption) (*PostLTENetworkIDSubscriberConfigBaseNamesBaseNameCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLTENetworkIDSubscriberConfigBaseNamesBaseNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostLTENetworkIDSubscriberConfigBaseNamesBaseName",
		Method:             "POST",
		PathPattern:        "/lte/{network_id}/subscriber_config/base_names/{base_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostLTENetworkIDSubscriberConfigBaseNamesBaseNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLTENetworkIDSubscriberConfigBaseNamesBaseNameCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostLTENetworkIDSubscriberConfigBaseNamesBaseNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostLTENetworkIDSubscriberConfigRuleNamesRuleID adds a network wide rule name
*/
func (a *Client) PostLTENetworkIDSubscriberConfigRuleNamesRuleID(params *PostLTENetworkIDSubscriberConfigRuleNamesRuleIDParams, opts ...ClientOption) (*PostLTENetworkIDSubscriberConfigRuleNamesRuleIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLTENetworkIDSubscriberConfigRuleNamesRuleIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostLTENetworkIDSubscriberConfigRuleNamesRuleID",
		Method:             "POST",
		PathPattern:        "/lte/{network_id}/subscriber_config/rule_names/{rule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostLTENetworkIDSubscriberConfigRuleNamesRuleIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLTENetworkIDSubscriberConfigRuleNamesRuleIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostLTENetworkIDSubscriberConfigRuleNamesRuleIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutLTENetworkID updates an entire LTE network
*/
func (a *Client) PutLTENetworkID(params *PutLTENetworkIDParams, opts ...ClientOption) (*PutLTENetworkIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLTENetworkIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutLTENetworkID",
		Method:             "PUT",
		PathPattern:        "/lte/{network_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLTENetworkIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLTENetworkIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLTENetworkIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutLTENetworkIDCellular updates cellular configuration of LTE network
*/
func (a *Client) PutLTENetworkIDCellular(params *PutLTENetworkIDCellularParams, opts ...ClientOption) (*PutLTENetworkIDCellularNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLTENetworkIDCellularParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutLTENetworkIDCellular",
		Method:             "PUT",
		PathPattern:        "/lte/{network_id}/cellular",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLTENetworkIDCellularReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLTENetworkIDCellularNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLTENetworkIDCellularDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutLTENetworkIDCellularEpc updates e p c configuration of LTE network
*/
func (a *Client) PutLTENetworkIDCellularEpc(params *PutLTENetworkIDCellularEpcParams, opts ...ClientOption) (*PutLTENetworkIDCellularEpcNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLTENetworkIDCellularEpcParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutLTENetworkIDCellularEpc",
		Method:             "PUT",
		PathPattern:        "/lte/{network_id}/cellular/epc",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLTENetworkIDCellularEpcReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLTENetworkIDCellularEpcNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLTENetworkIDCellularEpcDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutLTENetworkIDCellularFegNetworkID updates the federation gateway network ID
*/
func (a *Client) PutLTENetworkIDCellularFegNetworkID(params *PutLTENetworkIDCellularFegNetworkIDParams, opts ...ClientOption) (*PutLTENetworkIDCellularFegNetworkIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLTENetworkIDCellularFegNetworkIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutLTENetworkIDCellularFegNetworkID",
		Method:             "PUT",
		PathPattern:        "/lte/{network_id}/cellular/feg_network_id",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLTENetworkIDCellularFegNetworkIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLTENetworkIDCellularFegNetworkIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLTENetworkIDCellularFegNetworkIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutLTENetworkIDCellularRan updates r a n configuration of LTE network
*/
func (a *Client) PutLTENetworkIDCellularRan(params *PutLTENetworkIDCellularRanParams, opts ...ClientOption) (*PutLTENetworkIDCellularRanNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLTENetworkIDCellularRanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutLTENetworkIDCellularRan",
		Method:             "PUT",
		PathPattern:        "/lte/{network_id}/cellular/ran",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLTENetworkIDCellularRanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLTENetworkIDCellularRanNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLTENetworkIDCellularRanDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutLTENetworkIDDNS updates DNS configuration of LTE network
*/
func (a *Client) PutLTENetworkIDDNS(params *PutLTENetworkIDDNSParams, opts ...ClientOption) (*PutLTENetworkIDDNSNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLTENetworkIDDNSParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutLTENetworkIDDNS",
		Method:             "PUT",
		PathPattern:        "/lte/{network_id}/dns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLTENetworkIDDNSReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLTENetworkIDDNSNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLTENetworkIDDNSDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutLTENetworkIDDNSRecords changes all the DNS records for the LTE network
*/
func (a *Client) PutLTENetworkIDDNSRecords(params *PutLTENetworkIDDNSRecordsParams, opts ...ClientOption) (*PutLTENetworkIDDNSRecordsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLTENetworkIDDNSRecordsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutLTENetworkIDDNSRecords",
		Method:             "PUT",
		PathPattern:        "/lte/{network_id}/dns/records",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLTENetworkIDDNSRecordsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLTENetworkIDDNSRecordsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLTENetworkIDDNSRecordsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutLTENetworkIDDNSRecordsDomain updates a DNS record for a specific domain
*/
func (a *Client) PutLTENetworkIDDNSRecordsDomain(params *PutLTENetworkIDDNSRecordsDomainParams, opts ...ClientOption) (*PutLTENetworkIDDNSRecordsDomainNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLTENetworkIDDNSRecordsDomainParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutLTENetworkIDDNSRecordsDomain",
		Method:             "PUT",
		PathPattern:        "/lte/{network_id}/dns/records/{domain}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLTENetworkIDDNSRecordsDomainReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLTENetworkIDDNSRecordsDomainNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLTENetworkIDDNSRecordsDomainDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutLTENetworkIDDescription updates the description of an LTE network
*/
func (a *Client) PutLTENetworkIDDescription(params *PutLTENetworkIDDescriptionParams, opts ...ClientOption) (*PutLTENetworkIDDescriptionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLTENetworkIDDescriptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutLTENetworkIDDescription",
		Method:             "PUT",
		PathPattern:        "/lte/{network_id}/description",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLTENetworkIDDescriptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLTENetworkIDDescriptionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLTENetworkIDDescriptionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutLTENetworkIDFeatures updates feature flags for LTE network
*/
func (a *Client) PutLTENetworkIDFeatures(params *PutLTENetworkIDFeaturesParams, opts ...ClientOption) (*PutLTENetworkIDFeaturesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLTENetworkIDFeaturesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutLTENetworkIDFeatures",
		Method:             "PUT",
		PathPattern:        "/lte/{network_id}/features",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLTENetworkIDFeaturesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLTENetworkIDFeaturesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLTENetworkIDFeaturesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutLTENetworkIDGatewayPoolsGatewayPoolID updates gateway pool in LTE network
*/
func (a *Client) PutLTENetworkIDGatewayPoolsGatewayPoolID(params *PutLTENetworkIDGatewayPoolsGatewayPoolIDParams, opts ...ClientOption) (*PutLTENetworkIDGatewayPoolsGatewayPoolIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLTENetworkIDGatewayPoolsGatewayPoolIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutLTENetworkIDGatewayPoolsGatewayPoolID",
		Method:             "PUT",
		PathPattern:        "/lte/{network_id}/gateway_pools/{gateway_pool_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLTENetworkIDGatewayPoolsGatewayPoolIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLTENetworkIDGatewayPoolsGatewayPoolIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLTENetworkIDGatewayPoolsGatewayPoolIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutLTENetworkIDName updates the name of an LTE network
*/
func (a *Client) PutLTENetworkIDName(params *PutLTENetworkIDNameParams, opts ...ClientOption) (*PutLTENetworkIDNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLTENetworkIDNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutLTENetworkIDName",
		Method:             "PUT",
		PathPattern:        "/lte/{network_id}/name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLTENetworkIDNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLTENetworkIDNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLTENetworkIDNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutLTENetworkIDSubscriberConfig updates a network wide subscriber config
*/
func (a *Client) PutLTENetworkIDSubscriberConfig(params *PutLTENetworkIDSubscriberConfigParams, opts ...ClientOption) (*PutLTENetworkIDSubscriberConfigNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLTENetworkIDSubscriberConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutLTENetworkIDSubscriberConfig",
		Method:             "PUT",
		PathPattern:        "/lte/{network_id}/subscriber_config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLTENetworkIDSubscriberConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLTENetworkIDSubscriberConfigNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLTENetworkIDSubscriberConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutLTENetworkIDSubscriberConfigBaseNames updates network wide base names
*/
func (a *Client) PutLTENetworkIDSubscriberConfigBaseNames(params *PutLTENetworkIDSubscriberConfigBaseNamesParams, opts ...ClientOption) (*PutLTENetworkIDSubscriberConfigBaseNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLTENetworkIDSubscriberConfigBaseNamesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutLTENetworkIDSubscriberConfigBaseNames",
		Method:             "PUT",
		PathPattern:        "/lte/{network_id}/subscriber_config/base_names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLTENetworkIDSubscriberConfigBaseNamesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLTENetworkIDSubscriberConfigBaseNamesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLTENetworkIDSubscriberConfigBaseNamesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutLTENetworkIDSubscriberConfigRuleNames updates network wide rule names
*/
func (a *Client) PutLTENetworkIDSubscriberConfigRuleNames(params *PutLTENetworkIDSubscriberConfigRuleNamesParams, opts ...ClientOption) (*PutLTENetworkIDSubscriberConfigRuleNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLTENetworkIDSubscriberConfigRuleNamesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutLTENetworkIDSubscriberConfigRuleNames",
		Method:             "PUT",
		PathPattern:        "/lte/{network_id}/subscriber_config/rule_names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLTENetworkIDSubscriberConfigRuleNamesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLTENetworkIDSubscriberConfigRuleNamesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLTENetworkIDSubscriberConfigRuleNamesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
