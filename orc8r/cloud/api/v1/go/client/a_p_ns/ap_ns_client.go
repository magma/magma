// Code generated by go-swagger; DO NOT EDIT.

package a_p_ns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new a p ns API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for a p ns API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteLTENetworkIDAPNSAPNName(params *DeleteLTENetworkIDAPNSAPNNameParams, opts ...ClientOption) (*DeleteLTENetworkIDAPNSAPNNameNoContent, error)

	GetLTENetworkIDAPNS(params *GetLTENetworkIDAPNSParams, opts ...ClientOption) (*GetLTENetworkIDAPNSOK, error)

	GetLTENetworkIDAPNSAPNName(params *GetLTENetworkIDAPNSAPNNameParams, opts ...ClientOption) (*GetLTENetworkIDAPNSAPNNameOK, error)

	PostLTENetworkIDAPNS(params *PostLTENetworkIDAPNSParams, opts ...ClientOption) (*PostLTENetworkIDAPNSCreated, error)

	PutLTENetworkIDAPNSAPNName(params *PutLTENetworkIDAPNSAPNNameParams, opts ...ClientOption) (*PutLTENetworkIDAPNSAPNNameNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteLTENetworkIDAPNSAPNName removes an APN from the network
*/
func (a *Client) DeleteLTENetworkIDAPNSAPNName(params *DeleteLTENetworkIDAPNSAPNNameParams, opts ...ClientOption) (*DeleteLTENetworkIDAPNSAPNNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLTENetworkIDAPNSAPNNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteLTENetworkIDAPNSAPNName",
		Method:             "DELETE",
		PathPattern:        "/lte/{network_id}/apns/{apn_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteLTENetworkIDAPNSAPNNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLTENetworkIDAPNSAPNNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteLTENetworkIDAPNSAPNNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetLTENetworkIDAPNS lists a p ns in the network
*/
func (a *Client) GetLTENetworkIDAPNS(params *GetLTENetworkIDAPNSParams, opts ...ClientOption) (*GetLTENetworkIDAPNSOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDAPNSParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLTENetworkIDAPNS",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/apns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDAPNSReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDAPNSOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDAPNSDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetLTENetworkIDAPNSAPNName retrieves the APN info
*/
func (a *Client) GetLTENetworkIDAPNSAPNName(params *GetLTENetworkIDAPNSAPNNameParams, opts ...ClientOption) (*GetLTENetworkIDAPNSAPNNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDAPNSAPNNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLTENetworkIDAPNSAPNName",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/apns/{apn_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDAPNSAPNNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDAPNSAPNNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDAPNSAPNNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostLTENetworkIDAPNS adds a new APN to the network
*/
func (a *Client) PostLTENetworkIDAPNS(params *PostLTENetworkIDAPNSParams, opts ...ClientOption) (*PostLTENetworkIDAPNSCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLTENetworkIDAPNSParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostLTENetworkIDAPNS",
		Method:             "POST",
		PathPattern:        "/lte/{network_id}/apns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostLTENetworkIDAPNSReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLTENetworkIDAPNSCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostLTENetworkIDAPNSDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutLTENetworkIDAPNSAPNName updates an existing APN in the network
*/
func (a *Client) PutLTENetworkIDAPNSAPNName(params *PutLTENetworkIDAPNSAPNNameParams, opts ...ClientOption) (*PutLTENetworkIDAPNSAPNNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLTENetworkIDAPNSAPNNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutLTENetworkIDAPNSAPNName",
		Method:             "PUT",
		PathPattern:        "/lte/{network_id}/apns/{apn_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLTENetworkIDAPNSAPNNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLTENetworkIDAPNSAPNNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLTENetworkIDAPNSAPNNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
