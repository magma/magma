// Code generated by go-swagger; DO NOT EDIT.

package e2e

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new e2e API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for e2e API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteTestsE2eEnodebdTestPk deletes enodebd e2e test case
*/
func (a *Client) DeleteTestsE2eEnodebdTestPk(params *DeleteTestsE2eEnodebdTestPkParams) (*DeleteTestsE2eEnodebdTestPkNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTestsE2eEnodebdTestPkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteTestsE2eEnodebdTestPk",
		Method:             "DELETE",
		PathPattern:        "/tests/e2e/enodebd/{test_pk}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTestsE2eEnodebdTestPkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTestsE2eEnodebdTestPkNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteTestsE2eEnodebdTestPkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTestsE2e lists e2e tests
*/
func (a *Client) GetTestsE2e(params *GetTestsE2eParams) (*GetTestsE2eOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTestsE2eParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTestsE2e",
		Method:             "GET",
		PathPattern:        "/tests/e2e",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTestsE2eReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTestsE2eOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTestsE2eDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTestsE2eEnodebd lists enodebd e2e test cases
*/
func (a *Client) GetTestsE2eEnodebd(params *GetTestsE2eEnodebdParams) (*GetTestsE2eEnodebdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTestsE2eEnodebdParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTestsE2eEnodebd",
		Method:             "GET",
		PathPattern:        "/tests/e2e/enodebd",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTestsE2eEnodebdReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTestsE2eEnodebdOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTestsE2eEnodebdDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTestsE2eEnodebdTestPk gets enodebd e2e test case
*/
func (a *Client) GetTestsE2eEnodebdTestPk(params *GetTestsE2eEnodebdTestPkParams) (*GetTestsE2eEnodebdTestPkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTestsE2eEnodebdTestPkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTestsE2eEnodebdTestPk",
		Method:             "GET",
		PathPattern:        "/tests/e2e/enodebd/{test_pk}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTestsE2eEnodebdTestPkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTestsE2eEnodebdTestPkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTestsE2eEnodebdTestPkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostTestsE2eEnodebd creates new enodebe e2e test case
*/
func (a *Client) PostTestsE2eEnodebd(params *PostTestsE2eEnodebdParams) (*PostTestsE2eEnodebdCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTestsE2eEnodebdParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTestsE2eEnodebd",
		Method:             "POST",
		PathPattern:        "/tests/e2e/enodebd",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostTestsE2eEnodebdReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostTestsE2eEnodebdCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostTestsE2eEnodebdDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutTestsE2eEnodebdTestPk updates enodebd e2e test case
*/
func (a *Client) PutTestsE2eEnodebdTestPk(params *PutTestsE2eEnodebdTestPkParams) (*PutTestsE2eEnodebdTestPkNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutTestsE2eEnodebdTestPkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutTestsE2eEnodebdTestPk",
		Method:             "PUT",
		PathPattern:        "/tests/e2e/enodebd/{test_pk}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutTestsE2eEnodebdTestPkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutTestsE2eEnodebdTestPkNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutTestsE2eEnodebdTestPkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
