// Code generated by go-swagger; DO NOT EDIT.

package lte_gateways

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new lte gateways API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for lte gateways API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteLTENetworkIDGatewaysGatewayID deletes an LTE gateway
*/
func (a *Client) DeleteLTENetworkIDGatewaysGatewayID(params *DeleteLTENetworkIDGatewaysGatewayIDParams) (*DeleteLTENetworkIDGatewaysGatewayIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLTENetworkIDGatewaysGatewayIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLTENetworkIDGatewaysGatewayID",
		Method:             "DELETE",
		PathPattern:        "/lte/{network_id}/gateways/{gateway_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteLTENetworkIDGatewaysGatewayIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLTENetworkIDGatewaysGatewayIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteLTENetworkIDGatewaysGatewayIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteLTENetworkIDGatewaysGatewayIDConnectedENODEBSerials removes an enode b from the connected devices list
*/
func (a *Client) DeleteLTENetworkIDGatewaysGatewayIDConnectedENODEBSerials(params *DeleteLTENetworkIDGatewaysGatewayIDConnectedENODEBSerialsParams) (*DeleteLTENetworkIDGatewaysGatewayIDConnectedENODEBSerialsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLTENetworkIDGatewaysGatewayIDConnectedENODEBSerialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLTENetworkIDGatewaysGatewayIDConnectedENODEBSerials",
		Method:             "DELETE",
		PathPattern:        "/lte/{network_id}/gateways/{gateway_id}/connected_enodeb_serials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteLTENetworkIDGatewaysGatewayIDConnectedENODEBSerialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLTENetworkIDGatewaysGatewayIDConnectedENODEBSerialsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteLTENetworkIDGatewaysGatewayIDConnectedENODEBSerialsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLTENetworkIDGateways lists all gateways for an LTE network
*/
func (a *Client) GetLTENetworkIDGateways(params *GetLTENetworkIDGatewaysParams) (*GetLTENetworkIDGatewaysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDGatewaysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLTENetworkIDGateways",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/gateways",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDGatewaysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDGatewaysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDGatewaysDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLTENetworkIDGatewaysGatewayID gets a specific LTE gateway
*/
func (a *Client) GetLTENetworkIDGatewaysGatewayID(params *GetLTENetworkIDGatewaysGatewayIDParams) (*GetLTENetworkIDGatewaysGatewayIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDGatewaysGatewayIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLTENetworkIDGatewaysGatewayID",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/gateways/{gateway_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDGatewaysGatewayIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDGatewaysGatewayIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDGatewaysGatewayIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLTENetworkIDGatewaysGatewayIDCellular gets gateway cellular configuration
*/
func (a *Client) GetLTENetworkIDGatewaysGatewayIDCellular(params *GetLTENetworkIDGatewaysGatewayIDCellularParams) (*GetLTENetworkIDGatewaysGatewayIDCellularNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDGatewaysGatewayIDCellularParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLTENetworkIDGatewaysGatewayIDCellular",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/gateways/{gateway_id}/cellular",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDGatewaysGatewayIDCellularReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDGatewaysGatewayIDCellularNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDGatewaysGatewayIDCellularDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLTENetworkIDGatewaysGatewayIDCellularDNS gets DNS configuration of LTE gateway
*/
func (a *Client) GetLTENetworkIDGatewaysGatewayIDCellularDNS(params *GetLTENetworkIDGatewaysGatewayIDCellularDNSParams) (*GetLTENetworkIDGatewaysGatewayIDCellularDNSOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDGatewaysGatewayIDCellularDNSParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLTENetworkIDGatewaysGatewayIDCellularDNS",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/gateways/{gateway_id}/cellular/dns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDGatewaysGatewayIDCellularDNSReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDGatewaysGatewayIDCellularDNSOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDGatewaysGatewayIDCellularDNSDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLTENetworkIDGatewaysGatewayIDCellularDNSRecords gets the DNS config records for LTE gateway
*/
func (a *Client) GetLTENetworkIDGatewaysGatewayIDCellularDNSRecords(params *GetLTENetworkIDGatewaysGatewayIDCellularDNSRecordsParams) (*GetLTENetworkIDGatewaysGatewayIDCellularDNSRecordsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDGatewaysGatewayIDCellularDNSRecordsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLTENetworkIDGatewaysGatewayIDCellularDNSRecords",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/gateways/{gateway_id}/cellular/dns/records",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDGatewaysGatewayIDCellularDNSRecordsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDGatewaysGatewayIDCellularDNSRecordsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDGatewaysGatewayIDCellularDNSRecordsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLTENetworkIDGatewaysGatewayIDCellularEpc gets gateway e p c configuration
*/
func (a *Client) GetLTENetworkIDGatewaysGatewayIDCellularEpc(params *GetLTENetworkIDGatewaysGatewayIDCellularEpcParams) (*GetLTENetworkIDGatewaysGatewayIDCellularEpcNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDGatewaysGatewayIDCellularEpcParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLTENetworkIDGatewaysGatewayIDCellularEpc",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/gateways/{gateway_id}/cellular/epc",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDGatewaysGatewayIDCellularEpcReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDGatewaysGatewayIDCellularEpcNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDGatewaysGatewayIDCellularEpcDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLTENetworkIDGatewaysGatewayIDCellularNonEps gets gateway non e p s configuration
*/
func (a *Client) GetLTENetworkIDGatewaysGatewayIDCellularNonEps(params *GetLTENetworkIDGatewaysGatewayIDCellularNonEpsParams) (*GetLTENetworkIDGatewaysGatewayIDCellularNonEpsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDGatewaysGatewayIDCellularNonEpsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLTENetworkIDGatewaysGatewayIDCellularNonEps",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/gateways/{gateway_id}/cellular/non_eps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDGatewaysGatewayIDCellularNonEpsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDGatewaysGatewayIDCellularNonEpsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDGatewaysGatewayIDCellularNonEpsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLTENetworkIDGatewaysGatewayIDCellularPooling gets the gateway pool records for LTE gateway
*/
func (a *Client) GetLTENetworkIDGatewaysGatewayIDCellularPooling(params *GetLTENetworkIDGatewaysGatewayIDCellularPoolingParams) (*GetLTENetworkIDGatewaysGatewayIDCellularPoolingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDGatewaysGatewayIDCellularPoolingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLTENetworkIDGatewaysGatewayIDCellularPooling",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/gateways/{gateway_id}/cellular/pooling",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDGatewaysGatewayIDCellularPoolingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDGatewaysGatewayIDCellularPoolingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDGatewaysGatewayIDCellularPoolingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLTENetworkIDGatewaysGatewayIDCellularRan gets gateway r a n configuration
*/
func (a *Client) GetLTENetworkIDGatewaysGatewayIDCellularRan(params *GetLTENetworkIDGatewaysGatewayIDCellularRanParams) (*GetLTENetworkIDGatewaysGatewayIDCellularRanNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDGatewaysGatewayIDCellularRanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLTENetworkIDGatewaysGatewayIDCellularRan",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/gateways/{gateway_id}/cellular/ran",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDGatewaysGatewayIDCellularRanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDGatewaysGatewayIDCellularRanNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDGatewaysGatewayIDCellularRanDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLTENetworkIDGatewaysGatewayIDConnectedENODEBSerials gets the s ns of all enode bs connected to a gateway
*/
func (a *Client) GetLTENetworkIDGatewaysGatewayIDConnectedENODEBSerials(params *GetLTENetworkIDGatewaysGatewayIDConnectedENODEBSerialsParams) (*GetLTENetworkIDGatewaysGatewayIDConnectedENODEBSerialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDGatewaysGatewayIDConnectedENODEBSerialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLTENetworkIDGatewaysGatewayIDConnectedENODEBSerials",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/gateways/{gateway_id}/connected_enodeb_serials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDGatewaysGatewayIDConnectedENODEBSerialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDGatewaysGatewayIDConnectedENODEBSerialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDGatewaysGatewayIDConnectedENODEBSerialsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLTENetworkIDGatewaysGatewayIDDescription gets the description of an LTE gateway
*/
func (a *Client) GetLTENetworkIDGatewaysGatewayIDDescription(params *GetLTENetworkIDGatewaysGatewayIDDescriptionParams) (*GetLTENetworkIDGatewaysGatewayIDDescriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDGatewaysGatewayIDDescriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLTENetworkIDGatewaysGatewayIDDescription",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/gateways/{gateway_id}/description",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDGatewaysGatewayIDDescriptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDGatewaysGatewayIDDescriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDGatewaysGatewayIDDescriptionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLTENetworkIDGatewaysGatewayIDDevice gets the physical device for an LTE gateway
*/
func (a *Client) GetLTENetworkIDGatewaysGatewayIDDevice(params *GetLTENetworkIDGatewaysGatewayIDDeviceParams) (*GetLTENetworkIDGatewaysGatewayIDDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDGatewaysGatewayIDDeviceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLTENetworkIDGatewaysGatewayIDDevice",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/gateways/{gateway_id}/device",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDGatewaysGatewayIDDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDGatewaysGatewayIDDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDGatewaysGatewayIDDeviceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLTENetworkIDGatewaysGatewayIDMagmad gets magmad agent configuration
*/
func (a *Client) GetLTENetworkIDGatewaysGatewayIDMagmad(params *GetLTENetworkIDGatewaysGatewayIDMagmadParams) (*GetLTENetworkIDGatewaysGatewayIDMagmadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDGatewaysGatewayIDMagmadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLTENetworkIDGatewaysGatewayIDMagmad",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/gateways/{gateway_id}/magmad",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDGatewaysGatewayIDMagmadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDGatewaysGatewayIDMagmadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDGatewaysGatewayIDMagmadDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLTENetworkIDGatewaysGatewayIDName gets the name of an LTE gateway
*/
func (a *Client) GetLTENetworkIDGatewaysGatewayIDName(params *GetLTENetworkIDGatewaysGatewayIDNameParams) (*GetLTENetworkIDGatewaysGatewayIDNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDGatewaysGatewayIDNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLTENetworkIDGatewaysGatewayIDName",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/gateways/{gateway_id}/name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDGatewaysGatewayIDNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDGatewaysGatewayIDNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDGatewaysGatewayIDNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLTENetworkIDGatewaysGatewayIDStatus gets the status of a gateway
*/
func (a *Client) GetLTENetworkIDGatewaysGatewayIDStatus(params *GetLTENetworkIDGatewaysGatewayIDStatusParams) (*GetLTENetworkIDGatewaysGatewayIDStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDGatewaysGatewayIDStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLTENetworkIDGatewaysGatewayIDStatus",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/gateways/{gateway_id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDGatewaysGatewayIDStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDGatewaysGatewayIDStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDGatewaysGatewayIDStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLTENetworkIDGatewaysGatewayIDTier gets the ID of the upgrade tier a gateway belongs to
*/
func (a *Client) GetLTENetworkIDGatewaysGatewayIDTier(params *GetLTENetworkIDGatewaysGatewayIDTierParams) (*GetLTENetworkIDGatewaysGatewayIDTierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDGatewaysGatewayIDTierParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLTENetworkIDGatewaysGatewayIDTier",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/gateways/{gateway_id}/tier",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDGatewaysGatewayIDTierReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDGatewaysGatewayIDTierOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDGatewaysGatewayIDTierDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLTENetworkIDGatewaysGatewayIDVpn gets the gateway v p n configuration
*/
func (a *Client) GetLTENetworkIDGatewaysGatewayIDVpn(params *GetLTENetworkIDGatewaysGatewayIDVpnParams) (*GetLTENetworkIDGatewaysGatewayIDVpnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDGatewaysGatewayIDVpnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLTENetworkIDGatewaysGatewayIDVpn",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/gateways/{gateway_id}/vpn",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDGatewaysGatewayIDVpnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDGatewaysGatewayIDVpnOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDGatewaysGatewayIDVpnDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostLTENetworkIDGateways registers a new LTE gateway
*/
func (a *Client) PostLTENetworkIDGateways(params *PostLTENetworkIDGatewaysParams) (*PostLTENetworkIDGatewaysCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLTENetworkIDGatewaysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLTENetworkIDGateways",
		Method:             "POST",
		PathPattern:        "/lte/{network_id}/gateways",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostLTENetworkIDGatewaysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLTENetworkIDGatewaysCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostLTENetworkIDGatewaysDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostLTENetworkIDGatewaysGatewayIDConnectedENODEBSerials adds a new connected enode b to a gateway
*/
func (a *Client) PostLTENetworkIDGatewaysGatewayIDConnectedENODEBSerials(params *PostLTENetworkIDGatewaysGatewayIDConnectedENODEBSerialsParams) (*PostLTENetworkIDGatewaysGatewayIDConnectedENODEBSerialsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLTENetworkIDGatewaysGatewayIDConnectedENODEBSerialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLTENetworkIDGatewaysGatewayIDConnectedENODEBSerials",
		Method:             "POST",
		PathPattern:        "/lte/{network_id}/gateways/{gateway_id}/connected_enodeb_serials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostLTENetworkIDGatewaysGatewayIDConnectedENODEBSerialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLTENetworkIDGatewaysGatewayIDConnectedENODEBSerialsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostLTENetworkIDGatewaysGatewayIDConnectedENODEBSerialsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutLTENetworkIDGatewaysGatewayID updates an entire LTE gateway record
*/
func (a *Client) PutLTENetworkIDGatewaysGatewayID(params *PutLTENetworkIDGatewaysGatewayIDParams) (*PutLTENetworkIDGatewaysGatewayIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLTENetworkIDGatewaysGatewayIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLTENetworkIDGatewaysGatewayID",
		Method:             "PUT",
		PathPattern:        "/lte/{network_id}/gateways/{gateway_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLTENetworkIDGatewaysGatewayIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLTENetworkIDGatewaysGatewayIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLTENetworkIDGatewaysGatewayIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutLTENetworkIDGatewaysGatewayIDCellular updates gateway cellular configuration
*/
func (a *Client) PutLTENetworkIDGatewaysGatewayIDCellular(params *PutLTENetworkIDGatewaysGatewayIDCellularParams) (*PutLTENetworkIDGatewaysGatewayIDCellularNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLTENetworkIDGatewaysGatewayIDCellularParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLTENetworkIDGatewaysGatewayIDCellular",
		Method:             "PUT",
		PathPattern:        "/lte/{network_id}/gateways/{gateway_id}/cellular",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLTENetworkIDGatewaysGatewayIDCellularReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLTENetworkIDGatewaysGatewayIDCellularNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLTENetworkIDGatewaysGatewayIDCellularDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutLTENetworkIDGatewaysGatewayIDCellularDNS updates DNS configuration of LTE gateway
*/
func (a *Client) PutLTENetworkIDGatewaysGatewayIDCellularDNS(params *PutLTENetworkIDGatewaysGatewayIDCellularDNSParams) (*PutLTENetworkIDGatewaysGatewayIDCellularDNSNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLTENetworkIDGatewaysGatewayIDCellularDNSParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLTENetworkIDGatewaysGatewayIDCellularDNS",
		Method:             "PUT",
		PathPattern:        "/lte/{network_id}/gateways/{gateway_id}/cellular/dns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLTENetworkIDGatewaysGatewayIDCellularDNSReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLTENetworkIDGatewaysGatewayIDCellularDNSNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLTENetworkIDGatewaysGatewayIDCellularDNSDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutLTENetworkIDGatewaysGatewayIDCellularDNSRecords changes all the DNS records for LTE gateway
*/
func (a *Client) PutLTENetworkIDGatewaysGatewayIDCellularDNSRecords(params *PutLTENetworkIDGatewaysGatewayIDCellularDNSRecordsParams) (*PutLTENetworkIDGatewaysGatewayIDCellularDNSRecordsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLTENetworkIDGatewaysGatewayIDCellularDNSRecordsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLTENetworkIDGatewaysGatewayIDCellularDNSRecords",
		Method:             "PUT",
		PathPattern:        "/lte/{network_id}/gateways/{gateway_id}/cellular/dns/records",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLTENetworkIDGatewaysGatewayIDCellularDNSRecordsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLTENetworkIDGatewaysGatewayIDCellularDNSRecordsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLTENetworkIDGatewaysGatewayIDCellularDNSRecordsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutLTENetworkIDGatewaysGatewayIDCellularEpc updates gateway e p c configuration
*/
func (a *Client) PutLTENetworkIDGatewaysGatewayIDCellularEpc(params *PutLTENetworkIDGatewaysGatewayIDCellularEpcParams) (*PutLTENetworkIDGatewaysGatewayIDCellularEpcNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLTENetworkIDGatewaysGatewayIDCellularEpcParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLTENetworkIDGatewaysGatewayIDCellularEpc",
		Method:             "PUT",
		PathPattern:        "/lte/{network_id}/gateways/{gateway_id}/cellular/epc",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLTENetworkIDGatewaysGatewayIDCellularEpcReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLTENetworkIDGatewaysGatewayIDCellularEpcNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLTENetworkIDGatewaysGatewayIDCellularEpcDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutLTENetworkIDGatewaysGatewayIDCellularNonEps updates gateway non e p s configuration
*/
func (a *Client) PutLTENetworkIDGatewaysGatewayIDCellularNonEps(params *PutLTENetworkIDGatewaysGatewayIDCellularNonEpsParams) (*PutLTENetworkIDGatewaysGatewayIDCellularNonEpsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLTENetworkIDGatewaysGatewayIDCellularNonEpsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLTENetworkIDGatewaysGatewayIDCellularNonEps",
		Method:             "PUT",
		PathPattern:        "/lte/{network_id}/gateways/{gateway_id}/cellular/non_eps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLTENetworkIDGatewaysGatewayIDCellularNonEpsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLTENetworkIDGatewaysGatewayIDCellularNonEpsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLTENetworkIDGatewaysGatewayIDCellularNonEpsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutLTENetworkIDGatewaysGatewayIDCellularPooling changes all the gateway pool records for LTE gateway
*/
func (a *Client) PutLTENetworkIDGatewaysGatewayIDCellularPooling(params *PutLTENetworkIDGatewaysGatewayIDCellularPoolingParams) (*PutLTENetworkIDGatewaysGatewayIDCellularPoolingCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLTENetworkIDGatewaysGatewayIDCellularPoolingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLTENetworkIDGatewaysGatewayIDCellularPooling",
		Method:             "PUT",
		PathPattern:        "/lte/{network_id}/gateways/{gateway_id}/cellular/pooling",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLTENetworkIDGatewaysGatewayIDCellularPoolingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLTENetworkIDGatewaysGatewayIDCellularPoolingCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLTENetworkIDGatewaysGatewayIDCellularPoolingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutLTENetworkIDGatewaysGatewayIDCellularRan updates gateway r a n configuration
*/
func (a *Client) PutLTENetworkIDGatewaysGatewayIDCellularRan(params *PutLTENetworkIDGatewaysGatewayIDCellularRanParams) (*PutLTENetworkIDGatewaysGatewayIDCellularRanNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLTENetworkIDGatewaysGatewayIDCellularRanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLTENetworkIDGatewaysGatewayIDCellularRan",
		Method:             "PUT",
		PathPattern:        "/lte/{network_id}/gateways/{gateway_id}/cellular/ran",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLTENetworkIDGatewaysGatewayIDCellularRanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLTENetworkIDGatewaysGatewayIDCellularRanNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLTENetworkIDGatewaysGatewayIDCellularRanDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutLTENetworkIDGatewaysGatewayIDConnectedENODEBSerials updates the set of connected enode bs
*/
func (a *Client) PutLTENetworkIDGatewaysGatewayIDConnectedENODEBSerials(params *PutLTENetworkIDGatewaysGatewayIDConnectedENODEBSerialsParams) (*PutLTENetworkIDGatewaysGatewayIDConnectedENODEBSerialsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLTENetworkIDGatewaysGatewayIDConnectedENODEBSerialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLTENetworkIDGatewaysGatewayIDConnectedENODEBSerials",
		Method:             "PUT",
		PathPattern:        "/lte/{network_id}/gateways/{gateway_id}/connected_enodeb_serials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLTENetworkIDGatewaysGatewayIDConnectedENODEBSerialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLTENetworkIDGatewaysGatewayIDConnectedENODEBSerialsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLTENetworkIDGatewaysGatewayIDConnectedENODEBSerialsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutLTENetworkIDGatewaysGatewayIDDescription updates the description of an LTE gateway
*/
func (a *Client) PutLTENetworkIDGatewaysGatewayIDDescription(params *PutLTENetworkIDGatewaysGatewayIDDescriptionParams) (*PutLTENetworkIDGatewaysGatewayIDDescriptionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLTENetworkIDGatewaysGatewayIDDescriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLTENetworkIDGatewaysGatewayIDDescription",
		Method:             "PUT",
		PathPattern:        "/lte/{network_id}/gateways/{gateway_id}/description",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLTENetworkIDGatewaysGatewayIDDescriptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLTENetworkIDGatewaysGatewayIDDescriptionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLTENetworkIDGatewaysGatewayIDDescriptionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutLTENetworkIDGatewaysGatewayIDDevice updates the physical device for an LTE gateway
*/
func (a *Client) PutLTENetworkIDGatewaysGatewayIDDevice(params *PutLTENetworkIDGatewaysGatewayIDDeviceParams) (*PutLTENetworkIDGatewaysGatewayIDDeviceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLTENetworkIDGatewaysGatewayIDDeviceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLTENetworkIDGatewaysGatewayIDDevice",
		Method:             "PUT",
		PathPattern:        "/lte/{network_id}/gateways/{gateway_id}/device",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLTENetworkIDGatewaysGatewayIDDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLTENetworkIDGatewaysGatewayIDDeviceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLTENetworkIDGatewaysGatewayIDDeviceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutLTENetworkIDGatewaysGatewayIDMagmad reconfigures magmad agent
*/
func (a *Client) PutLTENetworkIDGatewaysGatewayIDMagmad(params *PutLTENetworkIDGatewaysGatewayIDMagmadParams) (*PutLTENetworkIDGatewaysGatewayIDMagmadNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLTENetworkIDGatewaysGatewayIDMagmadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLTENetworkIDGatewaysGatewayIDMagmad",
		Method:             "PUT",
		PathPattern:        "/lte/{network_id}/gateways/{gateway_id}/magmad",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLTENetworkIDGatewaysGatewayIDMagmadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLTENetworkIDGatewaysGatewayIDMagmadNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLTENetworkIDGatewaysGatewayIDMagmadDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutLTENetworkIDGatewaysGatewayIDName updates the name of an LTE gateway
*/
func (a *Client) PutLTENetworkIDGatewaysGatewayIDName(params *PutLTENetworkIDGatewaysGatewayIDNameParams) (*PutLTENetworkIDGatewaysGatewayIDNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLTENetworkIDGatewaysGatewayIDNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLTENetworkIDGatewaysGatewayIDName",
		Method:             "PUT",
		PathPattern:        "/lte/{network_id}/gateways/{gateway_id}/name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLTENetworkIDGatewaysGatewayIDNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLTENetworkIDGatewaysGatewayIDNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLTENetworkIDGatewaysGatewayIDNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutLTENetworkIDGatewaysGatewayIDTier updates the ID of the upgrade tier a gateway belongs to
*/
func (a *Client) PutLTENetworkIDGatewaysGatewayIDTier(params *PutLTENetworkIDGatewaysGatewayIDTierParams) (*PutLTENetworkIDGatewaysGatewayIDTierNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLTENetworkIDGatewaysGatewayIDTierParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLTENetworkIDGatewaysGatewayIDTier",
		Method:             "PUT",
		PathPattern:        "/lte/{network_id}/gateways/{gateway_id}/tier",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLTENetworkIDGatewaysGatewayIDTierReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLTENetworkIDGatewaysGatewayIDTierNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLTENetworkIDGatewaysGatewayIDTierDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutLTENetworkIDGatewaysGatewayIDVpn updates the gateway v p n configuration
*/
func (a *Client) PutLTENetworkIDGatewaysGatewayIDVpn(params *PutLTENetworkIDGatewaysGatewayIDVpnParams) (*PutLTENetworkIDGatewaysGatewayIDVpnNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLTENetworkIDGatewaysGatewayIDVpnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLTENetworkIDGatewaysGatewayIDVpn",
		Method:             "PUT",
		PathPattern:        "/lte/{network_id}/gateways/{gateway_id}/vpn",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLTENetworkIDGatewaysGatewayIDVpnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLTENetworkIDGatewaysGatewayIDVpnNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLTENetworkIDGatewaysGatewayIDVpnDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
