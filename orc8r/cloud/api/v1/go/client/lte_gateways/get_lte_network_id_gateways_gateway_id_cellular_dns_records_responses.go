// Code generated by go-swagger; DO NOT EDIT.

package lte_gateways

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "magma/orc8r/cloud/api/v1/go/models"
)

// GetLTENetworkIDGatewaysGatewayIDCellularDNSRecordsReader is a Reader for the GetLTENetworkIDGatewaysGatewayIDCellularDNSRecords structure.
type GetLTENetworkIDGatewaysGatewayIDCellularDNSRecordsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLTENetworkIDGatewaysGatewayIDCellularDNSRecordsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLTENetworkIDGatewaysGatewayIDCellularDNSRecordsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetLTENetworkIDGatewaysGatewayIDCellularDNSRecordsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetLTENetworkIDGatewaysGatewayIDCellularDNSRecordsOK creates a GetLTENetworkIDGatewaysGatewayIDCellularDNSRecordsOK with default headers values
func NewGetLTENetworkIDGatewaysGatewayIDCellularDNSRecordsOK() *GetLTENetworkIDGatewaysGatewayIDCellularDNSRecordsOK {
	return &GetLTENetworkIDGatewaysGatewayIDCellularDNSRecordsOK{}
}

/*GetLTENetworkIDGatewaysGatewayIDCellularDNSRecordsOK handles this case with default header values.

Custom DNS records for the gateway
*/
type GetLTENetworkIDGatewaysGatewayIDCellularDNSRecordsOK struct {
	Payload []*models.DNSConfigRecord
}

func (o *GetLTENetworkIDGatewaysGatewayIDCellularDNSRecordsOK) Error() string {
	return fmt.Sprintf("[GET /lte/{network_id}/gateways/{gateway_id}/cellular/dns/records][%d] getLteNetworkIdGatewaysGatewayIdCellularDnsRecordsOK  %+v", 200, o.Payload)
}

func (o *GetLTENetworkIDGatewaysGatewayIDCellularDNSRecordsOK) GetPayload() []*models.DNSConfigRecord {
	return o.Payload
}

func (o *GetLTENetworkIDGatewaysGatewayIDCellularDNSRecordsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLTENetworkIDGatewaysGatewayIDCellularDNSRecordsDefault creates a GetLTENetworkIDGatewaysGatewayIDCellularDNSRecordsDefault with default headers values
func NewGetLTENetworkIDGatewaysGatewayIDCellularDNSRecordsDefault(code int) *GetLTENetworkIDGatewaysGatewayIDCellularDNSRecordsDefault {
	return &GetLTENetworkIDGatewaysGatewayIDCellularDNSRecordsDefault{
		_statusCode: code,
	}
}

/*GetLTENetworkIDGatewaysGatewayIDCellularDNSRecordsDefault handles this case with default header values.

Unexpected Error
*/
type GetLTENetworkIDGatewaysGatewayIDCellularDNSRecordsDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get LTE network ID gateways gateway ID cellular DNS records default response
func (o *GetLTENetworkIDGatewaysGatewayIDCellularDNSRecordsDefault) Code() int {
	return o._statusCode
}

func (o *GetLTENetworkIDGatewaysGatewayIDCellularDNSRecordsDefault) Error() string {
	return fmt.Sprintf("[GET /lte/{network_id}/gateways/{gateway_id}/cellular/dns/records][%d] GetLTENetworkIDGatewaysGatewayIDCellularDNSRecords default  %+v", o._statusCode, o.Payload)
}

func (o *GetLTENetworkIDGatewaysGatewayIDCellularDNSRecordsDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetLTENetworkIDGatewaysGatewayIDCellularDNSRecordsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
