// Code generated by go-swagger; DO NOT EDIT.

package federation_gateways

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new federation gateways API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for federation gateways API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteFegNetworkIDGatewaysGatewayID deletes a federation gateway
*/
func (a *Client) DeleteFegNetworkIDGatewaysGatewayID(params *DeleteFegNetworkIDGatewaysGatewayIDParams) (*DeleteFegNetworkIDGatewaysGatewayIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFegNetworkIDGatewaysGatewayIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteFegNetworkIDGatewaysGatewayID",
		Method:             "DELETE",
		PathPattern:        "/feg/{network_id}/gateways/{gateway_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteFegNetworkIDGatewaysGatewayIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteFegNetworkIDGatewaysGatewayIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteFegNetworkIDGatewaysGatewayIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteFegNetworkIDGatewaysGatewayIDFederation deletes gateway federation configs
*/
func (a *Client) DeleteFegNetworkIDGatewaysGatewayIDFederation(params *DeleteFegNetworkIDGatewaysGatewayIDFederationParams) (*DeleteFegNetworkIDGatewaysGatewayIDFederationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFegNetworkIDGatewaysGatewayIDFederationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteFegNetworkIDGatewaysGatewayIDFederation",
		Method:             "DELETE",
		PathPattern:        "/feg/{network_id}/gateways/{gateway_id}/federation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteFegNetworkIDGatewaysGatewayIDFederationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteFegNetworkIDGatewaysGatewayIDFederationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteFegNetworkIDGatewaysGatewayIDFederationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetFegNetworkIDGateways lists all federation gateways for a federation network
*/
func (a *Client) GetFegNetworkIDGateways(params *GetFegNetworkIDGatewaysParams) (*GetFegNetworkIDGatewaysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFegNetworkIDGatewaysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFegNetworkIDGateways",
		Method:             "GET",
		PathPattern:        "/feg/{network_id}/gateways",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFegNetworkIDGatewaysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFegNetworkIDGatewaysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFegNetworkIDGatewaysDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetFegNetworkIDGatewaysGatewayID gets a specific federation gateway
*/
func (a *Client) GetFegNetworkIDGatewaysGatewayID(params *GetFegNetworkIDGatewaysGatewayIDParams) (*GetFegNetworkIDGatewaysGatewayIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFegNetworkIDGatewaysGatewayIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFegNetworkIDGatewaysGatewayID",
		Method:             "GET",
		PathPattern:        "/feg/{network_id}/gateways/{gateway_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFegNetworkIDGatewaysGatewayIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFegNetworkIDGatewaysGatewayIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFegNetworkIDGatewaysGatewayIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetFegNetworkIDGatewaysGatewayIDFederation retrieves gateway federation configs
*/
func (a *Client) GetFegNetworkIDGatewaysGatewayIDFederation(params *GetFegNetworkIDGatewaysGatewayIDFederationParams) (*GetFegNetworkIDGatewaysGatewayIDFederationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFegNetworkIDGatewaysGatewayIDFederationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFegNetworkIDGatewaysGatewayIDFederation",
		Method:             "GET",
		PathPattern:        "/feg/{network_id}/gateways/{gateway_id}/federation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFegNetworkIDGatewaysGatewayIDFederationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFegNetworkIDGatewaysGatewayIDFederationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFegNetworkIDGatewaysGatewayIDFederationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetFegNetworkIDGatewaysGatewayIDHealthStatus retrieves health status of a federation gateway
*/
func (a *Client) GetFegNetworkIDGatewaysGatewayIDHealthStatus(params *GetFegNetworkIDGatewaysGatewayIDHealthStatusParams) (*GetFegNetworkIDGatewaysGatewayIDHealthStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFegNetworkIDGatewaysGatewayIDHealthStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFegNetworkIDGatewaysGatewayIDHealthStatus",
		Method:             "GET",
		PathPattern:        "/feg/{network_id}/gateways/{gateway_id}/health_status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFegNetworkIDGatewaysGatewayIDHealthStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFegNetworkIDGatewaysGatewayIDHealthStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFegNetworkIDGatewaysGatewayIDHealthStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostFegNetworkIDGateways registers a new federation gateway
*/
func (a *Client) PostFegNetworkIDGateways(params *PostFegNetworkIDGatewaysParams) (*PostFegNetworkIDGatewaysCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostFegNetworkIDGatewaysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostFegNetworkIDGateways",
		Method:             "POST",
		PathPattern:        "/feg/{network_id}/gateways",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostFegNetworkIDGatewaysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostFegNetworkIDGatewaysCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostFegNetworkIDGatewaysDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostFegNetworkIDGatewaysGatewayIDFederation creates gateway federation configs
*/
func (a *Client) PostFegNetworkIDGatewaysGatewayIDFederation(params *PostFegNetworkIDGatewaysGatewayIDFederationParams) (*PostFegNetworkIDGatewaysGatewayIDFederationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostFegNetworkIDGatewaysGatewayIDFederationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostFegNetworkIDGatewaysGatewayIDFederation",
		Method:             "POST",
		PathPattern:        "/feg/{network_id}/gateways/{gateway_id}/federation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostFegNetworkIDGatewaysGatewayIDFederationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostFegNetworkIDGatewaysGatewayIDFederationCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostFegNetworkIDGatewaysGatewayIDFederationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutFegNetworkIDGatewaysGatewayID updates an entire federation gateway record
*/
func (a *Client) PutFegNetworkIDGatewaysGatewayID(params *PutFegNetworkIDGatewaysGatewayIDParams) (*PutFegNetworkIDGatewaysGatewayIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutFegNetworkIDGatewaysGatewayIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutFegNetworkIDGatewaysGatewayID",
		Method:             "PUT",
		PathPattern:        "/feg/{network_id}/gateways/{gateway_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutFegNetworkIDGatewaysGatewayIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutFegNetworkIDGatewaysGatewayIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutFegNetworkIDGatewaysGatewayIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutFegNetworkIDGatewaysGatewayIDFederation modifies gateway federation configs
*/
func (a *Client) PutFegNetworkIDGatewaysGatewayIDFederation(params *PutFegNetworkIDGatewaysGatewayIDFederationParams) (*PutFegNetworkIDGatewaysGatewayIDFederationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutFegNetworkIDGatewaysGatewayIDFederationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutFegNetworkIDGatewaysGatewayIDFederation",
		Method:             "PUT",
		PathPattern:        "/feg/{network_id}/gateways/{gateway_id}/federation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutFegNetworkIDGatewaysGatewayIDFederationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutFegNetworkIDGatewaysGatewayIDFederationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutFegNetworkIDGatewaysGatewayIDFederationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
