// Code generated by go-swagger; DO NOT EDIT.

package metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new metrics API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for metrics API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetNetworksNetworkIDPrometheusQuery retrieves the datapoints from a prometheus query
*/
func (a *Client) GetNetworksNetworkIDPrometheusQuery(params *GetNetworksNetworkIDPrometheusQueryParams) (*GetNetworksNetworkIDPrometheusQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworksNetworkIDPrometheusQueryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNetworksNetworkIDPrometheusQuery",
		Method:             "GET",
		PathPattern:        "/networks/{network_id}/prometheus/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNetworksNetworkIDPrometheusQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworksNetworkIDPrometheusQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNetworksNetworkIDPrometheusQueryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetNetworksNetworkIDPrometheusQueryRange retrieves the datapoints from a prometheus query over a specified time range
*/
func (a *Client) GetNetworksNetworkIDPrometheusQueryRange(params *GetNetworksNetworkIDPrometheusQueryRangeParams) (*GetNetworksNetworkIDPrometheusQueryRangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworksNetworkIDPrometheusQueryRangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNetworksNetworkIDPrometheusQueryRange",
		Method:             "GET",
		PathPattern:        "/networks/{network_id}/prometheus/query_range",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNetworksNetworkIDPrometheusQueryRangeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworksNetworkIDPrometheusQueryRangeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNetworksNetworkIDPrometheusQueryRangeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetNetworksNetworkIDPrometheusSeries gets a list of metric series in prometheus database
*/
func (a *Client) GetNetworksNetworkIDPrometheusSeries(params *GetNetworksNetworkIDPrometheusSeriesParams) (*GetNetworksNetworkIDPrometheusSeriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworksNetworkIDPrometheusSeriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNetworksNetworkIDPrometheusSeries",
		Method:             "GET",
		PathPattern:        "/networks/{network_id}/prometheus/series",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNetworksNetworkIDPrometheusSeriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworksNetworkIDPrometheusSeriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNetworksNetworkIDPrometheusSeriesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTenantsTargetsMetadata retrieves description of all metrics
*/
func (a *Client) GetTenantsTargetsMetadata(params *GetTenantsTargetsMetadataParams) (*GetTenantsTargetsMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantsTargetsMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTenantsTargetsMetadata",
		Method:             "GET",
		PathPattern:        "/tenants/targets_metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTenantsTargetsMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantsTargetsMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTenantsTargetsMetadataDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTenantsTenantIDMetricsAPIV1LabelLabelNameValues retrieves list of label values for the given label name
*/
func (a *Client) GetTenantsTenantIDMetricsAPIV1LabelLabelNameValues(params *GetTenantsTenantIDMetricsAPIV1LabelLabelNameValuesParams) (*GetTenantsTenantIDMetricsAPIV1LabelLabelNameValuesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantsTenantIDMetricsAPIV1LabelLabelNameValuesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTenantsTenantIDMetricsAPIV1LabelLabelNameValues",
		Method:             "GET",
		PathPattern:        "/tenants/{tenant_id}/metrics/api/v1/label/{label_name}/values",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTenantsTenantIDMetricsAPIV1LabelLabelNameValuesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantsTenantIDMetricsAPIV1LabelLabelNameValuesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTenantsTenantIDMetricsAPIV1LabelLabelNameValuesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTenantsTenantIDMetricsAPIV1Query retrieves the datapoints from a prometheus query
*/
func (a *Client) GetTenantsTenantIDMetricsAPIV1Query(params *GetTenantsTenantIDMetricsAPIV1QueryParams) (*GetTenantsTenantIDMetricsAPIV1QueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantsTenantIDMetricsAPIV1QueryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTenantsTenantIDMetricsAPIV1Query",
		Method:             "GET",
		PathPattern:        "/tenants/{tenant_id}/metrics/api/v1/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTenantsTenantIDMetricsAPIV1QueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantsTenantIDMetricsAPIV1QueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTenantsTenantIDMetricsAPIV1QueryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTenantsTenantIDMetricsAPIV1QueryRange retrieves the datapoints from a prometheus query over a specified time range
*/
func (a *Client) GetTenantsTenantIDMetricsAPIV1QueryRange(params *GetTenantsTenantIDMetricsAPIV1QueryRangeParams) (*GetTenantsTenantIDMetricsAPIV1QueryRangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantsTenantIDMetricsAPIV1QueryRangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTenantsTenantIDMetricsAPIV1QueryRange",
		Method:             "GET",
		PathPattern:        "/tenants/{tenant_id}/metrics/api/v1/query_range",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTenantsTenantIDMetricsAPIV1QueryRangeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantsTenantIDMetricsAPIV1QueryRangeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTenantsTenantIDMetricsAPIV1QueryRangeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTenantsTenantIDMetricsAPIV1Series gets a list of metric series in prometheus database
*/
func (a *Client) GetTenantsTenantIDMetricsAPIV1Series(params *GetTenantsTenantIDMetricsAPIV1SeriesParams) (*GetTenantsTenantIDMetricsAPIV1SeriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantsTenantIDMetricsAPIV1SeriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTenantsTenantIDMetricsAPIV1Series",
		Method:             "GET",
		PathPattern:        "/tenants/{tenant_id}/metrics/api/v1/series",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTenantsTenantIDMetricsAPIV1SeriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantsTenantIDMetricsAPIV1SeriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTenantsTenantIDMetricsAPIV1SeriesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTenantsTenantIDMetricsQuery retrieves the datapoints from a prometheus query
*/
func (a *Client) GetTenantsTenantIDMetricsQuery(params *GetTenantsTenantIDMetricsQueryParams) (*GetTenantsTenantIDMetricsQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantsTenantIDMetricsQueryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTenantsTenantIDMetricsQuery",
		Method:             "GET",
		PathPattern:        "/tenants/{tenant_id}/metrics/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTenantsTenantIDMetricsQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantsTenantIDMetricsQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTenantsTenantIDMetricsQueryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTenantsTenantIDMetricsQueryRange retrieves the datapoints from a prometheus query over a specified time range
*/
func (a *Client) GetTenantsTenantIDMetricsQueryRange(params *GetTenantsTenantIDMetricsQueryRangeParams) (*GetTenantsTenantIDMetricsQueryRangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantsTenantIDMetricsQueryRangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTenantsTenantIDMetricsQueryRange",
		Method:             "GET",
		PathPattern:        "/tenants/{tenant_id}/metrics/query_range",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTenantsTenantIDMetricsQueryRangeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantsTenantIDMetricsQueryRangeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTenantsTenantIDMetricsQueryRangeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTenantsTenantIDMetricsSeries gets a list of metric series in prometheus database
*/
func (a *Client) GetTenantsTenantIDMetricsSeries(params *GetTenantsTenantIDMetricsSeriesParams) (*GetTenantsTenantIDMetricsSeriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantsTenantIDMetricsSeriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTenantsTenantIDMetricsSeries",
		Method:             "GET",
		PathPattern:        "/tenants/{tenant_id}/metrics/series",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTenantsTenantIDMetricsSeriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantsTenantIDMetricsSeriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTenantsTenantIDMetricsSeriesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostNetworksNetworkIDMetricsPush submits metrics to orchestrator databases
*/
func (a *Client) PostNetworksNetworkIDMetricsPush(params *PostNetworksNetworkIDMetricsPushParams) (*PostNetworksNetworkIDMetricsPushOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNetworksNetworkIDMetricsPushParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNetworksNetworkIDMetricsPush",
		Method:             "POST",
		PathPattern:        "/networks/{network_id}/metrics/push",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostNetworksNetworkIDMetricsPushReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostNetworksNetworkIDMetricsPushOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostNetworksNetworkIDMetricsPushDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
