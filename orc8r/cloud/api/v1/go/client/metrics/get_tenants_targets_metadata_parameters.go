// Code generated by go-swagger; DO NOT EDIT.

package metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetTenantsTargetsMetadataParams creates a new GetTenantsTargetsMetadataParams object
// with the default values initialized.
func NewGetTenantsTargetsMetadataParams() *GetTenantsTargetsMetadataParams {
	var ()
	return &GetTenantsTargetsMetadataParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetTenantsTargetsMetadataParamsWithTimeout creates a new GetTenantsTargetsMetadataParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetTenantsTargetsMetadataParamsWithTimeout(timeout time.Duration) *GetTenantsTargetsMetadataParams {
	var ()
	return &GetTenantsTargetsMetadataParams{

		timeout: timeout,
	}
}

// NewGetTenantsTargetsMetadataParamsWithContext creates a new GetTenantsTargetsMetadataParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetTenantsTargetsMetadataParamsWithContext(ctx context.Context) *GetTenantsTargetsMetadataParams {
	var ()
	return &GetTenantsTargetsMetadataParams{

		Context: ctx,
	}
}

// NewGetTenantsTargetsMetadataParamsWithHTTPClient creates a new GetTenantsTargetsMetadataParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetTenantsTargetsMetadataParamsWithHTTPClient(client *http.Client) *GetTenantsTargetsMetadataParams {
	var ()
	return &GetTenantsTargetsMetadataParams{
		HTTPClient: client,
	}
}

/*GetTenantsTargetsMetadataParams contains all the parameters to send to the API endpoint
for the get tenants targets metadata operation typically these are written to a http.Request
*/
type GetTenantsTargetsMetadataParams struct {

	/*Limit
	  Maximum number of targets to match

	*/
	Limit *string
	/*MatchTarget
	  Label selectors like {job = "magma_pushgateway"} . All targets are selected if left empty

	*/
	MatchTarget *string
	/*Metric
	  A metric name to retrieve metadata for. All metric metadata is retrieved if left empty

	*/
	Metric *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get tenants targets metadata params
func (o *GetTenantsTargetsMetadataParams) WithTimeout(timeout time.Duration) *GetTenantsTargetsMetadataParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get tenants targets metadata params
func (o *GetTenantsTargetsMetadataParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get tenants targets metadata params
func (o *GetTenantsTargetsMetadataParams) WithContext(ctx context.Context) *GetTenantsTargetsMetadataParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get tenants targets metadata params
func (o *GetTenantsTargetsMetadataParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get tenants targets metadata params
func (o *GetTenantsTargetsMetadataParams) WithHTTPClient(client *http.Client) *GetTenantsTargetsMetadataParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get tenants targets metadata params
func (o *GetTenantsTargetsMetadataParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the get tenants targets metadata params
func (o *GetTenantsTargetsMetadataParams) WithLimit(limit *string) *GetTenantsTargetsMetadataParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get tenants targets metadata params
func (o *GetTenantsTargetsMetadataParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithMatchTarget adds the matchTarget to the get tenants targets metadata params
func (o *GetTenantsTargetsMetadataParams) WithMatchTarget(matchTarget *string) *GetTenantsTargetsMetadataParams {
	o.SetMatchTarget(matchTarget)
	return o
}

// SetMatchTarget adds the matchTarget to the get tenants targets metadata params
func (o *GetTenantsTargetsMetadataParams) SetMatchTarget(matchTarget *string) {
	o.MatchTarget = matchTarget
}

// WithMetric adds the metric to the get tenants targets metadata params
func (o *GetTenantsTargetsMetadataParams) WithMetric(metric *string) *GetTenantsTargetsMetadataParams {
	o.SetMetric(metric)
	return o
}

// SetMetric adds the metric to the get tenants targets metadata params
func (o *GetTenantsTargetsMetadataParams) SetMetric(metric *string) {
	o.Metric = metric
}

// WriteToRequest writes these params to a swagger request
func (o *GetTenantsTargetsMetadataParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit string
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.MatchTarget != nil {

		// query param match_target
		var qrMatchTarget string
		if o.MatchTarget != nil {
			qrMatchTarget = *o.MatchTarget
		}
		qMatchTarget := qrMatchTarget
		if qMatchTarget != "" {
			if err := r.SetQueryParam("match_target", qMatchTarget); err != nil {
				return err
			}
		}

	}

	if o.Metric != nil {

		// query param metric
		var qrMetric string
		if o.Metric != nil {
			qrMetric = *o.Metric
		}
		qMetric := qrMetric
		if qMetric != "" {
			if err := r.SetQueryParam("metric", qMetric); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
