// Code generated by go-swagger; DO NOT EDIT.

package network_probes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "magma/orc8r/cloud/api/v1/go/models"
)

// NewPutLTENetworkIDNetworkProbeTasksTaskIDParams creates a new PutLTENetworkIDNetworkProbeTasksTaskIDParams object
// with the default values initialized.
func NewPutLTENetworkIDNetworkProbeTasksTaskIDParams() *PutLTENetworkIDNetworkProbeTasksTaskIDParams {
	var ()
	return &PutLTENetworkIDNetworkProbeTasksTaskIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutLTENetworkIDNetworkProbeTasksTaskIDParamsWithTimeout creates a new PutLTENetworkIDNetworkProbeTasksTaskIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutLTENetworkIDNetworkProbeTasksTaskIDParamsWithTimeout(timeout time.Duration) *PutLTENetworkIDNetworkProbeTasksTaskIDParams {
	var ()
	return &PutLTENetworkIDNetworkProbeTasksTaskIDParams{

		timeout: timeout,
	}
}

// NewPutLTENetworkIDNetworkProbeTasksTaskIDParamsWithContext creates a new PutLTENetworkIDNetworkProbeTasksTaskIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutLTENetworkIDNetworkProbeTasksTaskIDParamsWithContext(ctx context.Context) *PutLTENetworkIDNetworkProbeTasksTaskIDParams {
	var ()
	return &PutLTENetworkIDNetworkProbeTasksTaskIDParams{

		Context: ctx,
	}
}

// NewPutLTENetworkIDNetworkProbeTasksTaskIDParamsWithHTTPClient creates a new PutLTENetworkIDNetworkProbeTasksTaskIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutLTENetworkIDNetworkProbeTasksTaskIDParamsWithHTTPClient(client *http.Client) *PutLTENetworkIDNetworkProbeTasksTaskIDParams {
	var ()
	return &PutLTENetworkIDNetworkProbeTasksTaskIDParams{
		HTTPClient: client,
	}
}

/*PutLTENetworkIDNetworkProbeTasksTaskIDParams contains all the parameters to send to the API endpoint
for the put LTE network ID network probe tasks task ID operation typically these are written to a http.Request
*/
type PutLTENetworkIDNetworkProbeTasksTaskIDParams struct {

	/*NetworkID
	  Network ID

	*/
	NetworkID string
	/*NetworkProbeTask
	  New NetworkProbeTask configuration

	*/
	NetworkProbeTask *models.NetworkProbeTask
	/*TaskID
	  Network Probe Task ID

	*/
	TaskID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put LTE network ID network probe tasks task ID params
func (o *PutLTENetworkIDNetworkProbeTasksTaskIDParams) WithTimeout(timeout time.Duration) *PutLTENetworkIDNetworkProbeTasksTaskIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put LTE network ID network probe tasks task ID params
func (o *PutLTENetworkIDNetworkProbeTasksTaskIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put LTE network ID network probe tasks task ID params
func (o *PutLTENetworkIDNetworkProbeTasksTaskIDParams) WithContext(ctx context.Context) *PutLTENetworkIDNetworkProbeTasksTaskIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put LTE network ID network probe tasks task ID params
func (o *PutLTENetworkIDNetworkProbeTasksTaskIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put LTE network ID network probe tasks task ID params
func (o *PutLTENetworkIDNetworkProbeTasksTaskIDParams) WithHTTPClient(client *http.Client) *PutLTENetworkIDNetworkProbeTasksTaskIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put LTE network ID network probe tasks task ID params
func (o *PutLTENetworkIDNetworkProbeTasksTaskIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNetworkID adds the networkID to the put LTE network ID network probe tasks task ID params
func (o *PutLTENetworkIDNetworkProbeTasksTaskIDParams) WithNetworkID(networkID string) *PutLTENetworkIDNetworkProbeTasksTaskIDParams {
	o.SetNetworkID(networkID)
	return o
}

// SetNetworkID adds the networkId to the put LTE network ID network probe tasks task ID params
func (o *PutLTENetworkIDNetworkProbeTasksTaskIDParams) SetNetworkID(networkID string) {
	o.NetworkID = networkID
}

// WithNetworkProbeTask adds the networkProbeTask to the put LTE network ID network probe tasks task ID params
func (o *PutLTENetworkIDNetworkProbeTasksTaskIDParams) WithNetworkProbeTask(networkProbeTask *models.NetworkProbeTask) *PutLTENetworkIDNetworkProbeTasksTaskIDParams {
	o.SetNetworkProbeTask(networkProbeTask)
	return o
}

// SetNetworkProbeTask adds the networkProbeTask to the put LTE network ID network probe tasks task ID params
func (o *PutLTENetworkIDNetworkProbeTasksTaskIDParams) SetNetworkProbeTask(networkProbeTask *models.NetworkProbeTask) {
	o.NetworkProbeTask = networkProbeTask
}

// WithTaskID adds the taskID to the put LTE network ID network probe tasks task ID params
func (o *PutLTENetworkIDNetworkProbeTasksTaskIDParams) WithTaskID(taskID string) *PutLTENetworkIDNetworkProbeTasksTaskIDParams {
	o.SetTaskID(taskID)
	return o
}

// SetTaskID adds the taskId to the put LTE network ID network probe tasks task ID params
func (o *PutLTENetworkIDNetworkProbeTasksTaskIDParams) SetTaskID(taskID string) {
	o.TaskID = taskID
}

// WriteToRequest writes these params to a swagger request
func (o *PutLTENetworkIDNetworkProbeTasksTaskIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param network_id
	if err := r.SetPathParam("network_id", o.NetworkID); err != nil {
		return err
	}

	if o.NetworkProbeTask != nil {
		if err := r.SetBodyParam(o.NetworkProbeTask); err != nil {
			return err
		}
	}

	// path param task_id
	if err := r.SetPathParam("task_id", o.TaskID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
