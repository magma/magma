// Code generated by go-swagger; DO NOT EDIT.

package alerts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetNetworksNetworkIDAlertsSilenceParams creates a new GetNetworksNetworkIDAlertsSilenceParams object
// with the default values initialized.
func NewGetNetworksNetworkIDAlertsSilenceParams() *GetNetworksNetworkIDAlertsSilenceParams {
	var ()
	return &GetNetworksNetworkIDAlertsSilenceParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetNetworksNetworkIDAlertsSilenceParamsWithTimeout creates a new GetNetworksNetworkIDAlertsSilenceParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetNetworksNetworkIDAlertsSilenceParamsWithTimeout(timeout time.Duration) *GetNetworksNetworkIDAlertsSilenceParams {
	var ()
	return &GetNetworksNetworkIDAlertsSilenceParams{

		timeout: timeout,
	}
}

// NewGetNetworksNetworkIDAlertsSilenceParamsWithContext creates a new GetNetworksNetworkIDAlertsSilenceParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetNetworksNetworkIDAlertsSilenceParamsWithContext(ctx context.Context) *GetNetworksNetworkIDAlertsSilenceParams {
	var ()
	return &GetNetworksNetworkIDAlertsSilenceParams{

		Context: ctx,
	}
}

// NewGetNetworksNetworkIDAlertsSilenceParamsWithHTTPClient creates a new GetNetworksNetworkIDAlertsSilenceParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetNetworksNetworkIDAlertsSilenceParamsWithHTTPClient(client *http.Client) *GetNetworksNetworkIDAlertsSilenceParams {
	var ()
	return &GetNetworksNetworkIDAlertsSilenceParams{
		HTTPClient: client,
	}
}

/*GetNetworksNetworkIDAlertsSilenceParams contains all the parameters to send to the API endpoint
for the get networks network ID alerts silence operation typically these are written to a http.Request
*/
type GetNetworksNetworkIDAlertsSilenceParams struct {

	/*Active
	  Retrieve active alerts. Default true.

	*/
	Active *bool
	/*Expired
	  Retrieve expired alerts. Default true.

	*/
	Expired *bool
	/*Filter
	  {key="value",} pairs to filter the silences

	*/
	Filter *string
	/*NetworkID
	  Network ID

	*/
	NetworkID string
	/*Pending
	  Retrieve pending alerts. Default true.

	*/
	Pending *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get networks network ID alerts silence params
func (o *GetNetworksNetworkIDAlertsSilenceParams) WithTimeout(timeout time.Duration) *GetNetworksNetworkIDAlertsSilenceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get networks network ID alerts silence params
func (o *GetNetworksNetworkIDAlertsSilenceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get networks network ID alerts silence params
func (o *GetNetworksNetworkIDAlertsSilenceParams) WithContext(ctx context.Context) *GetNetworksNetworkIDAlertsSilenceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get networks network ID alerts silence params
func (o *GetNetworksNetworkIDAlertsSilenceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get networks network ID alerts silence params
func (o *GetNetworksNetworkIDAlertsSilenceParams) WithHTTPClient(client *http.Client) *GetNetworksNetworkIDAlertsSilenceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get networks network ID alerts silence params
func (o *GetNetworksNetworkIDAlertsSilenceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActive adds the active to the get networks network ID alerts silence params
func (o *GetNetworksNetworkIDAlertsSilenceParams) WithActive(active *bool) *GetNetworksNetworkIDAlertsSilenceParams {
	o.SetActive(active)
	return o
}

// SetActive adds the active to the get networks network ID alerts silence params
func (o *GetNetworksNetworkIDAlertsSilenceParams) SetActive(active *bool) {
	o.Active = active
}

// WithExpired adds the expired to the get networks network ID alerts silence params
func (o *GetNetworksNetworkIDAlertsSilenceParams) WithExpired(expired *bool) *GetNetworksNetworkIDAlertsSilenceParams {
	o.SetExpired(expired)
	return o
}

// SetExpired adds the expired to the get networks network ID alerts silence params
func (o *GetNetworksNetworkIDAlertsSilenceParams) SetExpired(expired *bool) {
	o.Expired = expired
}

// WithFilter adds the filter to the get networks network ID alerts silence params
func (o *GetNetworksNetworkIDAlertsSilenceParams) WithFilter(filter *string) *GetNetworksNetworkIDAlertsSilenceParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the get networks network ID alerts silence params
func (o *GetNetworksNetworkIDAlertsSilenceParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithNetworkID adds the networkID to the get networks network ID alerts silence params
func (o *GetNetworksNetworkIDAlertsSilenceParams) WithNetworkID(networkID string) *GetNetworksNetworkIDAlertsSilenceParams {
	o.SetNetworkID(networkID)
	return o
}

// SetNetworkID adds the networkId to the get networks network ID alerts silence params
func (o *GetNetworksNetworkIDAlertsSilenceParams) SetNetworkID(networkID string) {
	o.NetworkID = networkID
}

// WithPending adds the pending to the get networks network ID alerts silence params
func (o *GetNetworksNetworkIDAlertsSilenceParams) WithPending(pending *bool) *GetNetworksNetworkIDAlertsSilenceParams {
	o.SetPending(pending)
	return o
}

// SetPending adds the pending to the get networks network ID alerts silence params
func (o *GetNetworksNetworkIDAlertsSilenceParams) SetPending(pending *bool) {
	o.Pending = pending
}

// WriteToRequest writes these params to a swagger request
func (o *GetNetworksNetworkIDAlertsSilenceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Active != nil {

		// query param active
		var qrActive bool
		if o.Active != nil {
			qrActive = *o.Active
		}
		qActive := swag.FormatBool(qrActive)
		if qActive != "" {
			if err := r.SetQueryParam("active", qActive); err != nil {
				return err
			}
		}

	}

	if o.Expired != nil {

		// query param expired
		var qrExpired bool
		if o.Expired != nil {
			qrExpired = *o.Expired
		}
		qExpired := swag.FormatBool(qrExpired)
		if qExpired != "" {
			if err := r.SetQueryParam("expired", qExpired); err != nil {
				return err
			}
		}

	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string
		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {
			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}

	}

	// path param network_id
	if err := r.SetPathParam("network_id", o.NetworkID); err != nil {
		return err
	}

	if o.Pending != nil {

		// query param pending
		var qrPending bool
		if o.Pending != nil {
			qrPending = *o.Pending
		}
		qPending := swag.FormatBool(qrPending)
		if qPending != "" {
			if err := r.SetQueryParam("pending", qPending); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
