// Code generated by go-swagger; DO NOT EDIT.

package wifi_gateways

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new wifi gateways API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for wifi gateways API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteWifiNetworkIDGatewaysGatewayID(params *DeleteWifiNetworkIDGatewaysGatewayIDParams, opts ...ClientOption) (*DeleteWifiNetworkIDGatewaysGatewayIDNoContent, error)

	GetWifiNetworkIDGateways(params *GetWifiNetworkIDGatewaysParams, opts ...ClientOption) (*GetWifiNetworkIDGatewaysOK, error)

	GetWifiNetworkIDGatewaysGatewayID(params *GetWifiNetworkIDGatewaysGatewayIDParams, opts ...ClientOption) (*GetWifiNetworkIDGatewaysGatewayIDOK, error)

	GetWifiNetworkIDGatewaysGatewayIDDescription(params *GetWifiNetworkIDGatewaysGatewayIDDescriptionParams, opts ...ClientOption) (*GetWifiNetworkIDGatewaysGatewayIDDescriptionOK, error)

	GetWifiNetworkIDGatewaysGatewayIDDevice(params *GetWifiNetworkIDGatewaysGatewayIDDeviceParams, opts ...ClientOption) (*GetWifiNetworkIDGatewaysGatewayIDDeviceOK, error)

	GetWifiNetworkIDGatewaysGatewayIDMagmad(params *GetWifiNetworkIDGatewaysGatewayIDMagmadParams, opts ...ClientOption) (*GetWifiNetworkIDGatewaysGatewayIDMagmadOK, error)

	GetWifiNetworkIDGatewaysGatewayIDName(params *GetWifiNetworkIDGatewaysGatewayIDNameParams, opts ...ClientOption) (*GetWifiNetworkIDGatewaysGatewayIDNameOK, error)

	GetWifiNetworkIDGatewaysGatewayIDStatus(params *GetWifiNetworkIDGatewaysGatewayIDStatusParams, opts ...ClientOption) (*GetWifiNetworkIDGatewaysGatewayIDStatusOK, error)

	GetWifiNetworkIDGatewaysGatewayIDTier(params *GetWifiNetworkIDGatewaysGatewayIDTierParams, opts ...ClientOption) (*GetWifiNetworkIDGatewaysGatewayIDTierOK, error)

	GetWifiNetworkIDGatewaysGatewayIDWifi(params *GetWifiNetworkIDGatewaysGatewayIDWifiParams, opts ...ClientOption) (*GetWifiNetworkIDGatewaysGatewayIDWifiNoContent, error)

	PostWifiNetworkIDGateways(params *PostWifiNetworkIDGatewaysParams, opts ...ClientOption) (*PostWifiNetworkIDGatewaysCreated, error)

	PutWifiNetworkIDGatewaysGatewayID(params *PutWifiNetworkIDGatewaysGatewayIDParams, opts ...ClientOption) (*PutWifiNetworkIDGatewaysGatewayIDNoContent, error)

	PutWifiNetworkIDGatewaysGatewayIDDescription(params *PutWifiNetworkIDGatewaysGatewayIDDescriptionParams, opts ...ClientOption) (*PutWifiNetworkIDGatewaysGatewayIDDescriptionNoContent, error)

	PutWifiNetworkIDGatewaysGatewayIDDevice(params *PutWifiNetworkIDGatewaysGatewayIDDeviceParams, opts ...ClientOption) (*PutWifiNetworkIDGatewaysGatewayIDDeviceNoContent, error)

	PutWifiNetworkIDGatewaysGatewayIDMagmad(params *PutWifiNetworkIDGatewaysGatewayIDMagmadParams, opts ...ClientOption) (*PutWifiNetworkIDGatewaysGatewayIDMagmadNoContent, error)

	PutWifiNetworkIDGatewaysGatewayIDName(params *PutWifiNetworkIDGatewaysGatewayIDNameParams, opts ...ClientOption) (*PutWifiNetworkIDGatewaysGatewayIDNameNoContent, error)

	PutWifiNetworkIDGatewaysGatewayIDTier(params *PutWifiNetworkIDGatewaysGatewayIDTierParams, opts ...ClientOption) (*PutWifiNetworkIDGatewaysGatewayIDTierNoContent, error)

	PutWifiNetworkIDGatewaysGatewayIDWifi(params *PutWifiNetworkIDGatewaysGatewayIDWifiParams, opts ...ClientOption) (*PutWifiNetworkIDGatewaysGatewayIDWifiNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteWifiNetworkIDGatewaysGatewayID deletes a wifi gateway
*/
func (a *Client) DeleteWifiNetworkIDGatewaysGatewayID(params *DeleteWifiNetworkIDGatewaysGatewayIDParams, opts ...ClientOption) (*DeleteWifiNetworkIDGatewaysGatewayIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWifiNetworkIDGatewaysGatewayIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteWifiNetworkIDGatewaysGatewayID",
		Method:             "DELETE",
		PathPattern:        "/wifi/{network_id}/gateways/{gateway_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteWifiNetworkIDGatewaysGatewayIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteWifiNetworkIDGatewaysGatewayIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteWifiNetworkIDGatewaysGatewayIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetWifiNetworkIDGateways lists all gateways for a wifi network
*/
func (a *Client) GetWifiNetworkIDGateways(params *GetWifiNetworkIDGatewaysParams, opts ...ClientOption) (*GetWifiNetworkIDGatewaysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWifiNetworkIDGatewaysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWifiNetworkIDGateways",
		Method:             "GET",
		PathPattern:        "/wifi/{network_id}/gateways",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWifiNetworkIDGatewaysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWifiNetworkIDGatewaysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWifiNetworkIDGatewaysDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetWifiNetworkIDGatewaysGatewayID gets a specific wifi gateway
*/
func (a *Client) GetWifiNetworkIDGatewaysGatewayID(params *GetWifiNetworkIDGatewaysGatewayIDParams, opts ...ClientOption) (*GetWifiNetworkIDGatewaysGatewayIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWifiNetworkIDGatewaysGatewayIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWifiNetworkIDGatewaysGatewayID",
		Method:             "GET",
		PathPattern:        "/wifi/{network_id}/gateways/{gateway_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWifiNetworkIDGatewaysGatewayIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWifiNetworkIDGatewaysGatewayIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWifiNetworkIDGatewaysGatewayIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetWifiNetworkIDGatewaysGatewayIDDescription gets the description of a wifi gateway
*/
func (a *Client) GetWifiNetworkIDGatewaysGatewayIDDescription(params *GetWifiNetworkIDGatewaysGatewayIDDescriptionParams, opts ...ClientOption) (*GetWifiNetworkIDGatewaysGatewayIDDescriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWifiNetworkIDGatewaysGatewayIDDescriptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWifiNetworkIDGatewaysGatewayIDDescription",
		Method:             "GET",
		PathPattern:        "/wifi/{network_id}/gateways/{gateway_id}/description",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWifiNetworkIDGatewaysGatewayIDDescriptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWifiNetworkIDGatewaysGatewayIDDescriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWifiNetworkIDGatewaysGatewayIDDescriptionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetWifiNetworkIDGatewaysGatewayIDDevice gets the physical device for a wifi gateway
*/
func (a *Client) GetWifiNetworkIDGatewaysGatewayIDDevice(params *GetWifiNetworkIDGatewaysGatewayIDDeviceParams, opts ...ClientOption) (*GetWifiNetworkIDGatewaysGatewayIDDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWifiNetworkIDGatewaysGatewayIDDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWifiNetworkIDGatewaysGatewayIDDevice",
		Method:             "GET",
		PathPattern:        "/wifi/{network_id}/gateways/{gateway_id}/device",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWifiNetworkIDGatewaysGatewayIDDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWifiNetworkIDGatewaysGatewayIDDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWifiNetworkIDGatewaysGatewayIDDeviceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetWifiNetworkIDGatewaysGatewayIDMagmad gets the magmad agent configuration for a wifi gateway
*/
func (a *Client) GetWifiNetworkIDGatewaysGatewayIDMagmad(params *GetWifiNetworkIDGatewaysGatewayIDMagmadParams, opts ...ClientOption) (*GetWifiNetworkIDGatewaysGatewayIDMagmadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWifiNetworkIDGatewaysGatewayIDMagmadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWifiNetworkIDGatewaysGatewayIDMagmad",
		Method:             "GET",
		PathPattern:        "/wifi/{network_id}/gateways/{gateway_id}/magmad",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWifiNetworkIDGatewaysGatewayIDMagmadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWifiNetworkIDGatewaysGatewayIDMagmadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWifiNetworkIDGatewaysGatewayIDMagmadDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetWifiNetworkIDGatewaysGatewayIDName gets the name of a wifi gateway
*/
func (a *Client) GetWifiNetworkIDGatewaysGatewayIDName(params *GetWifiNetworkIDGatewaysGatewayIDNameParams, opts ...ClientOption) (*GetWifiNetworkIDGatewaysGatewayIDNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWifiNetworkIDGatewaysGatewayIDNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWifiNetworkIDGatewaysGatewayIDName",
		Method:             "GET",
		PathPattern:        "/wifi/{network_id}/gateways/{gateway_id}/name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWifiNetworkIDGatewaysGatewayIDNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWifiNetworkIDGatewaysGatewayIDNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWifiNetworkIDGatewaysGatewayIDNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetWifiNetworkIDGatewaysGatewayIDStatus gets the status of a wifi gateway
*/
func (a *Client) GetWifiNetworkIDGatewaysGatewayIDStatus(params *GetWifiNetworkIDGatewaysGatewayIDStatusParams, opts ...ClientOption) (*GetWifiNetworkIDGatewaysGatewayIDStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWifiNetworkIDGatewaysGatewayIDStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWifiNetworkIDGatewaysGatewayIDStatus",
		Method:             "GET",
		PathPattern:        "/wifi/{network_id}/gateways/{gateway_id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWifiNetworkIDGatewaysGatewayIDStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWifiNetworkIDGatewaysGatewayIDStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWifiNetworkIDGatewaysGatewayIDStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetWifiNetworkIDGatewaysGatewayIDTier gets the ID of the upgrade tier a wifi gateway belongs to
*/
func (a *Client) GetWifiNetworkIDGatewaysGatewayIDTier(params *GetWifiNetworkIDGatewaysGatewayIDTierParams, opts ...ClientOption) (*GetWifiNetworkIDGatewaysGatewayIDTierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWifiNetworkIDGatewaysGatewayIDTierParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWifiNetworkIDGatewaysGatewayIDTier",
		Method:             "GET",
		PathPattern:        "/wifi/{network_id}/gateways/{gateway_id}/tier",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWifiNetworkIDGatewaysGatewayIDTierReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWifiNetworkIDGatewaysGatewayIDTierOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWifiNetworkIDGatewaysGatewayIDTierDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetWifiNetworkIDGatewaysGatewayIDWifi gets the gateway wifi configuration
*/
func (a *Client) GetWifiNetworkIDGatewaysGatewayIDWifi(params *GetWifiNetworkIDGatewaysGatewayIDWifiParams, opts ...ClientOption) (*GetWifiNetworkIDGatewaysGatewayIDWifiNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWifiNetworkIDGatewaysGatewayIDWifiParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWifiNetworkIDGatewaysGatewayIDWifi",
		Method:             "GET",
		PathPattern:        "/wifi/{network_id}/gateways/{gateway_id}/wifi",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWifiNetworkIDGatewaysGatewayIDWifiReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWifiNetworkIDGatewaysGatewayIDWifiNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWifiNetworkIDGatewaysGatewayIDWifiDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostWifiNetworkIDGateways registers a new wifi gateway
*/
func (a *Client) PostWifiNetworkIDGateways(params *PostWifiNetworkIDGatewaysParams, opts ...ClientOption) (*PostWifiNetworkIDGatewaysCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWifiNetworkIDGatewaysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostWifiNetworkIDGateways",
		Method:             "POST",
		PathPattern:        "/wifi/{network_id}/gateways",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostWifiNetworkIDGatewaysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostWifiNetworkIDGatewaysCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostWifiNetworkIDGatewaysDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutWifiNetworkIDGatewaysGatewayID updates an entire wifi gateway record
*/
func (a *Client) PutWifiNetworkIDGatewaysGatewayID(params *PutWifiNetworkIDGatewaysGatewayIDParams, opts ...ClientOption) (*PutWifiNetworkIDGatewaysGatewayIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutWifiNetworkIDGatewaysGatewayIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutWifiNetworkIDGatewaysGatewayID",
		Method:             "PUT",
		PathPattern:        "/wifi/{network_id}/gateways/{gateway_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutWifiNetworkIDGatewaysGatewayIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutWifiNetworkIDGatewaysGatewayIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutWifiNetworkIDGatewaysGatewayIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutWifiNetworkIDGatewaysGatewayIDDescription updates the description of a wifi gateway
*/
func (a *Client) PutWifiNetworkIDGatewaysGatewayIDDescription(params *PutWifiNetworkIDGatewaysGatewayIDDescriptionParams, opts ...ClientOption) (*PutWifiNetworkIDGatewaysGatewayIDDescriptionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutWifiNetworkIDGatewaysGatewayIDDescriptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutWifiNetworkIDGatewaysGatewayIDDescription",
		Method:             "PUT",
		PathPattern:        "/wifi/{network_id}/gateways/{gateway_id}/description",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutWifiNetworkIDGatewaysGatewayIDDescriptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutWifiNetworkIDGatewaysGatewayIDDescriptionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutWifiNetworkIDGatewaysGatewayIDDescriptionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutWifiNetworkIDGatewaysGatewayIDDevice updates the physical device for a wifi gateway
*/
func (a *Client) PutWifiNetworkIDGatewaysGatewayIDDevice(params *PutWifiNetworkIDGatewaysGatewayIDDeviceParams, opts ...ClientOption) (*PutWifiNetworkIDGatewaysGatewayIDDeviceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutWifiNetworkIDGatewaysGatewayIDDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutWifiNetworkIDGatewaysGatewayIDDevice",
		Method:             "PUT",
		PathPattern:        "/wifi/{network_id}/gateways/{gateway_id}/device",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutWifiNetworkIDGatewaysGatewayIDDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutWifiNetworkIDGatewaysGatewayIDDeviceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutWifiNetworkIDGatewaysGatewayIDDeviceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutWifiNetworkIDGatewaysGatewayIDMagmad reconfigures the magmad agent of a wifi gateway
*/
func (a *Client) PutWifiNetworkIDGatewaysGatewayIDMagmad(params *PutWifiNetworkIDGatewaysGatewayIDMagmadParams, opts ...ClientOption) (*PutWifiNetworkIDGatewaysGatewayIDMagmadNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutWifiNetworkIDGatewaysGatewayIDMagmadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutWifiNetworkIDGatewaysGatewayIDMagmad",
		Method:             "PUT",
		PathPattern:        "/wifi/{network_id}/gateways/{gateway_id}/magmad",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutWifiNetworkIDGatewaysGatewayIDMagmadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutWifiNetworkIDGatewaysGatewayIDMagmadNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutWifiNetworkIDGatewaysGatewayIDMagmadDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutWifiNetworkIDGatewaysGatewayIDName updates the name of a wifi gateway
*/
func (a *Client) PutWifiNetworkIDGatewaysGatewayIDName(params *PutWifiNetworkIDGatewaysGatewayIDNameParams, opts ...ClientOption) (*PutWifiNetworkIDGatewaysGatewayIDNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutWifiNetworkIDGatewaysGatewayIDNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutWifiNetworkIDGatewaysGatewayIDName",
		Method:             "PUT",
		PathPattern:        "/wifi/{network_id}/gateways/{gateway_id}/name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutWifiNetworkIDGatewaysGatewayIDNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutWifiNetworkIDGatewaysGatewayIDNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutWifiNetworkIDGatewaysGatewayIDNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutWifiNetworkIDGatewaysGatewayIDTier updates the ID of the upgrade tier a wifi gateway belongs to
*/
func (a *Client) PutWifiNetworkIDGatewaysGatewayIDTier(params *PutWifiNetworkIDGatewaysGatewayIDTierParams, opts ...ClientOption) (*PutWifiNetworkIDGatewaysGatewayIDTierNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutWifiNetworkIDGatewaysGatewayIDTierParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutWifiNetworkIDGatewaysGatewayIDTier",
		Method:             "PUT",
		PathPattern:        "/wifi/{network_id}/gateways/{gateway_id}/tier",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutWifiNetworkIDGatewaysGatewayIDTierReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutWifiNetworkIDGatewaysGatewayIDTierNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutWifiNetworkIDGatewaysGatewayIDTierDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutWifiNetworkIDGatewaysGatewayIDWifi updates the gateway wifi configuration
*/
func (a *Client) PutWifiNetworkIDGatewaysGatewayIDWifi(params *PutWifiNetworkIDGatewaysGatewayIDWifiParams, opts ...ClientOption) (*PutWifiNetworkIDGatewaysGatewayIDWifiNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutWifiNetworkIDGatewaysGatewayIDWifiParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutWifiNetworkIDGatewaysGatewayIDWifi",
		Method:             "PUT",
		PathPattern:        "/wifi/{network_id}/gateways/{gateway_id}/wifi",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutWifiNetworkIDGatewaysGatewayIDWifiReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutWifiNetworkIDGatewaysGatewayIDWifiNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutWifiNetworkIDGatewaysGatewayIDWifiDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
