// Code generated by go-swagger; DO NOT EDIT.

package policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new policies API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for policies API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteLTENetworkIDPolicyQosProfilesProfileID deletes policy qo s profile in LTE network
*/
func (a *Client) DeleteLTENetworkIDPolicyQosProfilesProfileID(params *DeleteLTENetworkIDPolicyQosProfilesProfileIDParams) (*DeleteLTENetworkIDPolicyQosProfilesProfileIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLTENetworkIDPolicyQosProfilesProfileIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLTENetworkIDPolicyQosProfilesProfileID",
		Method:             "DELETE",
		PathPattern:        "/lte/{network_id}/policy_qos_profiles/{profile_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteLTENetworkIDPolicyQosProfilesProfileIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLTENetworkIDPolicyQosProfilesProfileIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteLTENetworkIDPolicyQosProfilesProfileIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteNetworksNetworkIDPoliciesBaseNamesBaseName deletes a charging rule base name
*/
func (a *Client) DeleteNetworksNetworkIDPoliciesBaseNamesBaseName(params *DeleteNetworksNetworkIDPoliciesBaseNamesBaseNameParams) (*DeleteNetworksNetworkIDPoliciesBaseNamesBaseNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworksNetworkIDPoliciesBaseNamesBaseNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteNetworksNetworkIDPoliciesBaseNamesBaseName",
		Method:             "DELETE",
		PathPattern:        "/networks/{network_id}/policies/base_names/{base_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteNetworksNetworkIDPoliciesBaseNamesBaseNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworksNetworkIDPoliciesBaseNamesBaseNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteNetworksNetworkIDPoliciesBaseNamesBaseNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteNetworksNetworkIDPoliciesRulesRuleID deletes a policy rule
*/
func (a *Client) DeleteNetworksNetworkIDPoliciesRulesRuleID(params *DeleteNetworksNetworkIDPoliciesRulesRuleIDParams) (*DeleteNetworksNetworkIDPoliciesRulesRuleIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworksNetworkIDPoliciesRulesRuleIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteNetworksNetworkIDPoliciesRulesRuleID",
		Method:             "DELETE",
		PathPattern:        "/networks/{network_id}/policies/rules/{rule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteNetworksNetworkIDPoliciesRulesRuleIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworksNetworkIDPoliciesRulesRuleIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteNetworksNetworkIDPoliciesRulesRuleIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLTENetworkIDPolicyQosProfiles gets policy qo s profiles in LTE network
*/
func (a *Client) GetLTENetworkIDPolicyQosProfiles(params *GetLTENetworkIDPolicyQosProfilesParams) (*GetLTENetworkIDPolicyQosProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDPolicyQosProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLTENetworkIDPolicyQosProfiles",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/policy_qos_profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDPolicyQosProfilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDPolicyQosProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDPolicyQosProfilesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLTENetworkIDPolicyQosProfilesProfileID gets policy qo s profile in LTE network
*/
func (a *Client) GetLTENetworkIDPolicyQosProfilesProfileID(params *GetLTENetworkIDPolicyQosProfilesProfileIDParams) (*GetLTENetworkIDPolicyQosProfilesProfileIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLTENetworkIDPolicyQosProfilesProfileIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLTENetworkIDPolicyQosProfilesProfileID",
		Method:             "GET",
		PathPattern:        "/lte/{network_id}/policy_qos_profiles/{profile_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLTENetworkIDPolicyQosProfilesProfileIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLTENetworkIDPolicyQosProfilesProfileIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLTENetworkIDPolicyQosProfilesProfileIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetNetworksNetworkIDPoliciesBaseNames lists charging rule base names
*/
func (a *Client) GetNetworksNetworkIDPoliciesBaseNames(params *GetNetworksNetworkIDPoliciesBaseNamesParams) (*GetNetworksNetworkIDPoliciesBaseNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworksNetworkIDPoliciesBaseNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNetworksNetworkIDPoliciesBaseNames",
		Method:             "GET",
		PathPattern:        "/networks/{network_id}/policies/base_names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNetworksNetworkIDPoliciesBaseNamesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworksNetworkIDPoliciesBaseNamesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNetworksNetworkIDPoliciesBaseNamesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetNetworksNetworkIDPoliciesBaseNamesBaseName gets charging rule base name
*/
func (a *Client) GetNetworksNetworkIDPoliciesBaseNamesBaseName(params *GetNetworksNetworkIDPoliciesBaseNamesBaseNameParams) (*GetNetworksNetworkIDPoliciesBaseNamesBaseNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworksNetworkIDPoliciesBaseNamesBaseNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNetworksNetworkIDPoliciesBaseNamesBaseName",
		Method:             "GET",
		PathPattern:        "/networks/{network_id}/policies/base_names/{base_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNetworksNetworkIDPoliciesBaseNamesBaseNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworksNetworkIDPoliciesBaseNamesBaseNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNetworksNetworkIDPoliciesBaseNamesBaseNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetNetworksNetworkIDPoliciesBaseNamesViewFull gets all base names
*/
func (a *Client) GetNetworksNetworkIDPoliciesBaseNamesViewFull(params *GetNetworksNetworkIDPoliciesBaseNamesViewFullParams) (*GetNetworksNetworkIDPoliciesBaseNamesViewFullOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworksNetworkIDPoliciesBaseNamesViewFullParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNetworksNetworkIDPoliciesBaseNamesViewFull",
		Method:             "GET",
		PathPattern:        "/networks/{network_id}/policies/base_names?view=full",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNetworksNetworkIDPoliciesBaseNamesViewFullReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworksNetworkIDPoliciesBaseNamesViewFullOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNetworksNetworkIDPoliciesBaseNamesViewFullDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetNetworksNetworkIDPoliciesRules lists policy rules
*/
func (a *Client) GetNetworksNetworkIDPoliciesRules(params *GetNetworksNetworkIDPoliciesRulesParams) (*GetNetworksNetworkIDPoliciesRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworksNetworkIDPoliciesRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNetworksNetworkIDPoliciesRules",
		Method:             "GET",
		PathPattern:        "/networks/{network_id}/policies/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNetworksNetworkIDPoliciesRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworksNetworkIDPoliciesRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNetworksNetworkIDPoliciesRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetNetworksNetworkIDPoliciesRulesRuleID gets policy rule
*/
func (a *Client) GetNetworksNetworkIDPoliciesRulesRuleID(params *GetNetworksNetworkIDPoliciesRulesRuleIDParams) (*GetNetworksNetworkIDPoliciesRulesRuleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworksNetworkIDPoliciesRulesRuleIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNetworksNetworkIDPoliciesRulesRuleID",
		Method:             "GET",
		PathPattern:        "/networks/{network_id}/policies/rules/{rule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNetworksNetworkIDPoliciesRulesRuleIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworksNetworkIDPoliciesRulesRuleIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNetworksNetworkIDPoliciesRulesRuleIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetNetworksNetworkIDPoliciesRulesViewFull gets all policy rules
*/
func (a *Client) GetNetworksNetworkIDPoliciesRulesViewFull(params *GetNetworksNetworkIDPoliciesRulesViewFullParams) (*GetNetworksNetworkIDPoliciesRulesViewFullOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworksNetworkIDPoliciesRulesViewFullParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNetworksNetworkIDPoliciesRulesViewFull",
		Method:             "GET",
		PathPattern:        "/networks/{network_id}/policies/rules?view=full",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNetworksNetworkIDPoliciesRulesViewFullReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworksNetworkIDPoliciesRulesViewFullOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNetworksNetworkIDPoliciesRulesViewFullDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostLTENetworkIDPolicyQosProfiles creates policy qo s profile in LTE network
*/
func (a *Client) PostLTENetworkIDPolicyQosProfiles(params *PostLTENetworkIDPolicyQosProfilesParams) (*PostLTENetworkIDPolicyQosProfilesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLTENetworkIDPolicyQosProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLTENetworkIDPolicyQosProfiles",
		Method:             "POST",
		PathPattern:        "/lte/{network_id}/policy_qos_profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostLTENetworkIDPolicyQosProfilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLTENetworkIDPolicyQosProfilesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostLTENetworkIDPolicyQosProfilesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostNetworksNetworkIDPoliciesBaseNames creates charging rule base name
*/
func (a *Client) PostNetworksNetworkIDPoliciesBaseNames(params *PostNetworksNetworkIDPoliciesBaseNamesParams) (*PostNetworksNetworkIDPoliciesBaseNamesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNetworksNetworkIDPoliciesBaseNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNetworksNetworkIDPoliciesBaseNames",
		Method:             "POST",
		PathPattern:        "/networks/{network_id}/policies/base_names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostNetworksNetworkIDPoliciesBaseNamesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostNetworksNetworkIDPoliciesBaseNamesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostNetworksNetworkIDPoliciesBaseNamesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostNetworksNetworkIDPoliciesRules adds a new policy rule
*/
func (a *Client) PostNetworksNetworkIDPoliciesRules(params *PostNetworksNetworkIDPoliciesRulesParams) (*PostNetworksNetworkIDPoliciesRulesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNetworksNetworkIDPoliciesRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNetworksNetworkIDPoliciesRules",
		Method:             "POST",
		PathPattern:        "/networks/{network_id}/policies/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostNetworksNetworkIDPoliciesRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostNetworksNetworkIDPoliciesRulesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostNetworksNetworkIDPoliciesRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutLTENetworkIDPolicyQosProfilesProfileID updates policy qo s profile in LTE network
*/
func (a *Client) PutLTENetworkIDPolicyQosProfilesProfileID(params *PutLTENetworkIDPolicyQosProfilesProfileIDParams) (*PutLTENetworkIDPolicyQosProfilesProfileIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLTENetworkIDPolicyQosProfilesProfileIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLTENetworkIDPolicyQosProfilesProfileID",
		Method:             "PUT",
		PathPattern:        "/lte/{network_id}/policy_qos_profiles/{profile_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLTENetworkIDPolicyQosProfilesProfileIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLTENetworkIDPolicyQosProfilesProfileIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLTENetworkIDPolicyQosProfilesProfileIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutNetworksNetworkIDPoliciesBaseNamesBaseName modifies a charging rule base name
*/
func (a *Client) PutNetworksNetworkIDPoliciesBaseNamesBaseName(params *PutNetworksNetworkIDPoliciesBaseNamesBaseNameParams) (*PutNetworksNetworkIDPoliciesBaseNamesBaseNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutNetworksNetworkIDPoliciesBaseNamesBaseNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutNetworksNetworkIDPoliciesBaseNamesBaseName",
		Method:             "PUT",
		PathPattern:        "/networks/{network_id}/policies/base_names/{base_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutNetworksNetworkIDPoliciesBaseNamesBaseNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutNetworksNetworkIDPoliciesBaseNamesBaseNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutNetworksNetworkIDPoliciesBaseNamesBaseNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutNetworksNetworkIDPoliciesRulesRuleID modifies a policy rule
*/
func (a *Client) PutNetworksNetworkIDPoliciesRulesRuleID(params *PutNetworksNetworkIDPoliciesRulesRuleIDParams) (*PutNetworksNetworkIDPoliciesRulesRuleIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutNetworksNetworkIDPoliciesRulesRuleIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutNetworksNetworkIDPoliciesRulesRuleID",
		Method:             "PUT",
		PathPattern:        "/networks/{network_id}/policies/rules/{rule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutNetworksNetworkIDPoliciesRulesRuleIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutNetworksNetworkIDPoliciesRulesRuleIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutNetworksNetworkIDPoliciesRulesRuleIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
