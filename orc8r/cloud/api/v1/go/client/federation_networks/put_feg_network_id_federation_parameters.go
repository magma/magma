// Code generated by go-swagger; DO NOT EDIT.

package federation_networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"magma/orc8r/cloud/api/v1/go/models"
)

// NewPutFegNetworkIDFederationParams creates a new PutFegNetworkIDFederationParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPutFegNetworkIDFederationParams() *PutFegNetworkIDFederationParams {
	return &PutFegNetworkIDFederationParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPutFegNetworkIDFederationParamsWithTimeout creates a new PutFegNetworkIDFederationParams object
// with the ability to set a timeout on a request.
func NewPutFegNetworkIDFederationParamsWithTimeout(timeout time.Duration) *PutFegNetworkIDFederationParams {
	return &PutFegNetworkIDFederationParams{
		timeout: timeout,
	}
}

// NewPutFegNetworkIDFederationParamsWithContext creates a new PutFegNetworkIDFederationParams object
// with the ability to set a context for a request.
func NewPutFegNetworkIDFederationParamsWithContext(ctx context.Context) *PutFegNetworkIDFederationParams {
	return &PutFegNetworkIDFederationParams{
		Context: ctx,
	}
}

// NewPutFegNetworkIDFederationParamsWithHTTPClient creates a new PutFegNetworkIDFederationParams object
// with the ability to set a custom HTTPClient for a request.
func NewPutFegNetworkIDFederationParamsWithHTTPClient(client *http.Client) *PutFegNetworkIDFederationParams {
	return &PutFegNetworkIDFederationParams{
		HTTPClient: client,
	}
}

/*
PutFegNetworkIDFederationParams contains all the parameters to send to the API endpoint

	for the put feg network ID federation operation.

	Typically these are written to a http.Request.
*/
type PutFegNetworkIDFederationParams struct {

	/* Config.

	   Updated config
	*/
	Config *models.NetworkFederationConfigs

	/* NetworkID.

	   Network ID
	*/
	NetworkID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the put feg network ID federation params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PutFegNetworkIDFederationParams) WithDefaults() *PutFegNetworkIDFederationParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the put feg network ID federation params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PutFegNetworkIDFederationParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the put feg network ID federation params
func (o *PutFegNetworkIDFederationParams) WithTimeout(timeout time.Duration) *PutFegNetworkIDFederationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put feg network ID federation params
func (o *PutFegNetworkIDFederationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put feg network ID federation params
func (o *PutFegNetworkIDFederationParams) WithContext(ctx context.Context) *PutFegNetworkIDFederationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put feg network ID federation params
func (o *PutFegNetworkIDFederationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put feg network ID federation params
func (o *PutFegNetworkIDFederationParams) WithHTTPClient(client *http.Client) *PutFegNetworkIDFederationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put feg network ID federation params
func (o *PutFegNetworkIDFederationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConfig adds the config to the put feg network ID federation params
func (o *PutFegNetworkIDFederationParams) WithConfig(config *models.NetworkFederationConfigs) *PutFegNetworkIDFederationParams {
	o.SetConfig(config)
	return o
}

// SetConfig adds the config to the put feg network ID federation params
func (o *PutFegNetworkIDFederationParams) SetConfig(config *models.NetworkFederationConfigs) {
	o.Config = config
}

// WithNetworkID adds the networkID to the put feg network ID federation params
func (o *PutFegNetworkIDFederationParams) WithNetworkID(networkID string) *PutFegNetworkIDFederationParams {
	o.SetNetworkID(networkID)
	return o
}

// SetNetworkID adds the networkId to the put feg network ID federation params
func (o *PutFegNetworkIDFederationParams) SetNetworkID(networkID string) {
	o.NetworkID = networkID
}

// WriteToRequest writes these params to a swagger request
func (o *PutFegNetworkIDFederationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Config != nil {
		if err := r.SetBodyParam(o.Config); err != nil {
			return err
		}
	}

	// path param network_id
	if err := r.SetPathParam("network_id", o.NetworkID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
