// Code generated by go-swagger; DO NOT EDIT.

package wifi_networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new wifi networks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for wifi networks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteWifiNetworkID(params *DeleteWifiNetworkIDParams, opts ...ClientOption) (*DeleteWifiNetworkIDNoContent, error)

	GetWifi(params *GetWifiParams, opts ...ClientOption) (*GetWifiOK, error)

	GetWifiNetworkID(params *GetWifiNetworkIDParams, opts ...ClientOption) (*GetWifiNetworkIDOK, error)

	GetWifiNetworkIDDescription(params *GetWifiNetworkIDDescriptionParams, opts ...ClientOption) (*GetWifiNetworkIDDescriptionOK, error)

	GetWifiNetworkIDFeatures(params *GetWifiNetworkIDFeaturesParams, opts ...ClientOption) (*GetWifiNetworkIDFeaturesOK, error)

	GetWifiNetworkIDName(params *GetWifiNetworkIDNameParams, opts ...ClientOption) (*GetWifiNetworkIDNameOK, error)

	GetWifiNetworkIDWifi(params *GetWifiNetworkIDWifiParams, opts ...ClientOption) (*GetWifiNetworkIDWifiOK, error)

	PostWifi(params *PostWifiParams, opts ...ClientOption) (*PostWifiCreated, error)

	PutWifiNetworkID(params *PutWifiNetworkIDParams, opts ...ClientOption) (*PutWifiNetworkIDNoContent, error)

	PutWifiNetworkIDDescription(params *PutWifiNetworkIDDescriptionParams, opts ...ClientOption) (*PutWifiNetworkIDDescriptionNoContent, error)

	PutWifiNetworkIDFeatures(params *PutWifiNetworkIDFeaturesParams, opts ...ClientOption) (*PutWifiNetworkIDFeaturesNoContent, error)

	PutWifiNetworkIDName(params *PutWifiNetworkIDNameParams, opts ...ClientOption) (*PutWifiNetworkIDNameNoContent, error)

	PutWifiNetworkIDWifi(params *PutWifiNetworkIDWifiParams, opts ...ClientOption) (*PutWifiNetworkIDWifiNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteWifiNetworkID deletes a wifi network
*/
func (a *Client) DeleteWifiNetworkID(params *DeleteWifiNetworkIDParams, opts ...ClientOption) (*DeleteWifiNetworkIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWifiNetworkIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteWifiNetworkID",
		Method:             "DELETE",
		PathPattern:        "/wifi/{network_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteWifiNetworkIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteWifiNetworkIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteWifiNetworkIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetWifi lists all wifi network i ds
*/
func (a *Client) GetWifi(params *GetWifiParams, opts ...ClientOption) (*GetWifiOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWifiParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWifi",
		Method:             "GET",
		PathPattern:        "/wifi",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWifiReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWifiOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWifiDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetWifiNetworkID describes a wifi network
*/
func (a *Client) GetWifiNetworkID(params *GetWifiNetworkIDParams, opts ...ClientOption) (*GetWifiNetworkIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWifiNetworkIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWifiNetworkID",
		Method:             "GET",
		PathPattern:        "/wifi/{network_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWifiNetworkIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWifiNetworkIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWifiNetworkIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetWifiNetworkIDDescription gets description of a wifi network
*/
func (a *Client) GetWifiNetworkIDDescription(params *GetWifiNetworkIDDescriptionParams, opts ...ClientOption) (*GetWifiNetworkIDDescriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWifiNetworkIDDescriptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWifiNetworkIDDescription",
		Method:             "GET",
		PathPattern:        "/wifi/{network_id}/description",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWifiNetworkIDDescriptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWifiNetworkIDDescriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWifiNetworkIDDescriptionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetWifiNetworkIDFeatures gets feature flags for a wifi network
*/
func (a *Client) GetWifiNetworkIDFeatures(params *GetWifiNetworkIDFeaturesParams, opts ...ClientOption) (*GetWifiNetworkIDFeaturesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWifiNetworkIDFeaturesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWifiNetworkIDFeatures",
		Method:             "GET",
		PathPattern:        "/wifi/{network_id}/features",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWifiNetworkIDFeaturesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWifiNetworkIDFeaturesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWifiNetworkIDFeaturesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetWifiNetworkIDName gets the name of a wifi network
*/
func (a *Client) GetWifiNetworkIDName(params *GetWifiNetworkIDNameParams, opts ...ClientOption) (*GetWifiNetworkIDNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWifiNetworkIDNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWifiNetworkIDName",
		Method:             "GET",
		PathPattern:        "/wifi/{network_id}/name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWifiNetworkIDNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWifiNetworkIDNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWifiNetworkIDNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetWifiNetworkIDWifi gets wifi configuration of a wifi network
*/
func (a *Client) GetWifiNetworkIDWifi(params *GetWifiNetworkIDWifiParams, opts ...ClientOption) (*GetWifiNetworkIDWifiOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWifiNetworkIDWifiParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWifiNetworkIDWifi",
		Method:             "GET",
		PathPattern:        "/wifi/{network_id}/wifi",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWifiNetworkIDWifiReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWifiNetworkIDWifiOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWifiNetworkIDWifiDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostWifi creates a new wifi network
*/
func (a *Client) PostWifi(params *PostWifiParams, opts ...ClientOption) (*PostWifiCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWifiParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostWifi",
		Method:             "POST",
		PathPattern:        "/wifi",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostWifiReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostWifiCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostWifiDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutWifiNetworkID updates an entire wifi network
*/
func (a *Client) PutWifiNetworkID(params *PutWifiNetworkIDParams, opts ...ClientOption) (*PutWifiNetworkIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutWifiNetworkIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutWifiNetworkID",
		Method:             "PUT",
		PathPattern:        "/wifi/{network_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutWifiNetworkIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutWifiNetworkIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutWifiNetworkIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutWifiNetworkIDDescription updates the description of a wifi network
*/
func (a *Client) PutWifiNetworkIDDescription(params *PutWifiNetworkIDDescriptionParams, opts ...ClientOption) (*PutWifiNetworkIDDescriptionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutWifiNetworkIDDescriptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutWifiNetworkIDDescription",
		Method:             "PUT",
		PathPattern:        "/wifi/{network_id}/description",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutWifiNetworkIDDescriptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutWifiNetworkIDDescriptionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutWifiNetworkIDDescriptionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutWifiNetworkIDFeatures updates feature flags for a wifi network
*/
func (a *Client) PutWifiNetworkIDFeatures(params *PutWifiNetworkIDFeaturesParams, opts ...ClientOption) (*PutWifiNetworkIDFeaturesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutWifiNetworkIDFeaturesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutWifiNetworkIDFeatures",
		Method:             "PUT",
		PathPattern:        "/wifi/{network_id}/features",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutWifiNetworkIDFeaturesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutWifiNetworkIDFeaturesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutWifiNetworkIDFeaturesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutWifiNetworkIDName updates the name of a wifi network
*/
func (a *Client) PutWifiNetworkIDName(params *PutWifiNetworkIDNameParams, opts ...ClientOption) (*PutWifiNetworkIDNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutWifiNetworkIDNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutWifiNetworkIDName",
		Method:             "PUT",
		PathPattern:        "/wifi/{network_id}/name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutWifiNetworkIDNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutWifiNetworkIDNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutWifiNetworkIDNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutWifiNetworkIDWifi updates the wifi configuration of a wifi network
*/
func (a *Client) PutWifiNetworkIDWifi(params *PutWifiNetworkIDWifiParams, opts ...ClientOption) (*PutWifiNetworkIDWifiNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutWifiNetworkIDWifiParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutWifiNetworkIDWifi",
		Method:             "PUT",
		PathPattern:        "/wifi/{network_id}/wifi",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutWifiNetworkIDWifiReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutWifiNetworkIDWifiNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutWifiNetworkIDWifiDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
