// Code generated by go-swagger; DO NOT EDIT.

package baremetal

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetCiNodesParams creates a new GetCiNodesParams object
// with the default values initialized.
func NewGetCiNodesParams() *GetCiNodesParams {
	var ()
	return &GetCiNodesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCiNodesParamsWithTimeout creates a new GetCiNodesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCiNodesParamsWithTimeout(timeout time.Duration) *GetCiNodesParams {
	var ()
	return &GetCiNodesParams{

		timeout: timeout,
	}
}

// NewGetCiNodesParamsWithContext creates a new GetCiNodesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetCiNodesParamsWithContext(ctx context.Context) *GetCiNodesParams {
	var ()
	return &GetCiNodesParams{

		Context: ctx,
	}
}

// NewGetCiNodesParamsWithHTTPClient creates a new GetCiNodesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetCiNodesParamsWithHTTPClient(client *http.Client) *GetCiNodesParams {
	var ()
	return &GetCiNodesParams{
		HTTPClient: client,
	}
}

/*GetCiNodesParams contains all the parameters to send to the API endpoint
for the get ci nodes operation typically these are written to a http.Request
*/
type GetCiNodesParams struct {

	/*ListUntagged
	  Set this to a non-empty value to filter for all untagged nodes

	*/
	ListUntagged *string
	/*Tag
	  Optional tag to filter listed nodes by

	*/
	Tag *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get ci nodes params
func (o *GetCiNodesParams) WithTimeout(timeout time.Duration) *GetCiNodesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get ci nodes params
func (o *GetCiNodesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get ci nodes params
func (o *GetCiNodesParams) WithContext(ctx context.Context) *GetCiNodesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get ci nodes params
func (o *GetCiNodesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get ci nodes params
func (o *GetCiNodesParams) WithHTTPClient(client *http.Client) *GetCiNodesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get ci nodes params
func (o *GetCiNodesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithListUntagged adds the listUntagged to the get ci nodes params
func (o *GetCiNodesParams) WithListUntagged(listUntagged *string) *GetCiNodesParams {
	o.SetListUntagged(listUntagged)
	return o
}

// SetListUntagged adds the listUntagged to the get ci nodes params
func (o *GetCiNodesParams) SetListUntagged(listUntagged *string) {
	o.ListUntagged = listUntagged
}

// WithTag adds the tag to the get ci nodes params
func (o *GetCiNodesParams) WithTag(tag *string) *GetCiNodesParams {
	o.SetTag(tag)
	return o
}

// SetTag adds the tag to the get ci nodes params
func (o *GetCiNodesParams) SetTag(tag *string) {
	o.Tag = tag
}

// WriteToRequest writes these params to a swagger request
func (o *GetCiNodesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ListUntagged != nil {

		// query param list_untagged
		var qrListUntagged string
		if o.ListUntagged != nil {
			qrListUntagged = *o.ListUntagged
		}
		qListUntagged := qrListUntagged
		if qListUntagged != "" {
			if err := r.SetQueryParam("list_untagged", qListUntagged); err != nil {
				return err
			}
		}

	}

	if o.Tag != nil {

		// query param tag
		var qrTag string
		if o.Tag != nil {
			qrTag = *o.Tag
		}
		qTag := qrTag
		if qTag != "" {
			if err := r.SetQueryParam("tag", qTag); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
