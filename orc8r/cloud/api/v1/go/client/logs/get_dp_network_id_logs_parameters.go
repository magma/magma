// Code generated by go-swagger; DO NOT EDIT.

package logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetDpNetworkIDLogsParams creates a new GetDpNetworkIDLogsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetDpNetworkIDLogsParams() *GetDpNetworkIDLogsParams {
	return &GetDpNetworkIDLogsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetDpNetworkIDLogsParamsWithTimeout creates a new GetDpNetworkIDLogsParams object
// with the ability to set a timeout on a request.
func NewGetDpNetworkIDLogsParamsWithTimeout(timeout time.Duration) *GetDpNetworkIDLogsParams {
	return &GetDpNetworkIDLogsParams{
		timeout: timeout,
	}
}

// NewGetDpNetworkIDLogsParamsWithContext creates a new GetDpNetworkIDLogsParams object
// with the ability to set a context for a request.
func NewGetDpNetworkIDLogsParamsWithContext(ctx context.Context) *GetDpNetworkIDLogsParams {
	return &GetDpNetworkIDLogsParams{
		Context: ctx,
	}
}

// NewGetDpNetworkIDLogsParamsWithHTTPClient creates a new GetDpNetworkIDLogsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetDpNetworkIDLogsParamsWithHTTPClient(client *http.Client) *GetDpNetworkIDLogsParams {
	return &GetDpNetworkIDLogsParams{
		HTTPClient: client,
	}
}

/*
GetDpNetworkIDLogsParams contains all the parameters to send to the API endpoint

	for the get dp network ID logs operation.

	Typically these are written to a http.Request.
*/
type GetDpNetworkIDLogsParams struct {

	/* Begin.

	   start datetime of log

	   Format: date-time
	*/
	Begin *strfmt.DateTime

	/* End.

	   end datatime of log

	   Format: date-time
	*/
	End *strfmt.DateTime

	/* FccID.

	   fcc id of cbsd
	*/
	FccID *string

	/* From.

	   log origin
	*/
	From *string

	/* Limit.

	   Number of record to return
	*/
	Limit *int64

	/* NetworkID.

	   Network ID
	*/
	NetworkID string

	/* Offset.

	   Start index for pagination
	*/
	Offset *int64

	/* ResponseCode.

	   response code (only applicable for SAS responses)
	*/
	ResponseCode *int64

	/* SerialNumber.

	   serial number of cbsd
	*/
	SerialNumber *string

	/* To.

	   log destination
	*/
	To *string

	/* Type.

	   log type
	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get dp network ID logs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDpNetworkIDLogsParams) WithDefaults() *GetDpNetworkIDLogsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get dp network ID logs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDpNetworkIDLogsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get dp network ID logs params
func (o *GetDpNetworkIDLogsParams) WithTimeout(timeout time.Duration) *GetDpNetworkIDLogsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get dp network ID logs params
func (o *GetDpNetworkIDLogsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get dp network ID logs params
func (o *GetDpNetworkIDLogsParams) WithContext(ctx context.Context) *GetDpNetworkIDLogsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get dp network ID logs params
func (o *GetDpNetworkIDLogsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get dp network ID logs params
func (o *GetDpNetworkIDLogsParams) WithHTTPClient(client *http.Client) *GetDpNetworkIDLogsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get dp network ID logs params
func (o *GetDpNetworkIDLogsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBegin adds the begin to the get dp network ID logs params
func (o *GetDpNetworkIDLogsParams) WithBegin(begin *strfmt.DateTime) *GetDpNetworkIDLogsParams {
	o.SetBegin(begin)
	return o
}

// SetBegin adds the begin to the get dp network ID logs params
func (o *GetDpNetworkIDLogsParams) SetBegin(begin *strfmt.DateTime) {
	o.Begin = begin
}

// WithEnd adds the end to the get dp network ID logs params
func (o *GetDpNetworkIDLogsParams) WithEnd(end *strfmt.DateTime) *GetDpNetworkIDLogsParams {
	o.SetEnd(end)
	return o
}

// SetEnd adds the end to the get dp network ID logs params
func (o *GetDpNetworkIDLogsParams) SetEnd(end *strfmt.DateTime) {
	o.End = end
}

// WithFccID adds the fccID to the get dp network ID logs params
func (o *GetDpNetworkIDLogsParams) WithFccID(fccID *string) *GetDpNetworkIDLogsParams {
	o.SetFccID(fccID)
	return o
}

// SetFccID adds the fccId to the get dp network ID logs params
func (o *GetDpNetworkIDLogsParams) SetFccID(fccID *string) {
	o.FccID = fccID
}

// WithFrom adds the from to the get dp network ID logs params
func (o *GetDpNetworkIDLogsParams) WithFrom(from *string) *GetDpNetworkIDLogsParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get dp network ID logs params
func (o *GetDpNetworkIDLogsParams) SetFrom(from *string) {
	o.From = from
}

// WithLimit adds the limit to the get dp network ID logs params
func (o *GetDpNetworkIDLogsParams) WithLimit(limit *int64) *GetDpNetworkIDLogsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get dp network ID logs params
func (o *GetDpNetworkIDLogsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithNetworkID adds the networkID to the get dp network ID logs params
func (o *GetDpNetworkIDLogsParams) WithNetworkID(networkID string) *GetDpNetworkIDLogsParams {
	o.SetNetworkID(networkID)
	return o
}

// SetNetworkID adds the networkId to the get dp network ID logs params
func (o *GetDpNetworkIDLogsParams) SetNetworkID(networkID string) {
	o.NetworkID = networkID
}

// WithOffset adds the offset to the get dp network ID logs params
func (o *GetDpNetworkIDLogsParams) WithOffset(offset *int64) *GetDpNetworkIDLogsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get dp network ID logs params
func (o *GetDpNetworkIDLogsParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithResponseCode adds the responseCode to the get dp network ID logs params
func (o *GetDpNetworkIDLogsParams) WithResponseCode(responseCode *int64) *GetDpNetworkIDLogsParams {
	o.SetResponseCode(responseCode)
	return o
}

// SetResponseCode adds the responseCode to the get dp network ID logs params
func (o *GetDpNetworkIDLogsParams) SetResponseCode(responseCode *int64) {
	o.ResponseCode = responseCode
}

// WithSerialNumber adds the serialNumber to the get dp network ID logs params
func (o *GetDpNetworkIDLogsParams) WithSerialNumber(serialNumber *string) *GetDpNetworkIDLogsParams {
	o.SetSerialNumber(serialNumber)
	return o
}

// SetSerialNumber adds the serialNumber to the get dp network ID logs params
func (o *GetDpNetworkIDLogsParams) SetSerialNumber(serialNumber *string) {
	o.SerialNumber = serialNumber
}

// WithTo adds the to to the get dp network ID logs params
func (o *GetDpNetworkIDLogsParams) WithTo(to *string) *GetDpNetworkIDLogsParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the get dp network ID logs params
func (o *GetDpNetworkIDLogsParams) SetTo(to *string) {
	o.To = to
}

// WithType adds the typeVar to the get dp network ID logs params
func (o *GetDpNetworkIDLogsParams) WithType(typeVar *string) *GetDpNetworkIDLogsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get dp network ID logs params
func (o *GetDpNetworkIDLogsParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetDpNetworkIDLogsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Begin != nil {

		// query param begin
		var qrBegin strfmt.DateTime

		if o.Begin != nil {
			qrBegin = *o.Begin
		}
		qBegin := qrBegin.String()
		if qBegin != "" {

			if err := r.SetQueryParam("begin", qBegin); err != nil {
				return err
			}
		}
	}

	if o.End != nil {

		// query param end
		var qrEnd strfmt.DateTime

		if o.End != nil {
			qrEnd = *o.End
		}
		qEnd := qrEnd.String()
		if qEnd != "" {

			if err := r.SetQueryParam("end", qEnd); err != nil {
				return err
			}
		}
	}

	if o.FccID != nil {

		// query param fcc_id
		var qrFccID string

		if o.FccID != nil {
			qrFccID = *o.FccID
		}
		qFccID := qrFccID
		if qFccID != "" {

			if err := r.SetQueryParam("fcc_id", qFccID); err != nil {
				return err
			}
		}
	}

	if o.From != nil {

		// query param from
		var qrFrom string

		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := qrFrom
		if qFrom != "" {

			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	// path param network_id
	if err := r.SetPathParam("network_id", o.NetworkID); err != nil {
		return err
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.ResponseCode != nil {

		// query param response_code
		var qrResponseCode int64

		if o.ResponseCode != nil {
			qrResponseCode = *o.ResponseCode
		}
		qResponseCode := swag.FormatInt64(qrResponseCode)
		if qResponseCode != "" {

			if err := r.SetQueryParam("response_code", qResponseCode); err != nil {
				return err
			}
		}
	}

	if o.SerialNumber != nil {

		// query param serial_number
		var qrSerialNumber string

		if o.SerialNumber != nil {
			qrSerialNumber = *o.SerialNumber
		}
		qSerialNumber := qrSerialNumber
		if qSerialNumber != "" {

			if err := r.SetQueryParam("serial_number", qSerialNumber); err != nil {
				return err
			}
		}
	}

	if o.To != nil {

		// query param to
		var qrTo string

		if o.To != nil {
			qrTo = *o.To
		}
		qTo := qrTo
		if qTo != "" {

			if err := r.SetQueryParam("to", qTo); err != nil {
				return err
			}
		}
	}

	if o.Type != nil {

		// query param type
		var qrType string

		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
