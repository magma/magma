// Code generated by go-swagger; DO NOT EDIT.

package wifi_meshes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new wifi meshes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for wifi meshes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteWifiNetworkIDMeshesMeshID(params *DeleteWifiNetworkIDMeshesMeshIDParams, opts ...ClientOption) (*DeleteWifiNetworkIDMeshesMeshIDNoContent, error)

	GetWifiNetworkIDMeshes(params *GetWifiNetworkIDMeshesParams, opts ...ClientOption) (*GetWifiNetworkIDMeshesOK, error)

	GetWifiNetworkIDMeshesMeshID(params *GetWifiNetworkIDMeshesMeshIDParams, opts ...ClientOption) (*GetWifiNetworkIDMeshesMeshIDOK, error)

	GetWifiNetworkIDMeshesMeshIDConfig(params *GetWifiNetworkIDMeshesMeshIDConfigParams, opts ...ClientOption) (*GetWifiNetworkIDMeshesMeshIDConfigOK, error)

	GetWifiNetworkIDMeshesMeshIDName(params *GetWifiNetworkIDMeshesMeshIDNameParams, opts ...ClientOption) (*GetWifiNetworkIDMeshesMeshIDNameOK, error)

	PostWifiNetworkIDMeshes(params *PostWifiNetworkIDMeshesParams, opts ...ClientOption) (*PostWifiNetworkIDMeshesCreated, error)

	PutWifiNetworkIDMeshesMeshID(params *PutWifiNetworkIDMeshesMeshIDParams, opts ...ClientOption) (*PutWifiNetworkIDMeshesMeshIDCreated, error)

	PutWifiNetworkIDMeshesMeshIDConfig(params *PutWifiNetworkIDMeshesMeshIDConfigParams, opts ...ClientOption) (*PutWifiNetworkIDMeshesMeshIDConfigNoContent, error)

	PutWifiNetworkIDMeshesMeshIDName(params *PutWifiNetworkIDMeshesMeshIDNameParams, opts ...ClientOption) (*PutWifiNetworkIDMeshesMeshIDNameNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteWifiNetworkIDMeshesMeshID deletes a wifi mesh
*/
func (a *Client) DeleteWifiNetworkIDMeshesMeshID(params *DeleteWifiNetworkIDMeshesMeshIDParams, opts ...ClientOption) (*DeleteWifiNetworkIDMeshesMeshIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWifiNetworkIDMeshesMeshIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteWifiNetworkIDMeshesMeshID",
		Method:             "DELETE",
		PathPattern:        "/wifi/{network_id}/meshes/{mesh_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteWifiNetworkIDMeshesMeshIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteWifiNetworkIDMeshesMeshIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteWifiNetworkIDMeshesMeshIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetWifiNetworkIDMeshes lists meshes in the network
*/
func (a *Client) GetWifiNetworkIDMeshes(params *GetWifiNetworkIDMeshesParams, opts ...ClientOption) (*GetWifiNetworkIDMeshesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWifiNetworkIDMeshesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWifiNetworkIDMeshes",
		Method:             "GET",
		PathPattern:        "/wifi/{network_id}/meshes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWifiNetworkIDMeshesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWifiNetworkIDMeshesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWifiNetworkIDMeshesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetWifiNetworkIDMeshesMeshID gets a specific wifi mesh
*/
func (a *Client) GetWifiNetworkIDMeshesMeshID(params *GetWifiNetworkIDMeshesMeshIDParams, opts ...ClientOption) (*GetWifiNetworkIDMeshesMeshIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWifiNetworkIDMeshesMeshIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWifiNetworkIDMeshesMeshID",
		Method:             "GET",
		PathPattern:        "/wifi/{network_id}/meshes/{mesh_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWifiNetworkIDMeshesMeshIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWifiNetworkIDMeshesMeshIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWifiNetworkIDMeshesMeshIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetWifiNetworkIDMeshesMeshIDConfig gets the config of a specific wifi mesh
*/
func (a *Client) GetWifiNetworkIDMeshesMeshIDConfig(params *GetWifiNetworkIDMeshesMeshIDConfigParams, opts ...ClientOption) (*GetWifiNetworkIDMeshesMeshIDConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWifiNetworkIDMeshesMeshIDConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWifiNetworkIDMeshesMeshIDConfig",
		Method:             "GET",
		PathPattern:        "/wifi/{network_id}/meshes/{mesh_id}/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWifiNetworkIDMeshesMeshIDConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWifiNetworkIDMeshesMeshIDConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWifiNetworkIDMeshesMeshIDConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetWifiNetworkIDMeshesMeshIDName gets the name of a specific wifi mesh
*/
func (a *Client) GetWifiNetworkIDMeshesMeshIDName(params *GetWifiNetworkIDMeshesMeshIDNameParams, opts ...ClientOption) (*GetWifiNetworkIDMeshesMeshIDNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWifiNetworkIDMeshesMeshIDNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWifiNetworkIDMeshesMeshIDName",
		Method:             "GET",
		PathPattern:        "/wifi/{network_id}/meshes/{mesh_id}/name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWifiNetworkIDMeshesMeshIDNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWifiNetworkIDMeshesMeshIDNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWifiNetworkIDMeshesMeshIDNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostWifiNetworkIDMeshes adds a new mesh to the network
*/
func (a *Client) PostWifiNetworkIDMeshes(params *PostWifiNetworkIDMeshesParams, opts ...ClientOption) (*PostWifiNetworkIDMeshesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWifiNetworkIDMeshesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostWifiNetworkIDMeshes",
		Method:             "POST",
		PathPattern:        "/wifi/{network_id}/meshes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostWifiNetworkIDMeshesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostWifiNetworkIDMeshesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostWifiNetworkIDMeshesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutWifiNetworkIDMeshesMeshID updates a mesh in the network
*/
func (a *Client) PutWifiNetworkIDMeshesMeshID(params *PutWifiNetworkIDMeshesMeshIDParams, opts ...ClientOption) (*PutWifiNetworkIDMeshesMeshIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutWifiNetworkIDMeshesMeshIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutWifiNetworkIDMeshesMeshID",
		Method:             "PUT",
		PathPattern:        "/wifi/{network_id}/meshes/{mesh_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutWifiNetworkIDMeshesMeshIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutWifiNetworkIDMeshesMeshIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutWifiNetworkIDMeshesMeshIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutWifiNetworkIDMeshesMeshIDConfig updates the wifi config of a mesh in the network
*/
func (a *Client) PutWifiNetworkIDMeshesMeshIDConfig(params *PutWifiNetworkIDMeshesMeshIDConfigParams, opts ...ClientOption) (*PutWifiNetworkIDMeshesMeshIDConfigNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutWifiNetworkIDMeshesMeshIDConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutWifiNetworkIDMeshesMeshIDConfig",
		Method:             "PUT",
		PathPattern:        "/wifi/{network_id}/meshes/{mesh_id}/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutWifiNetworkIDMeshesMeshIDConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutWifiNetworkIDMeshesMeshIDConfigNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutWifiNetworkIDMeshesMeshIDConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutWifiNetworkIDMeshesMeshIDName updates the name of a mesh in the network
*/
func (a *Client) PutWifiNetworkIDMeshesMeshIDName(params *PutWifiNetworkIDMeshesMeshIDNameParams, opts ...ClientOption) (*PutWifiNetworkIDMeshesMeshIDNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutWifiNetworkIDMeshesMeshIDNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutWifiNetworkIDMeshesMeshIDName",
		Method:             "PUT",
		PathPattern:        "/wifi/{network_id}/meshes/{mesh_id}/name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutWifiNetworkIDMeshesMeshIDNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutWifiNetworkIDMeshesMeshIDNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutWifiNetworkIDMeshesMeshIDNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
