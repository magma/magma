// Code generated by go-swagger; DO NOT EDIT.

package commands

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new commands API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for commands API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PostNetworksNetworkIDGatewaysGatewayIDCommandGeneric executes generic command on gateway
*/
func (a *Client) PostNetworksNetworkIDGatewaysGatewayIDCommandGeneric(params *PostNetworksNetworkIDGatewaysGatewayIDCommandGenericParams) (*PostNetworksNetworkIDGatewaysGatewayIDCommandGenericOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNetworksNetworkIDGatewaysGatewayIDCommandGenericParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNetworksNetworkIDGatewaysGatewayIDCommandGeneric",
		Method:             "POST",
		PathPattern:        "/networks/{network_id}/gateways/{gateway_id}/command/generic",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostNetworksNetworkIDGatewaysGatewayIDCommandGenericReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostNetworksNetworkIDGatewaysGatewayIDCommandGenericOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostNetworksNetworkIDGatewaysGatewayIDCommandGenericDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostNetworksNetworkIDGatewaysGatewayIDCommandPing pings host s from gateway
*/
func (a *Client) PostNetworksNetworkIDGatewaysGatewayIDCommandPing(params *PostNetworksNetworkIDGatewaysGatewayIDCommandPingParams) (*PostNetworksNetworkIDGatewaysGatewayIDCommandPingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNetworksNetworkIDGatewaysGatewayIDCommandPingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNetworksNetworkIDGatewaysGatewayIDCommandPing",
		Method:             "POST",
		PathPattern:        "/networks/{network_id}/gateways/{gateway_id}/command/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostNetworksNetworkIDGatewaysGatewayIDCommandPingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostNetworksNetworkIDGatewaysGatewayIDCommandPingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostNetworksNetworkIDGatewaysGatewayIDCommandPingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostNetworksNetworkIDGatewaysGatewayIDCommandReboot reboots gateway device
*/
func (a *Client) PostNetworksNetworkIDGatewaysGatewayIDCommandReboot(params *PostNetworksNetworkIDGatewaysGatewayIDCommandRebootParams) (*PostNetworksNetworkIDGatewaysGatewayIDCommandRebootOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNetworksNetworkIDGatewaysGatewayIDCommandRebootParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNetworksNetworkIDGatewaysGatewayIDCommandReboot",
		Method:             "POST",
		PathPattern:        "/networks/{network_id}/gateways/{gateway_id}/command/reboot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostNetworksNetworkIDGatewaysGatewayIDCommandRebootReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostNetworksNetworkIDGatewaysGatewayIDCommandRebootOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostNetworksNetworkIDGatewaysGatewayIDCommandRebootDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostNetworksNetworkIDGatewaysGatewayIDCommandRestartServices restarts gateway services
*/
func (a *Client) PostNetworksNetworkIDGatewaysGatewayIDCommandRestartServices(params *PostNetworksNetworkIDGatewaysGatewayIDCommandRestartServicesParams) (*PostNetworksNetworkIDGatewaysGatewayIDCommandRestartServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNetworksNetworkIDGatewaysGatewayIDCommandRestartServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNetworksNetworkIDGatewaysGatewayIDCommandRestartServices",
		Method:             "POST",
		PathPattern:        "/networks/{network_id}/gateways/{gateway_id}/command/restart_services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostNetworksNetworkIDGatewaysGatewayIDCommandRestartServicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostNetworksNetworkIDGatewaysGatewayIDCommandRestartServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostNetworksNetworkIDGatewaysGatewayIDCommandRestartServicesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
