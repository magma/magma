/*
Copyright 2020 The Magma Authors.

This source code is licensed under the BSD-style license found in the
LICENSE file in the root directory of this source tree.

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";
package magma.orc8r;

import "orc8r/protos/common.proto";
import "orc8r/protos/service303.proto";

option go_package = "magma/orc8r/lib/go/protos";

message StateID {
    string type = 1;
    string deviceID = 2;
}

// GetStatesRequest functions in two modes
//  - ids is non-empty  -- normal Get
//  - ids empty         -- Search with filters and load criteria
message GetStatesRequest {
    // networkID of the network containing desired state.
    string networkID = 1;

    // ids for which to return corresponding state.
    repeated StateID ids = 2;

    // typeFilter is an OR of all types specified.
    // The service will return all states matching any of the specified types.
    repeated string typeFilter = 10;

    // idFilter is an OR of all device IDs specified.
    // The service will return all states matching any of the specified IDs.
    repeated string idFilter = 11;

    // loadValues specifies whether state values should be loaded in
    // addition to metadata.
    bool loadValues = 12;

    // If non-empty, the value of id_prefix will be used to do a prefix-match
    // on the keys of queried states. This argument supersedes any value for
    // idFilter.
    string id_prefix = 13;
}

message GetStatesResponse {
    repeated State states = 1;
}

message ReportStatesRequest {
    repeated State states = 1;
}

message ReportStatesResponse {
    repeated IDAndError unreportedStates = 1;
}

message IDAndError {
    string type = 1;
    string deviceID = 2;
    string error = 3;
}

message DeleteStatesRequest {
    string networkID = 1;
    repeated StateID ids = 2;
}

message SyncStatesRequest {
   repeated IDAndVersion states = 1;
}

message IDAndVersion {
    StateID id = 1;
    uint64 version = 2;
}

message SyncStatesResponse {
    repeated IDAndVersion unsyncedStates = 1;
}

service CloudStateService {
    // GetStates retrieves states from blobstorage.
    rpc GetStates (GetStatesRequest) returns (GetStatesResponse) {}
}

service StateService {
    // ReportStates saves states into blobstorage.
    rpc ReportStates(ReportStatesRequest) returns (ReportStatesResponse) {}

    // DeleteStates deletes states from blobstorage.
    rpc DeleteStates(DeleteStatesRequest) returns (Void) {}

    // SyncStates retrieves states from blobstorage, compares their versions
    // to the states included in the request, and returns the IDAndVersions
    // that differ.
    rpc SyncStates(SyncStatesRequest) returns (SyncStatesResponse) {}
}
