// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CallTraceServiceClient is the client API for CallTraceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CallTraceServiceClient interface {
	// Start a call trace on the gateway with the specified options.
	// Only a single call trace can be active on a gateway at a time.
	//
	StartCallTrace(ctx context.Context, in *StartTraceRequest, opts ...grpc.CallOption) (*StartTraceResponse, error)
	// End the call trace that is currently active on the gateway.
	//
	EndCallTrace(ctx context.Context, in *EndTraceRequest, opts ...grpc.CallOption) (*EndTraceResponse, error)
}

type callTraceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCallTraceServiceClient(cc grpc.ClientConnInterface) CallTraceServiceClient {
	return &callTraceServiceClient{cc}
}

func (c *callTraceServiceClient) StartCallTrace(ctx context.Context, in *StartTraceRequest, opts ...grpc.CallOption) (*StartTraceResponse, error) {
	out := new(StartTraceResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.CallTraceService/StartCallTrace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callTraceServiceClient) EndCallTrace(ctx context.Context, in *EndTraceRequest, opts ...grpc.CallOption) (*EndTraceResponse, error) {
	out := new(EndTraceResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.CallTraceService/EndCallTrace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CallTraceServiceServer is the server API for CallTraceService service.
// All implementations should embed UnimplementedCallTraceServiceServer
// for forward compatibility
type CallTraceServiceServer interface {
	// Start a call trace on the gateway with the specified options.
	// Only a single call trace can be active on a gateway at a time.
	//
	StartCallTrace(context.Context, *StartTraceRequest) (*StartTraceResponse, error)
	// End the call trace that is currently active on the gateway.
	//
	EndCallTrace(context.Context, *EndTraceRequest) (*EndTraceResponse, error)
}

// UnimplementedCallTraceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCallTraceServiceServer struct {
}

func (UnimplementedCallTraceServiceServer) StartCallTrace(context.Context, *StartTraceRequest) (*StartTraceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCallTrace not implemented")
}
func (UnimplementedCallTraceServiceServer) EndCallTrace(context.Context, *EndTraceRequest) (*EndTraceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndCallTrace not implemented")
}

// UnsafeCallTraceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CallTraceServiceServer will
// result in compilation errors.
type UnsafeCallTraceServiceServer interface {
	mustEmbedUnimplementedCallTraceServiceServer()
}

func RegisterCallTraceServiceServer(s grpc.ServiceRegistrar, srv CallTraceServiceServer) {
	s.RegisterService(&CallTraceService_ServiceDesc, srv)
}

func _CallTraceService_StartCallTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTraceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallTraceServiceServer).StartCallTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.CallTraceService/StartCallTrace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallTraceServiceServer).StartCallTrace(ctx, req.(*StartTraceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallTraceService_EndCallTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndTraceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallTraceServiceServer).EndCallTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.CallTraceService/EndCallTrace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallTraceServiceServer).EndCallTrace(ctx, req.(*EndTraceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CallTraceService_ServiceDesc is the grpc.ServiceDesc for CallTraceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CallTraceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.CallTraceService",
	HandlerType: (*CallTraceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartCallTrace",
			Handler:    _CallTraceService_StartCallTrace_Handler,
		},
		{
			MethodName: "EndCallTrace",
			Handler:    _CallTraceService_EndCallTrace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orc8r/protos/ctraced.proto",
}

// CallTraceControllerClient is the client API for CallTraceController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CallTraceControllerClient interface {
	// Report that a call trace has ended
	//
	ReportEndedCallTrace(ctx context.Context, in *ReportEndedTraceRequest, opts ...grpc.CallOption) (*ReportEndedTraceResponse, error)
}

type callTraceControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCallTraceControllerClient(cc grpc.ClientConnInterface) CallTraceControllerClient {
	return &callTraceControllerClient{cc}
}

func (c *callTraceControllerClient) ReportEndedCallTrace(ctx context.Context, in *ReportEndedTraceRequest, opts ...grpc.CallOption) (*ReportEndedTraceResponse, error) {
	out := new(ReportEndedTraceResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.CallTraceController/ReportEndedCallTrace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CallTraceControllerServer is the server API for CallTraceController service.
// All implementations should embed UnimplementedCallTraceControllerServer
// for forward compatibility
type CallTraceControllerServer interface {
	// Report that a call trace has ended
	//
	ReportEndedCallTrace(context.Context, *ReportEndedTraceRequest) (*ReportEndedTraceResponse, error)
}

// UnimplementedCallTraceControllerServer should be embedded to have forward compatible implementations.
type UnimplementedCallTraceControllerServer struct {
}

func (UnimplementedCallTraceControllerServer) ReportEndedCallTrace(context.Context, *ReportEndedTraceRequest) (*ReportEndedTraceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportEndedCallTrace not implemented")
}

// UnsafeCallTraceControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CallTraceControllerServer will
// result in compilation errors.
type UnsafeCallTraceControllerServer interface {
	mustEmbedUnimplementedCallTraceControllerServer()
}

func RegisterCallTraceControllerServer(s grpc.ServiceRegistrar, srv CallTraceControllerServer) {
	s.RegisterService(&CallTraceController_ServiceDesc, srv)
}

func _CallTraceController_ReportEndedCallTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportEndedTraceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallTraceControllerServer).ReportEndedCallTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.CallTraceController/ReportEndedCallTrace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallTraceControllerServer).ReportEndedCallTrace(ctx, req.(*ReportEndedTraceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CallTraceController_ServiceDesc is the grpc.ServiceDesc for CallTraceController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CallTraceController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.CallTraceController",
	HandlerType: (*CallTraceControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportEndedCallTrace",
			Handler:    _CallTraceController_ReportEndedCallTrace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orc8r/protos/ctraced.proto",
}
