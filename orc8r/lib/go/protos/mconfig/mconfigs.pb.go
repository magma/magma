// Code generated by protoc-gen-go. DO NOT EDIT.
// source: orc8r/protos/mconfig/mconfigs.proto

package mconfig

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	protos "magma/orc8r/lib/go/protos"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//===========================================================================
// SharedMConfig is a wrapper around configs that are shared amongst services
//===========================================================================
type SharedMconfig struct {
	SentryConfig         *SharedSentryConfig `protobuf:"bytes,1,opt,name=sentry_config,json=sentryConfig,proto3" json:"sentry_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SharedMconfig) Reset()         { *m = SharedMconfig{} }
func (m *SharedMconfig) String() string { return proto.CompactTextString(m) }
func (*SharedMconfig) ProtoMessage()    {}
func (*SharedMconfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_9618f358f05ec5b9, []int{0}
}

func (m *SharedMconfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SharedMconfig.Unmarshal(m, b)
}
func (m *SharedMconfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SharedMconfig.Marshal(b, m, deterministic)
}
func (m *SharedMconfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SharedMconfig.Merge(m, src)
}
func (m *SharedMconfig) XXX_Size() int {
	return xxx_messageInfo_SharedMconfig.Size(m)
}
func (m *SharedMconfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SharedMconfig.DiscardUnknown(m)
}

var xxx_messageInfo_SharedMconfig proto.InternalMessageInfo

func (m *SharedMconfig) GetSentryConfig() *SharedSentryConfig {
	if m != nil {
		return m.SentryConfig
	}
	return nil
}

// --------------------------------------------------------------------------
// SentryConfig stores the network-wide Sentry.io configuration
// TODO(hcgatewood): rename, duplicated in lte/.../mconfigs
// --------------------------------------------------------------------------
type SharedSentryConfig struct {
	// dsn_python initializes the Sentry Python SDK and sets the remote URL.
	// If set to empty string, Sentry Python SDK will not be initialized.
	DsnPython string `protobuf:"bytes,1,opt,name=dsn_python,json=dsnPython,proto3" json:"dsn_python,omitempty"`
	// dsn_native initializes the Sentry Native SDK for C/C++ and sets the
	// remote URL. If set to empty string, Sentry Native SDK will not be
	// initialized.
	DsnNative string `protobuf:"bytes,2,opt,name=dsn_native,json=dsnNative,proto3" json:"dsn_native,omitempty"`
	// upload_mme_log decides whether MME service log file (/var/log/mme.log)
	// is uploaded along with MME crashreports
	UploadMmeLog bool `protobuf:"varint,3,opt,name=upload_mme_log,json=uploadMmeLog,proto3" json:"upload_mme_log,omitempty"`
	// sample_rate sets the rate at which Python error events are sampled.
	// sample_rate should be a number between 0 (0% of errors sent) and 1 (100%
	// of errors sent)
	SampleRate float32 `protobuf:"fixed32,4,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	// message patterns that are excluded from Sentry (regex substring match)
	ExclusionPatterns    []string `protobuf:"bytes,5,rep,name=exclusion_patterns,json=exclusionPatterns,proto3" json:"exclusion_patterns,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SharedSentryConfig) Reset()         { *m = SharedSentryConfig{} }
func (m *SharedSentryConfig) String() string { return proto.CompactTextString(m) }
func (*SharedSentryConfig) ProtoMessage()    {}
func (*SharedSentryConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_9618f358f05ec5b9, []int{1}
}

func (m *SharedSentryConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SharedSentryConfig.Unmarshal(m, b)
}
func (m *SharedSentryConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SharedSentryConfig.Marshal(b, m, deterministic)
}
func (m *SharedSentryConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SharedSentryConfig.Merge(m, src)
}
func (m *SharedSentryConfig) XXX_Size() int {
	return xxx_messageInfo_SharedSentryConfig.Size(m)
}
func (m *SharedSentryConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SharedSentryConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SharedSentryConfig proto.InternalMessageInfo

func (m *SharedSentryConfig) GetDsnPython() string {
	if m != nil {
		return m.DsnPython
	}
	return ""
}

func (m *SharedSentryConfig) GetDsnNative() string {
	if m != nil {
		return m.DsnNative
	}
	return ""
}

func (m *SharedSentryConfig) GetUploadMmeLog() bool {
	if m != nil {
		return m.UploadMmeLog
	}
	return false
}

func (m *SharedSentryConfig) GetSampleRate() float32 {
	if m != nil {
		return m.SampleRate
	}
	return 0
}

func (m *SharedSentryConfig) GetExclusionPatterns() []string {
	if m != nil {
		return m.ExclusionPatterns
	}
	return nil
}

//------------------------------------------------------------------------------
// Control Proxy configs
//------------------------------------------------------------------------------
type ControlProxy struct {
	LogLevel             protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ControlProxy) Reset()         { *m = ControlProxy{} }
func (m *ControlProxy) String() string { return proto.CompactTextString(m) }
func (*ControlProxy) ProtoMessage()    {}
func (*ControlProxy) Descriptor() ([]byte, []int) {
	return fileDescriptor_9618f358f05ec5b9, []int{2}
}

func (m *ControlProxy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControlProxy.Unmarshal(m, b)
}
func (m *ControlProxy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControlProxy.Marshal(b, m, deterministic)
}
func (m *ControlProxy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlProxy.Merge(m, src)
}
func (m *ControlProxy) XXX_Size() int {
	return xxx_messageInfo_ControlProxy.Size(m)
}
func (m *ControlProxy) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlProxy.DiscardUnknown(m)
}

var xxx_messageInfo_ControlProxy proto.InternalMessageInfo

func (m *ControlProxy) GetLogLevel() protos.LogLevel {
	if m != nil {
		return m.LogLevel
	}
	return protos.LogLevel_DEBUG
}

type ImageSpec struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Order                int64    `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageSpec) Reset()         { *m = ImageSpec{} }
func (m *ImageSpec) String() string { return proto.CompactTextString(m) }
func (*ImageSpec) ProtoMessage()    {}
func (*ImageSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_9618f358f05ec5b9, []int{3}
}

func (m *ImageSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageSpec.Unmarshal(m, b)
}
func (m *ImageSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageSpec.Marshal(b, m, deterministic)
}
func (m *ImageSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageSpec.Merge(m, src)
}
func (m *ImageSpec) XXX_Size() int {
	return xxx_messageInfo_ImageSpec.Size(m)
}
func (m *ImageSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ImageSpec proto.InternalMessageInfo

func (m *ImageSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ImageSpec) GetOrder() int64 {
	if m != nil {
		return m.Order
	}
	return 0
}

type MagmaD struct {
	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	// Interval for the gateways to send checkin rpc calls to the cloud.
	CheckinInterval int32 `protobuf:"varint,2,opt,name=checkin_interval,json=checkinInterval,proto3" json:"checkin_interval,omitempty"`
	// Checkin rpc timeout
	CheckinTimeout int32 `protobuf:"varint,3,opt,name=checkin_timeout,json=checkinTimeout,proto3" json:"checkin_timeout,omitempty"`
	// Enables autoupgrading of the magma package
	AutoupgradeEnabled bool `protobuf:"varint,4,opt,name=autoupgrade_enabled,json=autoupgradeEnabled,proto3" json:"autoupgrade_enabled,omitempty"`
	// Interval to poll for package upgrades
	AutoupgradePollInterval int32 `protobuf:"varint,5,opt,name=autoupgrade_poll_interval,json=autoupgradePollInterval,proto3" json:"autoupgrade_poll_interval,omitempty"`
	// The magma package version the gateway should upgrade to
	PackageVersion string `protobuf:"bytes,6,opt,name=package_version,json=packageVersion,proto3" json:"package_version,omitempty"`
	// List of upgrade images
	Images []*ImageSpec `protobuf:"bytes,7,rep,name=images,proto3" json:"images,omitempty"`
	// For streamer, should be left unused by gateway
	TierId       string          `protobuf:"bytes,8,opt,name=tier_id,json=tierId,proto3" json:"tier_id,omitempty"`
	FeatureFlags map[string]bool `protobuf:"bytes,9,rep,name=feature_flags,json=featureFlags,proto3" json:"feature_flags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// List of dynamic_services
	DynamicServices []string `protobuf:"bytes,10,rep,name=dynamic_services,json=dynamicServices,proto3" json:"dynamic_services,omitempty"`
	// orc8r version
	// version should be in X.X.X format with only non-negative numbers allowed for X.
	// in case we cant find orc8r_version, this will be left empty
	Orc8RVersion         string   `protobuf:"bytes,11,opt,name=orc8r_version,json=orc8rVersion,proto3" json:"orc8r_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MagmaD) Reset()         { *m = MagmaD{} }
func (m *MagmaD) String() string { return proto.CompactTextString(m) }
func (*MagmaD) ProtoMessage()    {}
func (*MagmaD) Descriptor() ([]byte, []int) {
	return fileDescriptor_9618f358f05ec5b9, []int{4}
}

func (m *MagmaD) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MagmaD.Unmarshal(m, b)
}
func (m *MagmaD) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MagmaD.Marshal(b, m, deterministic)
}
func (m *MagmaD) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MagmaD.Merge(m, src)
}
func (m *MagmaD) XXX_Size() int {
	return xxx_messageInfo_MagmaD.Size(m)
}
func (m *MagmaD) XXX_DiscardUnknown() {
	xxx_messageInfo_MagmaD.DiscardUnknown(m)
}

var xxx_messageInfo_MagmaD proto.InternalMessageInfo

func (m *MagmaD) GetLogLevel() protos.LogLevel {
	if m != nil {
		return m.LogLevel
	}
	return protos.LogLevel_DEBUG
}

func (m *MagmaD) GetCheckinInterval() int32 {
	if m != nil {
		return m.CheckinInterval
	}
	return 0
}

func (m *MagmaD) GetCheckinTimeout() int32 {
	if m != nil {
		return m.CheckinTimeout
	}
	return 0
}

func (m *MagmaD) GetAutoupgradeEnabled() bool {
	if m != nil {
		return m.AutoupgradeEnabled
	}
	return false
}

func (m *MagmaD) GetAutoupgradePollInterval() int32 {
	if m != nil {
		return m.AutoupgradePollInterval
	}
	return 0
}

func (m *MagmaD) GetPackageVersion() string {
	if m != nil {
		return m.PackageVersion
	}
	return ""
}

func (m *MagmaD) GetImages() []*ImageSpec {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *MagmaD) GetTierId() string {
	if m != nil {
		return m.TierId
	}
	return ""
}

func (m *MagmaD) GetFeatureFlags() map[string]bool {
	if m != nil {
		return m.FeatureFlags
	}
	return nil
}

func (m *MagmaD) GetDynamicServices() []string {
	if m != nil {
		return m.DynamicServices
	}
	return nil
}

func (m *MagmaD) GetOrc8RVersion() string {
	if m != nil {
		return m.Orc8RVersion
	}
	return ""
}

//------------------------------------------------------------------------------
// EventD configs
//------------------------------------------------------------------------------
type EventD struct {
	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	// The verbosity level for events.
	// All events less than or equal to this verbosity will be logged.
	EventVerbosity       int32    `protobuf:"varint,2,opt,name=event_verbosity,json=eventVerbosity,proto3" json:"event_verbosity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventD) Reset()         { *m = EventD{} }
func (m *EventD) String() string { return proto.CompactTextString(m) }
func (*EventD) ProtoMessage()    {}
func (*EventD) Descriptor() ([]byte, []int) {
	return fileDescriptor_9618f358f05ec5b9, []int{5}
}

func (m *EventD) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventD.Unmarshal(m, b)
}
func (m *EventD) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventD.Marshal(b, m, deterministic)
}
func (m *EventD) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventD.Merge(m, src)
}
func (m *EventD) XXX_Size() int {
	return xxx_messageInfo_EventD.Size(m)
}
func (m *EventD) XXX_DiscardUnknown() {
	xxx_messageInfo_EventD.DiscardUnknown(m)
}

var xxx_messageInfo_EventD proto.InternalMessageInfo

func (m *EventD) GetLogLevel() protos.LogLevel {
	if m != nil {
		return m.LogLevel
	}
	return protos.LogLevel_DEBUG
}

func (m *EventD) GetEventVerbosity() int32 {
	if m != nil {
		return m.EventVerbosity
	}
	return 0
}

type DirectoryD struct {
	LogLevel             protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DirectoryD) Reset()         { *m = DirectoryD{} }
func (m *DirectoryD) String() string { return proto.CompactTextString(m) }
func (*DirectoryD) ProtoMessage()    {}
func (*DirectoryD) Descriptor() ([]byte, []int) {
	return fileDescriptor_9618f358f05ec5b9, []int{6}
}

func (m *DirectoryD) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DirectoryD.Unmarshal(m, b)
}
func (m *DirectoryD) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DirectoryD.Marshal(b, m, deterministic)
}
func (m *DirectoryD) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryD.Merge(m, src)
}
func (m *DirectoryD) XXX_Size() int {
	return xxx_messageInfo_DirectoryD.Size(m)
}
func (m *DirectoryD) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryD.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryD proto.InternalMessageInfo

func (m *DirectoryD) GetLogLevel() protos.LogLevel {
	if m != nil {
		return m.LogLevel
	}
	return protos.LogLevel_DEBUG
}

//------------------------------------------------------------------------------
// MetricsD configs
//------------------------------------------------------------------------------
type MetricsD struct {
	LogLevel             protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *MetricsD) Reset()         { *m = MetricsD{} }
func (m *MetricsD) String() string { return proto.CompactTextString(m) }
func (*MetricsD) ProtoMessage()    {}
func (*MetricsD) Descriptor() ([]byte, []int) {
	return fileDescriptor_9618f358f05ec5b9, []int{7}
}

func (m *MetricsD) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricsD.Unmarshal(m, b)
}
func (m *MetricsD) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricsD.Marshal(b, m, deterministic)
}
func (m *MetricsD) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsD.Merge(m, src)
}
func (m *MetricsD) XXX_Size() int {
	return xxx_messageInfo_MetricsD.Size(m)
}
func (m *MetricsD) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsD.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsD proto.InternalMessageInfo

func (m *MetricsD) GetLogLevel() protos.LogLevel {
	if m != nil {
		return m.LogLevel
	}
	return protos.LogLevel_DEBUG
}

//------------------------------------------------------------------------------
// State configs
//------------------------------------------------------------------------------
type State struct {
	LogLevel             protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	SyncInterval         uint32          `protobuf:"varint,2,opt,name=sync_interval,json=syncInterval,proto3" json:"sync_interval,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_9618f358f05ec5b9, []int{8}
}

func (m *State) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_State.Unmarshal(m, b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_State.Marshal(b, m, deterministic)
}
func (m *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(m, src)
}
func (m *State) XXX_Size() int {
	return xxx_messageInfo_State.Size(m)
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func (m *State) GetLogLevel() protos.LogLevel {
	if m != nil {
		return m.LogLevel
	}
	return protos.LogLevel_DEBUG
}

func (m *State) GetSyncInterval() uint32 {
	if m != nil {
		return m.SyncInterval
	}
	return 0
}

//------------------------------------------------------------------------------
// Fluent Bit configs
//------------------------------------------------------------------------------
type FluentBit struct {
	ExtraTags            map[string]string `protobuf:"bytes,1,rep,name=extra_tags,json=extraTags,proto3" json:"extra_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ThrottleRate         uint32            `protobuf:"varint,10,opt,name=throttle_rate,json=throttleRate,proto3" json:"throttle_rate,omitempty"`
	ThrottleWindow       uint32            `protobuf:"varint,11,opt,name=throttle_window,json=throttleWindow,proto3" json:"throttle_window,omitempty"`
	ThrottleInterval     string            `protobuf:"bytes,12,opt,name=throttle_interval,json=throttleInterval,proto3" json:"throttle_interval,omitempty"`
	FilesByTag           map[string]string `protobuf:"bytes,20,rep,name=files_by_tag,json=filesByTag,proto3" json:"files_by_tag,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *FluentBit) Reset()         { *m = FluentBit{} }
func (m *FluentBit) String() string { return proto.CompactTextString(m) }
func (*FluentBit) ProtoMessage()    {}
func (*FluentBit) Descriptor() ([]byte, []int) {
	return fileDescriptor_9618f358f05ec5b9, []int{9}
}

func (m *FluentBit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FluentBit.Unmarshal(m, b)
}
func (m *FluentBit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FluentBit.Marshal(b, m, deterministic)
}
func (m *FluentBit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FluentBit.Merge(m, src)
}
func (m *FluentBit) XXX_Size() int {
	return xxx_messageInfo_FluentBit.Size(m)
}
func (m *FluentBit) XXX_DiscardUnknown() {
	xxx_messageInfo_FluentBit.DiscardUnknown(m)
}

var xxx_messageInfo_FluentBit proto.InternalMessageInfo

func (m *FluentBit) GetExtraTags() map[string]string {
	if m != nil {
		return m.ExtraTags
	}
	return nil
}

func (m *FluentBit) GetThrottleRate() uint32 {
	if m != nil {
		return m.ThrottleRate
	}
	return 0
}

func (m *FluentBit) GetThrottleWindow() uint32 {
	if m != nil {
		return m.ThrottleWindow
	}
	return 0
}

func (m *FluentBit) GetThrottleInterval() string {
	if m != nil {
		return m.ThrottleInterval
	}
	return ""
}

func (m *FluentBit) GetFilesByTag() map[string]string {
	if m != nil {
		return m.FilesByTag
	}
	return nil
}

//------------------------------------------------------------------------------
// OpenVPN client configs
//------------------------------------------------------------------------------
type OpenVPN struct {
	EnableShellAccess    bool     `protobuf:"varint,1,opt,name=enable_shell_access,json=enableShellAccess,proto3" json:"enable_shell_access,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpenVPN) Reset()         { *m = OpenVPN{} }
func (m *OpenVPN) String() string { return proto.CompactTextString(m) }
func (*OpenVPN) ProtoMessage()    {}
func (*OpenVPN) Descriptor() ([]byte, []int) {
	return fileDescriptor_9618f358f05ec5b9, []int{10}
}

func (m *OpenVPN) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenVPN.Unmarshal(m, b)
}
func (m *OpenVPN) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenVPN.Marshal(b, m, deterministic)
}
func (m *OpenVPN) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenVPN.Merge(m, src)
}
func (m *OpenVPN) XXX_Size() int {
	return xxx_messageInfo_OpenVPN.Size(m)
}
func (m *OpenVPN) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenVPN.DiscardUnknown(m)
}

var xxx_messageInfo_OpenVPN proto.InternalMessageInfo

func (m *OpenVPN) GetEnableShellAccess() bool {
	if m != nil {
		return m.EnableShellAccess
	}
	return false
}

//------------------------------------------------------------------------------
// CtraceD configs
//------------------------------------------------------------------------------
type CtraceD struct {
	LogLevel             protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CtraceD) Reset()         { *m = CtraceD{} }
func (m *CtraceD) String() string { return proto.CompactTextString(m) }
func (*CtraceD) ProtoMessage()    {}
func (*CtraceD) Descriptor() ([]byte, []int) {
	return fileDescriptor_9618f358f05ec5b9, []int{11}
}

func (m *CtraceD) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CtraceD.Unmarshal(m, b)
}
func (m *CtraceD) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CtraceD.Marshal(b, m, deterministic)
}
func (m *CtraceD) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CtraceD.Merge(m, src)
}
func (m *CtraceD) XXX_Size() int {
	return xxx_messageInfo_CtraceD.Size(m)
}
func (m *CtraceD) XXX_DiscardUnknown() {
	xxx_messageInfo_CtraceD.DiscardUnknown(m)
}

var xxx_messageInfo_CtraceD proto.InternalMessageInfo

func (m *CtraceD) GetLogLevel() protos.LogLevel {
	if m != nil {
		return m.LogLevel
	}
	return protos.LogLevel_DEBUG
}

func init() {
	proto.RegisterType((*SharedMconfig)(nil), "magma.mconfig.SharedMconfig")
	proto.RegisterType((*SharedSentryConfig)(nil), "magma.mconfig.SharedSentryConfig")
	proto.RegisterType((*ControlProxy)(nil), "magma.mconfig.ControlProxy")
	proto.RegisterType((*ImageSpec)(nil), "magma.mconfig.ImageSpec")
	proto.RegisterType((*MagmaD)(nil), "magma.mconfig.MagmaD")
	proto.RegisterMapType((map[string]bool)(nil), "magma.mconfig.MagmaD.FeatureFlagsEntry")
	proto.RegisterType((*EventD)(nil), "magma.mconfig.EventD")
	proto.RegisterType((*DirectoryD)(nil), "magma.mconfig.DirectoryD")
	proto.RegisterType((*MetricsD)(nil), "magma.mconfig.MetricsD")
	proto.RegisterType((*State)(nil), "magma.mconfig.State")
	proto.RegisterType((*FluentBit)(nil), "magma.mconfig.FluentBit")
	proto.RegisterMapType((map[string]string)(nil), "magma.mconfig.FluentBit.ExtraTagsEntry")
	proto.RegisterMapType((map[string]string)(nil), "magma.mconfig.FluentBit.FilesByTagEntry")
	proto.RegisterType((*OpenVPN)(nil), "magma.mconfig.OpenVPN")
	proto.RegisterType((*CtraceD)(nil), "magma.mconfig.CtraceD")
}

func init() {
	proto.RegisterFile("orc8r/protos/mconfig/mconfigs.proto", fileDescriptor_9618f358f05ec5b9)
}

var fileDescriptor_9618f358f05ec5b9 = []byte{
	// 878 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0x6d, 0x6f, 0xdb, 0x36,
	0x10, 0xc7, 0xe1, 0x38, 0x76, 0xec, 0x8b, 0x1f, 0x12, 0xb6, 0x43, 0xd5, 0x00, 0xc3, 0x5c, 0x65,
	0x40, 0x3c, 0x0c, 0xb3, 0x87, 0x0c, 0x03, 0xba, 0x62, 0xdd, 0x43, 0xd2, 0x18, 0xc8, 0x90, 0x74,
	0x86, 0x1c, 0xa4, 0xc0, 0xde, 0x68, 0xb4, 0x74, 0x96, 0x85, 0x50, 0xa4, 0x40, 0xd2, 0x6e, 0xf4,
	0x49, 0xf6, 0x95, 0xf6, 0x72, 0x1f, 0x69, 0x20, 0xf5, 0x30, 0x27, 0xdd, 0x30, 0xd4, 0xaf, 0x2c,
	0xfe, 0xee, 0xcf, 0x23, 0xef, 0xf8, 0x27, 0x0d, 0xc7, 0x42, 0x06, 0x2f, 0xe5, 0x38, 0x95, 0x42,
	0x0b, 0x35, 0x4e, 0x02, 0xc1, 0x17, 0x71, 0x54, 0xfe, 0xaa, 0x91, 0xe5, 0xa4, 0x9b, 0xd0, 0x28,
	0xa1, 0xa3, 0x82, 0x1e, 0x3d, 0x7f, 0x30, 0x27, 0x10, 0x49, 0x22, 0x78, 0xae, 0x74, 0xdf, 0x41,
	0x77, 0xb6, 0xa4, 0x12, 0xc3, 0xeb, 0x5c, 0x4b, 0x26, 0xd0, 0x55, 0xc8, 0xb5, 0xcc, 0xfc, 0x1c,
	0x38, 0xb5, 0x41, 0x6d, 0xb8, 0x7f, 0xfa, 0x62, 0xf4, 0x20, 0xe5, 0x28, 0x9f, 0x34, 0xb3, 0xca,
	0x73, 0x8b, 0xbc, 0x8e, 0xda, 0x18, 0xb9, 0x7f, 0xd6, 0x80, 0x7c, 0x28, 0x22, 0x9f, 0x02, 0x84,
	0x8a, 0xfb, 0x69, 0xa6, 0x97, 0x82, 0xdb, 0xdc, 0x6d, 0xaf, 0x1d, 0x2a, 0x3e, 0xb5, 0xa0, 0x0c,
	0x73, 0xaa, 0xe3, 0x35, 0x3a, 0x3b, 0x55, 0xf8, 0xad, 0x05, 0xe4, 0x73, 0xe8, 0xad, 0x52, 0x26,
	0x68, 0xe8, 0x27, 0x09, 0xfa, 0x4c, 0x44, 0x4e, 0x7d, 0x50, 0x1b, 0xb6, 0xbc, 0x4e, 0x4e, 0xaf,
	0x13, 0xbc, 0x12, 0x11, 0xf9, 0x0c, 0xf6, 0x15, 0x4d, 0x52, 0x86, 0xbe, 0xa4, 0x1a, 0x9d, 0xdd,
	0x41, 0x6d, 0xb8, 0xe3, 0x41, 0x8e, 0x3c, 0xaa, 0x91, 0x7c, 0x05, 0x04, 0xef, 0x03, 0xb6, 0x52,
	0xb1, 0xe0, 0x7e, 0x4a, 0xb5, 0x46, 0xc9, 0x95, 0xd3, 0x18, 0xd4, 0x87, 0x6d, 0xef, 0xb0, 0x8a,
	0x4c, 0x8b, 0x80, 0x7b, 0x06, 0x9d, 0x73, 0xc1, 0xb5, 0x14, 0x6c, 0x2a, 0xc5, 0x7d, 0x46, 0x4e,
	0xa1, 0xcd, 0x44, 0xe4, 0x33, 0x5c, 0x23, 0xb3, 0x25, 0xf4, 0x4e, 0x3f, 0x29, 0xda, 0x63, 0x1b,
	0x3d, 0xba, 0x12, 0xd1, 0x95, 0x09, 0x7a, 0x2d, 0x56, 0x7c, 0xb9, 0xdf, 0x42, 0xfb, 0x32, 0xa1,
	0x11, 0xce, 0x52, 0x0c, 0x08, 0x81, 0x5d, 0x4e, 0x13, 0x2c, 0xca, 0xb7, 0xdf, 0xe4, 0x29, 0x34,
	0x84, 0x0c, 0x51, 0xda, 0xa2, 0xeb, 0x5e, 0x3e, 0x70, 0xff, 0xda, 0x85, 0xe6, 0xb5, 0xc9, 0xfc,
	0x66, 0x9b, 0x55, 0xc9, 0x17, 0x70, 0x10, 0x2c, 0x31, 0xb8, 0x8b, 0xb9, 0x1f, 0x73, 0x8d, 0x72,
	0x4d, 0x99, 0xcd, 0xdf, 0xf0, 0xfa, 0x05, 0xbf, 0x2c, 0x30, 0x39, 0x81, 0x12, 0xf9, 0x3a, 0x4e,
	0x50, 0xac, 0xb4, 0xed, 0x6d, 0xc3, 0xeb, 0x15, 0xf8, 0x26, 0xa7, 0x64, 0x0c, 0x4f, 0xe8, 0x4a,
	0x8b, 0x55, 0x1a, 0x49, 0x1a, 0xa2, 0x8f, 0x9c, 0xce, 0x19, 0x86, 0xb6, 0xcb, 0x2d, 0x8f, 0x6c,
	0x84, 0x2e, 0xf2, 0x08, 0x79, 0x05, 0xcf, 0x37, 0x27, 0xa4, 0x82, 0xb1, 0x7f, 0x76, 0xd3, 0xb0,
	0x6b, 0x3c, 0xdb, 0x10, 0x4c, 0x05, 0x63, 0x9b, 0xbb, 0x4a, 0x69, 0x70, 0x47, 0x23, 0xf4, 0xd7,
	0x28, 0xcd, 0xa9, 0x38, 0x4d, 0xdb, 0xb4, 0x5e, 0x81, 0x6f, 0x73, 0x4a, 0xbe, 0x86, 0x66, 0x6c,
	0xfa, 0xab, 0x9c, 0xbd, 0x41, 0x7d, 0xb8, 0x7f, 0xea, 0x3c, 0xf2, 0x6b, 0xd5, 0x7c, 0xaf, 0xd0,
	0x91, 0x67, 0xb0, 0xa7, 0x63, 0x94, 0x7e, 0x1c, 0x3a, 0x2d, 0x9b, 0xb2, 0x69, 0x86, 0x97, 0x21,
	0xb9, 0x82, 0xee, 0x02, 0xa9, 0x5e, 0x49, 0xf4, 0x17, 0x8c, 0x46, 0xca, 0x69, 0xdb, 0x8c, 0x27,
	0x8f, 0x32, 0xe6, 0xc7, 0x32, 0x9a, 0xe4, 0xd2, 0x89, 0x51, 0x5e, 0x18, 0xa3, 0x7b, 0x9d, 0xc5,
	0x06, 0x32, 0x47, 0x10, 0x66, 0x9c, 0x26, 0x71, 0xe0, 0x2b, 0x94, 0xeb, 0x38, 0x40, 0xe5, 0x80,
	0x75, 0x5a, 0xbf, 0xe0, 0xb3, 0x02, 0x93, 0x63, 0xe8, 0xda, 0x93, 0xac, 0x4a, 0xdd, 0xb7, 0xfb,
	0xea, 0x58, 0x58, 0x14, 0x7a, 0xf4, 0x23, 0x1c, 0x7e, 0xb0, 0x24, 0x39, 0x80, 0xfa, 0x1d, 0x66,
	0x85, 0x9f, 0xcc, 0xa7, 0xb1, 0xd3, 0x9a, 0xb2, 0x55, 0x7e, 0x87, 0x5a, 0x5e, 0x3e, 0x78, 0xb5,
	0xf3, 0xb2, 0xe6, 0x22, 0x34, 0x2f, 0xd6, 0xc8, 0xf5, 0x76, 0x8e, 0x3a, 0x81, 0x3e, 0x9a, 0xd9,
	0x66, 0x8f, 0x73, 0xa1, 0x62, 0x9d, 0x15, 0x86, 0xea, 0x59, 0x7c, 0x5b, 0x52, 0xf7, 0x27, 0x80,
	0x37, 0xb1, 0xc4, 0x40, 0x0b, 0x99, 0x6d, 0xb5, 0x94, 0xfb, 0x03, 0xb4, 0xae, 0x51, 0xcb, 0x38,
	0x50, 0xdb, 0xcd, 0xff, 0x1d, 0x1a, 0x33, 0x6d, 0xae, 0xfb, 0x36, 0x75, 0x1e, 0x43, 0x57, 0x65,
	0x3c, 0x78, 0x78, 0x6d, 0xba, 0x5e, 0xc7, 0xc0, 0xd2, 0x9d, 0xee, 0x1f, 0x75, 0x68, 0x4f, 0xd8,
	0x0a, 0xb9, 0x3e, 0x8b, 0x35, 0x99, 0x00, 0xe0, 0xbd, 0x96, 0xd4, 0xd7, 0xc6, 0x34, 0xb5, 0x7f,
	0x35, 0x4d, 0xa5, 0x1e, 0x5d, 0x18, 0xe9, 0x4d, 0x65, 0x9a, 0x36, 0x96, 0x63, 0xb3, 0xb4, 0x5e,
	0x4a, 0xa1, 0x75, 0xf9, 0x80, 0x41, 0xbe, 0x74, 0x09, 0xed, 0x13, 0x76, 0x02, 0xfd, 0x4a, 0xf4,
	0x3e, 0xe6, 0xa1, 0x78, 0x6f, 0xdd, 0xd2, 0xf5, 0x7a, 0x25, 0x7e, 0x67, 0x29, 0xf9, 0x12, 0x0e,
	0x2b, 0x61, 0x55, 0x4c, 0xc7, 0x1a, 0xe5, 0xa0, 0x0c, 0x54, 0xd7, 0xed, 0x17, 0xe8, 0x2c, 0x62,
	0x86, 0xca, 0x9f, 0x67, 0xa6, 0x0a, 0xe7, 0xa9, 0x2d, 0x62, 0xf8, 0x9f, 0x45, 0x4c, 0x8c, 0xf8,
	0x2c, 0xbb, 0xa1, 0x51, 0x5e, 0x05, 0x2c, 0x2a, 0x70, 0xf4, 0x3d, 0xf4, 0x1e, 0xd6, 0xf8, 0x7f,
	0x2e, 0x6d, 0x6f, 0xb8, 0xf4, 0xe8, 0x35, 0xf4, 0x1f, 0x25, 0xff, 0x98, 0xe9, 0xee, 0x77, 0xb0,
	0xf7, 0x6b, 0x8a, 0xfc, 0x76, 0xfa, 0x96, 0x8c, 0xe0, 0x49, 0xfe, 0x46, 0xf9, 0x6a, 0x89, 0x8c,
	0xf9, 0x34, 0x08, 0x50, 0x29, 0x9b, 0xa6, 0xe5, 0x1d, 0xe6, 0xa1, 0x99, 0x89, 0xfc, 0x6c, 0x03,
	0xee, 0x6b, 0xd8, 0x3b, 0xd7, 0x92, 0x06, 0xb8, 0x95, 0xeb, 0xce, 0x8e, 0x7f, 0x7b, 0x61, 0x15,
	0xe3, 0xfc, 0x3f, 0x97, 0xc5, 0xf3, 0x71, 0x24, 0x1e, 0xfd, 0x5d, 0xcf, 0x9b, 0x76, 0xfc, 0xcd,
	0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe8, 0xc3, 0x86, 0x82, 0xcd, 0x07, 0x00, 0x00,
}
