//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: orc8r/protos/metricsd.proto

package protos

import (
	context "context"
	_go "github.com/prometheus/client_model/go"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// For each metric name tracked, we use an enum
type MetricName int32

const (
	// Prometheus metrics
	MetricName_process_start_time_seconds    MetricName = 0
	MetricName_process_virtual_memory_bytes  MetricName = 1
	MetricName_process_resident_memory_bytes MetricName = 2
	MetricName_process_cpu_seconds_total     MetricName = 3
	MetricName_process_open_fds              MetricName = 4
	MetricName_process_max_fds               MetricName = 5
	// subscriberdb metrics
	MetricName_s6a_auth_success               MetricName = 6
	MetricName_s6a_auth_failure               MetricName = 7
	MetricName_s6a_location_update            MetricName = 8
	MetricName_diameter_capabilities_exchange MetricName = 9
	MetricName_diameter_watchdog              MetricName = 10
	MetricName_diameter_disconnect            MetricName = 11
	// More prometheus metrics
	MetricName_python_info MetricName = 50
	// Metricsd metrics
	MetricName_service_metrics_collected MetricName = 60
	MetricName_process_uptime_seconds    MetricName = 61
	// mobilityd metrics
	MetricName_ip_address_allocated  MetricName = 100
	MetricName_ip_address_released   MetricName = 101
	MetricName_ip_already_allocated  MetricName = 102
	MetricName_ip_allocation_failure MetricName = 103
	// enodebd metrics
	MetricName_enodeb_mgmt_connected                               MetricName = 200
	MetricName_enodeb_opstate_enabled                              MetricName = 201
	MetricName_enodeb_rf_tx_enabled                                MetricName = 202
	MetricName_enodeb_gps_connected                                MetricName = 203
	MetricName_enodeb_ptp_connected                                MetricName = 204
	MetricName_enodeb_mme_connected                                MetricName = 205
	MetricName_rrc_estab_attempts                                  MetricName = 206
	MetricName_rrc_estab_successes                                 MetricName = 207
	MetricName_pdcp_user_plane_bytes_ul                            MetricName = 208
	MetricName_pdcp_user_plane_bytes_dl                            MetricName = 209
	MetricName_rrc_reestab_attempts                                MetricName = 210
	MetricName_rrc_reestab_attempts_reconf_fail                    MetricName = 211
	MetricName_rrc_reestab_attempts_ho_fail                        MetricName = 212
	MetricName_rrc_reestab_attempts_other                          MetricName = 213
	MetricName_rrc_reestab_successes                               MetricName = 214
	MetricName_erab_estab_attempts                                 MetricName = 215
	MetricName_erab_estab_successes                                MetricName = 216
	MetricName_erab_estab_failures                                 MetricName = 217
	MetricName_erab_release_requests                               MetricName = 218
	MetricName_erab_release_requests_user_inactivity               MetricName = 219
	MetricName_erab_release_requests_normal                        MetricName = 220
	MetricName_erab_release_requests_radio_resources_not_available MetricName = 221
	MetricName_erab_release_requests_reduce_load                   MetricName = 222
	MetricName_erab_release_requests_fail_in_radio_proc            MetricName = 223
	MetricName_erab_release_requests_eutran_reas                   MetricName = 224
	MetricName_erab_release_requests_radio_radio_conn_lost         MetricName = 225
	MetricName_erab_release_requests_oam_intervention              MetricName = 226
	MetricName_enodeb_mgmt_configured                              MetricName = 227
	MetricName_enodeb_reboot_timer_active                          MetricName = 228
	MetricName_enodeb_reboots                                      MetricName = 229
	MetricName_enodeb_rf_tx_desired                                MetricName = 230
	// Magmad metrics
	MetricName_magmad_ping_rtt_ms          MetricName = 300
	MetricName_cpu_percent                 MetricName = 301
	MetricName_swap_memory_percent         MetricName = 302
	MetricName_virtual_memory_percent      MetricName = 303
	MetricName_disk_percent                MetricName = 304
	MetricName_bytes_sent                  MetricName = 305
	MetricName_bytes_received              MetricName = 306
	MetricName_temperature                 MetricName = 307
	MetricName_checkin_status              MetricName = 308
	MetricName_streamer_responses          MetricName = 309
	MetricName_mem_total                   MetricName = 310
	MetricName_mem_available               MetricName = 311
	MetricName_mem_used                    MetricName = 312
	MetricName_mem_free                    MetricName = 313
	MetricName_bootstrap_exception         MetricName = 314
	MetricName_upgrader2_time_taken        MetricName = 315
	MetricName_upgrader2_error             MetricName = 316
	MetricName_upgrader2_prepared          MetricName = 317
	MetricName_upgrader2_downloaded        MetricName = 318
	MetricName_upgrader2_canary            MetricName = 319
	MetricName_upgrader2_stable            MetricName = 320
	MetricName_upgrader2_idle              MetricName = 321
	MetricName_unexpected_service_restarts MetricName = 322
	MetricName_unattended_upgrade_status   MetricName = 323
	MetricName_service_restart_status      MetricName = 324
	// Pipelined metrics
	MetricName_dp_send_msg_error                   MetricName = 350
	MetricName_arp_default_gw_mac_error            MetricName = 351
	MetricName_openflow_error_msg                  MetricName = 352
	MetricName_unknown_pkt_direction               MetricName = 353
	MetricName_network_iface_status                MetricName = 354
	MetricName_enforcement_rule_install_fail       MetricName = 355
	MetricName_enforcement_stats_rule_install_fail MetricName = 356
	///////////////////////////////
	// GATEWAY FAILURES & ALERTS //
	///////////////////////////////
	MetricName_mme_restarted     MetricName = 400
	MetricName_s1_reset_from_enb MetricName = 401
	// SCTP
	MetricName_sctp_reset    MetricName = 410
	MetricName_sctp_shutdown MetricName = 411
	// s6a
	MetricName_s6a_subscriberdb_connection_failure  MetricName = 420
	MetricName_s6a_auth_info_response_timer_expired MetricName = 421
	// UE attach, Serivce Request
	MetricName_duplicate_attach_request                    MetricName = 430
	MetricName_initial_context_setup_failure_received      MetricName = 431
	MetricName_initial_context_setup_request_timer_expired MetricName = 432
	MetricName_nas_attach_accept_timer_expired             MetricName = 433
	MetricName_nas_auth_rsp_timer_expired                  MetricName = 434
	MetricName_nas_security_mode_command_timer_expired     MetricName = 435
	MetricName_security_mode_reject_received               MetricName = 436
	MetricName_authentication_failure                      MetricName = 437 // cause=mac_failure,resync,amf
	MetricName_mme_spgw_create_session_req                 MetricName = 438
	MetricName_mme_spgw_create_session_rsp                 MetricName = 439
	MetricName_mme_spgw_delete_session_req                 MetricName = 440
	MetricName_mme_spgw_delete_session_rsp                 MetricName = 441
	// UE S1AP context
	MetricName_ue_context_release_request               MetricName = 450
	MetricName_ue_context_release_command_timer_expired MetricName = 451
	// Detach
	MetricName_implicit_detach_timer_expired MetricName = 452
	// eNB SCTP shutdown context clean up time
	MetricName_enb_sctp_shutdown_ue_clean_up_timer_expired MetricName = 453
	// Other errors
	MetricName_s1ap_error_ind_received              MetricName = 480
	MetricName_gtpu_error_ind_received              MetricName = 481
	MetricName_nas_non_delivery_indication_received MetricName = 482
	MetricName_emm_status_received                  MetricName = 483
	MetricName_emm_status_sent                      MetricName = 484
	////////////////////////
	// GATEWAY PROCEDURES //
	////////////////////////
	MetricName_mme_new_association MetricName = 500
	MetricName_ue_attach           MetricName = 501 // result=failure,accept,complete
	MetricName_service_request     MetricName = 502
	MetricName_ue_detach           MetricName = 503 // cause=network_initiated,
	// deregister_ue,implicit_detach,
	// ue_initiated
	MetricName_spgw_create_session  MetricName = 504
	MetricName_spgw_delete_session  MetricName = 505
	MetricName_ue_pdn_connection    MetricName = 506
	MetricName_tracking_area_update MetricName = 507
	MetricName_s1_setup             MetricName = 508
	// Generic service metrics
	MetricName_service_errors MetricName = 550
)

// Enum value maps for MetricName.
var (
	MetricName_name = map[int32]string{
		0:   "process_start_time_seconds",
		1:   "process_virtual_memory_bytes",
		2:   "process_resident_memory_bytes",
		3:   "process_cpu_seconds_total",
		4:   "process_open_fds",
		5:   "process_max_fds",
		6:   "s6a_auth_success",
		7:   "s6a_auth_failure",
		8:   "s6a_location_update",
		9:   "diameter_capabilities_exchange",
		10:  "diameter_watchdog",
		11:  "diameter_disconnect",
		50:  "python_info",
		60:  "service_metrics_collected",
		61:  "process_uptime_seconds",
		100: "ip_address_allocated",
		101: "ip_address_released",
		102: "ip_already_allocated",
		103: "ip_allocation_failure",
		200: "enodeb_mgmt_connected",
		201: "enodeb_opstate_enabled",
		202: "enodeb_rf_tx_enabled",
		203: "enodeb_gps_connected",
		204: "enodeb_ptp_connected",
		205: "enodeb_mme_connected",
		206: "rrc_estab_attempts",
		207: "rrc_estab_successes",
		208: "pdcp_user_plane_bytes_ul",
		209: "pdcp_user_plane_bytes_dl",
		210: "rrc_reestab_attempts",
		211: "rrc_reestab_attempts_reconf_fail",
		212: "rrc_reestab_attempts_ho_fail",
		213: "rrc_reestab_attempts_other",
		214: "rrc_reestab_successes",
		215: "erab_estab_attempts",
		216: "erab_estab_successes",
		217: "erab_estab_failures",
		218: "erab_release_requests",
		219: "erab_release_requests_user_inactivity",
		220: "erab_release_requests_normal",
		221: "erab_release_requests_radio_resources_not_available",
		222: "erab_release_requests_reduce_load",
		223: "erab_release_requests_fail_in_radio_proc",
		224: "erab_release_requests_eutran_reas",
		225: "erab_release_requests_radio_radio_conn_lost",
		226: "erab_release_requests_oam_intervention",
		227: "enodeb_mgmt_configured",
		228: "enodeb_reboot_timer_active",
		229: "enodeb_reboots",
		230: "enodeb_rf_tx_desired",
		300: "magmad_ping_rtt_ms",
		301: "cpu_percent",
		302: "swap_memory_percent",
		303: "virtual_memory_percent",
		304: "disk_percent",
		305: "bytes_sent",
		306: "bytes_received",
		307: "temperature",
		308: "checkin_status",
		309: "streamer_responses",
		310: "mem_total",
		311: "mem_available",
		312: "mem_used",
		313: "mem_free",
		314: "bootstrap_exception",
		315: "upgrader2_time_taken",
		316: "upgrader2_error",
		317: "upgrader2_prepared",
		318: "upgrader2_downloaded",
		319: "upgrader2_canary",
		320: "upgrader2_stable",
		321: "upgrader2_idle",
		322: "unexpected_service_restarts",
		323: "unattended_upgrade_status",
		324: "service_restart_status",
		350: "dp_send_msg_error",
		351: "arp_default_gw_mac_error",
		352: "openflow_error_msg",
		353: "unknown_pkt_direction",
		354: "network_iface_status",
		355: "enforcement_rule_install_fail",
		356: "enforcement_stats_rule_install_fail",
		400: "mme_restarted",
		401: "s1_reset_from_enb",
		410: "sctp_reset",
		411: "sctp_shutdown",
		420: "s6a_subscriberdb_connection_failure",
		421: "s6a_auth_info_response_timer_expired",
		430: "duplicate_attach_request",
		431: "initial_context_setup_failure_received",
		432: "initial_context_setup_request_timer_expired",
		433: "nas_attach_accept_timer_expired",
		434: "nas_auth_rsp_timer_expired",
		435: "nas_security_mode_command_timer_expired",
		436: "security_mode_reject_received",
		437: "authentication_failure",
		438: "mme_spgw_create_session_req",
		439: "mme_spgw_create_session_rsp",
		440: "mme_spgw_delete_session_req",
		441: "mme_spgw_delete_session_rsp",
		450: "ue_context_release_request",
		451: "ue_context_release_command_timer_expired",
		452: "implicit_detach_timer_expired",
		453: "enb_sctp_shutdown_ue_clean_up_timer_expired",
		480: "s1ap_error_ind_received",
		481: "gtpu_error_ind_received",
		482: "nas_non_delivery_indication_received",
		483: "emm_status_received",
		484: "emm_status_sent",
		500: "mme_new_association",
		501: "ue_attach",
		502: "service_request",
		503: "ue_detach",
		504: "spgw_create_session",
		505: "spgw_delete_session",
		506: "ue_pdn_connection",
		507: "tracking_area_update",
		508: "s1_setup",
		550: "service_errors",
	}
	MetricName_value = map[string]int32{
		"process_start_time_seconds":                          0,
		"process_virtual_memory_bytes":                        1,
		"process_resident_memory_bytes":                       2,
		"process_cpu_seconds_total":                           3,
		"process_open_fds":                                    4,
		"process_max_fds":                                     5,
		"s6a_auth_success":                                    6,
		"s6a_auth_failure":                                    7,
		"s6a_location_update":                                 8,
		"diameter_capabilities_exchange":                      9,
		"diameter_watchdog":                                   10,
		"diameter_disconnect":                                 11,
		"python_info":                                         50,
		"service_metrics_collected":                           60,
		"process_uptime_seconds":                              61,
		"ip_address_allocated":                                100,
		"ip_address_released":                                 101,
		"ip_already_allocated":                                102,
		"ip_allocation_failure":                               103,
		"enodeb_mgmt_connected":                               200,
		"enodeb_opstate_enabled":                              201,
		"enodeb_rf_tx_enabled":                                202,
		"enodeb_gps_connected":                                203,
		"enodeb_ptp_connected":                                204,
		"enodeb_mme_connected":                                205,
		"rrc_estab_attempts":                                  206,
		"rrc_estab_successes":                                 207,
		"pdcp_user_plane_bytes_ul":                            208,
		"pdcp_user_plane_bytes_dl":                            209,
		"rrc_reestab_attempts":                                210,
		"rrc_reestab_attempts_reconf_fail":                    211,
		"rrc_reestab_attempts_ho_fail":                        212,
		"rrc_reestab_attempts_other":                          213,
		"rrc_reestab_successes":                               214,
		"erab_estab_attempts":                                 215,
		"erab_estab_successes":                                216,
		"erab_estab_failures":                                 217,
		"erab_release_requests":                               218,
		"erab_release_requests_user_inactivity":               219,
		"erab_release_requests_normal":                        220,
		"erab_release_requests_radio_resources_not_available": 221,
		"erab_release_requests_reduce_load":                   222,
		"erab_release_requests_fail_in_radio_proc":            223,
		"erab_release_requests_eutran_reas":                   224,
		"erab_release_requests_radio_radio_conn_lost":         225,
		"erab_release_requests_oam_intervention":              226,
		"enodeb_mgmt_configured":                              227,
		"enodeb_reboot_timer_active":                          228,
		"enodeb_reboots":                                      229,
		"enodeb_rf_tx_desired":                                230,
		"magmad_ping_rtt_ms":                                  300,
		"cpu_percent":                                         301,
		"swap_memory_percent":                                 302,
		"virtual_memory_percent":                              303,
		"disk_percent":                                        304,
		"bytes_sent":                                          305,
		"bytes_received":                                      306,
		"temperature":                                         307,
		"checkin_status":                                      308,
		"streamer_responses":                                  309,
		"mem_total":                                           310,
		"mem_available":                                       311,
		"mem_used":                                            312,
		"mem_free":                                            313,
		"bootstrap_exception":                                 314,
		"upgrader2_time_taken":                                315,
		"upgrader2_error":                                     316,
		"upgrader2_prepared":                                  317,
		"upgrader2_downloaded":                                318,
		"upgrader2_canary":                                    319,
		"upgrader2_stable":                                    320,
		"upgrader2_idle":                                      321,
		"unexpected_service_restarts":                         322,
		"unattended_upgrade_status":                           323,
		"service_restart_status":                              324,
		"dp_send_msg_error":                                   350,
		"arp_default_gw_mac_error":                            351,
		"openflow_error_msg":                                  352,
		"unknown_pkt_direction":                               353,
		"network_iface_status":                                354,
		"enforcement_rule_install_fail":                       355,
		"enforcement_stats_rule_install_fail":                 356,
		"mme_restarted":                                       400,
		"s1_reset_from_enb":                                   401,
		"sctp_reset":                                          410,
		"sctp_shutdown":                                       411,
		"s6a_subscriberdb_connection_failure":                 420,
		"s6a_auth_info_response_timer_expired":                421,
		"duplicate_attach_request":                            430,
		"initial_context_setup_failure_received":              431,
		"initial_context_setup_request_timer_expired":         432,
		"nas_attach_accept_timer_expired":                     433,
		"nas_auth_rsp_timer_expired":                          434,
		"nas_security_mode_command_timer_expired":             435,
		"security_mode_reject_received":                       436,
		"authentication_failure":                              437,
		"mme_spgw_create_session_req":                         438,
		"mme_spgw_create_session_rsp":                         439,
		"mme_spgw_delete_session_req":                         440,
		"mme_spgw_delete_session_rsp":                         441,
		"ue_context_release_request":                          450,
		"ue_context_release_command_timer_expired":            451,
		"implicit_detach_timer_expired":                       452,
		"enb_sctp_shutdown_ue_clean_up_timer_expired":         453,
		"s1ap_error_ind_received":                             480,
		"gtpu_error_ind_received":                             481,
		"nas_non_delivery_indication_received":                482,
		"emm_status_received":                                 483,
		"emm_status_sent":                                     484,
		"mme_new_association":                                 500,
		"ue_attach":                                           501,
		"service_request":                                     502,
		"ue_detach":                                           503,
		"spgw_create_session":                                 504,
		"spgw_delete_session":                                 505,
		"ue_pdn_connection":                                   506,
		"tracking_area_update":                                507,
		"s1_setup":                                            508,
		"service_errors":                                      550,
	}
)

func (x MetricName) Enum() *MetricName {
	p := new(MetricName)
	*p = x
	return p
}

func (x MetricName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricName) Descriptor() protoreflect.EnumDescriptor {
	return file_orc8r_protos_metricsd_proto_enumTypes[0].Descriptor()
}

func (MetricName) Type() protoreflect.EnumType {
	return &file_orc8r_protos_metricsd_proto_enumTypes[0]
}

func (x MetricName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricName.Descriptor instead.
func (MetricName) EnumDescriptor() ([]byte, []int) {
	return file_orc8r_protos_metricsd_proto_rawDescGZIP(), []int{0}
}

// Possible labels, used as metric_name{label_name=label_value}
type MetricLabelName int32

const (
	MetricLabelName_result         MetricLabelName = 0
	MetricLabelName_cause          MetricLabelName = 1
	MetricLabelName_tau_type       MetricLabelName = 2
	MetricLabelName_pdn_type       MetricLabelName = 3
	MetricLabelName_action         MetricLabelName = 4
	MetricLabelName_host           MetricLabelName = 5  // magmad_ping_rtt_ms
	MetricLabelName_metric         MetricLabelName = 6  // magmad_ping_rtt_ms
	MetricLabelName_patchlevel     MetricLabelName = 7  // python_info
	MetricLabelName_minor          MetricLabelName = 8  // python_info
	MetricLabelName_major          MetricLabelName = 9  // python_info
	MetricLabelName_version        MetricLabelName = 10 // python_info
	MetricLabelName_implementation MetricLabelName = 11 // python_info
	MetricLabelName_sensor         MetricLabelName = 12 // magmad_temperature
	MetricLabelName_error_code     MetricLabelName = 13
	MetricLabelName_error_type     MetricLabelName = 14
	MetricLabelName_iface_name     MetricLabelName = 15 // pipelined network_iface_status
	MetricLabelName_service_name   MetricLabelName = 16 // magmad unexpected_service_restarts
	MetricLabelName_rule_id        MetricLabelName = 17 // pipelined rule install failures
	MetricLabelName_imsi           MetricLabelName = 18 // pipelined rule install failures
)

// Enum value maps for MetricLabelName.
var (
	MetricLabelName_name = map[int32]string{
		0:  "result",
		1:  "cause",
		2:  "tau_type",
		3:  "pdn_type",
		4:  "action",
		5:  "host",
		6:  "metric",
		7:  "patchlevel",
		8:  "minor",
		9:  "major",
		10: "version",
		11: "implementation",
		12: "sensor",
		13: "error_code",
		14: "error_type",
		15: "iface_name",
		16: "service_name",
		17: "rule_id",
		18: "imsi",
	}
	MetricLabelName_value = map[string]int32{
		"result":         0,
		"cause":          1,
		"tau_type":       2,
		"pdn_type":       3,
		"action":         4,
		"host":           5,
		"metric":         6,
		"patchlevel":     7,
		"minor":          8,
		"major":          9,
		"version":        10,
		"implementation": 11,
		"sensor":         12,
		"error_code":     13,
		"error_type":     14,
		"iface_name":     15,
		"service_name":   16,
		"rule_id":        17,
		"imsi":           18,
	}
)

func (x MetricLabelName) Enum() *MetricLabelName {
	p := new(MetricLabelName)
	*p = x
	return p
}

func (x MetricLabelName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricLabelName) Descriptor() protoreflect.EnumDescriptor {
	return file_orc8r_protos_metricsd_proto_enumTypes[1].Descriptor()
}

func (MetricLabelName) Type() protoreflect.EnumType {
	return &file_orc8r_protos_metricsd_proto_enumTypes[1]
}

func (x MetricLabelName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricLabelName.Descriptor instead.
func (MetricLabelName) EnumDescriptor() ([]byte, []int) {
	return file_orc8r_protos_metricsd_proto_rawDescGZIP(), []int{1}
}

type MetricsContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GatewayId string `protobuf:"bytes,1,opt,name=gatewayId,proto3" json:"gatewayId,omitempty"`
	// TODO: we should strip this out of metricsd (or duplicate it ourselves)
	// Prometheus 2 no longer supports protobuf client model
	Family []*_go.MetricFamily `protobuf:"bytes,2,rep,name=family,proto3" json:"family,omitempty"`
}

func (x *MetricsContainer) Reset() {
	*x = MetricsContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_metricsd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsContainer) ProtoMessage() {}

func (x *MetricsContainer) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_metricsd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsContainer.ProtoReflect.Descriptor instead.
func (*MetricsContainer) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_metricsd_proto_rawDescGZIP(), []int{0}
}

func (x *MetricsContainer) GetGatewayId() string {
	if x != nil {
		return x.GatewayId
	}
	return ""
}

func (x *MetricsContainer) GetFamily() []*_go.MetricFamily {
	if x != nil {
		return x.Family
	}
	return nil
}

type PushedMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricName  string       `protobuf:"bytes,1,opt,name=metricName,proto3" json:"metricName,omitempty"`
	Value       float64      `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	TimestampMS int64        `protobuf:"varint,3,opt,name=timestampMS,proto3" json:"timestampMS,omitempty"`
	Labels      []*LabelPair `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *PushedMetric) Reset() {
	*x = PushedMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_metricsd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushedMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushedMetric) ProtoMessage() {}

func (x *PushedMetric) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_metricsd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushedMetric.ProtoReflect.Descriptor instead.
func (*PushedMetric) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_metricsd_proto_rawDescGZIP(), []int{1}
}

func (x *PushedMetric) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *PushedMetric) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *PushedMetric) GetTimestampMS() int64 {
	if x != nil {
		return x.TimestampMS
	}
	return 0
}

func (x *PushedMetric) GetLabels() []*LabelPair {
	if x != nil {
		return x.Labels
	}
	return nil
}

type LabelPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *LabelPair) Reset() {
	*x = LabelPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_metricsd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelPair) ProtoMessage() {}

func (x *LabelPair) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_metricsd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelPair.ProtoReflect.Descriptor instead.
func (*LabelPair) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_metricsd_proto_rawDescGZIP(), []int{2}
}

func (x *LabelPair) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LabelPair) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type PushedMetricsContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkId string          `protobuf:"bytes,1,opt,name=networkId,proto3" json:"networkId,omitempty"`
	Metrics   []*PushedMetric `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *PushedMetricsContainer) Reset() {
	*x = PushedMetricsContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_metricsd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushedMetricsContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushedMetricsContainer) ProtoMessage() {}

func (x *PushedMetricsContainer) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_metricsd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushedMetricsContainer.ProtoReflect.Descriptor instead.
func (*PushedMetricsContainer) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_metricsd_proto_rawDescGZIP(), []int{3}
}

func (x *PushedMetricsContainer) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *PushedMetricsContainer) GetMetrics() []*PushedMetric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

var File_orc8r_protos_metricsd_proto protoreflect.FileDescriptor

var file_orc8r_protos_metricsd_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x1a, 0x0d, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6f, 0x72, 0x63, 0x38, 0x72,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6c, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x6d,
	0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x22, 0x96, 0x01, 0x0a, 0x0c, 0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x53, 0x12, 0x2e, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x35, 0x0a, 0x09, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x50, 0x61, 0x69, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x6b, 0x0a, 0x16, 0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x65, 0x64,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2a,
	0x8d, 0x1b, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x10, 0x00, 0x12, 0x20,
	0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x10, 0x01,
	0x12, 0x21, 0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63,
	0x70, 0x75, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x66, 0x64, 0x73, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x64, 0x73, 0x10, 0x05, 0x12, 0x14, 0x0a,
	0x10, 0x73, 0x36, 0x61, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x73, 0x36, 0x61, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x73, 0x36, 0x61,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x10, 0x08, 0x12, 0x22, 0x0a, 0x1e, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x10, 0x0a, 0x12, 0x17, 0x0a,
	0x13, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x10, 0x32, 0x12, 0x1d, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x10, 0x3c, 0x12, 0x1a, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x10, 0x3d, 0x12, 0x18, 0x0a, 0x14, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x10, 0x64, 0x12, 0x17, 0x0a, 0x13,
	0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x64, 0x10, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x69, 0x70, 0x5f, 0x61, 0x6c, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x10, 0x66, 0x12,
	0x19, 0x0a, 0x15, 0x69, 0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x67, 0x12, 0x1a, 0x0a, 0x15, 0x65, 0x6e,
	0x6f, 0x64, 0x65, 0x62, 0x5f, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x10, 0xc8, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x62,
	0x5f, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x10, 0xc9, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x5f, 0x72, 0x66,
	0x5f, 0x74, 0x78, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0xca, 0x01, 0x12, 0x19,
	0x0a, 0x14, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x5f, 0x67, 0x70, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0xcb, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x65, 0x6e, 0x6f,
	0x64, 0x65, 0x62, 0x5f, 0x70, 0x74, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x10, 0xcc, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x5f, 0x6d,
	0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0xcd, 0x01, 0x12,
	0x17, 0x0a, 0x12, 0x72, 0x72, 0x63, 0x5f, 0x65, 0x73, 0x74, 0x61, 0x62, 0x5f, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x73, 0x10, 0xce, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x72, 0x72, 0x63, 0x5f,
	0x65, 0x73, 0x74, 0x61, 0x62, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x10,
	0xcf, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x70, 0x64, 0x63, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x6c, 0x10, 0xd0,
	0x01, 0x12, 0x1d, 0x0a, 0x18, 0x70, 0x64, 0x63, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x64, 0x6c, 0x10, 0xd1, 0x01,
	0x12, 0x19, 0x0a, 0x14, 0x72, 0x72, 0x63, 0x5f, 0x72, 0x65, 0x65, 0x73, 0x74, 0x61, 0x62, 0x5f,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x10, 0xd2, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x72,
	0x72, 0x63, 0x5f, 0x72, 0x65, 0x65, 0x73, 0x74, 0x61, 0x62, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x10,
	0xd3, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x72, 0x72, 0x63, 0x5f, 0x72, 0x65, 0x65, 0x73, 0x74, 0x61,
	0x62, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x5f, 0x68, 0x6f, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x10, 0xd4, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x72, 0x72, 0x63, 0x5f, 0x72, 0x65, 0x65,
	0x73, 0x74, 0x61, 0x62, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x5f, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x10, 0xd5, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x72, 0x72, 0x63, 0x5f, 0x72, 0x65,
	0x65, 0x73, 0x74, 0x61, 0x62, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x10,
	0xd6, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x65, 0x72, 0x61, 0x62, 0x5f, 0x65, 0x73, 0x74, 0x61, 0x62,
	0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x10, 0xd7, 0x01, 0x12, 0x19, 0x0a, 0x14,
	0x65, 0x72, 0x61, 0x62, 0x5f, 0x65, 0x73, 0x74, 0x61, 0x62, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x10, 0xd8, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x65, 0x72, 0x61, 0x62, 0x5f,
	0x65, 0x73, 0x74, 0x61, 0x62, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x10, 0xd9,
	0x01, 0x12, 0x1a, 0x0a, 0x15, 0x65, 0x72, 0x61, 0x62, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x10, 0xda, 0x01, 0x12, 0x2a, 0x0a,
	0x25, 0x65, 0x72, 0x61, 0x62, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x10, 0xdb, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x65, 0x72, 0x61,
	0x62, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0xdc, 0x01, 0x12, 0x38, 0x0a, 0x33,
	0x65, 0x72, 0x61, 0x62, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x10, 0xdd, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x65, 0x72, 0x61, 0x62, 0x5f, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f,
	0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0xde, 0x01, 0x12, 0x2d,
	0x0a, 0x28, 0x65, 0x72, 0x61, 0x62, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x6e, 0x5f,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x10, 0xdf, 0x01, 0x12, 0x26, 0x0a,
	0x21, 0x65, 0x72, 0x61, 0x62, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6e, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x10, 0xe0, 0x01, 0x12, 0x30, 0x0a, 0x2b, 0x65, 0x72, 0x61, 0x62, 0x5f, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x5f,
	0x6c, 0x6f, 0x73, 0x74, 0x10, 0xe1, 0x01, 0x12, 0x2b, 0x0a, 0x26, 0x65, 0x72, 0x61, 0x62, 0x5f,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x5f, 0x6f, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0xe2, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x5f, 0x6d,
	0x67, 0x6d, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x10, 0xe3,
	0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x5f, 0x72, 0x65, 0x62, 0x6f,
	0x6f, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10,
	0xe4, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x5f, 0x72, 0x65, 0x62,
	0x6f, 0x6f, 0x74, 0x73, 0x10, 0xe5, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x65, 0x6e, 0x6f, 0x64, 0x65,
	0x62, 0x5f, 0x72, 0x66, 0x5f, 0x74, 0x78, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x10,
	0xe6, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x64, 0x5f, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x74, 0x74, 0x5f, 0x6d, 0x73, 0x10, 0xac, 0x02, 0x12, 0x10, 0x0a, 0x0b, 0x63,
	0x70, 0x75, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x10, 0xad, 0x02, 0x12, 0x18, 0x0a,
	0x13, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x10, 0xae, 0x02, 0x12, 0x1b, 0x0a, 0x16, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x10, 0xaf, 0x02, 0x12, 0x11, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x10, 0xb0, 0x02, 0x12, 0x0f, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x10, 0xb1, 0x02, 0x12, 0x13, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x10, 0xb2, 0x02, 0x12, 0x10, 0x0a,
	0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0xb3, 0x02, 0x12,
	0x13, 0x0a, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x10, 0xb4, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x10, 0xb5, 0x02, 0x12, 0x0e, 0x0a,
	0x09, 0x6d, 0x65, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x10, 0xb6, 0x02, 0x12, 0x12, 0x0a,
	0x0d, 0x6d, 0x65, 0x6d, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0xb7,
	0x02, 0x12, 0x0d, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x10, 0xb8, 0x02,
	0x12, 0x0d, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x10, 0xb9, 0x02, 0x12,
	0x18, 0x0a, 0x13, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x65, 0x78, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xba, 0x02, 0x12, 0x19, 0x0a, 0x14, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x32, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x61, 0x6b, 0x65,
	0x6e, 0x10, 0xbb, 0x02, 0x12, 0x14, 0x0a, 0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x32, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xbc, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x72, 0x32, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64,
	0x10, 0xbd, 0x02, 0x12, 0x19, 0x0a, 0x14, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x72, 0x32,
	0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x10, 0xbe, 0x02, 0x12, 0x15,
	0x0a, 0x10, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x72, 0x32, 0x5f, 0x63, 0x61, 0x6e, 0x61,
	0x72, 0x79, 0x10, 0xbf, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x32, 0x5f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x10, 0xc0, 0x02, 0x12, 0x13, 0x0a, 0x0e,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x72, 0x32, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x10, 0xc1,
	0x02, 0x12, 0x20, 0x0a, 0x1b, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73,
	0x10, 0xc2, 0x02, 0x12, 0x1e, 0x0a, 0x19, 0x75, 0x6e, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x10, 0xc3, 0x02, 0x12, 0x1b, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0xc4, 0x02,
	0x12, 0x16, 0x0a, 0x11, 0x64, 0x70, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xde, 0x02, 0x12, 0x1d, 0x0a, 0x18, 0x61, 0x72, 0x70, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x67, 0x77, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0xdf, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x10, 0xe0, 0x02,
	0x12, 0x1a, 0x0a, 0x15, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x70, 0x6b, 0x74, 0x5f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xe1, 0x02, 0x12, 0x19, 0x0a, 0x14,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x10, 0xe2, 0x02, 0x12, 0x22, 0x0a, 0x1d, 0x65, 0x6e, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x10, 0xe3, 0x02, 0x12, 0x28, 0x0a, 0x23, 0x65,
	0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x10, 0xe4, 0x02, 0x12, 0x12, 0x0a, 0x0d, 0x6d, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x90, 0x03, 0x12, 0x16, 0x0a, 0x11, 0x73, 0x31, 0x5f,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x65, 0x6e, 0x62, 0x10, 0x91,
	0x03, 0x12, 0x0f, 0x0a, 0x0a, 0x73, 0x63, 0x74, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x10,
	0x9a, 0x03, 0x12, 0x12, 0x0a, 0x0d, 0x73, 0x63, 0x74, 0x70, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x10, 0x9b, 0x03, 0x12, 0x28, 0x0a, 0x23, 0x73, 0x36, 0x61, 0x5f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0xa4, 0x03,
	0x12, 0x29, 0x0a, 0x24, 0x73, 0x36, 0x61, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0xa5, 0x03, 0x12, 0x1d, 0x0a, 0x18, 0x64,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0xae, 0x03, 0x12, 0x2b, 0x0a, 0x26, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65,
	0x74, 0x75, 0x70, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x10, 0xaf, 0x03, 0x12, 0x30, 0x0a, 0x2b, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0xb0, 0x03, 0x12, 0x24, 0x0a, 0x1f, 0x6e, 0x61, 0x73,
	0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0xb1, 0x03, 0x12,
	0x1f, 0x0a, 0x1a, 0x6e, 0x61, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x73, 0x70, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0xb2, 0x03,
	0x12, 0x2c, 0x0a, 0x27, 0x6e, 0x61, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0xb3, 0x03, 0x12, 0x22,
	0x0a, 0x1d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x10,
	0xb4, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0xb5, 0x03, 0x12,
	0x20, 0x0a, 0x1b, 0x6d, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x67, 0x77, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x10, 0xb6,
	0x03, 0x12, 0x20, 0x0a, 0x1b, 0x6d, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x67, 0x77, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x73, 0x70,
	0x10, 0xb7, 0x03, 0x12, 0x20, 0x0a, 0x1b, 0x6d, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x67, 0x77, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x71, 0x10, 0xb8, 0x03, 0x12, 0x20, 0x0a, 0x1b, 0x6d, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x67,
	0x77, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x73, 0x70, 0x10, 0xb9, 0x03, 0x12, 0x1f, 0x0a, 0x1a, 0x75, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0xc2, 0x03, 0x12, 0x2d, 0x0a, 0x28, 0x75, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x10, 0xc3, 0x03, 0x12, 0x22, 0x0a, 0x1d, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0xc4, 0x03, 0x12, 0x30, 0x0a, 0x2b, 0x65,
	0x6e, 0x62, 0x5f, 0x73, 0x63, 0x74, 0x70, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x5f, 0x75, 0x65, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0xc5, 0x03, 0x12, 0x1c, 0x0a,
	0x17, 0x73, 0x31, 0x61, 0x70, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x10, 0xe0, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x67,
	0x74, 0x70, 0x75, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x10, 0xe1, 0x03, 0x12, 0x29, 0x0a, 0x24, 0x6e, 0x61, 0x73,
	0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x10, 0xe2, 0x03, 0x12, 0x18, 0x0a, 0x13, 0x65, 0x6d, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x10, 0xe3, 0x03, 0x12, 0x14,
	0x0a, 0x0f, 0x65, 0x6d, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x6e,
	0x74, 0x10, 0xe4, 0x03, 0x12, 0x18, 0x0a, 0x13, 0x6d, 0x6d, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x5f,
	0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xf4, 0x03, 0x12, 0x0e,
	0x0a, 0x09, 0x75, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x10, 0xf5, 0x03, 0x12, 0x14,
	0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x10, 0xf6, 0x03, 0x12, 0x0e, 0x0a, 0x09, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x63,
	0x68, 0x10, 0xf7, 0x03, 0x12, 0x18, 0x0a, 0x13, 0x73, 0x70, 0x67, 0x77, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0xf8, 0x03, 0x12, 0x18,
	0x0a, 0x13, 0x73, 0x70, 0x67, 0x77, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0xf9, 0x03, 0x12, 0x16, 0x0a, 0x11, 0x75, 0x65, 0x5f, 0x70,
	0x64, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xfa, 0x03,
	0x12, 0x19, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x72, 0x65,
	0x61, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0xfb, 0x03, 0x12, 0x0d, 0x0a, 0x08, 0x73,
	0x31, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x10, 0xfc, 0x03, 0x12, 0x13, 0x0a, 0x0e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x10, 0xa6, 0x04, 0x2a,
	0x92, 0x02, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x74, 0x61,
	0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x70, 0x64, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f,
	0x72, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x10, 0x09, 0x12, 0x0b,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0b, 0x12,
	0x0a, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x10, 0x0c, 0x12, 0x0e, 0x0a, 0x0a, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x69,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x10, 0x10, 0x12, 0x0b, 0x0a,
	0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x10, 0x11, 0x12, 0x08, 0x0a, 0x04, 0x69, 0x6d,
	0x73, 0x69, 0x10, 0x12, 0x32, 0x94, 0x01, 0x0a, 0x11, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x07, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72,
	0x63, 0x38, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63,
	0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x04, 0x50, 0x75, 0x73,
	0x68, 0x12, 0x23, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e,
	0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f,
	0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x42, 0x1b, 0x5a, 0x19, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2f, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x67,
	0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_orc8r_protos_metricsd_proto_rawDescOnce sync.Once
	file_orc8r_protos_metricsd_proto_rawDescData = file_orc8r_protos_metricsd_proto_rawDesc
)

func file_orc8r_protos_metricsd_proto_rawDescGZIP() []byte {
	file_orc8r_protos_metricsd_proto_rawDescOnce.Do(func() {
		file_orc8r_protos_metricsd_proto_rawDescData = protoimpl.X.CompressGZIP(file_orc8r_protos_metricsd_proto_rawDescData)
	})
	return file_orc8r_protos_metricsd_proto_rawDescData
}

var file_orc8r_protos_metricsd_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_orc8r_protos_metricsd_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_orc8r_protos_metricsd_proto_goTypes = []interface{}{
	(MetricName)(0),                // 0: magma.orc8r.MetricName
	(MetricLabelName)(0),           // 1: magma.orc8r.MetricLabelName
	(*MetricsContainer)(nil),       // 2: magma.orc8r.MetricsContainer
	(*PushedMetric)(nil),           // 3: magma.orc8r.PushedMetric
	(*LabelPair)(nil),              // 4: magma.orc8r.LabelPair
	(*PushedMetricsContainer)(nil), // 5: magma.orc8r.PushedMetricsContainer
	(*_go.MetricFamily)(nil),       // 6: io.prometheus.client.MetricFamily
	(*Void)(nil),                   // 7: magma.orc8r.Void
}
var file_orc8r_protos_metricsd_proto_depIdxs = []int32{
	6, // 0: magma.orc8r.MetricsContainer.family:type_name -> io.prometheus.client.MetricFamily
	4, // 1: magma.orc8r.PushedMetric.labels:type_name -> magma.orc8r.LabelPair
	3, // 2: magma.orc8r.PushedMetricsContainer.metrics:type_name -> magma.orc8r.PushedMetric
	2, // 3: magma.orc8r.MetricsController.Collect:input_type -> magma.orc8r.MetricsContainer
	5, // 4: magma.orc8r.MetricsController.Push:input_type -> magma.orc8r.PushedMetricsContainer
	7, // 5: magma.orc8r.MetricsController.Collect:output_type -> magma.orc8r.Void
	7, // 6: magma.orc8r.MetricsController.Push:output_type -> magma.orc8r.Void
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_orc8r_protos_metricsd_proto_init() }
func file_orc8r_protos_metricsd_proto_init() {
	if File_orc8r_protos_metricsd_proto != nil {
		return
	}
	file_orc8r_protos_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_orc8r_protos_metricsd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_metricsd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushedMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_metricsd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_metricsd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushedMetricsContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_orc8r_protos_metricsd_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_orc8r_protos_metricsd_proto_goTypes,
		DependencyIndexes: file_orc8r_protos_metricsd_proto_depIdxs,
		EnumInfos:         file_orc8r_protos_metricsd_proto_enumTypes,
		MessageInfos:      file_orc8r_protos_metricsd_proto_msgTypes,
	}.Build()
	File_orc8r_protos_metricsd_proto = out.File
	file_orc8r_protos_metricsd_proto_rawDesc = nil
	file_orc8r_protos_metricsd_proto_goTypes = nil
	file_orc8r_protos_metricsd_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MetricsControllerClient is the client API for MetricsController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MetricsControllerClient interface {
	// Report a collection of metrics from a service
	Collect(ctx context.Context, in *MetricsContainer, opts ...grpc.CallOption) (*Void, error)
	// Push a collection of metrics to metricsd
	Push(ctx context.Context, in *PushedMetricsContainer, opts ...grpc.CallOption) (*Void, error)
}

type metricsControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsControllerClient(cc grpc.ClientConnInterface) MetricsControllerClient {
	return &metricsControllerClient{cc}
}

func (c *metricsControllerClient) Collect(ctx context.Context, in *MetricsContainer, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.MetricsController/Collect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsControllerClient) Push(ctx context.Context, in *PushedMetricsContainer, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.MetricsController/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsControllerServer is the server API for MetricsController service.
type MetricsControllerServer interface {
	// Report a collection of metrics from a service
	Collect(context.Context, *MetricsContainer) (*Void, error)
	// Push a collection of metrics to metricsd
	Push(context.Context, *PushedMetricsContainer) (*Void, error)
}

// UnimplementedMetricsControllerServer can be embedded to have forward compatible implementations.
type UnimplementedMetricsControllerServer struct {
}

func (*UnimplementedMetricsControllerServer) Collect(context.Context, *MetricsContainer) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Collect not implemented")
}
func (*UnimplementedMetricsControllerServer) Push(context.Context, *PushedMetricsContainer) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}

func RegisterMetricsControllerServer(s *grpc.Server, srv MetricsControllerServer) {
	s.RegisterService(&_MetricsController_serviceDesc, srv)
}

func _MetricsController_Collect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsContainer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsControllerServer).Collect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.MetricsController/Collect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsControllerServer).Collect(ctx, req.(*MetricsContainer))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsController_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushedMetricsContainer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsControllerServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.MetricsController/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsControllerServer).Push(ctx, req.(*PushedMetricsContainer))
	}
	return interceptor(ctx, in, info, handler)
}

var _MetricsController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.MetricsController",
	HandlerType: (*MetricsControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Collect",
			Handler:    _MetricsController_Collect_Handler,
		},
		{
			MethodName: "Push",
			Handler:    _MetricsController_Push_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orc8r/protos/metricsd.proto",
}
