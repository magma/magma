// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.10.0
// source: orc8r/protos/service303.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Service303Client is the client API for Service303 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Service303Client interface {
	// Returns the service level info like name, version, state, status, etc.
	//
	GetServiceInfo(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ServiceInfo, error)
	// Request to stop the service gracefully.
	//
	StopService(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	// Collects metrics from the service
	GetMetrics(ctx context.Context, in *Void, opts ...grpc.CallOption) (*MetricsContainer, error)
	// Set logging level
	SetLogLevel(ctx context.Context, in *LogLevelMessage, opts ...grpc.CallOption) (*Void, error)
	// Set logging verbosity The larger, the more verbose. default 0
	SetLogVerbosity(ctx context.Context, in *LogVerbosity, opts ...grpc.CallOption) (*Void, error)
	// Requests service reloads config files loaded on startup (<servicename>.yml)
	ReloadServiceConfig(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ReloadConfigResponse, error)
	// Returns the  operational states of devices managed by this service.
	GetOperationalStates(ctx context.Context, in *Void, opts ...grpc.CallOption) (*GetOperationalStatesResponse, error)
}

type service303Client struct {
	cc grpc.ClientConnInterface
}

func NewService303Client(cc grpc.ClientConnInterface) Service303Client {
	return &service303Client{cc}
}

func (c *service303Client) GetServiceInfo(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ServiceInfo, error) {
	out := new(ServiceInfo)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Service303/GetServiceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service303Client) StopService(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Service303/StopService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service303Client) GetMetrics(ctx context.Context, in *Void, opts ...grpc.CallOption) (*MetricsContainer, error) {
	out := new(MetricsContainer)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Service303/GetMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service303Client) SetLogLevel(ctx context.Context, in *LogLevelMessage, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Service303/SetLogLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service303Client) SetLogVerbosity(ctx context.Context, in *LogVerbosity, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Service303/SetLogVerbosity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service303Client) ReloadServiceConfig(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ReloadConfigResponse, error) {
	out := new(ReloadConfigResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Service303/ReloadServiceConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service303Client) GetOperationalStates(ctx context.Context, in *Void, opts ...grpc.CallOption) (*GetOperationalStatesResponse, error) {
	out := new(GetOperationalStatesResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Service303/GetOperationalStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service303Server is the server API for Service303 service.
// All implementations must embed UnimplementedService303Server
// for forward compatibility
type Service303Server interface {
	// Returns the service level info like name, version, state, status, etc.
	//
	GetServiceInfo(context.Context, *Void) (*ServiceInfo, error)
	// Request to stop the service gracefully.
	//
	StopService(context.Context, *Void) (*Void, error)
	// Collects metrics from the service
	GetMetrics(context.Context, *Void) (*MetricsContainer, error)
	// Set logging level
	SetLogLevel(context.Context, *LogLevelMessage) (*Void, error)
	// Set logging verbosity The larger, the more verbose. default 0
	SetLogVerbosity(context.Context, *LogVerbosity) (*Void, error)
	// Requests service reloads config files loaded on startup (<servicename>.yml)
	ReloadServiceConfig(context.Context, *Void) (*ReloadConfigResponse, error)
	// Returns the  operational states of devices managed by this service.
	GetOperationalStates(context.Context, *Void) (*GetOperationalStatesResponse, error)
	mustEmbedUnimplementedService303Server()
}

// UnimplementedService303Server must be embedded to have forward compatible implementations.
type UnimplementedService303Server struct {
}

func (UnimplementedService303Server) GetServiceInfo(context.Context, *Void) (*ServiceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceInfo not implemented")
}
func (UnimplementedService303Server) StopService(context.Context, *Void) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopService not implemented")
}
func (UnimplementedService303Server) GetMetrics(context.Context, *Void) (*MetricsContainer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedService303Server) SetLogLevel(context.Context, *LogLevelMessage) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLogLevel not implemented")
}
func (UnimplementedService303Server) SetLogVerbosity(context.Context, *LogVerbosity) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLogVerbosity not implemented")
}
func (UnimplementedService303Server) ReloadServiceConfig(context.Context, *Void) (*ReloadConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadServiceConfig not implemented")
}
func (UnimplementedService303Server) GetOperationalStates(context.Context, *Void) (*GetOperationalStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperationalStates not implemented")
}
func (UnimplementedService303Server) mustEmbedUnimplementedService303Server() {}

// UnsafeService303Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Service303Server will
// result in compilation errors.
type UnsafeService303Server interface {
	mustEmbedUnimplementedService303Server()
}

func RegisterService303Server(s grpc.ServiceRegistrar, srv Service303Server) {
	s.RegisterService(&Service303_ServiceDesc, srv)
}

func _Service303_GetServiceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Service303Server).GetServiceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Service303/GetServiceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Service303Server).GetServiceInfo(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service303_StopService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Service303Server).StopService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Service303/StopService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Service303Server).StopService(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service303_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Service303Server).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Service303/GetMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Service303Server).GetMetrics(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service303_SetLogLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogLevelMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Service303Server).SetLogLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Service303/SetLogLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Service303Server).SetLogLevel(ctx, req.(*LogLevelMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service303_SetLogVerbosity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogVerbosity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Service303Server).SetLogVerbosity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Service303/SetLogVerbosity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Service303Server).SetLogVerbosity(ctx, req.(*LogVerbosity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service303_ReloadServiceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Service303Server).ReloadServiceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Service303/ReloadServiceConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Service303Server).ReloadServiceConfig(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service303_GetOperationalStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Service303Server).GetOperationalStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Service303/GetOperationalStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Service303Server).GetOperationalStates(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

// Service303_ServiceDesc is the grpc.ServiceDesc for Service303 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service303_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.Service303",
	HandlerType: (*Service303Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServiceInfo",
			Handler:    _Service303_GetServiceInfo_Handler,
		},
		{
			MethodName: "StopService",
			Handler:    _Service303_StopService_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _Service303_GetMetrics_Handler,
		},
		{
			MethodName: "SetLogLevel",
			Handler:    _Service303_SetLogLevel_Handler,
		},
		{
			MethodName: "SetLogVerbosity",
			Handler:    _Service303_SetLogVerbosity_Handler,
		},
		{
			MethodName: "ReloadServiceConfig",
			Handler:    _Service303_ReloadServiceConfig_Handler,
		},
		{
			MethodName: "GetOperationalStates",
			Handler:    _Service303_GetOperationalStates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orc8r/protos/service303.proto",
}
