//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: orc8r/protos/directoryd.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetHostnameForHWIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hwid string `protobuf:"bytes,1,opt,name=hwid,proto3" json:"hwid,omitempty"`
}

func (x *GetHostnameForHWIDRequest) Reset() {
	*x = GetHostnameForHWIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_directoryd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHostnameForHWIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostnameForHWIDRequest) ProtoMessage() {}

func (x *GetHostnameForHWIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_directoryd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostnameForHWIDRequest.ProtoReflect.Descriptor instead.
func (*GetHostnameForHWIDRequest) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_directoryd_proto_rawDescGZIP(), []int{0}
}

func (x *GetHostnameForHWIDRequest) GetHwid() string {
	if x != nil {
		return x.Hwid
	}
	return ""
}

type GetHostnameForHWIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *GetHostnameForHWIDResponse) Reset() {
	*x = GetHostnameForHWIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_directoryd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHostnameForHWIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostnameForHWIDResponse) ProtoMessage() {}

func (x *GetHostnameForHWIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_directoryd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostnameForHWIDResponse.ProtoReflect.Descriptor instead.
func (*GetHostnameForHWIDResponse) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_directoryd_proto_rawDescGZIP(), []int{1}
}

func (x *GetHostnameForHWIDResponse) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

type MapHWIDToHostnameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HwidToHostname map[string]string `protobuf:"bytes,1,rep,name=hwidToHostname,proto3" json:"hwidToHostname,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapHWIDToHostnameRequest) Reset() {
	*x = MapHWIDToHostnameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_directoryd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapHWIDToHostnameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapHWIDToHostnameRequest) ProtoMessage() {}

func (x *MapHWIDToHostnameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_directoryd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapHWIDToHostnameRequest.ProtoReflect.Descriptor instead.
func (*MapHWIDToHostnameRequest) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_directoryd_proto_rawDescGZIP(), []int{2}
}

func (x *MapHWIDToHostnameRequest) GetHwidToHostname() map[string]string {
	if x != nil {
		return x.HwidToHostname
	}
	return nil
}

type GetIMSIForSessionIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkID string `protobuf:"bytes,1,opt,name=networkID,proto3" json:"networkID,omitempty"`
	SessionID string `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
}

func (x *GetIMSIForSessionIDRequest) Reset() {
	*x = GetIMSIForSessionIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_directoryd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIMSIForSessionIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIMSIForSessionIDRequest) ProtoMessage() {}

func (x *GetIMSIForSessionIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_directoryd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIMSIForSessionIDRequest.ProtoReflect.Descriptor instead.
func (*GetIMSIForSessionIDRequest) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_directoryd_proto_rawDescGZIP(), []int{3}
}

func (x *GetIMSIForSessionIDRequest) GetNetworkID() string {
	if x != nil {
		return x.NetworkID
	}
	return ""
}

func (x *GetIMSIForSessionIDRequest) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

type GetIMSIForSessionIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imsi string `protobuf:"bytes,1,opt,name=imsi,proto3" json:"imsi,omitempty"`
}

func (x *GetIMSIForSessionIDResponse) Reset() {
	*x = GetIMSIForSessionIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_directoryd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIMSIForSessionIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIMSIForSessionIDResponse) ProtoMessage() {}

func (x *GetIMSIForSessionIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_directoryd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIMSIForSessionIDResponse.ProtoReflect.Descriptor instead.
func (*GetIMSIForSessionIDResponse) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_directoryd_proto_rawDescGZIP(), []int{4}
}

func (x *GetIMSIForSessionIDResponse) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

type MapSessionIDToIMSIRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkID       string            `protobuf:"bytes,1,opt,name=networkID,proto3" json:"networkID,omitempty"`
	SessionIDToIMSI map[string]string `protobuf:"bytes,2,rep,name=sessionIDToIMSI,proto3" json:"sessionIDToIMSI,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapSessionIDToIMSIRequest) Reset() {
	*x = MapSessionIDToIMSIRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_directoryd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapSessionIDToIMSIRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapSessionIDToIMSIRequest) ProtoMessage() {}

func (x *MapSessionIDToIMSIRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_directoryd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapSessionIDToIMSIRequest.ProtoReflect.Descriptor instead.
func (*MapSessionIDToIMSIRequest) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_directoryd_proto_rawDescGZIP(), []int{5}
}

func (x *MapSessionIDToIMSIRequest) GetNetworkID() string {
	if x != nil {
		return x.NetworkID
	}
	return ""
}

func (x *MapSessionIDToIMSIRequest) GetSessionIDToIMSI() map[string]string {
	if x != nil {
		return x.SessionIDToIMSI
	}
	return nil
}

type GetHWIDForSgwCTeidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkID string `protobuf:"bytes,1,opt,name=networkID,proto3" json:"networkID,omitempty"`
	Teid      string `protobuf:"bytes,2,opt,name=teid,proto3" json:"teid,omitempty"`
}

func (x *GetHWIDForSgwCTeidRequest) Reset() {
	*x = GetHWIDForSgwCTeidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_directoryd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHWIDForSgwCTeidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHWIDForSgwCTeidRequest) ProtoMessage() {}

func (x *GetHWIDForSgwCTeidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_directoryd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHWIDForSgwCTeidRequest.ProtoReflect.Descriptor instead.
func (*GetHWIDForSgwCTeidRequest) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_directoryd_proto_rawDescGZIP(), []int{6}
}

func (x *GetHWIDForSgwCTeidRequest) GetNetworkID() string {
	if x != nil {
		return x.NetworkID
	}
	return ""
}

func (x *GetHWIDForSgwCTeidRequest) GetTeid() string {
	if x != nil {
		return x.Teid
	}
	return ""
}

type GetHWIDForSgwCTeidResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hwid string `protobuf:"bytes,1,opt,name=hwid,proto3" json:"hwid,omitempty"`
}

func (x *GetHWIDForSgwCTeidResponse) Reset() {
	*x = GetHWIDForSgwCTeidResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_directoryd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHWIDForSgwCTeidResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHWIDForSgwCTeidResponse) ProtoMessage() {}

func (x *GetHWIDForSgwCTeidResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_directoryd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHWIDForSgwCTeidResponse.ProtoReflect.Descriptor instead.
func (*GetHWIDForSgwCTeidResponse) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_directoryd_proto_rawDescGZIP(), []int{7}
}

func (x *GetHWIDForSgwCTeidResponse) GetHwid() string {
	if x != nil {
		return x.Hwid
	}
	return ""
}

type MapSgwCTeidToHWIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkID  string            `protobuf:"bytes,1,opt,name=networkID,proto3" json:"networkID,omitempty"`
	TeidToHwid map[string]string `protobuf:"bytes,2,rep,name=teidToHwid,proto3" json:"teidToHwid,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapSgwCTeidToHWIDRequest) Reset() {
	*x = MapSgwCTeidToHWIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_directoryd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapSgwCTeidToHWIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapSgwCTeidToHWIDRequest) ProtoMessage() {}

func (x *MapSgwCTeidToHWIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_directoryd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapSgwCTeidToHWIDRequest.ProtoReflect.Descriptor instead.
func (*MapSgwCTeidToHWIDRequest) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_directoryd_proto_rawDescGZIP(), []int{8}
}

func (x *MapSgwCTeidToHWIDRequest) GetNetworkID() string {
	if x != nil {
		return x.NetworkID
	}
	return ""
}

func (x *MapSgwCTeidToHWIDRequest) GetTeidToHwid() map[string]string {
	if x != nil {
		return x.TeidToHwid
	}
	return nil
}

type UpdateRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Location string            `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	Fields   map[string]string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateRecordRequest) Reset() {
	*x = UpdateRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_directoryd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecordRequest) ProtoMessage() {}

func (x *UpdateRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_directoryd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecordRequest.ProtoReflect.Descriptor instead.
func (*UpdateRecordRequest) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_directoryd_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateRecordRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateRecordRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *UpdateRecordRequest) GetFields() map[string]string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type DirectoryField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DirectoryField) Reset() {
	*x = DirectoryField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_directoryd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectoryField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectoryField) ProtoMessage() {}

func (x *DirectoryField) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_directoryd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectoryField.ProtoReflect.Descriptor instead.
func (*DirectoryField) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_directoryd_proto_rawDescGZIP(), []int{10}
}

func (x *DirectoryField) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DirectoryField) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type DeleteRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteRecordRequest) Reset() {
	*x = DeleteRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_directoryd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRecordRequest) ProtoMessage() {}

func (x *DeleteRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_directoryd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRecordRequest.ProtoReflect.Descriptor instead.
func (*DeleteRecordRequest) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_directoryd_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteRecordRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetDirectoryFieldRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FieldKey string `protobuf:"bytes,2,opt,name=field_key,json=fieldKey,proto3" json:"field_key,omitempty"`
}

func (x *GetDirectoryFieldRequest) Reset() {
	*x = GetDirectoryFieldRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_directoryd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDirectoryFieldRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDirectoryFieldRequest) ProtoMessage() {}

func (x *GetDirectoryFieldRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_directoryd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDirectoryFieldRequest.ProtoReflect.Descriptor instead.
func (*GetDirectoryFieldRequest) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_directoryd_proto_rawDescGZIP(), []int{12}
}

func (x *GetDirectoryFieldRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetDirectoryFieldRequest) GetFieldKey() string {
	if x != nil {
		return x.FieldKey
	}
	return ""
}

type DirectoryRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LocationHistory []string          `protobuf:"bytes,2,rep,name=location_history,json=locationHistory,proto3" json:"location_history,omitempty"`
	Fields          map[string]string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DirectoryRecord) Reset() {
	*x = DirectoryRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_directoryd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectoryRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectoryRecord) ProtoMessage() {}

func (x *DirectoryRecord) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_directoryd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectoryRecord.ProtoReflect.Descriptor instead.
func (*DirectoryRecord) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_directoryd_proto_rawDescGZIP(), []int{13}
}

func (x *DirectoryRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DirectoryRecord) GetLocationHistory() []string {
	if x != nil {
		return x.LocationHistory
	}
	return nil
}

func (x *DirectoryRecord) GetFields() map[string]string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type AllDirectoryRecords struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*DirectoryRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *AllDirectoryRecords) Reset() {
	*x = AllDirectoryRecords{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_directoryd_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllDirectoryRecords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllDirectoryRecords) ProtoMessage() {}

func (x *AllDirectoryRecords) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_directoryd_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllDirectoryRecords.ProtoReflect.Descriptor instead.
func (*AllDirectoryRecords) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_directoryd_proto_rawDescGZIP(), []int{14}
}

func (x *AllDirectoryRecords) GetRecords() []*DirectoryRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

var File_orc8r_protos_directoryd_proto protoreflect.FileDescriptor

var file_orc8r_protos_directoryd_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0b, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x1a, 0x19, 0x6f, 0x72,
	0x63, 0x38, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2f, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x48, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x48, 0x57, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x77, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x77, 0x69, 0x64, 0x22, 0x38, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x48,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x48, 0x57, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x18, 0x4d, 0x61, 0x70, 0x48, 0x57, 0x49, 0x44, 0x54, 0x6f,
	0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x61, 0x0a, 0x0e, 0x68, 0x77, 0x69, 0x64, 0x54, 0x6f, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x48, 0x57, 0x49, 0x44, 0x54, 0x6f, 0x48,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48,
	0x77, 0x69, 0x64, 0x54, 0x6f, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0e, 0x68, 0x77, 0x69, 0x64, 0x54, 0x6f, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x1a, 0x41, 0x0a, 0x13, 0x48, 0x77, 0x69, 0x64, 0x54, 0x6f, 0x48, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x58, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x49, 0x4d, 0x53, 0x49,
	0x46, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22,
	0x31, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x49, 0x4d, 0x53, 0x49, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d,
	0x73, 0x69, 0x22, 0xe4, 0x01, 0x0a, 0x19, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x54, 0x6f, 0x49, 0x4d, 0x53, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x12, 0x65,
	0x0a, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x54, 0x6f, 0x49, 0x4d, 0x53,
	0x49, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x54, 0x6f, 0x49, 0x4d, 0x53, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x54, 0x6f, 0x49, 0x4d, 0x53, 0x49, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x54,
	0x6f, 0x49, 0x4d, 0x53, 0x49, 0x1a, 0x42, 0x0a, 0x14, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x54, 0x6f, 0x49, 0x4d, 0x53, 0x49, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4d, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x48, 0x57, 0x49, 0x44, 0x46, 0x6f, 0x72, 0x53, 0x67, 0x77, 0x43, 0x54, 0x65, 0x69, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x48,
	0x57, 0x49, 0x44, 0x46, 0x6f, 0x72, 0x53, 0x67, 0x77, 0x43, 0x54, 0x65, 0x69, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x77, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x77, 0x69, 0x64, 0x22, 0xce, 0x01, 0x0a, 0x18, 0x4d,
	0x61, 0x70, 0x53, 0x67, 0x77, 0x43, 0x54, 0x65, 0x69, 0x64, 0x54, 0x6f, 0x48, 0x57, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x44, 0x12, 0x55, 0x0a, 0x0a, 0x74, 0x65, 0x69, 0x64, 0x54, 0x6f, 0x48,
	0x77, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x67, 0x77, 0x43, 0x54,
	0x65, 0x69, 0x64, 0x54, 0x6f, 0x48, 0x57, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x54, 0x65, 0x69, 0x64, 0x54, 0x6f, 0x48, 0x77, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x74, 0x65, 0x69, 0x64, 0x54, 0x6f, 0x48, 0x77, 0x69, 0x64, 0x1a, 0x3d, 0x0a, 0x0f,
	0x54, 0x65, 0x69, 0x64, 0x54, 0x6f, 0x48, 0x77, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc2, 0x01, 0x0a, 0x13,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x44, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x38, 0x0a, 0x0e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x25, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x47, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4b, 0x65, 0x79, 0x22, 0xc9, 0x01, 0x0a, 0x0f, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29,
	0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4d, 0x0a, 0x13, 0x41, 0x6c, 0x6c, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x36, 0x0a,
	0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x32, 0xc8, 0x04, 0x0a, 0x0f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x67, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x48, 0x57, 0x49, 0x44, 0x12,
	0x26, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x48, 0x57, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x46, 0x6f, 0x72, 0x48, 0x57, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x51, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x48, 0x57, 0x49, 0x44, 0x73, 0x54, 0x6f,
	0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x48, 0x57, 0x49, 0x44, 0x54,
	0x6f, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56,
	0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x4d, 0x53, 0x49,
	0x46, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x27, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x4d,
	0x53, 0x49, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72,
	0x63, 0x38, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x4d, 0x53, 0x49, 0x46, 0x6f, 0x72, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x53, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x73, 0x54, 0x6f, 0x49, 0x4d, 0x53, 0x49, 0x73, 0x12, 0x26, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x54, 0x6f, 0x49, 0x4d, 0x53, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e,
	0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x48, 0x57, 0x49,
	0x44, 0x46, 0x6f, 0x72, 0x53, 0x67, 0x77, 0x43, 0x54, 0x65, 0x69, 0x64, 0x12, 0x26, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x57,
	0x49, 0x44, 0x46, 0x6f, 0x72, 0x53, 0x67, 0x77, 0x43, 0x54, 0x65, 0x69, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63,
	0x38, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x57, 0x49, 0x44, 0x46, 0x6f, 0x72, 0x53, 0x67, 0x77,
	0x43, 0x54, 0x65, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x4f, 0x0a, 0x11, 0x4d, 0x61, 0x70, 0x53, 0x67, 0x77, 0x43, 0x54, 0x65, 0x69, 0x64, 0x54, 0x6f,
	0x48, 0x57, 0x49, 0x44, 0x12, 0x25, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63,
	0x38, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x67, 0x77, 0x43, 0x54, 0x65, 0x69, 0x64, 0x54, 0x6f,
	0x48, 0x57, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00,
	0x32, 0xd3, 0x02, 0x0a, 0x17, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69,
	0x64, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38,
	0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72,
	0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x25, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f,
	0x72, 0x63, 0x38, 0x72, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12,
	0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f,
	0x69, 0x64, 0x1a, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72,
	0x2e, 0x41, 0x6c, 0x6c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x22, 0x00, 0x42, 0x1b, 0x5a, 0x19, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f,
	0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_orc8r_protos_directoryd_proto_rawDescOnce sync.Once
	file_orc8r_protos_directoryd_proto_rawDescData = file_orc8r_protos_directoryd_proto_rawDesc
)

func file_orc8r_protos_directoryd_proto_rawDescGZIP() []byte {
	file_orc8r_protos_directoryd_proto_rawDescOnce.Do(func() {
		file_orc8r_protos_directoryd_proto_rawDescData = protoimpl.X.CompressGZIP(file_orc8r_protos_directoryd_proto_rawDescData)
	})
	return file_orc8r_protos_directoryd_proto_rawDescData
}

var file_orc8r_protos_directoryd_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_orc8r_protos_directoryd_proto_goTypes = []interface{}{
	(*GetHostnameForHWIDRequest)(nil),   // 0: magma.orc8r.GetHostnameForHWIDRequest
	(*GetHostnameForHWIDResponse)(nil),  // 1: magma.orc8r.GetHostnameForHWIDResponse
	(*MapHWIDToHostnameRequest)(nil),    // 2: magma.orc8r.MapHWIDToHostnameRequest
	(*GetIMSIForSessionIDRequest)(nil),  // 3: magma.orc8r.GetIMSIForSessionIDRequest
	(*GetIMSIForSessionIDResponse)(nil), // 4: magma.orc8r.GetIMSIForSessionIDResponse
	(*MapSessionIDToIMSIRequest)(nil),   // 5: magma.orc8r.MapSessionIDToIMSIRequest
	(*GetHWIDForSgwCTeidRequest)(nil),   // 6: magma.orc8r.GetHWIDForSgwCTeidRequest
	(*GetHWIDForSgwCTeidResponse)(nil),  // 7: magma.orc8r.GetHWIDForSgwCTeidResponse
	(*MapSgwCTeidToHWIDRequest)(nil),    // 8: magma.orc8r.MapSgwCTeidToHWIDRequest
	(*UpdateRecordRequest)(nil),         // 9: magma.orc8r.UpdateRecordRequest
	(*DirectoryField)(nil),              // 10: magma.orc8r.DirectoryField
	(*DeleteRecordRequest)(nil),         // 11: magma.orc8r.DeleteRecordRequest
	(*GetDirectoryFieldRequest)(nil),    // 12: magma.orc8r.GetDirectoryFieldRequest
	(*DirectoryRecord)(nil),             // 13: magma.orc8r.DirectoryRecord
	(*AllDirectoryRecords)(nil),         // 14: magma.orc8r.AllDirectoryRecords
	nil,                                 // 15: magma.orc8r.MapHWIDToHostnameRequest.HwidToHostnameEntry
	nil,                                 // 16: magma.orc8r.MapSessionIDToIMSIRequest.SessionIDToIMSIEntry
	nil,                                 // 17: magma.orc8r.MapSgwCTeidToHWIDRequest.TeidToHwidEntry
	nil,                                 // 18: magma.orc8r.UpdateRecordRequest.FieldsEntry
	nil,                                 // 19: magma.orc8r.DirectoryRecord.FieldsEntry
	(*Void)(nil),                        // 20: magma.orc8r.Void
}
var file_orc8r_protos_directoryd_proto_depIdxs = []int32{
	15, // 0: magma.orc8r.MapHWIDToHostnameRequest.hwidToHostname:type_name -> magma.orc8r.MapHWIDToHostnameRequest.HwidToHostnameEntry
	16, // 1: magma.orc8r.MapSessionIDToIMSIRequest.sessionIDToIMSI:type_name -> magma.orc8r.MapSessionIDToIMSIRequest.SessionIDToIMSIEntry
	17, // 2: magma.orc8r.MapSgwCTeidToHWIDRequest.teidToHwid:type_name -> magma.orc8r.MapSgwCTeidToHWIDRequest.TeidToHwidEntry
	18, // 3: magma.orc8r.UpdateRecordRequest.fields:type_name -> magma.orc8r.UpdateRecordRequest.FieldsEntry
	19, // 4: magma.orc8r.DirectoryRecord.fields:type_name -> magma.orc8r.DirectoryRecord.FieldsEntry
	13, // 5: magma.orc8r.AllDirectoryRecords.records:type_name -> magma.orc8r.DirectoryRecord
	0,  // 6: magma.orc8r.DirectoryLookup.GetHostnameForHWID:input_type -> magma.orc8r.GetHostnameForHWIDRequest
	2,  // 7: magma.orc8r.DirectoryLookup.MapHWIDsToHostnames:input_type -> magma.orc8r.MapHWIDToHostnameRequest
	3,  // 8: magma.orc8r.DirectoryLookup.GetIMSIForSessionID:input_type -> magma.orc8r.GetIMSIForSessionIDRequest
	5,  // 9: magma.orc8r.DirectoryLookup.MapSessionIDsToIMSIs:input_type -> magma.orc8r.MapSessionIDToIMSIRequest
	6,  // 10: magma.orc8r.DirectoryLookup.GetHWIDForSgwCTeid:input_type -> magma.orc8r.GetHWIDForSgwCTeidRequest
	8,  // 11: magma.orc8r.DirectoryLookup.MapSgwCTeidToHWID:input_type -> magma.orc8r.MapSgwCTeidToHWIDRequest
	9,  // 12: magma.orc8r.GatewayDirectoryService.UpdateRecord:input_type -> magma.orc8r.UpdateRecordRequest
	11, // 13: magma.orc8r.GatewayDirectoryService.DeleteRecord:input_type -> magma.orc8r.DeleteRecordRequest
	12, // 14: magma.orc8r.GatewayDirectoryService.GetDirectoryField:input_type -> magma.orc8r.GetDirectoryFieldRequest
	20, // 15: magma.orc8r.GatewayDirectoryService.GetAllDirectoryRecords:input_type -> magma.orc8r.Void
	1,  // 16: magma.orc8r.DirectoryLookup.GetHostnameForHWID:output_type -> magma.orc8r.GetHostnameForHWIDResponse
	20, // 17: magma.orc8r.DirectoryLookup.MapHWIDsToHostnames:output_type -> magma.orc8r.Void
	4,  // 18: magma.orc8r.DirectoryLookup.GetIMSIForSessionID:output_type -> magma.orc8r.GetIMSIForSessionIDResponse
	20, // 19: magma.orc8r.DirectoryLookup.MapSessionIDsToIMSIs:output_type -> magma.orc8r.Void
	7,  // 20: magma.orc8r.DirectoryLookup.GetHWIDForSgwCTeid:output_type -> magma.orc8r.GetHWIDForSgwCTeidResponse
	20, // 21: magma.orc8r.DirectoryLookup.MapSgwCTeidToHWID:output_type -> magma.orc8r.Void
	20, // 22: magma.orc8r.GatewayDirectoryService.UpdateRecord:output_type -> magma.orc8r.Void
	20, // 23: magma.orc8r.GatewayDirectoryService.DeleteRecord:output_type -> magma.orc8r.Void
	10, // 24: magma.orc8r.GatewayDirectoryService.GetDirectoryField:output_type -> magma.orc8r.DirectoryField
	14, // 25: magma.orc8r.GatewayDirectoryService.GetAllDirectoryRecords:output_type -> magma.orc8r.AllDirectoryRecords
	16, // [16:26] is the sub-list for method output_type
	6,  // [6:16] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_orc8r_protos_directoryd_proto_init() }
func file_orc8r_protos_directoryd_proto_init() {
	if File_orc8r_protos_directoryd_proto != nil {
		return
	}
	file_orc8r_protos_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_orc8r_protos_directoryd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHostnameForHWIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_directoryd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHostnameForHWIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_directoryd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapHWIDToHostnameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_directoryd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIMSIForSessionIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_directoryd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIMSIForSessionIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_directoryd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapSessionIDToIMSIRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_directoryd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHWIDForSgwCTeidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_directoryd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHWIDForSgwCTeidResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_directoryd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapSgwCTeidToHWIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_directoryd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_directoryd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectoryField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_directoryd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_directoryd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDirectoryFieldRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_directoryd_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectoryRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_directoryd_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllDirectoryRecords); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_orc8r_protos_directoryd_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_orc8r_protos_directoryd_proto_goTypes,
		DependencyIndexes: file_orc8r_protos_directoryd_proto_depIdxs,
		MessageInfos:      file_orc8r_protos_directoryd_proto_msgTypes,
	}.Build()
	File_orc8r_protos_directoryd_proto = out.File
	file_orc8r_protos_directoryd_proto_rawDesc = nil
	file_orc8r_protos_directoryd_proto_goTypes = nil
	file_orc8r_protos_directoryd_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DirectoryLookupClient is the client API for DirectoryLookup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DirectoryLookupClient interface {
	// GetHostnameForHWID returns the hostname mapped to by hardware ID.
	GetHostnameForHWID(ctx context.Context, in *GetHostnameForHWIDRequest, opts ...grpc.CallOption) (*GetHostnameForHWIDResponse, error)
	// MapHWIDsToHostnames maps {hwid -> hostname}.
	MapHWIDsToHostnames(ctx context.Context, in *MapHWIDToHostnameRequest, opts ...grpc.CallOption) (*Void, error)
	// GetIMSIForSessionID returns the IMSI mapped to by session ID.
	GetIMSIForSessionID(ctx context.Context, in *GetIMSIForSessionIDRequest, opts ...grpc.CallOption) (*GetIMSIForSessionIDResponse, error)
	// MapSessionIDsToIMSIs maps {session ID -> IMSI}.
	MapSessionIDsToIMSIs(ctx context.Context, in *MapSessionIDToIMSIRequest, opts ...grpc.CallOption) (*Void, error)
	// GetHWIDForSgwCTeid returns the HwId mapped to by sgw control plane Sgw Teid
	GetHWIDForSgwCTeid(ctx context.Context, in *GetHWIDForSgwCTeidRequest, opts ...grpc.CallOption) (*GetHWIDForSgwCTeidResponse, error)
	// MapSgwCTeidToHWID maps {teid -> HwId}.
	MapSgwCTeidToHWID(ctx context.Context, in *MapSgwCTeidToHWIDRequest, opts ...grpc.CallOption) (*Void, error)
}

type directoryLookupClient struct {
	cc grpc.ClientConnInterface
}

func NewDirectoryLookupClient(cc grpc.ClientConnInterface) DirectoryLookupClient {
	return &directoryLookupClient{cc}
}

func (c *directoryLookupClient) GetHostnameForHWID(ctx context.Context, in *GetHostnameForHWIDRequest, opts ...grpc.CallOption) (*GetHostnameForHWIDResponse, error) {
	out := new(GetHostnameForHWIDResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.DirectoryLookup/GetHostnameForHWID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryLookupClient) MapHWIDsToHostnames(ctx context.Context, in *MapHWIDToHostnameRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.DirectoryLookup/MapHWIDsToHostnames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryLookupClient) GetIMSIForSessionID(ctx context.Context, in *GetIMSIForSessionIDRequest, opts ...grpc.CallOption) (*GetIMSIForSessionIDResponse, error) {
	out := new(GetIMSIForSessionIDResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.DirectoryLookup/GetIMSIForSessionID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryLookupClient) MapSessionIDsToIMSIs(ctx context.Context, in *MapSessionIDToIMSIRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.DirectoryLookup/MapSessionIDsToIMSIs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryLookupClient) GetHWIDForSgwCTeid(ctx context.Context, in *GetHWIDForSgwCTeidRequest, opts ...grpc.CallOption) (*GetHWIDForSgwCTeidResponse, error) {
	out := new(GetHWIDForSgwCTeidResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.DirectoryLookup/GetHWIDForSgwCTeid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryLookupClient) MapSgwCTeidToHWID(ctx context.Context, in *MapSgwCTeidToHWIDRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.DirectoryLookup/MapSgwCTeidToHWID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirectoryLookupServer is the server API for DirectoryLookup service.
type DirectoryLookupServer interface {
	// GetHostnameForHWID returns the hostname mapped to by hardware ID.
	GetHostnameForHWID(context.Context, *GetHostnameForHWIDRequest) (*GetHostnameForHWIDResponse, error)
	// MapHWIDsToHostnames maps {hwid -> hostname}.
	MapHWIDsToHostnames(context.Context, *MapHWIDToHostnameRequest) (*Void, error)
	// GetIMSIForSessionID returns the IMSI mapped to by session ID.
	GetIMSIForSessionID(context.Context, *GetIMSIForSessionIDRequest) (*GetIMSIForSessionIDResponse, error)
	// MapSessionIDsToIMSIs maps {session ID -> IMSI}.
	MapSessionIDsToIMSIs(context.Context, *MapSessionIDToIMSIRequest) (*Void, error)
	// GetHWIDForSgwCTeid returns the HwId mapped to by sgw control plane Sgw Teid
	GetHWIDForSgwCTeid(context.Context, *GetHWIDForSgwCTeidRequest) (*GetHWIDForSgwCTeidResponse, error)
	// MapSgwCTeidToHWID maps {teid -> HwId}.
	MapSgwCTeidToHWID(context.Context, *MapSgwCTeidToHWIDRequest) (*Void, error)
}

// UnimplementedDirectoryLookupServer can be embedded to have forward compatible implementations.
type UnimplementedDirectoryLookupServer struct {
}

func (*UnimplementedDirectoryLookupServer) GetHostnameForHWID(context.Context, *GetHostnameForHWIDRequest) (*GetHostnameForHWIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostnameForHWID not implemented")
}
func (*UnimplementedDirectoryLookupServer) MapHWIDsToHostnames(context.Context, *MapHWIDToHostnameRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapHWIDsToHostnames not implemented")
}
func (*UnimplementedDirectoryLookupServer) GetIMSIForSessionID(context.Context, *GetIMSIForSessionIDRequest) (*GetIMSIForSessionIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIMSIForSessionID not implemented")
}
func (*UnimplementedDirectoryLookupServer) MapSessionIDsToIMSIs(context.Context, *MapSessionIDToIMSIRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapSessionIDsToIMSIs not implemented")
}
func (*UnimplementedDirectoryLookupServer) GetHWIDForSgwCTeid(context.Context, *GetHWIDForSgwCTeidRequest) (*GetHWIDForSgwCTeidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHWIDForSgwCTeid not implemented")
}
func (*UnimplementedDirectoryLookupServer) MapSgwCTeidToHWID(context.Context, *MapSgwCTeidToHWIDRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapSgwCTeidToHWID not implemented")
}

func RegisterDirectoryLookupServer(s *grpc.Server, srv DirectoryLookupServer) {
	s.RegisterService(&_DirectoryLookup_serviceDesc, srv)
}

func _DirectoryLookup_GetHostnameForHWID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostnameForHWIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryLookupServer).GetHostnameForHWID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.DirectoryLookup/GetHostnameForHWID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryLookupServer).GetHostnameForHWID(ctx, req.(*GetHostnameForHWIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryLookup_MapHWIDsToHostnames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapHWIDToHostnameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryLookupServer).MapHWIDsToHostnames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.DirectoryLookup/MapHWIDsToHostnames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryLookupServer).MapHWIDsToHostnames(ctx, req.(*MapHWIDToHostnameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryLookup_GetIMSIForSessionID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIMSIForSessionIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryLookupServer).GetIMSIForSessionID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.DirectoryLookup/GetIMSIForSessionID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryLookupServer).GetIMSIForSessionID(ctx, req.(*GetIMSIForSessionIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryLookup_MapSessionIDsToIMSIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapSessionIDToIMSIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryLookupServer).MapSessionIDsToIMSIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.DirectoryLookup/MapSessionIDsToIMSIs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryLookupServer).MapSessionIDsToIMSIs(ctx, req.(*MapSessionIDToIMSIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryLookup_GetHWIDForSgwCTeid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHWIDForSgwCTeidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryLookupServer).GetHWIDForSgwCTeid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.DirectoryLookup/GetHWIDForSgwCTeid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryLookupServer).GetHWIDForSgwCTeid(ctx, req.(*GetHWIDForSgwCTeidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryLookup_MapSgwCTeidToHWID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapSgwCTeidToHWIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryLookupServer).MapSgwCTeidToHWID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.DirectoryLookup/MapSgwCTeidToHWID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryLookupServer).MapSgwCTeidToHWID(ctx, req.(*MapSgwCTeidToHWIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DirectoryLookup_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.DirectoryLookup",
	HandlerType: (*DirectoryLookupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHostnameForHWID",
			Handler:    _DirectoryLookup_GetHostnameForHWID_Handler,
		},
		{
			MethodName: "MapHWIDsToHostnames",
			Handler:    _DirectoryLookup_MapHWIDsToHostnames_Handler,
		},
		{
			MethodName: "GetIMSIForSessionID",
			Handler:    _DirectoryLookup_GetIMSIForSessionID_Handler,
		},
		{
			MethodName: "MapSessionIDsToIMSIs",
			Handler:    _DirectoryLookup_MapSessionIDsToIMSIs_Handler,
		},
		{
			MethodName: "GetHWIDForSgwCTeid",
			Handler:    _DirectoryLookup_GetHWIDForSgwCTeid_Handler,
		},
		{
			MethodName: "MapSgwCTeidToHWID",
			Handler:    _DirectoryLookup_MapSgwCTeidToHWID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orc8r/protos/directoryd.proto",
}

// GatewayDirectoryServiceClient is the client API for GatewayDirectoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GatewayDirectoryServiceClient interface {
	// Update the directory record of an object in the directory service
	UpdateRecord(ctx context.Context, in *UpdateRecordRequest, opts ...grpc.CallOption) (*Void, error)
	// Delete directory record of an object from the directory service
	// Throws UNKNOWN if object ID does not exist
	DeleteRecord(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*Void, error)
	// Get directory field for a given id and key
	GetDirectoryField(ctx context.Context, in *GetDirectoryFieldRequest, opts ...grpc.CallOption) (*DirectoryField, error)
	// Get all directory records
	GetAllDirectoryRecords(ctx context.Context, in *Void, opts ...grpc.CallOption) (*AllDirectoryRecords, error)
}

type gatewayDirectoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayDirectoryServiceClient(cc grpc.ClientConnInterface) GatewayDirectoryServiceClient {
	return &gatewayDirectoryServiceClient{cc}
}

func (c *gatewayDirectoryServiceClient) UpdateRecord(ctx context.Context, in *UpdateRecordRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.GatewayDirectoryService/UpdateRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDirectoryServiceClient) DeleteRecord(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.GatewayDirectoryService/DeleteRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDirectoryServiceClient) GetDirectoryField(ctx context.Context, in *GetDirectoryFieldRequest, opts ...grpc.CallOption) (*DirectoryField, error) {
	out := new(DirectoryField)
	err := c.cc.Invoke(ctx, "/magma.orc8r.GatewayDirectoryService/GetDirectoryField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDirectoryServiceClient) GetAllDirectoryRecords(ctx context.Context, in *Void, opts ...grpc.CallOption) (*AllDirectoryRecords, error) {
	out := new(AllDirectoryRecords)
	err := c.cc.Invoke(ctx, "/magma.orc8r.GatewayDirectoryService/GetAllDirectoryRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayDirectoryServiceServer is the server API for GatewayDirectoryService service.
type GatewayDirectoryServiceServer interface {
	// Update the directory record of an object in the directory service
	UpdateRecord(context.Context, *UpdateRecordRequest) (*Void, error)
	// Delete directory record of an object from the directory service
	// Throws UNKNOWN if object ID does not exist
	DeleteRecord(context.Context, *DeleteRecordRequest) (*Void, error)
	// Get directory field for a given id and key
	GetDirectoryField(context.Context, *GetDirectoryFieldRequest) (*DirectoryField, error)
	// Get all directory records
	GetAllDirectoryRecords(context.Context, *Void) (*AllDirectoryRecords, error)
}

// UnimplementedGatewayDirectoryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGatewayDirectoryServiceServer struct {
}

func (*UnimplementedGatewayDirectoryServiceServer) UpdateRecord(context.Context, *UpdateRecordRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecord not implemented")
}
func (*UnimplementedGatewayDirectoryServiceServer) DeleteRecord(context.Context, *DeleteRecordRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecord not implemented")
}
func (*UnimplementedGatewayDirectoryServiceServer) GetDirectoryField(context.Context, *GetDirectoryFieldRequest) (*DirectoryField, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDirectoryField not implemented")
}
func (*UnimplementedGatewayDirectoryServiceServer) GetAllDirectoryRecords(context.Context, *Void) (*AllDirectoryRecords, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDirectoryRecords not implemented")
}

func RegisterGatewayDirectoryServiceServer(s *grpc.Server, srv GatewayDirectoryServiceServer) {
	s.RegisterService(&_GatewayDirectoryService_serviceDesc, srv)
}

func _GatewayDirectoryService_UpdateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDirectoryServiceServer).UpdateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.GatewayDirectoryService/UpdateRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDirectoryServiceServer).UpdateRecord(ctx, req.(*UpdateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDirectoryService_DeleteRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDirectoryServiceServer).DeleteRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.GatewayDirectoryService/DeleteRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDirectoryServiceServer).DeleteRecord(ctx, req.(*DeleteRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDirectoryService_GetDirectoryField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDirectoryFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDirectoryServiceServer).GetDirectoryField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.GatewayDirectoryService/GetDirectoryField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDirectoryServiceServer).GetDirectoryField(ctx, req.(*GetDirectoryFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDirectoryService_GetAllDirectoryRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDirectoryServiceServer).GetAllDirectoryRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.GatewayDirectoryService/GetAllDirectoryRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDirectoryServiceServer).GetAllDirectoryRecords(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _GatewayDirectoryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.GatewayDirectoryService",
	HandlerType: (*GatewayDirectoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateRecord",
			Handler:    _GatewayDirectoryService_UpdateRecord_Handler,
		},
		{
			MethodName: "DeleteRecord",
			Handler:    _GatewayDirectoryService_DeleteRecord_Handler,
		},
		{
			MethodName: "GetDirectoryField",
			Handler:    _GatewayDirectoryService_GetDirectoryField_Handler,
		},
		{
			MethodName: "GetAllDirectoryRecords",
			Handler:    _GatewayDirectoryService_GetAllDirectoryRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orc8r/protos/directoryd.proto",
}
