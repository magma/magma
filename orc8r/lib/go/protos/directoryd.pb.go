// Code generated by protoc-gen-go. DO NOT EDIT.
// source: orc8r/protos/directoryd.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetHostnameForHWIDRequest struct {
	Hwid                 string   `protobuf:"bytes,1,opt,name=hwid,proto3" json:"hwid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHostnameForHWIDRequest) Reset()         { *m = GetHostnameForHWIDRequest{} }
func (m *GetHostnameForHWIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetHostnameForHWIDRequest) ProtoMessage()    {}
func (*GetHostnameForHWIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02336ef077163fd, []int{0}
}

func (m *GetHostnameForHWIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetHostnameForHWIDRequest.Unmarshal(m, b)
}
func (m *GetHostnameForHWIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetHostnameForHWIDRequest.Marshal(b, m, deterministic)
}
func (m *GetHostnameForHWIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHostnameForHWIDRequest.Merge(m, src)
}
func (m *GetHostnameForHWIDRequest) XXX_Size() int {
	return xxx_messageInfo_GetHostnameForHWIDRequest.Size(m)
}
func (m *GetHostnameForHWIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHostnameForHWIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetHostnameForHWIDRequest proto.InternalMessageInfo

func (m *GetHostnameForHWIDRequest) GetHwid() string {
	if m != nil {
		return m.Hwid
	}
	return ""
}

type GetHostnameForHWIDResponse struct {
	Hostname             string   `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHostnameForHWIDResponse) Reset()         { *m = GetHostnameForHWIDResponse{} }
func (m *GetHostnameForHWIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetHostnameForHWIDResponse) ProtoMessage()    {}
func (*GetHostnameForHWIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02336ef077163fd, []int{1}
}

func (m *GetHostnameForHWIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetHostnameForHWIDResponse.Unmarshal(m, b)
}
func (m *GetHostnameForHWIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetHostnameForHWIDResponse.Marshal(b, m, deterministic)
}
func (m *GetHostnameForHWIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHostnameForHWIDResponse.Merge(m, src)
}
func (m *GetHostnameForHWIDResponse) XXX_Size() int {
	return xxx_messageInfo_GetHostnameForHWIDResponse.Size(m)
}
func (m *GetHostnameForHWIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHostnameForHWIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetHostnameForHWIDResponse proto.InternalMessageInfo

func (m *GetHostnameForHWIDResponse) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

type MapHWIDToHostnameRequest struct {
	HwidToHostname       map[string]string `protobuf:"bytes,1,rep,name=hwidToHostname,proto3" json:"hwidToHostname,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MapHWIDToHostnameRequest) Reset()         { *m = MapHWIDToHostnameRequest{} }
func (m *MapHWIDToHostnameRequest) String() string { return proto.CompactTextString(m) }
func (*MapHWIDToHostnameRequest) ProtoMessage()    {}
func (*MapHWIDToHostnameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02336ef077163fd, []int{2}
}

func (m *MapHWIDToHostnameRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapHWIDToHostnameRequest.Unmarshal(m, b)
}
func (m *MapHWIDToHostnameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapHWIDToHostnameRequest.Marshal(b, m, deterministic)
}
func (m *MapHWIDToHostnameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapHWIDToHostnameRequest.Merge(m, src)
}
func (m *MapHWIDToHostnameRequest) XXX_Size() int {
	return xxx_messageInfo_MapHWIDToHostnameRequest.Size(m)
}
func (m *MapHWIDToHostnameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MapHWIDToHostnameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MapHWIDToHostnameRequest proto.InternalMessageInfo

func (m *MapHWIDToHostnameRequest) GetHwidToHostname() map[string]string {
	if m != nil {
		return m.HwidToHostname
	}
	return nil
}

type GetIMSIForSessionIDRequest struct {
	NetworkID            string   `protobuf:"bytes,1,opt,name=networkID,proto3" json:"networkID,omitempty"`
	SessionID            string   `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetIMSIForSessionIDRequest) Reset()         { *m = GetIMSIForSessionIDRequest{} }
func (m *GetIMSIForSessionIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetIMSIForSessionIDRequest) ProtoMessage()    {}
func (*GetIMSIForSessionIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02336ef077163fd, []int{3}
}

func (m *GetIMSIForSessionIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetIMSIForSessionIDRequest.Unmarshal(m, b)
}
func (m *GetIMSIForSessionIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetIMSIForSessionIDRequest.Marshal(b, m, deterministic)
}
func (m *GetIMSIForSessionIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIMSIForSessionIDRequest.Merge(m, src)
}
func (m *GetIMSIForSessionIDRequest) XXX_Size() int {
	return xxx_messageInfo_GetIMSIForSessionIDRequest.Size(m)
}
func (m *GetIMSIForSessionIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIMSIForSessionIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetIMSIForSessionIDRequest proto.InternalMessageInfo

func (m *GetIMSIForSessionIDRequest) GetNetworkID() string {
	if m != nil {
		return m.NetworkID
	}
	return ""
}

func (m *GetIMSIForSessionIDRequest) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

type GetIMSIForSessionIDResponse struct {
	Imsi                 string   `protobuf:"bytes,1,opt,name=imsi,proto3" json:"imsi,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetIMSIForSessionIDResponse) Reset()         { *m = GetIMSIForSessionIDResponse{} }
func (m *GetIMSIForSessionIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetIMSIForSessionIDResponse) ProtoMessage()    {}
func (*GetIMSIForSessionIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02336ef077163fd, []int{4}
}

func (m *GetIMSIForSessionIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetIMSIForSessionIDResponse.Unmarshal(m, b)
}
func (m *GetIMSIForSessionIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetIMSIForSessionIDResponse.Marshal(b, m, deterministic)
}
func (m *GetIMSIForSessionIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIMSIForSessionIDResponse.Merge(m, src)
}
func (m *GetIMSIForSessionIDResponse) XXX_Size() int {
	return xxx_messageInfo_GetIMSIForSessionIDResponse.Size(m)
}
func (m *GetIMSIForSessionIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIMSIForSessionIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetIMSIForSessionIDResponse proto.InternalMessageInfo

func (m *GetIMSIForSessionIDResponse) GetImsi() string {
	if m != nil {
		return m.Imsi
	}
	return ""
}

type MapSessionIDToIMSIRequest struct {
	NetworkID            string            `protobuf:"bytes,1,opt,name=networkID,proto3" json:"networkID,omitempty"`
	SessionIDToIMSI      map[string]string `protobuf:"bytes,2,rep,name=sessionIDToIMSI,proto3" json:"sessionIDToIMSI,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MapSessionIDToIMSIRequest) Reset()         { *m = MapSessionIDToIMSIRequest{} }
func (m *MapSessionIDToIMSIRequest) String() string { return proto.CompactTextString(m) }
func (*MapSessionIDToIMSIRequest) ProtoMessage()    {}
func (*MapSessionIDToIMSIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02336ef077163fd, []int{5}
}

func (m *MapSessionIDToIMSIRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapSessionIDToIMSIRequest.Unmarshal(m, b)
}
func (m *MapSessionIDToIMSIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapSessionIDToIMSIRequest.Marshal(b, m, deterministic)
}
func (m *MapSessionIDToIMSIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapSessionIDToIMSIRequest.Merge(m, src)
}
func (m *MapSessionIDToIMSIRequest) XXX_Size() int {
	return xxx_messageInfo_MapSessionIDToIMSIRequest.Size(m)
}
func (m *MapSessionIDToIMSIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MapSessionIDToIMSIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MapSessionIDToIMSIRequest proto.InternalMessageInfo

func (m *MapSessionIDToIMSIRequest) GetNetworkID() string {
	if m != nil {
		return m.NetworkID
	}
	return ""
}

func (m *MapSessionIDToIMSIRequest) GetSessionIDToIMSI() map[string]string {
	if m != nil {
		return m.SessionIDToIMSI
	}
	return nil
}

type GetHWIDForSgwCTeidRequest struct {
	NetworkID            string   `protobuf:"bytes,1,opt,name=networkID,proto3" json:"networkID,omitempty"`
	Teid                 string   `protobuf:"bytes,2,opt,name=teid,proto3" json:"teid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHWIDForSgwCTeidRequest) Reset()         { *m = GetHWIDForSgwCTeidRequest{} }
func (m *GetHWIDForSgwCTeidRequest) String() string { return proto.CompactTextString(m) }
func (*GetHWIDForSgwCTeidRequest) ProtoMessage()    {}
func (*GetHWIDForSgwCTeidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02336ef077163fd, []int{6}
}

func (m *GetHWIDForSgwCTeidRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetHWIDForSgwCTeidRequest.Unmarshal(m, b)
}
func (m *GetHWIDForSgwCTeidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetHWIDForSgwCTeidRequest.Marshal(b, m, deterministic)
}
func (m *GetHWIDForSgwCTeidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHWIDForSgwCTeidRequest.Merge(m, src)
}
func (m *GetHWIDForSgwCTeidRequest) XXX_Size() int {
	return xxx_messageInfo_GetHWIDForSgwCTeidRequest.Size(m)
}
func (m *GetHWIDForSgwCTeidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHWIDForSgwCTeidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetHWIDForSgwCTeidRequest proto.InternalMessageInfo

func (m *GetHWIDForSgwCTeidRequest) GetNetworkID() string {
	if m != nil {
		return m.NetworkID
	}
	return ""
}

func (m *GetHWIDForSgwCTeidRequest) GetTeid() string {
	if m != nil {
		return m.Teid
	}
	return ""
}

type GetHWIDForSgwCTeidResponse struct {
	Hwid                 string   `protobuf:"bytes,1,opt,name=hwid,proto3" json:"hwid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHWIDForSgwCTeidResponse) Reset()         { *m = GetHWIDForSgwCTeidResponse{} }
func (m *GetHWIDForSgwCTeidResponse) String() string { return proto.CompactTextString(m) }
func (*GetHWIDForSgwCTeidResponse) ProtoMessage()    {}
func (*GetHWIDForSgwCTeidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02336ef077163fd, []int{7}
}

func (m *GetHWIDForSgwCTeidResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetHWIDForSgwCTeidResponse.Unmarshal(m, b)
}
func (m *GetHWIDForSgwCTeidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetHWIDForSgwCTeidResponse.Marshal(b, m, deterministic)
}
func (m *GetHWIDForSgwCTeidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHWIDForSgwCTeidResponse.Merge(m, src)
}
func (m *GetHWIDForSgwCTeidResponse) XXX_Size() int {
	return xxx_messageInfo_GetHWIDForSgwCTeidResponse.Size(m)
}
func (m *GetHWIDForSgwCTeidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHWIDForSgwCTeidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetHWIDForSgwCTeidResponse proto.InternalMessageInfo

func (m *GetHWIDForSgwCTeidResponse) GetHwid() string {
	if m != nil {
		return m.Hwid
	}
	return ""
}

type MapSgwCTeidToHWIDRequest struct {
	NetworkID            string            `protobuf:"bytes,1,opt,name=networkID,proto3" json:"networkID,omitempty"`
	TeidToHwid           map[string]string `protobuf:"bytes,2,rep,name=teidToHwid,proto3" json:"teidToHwid,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MapSgwCTeidToHWIDRequest) Reset()         { *m = MapSgwCTeidToHWIDRequest{} }
func (m *MapSgwCTeidToHWIDRequest) String() string { return proto.CompactTextString(m) }
func (*MapSgwCTeidToHWIDRequest) ProtoMessage()    {}
func (*MapSgwCTeidToHWIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02336ef077163fd, []int{8}
}

func (m *MapSgwCTeidToHWIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapSgwCTeidToHWIDRequest.Unmarshal(m, b)
}
func (m *MapSgwCTeidToHWIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapSgwCTeidToHWIDRequest.Marshal(b, m, deterministic)
}
func (m *MapSgwCTeidToHWIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapSgwCTeidToHWIDRequest.Merge(m, src)
}
func (m *MapSgwCTeidToHWIDRequest) XXX_Size() int {
	return xxx_messageInfo_MapSgwCTeidToHWIDRequest.Size(m)
}
func (m *MapSgwCTeidToHWIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MapSgwCTeidToHWIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MapSgwCTeidToHWIDRequest proto.InternalMessageInfo

func (m *MapSgwCTeidToHWIDRequest) GetNetworkID() string {
	if m != nil {
		return m.NetworkID
	}
	return ""
}

func (m *MapSgwCTeidToHWIDRequest) GetTeidToHwid() map[string]string {
	if m != nil {
		return m.TeidToHwid
	}
	return nil
}

type UpdateRecordRequest struct {
	Id                   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Location             string            `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	Fields               map[string]string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UpdateRecordRequest) Reset()         { *m = UpdateRecordRequest{} }
func (m *UpdateRecordRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRecordRequest) ProtoMessage()    {}
func (*UpdateRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02336ef077163fd, []int{9}
}

func (m *UpdateRecordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRecordRequest.Unmarshal(m, b)
}
func (m *UpdateRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRecordRequest.Marshal(b, m, deterministic)
}
func (m *UpdateRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRecordRequest.Merge(m, src)
}
func (m *UpdateRecordRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateRecordRequest.Size(m)
}
func (m *UpdateRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRecordRequest proto.InternalMessageInfo

func (m *UpdateRecordRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateRecordRequest) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *UpdateRecordRequest) GetFields() map[string]string {
	if m != nil {
		return m.Fields
	}
	return nil
}

type DirectoryField struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DirectoryField) Reset()         { *m = DirectoryField{} }
func (m *DirectoryField) String() string { return proto.CompactTextString(m) }
func (*DirectoryField) ProtoMessage()    {}
func (*DirectoryField) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02336ef077163fd, []int{10}
}

func (m *DirectoryField) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DirectoryField.Unmarshal(m, b)
}
func (m *DirectoryField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DirectoryField.Marshal(b, m, deterministic)
}
func (m *DirectoryField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryField.Merge(m, src)
}
func (m *DirectoryField) XXX_Size() int {
	return xxx_messageInfo_DirectoryField.Size(m)
}
func (m *DirectoryField) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryField.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryField proto.InternalMessageInfo

func (m *DirectoryField) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DirectoryField) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type DeleteRecordRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRecordRequest) Reset()         { *m = DeleteRecordRequest{} }
func (m *DeleteRecordRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRecordRequest) ProtoMessage()    {}
func (*DeleteRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02336ef077163fd, []int{11}
}

func (m *DeleteRecordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRecordRequest.Unmarshal(m, b)
}
func (m *DeleteRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRecordRequest.Marshal(b, m, deterministic)
}
func (m *DeleteRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRecordRequest.Merge(m, src)
}
func (m *DeleteRecordRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteRecordRequest.Size(m)
}
func (m *DeleteRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRecordRequest proto.InternalMessageInfo

func (m *DeleteRecordRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetDirectoryFieldRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FieldKey             string   `protobuf:"bytes,2,opt,name=field_key,json=fieldKey,proto3" json:"field_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDirectoryFieldRequest) Reset()         { *m = GetDirectoryFieldRequest{} }
func (m *GetDirectoryFieldRequest) String() string { return proto.CompactTextString(m) }
func (*GetDirectoryFieldRequest) ProtoMessage()    {}
func (*GetDirectoryFieldRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02336ef077163fd, []int{12}
}

func (m *GetDirectoryFieldRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDirectoryFieldRequest.Unmarshal(m, b)
}
func (m *GetDirectoryFieldRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDirectoryFieldRequest.Marshal(b, m, deterministic)
}
func (m *GetDirectoryFieldRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDirectoryFieldRequest.Merge(m, src)
}
func (m *GetDirectoryFieldRequest) XXX_Size() int {
	return xxx_messageInfo_GetDirectoryFieldRequest.Size(m)
}
func (m *GetDirectoryFieldRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDirectoryFieldRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDirectoryFieldRequest proto.InternalMessageInfo

func (m *GetDirectoryFieldRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetDirectoryFieldRequest) GetFieldKey() string {
	if m != nil {
		return m.FieldKey
	}
	return ""
}

type DirectoryRecord struct {
	Id                   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LocationHistory      []string          `protobuf:"bytes,2,rep,name=location_history,json=locationHistory,proto3" json:"location_history,omitempty"`
	Fields               map[string]string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DirectoryRecord) Reset()         { *m = DirectoryRecord{} }
func (m *DirectoryRecord) String() string { return proto.CompactTextString(m) }
func (*DirectoryRecord) ProtoMessage()    {}
func (*DirectoryRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02336ef077163fd, []int{13}
}

func (m *DirectoryRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DirectoryRecord.Unmarshal(m, b)
}
func (m *DirectoryRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DirectoryRecord.Marshal(b, m, deterministic)
}
func (m *DirectoryRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryRecord.Merge(m, src)
}
func (m *DirectoryRecord) XXX_Size() int {
	return xxx_messageInfo_DirectoryRecord.Size(m)
}
func (m *DirectoryRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryRecord proto.InternalMessageInfo

func (m *DirectoryRecord) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DirectoryRecord) GetLocationHistory() []string {
	if m != nil {
		return m.LocationHistory
	}
	return nil
}

func (m *DirectoryRecord) GetFields() map[string]string {
	if m != nil {
		return m.Fields
	}
	return nil
}

type AllDirectoryRecords struct {
	Records              []*DirectoryRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AllDirectoryRecords) Reset()         { *m = AllDirectoryRecords{} }
func (m *AllDirectoryRecords) String() string { return proto.CompactTextString(m) }
func (*AllDirectoryRecords) ProtoMessage()    {}
func (*AllDirectoryRecords) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02336ef077163fd, []int{14}
}

func (m *AllDirectoryRecords) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllDirectoryRecords.Unmarshal(m, b)
}
func (m *AllDirectoryRecords) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllDirectoryRecords.Marshal(b, m, deterministic)
}
func (m *AllDirectoryRecords) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllDirectoryRecords.Merge(m, src)
}
func (m *AllDirectoryRecords) XXX_Size() int {
	return xxx_messageInfo_AllDirectoryRecords.Size(m)
}
func (m *AllDirectoryRecords) XXX_DiscardUnknown() {
	xxx_messageInfo_AllDirectoryRecords.DiscardUnknown(m)
}

var xxx_messageInfo_AllDirectoryRecords proto.InternalMessageInfo

func (m *AllDirectoryRecords) GetRecords() []*DirectoryRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

func init() {
	proto.RegisterType((*GetHostnameForHWIDRequest)(nil), "magma.orc8r.GetHostnameForHWIDRequest")
	proto.RegisterType((*GetHostnameForHWIDResponse)(nil), "magma.orc8r.GetHostnameForHWIDResponse")
	proto.RegisterType((*MapHWIDToHostnameRequest)(nil), "magma.orc8r.MapHWIDToHostnameRequest")
	proto.RegisterMapType((map[string]string)(nil), "magma.orc8r.MapHWIDToHostnameRequest.HwidToHostnameEntry")
	proto.RegisterType((*GetIMSIForSessionIDRequest)(nil), "magma.orc8r.GetIMSIForSessionIDRequest")
	proto.RegisterType((*GetIMSIForSessionIDResponse)(nil), "magma.orc8r.GetIMSIForSessionIDResponse")
	proto.RegisterType((*MapSessionIDToIMSIRequest)(nil), "magma.orc8r.MapSessionIDToIMSIRequest")
	proto.RegisterMapType((map[string]string)(nil), "magma.orc8r.MapSessionIDToIMSIRequest.SessionIDToIMSIEntry")
	proto.RegisterType((*GetHWIDForSgwCTeidRequest)(nil), "magma.orc8r.GetHWIDForSgwCTeidRequest")
	proto.RegisterType((*GetHWIDForSgwCTeidResponse)(nil), "magma.orc8r.GetHWIDForSgwCTeidResponse")
	proto.RegisterType((*MapSgwCTeidToHWIDRequest)(nil), "magma.orc8r.MapSgwCTeidToHWIDRequest")
	proto.RegisterMapType((map[string]string)(nil), "magma.orc8r.MapSgwCTeidToHWIDRequest.TeidToHwidEntry")
	proto.RegisterType((*UpdateRecordRequest)(nil), "magma.orc8r.UpdateRecordRequest")
	proto.RegisterMapType((map[string]string)(nil), "magma.orc8r.UpdateRecordRequest.FieldsEntry")
	proto.RegisterType((*DirectoryField)(nil), "magma.orc8r.DirectoryField")
	proto.RegisterType((*DeleteRecordRequest)(nil), "magma.orc8r.DeleteRecordRequest")
	proto.RegisterType((*GetDirectoryFieldRequest)(nil), "magma.orc8r.GetDirectoryFieldRequest")
	proto.RegisterType((*DirectoryRecord)(nil), "magma.orc8r.DirectoryRecord")
	proto.RegisterMapType((map[string]string)(nil), "magma.orc8r.DirectoryRecord.FieldsEntry")
	proto.RegisterType((*AllDirectoryRecords)(nil), "magma.orc8r.AllDirectoryRecords")
}

func init() { proto.RegisterFile("orc8r/protos/directoryd.proto", fileDescriptor_f02336ef077163fd) }

var fileDescriptor_f02336ef077163fd = []byte{
	// 808 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdf, 0x6f, 0x12, 0x4b,
	0x14, 0x66, 0x29, 0xb7, 0xf7, 0x72, 0xda, 0x94, 0x76, 0x68, 0xae, 0xb0, 0xd4, 0xa4, 0xd9, 0xa4,
	0x8a, 0x89, 0x59, 0xb4, 0x46, 0x43, 0x35, 0x26, 0xb6, 0xd2, 0x02, 0x51, 0x62, 0x04, 0x6a, 0xd5,
	0x97, 0x66, 0xcb, 0x8e, 0x74, 0x2d, 0xec, 0xe0, 0xce, 0xb6, 0x84, 0xff, 0xce, 0xf8, 0xa4, 0x2f,
	0xbe, 0xf8, 0x2f, 0xf8, 0x87, 0x98, 0x9d, 0x99, 0x5d, 0xf6, 0xc7, 0x50, 0x68, 0xe2, 0x13, 0x33,
	0x67, 0xbe, 0xf3, 0xcd, 0x39, 0x1f, 0x33, 0xdf, 0x2c, 0xdc, 0x26, 0x4e, 0xaf, 0xea, 0x54, 0x46,
	0x0e, 0x71, 0x09, 0xad, 0x98, 0x96, 0x83, 0x7b, 0x2e, 0x71, 0x26, 0xa6, 0xce, 0x22, 0x68, 0x65,
	0x68, 0xf4, 0x87, 0x86, 0xce, 0x40, 0x6a, 0x31, 0x82, 0xed, 0x91, 0xe1, 0x90, 0xd8, 0x1c, 0xa7,
	0x55, 0xa0, 0x58, 0xc7, 0x6e, 0x83, 0x50, 0xd7, 0x36, 0x86, 0xf8, 0x88, 0x38, 0x8d, 0x93, 0x66,
	0xad, 0x8d, 0xbf, 0x5c, 0x62, 0xea, 0x22, 0x04, 0x99, 0xf3, 0xb1, 0x65, 0x16, 0x94, 0x6d, 0xa5,
	0x9c, 0x6d, 0xb3, 0xb1, 0x56, 0x05, 0x55, 0x96, 0x40, 0x47, 0xc4, 0xa6, 0x18, 0xa9, 0xf0, 0xdf,
	0xb9, 0x58, 0x12, 0x59, 0xc1, 0x5c, 0xfb, 0xaa, 0x40, 0xa1, 0x65, 0x8c, 0x3c, 0x7c, 0x97, 0xf8,
	0x04, 0xfe, 0x56, 0x06, 0xac, 0x79, 0xf4, 0xd3, 0x85, 0x82, 0xb2, 0xbd, 0x54, 0x5e, 0xd9, 0xdd,
	0xd3, 0x43, 0x8d, 0xe8, 0xb3, 0xd2, 0xf5, 0x46, 0x24, 0xf7, 0xd0, 0x76, 0x9d, 0x49, 0x3b, 0x46,
	0xa8, 0xee, 0x43, 0x5e, 0x02, 0x43, 0xeb, 0xb0, 0x74, 0x81, 0x27, 0xa2, 0x5a, 0x6f, 0x88, 0x36,
	0xe1, 0x9f, 0x2b, 0x63, 0x70, 0x89, 0x0b, 0x69, 0x16, 0xe3, 0x93, 0xa7, 0xe9, 0xaa, 0xa2, 0xbd,
	0x67, 0xcd, 0x37, 0x5b, 0x9d, 0xe6, 0x11, 0x71, 0x3a, 0x98, 0x52, 0x8b, 0xd8, 0x53, 0xb9, 0xb6,
	0x20, 0x6b, 0x63, 0x77, 0x4c, 0x9c, 0x8b, 0x66, 0x4d, 0xf0, 0x4d, 0x03, 0xde, 0x2a, 0xf5, 0x33,
	0x04, 0xf3, 0x34, 0xa0, 0x3d, 0x84, 0x92, 0x94, 0x59, 0xe8, 0x8a, 0x20, 0x63, 0x0d, 0xa9, 0xe5,
	0xff, 0x13, 0xde, 0x58, 0xfb, 0xad, 0x40, 0xb1, 0x65, 0x8c, 0x02, 0x70, 0x97, 0x78, 0xe9, 0x8b,
	0x15, 0x83, 0x21, 0x47, 0xa3, 0x79, 0x85, 0x34, 0xd3, 0xfb, 0x59, 0x5c, 0x6f, 0x39, 0xbd, 0x1e,
	0x0b, 0x73, 0xc5, 0xe3, 0x9c, 0xea, 0x01, 0x6c, 0xca, 0x80, 0x37, 0xd2, 0xbc, 0xc5, 0x4f, 0xe8,
	0x49, 0xb3, 0xe6, 0x29, 0xd3, 0x1f, 0xbf, 0xec, 0x62, 0xcb, 0x5c, 0xac, 0x4b, 0x04, 0x19, 0x17,
	0x5b, 0xa6, 0xe0, 0x64, 0x63, 0xed, 0x01, 0x3f, 0xbf, 0x71, 0xba, 0xa9, 0xce, 0x89, 0x13, 0xff,
	0x93, 0x9f, 0x5b, 0x1f, 0xdb, 0x25, 0xe1, 0x2b, 0x72, 0x7d, 0x01, 0xc7, 0x00, 0x2e, 0x4f, 0x19,
	0xb3, 0x32, 0x3c, 0x85, 0x1f, 0x27, 0x14, 0x96, 0x11, 0xeb, 0xdd, 0x20, 0x8f, 0x6b, 0x1b, 0x22,
	0x52, 0x9f, 0x43, 0x2e, 0xb6, 0x7c, 0x23, 0x45, 0xbf, 0x29, 0x90, 0x3f, 0x1e, 0x99, 0x86, 0x8b,
	0xdb, 0xb8, 0x47, 0x9c, 0x40, 0xcc, 0x35, 0x48, 0x07, 0xad, 0xa7, 0x2d, 0xd3, 0xbb, 0xcc, 0x03,
	0xd2, 0x33, 0x5c, 0x8b, 0xd8, 0x82, 0x24, 0x98, 0xa3, 0x1a, 0x2c, 0x7f, 0xb2, 0xf0, 0xc0, 0xa4,
	0x85, 0x25, 0xd6, 0xd5, 0xfd, 0x48, 0x57, 0x12, 0x76, 0xfd, 0x88, 0xc1, 0x79, 0x33, 0x22, 0x57,
	0xdd, 0x83, 0x95, 0x50, 0xf8, 0x46, 0x4d, 0x54, 0x61, 0xad, 0xe6, 0x9b, 0x1e, 0xe3, 0x58, 0x34,
	0x5b, 0xdb, 0x81, 0x7c, 0x0d, 0x0f, 0xf0, 0x9c, 0xee, 0xb5, 0x3a, 0x14, 0xea, 0xd8, 0x8d, 0xee,
	0x31, 0x4b, 0xa9, 0x12, 0x64, 0x59, 0x47, 0xa7, 0x5e, 0x01, 0x42, 0x2a, 0x16, 0x78, 0x85, 0x27,
	0xda, 0x0f, 0x05, 0x72, 0x01, 0x0d, 0xdf, 0x33, 0x41, 0x70, 0x0f, 0xd6, 0x7d, 0x69, 0x4f, 0xcf,
	0x2d, 0xea, 0x21, 0xd9, 0x71, 0xc9, 0xb6, 0x73, 0x7e, 0xbc, 0xc1, 0xc3, 0xe8, 0x45, 0x4c, 0xf9,
	0x72, 0x44, 0xf9, 0xd8, 0x46, 0x7f, 0x5b, 0xf5, 0x16, 0xe4, 0xf7, 0x07, 0x83, 0xd8, 0x26, 0x14,
	0x3d, 0x81, 0x7f, 0x1d, 0x3e, 0x14, 0xb6, 0xbd, 0x75, 0x5d, 0x51, 0x6d, 0x1f, 0xbc, 0xfb, 0x3d,
	0x13, 0x92, 0xe6, 0x35, 0x21, 0x17, 0x97, 0x23, 0xd4, 0x07, 0x94, 0x7c, 0x60, 0xd0, 0x9d, 0x08,
	0xe1, 0xcc, 0x27, 0x4b, 0xbd, 0x3b, 0x17, 0xc7, 0x6f, 0xba, 0x96, 0x42, 0x6f, 0x21, 0x2f, 0xde,
	0x13, 0x3a, 0x7d, 0x13, 0x28, 0xda, 0x59, 0xe8, 0xc5, 0x51, 0x37, 0x22, 0xb0, 0x77, 0xc4, 0x32,
	0xb5, 0x14, 0xfa, 0x0c, 0x79, 0x89, 0x8b, 0xa3, 0x44, 0x51, 0x33, 0x5e, 0x10, 0xb5, 0x3c, 0x1f,
	0x18, 0x94, 0xdf, 0x81, 0xcd, 0xb0, 0x3d, 0x53, 0xee, 0xaf, 0x34, 0xa6, 0xd4, 0x4c, 0x07, 0x97,
	0x37, 0x20, 0xc4, 0x8f, 0xba, 0xa3, 0x44, 0x7c, 0xa9, 0x1b, 0x4b, 0xc4, 0x97, 0xdb, 0xac, 0x96,
	0x42, 0x6f, 0x60, 0x23, 0x61, 0x7d, 0x49, 0xe9, 0xa5, 0xd6, 0x28, 0xad, 0x7c, 0xf7, 0x57, 0x1a,
	0x6e, 0xd5, 0x0d, 0x17, 0x8f, 0x8d, 0x49, 0x70, 0xa2, 0x3a, 0xd8, 0xb9, 0xb2, 0x7a, 0x18, 0x1d,
	0xc2, 0x6a, 0xd8, 0x91, 0xd0, 0xf6, 0x3c, 0xb3, 0x92, 0x8b, 0x73, 0x08, 0xab, 0x61, 0xe3, 0x88,
	0xd1, 0x48, 0x3c, 0x45, 0x4e, 0xf3, 0x01, 0x36, 0x12, 0xc6, 0x12, 0x6b, 0x7d, 0x96, 0xf1, 0xa8,
	0x25, 0xf9, 0xbd, 0x62, 0x18, 0xa6, 0xea, 0xff, 0x75, 0xec, 0xca, 0x6e, 0x68, 0xb2, 0x12, 0x35,
	0x5a, 0xbe, 0x24, 0x49, 0x4b, 0x1d, 0x94, 0x3e, 0x16, 0x19, 0xa8, 0xc2, 0xbf, 0x20, 0x07, 0xd6,
	0x59, 0xa5, 0x4f, 0xc4, 0x87, 0xe4, 0xd9, 0x32, 0xfb, 0x7d, 0xf4, 0x27, 0x00, 0x00, 0xff, 0xff,
	0x65, 0x94, 0x11, 0x9c, 0x8b, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DirectoryLookupClient is the client API for DirectoryLookup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DirectoryLookupClient interface {
	// GetHostnameForHWID returns the hostname mapped to by hardware ID.
	GetHostnameForHWID(ctx context.Context, in *GetHostnameForHWIDRequest, opts ...grpc.CallOption) (*GetHostnameForHWIDResponse, error)
	// MapHWIDsToHostnames maps {hwid -> hostname}.
	MapHWIDsToHostnames(ctx context.Context, in *MapHWIDToHostnameRequest, opts ...grpc.CallOption) (*Void, error)
	// GetIMSIForSessionID returns the IMSI mapped to by session ID.
	GetIMSIForSessionID(ctx context.Context, in *GetIMSIForSessionIDRequest, opts ...grpc.CallOption) (*GetIMSIForSessionIDResponse, error)
	// MapSessionIDsToIMSIs maps {session ID -> IMSI}.
	MapSessionIDsToIMSIs(ctx context.Context, in *MapSessionIDToIMSIRequest, opts ...grpc.CallOption) (*Void, error)
	// GetHWIDForSgwCTeid returns the HwId mapped to by sgw control plane Sgw Teid
	GetHWIDForSgwCTeid(ctx context.Context, in *GetHWIDForSgwCTeidRequest, opts ...grpc.CallOption) (*GetHWIDForSgwCTeidResponse, error)
	// MapSgwCTeidToHWID maps {teid -> HwId}.
	MapSgwCTeidToHWID(ctx context.Context, in *MapSgwCTeidToHWIDRequest, opts ...grpc.CallOption) (*Void, error)
}

type directoryLookupClient struct {
	cc grpc.ClientConnInterface
}

func NewDirectoryLookupClient(cc grpc.ClientConnInterface) DirectoryLookupClient {
	return &directoryLookupClient{cc}
}

func (c *directoryLookupClient) GetHostnameForHWID(ctx context.Context, in *GetHostnameForHWIDRequest, opts ...grpc.CallOption) (*GetHostnameForHWIDResponse, error) {
	out := new(GetHostnameForHWIDResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.DirectoryLookup/GetHostnameForHWID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryLookupClient) MapHWIDsToHostnames(ctx context.Context, in *MapHWIDToHostnameRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.DirectoryLookup/MapHWIDsToHostnames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryLookupClient) GetIMSIForSessionID(ctx context.Context, in *GetIMSIForSessionIDRequest, opts ...grpc.CallOption) (*GetIMSIForSessionIDResponse, error) {
	out := new(GetIMSIForSessionIDResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.DirectoryLookup/GetIMSIForSessionID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryLookupClient) MapSessionIDsToIMSIs(ctx context.Context, in *MapSessionIDToIMSIRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.DirectoryLookup/MapSessionIDsToIMSIs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryLookupClient) GetHWIDForSgwCTeid(ctx context.Context, in *GetHWIDForSgwCTeidRequest, opts ...grpc.CallOption) (*GetHWIDForSgwCTeidResponse, error) {
	out := new(GetHWIDForSgwCTeidResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.DirectoryLookup/GetHWIDForSgwCTeid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryLookupClient) MapSgwCTeidToHWID(ctx context.Context, in *MapSgwCTeidToHWIDRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.DirectoryLookup/MapSgwCTeidToHWID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirectoryLookupServer is the server API for DirectoryLookup service.
type DirectoryLookupServer interface {
	// GetHostnameForHWID returns the hostname mapped to by hardware ID.
	GetHostnameForHWID(context.Context, *GetHostnameForHWIDRequest) (*GetHostnameForHWIDResponse, error)
	// MapHWIDsToHostnames maps {hwid -> hostname}.
	MapHWIDsToHostnames(context.Context, *MapHWIDToHostnameRequest) (*Void, error)
	// GetIMSIForSessionID returns the IMSI mapped to by session ID.
	GetIMSIForSessionID(context.Context, *GetIMSIForSessionIDRequest) (*GetIMSIForSessionIDResponse, error)
	// MapSessionIDsToIMSIs maps {session ID -> IMSI}.
	MapSessionIDsToIMSIs(context.Context, *MapSessionIDToIMSIRequest) (*Void, error)
	// GetHWIDForSgwCTeid returns the HwId mapped to by sgw control plane Sgw Teid
	GetHWIDForSgwCTeid(context.Context, *GetHWIDForSgwCTeidRequest) (*GetHWIDForSgwCTeidResponse, error)
	// MapSgwCTeidToHWID maps {teid -> HwId}.
	MapSgwCTeidToHWID(context.Context, *MapSgwCTeidToHWIDRequest) (*Void, error)
}

// UnimplementedDirectoryLookupServer can be embedded to have forward compatible implementations.
type UnimplementedDirectoryLookupServer struct {
}

func (*UnimplementedDirectoryLookupServer) GetHostnameForHWID(ctx context.Context, req *GetHostnameForHWIDRequest) (*GetHostnameForHWIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostnameForHWID not implemented")
}
func (*UnimplementedDirectoryLookupServer) MapHWIDsToHostnames(ctx context.Context, req *MapHWIDToHostnameRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapHWIDsToHostnames not implemented")
}
func (*UnimplementedDirectoryLookupServer) GetIMSIForSessionID(ctx context.Context, req *GetIMSIForSessionIDRequest) (*GetIMSIForSessionIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIMSIForSessionID not implemented")
}
func (*UnimplementedDirectoryLookupServer) MapSessionIDsToIMSIs(ctx context.Context, req *MapSessionIDToIMSIRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapSessionIDsToIMSIs not implemented")
}
func (*UnimplementedDirectoryLookupServer) GetHWIDForSgwCTeid(ctx context.Context, req *GetHWIDForSgwCTeidRequest) (*GetHWIDForSgwCTeidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHWIDForSgwCTeid not implemented")
}
func (*UnimplementedDirectoryLookupServer) MapSgwCTeidToHWID(ctx context.Context, req *MapSgwCTeidToHWIDRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapSgwCTeidToHWID not implemented")
}

func RegisterDirectoryLookupServer(s *grpc.Server, srv DirectoryLookupServer) {
	s.RegisterService(&_DirectoryLookup_serviceDesc, srv)
}

func _DirectoryLookup_GetHostnameForHWID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostnameForHWIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryLookupServer).GetHostnameForHWID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.DirectoryLookup/GetHostnameForHWID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryLookupServer).GetHostnameForHWID(ctx, req.(*GetHostnameForHWIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryLookup_MapHWIDsToHostnames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapHWIDToHostnameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryLookupServer).MapHWIDsToHostnames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.DirectoryLookup/MapHWIDsToHostnames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryLookupServer).MapHWIDsToHostnames(ctx, req.(*MapHWIDToHostnameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryLookup_GetIMSIForSessionID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIMSIForSessionIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryLookupServer).GetIMSIForSessionID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.DirectoryLookup/GetIMSIForSessionID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryLookupServer).GetIMSIForSessionID(ctx, req.(*GetIMSIForSessionIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryLookup_MapSessionIDsToIMSIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapSessionIDToIMSIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryLookupServer).MapSessionIDsToIMSIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.DirectoryLookup/MapSessionIDsToIMSIs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryLookupServer).MapSessionIDsToIMSIs(ctx, req.(*MapSessionIDToIMSIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryLookup_GetHWIDForSgwCTeid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHWIDForSgwCTeidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryLookupServer).GetHWIDForSgwCTeid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.DirectoryLookup/GetHWIDForSgwCTeid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryLookupServer).GetHWIDForSgwCTeid(ctx, req.(*GetHWIDForSgwCTeidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryLookup_MapSgwCTeidToHWID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapSgwCTeidToHWIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryLookupServer).MapSgwCTeidToHWID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.DirectoryLookup/MapSgwCTeidToHWID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryLookupServer).MapSgwCTeidToHWID(ctx, req.(*MapSgwCTeidToHWIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DirectoryLookup_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.DirectoryLookup",
	HandlerType: (*DirectoryLookupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHostnameForHWID",
			Handler:    _DirectoryLookup_GetHostnameForHWID_Handler,
		},
		{
			MethodName: "MapHWIDsToHostnames",
			Handler:    _DirectoryLookup_MapHWIDsToHostnames_Handler,
		},
		{
			MethodName: "GetIMSIForSessionID",
			Handler:    _DirectoryLookup_GetIMSIForSessionID_Handler,
		},
		{
			MethodName: "MapSessionIDsToIMSIs",
			Handler:    _DirectoryLookup_MapSessionIDsToIMSIs_Handler,
		},
		{
			MethodName: "GetHWIDForSgwCTeid",
			Handler:    _DirectoryLookup_GetHWIDForSgwCTeid_Handler,
		},
		{
			MethodName: "MapSgwCTeidToHWID",
			Handler:    _DirectoryLookup_MapSgwCTeidToHWID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orc8r/protos/directoryd.proto",
}

// GatewayDirectoryServiceClient is the client API for GatewayDirectoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GatewayDirectoryServiceClient interface {
	// Update the directory record of an object in the directory service
	UpdateRecord(ctx context.Context, in *UpdateRecordRequest, opts ...grpc.CallOption) (*Void, error)
	// Delete directory record of an object from the directory service
	// Throws UNKNOWN if object ID does not exist
	DeleteRecord(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*Void, error)
	// Get directory field for a given id and key
	GetDirectoryField(ctx context.Context, in *GetDirectoryFieldRequest, opts ...grpc.CallOption) (*DirectoryField, error)
	// Get all directory records
	GetAllDirectoryRecords(ctx context.Context, in *Void, opts ...grpc.CallOption) (*AllDirectoryRecords, error)
}

type gatewayDirectoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayDirectoryServiceClient(cc grpc.ClientConnInterface) GatewayDirectoryServiceClient {
	return &gatewayDirectoryServiceClient{cc}
}

func (c *gatewayDirectoryServiceClient) UpdateRecord(ctx context.Context, in *UpdateRecordRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.GatewayDirectoryService/UpdateRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDirectoryServiceClient) DeleteRecord(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.GatewayDirectoryService/DeleteRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDirectoryServiceClient) GetDirectoryField(ctx context.Context, in *GetDirectoryFieldRequest, opts ...grpc.CallOption) (*DirectoryField, error) {
	out := new(DirectoryField)
	err := c.cc.Invoke(ctx, "/magma.orc8r.GatewayDirectoryService/GetDirectoryField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDirectoryServiceClient) GetAllDirectoryRecords(ctx context.Context, in *Void, opts ...grpc.CallOption) (*AllDirectoryRecords, error) {
	out := new(AllDirectoryRecords)
	err := c.cc.Invoke(ctx, "/magma.orc8r.GatewayDirectoryService/GetAllDirectoryRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayDirectoryServiceServer is the server API for GatewayDirectoryService service.
type GatewayDirectoryServiceServer interface {
	// Update the directory record of an object in the directory service
	UpdateRecord(context.Context, *UpdateRecordRequest) (*Void, error)
	// Delete directory record of an object from the directory service
	// Throws UNKNOWN if object ID does not exist
	DeleteRecord(context.Context, *DeleteRecordRequest) (*Void, error)
	// Get directory field for a given id and key
	GetDirectoryField(context.Context, *GetDirectoryFieldRequest) (*DirectoryField, error)
	// Get all directory records
	GetAllDirectoryRecords(context.Context, *Void) (*AllDirectoryRecords, error)
}

// UnimplementedGatewayDirectoryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGatewayDirectoryServiceServer struct {
}

func (*UnimplementedGatewayDirectoryServiceServer) UpdateRecord(ctx context.Context, req *UpdateRecordRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecord not implemented")
}
func (*UnimplementedGatewayDirectoryServiceServer) DeleteRecord(ctx context.Context, req *DeleteRecordRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecord not implemented")
}
func (*UnimplementedGatewayDirectoryServiceServer) GetDirectoryField(ctx context.Context, req *GetDirectoryFieldRequest) (*DirectoryField, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDirectoryField not implemented")
}
func (*UnimplementedGatewayDirectoryServiceServer) GetAllDirectoryRecords(ctx context.Context, req *Void) (*AllDirectoryRecords, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDirectoryRecords not implemented")
}

func RegisterGatewayDirectoryServiceServer(s *grpc.Server, srv GatewayDirectoryServiceServer) {
	s.RegisterService(&_GatewayDirectoryService_serviceDesc, srv)
}

func _GatewayDirectoryService_UpdateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDirectoryServiceServer).UpdateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.GatewayDirectoryService/UpdateRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDirectoryServiceServer).UpdateRecord(ctx, req.(*UpdateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDirectoryService_DeleteRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDirectoryServiceServer).DeleteRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.GatewayDirectoryService/DeleteRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDirectoryServiceServer).DeleteRecord(ctx, req.(*DeleteRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDirectoryService_GetDirectoryField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDirectoryFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDirectoryServiceServer).GetDirectoryField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.GatewayDirectoryService/GetDirectoryField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDirectoryServiceServer).GetDirectoryField(ctx, req.(*GetDirectoryFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDirectoryService_GetAllDirectoryRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDirectoryServiceServer).GetAllDirectoryRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.GatewayDirectoryService/GetAllDirectoryRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDirectoryServiceServer).GetAllDirectoryRecords(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _GatewayDirectoryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.GatewayDirectoryService",
	HandlerType: (*GatewayDirectoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateRecord",
			Handler:    _GatewayDirectoryService_UpdateRecord_Handler,
		},
		{
			MethodName: "DeleteRecord",
			Handler:    _GatewayDirectoryService_DeleteRecord_Handler,
		},
		{
			MethodName: "GetDirectoryField",
			Handler:    _GatewayDirectoryService_GetDirectoryField_Handler,
		},
		{
			MethodName: "GetAllDirectoryRecords",
			Handler:    _GatewayDirectoryService_GetAllDirectoryRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orc8r/protos/directoryd.proto",
}
