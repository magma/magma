// Code generated by protoc-gen-go. DO NOT EDIT.
// source: orc8r/protos/digest.proto

package protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// DigestTree contains the full set of digest information for a particular network.
// DigestTree is similar to a depth=2 Merkle tree.
type DigestTree struct {
	// root_digest is the amalgum of all leaf digests.
	RootDigest *Digest `protobuf:"bytes,1,opt,name=root_digest,json=rootDigest,proto3" json:"root_digest,omitempty"`
	// leaf_digests contains per-object digests, along with the object IDs, sorted by ID.
	LeafDigests          []*LeafDigest `protobuf:"bytes,2,rep,name=leaf_digests,json=leafDigests,proto3" json:"leaf_digests,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DigestTree) Reset()         { *m = DigestTree{} }
func (m *DigestTree) String() string { return proto.CompactTextString(m) }
func (*DigestTree) ProtoMessage()    {}
func (*DigestTree) Descriptor() ([]byte, []int) {
	return fileDescriptor_01bfdb0cdb6f10f9, []int{0}
}

func (m *DigestTree) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DigestTree.Unmarshal(m, b)
}
func (m *DigestTree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DigestTree.Marshal(b, m, deterministic)
}
func (m *DigestTree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DigestTree.Merge(m, src)
}
func (m *DigestTree) XXX_Size() int {
	return xxx_messageInfo_DigestTree.Size(m)
}
func (m *DigestTree) XXX_DiscardUnknown() {
	xxx_messageInfo_DigestTree.DiscardUnknown(m)
}

var xxx_messageInfo_DigestTree proto.InternalMessageInfo

func (m *DigestTree) GetRootDigest() *Digest {
	if m != nil {
		return m.RootDigest
	}
	return nil
}

func (m *DigestTree) GetLeafDigests() []*LeafDigest {
	if m != nil {
		return m.LeafDigests
	}
	return nil
}

// Digest contains the digest (hash) of some object.
type Digest struct {
	// md5_base64_digest is a base64-encoded MD5 digest.
	Md5Base64Digest      string   `protobuf:"bytes,1,opt,name=md5_base64_digest,json=md5Base64Digest,proto3" json:"md5_base64_digest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Digest) Reset()         { *m = Digest{} }
func (m *Digest) String() string { return proto.CompactTextString(m) }
func (*Digest) ProtoMessage()    {}
func (*Digest) Descriptor() ([]byte, []int) {
	return fileDescriptor_01bfdb0cdb6f10f9, []int{1}
}

func (m *Digest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Digest.Unmarshal(m, b)
}
func (m *Digest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Digest.Marshal(b, m, deterministic)
}
func (m *Digest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Digest.Merge(m, src)
}
func (m *Digest) XXX_Size() int {
	return xxx_messageInfo_Digest.Size(m)
}
func (m *Digest) XXX_DiscardUnknown() {
	xxx_messageInfo_Digest.DiscardUnknown(m)
}

var xxx_messageInfo_Digest proto.InternalMessageInfo

func (m *Digest) GetMd5Base64Digest() string {
	if m != nil {
		return m.Md5Base64Digest
	}
	return ""
}

type LeafDigest struct {
	// id is the network-wide unique identifier of the object.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// digest is the deterministic digest of the object.
	Digest               *Digest  `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LeafDigest) Reset()         { *m = LeafDigest{} }
func (m *LeafDigest) String() string { return proto.CompactTextString(m) }
func (*LeafDigest) ProtoMessage()    {}
func (*LeafDigest) Descriptor() ([]byte, []int) {
	return fileDescriptor_01bfdb0cdb6f10f9, []int{2}
}

func (m *LeafDigest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeafDigest.Unmarshal(m, b)
}
func (m *LeafDigest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeafDigest.Marshal(b, m, deterministic)
}
func (m *LeafDigest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeafDigest.Merge(m, src)
}
func (m *LeafDigest) XXX_Size() int {
	return xxx_messageInfo_LeafDigest.Size(m)
}
func (m *LeafDigest) XXX_DiscardUnknown() {
	xxx_messageInfo_LeafDigest.DiscardUnknown(m)
}

var xxx_messageInfo_LeafDigest proto.InternalMessageInfo

func (m *LeafDigest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *LeafDigest) GetDigest() *Digest {
	if m != nil {
		return m.Digest
	}
	return nil
}

// LeafDigests is used to encapsulate a list of leaf digests exclusively for
// serialization en masse.
// NOTE: In a proto message used by gRPC endpoints (e.g. DigestTree), the leaf
// digests should still be represented directly as a list for simplicity.
type LeafDigests struct {
	Digests              []*LeafDigest `protobuf:"bytes,1,rep,name=digests,proto3" json:"digests,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *LeafDigests) Reset()         { *m = LeafDigests{} }
func (m *LeafDigests) String() string { return proto.CompactTextString(m) }
func (*LeafDigests) ProtoMessage()    {}
func (*LeafDigests) Descriptor() ([]byte, []int) {
	return fileDescriptor_01bfdb0cdb6f10f9, []int{3}
}

func (m *LeafDigests) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeafDigests.Unmarshal(m, b)
}
func (m *LeafDigests) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeafDigests.Marshal(b, m, deterministic)
}
func (m *LeafDigests) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeafDigests.Merge(m, src)
}
func (m *LeafDigests) XXX_Size() int {
	return xxx_messageInfo_LeafDigests.Size(m)
}
func (m *LeafDigests) XXX_DiscardUnknown() {
	xxx_messageInfo_LeafDigests.DiscardUnknown(m)
}

var xxx_messageInfo_LeafDigests proto.InternalMessageInfo

func (m *LeafDigests) GetDigests() []*LeafDigest {
	if m != nil {
		return m.Digests
	}
	return nil
}

// Changeset contains the set of differences between two lists of objects.
type Changeset struct {
	// to_renew contains all objects which were added or updated, sorted by ID.
	ToRenew []*any.Any `protobuf:"bytes,1,rep,name=to_renew,json=toRenew,proto3" json:"to_renew,omitempty"`
	// deleted lists the IDs for all objects which were deleted.
	Deleted              []string `protobuf:"bytes,2,rep,name=deleted,proto3" json:"deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Changeset) Reset()         { *m = Changeset{} }
func (m *Changeset) String() string { return proto.CompactTextString(m) }
func (*Changeset) ProtoMessage()    {}
func (*Changeset) Descriptor() ([]byte, []int) {
	return fileDescriptor_01bfdb0cdb6f10f9, []int{4}
}

func (m *Changeset) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Changeset.Unmarshal(m, b)
}
func (m *Changeset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Changeset.Marshal(b, m, deterministic)
}
func (m *Changeset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Changeset.Merge(m, src)
}
func (m *Changeset) XXX_Size() int {
	return xxx_messageInfo_Changeset.Size(m)
}
func (m *Changeset) XXX_DiscardUnknown() {
	xxx_messageInfo_Changeset.DiscardUnknown(m)
}

var xxx_messageInfo_Changeset proto.InternalMessageInfo

func (m *Changeset) GetToRenew() []*any.Any {
	if m != nil {
		return m.ToRenew
	}
	return nil
}

func (m *Changeset) GetDeleted() []string {
	if m != nil {
		return m.Deleted
	}
	return nil
}

func init() {
	proto.RegisterType((*DigestTree)(nil), "magma.orc8r.DigestTree")
	proto.RegisterType((*Digest)(nil), "magma.orc8r.Digest")
	proto.RegisterType((*LeafDigest)(nil), "magma.orc8r.LeafDigest")
	proto.RegisterType((*LeafDigests)(nil), "magma.orc8r.LeafDigests")
	proto.RegisterType((*Changeset)(nil), "magma.orc8r.Changeset")
}

func init() { proto.RegisterFile("orc8r/protos/digest.proto", fileDescriptor_01bfdb0cdb6f10f9) }

var fileDescriptor_01bfdb0cdb6f10f9 = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x41, 0x4b, 0x03, 0x31,
	0x10, 0x85, 0xe9, 0x0a, 0xad, 0x9d, 0x88, 0x62, 0x14, 0x6c, 0xf5, 0x52, 0xf6, 0x54, 0x14, 0x12,
	0xac, 0xad, 0x88, 0x27, 0xad, 0x5e, 0x04, 0x4f, 0x8b, 0x78, 0xf0, 0x52, 0xb2, 0x66, 0x36, 0x2e,
	0xec, 0x6e, 0x24, 0x89, 0x48, 0x2f, 0xfe, 0x76, 0x69, 0x92, 0xb5, 0xf5, 0xa0, 0xa7, 0xcc, 0x84,
	0xef, 0xbd, 0x64, 0xde, 0xc0, 0x50, 0x9b, 0xd7, 0x2b, 0xc3, 0xdf, 0x8d, 0x76, 0xda, 0x72, 0x59,
	0x2a, 0xb4, 0x8e, 0xf9, 0x8e, 0x92, 0x5a, 0xa8, 0x5a, 0x30, 0x0f, 0x1c, 0x0f, 0x95, 0xd6, 0xaa,
	0xc2, 0x00, 0xe6, 0x1f, 0x05, 0x17, 0xcd, 0x32, 0x70, 0xe9, 0x17, 0xc0, 0xbd, 0xd7, 0x3d, 0x19,
	0x44, 0x3a, 0x05, 0x62, 0xb4, 0x76, 0x8b, 0x60, 0x35, 0xe8, 0x8c, 0x3a, 0x63, 0x32, 0x39, 0x60,
	0x1b, 0x5e, 0x2c, 0xd0, 0x19, 0xac, 0xb8, 0x50, 0xd3, 0x6b, 0xd8, 0xa9, 0x50, 0x14, 0x51, 0x65,
	0x07, 0xc9, 0x68, 0x6b, 0x4c, 0x26, 0x47, 0xbf, 0x64, 0x8f, 0x28, 0x8a, 0x28, 0x25, 0xd5, 0x4f,
	0x6d, 0xd3, 0x29, 0x74, 0xa3, 0xcb, 0x29, 0xec, 0xd7, 0x72, 0xb6, 0xc8, 0x85, 0xc5, 0xcb, 0xe9,
	0xe6, 0x0f, 0xfa, 0xd9, 0x5e, 0x2d, 0x67, 0x73, 0x7f, 0x1f, 0xd8, 0xf4, 0x01, 0x60, 0x6d, 0x48,
	0x77, 0x21, 0x29, 0x65, 0x44, 0x93, 0x52, 0xd2, 0x33, 0xe8, 0x46, 0x79, 0xf2, 0xf7, 0x00, 0x11,
	0x49, 0x6f, 0x80, 0xac, 0xad, 0x2c, 0x3d, 0x87, 0x5e, 0x3b, 0x46, 0xe7, 0xff, 0x31, 0x5a, 0x2e,
	0x7d, 0x86, 0xfe, 0xdd, 0x9b, 0x68, 0x14, 0x5a, 0x74, 0x94, 0xc3, 0xb6, 0xd3, 0x0b, 0x83, 0x0d,
	0x7e, 0x46, 0x83, 0x43, 0x16, 0xd2, 0x67, 0x6d, 0xfa, 0xec, 0xb6, 0x59, 0x66, 0x3d, 0xa7, 0xb3,
	0x15, 0x44, 0x07, 0xd0, 0x93, 0x58, 0xa1, 0x43, 0xe9, 0x73, 0xeb, 0x67, 0x6d, 0x3b, 0x3f, 0x79,
	0x19, 0xfa, 0xa7, 0x79, 0xd8, 0x72, 0x55, 0xe6, 0x5c, 0xe9, 0xb8, 0xec, 0xbc, 0xeb, 0xcf, 0x8b,
	0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd4, 0xfb, 0x6e, 0xdf, 0x03, 0x02, 0x00, 0x00,
}
