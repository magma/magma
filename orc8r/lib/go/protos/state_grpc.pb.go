// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.10.0
// source: orc8r/protos/state.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CloudStateServiceClient is the client API for CloudStateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudStateServiceClient interface {
	// GetStates retrieves states from blobstorage.
	GetStates(ctx context.Context, in *GetStatesRequest, opts ...grpc.CallOption) (*GetStatesResponse, error)
}

type cloudStateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudStateServiceClient(cc grpc.ClientConnInterface) CloudStateServiceClient {
	return &cloudStateServiceClient{cc}
}

func (c *cloudStateServiceClient) GetStates(ctx context.Context, in *GetStatesRequest, opts ...grpc.CallOption) (*GetStatesResponse, error) {
	out := new(GetStatesResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.CloudStateService/GetStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudStateServiceServer is the server API for CloudStateService service.
// All implementations must embed UnimplementedCloudStateServiceServer
// for forward compatibility
type CloudStateServiceServer interface {
	// GetStates retrieves states from blobstorage.
	GetStates(context.Context, *GetStatesRequest) (*GetStatesResponse, error)
	mustEmbedUnimplementedCloudStateServiceServer()
}

// UnimplementedCloudStateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCloudStateServiceServer struct {
}

func (UnimplementedCloudStateServiceServer) GetStates(context.Context, *GetStatesRequest) (*GetStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStates not implemented")
}
func (UnimplementedCloudStateServiceServer) mustEmbedUnimplementedCloudStateServiceServer() {}

// UnsafeCloudStateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudStateServiceServer will
// result in compilation errors.
type UnsafeCloudStateServiceServer interface {
	mustEmbedUnimplementedCloudStateServiceServer()
}

func RegisterCloudStateServiceServer(s grpc.ServiceRegistrar, srv CloudStateServiceServer) {
	s.RegisterService(&CloudStateService_ServiceDesc, srv)
}

func _CloudStateService_GetStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudStateServiceServer).GetStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.CloudStateService/GetStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudStateServiceServer).GetStates(ctx, req.(*GetStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudStateService_ServiceDesc is the grpc.ServiceDesc for CloudStateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudStateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.CloudStateService",
	HandlerType: (*CloudStateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStates",
			Handler:    _CloudStateService_GetStates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orc8r/protos/state.proto",
}

// StateServiceClient is the client API for StateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StateServiceClient interface {
	// ReportStates saves states into blobstorage.
	ReportStates(ctx context.Context, in *ReportStatesRequest, opts ...grpc.CallOption) (*ReportStatesResponse, error)
	// DeleteStates deletes states from blobstorage.
	DeleteStates(ctx context.Context, in *DeleteStatesRequest, opts ...grpc.CallOption) (*Void, error)
	// SyncStates retrieves states from blobstorage, compares their versions
	// to the states included in the request, and returns the IDAndVersions
	// that differ.
	SyncStates(ctx context.Context, in *SyncStatesRequest, opts ...grpc.CallOption) (*SyncStatesResponse, error)
}

type stateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStateServiceClient(cc grpc.ClientConnInterface) StateServiceClient {
	return &stateServiceClient{cc}
}

func (c *stateServiceClient) ReportStates(ctx context.Context, in *ReportStatesRequest, opts ...grpc.CallOption) (*ReportStatesResponse, error) {
	out := new(ReportStatesResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.StateService/ReportStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) DeleteStates(ctx context.Context, in *DeleteStatesRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.StateService/DeleteStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) SyncStates(ctx context.Context, in *SyncStatesRequest, opts ...grpc.CallOption) (*SyncStatesResponse, error) {
	out := new(SyncStatesResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.StateService/SyncStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StateServiceServer is the server API for StateService service.
// All implementations must embed UnimplementedStateServiceServer
// for forward compatibility
type StateServiceServer interface {
	// ReportStates saves states into blobstorage.
	ReportStates(context.Context, *ReportStatesRequest) (*ReportStatesResponse, error)
	// DeleteStates deletes states from blobstorage.
	DeleteStates(context.Context, *DeleteStatesRequest) (*Void, error)
	// SyncStates retrieves states from blobstorage, compares their versions
	// to the states included in the request, and returns the IDAndVersions
	// that differ.
	SyncStates(context.Context, *SyncStatesRequest) (*SyncStatesResponse, error)
	mustEmbedUnimplementedStateServiceServer()
}

// UnimplementedStateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStateServiceServer struct {
}

func (UnimplementedStateServiceServer) ReportStates(context.Context, *ReportStatesRequest) (*ReportStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportStates not implemented")
}
func (UnimplementedStateServiceServer) DeleteStates(context.Context, *DeleteStatesRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStates not implemented")
}
func (UnimplementedStateServiceServer) SyncStates(context.Context, *SyncStatesRequest) (*SyncStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncStates not implemented")
}
func (UnimplementedStateServiceServer) mustEmbedUnimplementedStateServiceServer() {}

// UnsafeStateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StateServiceServer will
// result in compilation errors.
type UnsafeStateServiceServer interface {
	mustEmbedUnimplementedStateServiceServer()
}

func RegisterStateServiceServer(s grpc.ServiceRegistrar, srv StateServiceServer) {
	s.RegisterService(&StateService_ServiceDesc, srv)
}

func _StateService_ReportStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).ReportStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.StateService/ReportStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).ReportStates(ctx, req.(*ReportStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_DeleteStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).DeleteStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.StateService/DeleteStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).DeleteStates(ctx, req.(*DeleteStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_SyncStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).SyncStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.StateService/SyncStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).SyncStates(ctx, req.(*SyncStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StateService_ServiceDesc is the grpc.ServiceDesc for StateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.StateService",
	HandlerType: (*StateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportStates",
			Handler:    _StateService_ReportStates_Handler,
		},
		{
			MethodName: "DeleteStates",
			Handler:    _StateService_DeleteStates_Handler,
		},
		{
			MethodName: "SyncStates",
			Handler:    _StateService_SyncStates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orc8r/protos/state.proto",
}
