//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.10.0
// source: orc8r/protos/magmad.proto

package protos

import (
	_struct "github.com/golang/protobuf/ptypes/struct"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CheckStatelessResponse_AGWMode int32

const (
	CheckStatelessResponse_INVALID   CheckStatelessResponse_AGWMode = 0
	CheckStatelessResponse_STATELESS CheckStatelessResponse_AGWMode = 1
	CheckStatelessResponse_STATEFUL  CheckStatelessResponse_AGWMode = 2
	CheckStatelessResponse_CORRUPT   CheckStatelessResponse_AGWMode = 3
)

// Enum value maps for CheckStatelessResponse_AGWMode.
var (
	CheckStatelessResponse_AGWMode_name = map[int32]string{
		0: "INVALID",
		1: "STATELESS",
		2: "STATEFUL",
		3: "CORRUPT",
	}
	CheckStatelessResponse_AGWMode_value = map[string]int32{
		"INVALID":   0,
		"STATELESS": 1,
		"STATEFUL":  2,
		"CORRUPT":   3,
	}
)

func (x CheckStatelessResponse_AGWMode) Enum() *CheckStatelessResponse_AGWMode {
	p := new(CheckStatelessResponse_AGWMode)
	*p = x
	return p
}

func (x CheckStatelessResponse_AGWMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckStatelessResponse_AGWMode) Descriptor() protoreflect.EnumDescriptor {
	return file_orc8r_protos_magmad_proto_enumTypes[0].Descriptor()
}

func (CheckStatelessResponse_AGWMode) Type() protoreflect.EnumType {
	return &file_orc8r_protos_magmad_proto_enumTypes[0]
}

func (x CheckStatelessResponse_AGWMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckStatelessResponse_AGWMode.Descriptor instead.
func (CheckStatelessResponse_AGWMode) EnumDescriptor() ([]byte, []int) {
	return file_orc8r_protos_magmad_proto_rawDescGZIP(), []int{14, 0}
}

type ConfigureStatelessRequest_Cmd int32

const (
	ConfigureStatelessRequest_CHECK   ConfigureStatelessRequest_Cmd = 0
	ConfigureStatelessRequest_DISABLE ConfigureStatelessRequest_Cmd = 1
	ConfigureStatelessRequest_ENABLE  ConfigureStatelessRequest_Cmd = 2
)

// Enum value maps for ConfigureStatelessRequest_Cmd.
var (
	ConfigureStatelessRequest_Cmd_name = map[int32]string{
		0: "CHECK",
		1: "DISABLE",
		2: "ENABLE",
	}
	ConfigureStatelessRequest_Cmd_value = map[string]int32{
		"CHECK":   0,
		"DISABLE": 1,
		"ENABLE":  2,
	}
)

func (x ConfigureStatelessRequest_Cmd) Enum() *ConfigureStatelessRequest_Cmd {
	p := new(ConfigureStatelessRequest_Cmd)
	*p = x
	return p
}

func (x ConfigureStatelessRequest_Cmd) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigureStatelessRequest_Cmd) Descriptor() protoreflect.EnumDescriptor {
	return file_orc8r_protos_magmad_proto_enumTypes[1].Descriptor()
}

func (ConfigureStatelessRequest_Cmd) Type() protoreflect.EnumType {
	return &file_orc8r_protos_magmad_proto_enumTypes[1]
}

func (x ConfigureStatelessRequest_Cmd) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigureStatelessRequest_Cmd.Descriptor instead.
func (ConfigureStatelessRequest_Cmd) EnumDescriptor() ([]byte, []int) {
	return file_orc8r_protos_magmad_proto_rawDescGZIP(), []int{15, 0}
}

type PingParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostOrIp   string `protobuf:"bytes,1,opt,name=host_or_ip,json=hostOrIp,proto3" json:"host_or_ip,omitempty"`
	NumPackets int32  `protobuf:"varint,2,opt,name=num_packets,json=numPackets,proto3" json:"num_packets,omitempty"`
}

func (x *PingParams) Reset() {
	*x = PingParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_magmad_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingParams) ProtoMessage() {}

func (x *PingParams) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_magmad_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingParams.ProtoReflect.Descriptor instead.
func (*PingParams) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_magmad_proto_rawDescGZIP(), []int{0}
}

func (x *PingParams) GetHostOrIp() string {
	if x != nil {
		return x.HostOrIp
	}
	return ""
}

func (x *PingParams) GetNumPackets() int32 {
	if x != nil {
		return x.NumPackets
	}
	return 0
}

type TracerouteParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostOrIp       string `protobuf:"bytes,1,opt,name=host_or_ip,json=hostOrIp,proto3" json:"host_or_ip,omitempty"`
	MaxHops        int32  `protobuf:"varint,2,opt,name=max_hops,json=maxHops,proto3" json:"max_hops,omitempty"`
	BytesPerPacket int32  `protobuf:"varint,3,opt,name=bytes_per_packet,json=bytesPerPacket,proto3" json:"bytes_per_packet,omitempty"`
}

func (x *TracerouteParams) Reset() {
	*x = TracerouteParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_magmad_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracerouteParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracerouteParams) ProtoMessage() {}

func (x *TracerouteParams) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_magmad_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracerouteParams.ProtoReflect.Descriptor instead.
func (*TracerouteParams) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_magmad_proto_rawDescGZIP(), []int{1}
}

func (x *TracerouteParams) GetHostOrIp() string {
	if x != nil {
		return x.HostOrIp
	}
	return ""
}

func (x *TracerouteParams) GetMaxHops() int32 {
	if x != nil {
		return x.MaxHops
	}
	return 0
}

func (x *TracerouteParams) GetBytesPerPacket() int32 {
	if x != nil {
		return x.BytesPerPacket
	}
	return 0
}

type NetworkTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pings       []*PingParams       `protobuf:"bytes,1,rep,name=pings,proto3" json:"pings,omitempty"`
	Traceroutes []*TracerouteParams `protobuf:"bytes,2,rep,name=traceroutes,proto3" json:"traceroutes,omitempty"`
}

func (x *NetworkTestRequest) Reset() {
	*x = NetworkTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_magmad_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkTestRequest) ProtoMessage() {}

func (x *NetworkTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_magmad_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkTestRequest.ProtoReflect.Descriptor instead.
func (*NetworkTestRequest) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_magmad_proto_rawDescGZIP(), []int{2}
}

func (x *NetworkTestRequest) GetPings() []*PingParams {
	if x != nil {
		return x.Pings
	}
	return nil
}

func (x *NetworkTestRequest) GetTraceroutes() []*TracerouteParams {
	if x != nil {
		return x.Traceroutes
	}
	return nil
}

type PingResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostOrIp           string  `protobuf:"bytes,1,opt,name=host_or_ip,json=hostOrIp,proto3" json:"host_or_ip,omitempty"`
	NumPackets         int32   `protobuf:"varint,2,opt,name=num_packets,json=numPackets,proto3" json:"num_packets,omitempty"`
	Error              string  `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	PacketsTransmitted int32   `protobuf:"varint,4,opt,name=packets_transmitted,json=packetsTransmitted,proto3" json:"packets_transmitted,omitempty"`
	PacketsReceived    int32   `protobuf:"varint,5,opt,name=packets_received,json=packetsReceived,proto3" json:"packets_received,omitempty"`
	AvgResponseMs      float32 `protobuf:"fixed32,6,opt,name=avg_response_ms,json=avgResponseMs,proto3" json:"avg_response_ms,omitempty"`
}

func (x *PingResult) Reset() {
	*x = PingResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_magmad_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResult) ProtoMessage() {}

func (x *PingResult) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_magmad_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResult.ProtoReflect.Descriptor instead.
func (*PingResult) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_magmad_proto_rawDescGZIP(), []int{3}
}

func (x *PingResult) GetHostOrIp() string {
	if x != nil {
		return x.HostOrIp
	}
	return ""
}

func (x *PingResult) GetNumPackets() int32 {
	if x != nil {
		return x.NumPackets
	}
	return 0
}

func (x *PingResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *PingResult) GetPacketsTransmitted() int32 {
	if x != nil {
		return x.PacketsTransmitted
	}
	return 0
}

func (x *PingResult) GetPacketsReceived() int32 {
	if x != nil {
		return x.PacketsReceived
	}
	return 0
}

func (x *PingResult) GetAvgResponseMs() float32 {
	if x != nil {
		return x.AvgResponseMs
	}
	return 0
}

type TracerouteProbe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname string  `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Ip       string  `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	RttMs    float32 `protobuf:"fixed32,3,opt,name=rtt_ms,json=rttMs,proto3" json:"rtt_ms,omitempty"`
}

func (x *TracerouteProbe) Reset() {
	*x = TracerouteProbe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_magmad_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracerouteProbe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracerouteProbe) ProtoMessage() {}

func (x *TracerouteProbe) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_magmad_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracerouteProbe.ProtoReflect.Descriptor instead.
func (*TracerouteProbe) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_magmad_proto_rawDescGZIP(), []int{4}
}

func (x *TracerouteProbe) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *TracerouteProbe) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *TracerouteProbe) GetRttMs() float32 {
	if x != nil {
		return x.RttMs
	}
	return 0
}

type TracerouteHop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Idx    int32              `protobuf:"varint,1,opt,name=idx,proto3" json:"idx,omitempty"`
	Probes []*TracerouteProbe `protobuf:"bytes,2,rep,name=probes,proto3" json:"probes,omitempty"`
}

func (x *TracerouteHop) Reset() {
	*x = TracerouteHop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_magmad_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracerouteHop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracerouteHop) ProtoMessage() {}

func (x *TracerouteHop) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_magmad_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracerouteHop.ProtoReflect.Descriptor instead.
func (*TracerouteHop) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_magmad_proto_rawDescGZIP(), []int{5}
}

func (x *TracerouteHop) GetIdx() int32 {
	if x != nil {
		return x.Idx
	}
	return 0
}

func (x *TracerouteHop) GetProbes() []*TracerouteProbe {
	if x != nil {
		return x.Probes
	}
	return nil
}

type TracerouteResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error    string           `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	HostOrIp string           `protobuf:"bytes,2,opt,name=host_or_ip,json=hostOrIp,proto3" json:"host_or_ip,omitempty"`
	Hops     []*TracerouteHop `protobuf:"bytes,3,rep,name=hops,proto3" json:"hops,omitempty"`
}

func (x *TracerouteResult) Reset() {
	*x = TracerouteResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_magmad_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracerouteResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracerouteResult) ProtoMessage() {}

func (x *TracerouteResult) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_magmad_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracerouteResult.ProtoReflect.Descriptor instead.
func (*TracerouteResult) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_magmad_proto_rawDescGZIP(), []int{6}
}

func (x *TracerouteResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *TracerouteResult) GetHostOrIp() string {
	if x != nil {
		return x.HostOrIp
	}
	return ""
}

func (x *TracerouteResult) GetHops() []*TracerouteHop {
	if x != nil {
		return x.Hops
	}
	return nil
}

type NetworkTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pings       []*PingResult       `protobuf:"bytes,1,rep,name=pings,proto3" json:"pings,omitempty"`
	Traceroutes []*TracerouteResult `protobuf:"bytes,2,rep,name=traceroutes,proto3" json:"traceroutes,omitempty"`
}

func (x *NetworkTestResponse) Reset() {
	*x = NetworkTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_magmad_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkTestResponse) ProtoMessage() {}

func (x *NetworkTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_magmad_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkTestResponse.ProtoReflect.Descriptor instead.
func (*NetworkTestResponse) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_magmad_proto_rawDescGZIP(), []int{7}
}

func (x *NetworkTestResponse) GetPings() []*PingResult {
	if x != nil {
		return x.Pings
	}
	return nil
}

func (x *NetworkTestResponse) GetTraceroutes() []*TracerouteResult {
	if x != nil {
		return x.Traceroutes
	}
	return nil
}

type GetGatewayIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GatewayId string `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
}

func (x *GetGatewayIdResponse) Reset() {
	*x = GetGatewayIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_magmad_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGatewayIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGatewayIdResponse) ProtoMessage() {}

func (x *GetGatewayIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_magmad_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGatewayIdResponse.ProtoReflect.Descriptor instead.
func (*GetGatewayIdResponse) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_magmad_proto_rawDescGZIP(), []int{8}
}

func (x *GetGatewayIdResponse) GetGatewayId() string {
	if x != nil {
		return x.GatewayId
	}
	return ""
}

type RestartServicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services []string `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
}

func (x *RestartServicesRequest) Reset() {
	*x = RestartServicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_magmad_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartServicesRequest) ProtoMessage() {}

func (x *RestartServicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_magmad_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartServicesRequest.ProtoReflect.Descriptor instead.
func (*RestartServicesRequest) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_magmad_proto_rawDescGZIP(), []int{9}
}

func (x *RestartServicesRequest) GetServices() []string {
	if x != nil {
		return x.Services
	}
	return nil
}

type GenericCommandParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command string          `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Params  *_struct.Struct `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *GenericCommandParams) Reset() {
	*x = GenericCommandParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_magmad_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericCommandParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericCommandParams) ProtoMessage() {}

func (x *GenericCommandParams) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_magmad_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericCommandParams.ProtoReflect.Descriptor instead.
func (*GenericCommandParams) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_magmad_proto_rawDescGZIP(), []int{10}
}

func (x *GenericCommandParams) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *GenericCommandParams) GetParams() *_struct.Struct {
	if x != nil {
		return x.Params
	}
	return nil
}

type GenericCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *_struct.Struct `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *GenericCommandResponse) Reset() {
	*x = GenericCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_magmad_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericCommandResponse) ProtoMessage() {}

func (x *GenericCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_magmad_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericCommandResponse.ProtoReflect.Descriptor instead.
func (*GenericCommandResponse) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_magmad_proto_rawDescGZIP(), []int{11}
}

func (x *GenericCommandResponse) GetResponse() *_struct.Struct {
	if x != nil {
		return x.Response
	}
	return nil
}

type TailLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *TailLogsRequest) Reset() {
	*x = TailLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_magmad_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TailLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TailLogsRequest) ProtoMessage() {}

func (x *TailLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_magmad_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TailLogsRequest.ProtoReflect.Descriptor instead.
func (*TailLogsRequest) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_magmad_proto_rawDescGZIP(), []int{12}
}

func (x *TailLogsRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type LogLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line string `protobuf:"bytes,1,opt,name=line,proto3" json:"line,omitempty"`
}

func (x *LogLine) Reset() {
	*x = LogLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_magmad_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogLine) ProtoMessage() {}

func (x *LogLine) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_magmad_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogLine.ProtoReflect.Descriptor instead.
func (*LogLine) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_magmad_proto_rawDescGZIP(), []int{13}
}

func (x *LogLine) GetLine() string {
	if x != nil {
		return x.Line
	}
	return ""
}

type CheckStatelessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgwMode CheckStatelessResponse_AGWMode `protobuf:"varint,1,opt,name=agw_mode,json=agwMode,proto3,enum=magma.orc8r.CheckStatelessResponse_AGWMode" json:"agw_mode,omitempty"`
}

func (x *CheckStatelessResponse) Reset() {
	*x = CheckStatelessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_magmad_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckStatelessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckStatelessResponse) ProtoMessage() {}

func (x *CheckStatelessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_magmad_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckStatelessResponse.ProtoReflect.Descriptor instead.
func (*CheckStatelessResponse) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_magmad_proto_rawDescGZIP(), []int{14}
}

func (x *CheckStatelessResponse) GetAgwMode() CheckStatelessResponse_AGWMode {
	if x != nil {
		return x.AgwMode
	}
	return CheckStatelessResponse_INVALID
}

type ConfigureStatelessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigCmd ConfigureStatelessRequest_Cmd `protobuf:"varint,1,opt,name=config_cmd,json=configCmd,proto3,enum=magma.orc8r.ConfigureStatelessRequest_Cmd" json:"config_cmd,omitempty"`
}

func (x *ConfigureStatelessRequest) Reset() {
	*x = ConfigureStatelessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_magmad_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureStatelessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureStatelessRequest) ProtoMessage() {}

func (x *ConfigureStatelessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_magmad_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureStatelessRequest.ProtoReflect.Descriptor instead.
func (*ConfigureStatelessRequest) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_magmad_proto_rawDescGZIP(), []int{15}
}

func (x *ConfigureStatelessRequest) GetConfigCmd() ConfigureStatelessRequest_Cmd {
	if x != nil {
		return x.ConfigCmd
	}
	return ConfigureStatelessRequest_CHECK
}

var File_orc8r_protos_magmad_proto protoreflect.FileDescriptor

var file_orc8r_protos_magmad_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x1a, 0x19, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2f, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4b, 0x0a,
	0x0a, 0x50, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x4f, 0x72, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6e, 0x75, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0x75, 0x0a, 0x10, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c,
	0x0a, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4f, 0x72, 0x49, 0x70, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x61, 0x78, 0x5f, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x6d, 0x61, 0x78, 0x48, 0x6f, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x22, 0x84, 0x01, 0x0a, 0x12, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x05, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x22, 0xe5, 0x01, 0x0a, 0x0a, 0x50, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x6f, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x4f, 0x72, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x13,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x76, 0x67, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0d, 0x61, 0x76, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x73,
	0x22, 0x54, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x62, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12,
	0x15, 0x0a, 0x06, 0x72, 0x74, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x72, 0x74, 0x74, 0x4d, 0x73, 0x22, 0x57, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x48, 0x6f, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x69, 0x64, 0x78, 0x12, 0x34, 0x0a, 0x06, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x22,
	0x76, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x0a, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x4f, 0x72, 0x49, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x68, 0x6f, 0x70, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72,
	0x63, 0x38, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x48, 0x6f,
	0x70, 0x52, 0x04, 0x68, 0x6f, 0x70, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x13, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2d, 0x0a, 0x05, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x50, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3f,
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38,
	0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x22,
	0x35, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x61, 0x0a, 0x14,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2f,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22,
	0x4d, 0x0a, 0x16, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b,
	0x0a, 0x0f, 0x54, 0x61, 0x69, 0x6c, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x1d, 0x0a, 0x07, 0x4c,
	0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x16, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x61, 0x67, 0x77, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x47, 0x57,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x61, 0x67, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x40, 0x0a,
	0x07, 0x41, 0x47, 0x57, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45,
	0x53, 0x53, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x52, 0x52, 0x55, 0x50, 0x54, 0x10, 0x03, 0x22,
	0x91, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6c, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6d, 0x64, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6d, 0x64, 0x22, 0x29, 0x0a, 0x03, 0x43, 0x6d, 0x64, 0x12,
	0x09, 0x0a, 0x05, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x4e, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x02, 0x32, 0xd7, 0x06, 0x0a, 0x06, 0x4d, 0x61, 0x67, 0x6d, 0x61, 0x64, 0x12, 0x37,
	0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f,
	0x69, 0x64, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72,
	0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x70, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12,
	0x30, 0x0a, 0x06, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x11, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22,
	0x00, 0x12, 0x4b, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63,
	0x38, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x3e,
	0x0a, 0x0a, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x1b, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x3e,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x11, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a,
	0x1b, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x00, 0x12, 0x56,
	0x0a, 0x0f, 0x52, 0x75, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x65, 0x73, 0x74,
	0x73, 0x12, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f,
	0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x21, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a,
	0x0a, 0x0e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x21, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x1a, 0x23, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38,
	0x72, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x08, 0x54, 0x61,
	0x69, 0x6c, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f,
	0x72, 0x63, 0x38, 0x72, 0x2e, 0x54, 0x61, 0x69, 0x6c, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63,
	0x38, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4a,
	0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73,
	0x12, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56,
	0x6f, 0x69, 0x64, 0x1a, 0x23, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38,
	0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x12, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73,
	0x12, 0x26, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x42, 0x1b, 0x5a,
	0x19, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x6c, 0x69, 0x62,
	0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_orc8r_protos_magmad_proto_rawDescOnce sync.Once
	file_orc8r_protos_magmad_proto_rawDescData = file_orc8r_protos_magmad_proto_rawDesc
)

func file_orc8r_protos_magmad_proto_rawDescGZIP() []byte {
	file_orc8r_protos_magmad_proto_rawDescOnce.Do(func() {
		file_orc8r_protos_magmad_proto_rawDescData = protoimpl.X.CompressGZIP(file_orc8r_protos_magmad_proto_rawDescData)
	})
	return file_orc8r_protos_magmad_proto_rawDescData
}

var file_orc8r_protos_magmad_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_orc8r_protos_magmad_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_orc8r_protos_magmad_proto_goTypes = []interface{}{
	(CheckStatelessResponse_AGWMode)(0), // 0: magma.orc8r.CheckStatelessResponse.AGWMode
	(ConfigureStatelessRequest_Cmd)(0),  // 1: magma.orc8r.ConfigureStatelessRequest.Cmd
	(*PingParams)(nil),                  // 2: magma.orc8r.PingParams
	(*TracerouteParams)(nil),            // 3: magma.orc8r.TracerouteParams
	(*NetworkTestRequest)(nil),          // 4: magma.orc8r.NetworkTestRequest
	(*PingResult)(nil),                  // 5: magma.orc8r.PingResult
	(*TracerouteProbe)(nil),             // 6: magma.orc8r.TracerouteProbe
	(*TracerouteHop)(nil),               // 7: magma.orc8r.TracerouteHop
	(*TracerouteResult)(nil),            // 8: magma.orc8r.TracerouteResult
	(*NetworkTestResponse)(nil),         // 9: magma.orc8r.NetworkTestResponse
	(*GetGatewayIdResponse)(nil),        // 10: magma.orc8r.GetGatewayIdResponse
	(*RestartServicesRequest)(nil),      // 11: magma.orc8r.RestartServicesRequest
	(*GenericCommandParams)(nil),        // 12: magma.orc8r.GenericCommandParams
	(*GenericCommandResponse)(nil),      // 13: magma.orc8r.GenericCommandResponse
	(*TailLogsRequest)(nil),             // 14: magma.orc8r.TailLogsRequest
	(*LogLine)(nil),                     // 15: magma.orc8r.LogLine
	(*CheckStatelessResponse)(nil),      // 16: magma.orc8r.CheckStatelessResponse
	(*ConfigureStatelessRequest)(nil),   // 17: magma.orc8r.ConfigureStatelessRequest
	(*_struct.Struct)(nil),              // 18: google.protobuf.Struct
	(*Void)(nil),                        // 19: magma.orc8r.Void
	(*GatewayConfigs)(nil),              // 20: magma.orc8r.GatewayConfigs
}
var file_orc8r_protos_magmad_proto_depIdxs = []int32{
	2,  // 0: magma.orc8r.NetworkTestRequest.pings:type_name -> magma.orc8r.PingParams
	3,  // 1: magma.orc8r.NetworkTestRequest.traceroutes:type_name -> magma.orc8r.TracerouteParams
	6,  // 2: magma.orc8r.TracerouteHop.probes:type_name -> magma.orc8r.TracerouteProbe
	7,  // 3: magma.orc8r.TracerouteResult.hops:type_name -> magma.orc8r.TracerouteHop
	5,  // 4: magma.orc8r.NetworkTestResponse.pings:type_name -> magma.orc8r.PingResult
	8,  // 5: magma.orc8r.NetworkTestResponse.traceroutes:type_name -> magma.orc8r.TracerouteResult
	18, // 6: magma.orc8r.GenericCommandParams.params:type_name -> google.protobuf.Struct
	18, // 7: magma.orc8r.GenericCommandResponse.response:type_name -> google.protobuf.Struct
	0,  // 8: magma.orc8r.CheckStatelessResponse.agw_mode:type_name -> magma.orc8r.CheckStatelessResponse.AGWMode
	1,  // 9: magma.orc8r.ConfigureStatelessRequest.config_cmd:type_name -> magma.orc8r.ConfigureStatelessRequest.Cmd
	19, // 10: magma.orc8r.Magmad.StartServices:input_type -> magma.orc8r.Void
	19, // 11: magma.orc8r.Magmad.StopServices:input_type -> magma.orc8r.Void
	19, // 12: magma.orc8r.Magmad.Reboot:input_type -> magma.orc8r.Void
	11, // 13: magma.orc8r.Magmad.RestartServices:input_type -> magma.orc8r.RestartServicesRequest
	20, // 14: magma.orc8r.Magmad.SetConfigs:input_type -> magma.orc8r.GatewayConfigs
	19, // 15: magma.orc8r.Magmad.GetConfigs:input_type -> magma.orc8r.Void
	4,  // 16: magma.orc8r.Magmad.RunNetworkTests:input_type -> magma.orc8r.NetworkTestRequest
	19, // 17: magma.orc8r.Magmad.GetGatewayId:input_type -> magma.orc8r.Void
	12, // 18: magma.orc8r.Magmad.GenericCommand:input_type -> magma.orc8r.GenericCommandParams
	14, // 19: magma.orc8r.Magmad.TailLogs:input_type -> magma.orc8r.TailLogsRequest
	19, // 20: magma.orc8r.Magmad.CheckStateless:input_type -> magma.orc8r.Void
	17, // 21: magma.orc8r.Magmad.ConfigureStateless:input_type -> magma.orc8r.ConfigureStatelessRequest
	19, // 22: magma.orc8r.Magmad.StartServices:output_type -> magma.orc8r.Void
	19, // 23: magma.orc8r.Magmad.StopServices:output_type -> magma.orc8r.Void
	19, // 24: magma.orc8r.Magmad.Reboot:output_type -> magma.orc8r.Void
	19, // 25: magma.orc8r.Magmad.RestartServices:output_type -> magma.orc8r.Void
	19, // 26: magma.orc8r.Magmad.SetConfigs:output_type -> magma.orc8r.Void
	20, // 27: magma.orc8r.Magmad.GetConfigs:output_type -> magma.orc8r.GatewayConfigs
	9,  // 28: magma.orc8r.Magmad.RunNetworkTests:output_type -> magma.orc8r.NetworkTestResponse
	10, // 29: magma.orc8r.Magmad.GetGatewayId:output_type -> magma.orc8r.GetGatewayIdResponse
	13, // 30: magma.orc8r.Magmad.GenericCommand:output_type -> magma.orc8r.GenericCommandResponse
	15, // 31: magma.orc8r.Magmad.TailLogs:output_type -> magma.orc8r.LogLine
	16, // 32: magma.orc8r.Magmad.CheckStateless:output_type -> magma.orc8r.CheckStatelessResponse
	19, // 33: magma.orc8r.Magmad.ConfigureStateless:output_type -> magma.orc8r.Void
	22, // [22:34] is the sub-list for method output_type
	10, // [10:22] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_orc8r_protos_magmad_proto_init() }
func file_orc8r_protos_magmad_proto_init() {
	if File_orc8r_protos_magmad_proto != nil {
		return
	}
	file_orc8r_protos_common_proto_init()
	file_orc8r_protos_mconfig_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_orc8r_protos_magmad_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_magmad_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracerouteParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_magmad_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_magmad_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_magmad_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracerouteProbe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_magmad_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracerouteHop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_magmad_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracerouteResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_magmad_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_magmad_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGatewayIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_magmad_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartServicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_magmad_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericCommandParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_magmad_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_magmad_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TailLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_magmad_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_magmad_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckStatelessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_magmad_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigureStatelessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_orc8r_protos_magmad_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_orc8r_protos_magmad_proto_goTypes,
		DependencyIndexes: file_orc8r_protos_magmad_proto_depIdxs,
		EnumInfos:         file_orc8r_protos_magmad_proto_enumTypes,
		MessageInfos:      file_orc8r_protos_magmad_proto_msgTypes,
	}.Build()
	File_orc8r_protos_magmad_proto = out.File
	file_orc8r_protos_magmad_proto_rawDesc = nil
	file_orc8r_protos_magmad_proto_goTypes = nil
	file_orc8r_protos_magmad_proto_depIdxs = nil
}
