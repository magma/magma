// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.10.0
// source: orc8r/protos/service_registry.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceRegistryClient is the client API for ServiceRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceRegistryClient interface {
	// ListAllServices returns the service name of all services in the registry.
	ListAllServices(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ListAllServicesResponse, error)
	// FindServices returns the names of all services that have the passed label.
	FindServices(ctx context.Context, in *FindServicesRequest, opts ...grpc.CallOption) (*FindServicesResponse, error)
	// GetServiceAddress returns the service address of a given service.
	GetServiceAddress(ctx context.Context, in *GetServiceAddressRequest, opts ...grpc.CallOption) (*GetServiceAddressResponse, error)
	// GetHttpServerAddress returns the address for a service's HTTP server.
	GetHttpServerAddress(ctx context.Context, in *GetHttpServerAddressRequest, opts ...grpc.CallOption) (*GetHttpServerAddressResponse, error)
	// GetAnnotation returns the annotation value for the passed annotation
	// name.
	GetAnnotation(ctx context.Context, in *GetAnnotationRequest, opts ...grpc.CallOption) (*GetAnnotationResponse, error)
}

type serviceRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceRegistryClient(cc grpc.ClientConnInterface) ServiceRegistryClient {
	return &serviceRegistryClient{cc}
}

func (c *serviceRegistryClient) ListAllServices(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ListAllServicesResponse, error) {
	out := new(ListAllServicesResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.ServiceRegistry/ListAllServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceRegistryClient) FindServices(ctx context.Context, in *FindServicesRequest, opts ...grpc.CallOption) (*FindServicesResponse, error) {
	out := new(FindServicesResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.ServiceRegistry/FindServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceRegistryClient) GetServiceAddress(ctx context.Context, in *GetServiceAddressRequest, opts ...grpc.CallOption) (*GetServiceAddressResponse, error) {
	out := new(GetServiceAddressResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.ServiceRegistry/GetServiceAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceRegistryClient) GetHttpServerAddress(ctx context.Context, in *GetHttpServerAddressRequest, opts ...grpc.CallOption) (*GetHttpServerAddressResponse, error) {
	out := new(GetHttpServerAddressResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.ServiceRegistry/GetHttpServerAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceRegistryClient) GetAnnotation(ctx context.Context, in *GetAnnotationRequest, opts ...grpc.CallOption) (*GetAnnotationResponse, error) {
	out := new(GetAnnotationResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.ServiceRegistry/GetAnnotation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceRegistryServer is the server API for ServiceRegistry service.
// All implementations must embed UnimplementedServiceRegistryServer
// for forward compatibility
type ServiceRegistryServer interface {
	// ListAllServices returns the service name of all services in the registry.
	ListAllServices(context.Context, *Void) (*ListAllServicesResponse, error)
	// FindServices returns the names of all services that have the passed label.
	FindServices(context.Context, *FindServicesRequest) (*FindServicesResponse, error)
	// GetServiceAddress returns the service address of a given service.
	GetServiceAddress(context.Context, *GetServiceAddressRequest) (*GetServiceAddressResponse, error)
	// GetHttpServerAddress returns the address for a service's HTTP server.
	GetHttpServerAddress(context.Context, *GetHttpServerAddressRequest) (*GetHttpServerAddressResponse, error)
	// GetAnnotation returns the annotation value for the passed annotation
	// name.
	GetAnnotation(context.Context, *GetAnnotationRequest) (*GetAnnotationResponse, error)
	mustEmbedUnimplementedServiceRegistryServer()
}

// UnimplementedServiceRegistryServer must be embedded to have forward compatible implementations.
type UnimplementedServiceRegistryServer struct {
}

func (UnimplementedServiceRegistryServer) ListAllServices(context.Context, *Void) (*ListAllServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllServices not implemented")
}
func (UnimplementedServiceRegistryServer) FindServices(context.Context, *FindServicesRequest) (*FindServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindServices not implemented")
}
func (UnimplementedServiceRegistryServer) GetServiceAddress(context.Context, *GetServiceAddressRequest) (*GetServiceAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceAddress not implemented")
}
func (UnimplementedServiceRegistryServer) GetHttpServerAddress(context.Context, *GetHttpServerAddressRequest) (*GetHttpServerAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHttpServerAddress not implemented")
}
func (UnimplementedServiceRegistryServer) GetAnnotation(context.Context, *GetAnnotationRequest) (*GetAnnotationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnnotation not implemented")
}
func (UnimplementedServiceRegistryServer) mustEmbedUnimplementedServiceRegistryServer() {}

// UnsafeServiceRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceRegistryServer will
// result in compilation errors.
type UnsafeServiceRegistryServer interface {
	mustEmbedUnimplementedServiceRegistryServer()
}

func RegisterServiceRegistryServer(s grpc.ServiceRegistrar, srv ServiceRegistryServer) {
	s.RegisterService(&ServiceRegistry_ServiceDesc, srv)
}

func _ServiceRegistry_ListAllServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceRegistryServer).ListAllServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.ServiceRegistry/ListAllServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceRegistryServer).ListAllServices(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceRegistry_FindServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceRegistryServer).FindServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.ServiceRegistry/FindServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceRegistryServer).FindServices(ctx, req.(*FindServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceRegistry_GetServiceAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceRegistryServer).GetServiceAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.ServiceRegistry/GetServiceAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceRegistryServer).GetServiceAddress(ctx, req.(*GetServiceAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceRegistry_GetHttpServerAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHttpServerAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceRegistryServer).GetHttpServerAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.ServiceRegistry/GetHttpServerAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceRegistryServer).GetHttpServerAddress(ctx, req.(*GetHttpServerAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceRegistry_GetAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnnotationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceRegistryServer).GetAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.ServiceRegistry/GetAnnotation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceRegistryServer).GetAnnotation(ctx, req.(*GetAnnotationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceRegistry_ServiceDesc is the grpc.ServiceDesc for ServiceRegistry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceRegistry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.ServiceRegistry",
	HandlerType: (*ServiceRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAllServices",
			Handler:    _ServiceRegistry_ListAllServices_Handler,
		},
		{
			MethodName: "FindServices",
			Handler:    _ServiceRegistry_FindServices_Handler,
		},
		{
			MethodName: "GetServiceAddress",
			Handler:    _ServiceRegistry_GetServiceAddress_Handler,
		},
		{
			MethodName: "GetHttpServerAddress",
			Handler:    _ServiceRegistry_GetHttpServerAddress_Handler,
		},
		{
			MethodName: "GetAnnotation",
			Handler:    _ServiceRegistry_GetAnnotation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orc8r/protos/service_registry.proto",
}
