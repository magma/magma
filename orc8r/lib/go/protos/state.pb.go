//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: orc8r/protos/state.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StateID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	DeviceID string `protobuf:"bytes,2,opt,name=deviceID,proto3" json:"deviceID,omitempty"`
}

func (x *StateID) Reset() {
	*x = StateID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_state_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateID) ProtoMessage() {}

func (x *StateID) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_state_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateID.ProtoReflect.Descriptor instead.
func (*StateID) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_state_proto_rawDescGZIP(), []int{0}
}

func (x *StateID) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *StateID) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

// GetStatesRequest functions in two modes
//  - ids is non-empty  -- normal Get
//  - ids empty         -- Search with filters and load criteria
type GetStatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// networkID of the network containing desired state.
	NetworkID string `protobuf:"bytes,1,opt,name=networkID,proto3" json:"networkID,omitempty"`
	// ids for which to return corresponding state.
	Ids []*StateID `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
	// typeFilter is an OR of all types specified.
	// The service will return all states matching any of the specified types.
	TypeFilter []string `protobuf:"bytes,10,rep,name=typeFilter,proto3" json:"typeFilter,omitempty"`
	// idFilter is an OR of all device IDs specified.
	// The service will return all states matching any of the specified IDs.
	IdFilter []string `protobuf:"bytes,11,rep,name=idFilter,proto3" json:"idFilter,omitempty"`
	// loadValues specifies whether state values should be loaded in
	// addition to metadata.
	LoadValues bool `protobuf:"varint,12,opt,name=loadValues,proto3" json:"loadValues,omitempty"`
	// If non-empty, the value of id_prefix will be used to do a prefix-match
	// on the keys of queried states. This argument supersedes any value for
	// idFilter.
	IdPrefix string `protobuf:"bytes,13,opt,name=id_prefix,json=idPrefix,proto3" json:"id_prefix,omitempty"`
}

func (x *GetStatesRequest) Reset() {
	*x = GetStatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_state_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatesRequest) ProtoMessage() {}

func (x *GetStatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_state_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatesRequest.ProtoReflect.Descriptor instead.
func (*GetStatesRequest) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_state_proto_rawDescGZIP(), []int{1}
}

func (x *GetStatesRequest) GetNetworkID() string {
	if x != nil {
		return x.NetworkID
	}
	return ""
}

func (x *GetStatesRequest) GetIds() []*StateID {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *GetStatesRequest) GetTypeFilter() []string {
	if x != nil {
		return x.TypeFilter
	}
	return nil
}

func (x *GetStatesRequest) GetIdFilter() []string {
	if x != nil {
		return x.IdFilter
	}
	return nil
}

func (x *GetStatesRequest) GetLoadValues() bool {
	if x != nil {
		return x.LoadValues
	}
	return false
}

func (x *GetStatesRequest) GetIdPrefix() string {
	if x != nil {
		return x.IdPrefix
	}
	return ""
}

type GetStatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	States []*State `protobuf:"bytes,1,rep,name=states,proto3" json:"states,omitempty"`
}

func (x *GetStatesResponse) Reset() {
	*x = GetStatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_state_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatesResponse) ProtoMessage() {}

func (x *GetStatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_state_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatesResponse.ProtoReflect.Descriptor instead.
func (*GetStatesResponse) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_state_proto_rawDescGZIP(), []int{2}
}

func (x *GetStatesResponse) GetStates() []*State {
	if x != nil {
		return x.States
	}
	return nil
}

type ReportStatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	States []*State `protobuf:"bytes,1,rep,name=states,proto3" json:"states,omitempty"`
}

func (x *ReportStatesRequest) Reset() {
	*x = ReportStatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_state_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportStatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportStatesRequest) ProtoMessage() {}

func (x *ReportStatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_state_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportStatesRequest.ProtoReflect.Descriptor instead.
func (*ReportStatesRequest) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_state_proto_rawDescGZIP(), []int{3}
}

func (x *ReportStatesRequest) GetStates() []*State {
	if x != nil {
		return x.States
	}
	return nil
}

type ReportStatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnreportedStates []*IDAndError `protobuf:"bytes,1,rep,name=unreportedStates,proto3" json:"unreportedStates,omitempty"`
}

func (x *ReportStatesResponse) Reset() {
	*x = ReportStatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_state_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportStatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportStatesResponse) ProtoMessage() {}

func (x *ReportStatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_state_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportStatesResponse.ProtoReflect.Descriptor instead.
func (*ReportStatesResponse) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_state_proto_rawDescGZIP(), []int{4}
}

func (x *ReportStatesResponse) GetUnreportedStates() []*IDAndError {
	if x != nil {
		return x.UnreportedStates
	}
	return nil
}

type IDAndError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	DeviceID string `protobuf:"bytes,2,opt,name=deviceID,proto3" json:"deviceID,omitempty"`
	Error    string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *IDAndError) Reset() {
	*x = IDAndError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_state_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDAndError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDAndError) ProtoMessage() {}

func (x *IDAndError) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_state_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDAndError.ProtoReflect.Descriptor instead.
func (*IDAndError) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_state_proto_rawDescGZIP(), []int{5}
}

func (x *IDAndError) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *IDAndError) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *IDAndError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type DeleteStatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkID string     `protobuf:"bytes,1,opt,name=networkID,proto3" json:"networkID,omitempty"`
	Ids       []*StateID `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteStatesRequest) Reset() {
	*x = DeleteStatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_state_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStatesRequest) ProtoMessage() {}

func (x *DeleteStatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_state_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStatesRequest.ProtoReflect.Descriptor instead.
func (*DeleteStatesRequest) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_state_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteStatesRequest) GetNetworkID() string {
	if x != nil {
		return x.NetworkID
	}
	return ""
}

func (x *DeleteStatesRequest) GetIds() []*StateID {
	if x != nil {
		return x.Ids
	}
	return nil
}

type SyncStatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	States []*IDAndVersion `protobuf:"bytes,1,rep,name=states,proto3" json:"states,omitempty"`
}

func (x *SyncStatesRequest) Reset() {
	*x = SyncStatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_state_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncStatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncStatesRequest) ProtoMessage() {}

func (x *SyncStatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_state_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncStatesRequest.ProtoReflect.Descriptor instead.
func (*SyncStatesRequest) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_state_proto_rawDescGZIP(), []int{7}
}

func (x *SyncStatesRequest) GetStates() []*IDAndVersion {
	if x != nil {
		return x.States
	}
	return nil
}

type IDAndVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *StateID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version uint64   `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *IDAndVersion) Reset() {
	*x = IDAndVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_state_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDAndVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDAndVersion) ProtoMessage() {}

func (x *IDAndVersion) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_state_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDAndVersion.ProtoReflect.Descriptor instead.
func (*IDAndVersion) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_state_proto_rawDescGZIP(), []int{8}
}

func (x *IDAndVersion) GetId() *StateID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *IDAndVersion) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type SyncStatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnsyncedStates []*IDAndVersion `protobuf:"bytes,1,rep,name=unsyncedStates,proto3" json:"unsyncedStates,omitempty"`
}

func (x *SyncStatesResponse) Reset() {
	*x = SyncStatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_state_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncStatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncStatesResponse) ProtoMessage() {}

func (x *SyncStatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_state_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncStatesResponse.ProtoReflect.Descriptor instead.
func (*SyncStatesResponse) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_state_proto_rawDescGZIP(), []int{9}
}

func (x *SyncStatesResponse) GetUnsyncedStates() []*IDAndVersion {
	if x != nil {
		return x.UnsyncedStates
	}
	return nil
}

var File_orc8r_protos_state_proto protoreflect.FileDescriptor

var file_orc8r_protos_state_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x1a, 0x19, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1d, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x33, 0x30, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x39, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x22, 0xd1, 0x01, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x12,
	0x26, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x49, 0x44, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x79, 0x70,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x61, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6c, 0x6f, 0x61, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x22, 0x3f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72,
	0x63, 0x38, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x22, 0x41, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x22, 0x5b, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x10,
	0x75, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f,
	0x72, 0x63, 0x38, 0x72, 0x2e, 0x49, 0x44, 0x41, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x10, 0x75, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x22, 0x52, 0x0a, 0x0a, 0x49, 0x44, 0x41, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x5b, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x22, 0x46, 0x0a, 0x11, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x49, 0x44, 0x41, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0x4e, 0x0a, 0x0c, 0x49, 0x44,
	0x41, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f,
	0x72, 0x63, 0x38, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x12, 0x53, 0x79,
	0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x0e, 0x75, 0x6e, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x49, 0x44, 0x41, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x75, 0x6e, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x32, 0xcb, 0x02, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x1d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x55, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63,
	0x38, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00,
	0x12, 0x4f, 0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1e,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x1b, 0x5a, 0x19, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f, 0x6f, 0x72, 0x63, 0x38, 0x72,
	0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_orc8r_protos_state_proto_rawDescOnce sync.Once
	file_orc8r_protos_state_proto_rawDescData = file_orc8r_protos_state_proto_rawDesc
)

func file_orc8r_protos_state_proto_rawDescGZIP() []byte {
	file_orc8r_protos_state_proto_rawDescOnce.Do(func() {
		file_orc8r_protos_state_proto_rawDescData = protoimpl.X.CompressGZIP(file_orc8r_protos_state_proto_rawDescData)
	})
	return file_orc8r_protos_state_proto_rawDescData
}

var file_orc8r_protos_state_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_orc8r_protos_state_proto_goTypes = []interface{}{
	(*StateID)(nil),              // 0: magma.orc8r.StateID
	(*GetStatesRequest)(nil),     // 1: magma.orc8r.GetStatesRequest
	(*GetStatesResponse)(nil),    // 2: magma.orc8r.GetStatesResponse
	(*ReportStatesRequest)(nil),  // 3: magma.orc8r.ReportStatesRequest
	(*ReportStatesResponse)(nil), // 4: magma.orc8r.ReportStatesResponse
	(*IDAndError)(nil),           // 5: magma.orc8r.IDAndError
	(*DeleteStatesRequest)(nil),  // 6: magma.orc8r.DeleteStatesRequest
	(*SyncStatesRequest)(nil),    // 7: magma.orc8r.SyncStatesRequest
	(*IDAndVersion)(nil),         // 8: magma.orc8r.IDAndVersion
	(*SyncStatesResponse)(nil),   // 9: magma.orc8r.SyncStatesResponse
	(*State)(nil),                // 10: magma.orc8r.State
	(*Void)(nil),                 // 11: magma.orc8r.Void
}
var file_orc8r_protos_state_proto_depIdxs = []int32{
	0,  // 0: magma.orc8r.GetStatesRequest.ids:type_name -> magma.orc8r.StateID
	10, // 1: magma.orc8r.GetStatesResponse.states:type_name -> magma.orc8r.State
	10, // 2: magma.orc8r.ReportStatesRequest.states:type_name -> magma.orc8r.State
	5,  // 3: magma.orc8r.ReportStatesResponse.unreportedStates:type_name -> magma.orc8r.IDAndError
	0,  // 4: magma.orc8r.DeleteStatesRequest.ids:type_name -> magma.orc8r.StateID
	8,  // 5: magma.orc8r.SyncStatesRequest.states:type_name -> magma.orc8r.IDAndVersion
	0,  // 6: magma.orc8r.IDAndVersion.id:type_name -> magma.orc8r.StateID
	8,  // 7: magma.orc8r.SyncStatesResponse.unsyncedStates:type_name -> magma.orc8r.IDAndVersion
	1,  // 8: magma.orc8r.StateService.GetStates:input_type -> magma.orc8r.GetStatesRequest
	3,  // 9: magma.orc8r.StateService.ReportStates:input_type -> magma.orc8r.ReportStatesRequest
	6,  // 10: magma.orc8r.StateService.DeleteStates:input_type -> magma.orc8r.DeleteStatesRequest
	7,  // 11: magma.orc8r.StateService.SyncStates:input_type -> magma.orc8r.SyncStatesRequest
	2,  // 12: magma.orc8r.StateService.GetStates:output_type -> magma.orc8r.GetStatesResponse
	4,  // 13: magma.orc8r.StateService.ReportStates:output_type -> magma.orc8r.ReportStatesResponse
	11, // 14: magma.orc8r.StateService.DeleteStates:output_type -> magma.orc8r.Void
	9,  // 15: magma.orc8r.StateService.SyncStates:output_type -> magma.orc8r.SyncStatesResponse
	12, // [12:16] is the sub-list for method output_type
	8,  // [8:12] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_orc8r_protos_state_proto_init() }
func file_orc8r_protos_state_proto_init() {
	if File_orc8r_protos_state_proto != nil {
		return
	}
	file_orc8r_protos_common_proto_init()
	file_orc8r_protos_service303_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_orc8r_protos_state_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_state_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_state_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_state_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportStatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_state_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportStatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_state_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDAndError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_state_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_state_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncStatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_state_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDAndVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_state_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncStatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_orc8r_protos_state_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_orc8r_protos_state_proto_goTypes,
		DependencyIndexes: file_orc8r_protos_state_proto_depIdxs,
		MessageInfos:      file_orc8r_protos_state_proto_msgTypes,
	}.Build()
	File_orc8r_protos_state_proto = out.File
	file_orc8r_protos_state_proto_rawDesc = nil
	file_orc8r_protos_state_proto_goTypes = nil
	file_orc8r_protos_state_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StateServiceClient is the client API for StateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StateServiceClient interface {
	// GetStates retrieves states from blobstorage.
	GetStates(ctx context.Context, in *GetStatesRequest, opts ...grpc.CallOption) (*GetStatesResponse, error)
	// ReportStates saves states into blobstorage.
	ReportStates(ctx context.Context, in *ReportStatesRequest, opts ...grpc.CallOption) (*ReportStatesResponse, error)
	// DeleteStates deletes states from blobstorage.
	DeleteStates(ctx context.Context, in *DeleteStatesRequest, opts ...grpc.CallOption) (*Void, error)
	// SyncStates retrieves states from blobstorage, compares their versions
	// to the states included in the request, and returns the IDAndVersions
	// that differ.
	SyncStates(ctx context.Context, in *SyncStatesRequest, opts ...grpc.CallOption) (*SyncStatesResponse, error)
}

type stateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStateServiceClient(cc grpc.ClientConnInterface) StateServiceClient {
	return &stateServiceClient{cc}
}

func (c *stateServiceClient) GetStates(ctx context.Context, in *GetStatesRequest, opts ...grpc.CallOption) (*GetStatesResponse, error) {
	out := new(GetStatesResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.StateService/GetStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) ReportStates(ctx context.Context, in *ReportStatesRequest, opts ...grpc.CallOption) (*ReportStatesResponse, error) {
	out := new(ReportStatesResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.StateService/ReportStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) DeleteStates(ctx context.Context, in *DeleteStatesRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.StateService/DeleteStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) SyncStates(ctx context.Context, in *SyncStatesRequest, opts ...grpc.CallOption) (*SyncStatesResponse, error) {
	out := new(SyncStatesResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.StateService/SyncStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StateServiceServer is the server API for StateService service.
type StateServiceServer interface {
	// GetStates retrieves states from blobstorage.
	GetStates(context.Context, *GetStatesRequest) (*GetStatesResponse, error)
	// ReportStates saves states into blobstorage.
	ReportStates(context.Context, *ReportStatesRequest) (*ReportStatesResponse, error)
	// DeleteStates deletes states from blobstorage.
	DeleteStates(context.Context, *DeleteStatesRequest) (*Void, error)
	// SyncStates retrieves states from blobstorage, compares their versions
	// to the states included in the request, and returns the IDAndVersions
	// that differ.
	SyncStates(context.Context, *SyncStatesRequest) (*SyncStatesResponse, error)
}

// UnimplementedStateServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStateServiceServer struct {
}

func (*UnimplementedStateServiceServer) GetStates(context.Context, *GetStatesRequest) (*GetStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStates not implemented")
}
func (*UnimplementedStateServiceServer) ReportStates(context.Context, *ReportStatesRequest) (*ReportStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportStates not implemented")
}
func (*UnimplementedStateServiceServer) DeleteStates(context.Context, *DeleteStatesRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStates not implemented")
}
func (*UnimplementedStateServiceServer) SyncStates(context.Context, *SyncStatesRequest) (*SyncStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncStates not implemented")
}

func RegisterStateServiceServer(s *grpc.Server, srv StateServiceServer) {
	s.RegisterService(&_StateService_serviceDesc, srv)
}

func _StateService_GetStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).GetStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.StateService/GetStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).GetStates(ctx, req.(*GetStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_ReportStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).ReportStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.StateService/ReportStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).ReportStates(ctx, req.(*ReportStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_DeleteStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).DeleteStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.StateService/DeleteStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).DeleteStates(ctx, req.(*DeleteStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_SyncStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).SyncStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.StateService/SyncStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).SyncStates(ctx, req.(*SyncStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.StateService",
	HandlerType: (*StateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStates",
			Handler:    _StateService_GetStates_Handler,
		},
		{
			MethodName: "ReportStates",
			Handler:    _StateService_ReportStates_Handler,
		},
		{
			MethodName: "DeleteStates",
			Handler:    _StateService_DeleteStates_Handler,
		},
		{
			MethodName: "SyncStates",
			Handler:    _StateService_SyncStates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orc8r/protos/state.proto",
}
