//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: orc8r/protos/service303.proto

package protos

import (
	context "context"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServiceInfo_ServiceState int32

const (
	ServiceInfo_UNKNOWN  ServiceInfo_ServiceState = 0
	ServiceInfo_STARTING ServiceInfo_ServiceState = 1
	ServiceInfo_ALIVE    ServiceInfo_ServiceState = 2
	ServiceInfo_STOPPING ServiceInfo_ServiceState = 3
	ServiceInfo_STOPPED  ServiceInfo_ServiceState = 4
)

// Enum value maps for ServiceInfo_ServiceState.
var (
	ServiceInfo_ServiceState_name = map[int32]string{
		0: "UNKNOWN",
		1: "STARTING",
		2: "ALIVE",
		3: "STOPPING",
		4: "STOPPED",
	}
	ServiceInfo_ServiceState_value = map[string]int32{
		"UNKNOWN":  0,
		"STARTING": 1,
		"ALIVE":    2,
		"STOPPING": 3,
		"STOPPED":  4,
	}
)

func (x ServiceInfo_ServiceState) Enum() *ServiceInfo_ServiceState {
	p := new(ServiceInfo_ServiceState)
	*p = x
	return p
}

func (x ServiceInfo_ServiceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceInfo_ServiceState) Descriptor() protoreflect.EnumDescriptor {
	return file_orc8r_protos_service303_proto_enumTypes[0].Descriptor()
}

func (ServiceInfo_ServiceState) Type() protoreflect.EnumType {
	return &file_orc8r_protos_service303_proto_enumTypes[0]
}

func (x ServiceInfo_ServiceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceInfo_ServiceState.Descriptor instead.
func (ServiceInfo_ServiceState) EnumDescriptor() ([]byte, []int) {
	return file_orc8r_protos_service303_proto_rawDescGZIP(), []int{2, 0}
}

// Gives information about whether the application is usable. Though the
// process may have started, the connections may not be set up. APP_HEALTHY in
// this case means the application is entirely usable
type ServiceInfo_ApplicationHealth int32

const (
	ServiceInfo_APP_UNKNOWN   ServiceInfo_ApplicationHealth = 0
	ServiceInfo_APP_UNHEALTHY ServiceInfo_ApplicationHealth = 1
	ServiceInfo_APP_HEALTHY   ServiceInfo_ApplicationHealth = 2
)

// Enum value maps for ServiceInfo_ApplicationHealth.
var (
	ServiceInfo_ApplicationHealth_name = map[int32]string{
		0: "APP_UNKNOWN",
		1: "APP_UNHEALTHY",
		2: "APP_HEALTHY",
	}
	ServiceInfo_ApplicationHealth_value = map[string]int32{
		"APP_UNKNOWN":   0,
		"APP_UNHEALTHY": 1,
		"APP_HEALTHY":   2,
	}
)

func (x ServiceInfo_ApplicationHealth) Enum() *ServiceInfo_ApplicationHealth {
	p := new(ServiceInfo_ApplicationHealth)
	*p = x
	return p
}

func (x ServiceInfo_ApplicationHealth) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceInfo_ApplicationHealth) Descriptor() protoreflect.EnumDescriptor {
	return file_orc8r_protos_service303_proto_enumTypes[1].Descriptor()
}

func (ServiceInfo_ApplicationHealth) Type() protoreflect.EnumType {
	return &file_orc8r_protos_service303_proto_enumTypes[1]
}

func (x ServiceInfo_ApplicationHealth) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceInfo_ApplicationHealth.Descriptor instead.
func (ServiceInfo_ApplicationHealth) EnumDescriptor() ([]byte, []int) {
	return file_orc8r_protos_service303_proto_rawDescGZIP(), []int{2, 1}
}

type ReloadConfigResponse_ReloadConfigResult int32

const (
	ReloadConfigResponse_RELOAD_UNKNOWN     ReloadConfigResponse_ReloadConfigResult = 0
	ReloadConfigResponse_RELOAD_SUCCESS     ReloadConfigResponse_ReloadConfigResult = 1
	ReloadConfigResponse_RELOAD_FAILURE     ReloadConfigResponse_ReloadConfigResult = 2
	ReloadConfigResponse_RELOAD_UNSUPPORTED ReloadConfigResponse_ReloadConfigResult = 3
)

// Enum value maps for ReloadConfigResponse_ReloadConfigResult.
var (
	ReloadConfigResponse_ReloadConfigResult_name = map[int32]string{
		0: "RELOAD_UNKNOWN",
		1: "RELOAD_SUCCESS",
		2: "RELOAD_FAILURE",
		3: "RELOAD_UNSUPPORTED",
	}
	ReloadConfigResponse_ReloadConfigResult_value = map[string]int32{
		"RELOAD_UNKNOWN":     0,
		"RELOAD_SUCCESS":     1,
		"RELOAD_FAILURE":     2,
		"RELOAD_UNSUPPORTED": 3,
	}
)

func (x ReloadConfigResponse_ReloadConfigResult) Enum() *ReloadConfigResponse_ReloadConfigResult {
	p := new(ReloadConfigResponse_ReloadConfigResult)
	*p = x
	return p
}

func (x ReloadConfigResponse_ReloadConfigResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReloadConfigResponse_ReloadConfigResult) Descriptor() protoreflect.EnumDescriptor {
	return file_orc8r_protos_service303_proto_enumTypes[2].Descriptor()
}

func (ReloadConfigResponse_ReloadConfigResult) Type() protoreflect.EnumType {
	return &file_orc8r_protos_service303_proto_enumTypes[2]
}

func (x ReloadConfigResponse_ReloadConfigResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReloadConfigResponse_ReloadConfigResult.Descriptor instead.
func (ReloadConfigResponse_ReloadConfigResult) EnumDescriptor() ([]byte, []int) {
	return file_orc8r_protos_service303_proto_rawDescGZIP(), []int{5, 0}
}

type EnodebdStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// For bools, parameter is not set if result can't be determined
	EnodebConnected  *wrappers.BoolValue  `protobuf:"bytes,1,opt,name=enodeb_connected,json=enodebConnected,proto3" json:"enodeb_connected,omitempty"`
	OpstateEnabled   *wrappers.BoolValue  `protobuf:"bytes,2,opt,name=opstate_enabled,json=opstateEnabled,proto3" json:"opstate_enabled,omitempty"`
	RfTxOn           *wrappers.BoolValue  `protobuf:"bytes,3,opt,name=rf_tx_on,json=rfTxOn,proto3" json:"rf_tx_on,omitempty"`
	GpsConnected     *wrappers.BoolValue  `protobuf:"bytes,4,opt,name=gps_connected,json=gpsConnected,proto3" json:"gps_connected,omitempty"`
	PtpConnected     *wrappers.BoolValue  `protobuf:"bytes,5,opt,name=ptp_connected,json=ptpConnected,proto3" json:"ptp_connected,omitempty"`
	MmeConnected     *wrappers.BoolValue  `protobuf:"bytes,6,opt,name=mme_connected,json=mmeConnected,proto3" json:"mme_connected,omitempty"`
	EnodebConfigured *wrappers.BoolValue  `protobuf:"bytes,7,opt,name=enodeb_configured,json=enodebConfigured,proto3" json:"enodeb_configured,omitempty"`
	GpsLatitude      *wrappers.FloatValue `protobuf:"bytes,8,opt,name=gps_latitude,json=gpsLatitude,proto3" json:"gps_latitude,omitempty"`
	GpsLongitude     *wrappers.FloatValue `protobuf:"bytes,9,opt,name=gps_longitude,json=gpsLongitude,proto3" json:"gps_longitude,omitempty"`
	RfTxDesired      *wrappers.BoolValue  `protobuf:"bytes,10,opt,name=rf_tx_desired,json=rfTxDesired,proto3" json:"rf_tx_desired,omitempty"`
}

func (x *EnodebdStatus) Reset() {
	*x = EnodebdStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_service303_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnodebdStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnodebdStatus) ProtoMessage() {}

func (x *EnodebdStatus) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_service303_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnodebdStatus.ProtoReflect.Descriptor instead.
func (*EnodebdStatus) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_service303_proto_rawDescGZIP(), []int{0}
}

func (x *EnodebdStatus) GetEnodebConnected() *wrappers.BoolValue {
	if x != nil {
		return x.EnodebConnected
	}
	return nil
}

func (x *EnodebdStatus) GetOpstateEnabled() *wrappers.BoolValue {
	if x != nil {
		return x.OpstateEnabled
	}
	return nil
}

func (x *EnodebdStatus) GetRfTxOn() *wrappers.BoolValue {
	if x != nil {
		return x.RfTxOn
	}
	return nil
}

func (x *EnodebdStatus) GetGpsConnected() *wrappers.BoolValue {
	if x != nil {
		return x.GpsConnected
	}
	return nil
}

func (x *EnodebdStatus) GetPtpConnected() *wrappers.BoolValue {
	if x != nil {
		return x.PtpConnected
	}
	return nil
}

func (x *EnodebdStatus) GetMmeConnected() *wrappers.BoolValue {
	if x != nil {
		return x.MmeConnected
	}
	return nil
}

func (x *EnodebdStatus) GetEnodebConfigured() *wrappers.BoolValue {
	if x != nil {
		return x.EnodebConfigured
	}
	return nil
}

func (x *EnodebdStatus) GetGpsLatitude() *wrappers.FloatValue {
	if x != nil {
		return x.GpsLatitude
	}
	return nil
}

func (x *EnodebdStatus) GetGpsLongitude() *wrappers.FloatValue {
	if x != nil {
		return x.GpsLongitude
	}
	return nil
}

func (x *EnodebdStatus) GetRfTxDesired() *wrappers.BoolValue {
	if x != nil {
		return x.RfTxDesired
	}
	return nil
}

type ServiceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata from the services that will be sent to the cloud through checkin
	Meta map[string]string `protobuf:"bytes,2,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ServiceStatus) Reset() {
	*x = ServiceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_service303_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceStatus) ProtoMessage() {}

func (x *ServiceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_service303_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceStatus.ProtoReflect.Descriptor instead.
func (*ServiceStatus) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_service303_proto_rawDescGZIP(), []int{1}
}

func (x *ServiceStatus) GetMeta() map[string]string {
	if x != nil {
		return x.Meta
	}
	return nil
}

type ServiceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string                        `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	State   ServiceInfo_ServiceState      `protobuf:"varint,3,opt,name=state,proto3,enum=magma.orc8r.ServiceInfo_ServiceState" json:"state,omitempty"`
	Status  *ServiceStatus                `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Health  ServiceInfo_ApplicationHealth `protobuf:"varint,5,opt,name=health,proto3,enum=magma.orc8r.ServiceInfo_ApplicationHealth" json:"health,omitempty"`
	// Time when the service was started (in seconds since epoch)
	StartTimeSecs uint64 `protobuf:"varint,6,opt,name=start_time_secs,json=startTimeSecs,proto3" json:"start_time_secs,omitempty"`
}

func (x *ServiceInfo) Reset() {
	*x = ServiceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_service303_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceInfo) ProtoMessage() {}

func (x *ServiceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_service303_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceInfo.ProtoReflect.Descriptor instead.
func (*ServiceInfo) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_service303_proto_rawDescGZIP(), []int{2}
}

func (x *ServiceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ServiceInfo) GetState() ServiceInfo_ServiceState {
	if x != nil {
		return x.State
	}
	return ServiceInfo_UNKNOWN
}

func (x *ServiceInfo) GetStatus() *ServiceStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ServiceInfo) GetHealth() ServiceInfo_ApplicationHealth {
	if x != nil {
		return x.Health
	}
	return ServiceInfo_APP_UNKNOWN
}

func (x *ServiceInfo) GetStartTimeSecs() uint64 {
	if x != nil {
		return x.StartTimeSecs
	}
	return 0
}

type LogLevelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level LogLevel `protobuf:"varint,1,opt,name=level,proto3,enum=magma.orc8r.LogLevel" json:"level,omitempty"`
}

func (x *LogLevelMessage) Reset() {
	*x = LogLevelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_service303_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogLevelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogLevelMessage) ProtoMessage() {}

func (x *LogLevelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_service303_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogLevelMessage.ProtoReflect.Descriptor instead.
func (*LogLevelMessage) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_service303_proto_rawDescGZIP(), []int{3}
}

func (x *LogLevelMessage) GetLevel() LogLevel {
	if x != nil {
		return x.Level
	}
	return LogLevel_DEBUG
}

type LogVerbosity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verbosity int32 `protobuf:"varint,1,opt,name=verbosity,proto3" json:"verbosity,omitempty"`
}

func (x *LogVerbosity) Reset() {
	*x = LogVerbosity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_service303_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogVerbosity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogVerbosity) ProtoMessage() {}

func (x *LogVerbosity) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_service303_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogVerbosity.ProtoReflect.Descriptor instead.
func (*LogVerbosity) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_service303_proto_rawDescGZIP(), []int{4}
}

func (x *LogVerbosity) GetVerbosity() int32 {
	if x != nil {
		return x.Verbosity
	}
	return 0
}

type ReloadConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result ReloadConfigResponse_ReloadConfigResult `protobuf:"varint,1,opt,name=result,proto3,enum=magma.orc8r.ReloadConfigResponse_ReloadConfigResult" json:"result,omitempty"`
}

func (x *ReloadConfigResponse) Reset() {
	*x = ReloadConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_service303_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReloadConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadConfigResponse) ProtoMessage() {}

func (x *ReloadConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_service303_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadConfigResponse.ProtoReflect.Descriptor instead.
func (*ReloadConfigResponse) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_service303_proto_rawDescGZIP(), []int{5}
}

func (x *ReloadConfigResponse) GetResult() ReloadConfigResponse_ReloadConfigResult {
	if x != nil {
		return x.Result
	}
	return ReloadConfigResponse_RELOAD_UNKNOWN
}

type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type determines how the value is deserialized and validated on the cloud service side
	Type     string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	DeviceID string `protobuf:"bytes,2,opt,name=deviceID,proto3" json:"deviceID,omitempty"`
	// Value contains the operational state json-serialized.
	Value   []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Version uint64 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_service303_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_service303_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_service303_proto_rawDescGZIP(), []int{6}
}

func (x *State) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *State) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *State) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *State) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type GetOperationalStatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	States []*State `protobuf:"bytes,1,rep,name=states,proto3" json:"states,omitempty"`
}

func (x *GetOperationalStatesResponse) Reset() {
	*x = GetOperationalStatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_service303_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOperationalStatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperationalStatesResponse) ProtoMessage() {}

func (x *GetOperationalStatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_service303_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperationalStatesResponse.ProtoReflect.Descriptor instead.
func (*GetOperationalStatesResponse) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_service303_proto_rawDescGZIP(), []int{7}
}

func (x *GetOperationalStatesResponse) GetStates() []*State {
	if x != nil {
		return x.States
	}
	return nil
}

var File_orc8r_protos_service303_proto protoreflect.FileDescriptor

var file_orc8r_protos_service303_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x33, 0x30, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0b, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x1a, 0x19, 0x6f, 0x72,
	0x63, 0x38, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9f, 0x05, 0x0a, 0x0d, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x10, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x62,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x65, 0x6e,
	0x6f, 0x64, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x43, 0x0a,
	0x0f, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0e, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x72, 0x66, 0x5f, 0x74, 0x78, 0x5f, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x72, 0x66, 0x54, 0x78, 0x4f, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x67, 0x70, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x67, 0x70, 0x73,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x74, 0x70,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x70, 0x74,
	0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x6d, 0x6d,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6d,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x11, 0x65,
	0x6e, 0x6f, 0x64, 0x65, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x10, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x67, 0x70, 0x73, 0x5f, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x67, 0x70, 0x73, 0x4c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x67, 0x70, 0x73, 0x5f, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x67, 0x70, 0x73, 0x4c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x72, 0x66, 0x5f, 0x74, 0x78, 0x5f,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72, 0x66, 0x54, 0x78, 0x44,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f,
	0x72, 0x63, 0x38, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb3, 0x03, 0x0a, 0x0b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f,
	0x72, 0x63, 0x38, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x26,
	0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x63, 0x73, 0x22, 0x4f, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x4c, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54,
	0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x04, 0x22, 0x48, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x0f, 0x0a, 0x0b,
	0x41, 0x50, 0x50, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x41, 0x50, 0x50, 0x5f, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x50, 0x50, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10,
	0x02, 0x22, 0x3e, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38,
	0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x22, 0x2c, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x22,
	0xce, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x68, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x0e,
	0x52, 0x45, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x4c, 0x4f,
	0x41, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x03,
	0x22, 0x67, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x32, 0xf2, 0x03, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x33, 0x30, 0x33, 0x12, 0x3f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f,
	0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x18, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63,
	0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x1d, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x22, 0x00, 0x12, 0x40,
	0x0a, 0x0b, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x11, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00,
	0x12, 0x41, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x69, 0x74, 0x79, 0x12, 0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38,
	0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x1a, 0x11,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69,
	0x64, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x21, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x29, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x1b, 0x5a, 0x19, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2f, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x67, 0x6f,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_orc8r_protos_service303_proto_rawDescOnce sync.Once
	file_orc8r_protos_service303_proto_rawDescData = file_orc8r_protos_service303_proto_rawDesc
)

func file_orc8r_protos_service303_proto_rawDescGZIP() []byte {
	file_orc8r_protos_service303_proto_rawDescOnce.Do(func() {
		file_orc8r_protos_service303_proto_rawDescData = protoimpl.X.CompressGZIP(file_orc8r_protos_service303_proto_rawDescData)
	})
	return file_orc8r_protos_service303_proto_rawDescData
}

var file_orc8r_protos_service303_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_orc8r_protos_service303_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_orc8r_protos_service303_proto_goTypes = []interface{}{
	(ServiceInfo_ServiceState)(0),                // 0: magma.orc8r.ServiceInfo.ServiceState
	(ServiceInfo_ApplicationHealth)(0),           // 1: magma.orc8r.ServiceInfo.ApplicationHealth
	(ReloadConfigResponse_ReloadConfigResult)(0), // 2: magma.orc8r.ReloadConfigResponse.ReloadConfigResult
	(*EnodebdStatus)(nil),                        // 3: magma.orc8r.EnodebdStatus
	(*ServiceStatus)(nil),                        // 4: magma.orc8r.ServiceStatus
	(*ServiceInfo)(nil),                          // 5: magma.orc8r.ServiceInfo
	(*LogLevelMessage)(nil),                      // 6: magma.orc8r.LogLevelMessage
	(*LogVerbosity)(nil),                         // 7: magma.orc8r.LogVerbosity
	(*ReloadConfigResponse)(nil),                 // 8: magma.orc8r.ReloadConfigResponse
	(*State)(nil),                                // 9: magma.orc8r.State
	(*GetOperationalStatesResponse)(nil),         // 10: magma.orc8r.GetOperationalStatesResponse
	nil,                                          // 11: magma.orc8r.ServiceStatus.MetaEntry
	(*wrappers.BoolValue)(nil),                   // 12: google.protobuf.BoolValue
	(*wrappers.FloatValue)(nil),                  // 13: google.protobuf.FloatValue
	(LogLevel)(0),                                // 14: magma.orc8r.LogLevel
	(*Void)(nil),                                 // 15: magma.orc8r.Void
	(*MetricsContainer)(nil),                     // 16: magma.orc8r.MetricsContainer
}
var file_orc8r_protos_service303_proto_depIdxs = []int32{
	12, // 0: magma.orc8r.EnodebdStatus.enodeb_connected:type_name -> google.protobuf.BoolValue
	12, // 1: magma.orc8r.EnodebdStatus.opstate_enabled:type_name -> google.protobuf.BoolValue
	12, // 2: magma.orc8r.EnodebdStatus.rf_tx_on:type_name -> google.protobuf.BoolValue
	12, // 3: magma.orc8r.EnodebdStatus.gps_connected:type_name -> google.protobuf.BoolValue
	12, // 4: magma.orc8r.EnodebdStatus.ptp_connected:type_name -> google.protobuf.BoolValue
	12, // 5: magma.orc8r.EnodebdStatus.mme_connected:type_name -> google.protobuf.BoolValue
	12, // 6: magma.orc8r.EnodebdStatus.enodeb_configured:type_name -> google.protobuf.BoolValue
	13, // 7: magma.orc8r.EnodebdStatus.gps_latitude:type_name -> google.protobuf.FloatValue
	13, // 8: magma.orc8r.EnodebdStatus.gps_longitude:type_name -> google.protobuf.FloatValue
	12, // 9: magma.orc8r.EnodebdStatus.rf_tx_desired:type_name -> google.protobuf.BoolValue
	11, // 10: magma.orc8r.ServiceStatus.meta:type_name -> magma.orc8r.ServiceStatus.MetaEntry
	0,  // 11: magma.orc8r.ServiceInfo.state:type_name -> magma.orc8r.ServiceInfo.ServiceState
	4,  // 12: magma.orc8r.ServiceInfo.status:type_name -> magma.orc8r.ServiceStatus
	1,  // 13: magma.orc8r.ServiceInfo.health:type_name -> magma.orc8r.ServiceInfo.ApplicationHealth
	14, // 14: magma.orc8r.LogLevelMessage.level:type_name -> magma.orc8r.LogLevel
	2,  // 15: magma.orc8r.ReloadConfigResponse.result:type_name -> magma.orc8r.ReloadConfigResponse.ReloadConfigResult
	9,  // 16: magma.orc8r.GetOperationalStatesResponse.states:type_name -> magma.orc8r.State
	15, // 17: magma.orc8r.Service303.GetServiceInfo:input_type -> magma.orc8r.Void
	15, // 18: magma.orc8r.Service303.StopService:input_type -> magma.orc8r.Void
	15, // 19: magma.orc8r.Service303.GetMetrics:input_type -> magma.orc8r.Void
	6,  // 20: magma.orc8r.Service303.SetLogLevel:input_type -> magma.orc8r.LogLevelMessage
	7,  // 21: magma.orc8r.Service303.SetLogVerbosity:input_type -> magma.orc8r.LogVerbosity
	15, // 22: magma.orc8r.Service303.ReloadServiceConfig:input_type -> magma.orc8r.Void
	15, // 23: magma.orc8r.Service303.GetOperationalStates:input_type -> magma.orc8r.Void
	5,  // 24: magma.orc8r.Service303.GetServiceInfo:output_type -> magma.orc8r.ServiceInfo
	15, // 25: magma.orc8r.Service303.StopService:output_type -> magma.orc8r.Void
	16, // 26: magma.orc8r.Service303.GetMetrics:output_type -> magma.orc8r.MetricsContainer
	15, // 27: magma.orc8r.Service303.SetLogLevel:output_type -> magma.orc8r.Void
	15, // 28: magma.orc8r.Service303.SetLogVerbosity:output_type -> magma.orc8r.Void
	8,  // 29: magma.orc8r.Service303.ReloadServiceConfig:output_type -> magma.orc8r.ReloadConfigResponse
	10, // 30: magma.orc8r.Service303.GetOperationalStates:output_type -> magma.orc8r.GetOperationalStatesResponse
	24, // [24:31] is the sub-list for method output_type
	17, // [17:24] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_orc8r_protos_service303_proto_init() }
func file_orc8r_protos_service303_proto_init() {
	if File_orc8r_protos_service303_proto != nil {
		return
	}
	file_orc8r_protos_common_proto_init()
	file_orc8r_protos_metricsd_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_orc8r_protos_service303_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnodebdStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_service303_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_service303_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_service303_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogLevelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_service303_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogVerbosity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_service303_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReloadConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_service303_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_service303_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOperationalStatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_orc8r_protos_service303_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_orc8r_protos_service303_proto_goTypes,
		DependencyIndexes: file_orc8r_protos_service303_proto_depIdxs,
		EnumInfos:         file_orc8r_protos_service303_proto_enumTypes,
		MessageInfos:      file_orc8r_protos_service303_proto_msgTypes,
	}.Build()
	File_orc8r_protos_service303_proto = out.File
	file_orc8r_protos_service303_proto_rawDesc = nil
	file_orc8r_protos_service303_proto_goTypes = nil
	file_orc8r_protos_service303_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// Service303Client is the client API for Service303 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Service303Client interface {
	// Returns the service level info like name, version, state, status, etc.
	//
	GetServiceInfo(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ServiceInfo, error)
	// Request to stop the service gracefully.
	//
	StopService(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	// Collects metrics from the service
	GetMetrics(ctx context.Context, in *Void, opts ...grpc.CallOption) (*MetricsContainer, error)
	// Set logging level
	SetLogLevel(ctx context.Context, in *LogLevelMessage, opts ...grpc.CallOption) (*Void, error)
	// Set logging verbosity The larger, the more verbose. default 0
	SetLogVerbosity(ctx context.Context, in *LogVerbosity, opts ...grpc.CallOption) (*Void, error)
	// Requests service reloads config files loaded on startup (<servicename>.yml)
	ReloadServiceConfig(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ReloadConfigResponse, error)
	// Returns the  operational states of devices managed by this service.
	GetOperationalStates(ctx context.Context, in *Void, opts ...grpc.CallOption) (*GetOperationalStatesResponse, error)
}

type service303Client struct {
	cc grpc.ClientConnInterface
}

func NewService303Client(cc grpc.ClientConnInterface) Service303Client {
	return &service303Client{cc}
}

func (c *service303Client) GetServiceInfo(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ServiceInfo, error) {
	out := new(ServiceInfo)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Service303/GetServiceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service303Client) StopService(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Service303/StopService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service303Client) GetMetrics(ctx context.Context, in *Void, opts ...grpc.CallOption) (*MetricsContainer, error) {
	out := new(MetricsContainer)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Service303/GetMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service303Client) SetLogLevel(ctx context.Context, in *LogLevelMessage, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Service303/SetLogLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service303Client) SetLogVerbosity(ctx context.Context, in *LogVerbosity, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Service303/SetLogVerbosity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service303Client) ReloadServiceConfig(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ReloadConfigResponse, error) {
	out := new(ReloadConfigResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Service303/ReloadServiceConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service303Client) GetOperationalStates(ctx context.Context, in *Void, opts ...grpc.CallOption) (*GetOperationalStatesResponse, error) {
	out := new(GetOperationalStatesResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Service303/GetOperationalStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service303Server is the server API for Service303 service.
type Service303Server interface {
	// Returns the service level info like name, version, state, status, etc.
	//
	GetServiceInfo(context.Context, *Void) (*ServiceInfo, error)
	// Request to stop the service gracefully.
	//
	StopService(context.Context, *Void) (*Void, error)
	// Collects metrics from the service
	GetMetrics(context.Context, *Void) (*MetricsContainer, error)
	// Set logging level
	SetLogLevel(context.Context, *LogLevelMessage) (*Void, error)
	// Set logging verbosity The larger, the more verbose. default 0
	SetLogVerbosity(context.Context, *LogVerbosity) (*Void, error)
	// Requests service reloads config files loaded on startup (<servicename>.yml)
	ReloadServiceConfig(context.Context, *Void) (*ReloadConfigResponse, error)
	// Returns the  operational states of devices managed by this service.
	GetOperationalStates(context.Context, *Void) (*GetOperationalStatesResponse, error)
}

// UnimplementedService303Server can be embedded to have forward compatible implementations.
type UnimplementedService303Server struct {
}

func (*UnimplementedService303Server) GetServiceInfo(context.Context, *Void) (*ServiceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceInfo not implemented")
}
func (*UnimplementedService303Server) StopService(context.Context, *Void) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopService not implemented")
}
func (*UnimplementedService303Server) GetMetrics(context.Context, *Void) (*MetricsContainer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (*UnimplementedService303Server) SetLogLevel(context.Context, *LogLevelMessage) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLogLevel not implemented")
}
func (*UnimplementedService303Server) SetLogVerbosity(context.Context, *LogVerbosity) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLogVerbosity not implemented")
}
func (*UnimplementedService303Server) ReloadServiceConfig(context.Context, *Void) (*ReloadConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadServiceConfig not implemented")
}
func (*UnimplementedService303Server) GetOperationalStates(context.Context, *Void) (*GetOperationalStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperationalStates not implemented")
}

func RegisterService303Server(s *grpc.Server, srv Service303Server) {
	s.RegisterService(&_Service303_serviceDesc, srv)
}

func _Service303_GetServiceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Service303Server).GetServiceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Service303/GetServiceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Service303Server).GetServiceInfo(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service303_StopService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Service303Server).StopService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Service303/StopService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Service303Server).StopService(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service303_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Service303Server).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Service303/GetMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Service303Server).GetMetrics(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service303_SetLogLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogLevelMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Service303Server).SetLogLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Service303/SetLogLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Service303Server).SetLogLevel(ctx, req.(*LogLevelMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service303_SetLogVerbosity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogVerbosity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Service303Server).SetLogVerbosity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Service303/SetLogVerbosity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Service303Server).SetLogVerbosity(ctx, req.(*LogVerbosity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service303_ReloadServiceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Service303Server).ReloadServiceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Service303/ReloadServiceConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Service303Server).ReloadServiceConfig(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service303_GetOperationalStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Service303Server).GetOperationalStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Service303/GetOperationalStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Service303Server).GetOperationalStates(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service303_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.Service303",
	HandlerType: (*Service303Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServiceInfo",
			Handler:    _Service303_GetServiceInfo_Handler,
		},
		{
			MethodName: "StopService",
			Handler:    _Service303_StopService_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _Service303_GetMetrics_Handler,
		},
		{
			MethodName: "SetLogLevel",
			Handler:    _Service303_SetLogLevel_Handler,
		},
		{
			MethodName: "SetLogVerbosity",
			Handler:    _Service303_SetLogVerbosity_Handler,
		},
		{
			MethodName: "ReloadServiceConfig",
			Handler:    _Service303_ReloadServiceConfig_Handler,
		},
		{
			MethodName: "GetOperationalStates",
			Handler:    _Service303_GetOperationalStates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orc8r/protos/service303.proto",
}
