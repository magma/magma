// Code generated by protoc-gen-go. DO NOT EDIT.
// source: orc8r/protos/bootstrapper.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ChallengeKey_KeyType int32

const (
	ChallengeKey_ECHO                  ChallengeKey_KeyType = 0
	ChallengeKey_SOFTWARE_RSA_SHA256   ChallengeKey_KeyType = 1
	ChallengeKey_SOFTWARE_ECDSA_SHA256 ChallengeKey_KeyType = 2
)

var ChallengeKey_KeyType_name = map[int32]string{
	0: "ECHO",
	1: "SOFTWARE_RSA_SHA256",
	2: "SOFTWARE_ECDSA_SHA256",
}

var ChallengeKey_KeyType_value = map[string]int32{
	"ECHO":                  0,
	"SOFTWARE_RSA_SHA256":   1,
	"SOFTWARE_ECDSA_SHA256": 2,
}

func (x ChallengeKey_KeyType) String() string {
	return proto.EnumName(ChallengeKey_KeyType_name, int32(x))
}

func (ChallengeKey_KeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b592b3c4e9ae6813, []int{1, 0}
}

// --------------------------------------------------------------------------
// Protos for Bootstrapper servicer
// --------------------------------------------------------------------------
type Challenge struct {
	KeyType              ChallengeKey_KeyType `protobuf:"varint,1,opt,name=key_type,json=keyType,proto3,enum=magma.orc8r.ChallengeKey_KeyType" json:"key_type,omitempty"`
	Challenge            []byte               `protobuf:"bytes,2,opt,name=challenge,proto3" json:"challenge,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Challenge) Reset()         { *m = Challenge{} }
func (m *Challenge) String() string { return proto.CompactTextString(m) }
func (*Challenge) ProtoMessage()    {}
func (*Challenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_b592b3c4e9ae6813, []int{0}
}

func (m *Challenge) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Challenge.Unmarshal(m, b)
}
func (m *Challenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Challenge.Marshal(b, m, deterministic)
}
func (m *Challenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Challenge.Merge(m, src)
}
func (m *Challenge) XXX_Size() int {
	return xxx_messageInfo_Challenge.Size(m)
}
func (m *Challenge) XXX_DiscardUnknown() {
	xxx_messageInfo_Challenge.DiscardUnknown(m)
}

var xxx_messageInfo_Challenge proto.InternalMessageInfo

func (m *Challenge) GetKeyType() ChallengeKey_KeyType {
	if m != nil {
		return m.KeyType
	}
	return ChallengeKey_ECHO
}

func (m *Challenge) GetChallenge() []byte {
	if m != nil {
		return m.Challenge
	}
	return nil
}

// Challenge key stores the key used for challenge-response during bootstrap.
type ChallengeKey struct {
	KeyType ChallengeKey_KeyType `protobuf:"varint,1,opt,name=key_type,json=keyType,proto3,enum=magma.orc8r.ChallengeKey_KeyType" json:"key_type,omitempty"`
	// Public key encoded in DER format
	Key                  []byte   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChallengeKey) Reset()         { *m = ChallengeKey{} }
func (m *ChallengeKey) String() string { return proto.CompactTextString(m) }
func (*ChallengeKey) ProtoMessage()    {}
func (*ChallengeKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_b592b3c4e9ae6813, []int{1}
}

func (m *ChallengeKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChallengeKey.Unmarshal(m, b)
}
func (m *ChallengeKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChallengeKey.Marshal(b, m, deterministic)
}
func (m *ChallengeKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeKey.Merge(m, src)
}
func (m *ChallengeKey) XXX_Size() int {
	return xxx_messageInfo_ChallengeKey.Size(m)
}
func (m *ChallengeKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeKey.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeKey proto.InternalMessageInfo

func (m *ChallengeKey) GetKeyType() ChallengeKey_KeyType {
	if m != nil {
		return m.KeyType
	}
	return ChallengeKey_ECHO
}

func (m *ChallengeKey) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type Response struct {
	HwId      *AccessGatewayID `protobuf:"bytes,1,opt,name=hw_id,json=hwId,proto3" json:"hw_id,omitempty"`
	Challenge []byte           `protobuf:"bytes,2,opt,name=challenge,proto3" json:"challenge,omitempty"`
	// Types that are valid to be assigned to Response:
	//	*Response_EchoResponse
	//	*Response_RsaResponse
	//	*Response_EcdsaResponse
	Response             isResponse_Response `protobuf_oneof:"response"`
	Csr                  *CSR                `protobuf:"bytes,6,opt,name=csr,proto3" json:"csr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_b592b3c4e9ae6813, []int{2}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetHwId() *AccessGatewayID {
	if m != nil {
		return m.HwId
	}
	return nil
}

func (m *Response) GetChallenge() []byte {
	if m != nil {
		return m.Challenge
	}
	return nil
}

type isResponse_Response interface {
	isResponse_Response()
}

type Response_EchoResponse struct {
	EchoResponse *Response_Echo `protobuf:"bytes,3,opt,name=echo_response,json=echoResponse,proto3,oneof"`
}

type Response_RsaResponse struct {
	RsaResponse *Response_RSA `protobuf:"bytes,4,opt,name=rsa_response,json=rsaResponse,proto3,oneof"`
}

type Response_EcdsaResponse struct {
	EcdsaResponse *Response_ECDSA `protobuf:"bytes,5,opt,name=ecdsa_response,json=ecdsaResponse,proto3,oneof"`
}

func (*Response_EchoResponse) isResponse_Response() {}

func (*Response_RsaResponse) isResponse_Response() {}

func (*Response_EcdsaResponse) isResponse_Response() {}

func (m *Response) GetResponse() isResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *Response) GetEchoResponse() *Response_Echo {
	if x, ok := m.GetResponse().(*Response_EchoResponse); ok {
		return x.EchoResponse
	}
	return nil
}

func (m *Response) GetRsaResponse() *Response_RSA {
	if x, ok := m.GetResponse().(*Response_RsaResponse); ok {
		return x.RsaResponse
	}
	return nil
}

func (m *Response) GetEcdsaResponse() *Response_ECDSA {
	if x, ok := m.GetResponse().(*Response_EcdsaResponse); ok {
		return x.EcdsaResponse
	}
	return nil
}

func (m *Response) GetCsr() *CSR {
	if m != nil {
		return m.Csr
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Response) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Response_EchoResponse)(nil),
		(*Response_RsaResponse)(nil),
		(*Response_EcdsaResponse)(nil),
	}
}

type Response_Echo struct {
	Response             []byte   `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response_Echo) Reset()         { *m = Response_Echo{} }
func (m *Response_Echo) String() string { return proto.CompactTextString(m) }
func (*Response_Echo) ProtoMessage()    {}
func (*Response_Echo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b592b3c4e9ae6813, []int{2, 0}
}

func (m *Response_Echo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response_Echo.Unmarshal(m, b)
}
func (m *Response_Echo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response_Echo.Marshal(b, m, deterministic)
}
func (m *Response_Echo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response_Echo.Merge(m, src)
}
func (m *Response_Echo) XXX_Size() int {
	return xxx_messageInfo_Response_Echo.Size(m)
}
func (m *Response_Echo) XXX_DiscardUnknown() {
	xxx_messageInfo_Response_Echo.DiscardUnknown(m)
}

var xxx_messageInfo_Response_Echo proto.InternalMessageInfo

func (m *Response_Echo) GetResponse() []byte {
	if m != nil {
		return m.Response
	}
	return nil
}

type Response_RSA struct {
	Signature            []byte   `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response_RSA) Reset()         { *m = Response_RSA{} }
func (m *Response_RSA) String() string { return proto.CompactTextString(m) }
func (*Response_RSA) ProtoMessage()    {}
func (*Response_RSA) Descriptor() ([]byte, []int) {
	return fileDescriptor_b592b3c4e9ae6813, []int{2, 1}
}

func (m *Response_RSA) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response_RSA.Unmarshal(m, b)
}
func (m *Response_RSA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response_RSA.Marshal(b, m, deterministic)
}
func (m *Response_RSA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response_RSA.Merge(m, src)
}
func (m *Response_RSA) XXX_Size() int {
	return xxx_messageInfo_Response_RSA.Size(m)
}
func (m *Response_RSA) XXX_DiscardUnknown() {
	xxx_messageInfo_Response_RSA.DiscardUnknown(m)
}

var xxx_messageInfo_Response_RSA proto.InternalMessageInfo

func (m *Response_RSA) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Response_ECDSA struct {
	R                    []byte   `protobuf:"bytes,1,opt,name=r,proto3" json:"r,omitempty"`
	S                    []byte   `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response_ECDSA) Reset()         { *m = Response_ECDSA{} }
func (m *Response_ECDSA) String() string { return proto.CompactTextString(m) }
func (*Response_ECDSA) ProtoMessage()    {}
func (*Response_ECDSA) Descriptor() ([]byte, []int) {
	return fileDescriptor_b592b3c4e9ae6813, []int{2, 2}
}

func (m *Response_ECDSA) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response_ECDSA.Unmarshal(m, b)
}
func (m *Response_ECDSA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response_ECDSA.Marshal(b, m, deterministic)
}
func (m *Response_ECDSA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response_ECDSA.Merge(m, src)
}
func (m *Response_ECDSA) XXX_Size() int {
	return xxx_messageInfo_Response_ECDSA.Size(m)
}
func (m *Response_ECDSA) XXX_DiscardUnknown() {
	xxx_messageInfo_Response_ECDSA.DiscardUnknown(m)
}

var xxx_messageInfo_Response_ECDSA proto.InternalMessageInfo

func (m *Response_ECDSA) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *Response_ECDSA) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

type GetTokenRequest struct {
	Gateway *GatewayInfo `protobuf:"bytes,1,opt,name=gateway,proto3" json:"gateway,omitempty"`
	// refresh is true if a new token should be generated regardless of old token timeout
	Refresh              bool     `protobuf:"varint,2,opt,name=refresh,proto3" json:"refresh,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTokenRequest) Reset()         { *m = GetTokenRequest{} }
func (m *GetTokenRequest) String() string { return proto.CompactTextString(m) }
func (*GetTokenRequest) ProtoMessage()    {}
func (*GetTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b592b3c4e9ae6813, []int{3}
}

func (m *GetTokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTokenRequest.Unmarshal(m, b)
}
func (m *GetTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTokenRequest.Marshal(b, m, deterministic)
}
func (m *GetTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTokenRequest.Merge(m, src)
}
func (m *GetTokenRequest) XXX_Size() int {
	return xxx_messageInfo_GetTokenRequest.Size(m)
}
func (m *GetTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTokenRequest proto.InternalMessageInfo

func (m *GetTokenRequest) GetGateway() *GatewayInfo {
	if m != nil {
		return m.Gateway
	}
	return nil
}

func (m *GetTokenRequest) GetRefresh() bool {
	if m != nil {
		return m.Refresh
	}
	return false
}

type GetTokenResponse struct {
	// token is a nonce prepended by bootstrapper.tokenPrepend
	Token                string               `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Timeout              *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetTokenResponse) Reset()         { *m = GetTokenResponse{} }
func (m *GetTokenResponse) String() string { return proto.CompactTextString(m) }
func (*GetTokenResponse) ProtoMessage()    {}
func (*GetTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b592b3c4e9ae6813, []int{4}
}

func (m *GetTokenResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTokenResponse.Unmarshal(m, b)
}
func (m *GetTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTokenResponse.Marshal(b, m, deterministic)
}
func (m *GetTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTokenResponse.Merge(m, src)
}
func (m *GetTokenResponse) XXX_Size() int {
	return xxx_messageInfo_GetTokenResponse.Size(m)
}
func (m *GetTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTokenResponse proto.InternalMessageInfo

func (m *GetTokenResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *GetTokenResponse) GetTimeout() *timestamp.Timestamp {
	if m != nil {
		return m.Timeout
	}
	return nil
}

type GetGatewayRegistrationInfoRequest struct {
	NetworkId string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// token is a nonce prepended by bootstrapper.tokenPrepend
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetGatewayRegistrationInfoRequest) Reset()         { *m = GetGatewayRegistrationInfoRequest{} }
func (m *GetGatewayRegistrationInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetGatewayRegistrationInfoRequest) ProtoMessage()    {}
func (*GetGatewayRegistrationInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b592b3c4e9ae6813, []int{5}
}

func (m *GetGatewayRegistrationInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetGatewayRegistrationInfoRequest.Unmarshal(m, b)
}
func (m *GetGatewayRegistrationInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetGatewayRegistrationInfoRequest.Marshal(b, m, deterministic)
}
func (m *GetGatewayRegistrationInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGatewayRegistrationInfoRequest.Merge(m, src)
}
func (m *GetGatewayRegistrationInfoRequest) XXX_Size() int {
	return xxx_messageInfo_GetGatewayRegistrationInfoRequest.Size(m)
}
func (m *GetGatewayRegistrationInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGatewayRegistrationInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetGatewayRegistrationInfoRequest proto.InternalMessageInfo

func (m *GetGatewayRegistrationInfoRequest) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *GetGatewayRegistrationInfoRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type GetGatewayRegistrationInfoResponse struct {
	// Types that are valid to be assigned to Response:
	//	*GetGatewayRegistrationInfoResponse_GatewayRegistrationInfo
	//	*GetGatewayRegistrationInfoResponse_Error
	Response             isGetGatewayRegistrationInfoResponse_Response `protobuf_oneof:"response"`
	XXX_NoUnkeyedLiteral struct{}                                      `json:"-"`
	XXX_unrecognized     []byte                                        `json:"-"`
	XXX_sizecache        int32                                         `json:"-"`
}

func (m *GetGatewayRegistrationInfoResponse) Reset()         { *m = GetGatewayRegistrationInfoResponse{} }
func (m *GetGatewayRegistrationInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetGatewayRegistrationInfoResponse) ProtoMessage()    {}
func (*GetGatewayRegistrationInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b592b3c4e9ae6813, []int{6}
}

func (m *GetGatewayRegistrationInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetGatewayRegistrationInfoResponse.Unmarshal(m, b)
}
func (m *GetGatewayRegistrationInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetGatewayRegistrationInfoResponse.Marshal(b, m, deterministic)
}
func (m *GetGatewayRegistrationInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGatewayRegistrationInfoResponse.Merge(m, src)
}
func (m *GetGatewayRegistrationInfoResponse) XXX_Size() int {
	return xxx_messageInfo_GetGatewayRegistrationInfoResponse.Size(m)
}
func (m *GetGatewayRegistrationInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGatewayRegistrationInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetGatewayRegistrationInfoResponse proto.InternalMessageInfo

type isGetGatewayRegistrationInfoResponse_Response interface {
	isGetGatewayRegistrationInfoResponse_Response()
}

type GetGatewayRegistrationInfoResponse_GatewayRegistrationInfo struct {
	GatewayRegistrationInfo *GatewayRegistrationInfo `protobuf:"bytes,1,opt,name=gatewayRegistrationInfo,proto3,oneof"`
}

type GetGatewayRegistrationInfoResponse_Error struct {
	Error string `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*GetGatewayRegistrationInfoResponse_GatewayRegistrationInfo) isGetGatewayRegistrationInfoResponse_Response() {
}

func (*GetGatewayRegistrationInfoResponse_Error) isGetGatewayRegistrationInfoResponse_Response() {}

func (m *GetGatewayRegistrationInfoResponse) GetResponse() isGetGatewayRegistrationInfoResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *GetGatewayRegistrationInfoResponse) GetGatewayRegistrationInfo() *GatewayRegistrationInfo {
	if x, ok := m.GetResponse().(*GetGatewayRegistrationInfoResponse_GatewayRegistrationInfo); ok {
		return x.GatewayRegistrationInfo
	}
	return nil
}

func (m *GetGatewayRegistrationInfoResponse) GetError() string {
	if x, ok := m.GetResponse().(*GetGatewayRegistrationInfoResponse_Error); ok {
		return x.Error
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetGatewayRegistrationInfoResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetGatewayRegistrationInfoResponse_GatewayRegistrationInfo)(nil),
		(*GetGatewayRegistrationInfoResponse_Error)(nil),
	}
}

type RegisterRequest struct {
	// token is a nonce prepended by bootstrapper.tokenPrepend
	Token string           `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Hwid  *AccessGatewayID `protobuf:"bytes,2,opt,name=hwid,proto3" json:"hwid,omitempty"`
	// challenge_key is gateway's long-term public key
	ChallengeKey         *ChallengeKey `protobuf:"bytes,3,opt,name=challenge_key,json=challengeKey,proto3" json:"challenge_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RegisterRequest) Reset()         { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()    {}
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b592b3c4e9ae6813, []int{7}
}

func (m *RegisterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterRequest.Unmarshal(m, b)
}
func (m *RegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterRequest.Marshal(b, m, deterministic)
}
func (m *RegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterRequest.Merge(m, src)
}
func (m *RegisterRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterRequest.Size(m)
}
func (m *RegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterRequest proto.InternalMessageInfo

func (m *RegisterRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *RegisterRequest) GetHwid() *AccessGatewayID {
	if m != nil {
		return m.Hwid
	}
	return nil
}

func (m *RegisterRequest) GetChallengeKey() *ChallengeKey {
	if m != nil {
		return m.ChallengeKey
	}
	return nil
}

type RegisterResponse struct {
	// Types that are valid to be assigned to Response:
	//	*RegisterResponse_ControlProxy
	//	*RegisterResponse_Error
	Response             isRegisterResponse_Response `protobuf_oneof:"response"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *RegisterResponse) Reset()         { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()    {}
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b592b3c4e9ae6813, []int{8}
}

func (m *RegisterResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterResponse.Unmarshal(m, b)
}
func (m *RegisterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterResponse.Marshal(b, m, deterministic)
}
func (m *RegisterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterResponse.Merge(m, src)
}
func (m *RegisterResponse) XXX_Size() int {
	return xxx_messageInfo_RegisterResponse.Size(m)
}
func (m *RegisterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterResponse proto.InternalMessageInfo

type isRegisterResponse_Response interface {
	isRegisterResponse_Response()
}

type RegisterResponse_ControlProxy struct {
	ControlProxy string `protobuf:"bytes,1,opt,name=control_proxy,json=controlProxy,proto3,oneof"`
}

type RegisterResponse_Error struct {
	Error string `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*RegisterResponse_ControlProxy) isRegisterResponse_Response() {}

func (*RegisterResponse_Error) isRegisterResponse_Response() {}

func (m *RegisterResponse) GetResponse() isRegisterResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *RegisterResponse) GetControlProxy() string {
	if x, ok := m.GetResponse().(*RegisterResponse_ControlProxy); ok {
		return x.ControlProxy
	}
	return ""
}

func (m *RegisterResponse) GetError() string {
	if x, ok := m.GetResponse().(*RegisterResponse_Error); ok {
		return x.Error
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RegisterResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RegisterResponse_ControlProxy)(nil),
		(*RegisterResponse_Error)(nil),
	}
}

type GatewayRegistrationInfo struct {
	Gateway              *GatewayInfo `protobuf:"bytes,1,opt,name=gateway,proto3" json:"gateway,omitempty"`
	RootCA               string       `protobuf:"bytes,2,opt,name=rootCA,proto3" json:"rootCA,omitempty"`
	DomainName           string       `protobuf:"bytes,3,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GatewayRegistrationInfo) Reset()         { *m = GatewayRegistrationInfo{} }
func (m *GatewayRegistrationInfo) String() string { return proto.CompactTextString(m) }
func (*GatewayRegistrationInfo) ProtoMessage()    {}
func (*GatewayRegistrationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b592b3c4e9ae6813, []int{9}
}

func (m *GatewayRegistrationInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayRegistrationInfo.Unmarshal(m, b)
}
func (m *GatewayRegistrationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayRegistrationInfo.Marshal(b, m, deterministic)
}
func (m *GatewayRegistrationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayRegistrationInfo.Merge(m, src)
}
func (m *GatewayRegistrationInfo) XXX_Size() int {
	return xxx_messageInfo_GatewayRegistrationInfo.Size(m)
}
func (m *GatewayRegistrationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayRegistrationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayRegistrationInfo proto.InternalMessageInfo

func (m *GatewayRegistrationInfo) GetGateway() *GatewayInfo {
	if m != nil {
		return m.Gateway
	}
	return nil
}

func (m *GatewayRegistrationInfo) GetRootCA() string {
	if m != nil {
		return m.RootCA
	}
	return ""
}

func (m *GatewayRegistrationInfo) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

type GatewayInfo struct {
	NetworkId            string           `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	LogicalId            *AccessGatewayID `protobuf:"bytes,2,opt,name=logical_id,json=logicalId,proto3" json:"logical_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GatewayInfo) Reset()         { *m = GatewayInfo{} }
func (m *GatewayInfo) String() string { return proto.CompactTextString(m) }
func (*GatewayInfo) ProtoMessage()    {}
func (*GatewayInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b592b3c4e9ae6813, []int{10}
}

func (m *GatewayInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayInfo.Unmarshal(m, b)
}
func (m *GatewayInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayInfo.Marshal(b, m, deterministic)
}
func (m *GatewayInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayInfo.Merge(m, src)
}
func (m *GatewayInfo) XXX_Size() int {
	return xxx_messageInfo_GatewayInfo.Size(m)
}
func (m *GatewayInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayInfo proto.InternalMessageInfo

func (m *GatewayInfo) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *GatewayInfo) GetLogicalId() *AccessGatewayID {
	if m != nil {
		return m.LogicalId
	}
	return nil
}

type TokenInfo struct {
	Gateway              *GatewayInfo         `protobuf:"bytes,1,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Nonce                string               `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Timeout              *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TokenInfo) Reset()         { *m = TokenInfo{} }
func (m *TokenInfo) String() string { return proto.CompactTextString(m) }
func (*TokenInfo) ProtoMessage()    {}
func (*TokenInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b592b3c4e9ae6813, []int{11}
}

func (m *TokenInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenInfo.Unmarshal(m, b)
}
func (m *TokenInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenInfo.Marshal(b, m, deterministic)
}
func (m *TokenInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenInfo.Merge(m, src)
}
func (m *TokenInfo) XXX_Size() int {
	return xxx_messageInfo_TokenInfo.Size(m)
}
func (m *TokenInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TokenInfo proto.InternalMessageInfo

func (m *TokenInfo) GetGateway() *GatewayInfo {
	if m != nil {
		return m.Gateway
	}
	return nil
}

func (m *TokenInfo) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *TokenInfo) GetTimeout() *timestamp.Timestamp {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func init() {
	proto.RegisterEnum("magma.orc8r.ChallengeKey_KeyType", ChallengeKey_KeyType_name, ChallengeKey_KeyType_value)
	proto.RegisterType((*Challenge)(nil), "magma.orc8r.Challenge")
	proto.RegisterType((*ChallengeKey)(nil), "magma.orc8r.ChallengeKey")
	proto.RegisterType((*Response)(nil), "magma.orc8r.Response")
	proto.RegisterType((*Response_Echo)(nil), "magma.orc8r.Response.Echo")
	proto.RegisterType((*Response_RSA)(nil), "magma.orc8r.Response.RSA")
	proto.RegisterType((*Response_ECDSA)(nil), "magma.orc8r.Response.ECDSA")
	proto.RegisterType((*GetTokenRequest)(nil), "magma.orc8r.GetTokenRequest")
	proto.RegisterType((*GetTokenResponse)(nil), "magma.orc8r.GetTokenResponse")
	proto.RegisterType((*GetGatewayRegistrationInfoRequest)(nil), "magma.orc8r.GetGatewayRegistrationInfoRequest")
	proto.RegisterType((*GetGatewayRegistrationInfoResponse)(nil), "magma.orc8r.GetGatewayRegistrationInfoResponse")
	proto.RegisterType((*RegisterRequest)(nil), "magma.orc8r.RegisterRequest")
	proto.RegisterType((*RegisterResponse)(nil), "magma.orc8r.RegisterResponse")
	proto.RegisterType((*GatewayRegistrationInfo)(nil), "magma.orc8r.GatewayRegistrationInfo")
	proto.RegisterType((*GatewayInfo)(nil), "magma.orc8r.GatewayInfo")
	proto.RegisterType((*TokenInfo)(nil), "magma.orc8r.TokenInfo")
}

func init() { proto.RegisterFile("orc8r/protos/bootstrapper.proto", fileDescriptor_b592b3c4e9ae6813) }

var fileDescriptor_b592b3c4e9ae6813 = []byte{
	// 937 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xef, 0x6e, 0xe2, 0x46,
	0x10, 0xb7, 0x03, 0x04, 0x18, 0x9c, 0x3b, 0xba, 0xbd, 0x4b, 0x88, 0x93, 0x53, 0xee, 0xf6, 0x5a,
	0xe9, 0x3e, 0x99, 0x96, 0xfe, 0x51, 0xa5, 0x56, 0xa7, 0x12, 0x92, 0x03, 0x74, 0x52, 0xaf, 0x5a,
	0x22, 0xf5, 0x8f, 0xd4, 0xba, 0x8e, 0xbd, 0x31, 0x16, 0xe0, 0xa5, 0xeb, 0x45, 0x94, 0x4f, 0xfd,
	0xd6, 0x2f, 0x7d, 0x81, 0xf6, 0x09, 0x2a, 0xf5, 0x31, 0xfa, 0x22, 0x7d, 0x95, 0xca, 0xeb, 0x35,
	0x36, 0x16, 0xe4, 0xa2, 0xf4, 0x13, 0xcc, 0xcc, 0x6f, 0x67, 0x7e, 0x33, 0x3b, 0x33, 0x6b, 0x38,
	0x63, 0xdc, 0xfd, 0x8c, 0xb7, 0xe7, 0x9c, 0x09, 0x16, 0xb5, 0xaf, 0x19, 0x13, 0x91, 0xe0, 0xce,
	0x7c, 0x4e, 0xb9, 0x25, 0x75, 0xa8, 0x31, 0x73, 0xfc, 0x99, 0x63, 0x49, 0x98, 0x79, 0xba, 0x81,
	0x76, 0x29, 0x17, 0xc1, 0x4d, 0x90, 0x42, 0xcd, 0x93, 0x0d, 0x6b, 0xe0, 0xd1, 0x50, 0x04, 0x62,
	0xa5, 0x8c, 0x67, 0x3e, 0x63, 0xfe, 0x94, 0x26, 0xd6, 0xeb, 0xc5, 0x4d, 0x5b, 0x04, 0x33, 0x1a,
	0x09, 0x67, 0x36, 0x4f, 0x00, 0xd8, 0x87, 0x7a, 0x6f, 0xec, 0x4c, 0xa7, 0x34, 0xf4, 0x29, 0xfa,
	0x02, 0x6a, 0x13, 0xba, 0xb2, 0xc5, 0x6a, 0x4e, 0x5b, 0xfa, 0x53, 0xfd, 0xc5, 0x83, 0xce, 0x33,
	0x2b, 0x47, 0xc4, 0x5a, 0x23, 0x5f, 0xd3, 0x95, 0xf5, 0x9a, 0xae, 0xae, 0x56, 0x73, 0x4a, 0xaa,
	0x93, 0xe4, 0x0f, 0x3a, 0x85, 0xba, 0x9b, 0x02, 0x5a, 0x7b, 0x4f, 0xf5, 0x17, 0x06, 0xc9, 0x14,
	0xf8, 0x2f, 0x1d, 0x8c, 0xfc, 0xf9, 0xff, 0x19, 0xac, 0x09, 0xa5, 0x09, 0x5d, 0xa9, 0x30, 0xf1,
	0x5f, 0xdc, 0x87, 0xaa, 0x42, 0xa1, 0x1a, 0x94, 0x2f, 0x7b, 0x83, 0x37, 0x4d, 0x0d, 0x1d, 0xc1,
	0xbb, 0xa3, 0x37, 0xaf, 0xae, 0xbe, 0xe9, 0x92, 0x4b, 0x9b, 0x8c, 0xba, 0xf6, 0x68, 0xd0, 0xed,
	0x7c, 0xf2, 0x69, 0x53, 0x47, 0xc7, 0xf0, 0x78, 0x6d, 0xb8, 0xec, 0x5d, 0x64, 0xa6, 0x3d, 0xfc,
	0x4f, 0x09, 0x6a, 0x84, 0x46, 0x73, 0x16, 0x46, 0x14, 0x7d, 0x08, 0x95, 0xf1, 0xd2, 0x0e, 0x3c,
	0x49, 0xb1, 0xd1, 0x39, 0xdd, 0xa0, 0xd8, 0x75, 0x5d, 0x1a, 0x45, 0x7d, 0x47, 0xd0, 0xa5, 0xb3,
	0x1a, 0x5e, 0x90, 0xf2, 0x78, 0x39, 0xf4, 0x6e, 0xaf, 0x03, 0xea, 0xc2, 0x01, 0x75, 0xc7, 0xcc,
	0xe6, 0x2a, 0x42, 0xab, 0x24, 0x1d, 0x9b, 0x1b, 0x8e, 0xd3, 0xf0, 0xd6, 0xa5, 0x3b, 0x66, 0x03,
	0x8d, 0x18, 0xf1, 0x91, 0x35, 0xa7, 0x97, 0x60, 0xf0, 0xc8, 0xc9, 0x3c, 0x94, 0xa5, 0x87, 0xe3,
	0xed, 0x1e, 0xc8, 0xa8, 0x3b, 0xd0, 0x48, 0x83, 0x47, 0xce, 0xfa, 0xfc, 0x05, 0x3c, 0xa0, 0xae,
	0x97, 0xf7, 0x50, 0x91, 0x1e, 0x4e, 0x76, 0x70, 0x88, 0xcb, 0x33, 0xd0, 0xc8, 0x81, 0x3c, 0xb4,
	0xf6, 0x82, 0xa1, 0xe4, 0x46, 0xbc, 0xb5, 0x2f, 0x8f, 0x36, 0x37, 0xaf, 0x6e, 0x44, 0x48, 0x6c,
	0x34, 0x31, 0x94, 0xe3, 0x0c, 0x90, 0x09, 0xb5, 0x75, 0x2c, 0x5d, 0x56, 0x64, 0x2d, 0x9b, 0xcf,
	0xa1, 0x44, 0x46, 0xdd, 0xb8, 0x6a, 0x51, 0xe0, 0x87, 0x8e, 0x58, 0xf0, 0x14, 0x93, 0x29, 0xcc,
	0xe7, 0x50, 0x91, 0x34, 0x90, 0x01, 0x3a, 0x57, 0x66, 0x9d, 0xc7, 0x52, 0xa4, 0x4a, 0xac, 0x47,
	0xe7, 0x90, 0x45, 0xc1, 0x36, 0x3c, 0xec, 0x53, 0x71, 0xc5, 0x26, 0x34, 0x24, 0xf4, 0xe7, 0x05,
	0x8d, 0x04, 0xea, 0x40, 0xd5, 0x4f, 0xae, 0x4a, 0x5d, 0x66, 0x6b, 0x83, 0x74, 0x7a, 0x8d, 0xe1,
	0x0d, 0x23, 0x29, 0x10, 0xb5, 0xa0, 0xca, 0xe9, 0x0d, 0xa7, 0xd1, 0x58, 0x86, 0xa9, 0x91, 0x54,
	0xc4, 0x3f, 0x42, 0x33, 0x0b, 0xa0, 0x4a, 0xf2, 0x08, 0x2a, 0x22, 0x56, 0x48, 0xff, 0x75, 0x92,
	0x08, 0xe8, 0x63, 0xa8, 0xc6, 0x53, 0xc7, 0x16, 0x42, 0xfa, 0x88, 0xef, 0x3a, 0x99, 0x4a, 0x2b,
	0x9d, 0x4a, 0xeb, 0x2a, 0x9d, 0x4a, 0x92, 0x42, 0xf1, 0xb7, 0xf0, 0xac, 0x4f, 0x85, 0x22, 0x45,
	0xa8, 0x1f, 0xc4, 0x1b, 0x42, 0x04, 0x2c, 0x94, 0x04, 0x55, 0x4a, 0x4f, 0x00, 0x42, 0x2a, 0x96,
	0x8c, 0x4f, 0xd2, 0x16, 0xad, 0x93, 0xba, 0xd2, 0x0c, 0xbd, 0x8c, 0xcf, 0x5e, 0x8e, 0x0f, 0xfe,
	0x5b, 0x07, 0x7c, 0x9b, 0x6b, 0x95, 0xcc, 0x4f, 0x70, 0xe4, 0x6f, 0x87, 0xa8, 0xf2, 0xbd, 0xb7,
	0xad, 0x7c, 0x45, 0xec, 0x40, 0x23, 0xbb, 0xdc, 0xa0, 0x43, 0xa8, 0x50, 0xce, 0x19, 0x4f, 0xe8,
	0x0d, 0x34, 0x92, 0x88, 0x1b, 0xf7, 0xf8, 0xa7, 0x0e, 0x0f, 0x93, 0x83, 0x94, 0xa7, 0x59, 0x6f,
	0x2f, 0xf3, 0x07, 0x50, 0x1e, 0x2f, 0x03, 0x4f, 0xd5, 0xf8, 0xad, 0x83, 0x1a, 0x78, 0xe8, 0x25,
	0x1c, 0xac, 0xe7, 0xd2, 0x8e, 0xb7, 0x49, 0x69, 0xcb, 0x20, 0xe5, 0xd7, 0x10, 0x31, 0xdc, 0x9c,
	0x84, 0x7f, 0x80, 0x66, 0x46, 0x4d, 0x55, 0xed, 0x7d, 0x38, 0x70, 0x59, 0x28, 0x38, 0x9b, 0xda,
	0x73, 0xce, 0x7e, 0x49, 0x5a, 0x2d, 0xce, 0xcd, 0x50, 0xea, 0xaf, 0x63, 0xed, 0x9d, 0x52, 0xff,
	0x4d, 0x87, 0xa3, 0x1d, 0x55, 0xbd, 0x57, 0x2f, 0x1f, 0xc2, 0x3e, 0x67, 0x4c, 0xf4, 0xba, 0xaa,
	0x1d, 0x94, 0x84, 0xce, 0xa0, 0xe1, 0xb1, 0x99, 0x13, 0x84, 0x76, 0xe8, 0xcc, 0x92, 0x7d, 0x54,
	0x27, 0x90, 0xa8, 0xbe, 0x72, 0x66, 0x14, 0x07, 0xd0, 0xc8, 0x39, 0x7c, 0x5b, 0xd3, 0x7d, 0x0e,
	0x30, 0x65, 0x7e, 0xe0, 0x3a, 0x53, 0xfb, 0x8e, 0xb7, 0x51, 0x57, 0xf8, 0xa1, 0x87, 0x7f, 0xd7,
	0xa1, 0x2e, 0x67, 0xea, 0xde, 0x59, 0x3e, 0x82, 0x4a, 0xc8, 0x42, 0x97, 0xa6, 0x3d, 0x2f, 0x85,
	0xfc, 0x0c, 0x96, 0xee, 0x3c, 0x83, 0x9d, 0x3f, 0x74, 0x30, 0xce, 0x73, 0x8f, 0x33, 0x7a, 0x05,
	0x46, 0x9f, 0x8a, 0xec, 0xc1, 0xbc, 0x35, 0x2f, 0xf3, 0x70, 0x7b, 0x23, 0x61, 0x0d, 0x7d, 0x09,
	0x0d, 0xd5, 0xcc, 0xa3, 0xc0, 0x0f, 0xd1, 0xe3, 0xad, 0x8b, 0xd7, 0xdc, 0xcc, 0xb6, 0x97, 0xbc,
	0xfb, 0xae, 0x23, 0x28, 0xd6, 0x3a, 0xff, 0xea, 0xf0, 0x4e, 0x6f, 0xca, 0x16, 0x5e, 0xbe, 0x35,
	0xd0, 0x10, 0x6a, 0xe9, 0x52, 0x2a, 0x70, 0x2b, 0x2c, 0x43, 0xf3, 0xc9, 0x0e, 0xab, 0xea, 0x3d,
	0x0d, 0xfd, 0x0a, 0xe6, 0xee, 0x25, 0x81, 0xac, 0xe2, 0xf1, 0xdb, 0x17, 0x95, 0xd9, 0xbe, 0x33,
	0x3e, 0x25, 0xd0, 0xf9, 0x0e, 0x8c, 0x62, 0x6e, 0xe9, 0xb4, 0x15, 0x72, 0x2b, 0xec, 0x87, 0x42,
	0x6e, 0xc5, 0x11, 0xc5, 0xda, 0xf9, 0xc9, 0xf7, 0xc7, 0x12, 0xd1, 0x4e, 0x3e, 0x9d, 0xa6, 0xc1,
	0x75, 0xdb, 0x67, 0xea, 0x0b, 0xea, 0x7a, 0x5f, 0xfe, 0x7e, 0xf4, 0x5f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x95, 0x17, 0xea, 0x33, 0xa4, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BootstrapperClient is the client API for Bootstrapper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BootstrapperClient interface {
	// get the challange for gateway specified in hw_id (AccessGatewayID)
	GetChallenge(ctx context.Context, in *AccessGatewayID, opts ...grpc.CallOption) (*Challenge, error)
	// send back response and csr for signing
	// Returns signed certificate.
	RequestSign(ctx context.Context, in *Response, opts ...grpc.CallOption) (*Certificate, error)
}

type bootstrapperClient struct {
	cc grpc.ClientConnInterface
}

func NewBootstrapperClient(cc grpc.ClientConnInterface) BootstrapperClient {
	return &bootstrapperClient{cc}
}

func (c *bootstrapperClient) GetChallenge(ctx context.Context, in *AccessGatewayID, opts ...grpc.CallOption) (*Challenge, error) {
	out := new(Challenge)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Bootstrapper/GetChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapperClient) RequestSign(ctx context.Context, in *Response, opts ...grpc.CallOption) (*Certificate, error) {
	out := new(Certificate)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Bootstrapper/RequestSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BootstrapperServer is the server API for Bootstrapper service.
type BootstrapperServer interface {
	// get the challange for gateway specified in hw_id (AccessGatewayID)
	GetChallenge(context.Context, *AccessGatewayID) (*Challenge, error)
	// send back response and csr for signing
	// Returns signed certificate.
	RequestSign(context.Context, *Response) (*Certificate, error)
}

// UnimplementedBootstrapperServer can be embedded to have forward compatible implementations.
type UnimplementedBootstrapperServer struct {
}

func (*UnimplementedBootstrapperServer) GetChallenge(ctx context.Context, req *AccessGatewayID) (*Challenge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChallenge not implemented")
}
func (*UnimplementedBootstrapperServer) RequestSign(ctx context.Context, req *Response) (*Certificate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestSign not implemented")
}

func RegisterBootstrapperServer(s *grpc.Server, srv BootstrapperServer) {
	s.RegisterService(&_Bootstrapper_serviceDesc, srv)
}

func _Bootstrapper_GetChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessGatewayID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapperServer).GetChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Bootstrapper/GetChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapperServer).GetChallenge(ctx, req.(*AccessGatewayID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bootstrapper_RequestSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Response)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapperServer).RequestSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Bootstrapper/RequestSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapperServer).RequestSign(ctx, req.(*Response))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bootstrapper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.Bootstrapper",
	HandlerType: (*BootstrapperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChallenge",
			Handler:    _Bootstrapper_GetChallenge_Handler,
		},
		{
			MethodName: "RequestSign",
			Handler:    _Bootstrapper_RequestSign_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orc8r/protos/bootstrapper.proto",
}

// CloudRegistrationClient is the client API for CloudRegistration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CloudRegistrationClient interface {
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error)
	GetGatewayRegistrationInfo(ctx context.Context, in *GetGatewayRegistrationInfoRequest, opts ...grpc.CallOption) (*GetGatewayRegistrationInfoResponse, error)
}

type cloudRegistrationClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudRegistrationClient(cc grpc.ClientConnInterface) CloudRegistrationClient {
	return &cloudRegistrationClient{cc}
}

func (c *cloudRegistrationClient) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error) {
	out := new(GetTokenResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.CloudRegistration/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudRegistrationClient) GetGatewayRegistrationInfo(ctx context.Context, in *GetGatewayRegistrationInfoRequest, opts ...grpc.CallOption) (*GetGatewayRegistrationInfoResponse, error) {
	out := new(GetGatewayRegistrationInfoResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.CloudRegistration/GetGatewayRegistrationInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudRegistrationServer is the server API for CloudRegistration service.
type CloudRegistrationServer interface {
	GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error)
	GetGatewayRegistrationInfo(context.Context, *GetGatewayRegistrationInfoRequest) (*GetGatewayRegistrationInfoResponse, error)
}

// UnimplementedCloudRegistrationServer can be embedded to have forward compatible implementations.
type UnimplementedCloudRegistrationServer struct {
}

func (*UnimplementedCloudRegistrationServer) GetToken(ctx context.Context, req *GetTokenRequest) (*GetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (*UnimplementedCloudRegistrationServer) GetGatewayRegistrationInfo(ctx context.Context, req *GetGatewayRegistrationInfoRequest) (*GetGatewayRegistrationInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGatewayRegistrationInfo not implemented")
}

func RegisterCloudRegistrationServer(s *grpc.Server, srv CloudRegistrationServer) {
	s.RegisterService(&_CloudRegistration_serviceDesc, srv)
}

func _CloudRegistration_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudRegistrationServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.CloudRegistration/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudRegistrationServer).GetToken(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudRegistration_GetGatewayRegistrationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayRegistrationInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudRegistrationServer).GetGatewayRegistrationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.CloudRegistration/GetGatewayRegistrationInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudRegistrationServer).GetGatewayRegistrationInfo(ctx, req.(*GetGatewayRegistrationInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudRegistration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.CloudRegistration",
	HandlerType: (*CloudRegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _CloudRegistration_GetToken_Handler,
		},
		{
			MethodName: "GetGatewayRegistrationInfo",
			Handler:    _CloudRegistration_GetGatewayRegistrationInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orc8r/protos/bootstrapper.proto",
}

// RegistrationClient is the client API for Registration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistrationClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
}

type registrationClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistrationClient(cc grpc.ClientConnInterface) RegistrationClient {
	return &registrationClient{cc}
}

func (c *registrationClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Registration/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistrationServer is the server API for Registration service.
type RegistrationServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
}

// UnimplementedRegistrationServer can be embedded to have forward compatible implementations.
type UnimplementedRegistrationServer struct {
}

func (*UnimplementedRegistrationServer) Register(ctx context.Context, req *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}

func RegisterRegistrationServer(s *grpc.Server, srv RegistrationServer) {
	s.RegisterService(&_Registration_serviceDesc, srv)
}

func _Registration_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Registration/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.Registration",
	HandlerType: (*RegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Registration_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orc8r/protos/bootstrapper.proto",
}
