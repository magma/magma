//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.10.0
// source: orc8r/protos/bootstrapper.proto

package protos

import (
	context "context"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChallengeKey_KeyType int32

const (
	ChallengeKey_ECHO                  ChallengeKey_KeyType = 0
	ChallengeKey_SOFTWARE_RSA_SHA256   ChallengeKey_KeyType = 1
	ChallengeKey_SOFTWARE_ECDSA_SHA256 ChallengeKey_KeyType = 2
)

// Enum value maps for ChallengeKey_KeyType.
var (
	ChallengeKey_KeyType_name = map[int32]string{
		0: "ECHO",
		1: "SOFTWARE_RSA_SHA256",
		2: "SOFTWARE_ECDSA_SHA256",
	}
	ChallengeKey_KeyType_value = map[string]int32{
		"ECHO":                  0,
		"SOFTWARE_RSA_SHA256":   1,
		"SOFTWARE_ECDSA_SHA256": 2,
	}
)

func (x ChallengeKey_KeyType) Enum() *ChallengeKey_KeyType {
	p := new(ChallengeKey_KeyType)
	*p = x
	return p
}

func (x ChallengeKey_KeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChallengeKey_KeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_orc8r_protos_bootstrapper_proto_enumTypes[0].Descriptor()
}

func (ChallengeKey_KeyType) Type() protoreflect.EnumType {
	return &file_orc8r_protos_bootstrapper_proto_enumTypes[0]
}

func (x ChallengeKey_KeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChallengeKey_KeyType.Descriptor instead.
func (ChallengeKey_KeyType) EnumDescriptor() ([]byte, []int) {
	return file_orc8r_protos_bootstrapper_proto_rawDescGZIP(), []int{1, 0}
}

// --------------------------------------------------------------------------
// Protos for Bootstrapper servicer
// --------------------------------------------------------------------------
type Challenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyType   ChallengeKey_KeyType `protobuf:"varint,1,opt,name=key_type,json=keyType,proto3,enum=magma.orc8r.ChallengeKey_KeyType" json:"key_type,omitempty"`
	Challenge []byte               `protobuf:"bytes,2,opt,name=challenge,proto3" json:"challenge,omitempty"`
}

func (x *Challenge) Reset() {
	*x = Challenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_bootstrapper_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Challenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Challenge) ProtoMessage() {}

func (x *Challenge) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_bootstrapper_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Challenge.ProtoReflect.Descriptor instead.
func (*Challenge) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_bootstrapper_proto_rawDescGZIP(), []int{0}
}

func (x *Challenge) GetKeyType() ChallengeKey_KeyType {
	if x != nil {
		return x.KeyType
	}
	return ChallengeKey_ECHO
}

func (x *Challenge) GetChallenge() []byte {
	if x != nil {
		return x.Challenge
	}
	return nil
}

// Challenge key stores the key used for challenge-response during bootstrap.
type ChallengeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyType ChallengeKey_KeyType `protobuf:"varint,1,opt,name=key_type,json=keyType,proto3,enum=magma.orc8r.ChallengeKey_KeyType" json:"key_type,omitempty"`
	// Public key encoded in DER format
	Key []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ChallengeKey) Reset() {
	*x = ChallengeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_bootstrapper_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeKey) ProtoMessage() {}

func (x *ChallengeKey) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_bootstrapper_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeKey.ProtoReflect.Descriptor instead.
func (*ChallengeKey) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_bootstrapper_proto_rawDescGZIP(), []int{1}
}

func (x *ChallengeKey) GetKeyType() ChallengeKey_KeyType {
	if x != nil {
		return x.KeyType
	}
	return ChallengeKey_ECHO
}

func (x *ChallengeKey) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HwId      *AccessGatewayID `protobuf:"bytes,1,opt,name=hw_id,json=hwId,proto3" json:"hw_id,omitempty"`
	Challenge []byte           `protobuf:"bytes,2,opt,name=challenge,proto3" json:"challenge,omitempty"`
	// Types that are assignable to Response:
	//	*Response_EchoResponse
	//	*Response_RsaResponse
	//	*Response_EcdsaResponse
	Response isResponse_Response `protobuf_oneof:"response"`
	Csr      *CSR                `protobuf:"bytes,6,opt,name=csr,proto3" json:"csr,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_bootstrapper_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_bootstrapper_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_bootstrapper_proto_rawDescGZIP(), []int{2}
}

func (x *Response) GetHwId() *AccessGatewayID {
	if x != nil {
		return x.HwId
	}
	return nil
}

func (x *Response) GetChallenge() []byte {
	if x != nil {
		return x.Challenge
	}
	return nil
}

func (m *Response) GetResponse() isResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *Response) GetEchoResponse() *Response_Echo {
	if x, ok := x.GetResponse().(*Response_EchoResponse); ok {
		return x.EchoResponse
	}
	return nil
}

func (x *Response) GetRsaResponse() *Response_RSA {
	if x, ok := x.GetResponse().(*Response_RsaResponse); ok {
		return x.RsaResponse
	}
	return nil
}

func (x *Response) GetEcdsaResponse() *Response_ECDSA {
	if x, ok := x.GetResponse().(*Response_EcdsaResponse); ok {
		return x.EcdsaResponse
	}
	return nil
}

func (x *Response) GetCsr() *CSR {
	if x != nil {
		return x.Csr
	}
	return nil
}

type isResponse_Response interface {
	isResponse_Response()
}

type Response_EchoResponse struct {
	EchoResponse *Response_Echo `protobuf:"bytes,3,opt,name=echo_response,json=echoResponse,proto3,oneof"`
}

type Response_RsaResponse struct {
	RsaResponse *Response_RSA `protobuf:"bytes,4,opt,name=rsa_response,json=rsaResponse,proto3,oneof"`
}

type Response_EcdsaResponse struct {
	EcdsaResponse *Response_ECDSA `protobuf:"bytes,5,opt,name=ecdsa_response,json=ecdsaResponse,proto3,oneof"`
}

func (*Response_EchoResponse) isResponse_Response() {}

func (*Response_RsaResponse) isResponse_Response() {}

func (*Response_EcdsaResponse) isResponse_Response() {}

type GetTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gateway_device_info contains basic info that an access gateway (AGW) needs to register
	GatewayDeviceInfo *GatewayDeviceInfo `protobuf:"bytes,1,opt,name=gateway_device_info,json=gatewayDeviceInfo,proto3" json:"gateway_device_info,omitempty"`
	// refresh is true if a new token should be generated regardless of old token timeout
	Refresh bool `protobuf:"varint,2,opt,name=refresh,proto3" json:"refresh,omitempty"`
}

func (x *GetTokenRequest) Reset() {
	*x = GetTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_bootstrapper_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenRequest) ProtoMessage() {}

func (x *GetTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_bootstrapper_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenRequest.ProtoReflect.Descriptor instead.
func (*GetTokenRequest) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_bootstrapper_proto_rawDescGZIP(), []int{3}
}

func (x *GetTokenRequest) GetGatewayDeviceInfo() *GatewayDeviceInfo {
	if x != nil {
		return x.GatewayDeviceInfo
	}
	return nil
}

func (x *GetTokenRequest) GetRefresh() bool {
	if x != nil {
		return x.Refresh
	}
	return false
}

type GetTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// token is a nonce prepended by bootstrapper.tokenPrepend
	// It is a randomized string of characters that keys to a TokenInfo
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// timeout is the timestamp of when this TokenInfo will expire
	Timeout *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *GetTokenResponse) Reset() {
	*x = GetTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_bootstrapper_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenResponse) ProtoMessage() {}

func (x *GetTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_bootstrapper_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenResponse.ProtoReflect.Descriptor instead.
func (*GetTokenResponse) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_bootstrapper_proto_rawDescGZIP(), []int{4}
}

func (x *GetTokenResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GetTokenResponse) GetTimeout() *timestamp.Timestamp {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type GetGatewayRegistrationInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetGatewayRegistrationInfoRequest) Reset() {
	*x = GetGatewayRegistrationInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_bootstrapper_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGatewayRegistrationInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGatewayRegistrationInfoRequest) ProtoMessage() {}

func (x *GetGatewayRegistrationInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_bootstrapper_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGatewayRegistrationInfoRequest.ProtoReflect.Descriptor instead.
func (*GetGatewayRegistrationInfoRequest) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_bootstrapper_proto_rawDescGZIP(), []int{5}
}

type GetGatewayRegistrationInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// root_ca is a certificate that access gateways (AGW) can use to handshake and communicate with this orc8r
	RootCa string `protobuf:"bytes,1,opt,name=root_ca,json=rootCa,proto3" json:"root_ca,omitempty"`
	// domain_name is the domain name where this orc8r can be accessed
	DomainName string `protobuf:"bytes,2,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
}

func (x *GetGatewayRegistrationInfoResponse) Reset() {
	*x = GetGatewayRegistrationInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_bootstrapper_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGatewayRegistrationInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGatewayRegistrationInfoResponse) ProtoMessage() {}

func (x *GetGatewayRegistrationInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_bootstrapper_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGatewayRegistrationInfoResponse.ProtoReflect.Descriptor instead.
func (*GetGatewayRegistrationInfoResponse) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_bootstrapper_proto_rawDescGZIP(), []int{6}
}

func (x *GetGatewayRegistrationInfoResponse) GetRootCa() string {
	if x != nil {
		return x.RootCa
	}
	return ""
}

func (x *GetGatewayRegistrationInfoResponse) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

type GetGatewayDeviceInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// token is a nonce prepended by bootstrapper.tokenPrepend
	// It is a randomized string of characters that keys to a TokenInfo
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetGatewayDeviceInfoRequest) Reset() {
	*x = GetGatewayDeviceInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_bootstrapper_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGatewayDeviceInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGatewayDeviceInfoRequest) ProtoMessage() {}

func (x *GetGatewayDeviceInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_bootstrapper_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGatewayDeviceInfoRequest.ProtoReflect.Descriptor instead.
func (*GetGatewayDeviceInfoRequest) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_bootstrapper_proto_rawDescGZIP(), []int{7}
}

func (x *GetGatewayDeviceInfoRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetGatewayDeviceInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*GetGatewayDeviceInfoResponse_GatewayDeviceInfo
	//	*GetGatewayDeviceInfoResponse_Error
	Response isGetGatewayDeviceInfoResponse_Response `protobuf_oneof:"response"`
}

func (x *GetGatewayDeviceInfoResponse) Reset() {
	*x = GetGatewayDeviceInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_bootstrapper_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGatewayDeviceInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGatewayDeviceInfoResponse) ProtoMessage() {}

func (x *GetGatewayDeviceInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_bootstrapper_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGatewayDeviceInfoResponse.ProtoReflect.Descriptor instead.
func (*GetGatewayDeviceInfoResponse) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_bootstrapper_proto_rawDescGZIP(), []int{8}
}

func (m *GetGatewayDeviceInfoResponse) GetResponse() isGetGatewayDeviceInfoResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *GetGatewayDeviceInfoResponse) GetGatewayDeviceInfo() *GatewayDeviceInfo {
	if x, ok := x.GetResponse().(*GetGatewayDeviceInfoResponse_GatewayDeviceInfo); ok {
		return x.GatewayDeviceInfo
	}
	return nil
}

func (x *GetGatewayDeviceInfoResponse) GetError() string {
	if x, ok := x.GetResponse().(*GetGatewayDeviceInfoResponse_Error); ok {
		return x.Error
	}
	return ""
}

type isGetGatewayDeviceInfoResponse_Response interface {
	isGetGatewayDeviceInfoResponse_Response()
}

type GetGatewayDeviceInfoResponse_GatewayDeviceInfo struct {
	// gateway_device_info contains basic info that an access gateway (AGW) needs to register
	GatewayDeviceInfo *GatewayDeviceInfo `protobuf:"bytes,1,opt,name=gateway_device_info,json=gatewayDeviceInfo,proto3,oneof"`
}

type GetGatewayDeviceInfoResponse_Error struct {
	// a string describing the client error
	Error string `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*GetGatewayDeviceInfoResponse_GatewayDeviceInfo) isGetGatewayDeviceInfoResponse_Response() {}

func (*GetGatewayDeviceInfoResponse_Error) isGetGatewayDeviceInfoResponse_Response() {}

type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// token is a nonce prepended by bootstrapper.tokenPrefix
	// It is a randomized string of characters that keys to a TokenInfo
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// hwid is the access gateway's (AGW) hardware id
	Hwid *AccessGatewayID `protobuf:"bytes,2,opt,name=hwid,proto3" json:"hwid,omitempty"`
	// challenge_key is the AGW's long-term public key
	ChallengeKey *ChallengeKey `protobuf:"bytes,3,opt,name=challenge_key,json=challengeKey,proto3" json:"challenge_key,omitempty"`
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_bootstrapper_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_bootstrapper_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_bootstrapper_proto_rawDescGZIP(), []int{9}
}

func (x *RegisterRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RegisterRequest) GetHwid() *AccessGatewayID {
	if x != nil {
		return x.Hwid
	}
	return nil
}

func (x *RegisterRequest) GetChallengeKey() *ChallengeKey {
	if x != nil {
		return x.ChallengeKey
	}
	return nil
}

type RegisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*RegisterResponse_ControlProxy
	//	*RegisterResponse_Error
	Response isRegisterResponse_Response `protobuf_oneof:"response"`
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_bootstrapper_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_bootstrapper_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_bootstrapper_proto_rawDescGZIP(), []int{10}
}

func (m *RegisterResponse) GetResponse() isRegisterResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *RegisterResponse) GetControlProxy() string {
	if x, ok := x.GetResponse().(*RegisterResponse_ControlProxy); ok {
		return x.ControlProxy
	}
	return ""
}

func (x *RegisterResponse) GetError() string {
	if x, ok := x.GetResponse().(*RegisterResponse_Error); ok {
		return x.Error
	}
	return ""
}

type isRegisterResponse_Response interface {
	isRegisterResponse_Response()
}

type RegisterResponse_ControlProxy struct {
	// control_proxy is the OK that the access gateway (AGW) has registered properly
	// EG magma/lte/gateway/configs/control_proxy.yml
	ControlProxy string `protobuf:"bytes,1,opt,name=control_proxy,json=controlProxy,proto3,oneof"`
}

type RegisterResponse_Error struct {
	// a string describing the client error
	Error string `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*RegisterResponse_ControlProxy) isRegisterResponse_Response() {}

func (*RegisterResponse_Error) isRegisterResponse_Response() {}

// GatewayDeviceInfo contains basic info that an access gateway (AGW) needs to register
type GatewayDeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// network_id is the network id of the AGW
	NetworkId string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// logical_id is the logical id of the AGW
	LogicalId string `protobuf:"bytes,2,opt,name=logical_id,json=logicalId,proto3" json:"logical_id,omitempty"`
}

func (x *GatewayDeviceInfo) Reset() {
	*x = GatewayDeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_bootstrapper_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayDeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayDeviceInfo) ProtoMessage() {}

func (x *GatewayDeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_bootstrapper_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayDeviceInfo.ProtoReflect.Descriptor instead.
func (*GatewayDeviceInfo) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_bootstrapper_proto_rawDescGZIP(), []int{11}
}

func (x *GatewayDeviceInfo) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *GatewayDeviceInfo) GetLogicalId() string {
	if x != nil {
		return x.LogicalId
	}
	return ""
}

// TokenInfo is info saved that is keyed by token
// This is what is saved on CloudRegistration's initial register call (GetToken)
type TokenInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gateway_device_info contains basic info that an AGW needs to register
	GatewayDeviceInfo *GatewayDeviceInfo `protobuf:"bytes,1,opt,name=gateway_device_info,json=gatewayDeviceInfo,proto3" json:"gateway_device_info,omitempty"`
	// nonce is a token without the bootstrapper.tokenPrefix prefix
	// It is a randomized string of characters that keys to a TokenInfo
	Nonce string `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// timeout is the timestamp of when this TokenInfo will expire
	Timeout *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *TokenInfo) Reset() {
	*x = TokenInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_bootstrapper_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenInfo) ProtoMessage() {}

func (x *TokenInfo) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_bootstrapper_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenInfo.ProtoReflect.Descriptor instead.
func (*TokenInfo) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_bootstrapper_proto_rawDescGZIP(), []int{12}
}

func (x *TokenInfo) GetGatewayDeviceInfo() *GatewayDeviceInfo {
	if x != nil {
		return x.GatewayDeviceInfo
	}
	return nil
}

func (x *TokenInfo) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *TokenInfo) GetTimeout() *timestamp.Timestamp {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type Response_Echo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response []byte `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *Response_Echo) Reset() {
	*x = Response_Echo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_bootstrapper_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response_Echo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response_Echo) ProtoMessage() {}

func (x *Response_Echo) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_bootstrapper_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response_Echo.ProtoReflect.Descriptor instead.
func (*Response_Echo) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_bootstrapper_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Response_Echo) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

type Response_RSA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *Response_RSA) Reset() {
	*x = Response_RSA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_bootstrapper_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response_RSA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response_RSA) ProtoMessage() {}

func (x *Response_RSA) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_bootstrapper_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response_RSA.ProtoReflect.Descriptor instead.
func (*Response_RSA) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_bootstrapper_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Response_RSA) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type Response_ECDSA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R []byte `protobuf:"bytes,1,opt,name=r,proto3" json:"r,omitempty"`
	S []byte `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
}

func (x *Response_ECDSA) Reset() {
	*x = Response_ECDSA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orc8r_protos_bootstrapper_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response_ECDSA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response_ECDSA) ProtoMessage() {}

func (x *Response_ECDSA) ProtoReflect() protoreflect.Message {
	mi := &file_orc8r_protos_bootstrapper_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response_ECDSA.ProtoReflect.Descriptor instead.
func (*Response_ECDSA) Descriptor() ([]byte, []int) {
	return file_orc8r_protos_bootstrapper_proto_rawDescGZIP(), []int{2, 2}
}

func (x *Response_ECDSA) GetR() []byte {
	if x != nil {
		return x.R
	}
	return nil
}

func (x *Response_ECDSA) GetS() []byte {
	if x != nil {
		return x.S
	}
	return nil
}

var File_orc8r_protos_bootstrapper_proto protoreflect.FileDescriptor

var file_orc8r_protos_bootstrapper_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x62,
	0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0b, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x1a, 0x1c,
	0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6f, 0x72,
	0x63, 0x38, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x67, 0x0a, 0x09, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x4b, 0x65, 0x79, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6b, 0x65,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f,
	0x72, 0x63, 0x38, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4b, 0x65,
	0x79, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x22, 0x47, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x45, 0x43, 0x48, 0x4f, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4f, 0x46,
	0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36,
	0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x45,
	0x43, 0x44, 0x53, 0x41, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x02, 0x22, 0xc2, 0x03,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x68, 0x77,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x44, 0x52, 0x04, 0x68, 0x77, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x65,
	0x63, 0x68, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x48, 0x00,
	0x52, 0x0c, 0x65, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e,
	0x0a, 0x0c, 0x72, 0x73, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63,
	0x38, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x53, 0x41, 0x48,
	0x00, 0x52, 0x0b, 0x72, 0x73, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44,
	0x0a, 0x0e, 0x65, 0x63, 0x64, 0x73, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f,
	0x72, 0x63, 0x38, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x43,
	0x44, 0x53, 0x41, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x63, 0x64, 0x73, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x03, 0x63, 0x73, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e,
	0x43, 0x53, 0x52, 0x52, 0x03, 0x63, 0x73, 0x72, 0x1a, 0x22, 0x0a, 0x04, 0x45, 0x63, 0x68, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x23, 0x0a, 0x03,
	0x52, 0x53, 0x41, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x1a, 0x23, 0x0a, 0x05, 0x45, 0x43, 0x44, 0x53, 0x41, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x01, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x7b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x13, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72,
	0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x11, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x22,
	0x5e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22,
	0x23, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x5e, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f,
	0x6f, 0x74, 0x5f, 0x63, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f,
	0x74, 0x43, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x33, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x94, 0x01, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x13, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x99, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x68, 0x77,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x49, 0x44, 0x52, 0x04, 0x68, 0x77, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0d,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38,
	0x72, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x0c,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x5d, 0x0a, 0x10,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x25, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x16, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42,
	0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x0a, 0x11, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x22, 0xa7,
	0x01, 0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4e, 0x0a, 0x13,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x32, 0x98, 0x01, 0x0a, 0x0c, 0x42, 0x6f, 0x6f,
	0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x22,
	0x00, 0x12, 0x40, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x12, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x18, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x22, 0x00, 0x32, 0xce, 0x02, 0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x08, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72,
	0x63, 0x38, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x32, 0x59, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x1b, 0x5a, 0x19, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x6c,
	0x69, 0x62, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_orc8r_protos_bootstrapper_proto_rawDescOnce sync.Once
	file_orc8r_protos_bootstrapper_proto_rawDescData = file_orc8r_protos_bootstrapper_proto_rawDesc
)

func file_orc8r_protos_bootstrapper_proto_rawDescGZIP() []byte {
	file_orc8r_protos_bootstrapper_proto_rawDescOnce.Do(func() {
		file_orc8r_protos_bootstrapper_proto_rawDescData = protoimpl.X.CompressGZIP(file_orc8r_protos_bootstrapper_proto_rawDescData)
	})
	return file_orc8r_protos_bootstrapper_proto_rawDescData
}

var file_orc8r_protos_bootstrapper_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_orc8r_protos_bootstrapper_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_orc8r_protos_bootstrapper_proto_goTypes = []interface{}{
	(ChallengeKey_KeyType)(0),                  // 0: magma.orc8r.ChallengeKey.KeyType
	(*Challenge)(nil),                          // 1: magma.orc8r.Challenge
	(*ChallengeKey)(nil),                       // 2: magma.orc8r.ChallengeKey
	(*Response)(nil),                           // 3: magma.orc8r.Response
	(*GetTokenRequest)(nil),                    // 4: magma.orc8r.GetTokenRequest
	(*GetTokenResponse)(nil),                   // 5: magma.orc8r.GetTokenResponse
	(*GetGatewayRegistrationInfoRequest)(nil),  // 6: magma.orc8r.GetGatewayRegistrationInfoRequest
	(*GetGatewayRegistrationInfoResponse)(nil), // 7: magma.orc8r.GetGatewayRegistrationInfoResponse
	(*GetGatewayDeviceInfoRequest)(nil),        // 8: magma.orc8r.GetGatewayDeviceInfoRequest
	(*GetGatewayDeviceInfoResponse)(nil),       // 9: magma.orc8r.GetGatewayDeviceInfoResponse
	(*RegisterRequest)(nil),                    // 10: magma.orc8r.RegisterRequest
	(*RegisterResponse)(nil),                   // 11: magma.orc8r.RegisterResponse
	(*GatewayDeviceInfo)(nil),                  // 12: magma.orc8r.GatewayDeviceInfo
	(*TokenInfo)(nil),                          // 13: magma.orc8r.TokenInfo
	(*Response_Echo)(nil),                      // 14: magma.orc8r.Response.Echo
	(*Response_RSA)(nil),                       // 15: magma.orc8r.Response.RSA
	(*Response_ECDSA)(nil),                     // 16: magma.orc8r.Response.ECDSA
	(*AccessGatewayID)(nil),                    // 17: magma.orc8r.AccessGatewayID
	(*CSR)(nil),                                // 18: magma.orc8r.CSR
	(*timestamp.Timestamp)(nil),                // 19: google.protobuf.Timestamp
	(*Certificate)(nil),                        // 20: magma.orc8r.Certificate
}
var file_orc8r_protos_bootstrapper_proto_depIdxs = []int32{
	0,  // 0: magma.orc8r.Challenge.key_type:type_name -> magma.orc8r.ChallengeKey.KeyType
	0,  // 1: magma.orc8r.ChallengeKey.key_type:type_name -> magma.orc8r.ChallengeKey.KeyType
	17, // 2: magma.orc8r.Response.hw_id:type_name -> magma.orc8r.AccessGatewayID
	14, // 3: magma.orc8r.Response.echo_response:type_name -> magma.orc8r.Response.Echo
	15, // 4: magma.orc8r.Response.rsa_response:type_name -> magma.orc8r.Response.RSA
	16, // 5: magma.orc8r.Response.ecdsa_response:type_name -> magma.orc8r.Response.ECDSA
	18, // 6: magma.orc8r.Response.csr:type_name -> magma.orc8r.CSR
	12, // 7: magma.orc8r.GetTokenRequest.gateway_device_info:type_name -> magma.orc8r.GatewayDeviceInfo
	19, // 8: magma.orc8r.GetTokenResponse.timeout:type_name -> google.protobuf.Timestamp
	12, // 9: magma.orc8r.GetGatewayDeviceInfoResponse.gateway_device_info:type_name -> magma.orc8r.GatewayDeviceInfo
	17, // 10: magma.orc8r.RegisterRequest.hwid:type_name -> magma.orc8r.AccessGatewayID
	2,  // 11: magma.orc8r.RegisterRequest.challenge_key:type_name -> magma.orc8r.ChallengeKey
	12, // 12: magma.orc8r.TokenInfo.gateway_device_info:type_name -> magma.orc8r.GatewayDeviceInfo
	19, // 13: magma.orc8r.TokenInfo.timeout:type_name -> google.protobuf.Timestamp
	17, // 14: magma.orc8r.Bootstrapper.GetChallenge:input_type -> magma.orc8r.AccessGatewayID
	3,  // 15: magma.orc8r.Bootstrapper.RequestSign:input_type -> magma.orc8r.Response
	4,  // 16: magma.orc8r.CloudRegistration.GetToken:input_type -> magma.orc8r.GetTokenRequest
	6,  // 17: magma.orc8r.CloudRegistration.GetGatewayRegistrationInfo:input_type -> magma.orc8r.GetGatewayRegistrationInfoRequest
	8,  // 18: magma.orc8r.CloudRegistration.GetGatewayDeviceInfo:input_type -> magma.orc8r.GetGatewayDeviceInfoRequest
	10, // 19: magma.orc8r.Registration.Register:input_type -> magma.orc8r.RegisterRequest
	1,  // 20: magma.orc8r.Bootstrapper.GetChallenge:output_type -> magma.orc8r.Challenge
	20, // 21: magma.orc8r.Bootstrapper.RequestSign:output_type -> magma.orc8r.Certificate
	5,  // 22: magma.orc8r.CloudRegistration.GetToken:output_type -> magma.orc8r.GetTokenResponse
	7,  // 23: magma.orc8r.CloudRegistration.GetGatewayRegistrationInfo:output_type -> magma.orc8r.GetGatewayRegistrationInfoResponse
	9,  // 24: magma.orc8r.CloudRegistration.GetGatewayDeviceInfo:output_type -> magma.orc8r.GetGatewayDeviceInfoResponse
	11, // 25: magma.orc8r.Registration.Register:output_type -> magma.orc8r.RegisterResponse
	20, // [20:26] is the sub-list for method output_type
	14, // [14:20] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_orc8r_protos_bootstrapper_proto_init() }
func file_orc8r_protos_bootstrapper_proto_init() {
	if File_orc8r_protos_bootstrapper_proto != nil {
		return
	}
	file_orc8r_protos_certifier_proto_init()
	file_orc8r_protos_identity_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_orc8r_protos_bootstrapper_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Challenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_bootstrapper_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_bootstrapper_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_bootstrapper_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_bootstrapper_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_bootstrapper_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGatewayRegistrationInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_bootstrapper_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGatewayRegistrationInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_bootstrapper_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGatewayDeviceInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_bootstrapper_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGatewayDeviceInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_bootstrapper_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_bootstrapper_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_bootstrapper_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayDeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_bootstrapper_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_bootstrapper_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response_Echo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_bootstrapper_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response_RSA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orc8r_protos_bootstrapper_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response_ECDSA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_orc8r_protos_bootstrapper_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Response_EchoResponse)(nil),
		(*Response_RsaResponse)(nil),
		(*Response_EcdsaResponse)(nil),
	}
	file_orc8r_protos_bootstrapper_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*GetGatewayDeviceInfoResponse_GatewayDeviceInfo)(nil),
		(*GetGatewayDeviceInfoResponse_Error)(nil),
	}
	file_orc8r_protos_bootstrapper_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*RegisterResponse_ControlProxy)(nil),
		(*RegisterResponse_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_orc8r_protos_bootstrapper_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_orc8r_protos_bootstrapper_proto_goTypes,
		DependencyIndexes: file_orc8r_protos_bootstrapper_proto_depIdxs,
		EnumInfos:         file_orc8r_protos_bootstrapper_proto_enumTypes,
		MessageInfos:      file_orc8r_protos_bootstrapper_proto_msgTypes,
	}.Build()
	File_orc8r_protos_bootstrapper_proto = out.File
	file_orc8r_protos_bootstrapper_proto_rawDesc = nil
	file_orc8r_protos_bootstrapper_proto_goTypes = nil
	file_orc8r_protos_bootstrapper_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BootstrapperClient is the client API for Bootstrapper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BootstrapperClient interface {
	// get the challange for gateway specified in hw_id (AccessGatewayID)
	GetChallenge(ctx context.Context, in *AccessGatewayID, opts ...grpc.CallOption) (*Challenge, error)
	// send back response and csr for signing
	// Returns signed certificate.
	RequestSign(ctx context.Context, in *Response, opts ...grpc.CallOption) (*Certificate, error)
}

type bootstrapperClient struct {
	cc grpc.ClientConnInterface
}

func NewBootstrapperClient(cc grpc.ClientConnInterface) BootstrapperClient {
	return &bootstrapperClient{cc}
}

func (c *bootstrapperClient) GetChallenge(ctx context.Context, in *AccessGatewayID, opts ...grpc.CallOption) (*Challenge, error) {
	out := new(Challenge)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Bootstrapper/GetChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapperClient) RequestSign(ctx context.Context, in *Response, opts ...grpc.CallOption) (*Certificate, error) {
	out := new(Certificate)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Bootstrapper/RequestSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BootstrapperServer is the server API for Bootstrapper service.
type BootstrapperServer interface {
	// get the challange for gateway specified in hw_id (AccessGatewayID)
	GetChallenge(context.Context, *AccessGatewayID) (*Challenge, error)
	// send back response and csr for signing
	// Returns signed certificate.
	RequestSign(context.Context, *Response) (*Certificate, error)
}

// UnimplementedBootstrapperServer can be embedded to have forward compatible implementations.
type UnimplementedBootstrapperServer struct {
}

func (*UnimplementedBootstrapperServer) GetChallenge(context.Context, *AccessGatewayID) (*Challenge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChallenge not implemented")
}
func (*UnimplementedBootstrapperServer) RequestSign(context.Context, *Response) (*Certificate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestSign not implemented")
}

func RegisterBootstrapperServer(s *grpc.Server, srv BootstrapperServer) {
	s.RegisterService(&_Bootstrapper_serviceDesc, srv)
}

func _Bootstrapper_GetChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessGatewayID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapperServer).GetChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Bootstrapper/GetChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapperServer).GetChallenge(ctx, req.(*AccessGatewayID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bootstrapper_RequestSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Response)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapperServer).RequestSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Bootstrapper/RequestSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapperServer).RequestSign(ctx, req.(*Response))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bootstrapper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.Bootstrapper",
	HandlerType: (*BootstrapperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChallenge",
			Handler:    _Bootstrapper_GetChallenge_Handler,
		},
		{
			MethodName: "RequestSign",
			Handler:    _Bootstrapper_RequestSign_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orc8r/protos/bootstrapper.proto",
}

// CloudRegistrationClient is the client API for CloudRegistration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CloudRegistrationClient interface {
	// GetToken saves and sends out a token related to input:networkID and input:logicalID
	// It will refresh the token if input:refresh is true or token is expired
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error)
	// GetGatewayRegistrationInfo sends out info needed for AGWs to register themselves
	GetGatewayRegistrationInfo(ctx context.Context, in *GetGatewayRegistrationInfoRequest, opts ...grpc.CallOption) (*GetGatewayRegistrationInfoResponse, error)
	// GetGatewayDeviceInfo sends out info that was set when the operator registered
	// the device's networkID and logicalID
	GetGatewayDeviceInfo(ctx context.Context, in *GetGatewayDeviceInfoRequest, opts ...grpc.CallOption) (*GetGatewayDeviceInfoResponse, error)
}

type cloudRegistrationClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudRegistrationClient(cc grpc.ClientConnInterface) CloudRegistrationClient {
	return &cloudRegistrationClient{cc}
}

func (c *cloudRegistrationClient) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error) {
	out := new(GetTokenResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.CloudRegistration/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudRegistrationClient) GetGatewayRegistrationInfo(ctx context.Context, in *GetGatewayRegistrationInfoRequest, opts ...grpc.CallOption) (*GetGatewayRegistrationInfoResponse, error) {
	out := new(GetGatewayRegistrationInfoResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.CloudRegistration/GetGatewayRegistrationInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudRegistrationClient) GetGatewayDeviceInfo(ctx context.Context, in *GetGatewayDeviceInfoRequest, opts ...grpc.CallOption) (*GetGatewayDeviceInfoResponse, error) {
	out := new(GetGatewayDeviceInfoResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.CloudRegistration/GetGatewayDeviceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudRegistrationServer is the server API for CloudRegistration service.
type CloudRegistrationServer interface {
	// GetToken saves and sends out a token related to input:networkID and input:logicalID
	// It will refresh the token if input:refresh is true or token is expired
	GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error)
	// GetGatewayRegistrationInfo sends out info needed for AGWs to register themselves
	GetGatewayRegistrationInfo(context.Context, *GetGatewayRegistrationInfoRequest) (*GetGatewayRegistrationInfoResponse, error)
	// GetGatewayDeviceInfo sends out info that was set when the operator registered
	// the device's networkID and logicalID
	GetGatewayDeviceInfo(context.Context, *GetGatewayDeviceInfoRequest) (*GetGatewayDeviceInfoResponse, error)
}

// UnimplementedCloudRegistrationServer can be embedded to have forward compatible implementations.
type UnimplementedCloudRegistrationServer struct {
}

func (*UnimplementedCloudRegistrationServer) GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (*UnimplementedCloudRegistrationServer) GetGatewayRegistrationInfo(context.Context, *GetGatewayRegistrationInfoRequest) (*GetGatewayRegistrationInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGatewayRegistrationInfo not implemented")
}
func (*UnimplementedCloudRegistrationServer) GetGatewayDeviceInfo(context.Context, *GetGatewayDeviceInfoRequest) (*GetGatewayDeviceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGatewayDeviceInfo not implemented")
}

func RegisterCloudRegistrationServer(s *grpc.Server, srv CloudRegistrationServer) {
	s.RegisterService(&_CloudRegistration_serviceDesc, srv)
}

func _CloudRegistration_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudRegistrationServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.CloudRegistration/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudRegistrationServer).GetToken(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudRegistration_GetGatewayRegistrationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayRegistrationInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudRegistrationServer).GetGatewayRegistrationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.CloudRegistration/GetGatewayRegistrationInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudRegistrationServer).GetGatewayRegistrationInfo(ctx, req.(*GetGatewayRegistrationInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudRegistration_GetGatewayDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayDeviceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudRegistrationServer).GetGatewayDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.CloudRegistration/GetGatewayDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudRegistrationServer).GetGatewayDeviceInfo(ctx, req.(*GetGatewayDeviceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudRegistration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.CloudRegistration",
	HandlerType: (*CloudRegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _CloudRegistration_GetToken_Handler,
		},
		{
			MethodName: "GetGatewayRegistrationInfo",
			Handler:    _CloudRegistration_GetGatewayRegistrationInfo_Handler,
		},
		{
			MethodName: "GetGatewayDeviceInfo",
			Handler:    _CloudRegistration_GetGatewayDeviceInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orc8r/protos/bootstrapper.proto",
}

// RegistrationClient is the client API for Registration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistrationClient interface {
	// Register should be called by the AGW
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
}

type registrationClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistrationClient(cc grpc.ClientConnInterface) RegistrationClient {
	return &registrationClient{cc}
}

func (c *registrationClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Registration/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistrationServer is the server API for Registration service.
type RegistrationServer interface {
	// Register should be called by the AGW
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
}

// UnimplementedRegistrationServer can be embedded to have forward compatible implementations.
type UnimplementedRegistrationServer struct {
}

func (*UnimplementedRegistrationServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}

func RegisterRegistrationServer(s *grpc.Server, srv RegistrationServer) {
	s.RegisterService(&_Registration_serviceDesc, srv)
}

func _Registration_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Registration/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.Registration",
	HandlerType: (*RegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Registration_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orc8r/protos/bootstrapper.proto",
}
