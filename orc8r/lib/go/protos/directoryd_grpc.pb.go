// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.10.0
// source: orc8r/protos/directoryd.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayDirectoryServiceClient is the client API for GatewayDirectoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayDirectoryServiceClient interface {
	// Update the directory record of an object in the directory service
	UpdateRecord(ctx context.Context, in *UpdateRecordRequest, opts ...grpc.CallOption) (*Void, error)
	// Delete directory record of an object from the directory service
	// Throws UNKNOWN if object ID does not exist
	DeleteRecord(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*Void, error)
	// Get directory field for a given id and key
	GetDirectoryField(ctx context.Context, in *GetDirectoryFieldRequest, opts ...grpc.CallOption) (*DirectoryField, error)
	// Get all directory records
	GetAllDirectoryRecords(ctx context.Context, in *Void, opts ...grpc.CallOption) (*AllDirectoryRecords, error)
}

type gatewayDirectoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayDirectoryServiceClient(cc grpc.ClientConnInterface) GatewayDirectoryServiceClient {
	return &gatewayDirectoryServiceClient{cc}
}

func (c *gatewayDirectoryServiceClient) UpdateRecord(ctx context.Context, in *UpdateRecordRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.GatewayDirectoryService/UpdateRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDirectoryServiceClient) DeleteRecord(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.GatewayDirectoryService/DeleteRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDirectoryServiceClient) GetDirectoryField(ctx context.Context, in *GetDirectoryFieldRequest, opts ...grpc.CallOption) (*DirectoryField, error) {
	out := new(DirectoryField)
	err := c.cc.Invoke(ctx, "/magma.orc8r.GatewayDirectoryService/GetDirectoryField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDirectoryServiceClient) GetAllDirectoryRecords(ctx context.Context, in *Void, opts ...grpc.CallOption) (*AllDirectoryRecords, error) {
	out := new(AllDirectoryRecords)
	err := c.cc.Invoke(ctx, "/magma.orc8r.GatewayDirectoryService/GetAllDirectoryRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayDirectoryServiceServer is the server API for GatewayDirectoryService service.
// All implementations must embed UnimplementedGatewayDirectoryServiceServer
// for forward compatibility
type GatewayDirectoryServiceServer interface {
	// Update the directory record of an object in the directory service
	UpdateRecord(context.Context, *UpdateRecordRequest) (*Void, error)
	// Delete directory record of an object from the directory service
	// Throws UNKNOWN if object ID does not exist
	DeleteRecord(context.Context, *DeleteRecordRequest) (*Void, error)
	// Get directory field for a given id and key
	GetDirectoryField(context.Context, *GetDirectoryFieldRequest) (*DirectoryField, error)
	// Get all directory records
	GetAllDirectoryRecords(context.Context, *Void) (*AllDirectoryRecords, error)
	mustEmbedUnimplementedGatewayDirectoryServiceServer()
}

// UnimplementedGatewayDirectoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayDirectoryServiceServer struct {
}

func (UnimplementedGatewayDirectoryServiceServer) UpdateRecord(context.Context, *UpdateRecordRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecord not implemented")
}
func (UnimplementedGatewayDirectoryServiceServer) DeleteRecord(context.Context, *DeleteRecordRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecord not implemented")
}
func (UnimplementedGatewayDirectoryServiceServer) GetDirectoryField(context.Context, *GetDirectoryFieldRequest) (*DirectoryField, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDirectoryField not implemented")
}
func (UnimplementedGatewayDirectoryServiceServer) GetAllDirectoryRecords(context.Context, *Void) (*AllDirectoryRecords, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDirectoryRecords not implemented")
}
func (UnimplementedGatewayDirectoryServiceServer) mustEmbedUnimplementedGatewayDirectoryServiceServer() {
}

// UnsafeGatewayDirectoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayDirectoryServiceServer will
// result in compilation errors.
type UnsafeGatewayDirectoryServiceServer interface {
	mustEmbedUnimplementedGatewayDirectoryServiceServer()
}

func RegisterGatewayDirectoryServiceServer(s grpc.ServiceRegistrar, srv GatewayDirectoryServiceServer) {
	s.RegisterService(&GatewayDirectoryService_ServiceDesc, srv)
}

func _GatewayDirectoryService_UpdateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDirectoryServiceServer).UpdateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.GatewayDirectoryService/UpdateRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDirectoryServiceServer).UpdateRecord(ctx, req.(*UpdateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDirectoryService_DeleteRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDirectoryServiceServer).DeleteRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.GatewayDirectoryService/DeleteRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDirectoryServiceServer).DeleteRecord(ctx, req.(*DeleteRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDirectoryService_GetDirectoryField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDirectoryFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDirectoryServiceServer).GetDirectoryField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.GatewayDirectoryService/GetDirectoryField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDirectoryServiceServer).GetDirectoryField(ctx, req.(*GetDirectoryFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDirectoryService_GetAllDirectoryRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDirectoryServiceServer).GetAllDirectoryRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.GatewayDirectoryService/GetAllDirectoryRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDirectoryServiceServer).GetAllDirectoryRecords(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

// GatewayDirectoryService_ServiceDesc is the grpc.ServiceDesc for GatewayDirectoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewayDirectoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.GatewayDirectoryService",
	HandlerType: (*GatewayDirectoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateRecord",
			Handler:    _GatewayDirectoryService_UpdateRecord_Handler,
		},
		{
			MethodName: "DeleteRecord",
			Handler:    _GatewayDirectoryService_DeleteRecord_Handler,
		},
		{
			MethodName: "GetDirectoryField",
			Handler:    _GatewayDirectoryService_GetDirectoryField_Handler,
		},
		{
			MethodName: "GetAllDirectoryRecords",
			Handler:    _GatewayDirectoryService_GetAllDirectoryRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orc8r/protos/directoryd.proto",
}
