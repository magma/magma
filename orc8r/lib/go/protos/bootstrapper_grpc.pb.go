// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BootstrapperClient is the client API for Bootstrapper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BootstrapperClient interface {
	// get the challange for gateway specified in hw_id (AccessGatewayID)
	GetChallenge(ctx context.Context, in *AccessGatewayID, opts ...grpc.CallOption) (*Challenge, error)
	// send back response and csr for signing
	// Returns signed certificate.
	RequestSign(ctx context.Context, in *Response, opts ...grpc.CallOption) (*Certificate, error)
}

type bootstrapperClient struct {
	cc grpc.ClientConnInterface
}

func NewBootstrapperClient(cc grpc.ClientConnInterface) BootstrapperClient {
	return &bootstrapperClient{cc}
}

func (c *bootstrapperClient) GetChallenge(ctx context.Context, in *AccessGatewayID, opts ...grpc.CallOption) (*Challenge, error) {
	out := new(Challenge)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Bootstrapper/GetChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapperClient) RequestSign(ctx context.Context, in *Response, opts ...grpc.CallOption) (*Certificate, error) {
	out := new(Certificate)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Bootstrapper/RequestSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BootstrapperServer is the server API for Bootstrapper service.
// All implementations should embed UnimplementedBootstrapperServer
// for forward compatibility
type BootstrapperServer interface {
	// get the challange for gateway specified in hw_id (AccessGatewayID)
	GetChallenge(context.Context, *AccessGatewayID) (*Challenge, error)
	// send back response and csr for signing
	// Returns signed certificate.
	RequestSign(context.Context, *Response) (*Certificate, error)
}

// UnimplementedBootstrapperServer should be embedded to have forward compatible implementations.
type UnimplementedBootstrapperServer struct {
}

func (UnimplementedBootstrapperServer) GetChallenge(context.Context, *AccessGatewayID) (*Challenge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChallenge not implemented")
}
func (UnimplementedBootstrapperServer) RequestSign(context.Context, *Response) (*Certificate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestSign not implemented")
}

// UnsafeBootstrapperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BootstrapperServer will
// result in compilation errors.
type UnsafeBootstrapperServer interface {
	mustEmbedUnimplementedBootstrapperServer()
}

func RegisterBootstrapperServer(s grpc.ServiceRegistrar, srv BootstrapperServer) {
	s.RegisterService(&Bootstrapper_ServiceDesc, srv)
}

func _Bootstrapper_GetChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessGatewayID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapperServer).GetChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Bootstrapper/GetChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapperServer).GetChallenge(ctx, req.(*AccessGatewayID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bootstrapper_RequestSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Response)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapperServer).RequestSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Bootstrapper/RequestSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapperServer).RequestSign(ctx, req.(*Response))
	}
	return interceptor(ctx, in, info, handler)
}

// Bootstrapper_ServiceDesc is the grpc.ServiceDesc for Bootstrapper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bootstrapper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.Bootstrapper",
	HandlerType: (*BootstrapperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChallenge",
			Handler:    _Bootstrapper_GetChallenge_Handler,
		},
		{
			MethodName: "RequestSign",
			Handler:    _Bootstrapper_RequestSign_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orc8r/protos/bootstrapper.proto",
}

// CloudRegistrationClient is the client API for CloudRegistration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudRegistrationClient interface {
	// GetToken saves and sends out a token related to input:networkID and input:logicalID
	// It will refresh the token if input:refresh is true or token is expired
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error)
	// GetGatewayRegistrationInfo sends out info needed for AGWs to register themselves
	GetGatewayRegistrationInfo(ctx context.Context, in *GetGatewayRegistrationInfoRequest, opts ...grpc.CallOption) (*GetGatewayRegistrationInfoResponse, error)
	// GetGatewayDeviceInfo sends out info that was set when the operator registered
	// the device's networkID and logicalID
	GetGatewayDeviceInfo(ctx context.Context, in *GetGatewayDeviceInfoRequest, opts ...grpc.CallOption) (*GetGatewayDeviceInfoResponse, error)
}

type cloudRegistrationClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudRegistrationClient(cc grpc.ClientConnInterface) CloudRegistrationClient {
	return &cloudRegistrationClient{cc}
}

func (c *cloudRegistrationClient) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error) {
	out := new(GetTokenResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.CloudRegistration/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudRegistrationClient) GetGatewayRegistrationInfo(ctx context.Context, in *GetGatewayRegistrationInfoRequest, opts ...grpc.CallOption) (*GetGatewayRegistrationInfoResponse, error) {
	out := new(GetGatewayRegistrationInfoResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.CloudRegistration/GetGatewayRegistrationInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudRegistrationClient) GetGatewayDeviceInfo(ctx context.Context, in *GetGatewayDeviceInfoRequest, opts ...grpc.CallOption) (*GetGatewayDeviceInfoResponse, error) {
	out := new(GetGatewayDeviceInfoResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.CloudRegistration/GetGatewayDeviceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudRegistrationServer is the server API for CloudRegistration service.
// All implementations should embed UnimplementedCloudRegistrationServer
// for forward compatibility
type CloudRegistrationServer interface {
	// GetToken saves and sends out a token related to input:networkID and input:logicalID
	// It will refresh the token if input:refresh is true or token is expired
	GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error)
	// GetGatewayRegistrationInfo sends out info needed for AGWs to register themselves
	GetGatewayRegistrationInfo(context.Context, *GetGatewayRegistrationInfoRequest) (*GetGatewayRegistrationInfoResponse, error)
	// GetGatewayDeviceInfo sends out info that was set when the operator registered
	// the device's networkID and logicalID
	GetGatewayDeviceInfo(context.Context, *GetGatewayDeviceInfoRequest) (*GetGatewayDeviceInfoResponse, error)
}

// UnimplementedCloudRegistrationServer should be embedded to have forward compatible implementations.
type UnimplementedCloudRegistrationServer struct {
}

func (UnimplementedCloudRegistrationServer) GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedCloudRegistrationServer) GetGatewayRegistrationInfo(context.Context, *GetGatewayRegistrationInfoRequest) (*GetGatewayRegistrationInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGatewayRegistrationInfo not implemented")
}
func (UnimplementedCloudRegistrationServer) GetGatewayDeviceInfo(context.Context, *GetGatewayDeviceInfoRequest) (*GetGatewayDeviceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGatewayDeviceInfo not implemented")
}

// UnsafeCloudRegistrationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudRegistrationServer will
// result in compilation errors.
type UnsafeCloudRegistrationServer interface {
	mustEmbedUnimplementedCloudRegistrationServer()
}

func RegisterCloudRegistrationServer(s grpc.ServiceRegistrar, srv CloudRegistrationServer) {
	s.RegisterService(&CloudRegistration_ServiceDesc, srv)
}

func _CloudRegistration_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudRegistrationServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.CloudRegistration/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudRegistrationServer).GetToken(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudRegistration_GetGatewayRegistrationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayRegistrationInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudRegistrationServer).GetGatewayRegistrationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.CloudRegistration/GetGatewayRegistrationInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudRegistrationServer).GetGatewayRegistrationInfo(ctx, req.(*GetGatewayRegistrationInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudRegistration_GetGatewayDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayDeviceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudRegistrationServer).GetGatewayDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.CloudRegistration/GetGatewayDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudRegistrationServer).GetGatewayDeviceInfo(ctx, req.(*GetGatewayDeviceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudRegistration_ServiceDesc is the grpc.ServiceDesc for CloudRegistration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudRegistration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.CloudRegistration",
	HandlerType: (*CloudRegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _CloudRegistration_GetToken_Handler,
		},
		{
			MethodName: "GetGatewayRegistrationInfo",
			Handler:    _CloudRegistration_GetGatewayRegistrationInfo_Handler,
		},
		{
			MethodName: "GetGatewayDeviceInfo",
			Handler:    _CloudRegistration_GetGatewayDeviceInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orc8r/protos/bootstrapper.proto",
}

// RegistrationClient is the client API for Registration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistrationClient interface {
	// Register should be called by the AGW
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
}

type registrationClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistrationClient(cc grpc.ClientConnInterface) RegistrationClient {
	return &registrationClient{cc}
}

func (c *registrationClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Registration/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistrationServer is the server API for Registration service.
// All implementations should embed UnimplementedRegistrationServer
// for forward compatibility
type RegistrationServer interface {
	// Register should be called by the AGW
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
}

// UnimplementedRegistrationServer should be embedded to have forward compatible implementations.
type UnimplementedRegistrationServer struct {
}

func (UnimplementedRegistrationServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}

// UnsafeRegistrationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistrationServer will
// result in compilation errors.
type UnsafeRegistrationServer interface {
	mustEmbedUnimplementedRegistrationServer()
}

func RegisterRegistrationServer(s grpc.ServiceRegistrar, srv RegistrationServer) {
	s.RegisterService(&Registration_ServiceDesc, srv)
}

func _Registration_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Registration/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Registration_ServiceDesc is the grpc.ServiceDesc for Registration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Registration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.Registration",
	HandlerType: (*RegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Registration_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orc8r/protos/bootstrapper.proto",
}
