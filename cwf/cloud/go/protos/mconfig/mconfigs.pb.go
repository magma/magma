//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.10.0
// source: cwf/protos/mconfig/mconfigs.proto

package mconfig

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// -----------------------------------------------------------------------------
// Health configs
// -----------------------------------------------------------------------------
type CwfGatewayHealthConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cpu utilization threshold
	CpuUtilThresholdPct float32 `protobuf:"fixed32,1,opt,name=cpu_util_threshold_pct,json=cpuUtilThresholdPct,proto3" json:"cpu_util_threshold_pct,omitempty"`
	// mem utilization threshold
	MemUtilThresholdPct float32 `protobuf:"fixed32,2,opt,name=mem_util_threshold_pct,json=memUtilThresholdPct,proto3" json:"mem_util_threshold_pct,omitempty"`
	// interval between probes
	GreProbeInterval uint32 `protobuf:"varint,3,opt,name=gre_probe_interval,json=greProbeInterval,proto3" json:"gre_probe_interval,omitempty"`
	// packets sent for each icmp probe
	IcmpProbePktCount uint32 `protobuf:"varint,4,opt,name=icmp_probe_pkt_count,json=icmpProbePktCount,proto3" json:"icmp_probe_pkt_count,omitempty"`
	// gre peers to probe
	GrePeers []*CwfGatewayHealthConfigGrePeer `protobuf:"bytes,5,rep,name=gre_peers,json=grePeers,proto3" json:"gre_peers,omitempty"`
	// virtual IP used by AP/WLC to connect to HA cluster
	ClusterVirtualIp string `protobuf:"bytes,6,opt,name=cluster_virtual_ip,json=clusterVirtualIp,proto3" json:"cluster_virtual_ip,omitempty"`
}

func (x *CwfGatewayHealthConfig) Reset() {
	*x = CwfGatewayHealthConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cwf_protos_mconfig_mconfigs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CwfGatewayHealthConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CwfGatewayHealthConfig) ProtoMessage() {}

func (x *CwfGatewayHealthConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cwf_protos_mconfig_mconfigs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CwfGatewayHealthConfig.ProtoReflect.Descriptor instead.
func (*CwfGatewayHealthConfig) Descriptor() ([]byte, []int) {
	return file_cwf_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{0}
}

func (x *CwfGatewayHealthConfig) GetCpuUtilThresholdPct() float32 {
	if x != nil {
		return x.CpuUtilThresholdPct
	}
	return 0
}

func (x *CwfGatewayHealthConfig) GetMemUtilThresholdPct() float32 {
	if x != nil {
		return x.MemUtilThresholdPct
	}
	return 0
}

func (x *CwfGatewayHealthConfig) GetGreProbeInterval() uint32 {
	if x != nil {
		return x.GreProbeInterval
	}
	return 0
}

func (x *CwfGatewayHealthConfig) GetIcmpProbePktCount() uint32 {
	if x != nil {
		return x.IcmpProbePktCount
	}
	return 0
}

func (x *CwfGatewayHealthConfig) GetGrePeers() []*CwfGatewayHealthConfigGrePeer {
	if x != nil {
		return x.GrePeers
	}
	return nil
}

func (x *CwfGatewayHealthConfig) GetClusterVirtualIp() string {
	if x != nil {
		return x.ClusterVirtualIp
	}
	return ""
}

type CwfGatewayHealthConfigGrePeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *CwfGatewayHealthConfigGrePeer) Reset() {
	*x = CwfGatewayHealthConfigGrePeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cwf_protos_mconfig_mconfigs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CwfGatewayHealthConfigGrePeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CwfGatewayHealthConfigGrePeer) ProtoMessage() {}

func (x *CwfGatewayHealthConfigGrePeer) ProtoReflect() protoreflect.Message {
	mi := &file_cwf_protos_mconfig_mconfigs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CwfGatewayHealthConfigGrePeer.ProtoReflect.Descriptor instead.
func (*CwfGatewayHealthConfigGrePeer) Descriptor() ([]byte, []int) {
	return file_cwf_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CwfGatewayHealthConfigGrePeer) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

var File_cwf_protos_mconfig_mconfigs_proto protoreflect.FileDescriptor

var file_cwf_protos_mconfig_mconfigs_proto_rawDesc = []byte{
	0x0a, 0x21, 0x63, 0x77, 0x66, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0xf6, 0x02, 0x0a, 0x16, 0x43, 0x77, 0x66, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x33, 0x0a,
	0x16, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x63,
	0x70, 0x75, 0x55, 0x74, 0x69, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50,
	0x63, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x65, 0x6d, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x13, 0x6d, 0x65, 0x6d, 0x55, 0x74, 0x69, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x72, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x67, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x63, 0x6d, 0x70, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x50, 0x6b,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x09, 0x67, 0x72, 0x65, 0x5f, 0x70, 0x65,
	0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x77, 0x66, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x67, 0x72, 0x65, 0x50, 0x65, 0x65, 0x72, 0x52, 0x08, 0x67, 0x72, 0x65, 0x50, 0x65, 0x65,
	0x72, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x70,
	0x1a, 0x19, 0x0a, 0x07, 0x67, 0x72, 0x65, 0x50, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x42, 0x23, 0x5a, 0x21, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2f, 0x63, 0x77, 0x66, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67,
	0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cwf_protos_mconfig_mconfigs_proto_rawDescOnce sync.Once
	file_cwf_protos_mconfig_mconfigs_proto_rawDescData = file_cwf_protos_mconfig_mconfigs_proto_rawDesc
)

func file_cwf_protos_mconfig_mconfigs_proto_rawDescGZIP() []byte {
	file_cwf_protos_mconfig_mconfigs_proto_rawDescOnce.Do(func() {
		file_cwf_protos_mconfig_mconfigs_proto_rawDescData = protoimpl.X.CompressGZIP(file_cwf_protos_mconfig_mconfigs_proto_rawDescData)
	})
	return file_cwf_protos_mconfig_mconfigs_proto_rawDescData
}

var file_cwf_protos_mconfig_mconfigs_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_cwf_protos_mconfig_mconfigs_proto_goTypes = []interface{}{
	(*CwfGatewayHealthConfig)(nil),        // 0: magma.mconfig.CwfGatewayHealthConfig
	(*CwfGatewayHealthConfigGrePeer)(nil), // 1: magma.mconfig.CwfGatewayHealthConfig.grePeer
}
var file_cwf_protos_mconfig_mconfigs_proto_depIdxs = []int32{
	1, // 0: magma.mconfig.CwfGatewayHealthConfig.gre_peers:type_name -> magma.mconfig.CwfGatewayHealthConfig.grePeer
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_cwf_protos_mconfig_mconfigs_proto_init() }
func file_cwf_protos_mconfig_mconfigs_proto_init() {
	if File_cwf_protos_mconfig_mconfigs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cwf_protos_mconfig_mconfigs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CwfGatewayHealthConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cwf_protos_mconfig_mconfigs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CwfGatewayHealthConfigGrePeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cwf_protos_mconfig_mconfigs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cwf_protos_mconfig_mconfigs_proto_goTypes,
		DependencyIndexes: file_cwf_protos_mconfig_mconfigs_proto_depIdxs,
		MessageInfos:      file_cwf_protos_mconfig_mconfigs_proto_msgTypes,
	}.Build()
	File_cwf_protos_mconfig_mconfigs_proto = out.File
	file_cwf_protos_mconfig_mconfigs_proto_rawDesc = nil
	file_cwf_protos_mconfig_mconfigs_proto_goTypes = nil
	file_cwf_protos_mconfig_mconfigs_proto_depIdxs = nil
}
