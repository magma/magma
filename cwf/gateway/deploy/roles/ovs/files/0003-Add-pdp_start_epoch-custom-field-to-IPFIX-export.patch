From 349214792bccd93d3ce59cf9f9f16218f84874ea Mon Sep 17 00:00:00 2001
From: vagrant <vagrant@cwag-dev>
Date: Tue, 24 Mar 2020 19:27:25 -0700
Subject: [PATCH 3/3] Add pdp_start_epoch custom field to IPFIX export

---
 include/openvswitch/ofp-actions.h     |  1 +
 lib/odp-util.h                        |  3 ++-
 lib/ofp-actions.c                     | 13 +++++++---
 lib/ofp-actions.c.rej                 | 35 +++++++++++++++++++++++++++
 ofproto/ipfix-enterprise-entities.def |  1 +
 ofproto/ofproto-dpif-ipfix.c          | 15 +++++++-----
 ofproto/ofproto-dpif-xlate.c          |  1 +
 7 files changed, 59 insertions(+), 10 deletions(-)
 create mode 100644 lib/ofp-actions.c.rej

diff --git a/include/openvswitch/ofp-actions.h b/include/openvswitch/ofp-actions.h
index cd23d1322..c2f1dd139 100644
--- a/include/openvswitch/ofp-actions.h
+++ b/include/openvswitch/ofp-actions.h
@@ -1010,6 +1010,7 @@ struct ofpact_sample {
         uint8_t msisdn[16];
         struct eth_addr apn_mac_addr;
         uint8_t apn_name[24];
+        uint64_t pdp_start_epoch;
     );
 };
 
diff --git a/lib/odp-util.h b/lib/odp-util.h
index 67bcbb096..701604e97 100644
--- a/lib/odp-util.h
+++ b/lib/odp-util.h
@@ -336,6 +336,7 @@ struct user_action_cookie {
             uint8_t msisdn[16];
             struct eth_addr apn_mac_addr;
             uint8_t apn_name[24];
+            uint64_t pdp_start_epoch;
         } flow_sample;
 
         struct {
@@ -355,7 +356,7 @@ struct user_action_cookie {
         } controller;
     };
 };
-BUILD_ASSERT_DECL(sizeof(struct user_action_cookie) == 112);
+BUILD_ASSERT_DECL(sizeof(struct user_action_cookie) == 120);
 
 size_t odp_put_userspace_action(uint32_t pid,
                                 const void *userdata, size_t userdata_size,
diff --git a/lib/ofp-actions.c b/lib/ofp-actions.c
index a1ad6c027..0a01926d9 100644
--- a/lib/ofp-actions.c
+++ b/lib/ofp-actions.c
@@ -6044,10 +6044,11 @@ struct nx_action_sample2 {
     uint8_t  msisdn[16];
     struct   eth_addr apn_mac_addr;
     uint8_t  apn_name[24];
+    uint64_t pdp_start_epoch;
     uint8_t  direction;             /* NXAST_SAMPLE3 only. */
     uint8_t  zeros[5];              /* Pad to a multiple of 8 bytes */
  };
- OFP_ASSERT(sizeof(struct nx_action_sample2) == 80);
+ OFP_ASSERT(sizeof(struct nx_action_sample2) == 88);
 
 static enum ofperr
 decode_NXAST_RAW_SAMPLE(const struct nx_action_sample *nas,
@@ -6085,6 +6086,7 @@ decode_SAMPLE2(const struct nx_action_sample2 *nas,
     sample->obs_point_id = ntohl(nas->obs_point_id);
     sample->sampling_port = u16_to_ofp(ntohs(nas->sampling_port));
     sample->apn_mac_addr = nas->apn_mac_addr;
+    sample->pdp_start_epoch = nas->pdp_start_epoch;
     memcpy(&sample->msisdn, &nas->msisdn, 16);
     memcpy(&sample->apn_name, &nas->apn_name, 24);
     sample->direction = direction;
@@ -6136,6 +6138,7 @@ encode_SAMPLE2(const struct ofpact_sample *sample,
     memcpy(&nas->msisdn, &sample->msisdn, 16);
     nas->apn_mac_addr = sample->apn_mac_addr;
     memcpy(&nas->apn_name, &sample->apn_name, 24);
+    nas->pdp_start_epoch = sample->pdp_start_epoch;
 }
 
 static void
@@ -6198,6 +6201,8 @@ parse_SAMPLE(char *arg, const struct ofpact_parse_params *pp)
             }
         } else if (!strcmp(key, "apn_mac_addr")) {
             error = str_to_mac(value, &os->apn_mac_addr);
+        } else if (!strcmp(key, "pdp_start_epoch")) {
+            error = str_to_u64(value, &os->pdp_start_epoch);
         } else if (!strcmp(key, "collector_set_id")) {
             error = str_to_u32(value, &os->collector_set_id);
         } else if (!strcmp(key, "obs_domain_id")) {
@@ -6235,12 +6240,14 @@ format_SAMPLE(const struct ofpact_sample *a,
     ds_put_format(fp->s, "%ssample(%s%sprobability=%s%"PRIu16
                   ",%scollector_set_id=%s%"PRIu32
                   ",%sobs_domain_id=%s%"PRIu32
-                  ",%sobs_point_id=%s%"PRIu32,
+                  ",%sobs_point_id=%s%"PRIu32
+                  ",%spdp_start_epoch=%s%"PRIu64,
                   colors.paren, colors.end,
                   colors.param, colors.end, a->probability,
                   colors.param, colors.end, a->collector_set_id,
                   colors.param, colors.end, a->obs_domain_id,
-                  colors.param, colors.end, a->obs_point_id);
+                  colors.param, colors.end, a->obs_point_id,
+                  colors.param, colors.end, a->pdp_start_epoch);
     if (!eth_addr_is_zero(a->apn_mac_addr)) {
         ds_put_format(fp->s,  ",%sapn_mac_addr=%s"ETH_ADDR_FMT,
                   colors.param, colors.end, ETH_ADDR_ARGS(a->apn_mac_addr));
diff --git a/lib/ofp-actions.c.rej b/lib/ofp-actions.c.rej
new file mode 100644
index 000000000..305d4f575
--- /dev/null
+++ b/lib/ofp-actions.c.rej
@@ -0,0 +1,35 @@
+diff a/lib/ofp-actions.c b/lib/ofp-actions.c	(rejected hunks)
+@@ -6232,18 +6235,25 @@ format_SAMPLE(const struct ofpact_sample *a,
+     ds_put_format(fp->s, "%ssample(%s%sprobability=%s%"PRIu16
+                   ",%scollector_set_id=%s%"PRIu32
+                   ",%sobs_domain_id=%s%"PRIu32
+-                  ",%sobs_point_id=%s%"PRIu32
+-                  ",%sapn_mac_addr=%s"ETH_ADDR_FMT
+-                  ",%smsisdn=%s%s"
+-                  ",%sapn_name=%s%s",
++                  ",%sobs_point_id=%s%"PRIu32,
+                   colors.paren, colors.end,
+                   colors.param, colors.end, a->probability,
+                   colors.param, colors.end, a->collector_set_id,
+                   colors.param, colors.end, a->obs_domain_id,
+-                  colors.param, colors.end, a->obs_point_id,
+-                  colors.param, colors.end, ETH_ADDR_ARGS(a->apn_mac_addr),
+-                  colors.param, colors.end, a->msisdn,
+-                  colors.param, colors.end, a->apn_name);
++                  colors.param, colors.end, a->obs_point_id);
++    if (!eth_addr_is_zero(a->apn_mac_addr)) {
++        ds_put_format(fp->s,  ",%sapn_mac_addr=%s"ETH_ADDR_FMT,
++                  colors.param, colors.end, ETH_ADDR_ARGS(a->apn_mac_addr));
++
++    }
++    if (strlen((const char *)a->msisdn)) {
++        ds_put_format(fp->s, ",%smsisdn=%s%s", colors.param, colors.end, a->msisdn);
++    }
++    if (strlen((const char *)a->apn_name)) {
++        char buf[32], *name;
++        name = str_quotify((char *)a->apn_name, 24, buf);
++        ds_put_format(fp->s, ",%sapn_name=%s%s", colors.param, colors.end, name);
++    }
+     if (a->sampling_port != OFPP_NONE) {
+         ds_put_format(fp->s, ",%ssampling_port=%s", colors.param, colors.end);
+         ofputil_format_port(a->sampling_port, fp->port_map, fp->s);
diff --git a/ofproto/ipfix-enterprise-entities.def b/ofproto/ipfix-enterprise-entities.def
index 89e77ec45..f59b69115 100644
--- a/ofproto/ipfix-enterprise-entities.def
+++ b/ofproto/ipfix-enterprise-entities.def
@@ -20,5 +20,6 @@ IPFIX_ENTERPRISE_ENTITY(MSISDN, 900, 16, msisdn, IPFIX_ENTERPRISE_IPDR)
 IPFIX_ENTERPRISE_ENTITY(APN_MAC_ADDRESS, 901, 6, apnMacAddress, IPFIX_ENTERPRISE_IPDR)
 IPFIX_ENTERPRISE_ENTITY(APN_NAME, 902, 24, apnName, IPFIX_ENTERPRISE_IPDR)
 IPFIX_ENTERPRISE_ENTITY(APP_NAME, 903, 4, appName, IPFIX_ENTERPRISE_IPDR)
+IPFIX_ENTERPRISE_ENTITY(PDP_START_EPOCH, 904, 8, pdpStartEpoch, IPFIX_ENTERPRISE_IPDR)
 
 #undef IPFIX_ENTERPRISE_ENTITY
diff --git a/ofproto/ofproto-dpif-ipfix.c b/ofproto/ofproto-dpif-ipfix.c
index 08699f341..88aec6b16 100644
--- a/ofproto/ofproto-dpif-ipfix.c
+++ b/ofproto/ofproto-dpif-ipfix.c
@@ -411,8 +411,9 @@ struct ipfix_data_ipdr_fields {
     struct eth_addr apn_mac_address;  /* APN_MAC_ADDRESS */
     uint8_t apn_name[24];  /* APN_NAME */
     uint32_t app_name;  /* APP_NAME */
+    uint64_t pdp_start_epoch; /* PDP_START_EPOCH */
 });
-BUILD_ASSERT_DECL(sizeof(struct ipfix_data_ipdr_fields) == 58);
+BUILD_ASSERT_DECL(sizeof(struct ipfix_data_ipdr_fields) == 66);
 
 /* Cf. IETF RFC 5102 Section 5.11.3. */
 enum ipfix_flow_end_reason {
@@ -1494,6 +1495,7 @@ ipfix_define_template_fields(enum ipfix_proto_l2 l2, enum ipfix_proto_l3 l3,
     DEF(APN_MAC_ADDRESS);
     DEF(APN_NAME);
     DEF(APP_NAME);
+    DEF(PDP_START_EPOCH);
 
     /* 2. Virtual observation ID, which is not a part of flow key. */
     if (virtual_obs_id_set) {
@@ -2112,7 +2114,7 @@ ipfix_cache_entry_init(const struct dpif_ipfix *di,
                        enum nx_action_sample_direction direction,
                        ovs_be64 flow_metadata, uint8_t *msisdn,
                        struct eth_addr *apn_mac_addr, uint8_t *apn_name,
-                       uint32_t app_name,
+                       uint32_t app_name, uint64_t pdp_start_epoch,
                        const struct dpif_ipfix_port *tunnel_port,
                        const struct flow_tnl *tunnel_key,
                        struct dpif_ipfix_global_stats *stats,
@@ -2315,6 +2317,7 @@ ipfix_cache_entry_init(const struct dpif_ipfix *di,
     ipdr_data = dp_packet_put_zeros(&msg, sizeof *ipdr_data);
     ipdr_data->imsi = flow_metadata;
     ipdr_data->app_name = app_name;
+    ipdr_data->pdp_start_epoch = pdp_start_epoch;
     if (msisdn != NULL)
         memcpy(&ipdr_data->msisdn, msisdn, 16);
     if (apn_mac_addr != NULL)
@@ -2697,7 +2700,7 @@ dpif_ipfix_sample(const struct dpif_ipfix *di,
                   enum nx_action_sample_direction direction,
                   ovs_be64 flow_metadata, uint8_t *msisdn,
                   struct eth_addr *apn_mac_addr, uint8_t *apn_name,
-                  uint32_t app_name,
+                  uint32_t app_name, uint64_t pdp_start_epoch,
                   const struct dpif_ipfix_port *tunnel_port,
                   const struct flow_tnl *tunnel_key,
                   const struct dpif_ipfix_actions *ipfix_actions)
@@ -2715,7 +2718,7 @@ dpif_ipfix_sample(const struct dpif_ipfix *di,
                                    output_odp_port, direction,
                                    flow_metadata, msisdn,
                                    apn_mac_addr, apn_name,
-                                   app_name,
+                                   app_name, pdp_start_epoch,
                                    tunnel_port, tunnel_key,
                                    &exporter->ipfix_global_stats,
                                    ipfix_actions);
@@ -2784,7 +2787,7 @@ dpif_ipfix_bridge_sample(struct dpif_ipfix *di, const struct dp_packet *packet,
                       di->bridge_exporter.options->obs_domain_id,
                       di->bridge_exporter.options->obs_point_id,
                       output_odp_port, NX_ACTION_SAMPLE_DEFAULT,
-                      0, NULL, NULL, NULL, 0, //not available for bridge export
+                      0, NULL, NULL, NULL, 0, 0, //not available for bridge export
                       tunnel_port, tunnel_key, ipfix_actions);
     ovs_mutex_unlock(&mutex);
 }
@@ -2832,7 +2835,7 @@ dpif_ipfix_flow_sample(struct dpif_ipfix *di, const struct dp_packet *packet,
                           output_odp_port, cookie->flow_sample.direction,
                           cookie->flow_sample.flow_metadata, (uint8_t *)&cookie->flow_sample.msisdn,
                           (struct eth_addr *)&cookie->flow_sample.apn_mac_addr, (uint8_t *)&cookie->flow_sample.apn_name,
-                          cookie->flow_sample.app_name,
+                          cookie->flow_sample.app_name, cookie->flow_sample.pdp_start_epoch,
                           tunnel_port, tunnel_key, ipfix_actions);
     }
     ovs_mutex_unlock(&mutex);
diff --git a/ofproto/ofproto-dpif-xlate.c b/ofproto/ofproto-dpif-xlate.c
index a73c3d419..e3c615af0 100644
--- a/ofproto/ofproto-dpif-xlate.c
+++ b/ofproto/ofproto-dpif-xlate.c
@@ -5539,6 +5539,7 @@ xlate_sample_action(struct xlate_ctx *ctx,
     cookie.flow_sample.direction = os->direction;
     cookie.flow_sample.flow_metadata = ctx->xin->flow.metadata;
     cookie.flow_sample.app_name = ctx->xin->flow.regs[10];
+    cookie.flow_sample.pdp_start_epoch = os->pdp_start_epoch;
     memcpy(&cookie.flow_sample.msisdn, &os->msisdn, 16);
     memcpy(&cookie.flow_sample.apn_mac_addr, &os->apn_mac_addr, sizeof(struct eth_addr));
     memcpy(&cookie.flow_sample.apn_name, &os->apn_name, 24);
-- 
2.17.1

