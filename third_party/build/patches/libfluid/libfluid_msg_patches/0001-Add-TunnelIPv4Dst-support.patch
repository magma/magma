From 470391a119c0fc708319c0d135b3e1f0c7508824 Mon Sep 17 00:00:00 2001
From: Nick Yurchenko <urchennko@gmail.com>
Date: Mon, 4 Oct 2021 19:15:09 +0000
Subject: [PATCH 1/4] Add TunnelIPv4Dst support

Signed-off-by: Nick Yurchenko <urchennko@gmail.com>
---
 fluid/of13/of13match.cc  | 70 ++++++++++++++++++++++++++++++++++++++++
 fluid/of13/of13match.hh  | 32 +++++++++++++++++-
 fluid/of13/openflow-13.h |  4 +++
 3 files changed, 105 insertions(+), 1 deletion(-)

diff --git a/fluid/of13/of13match.cc b/fluid/of13/of13match.cc
index 1370195..01b75e8 100644
--- a/fluid/of13/of13match.cc
+++ b/fluid/of13/of13match.cc
@@ -2193,6 +2193,76 @@ of_error TUNNELId::unpack(uint8_t *buffer) {
     return 0;
 }
 
+TunnelIPv4Dst::TunnelIPv4Dst()
+    : OXMTLV(of13::OFPXMC_NXM_1, of13::NXM_TUNNEL_IPV4_DST, false,
+          of13::OFP_OXM_IPV4_LEN),
+      value_((uint32_t) 0),
+      mask_((uint32_t) 0) {
+    create_oxm_req(0x0800, 0, 0, 0);
+}
+
+TunnelIPv4Dst::TunnelIPv4Dst(IPAddress value)
+    : OXMTLV(of13::OFPXMC_NXM_1, of13::NXM_TUNNEL_IPV4_DST, false,
+          of13::OFP_OXM_IPV4_LEN),
+      value_(value),
+      mask_((uint32_t) 0) {
+    create_oxm_req(0x0800, 0, 0, 0);
+}
+
+TunnelIPv4Dst::TunnelIPv4Dst(IPAddress value, IPAddress mask)
+    : OXMTLV(of13::OFPXMC_NXM_1, of13::NXM_TUNNEL_IPV4_DST, true,
+          of13::OFP_OXM_IPV4_LEN),
+      value_(value),
+      mask_(mask) {
+    create_oxm_req(0x0800, 0, 0, 0);
+}
+
+bool TunnelIPv4Dst::equals(const OXMTLV &other) {
+
+    if (const TunnelIPv4Dst * field = dynamic_cast<const TunnelIPv4Dst *>(&other)) {
+        return ((OXMTLV::equals(other)) && (this->value_ == field->value_)
+            && (this->has_mask_ ? this->mask_ == field->mask_ : true));
+    }
+    else {
+        return false;
+    }
+}
+
+OXMTLV& TunnelIPv4Dst::operator=(const OXMTLV& field) {
+    const TunnelIPv4Dst& dst = dynamic_cast<const TunnelIPv4Dst&>(field);
+    OXMTLV::operator=(field);
+    this->value_ = dst.value_;
+    this->mask_ = dst.mask_;
+    return *this;
+}
+
+size_t TunnelIPv4Dst::pack(uint8_t *buffer) {
+    OXMTLV::pack(buffer);
+    size_t len = this->length_;
+    if (this->has_mask_) {
+        len = this->length_ / 2;
+        uint32_t ip_mask = this->mask_.getIPv4();
+        memcpy(buffer + (of13::OFP_OXM_HEADER_LEN + len), &ip_mask, len);
+    }
+    uint32_t ip = this->value_.getIPv4();
+    memcpy(buffer + of13::OFP_OXM_HEADER_LEN, &ip, len);
+    return 0;
+}
+
+of_error TunnelIPv4Dst::unpack(uint8_t *buffer) {
+    uint32_t ip = *((uint32_t*) (buffer + of13::OFP_OXM_HEADER_LEN));
+    OXMTLV::unpack(buffer);
+    this->value_ = IPAddress(ip);
+    if (this->has_mask_) {
+        size_t len = this->length_ / 2;
+        uint32_t ip_mask = *((uint32_t*) (buffer + of13::OFP_OXM_HEADER_LEN
+            + len));
+        this->mask_ = IPAddress(ip_mask);
+    }
+    return 0;
+}
+
+
 IPv6Exthdr::IPv6Exthdr()
     : mask_(0),
       OXMTLV(of13::OFPXMC_OPENFLOW_BASIC, of13::OFPXMT_OFB_IPV6_EXTHDR, false,
diff --git a/fluid/of13/of13match.hh b/fluid/of13/of13match.hh
index 407308f..cf659a2 100644
--- a/fluid/of13/of13match.hh
+++ b/fluid/of13/of13match.hh
@@ -1115,6 +1115,37 @@ public:
     }
 };
 
+class TunnelIPv4Dst: public OXMTLV {
+protected:
+    IPAddress value_;
+    IPAddress mask_;
+public:
+    TunnelIPv4Dst();
+    TunnelIPv4Dst(IPAddress value);
+    TunnelIPv4Dst(IPAddress value, IPAddress mask);
+    ~TunnelIPv4Dst() {
+    }
+    virtual bool equals(const OXMTLV & other);
+    OXMTLV& operator=(const OXMTLV& field);
+    virtual TunnelIPv4Dst* clone() const {
+        return new TunnelIPv4Dst(*this);
+    }
+    size_t pack(uint8_t *buffer);
+    of_error unpack(uint8_t *buffer);
+    IPAddress value() const {
+        return this->value_;
+    }
+    IPAddress mask() const {
+        return this->mask_;
+    }
+    void value(IPAddress value) {
+        this->value_ = value;
+    }
+    void mask(IPAddress mask) {
+        this->mask_ = mask;
+    }
+};
+
 class IPv6Exthdr: public OXMTLV {
 private:
     uint16_t value_;
@@ -1215,4 +1246,3 @@ public:
 
 } //End of namespace fluid_msg
 #endif
-
diff --git a/fluid/of13/openflow-13.h b/fluid/of13/openflow-13.h
index e810fde..d891f35 100644
--- a/fluid/of13/openflow-13.h
+++ b/fluid/of13/openflow-13.h
@@ -342,6 +342,10 @@ enum oxm_ofb_match_fields {
     OFPXMT_OFB_IPV6_EXTHDR = 39 /* IPv6 Extension Header pseudo-field */
 };
 
+enum nxm_match_fields {
+  NXM_TUNNEL_IPV4_DST = 32
+};
+
 /* The VLAN id is 12-bits, so we can use the entire 16 bits to indicate
  * special conditions.
  */
-- 
2.25.1

