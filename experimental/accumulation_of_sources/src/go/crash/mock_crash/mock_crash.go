// Copyright 2021 The Magma Authors.
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/magma/magma/src/go/crash (interfaces: Crash)

// Package crash is a generated GoMock package.
package crash

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	crash "github.com/magma/magma/src/go/crash"
)

// MockCrash is a mock of Crash interface.
type MockCrash struct {
	ctrl     *gomock.Controller
	recorder *MockCrashMockRecorder
}

// MockCrashMockRecorder is the mock recorder for MockCrash.
type MockCrashMockRecorder struct {
	mock *MockCrash
}

// NewMockCrash creates a new mock instance.
func NewMockCrash(ctrl *gomock.Controller) *MockCrash {
	mock := &MockCrash{ctrl: ctrl}
	mock.recorder = &MockCrashMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrash) EXPECT() *MockCrashMockRecorder {
	return m.recorder
}

// AddBreadcrumb mocks base method.
func (m *MockCrash) AddBreadcrumb(arg0 crash.Breadcrumb) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddBreadcrumb", arg0)
}

// AddBreadcrumb indicates an expected call of AddBreadcrumb.
func (mr *MockCrashMockRecorder) AddBreadcrumb(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBreadcrumb", reflect.TypeOf((*MockCrash)(nil).AddBreadcrumb), arg0)
}

// Flush mocks base method.
func (m *MockCrash) Flush(arg0 time.Duration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockCrashMockRecorder) Flush(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockCrash)(nil).Flush), arg0)
}

// Recover mocks base method.
func (m *MockCrash) Recover(arg0 interface{}) crash.EventID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recover", arg0)
	ret0, _ := ret[0].(crash.EventID)
	return ret0
}

// Recover indicates an expected call of Recover.
func (mr *MockCrashMockRecorder) Recover(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recover", reflect.TypeOf((*MockCrash)(nil).Recover), arg0)
}
