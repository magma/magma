// Copyright 2021 The Magma Authors.
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: sentry.go

// Package mock_sentry is a generated GoMock package.
package mock_sentry

import (
	reflect "reflect"
	time "time"

	sentry "github.com/getsentry/sentry-go"
	gomock "github.com/golang/mock/gomock"
)

// MocksentryHub is a mock of sentryHub interface.
type MocksentryHub struct {
	ctrl     *gomock.Controller
	recorder *MocksentryHubMockRecorder
}

// MocksentryHubMockRecorder is the mock recorder for MocksentryHub.
type MocksentryHubMockRecorder struct {
	mock *MocksentryHub
}

// NewMocksentryHub creates a new mock instance.
func NewMocksentryHub(ctrl *gomock.Controller) *MocksentryHub {
	mock := &MocksentryHub{ctrl: ctrl}
	mock.recorder = &MocksentryHubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksentryHub) EXPECT() *MocksentryHubMockRecorder {
	return m.recorder
}

// AddBreadcrumb mocks base method.
func (m *MocksentryHub) AddBreadcrumb(breadcrumb *sentry.Breadcrumb, hint *sentry.BreadcrumbHint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddBreadcrumb", breadcrumb, hint)
}

// AddBreadcrumb indicates an expected call of AddBreadcrumb.
func (mr *MocksentryHubMockRecorder) AddBreadcrumb(breadcrumb, hint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBreadcrumb", reflect.TypeOf((*MocksentryHub)(nil).AddBreadcrumb), breadcrumb, hint)
}

// Flush mocks base method.
func (m *MocksentryHub) Flush(timeout time.Duration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush", timeout)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MocksentryHubMockRecorder) Flush(timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MocksentryHub)(nil).Flush), timeout)
}

// Recover mocks base method.
func (m *MocksentryHub) Recover(err interface{}) *sentry.EventID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recover", err)
	ret0, _ := ret[0].(*sentry.EventID)
	return ret0
}

// Recover indicates an expected call of Recover.
func (mr *MocksentryHubMockRecorder) Recover(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recover", reflect.TypeOf((*MocksentryHub)(nil).Recover), err)
}
