// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package policydb

import (
	context "context"
	orc8r "github.com/magma/magma/src/go/protos/magma/orc8r"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PolicyAssignmentControllerClient is the client API for PolicyAssignmentController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PolicyAssignmentControllerClient interface {
	// Associate the static rule with the IMSI
	//
	EnableStaticRules(ctx context.Context, in *EnableStaticRuleRequest, opts ...grpc.CallOption) (*orc8r.Void, error)
	// Unassociate the static rule with the IMSI
	//
	DisableStaticRules(ctx context.Context, in *DisableStaticRuleRequest, opts ...grpc.CallOption) (*orc8r.Void, error)
}

type policyAssignmentControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewPolicyAssignmentControllerClient(cc grpc.ClientConnInterface) PolicyAssignmentControllerClient {
	return &policyAssignmentControllerClient{cc}
}

func (c *policyAssignmentControllerClient) EnableStaticRules(ctx context.Context, in *EnableStaticRuleRequest, opts ...grpc.CallOption) (*orc8r.Void, error) {
	out := new(orc8r.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.PolicyAssignmentController/EnableStaticRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyAssignmentControllerClient) DisableStaticRules(ctx context.Context, in *DisableStaticRuleRequest, opts ...grpc.CallOption) (*orc8r.Void, error) {
	out := new(orc8r.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.PolicyAssignmentController/DisableStaticRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicyAssignmentControllerServer is the server API for PolicyAssignmentController service.
// All implementations must embed UnimplementedPolicyAssignmentControllerServer
// for forward compatibility
type PolicyAssignmentControllerServer interface {
	// Associate the static rule with the IMSI
	//
	EnableStaticRules(context.Context, *EnableStaticRuleRequest) (*orc8r.Void, error)
	// Unassociate the static rule with the IMSI
	//
	DisableStaticRules(context.Context, *DisableStaticRuleRequest) (*orc8r.Void, error)
	mustEmbedUnimplementedPolicyAssignmentControllerServer()
}

// UnimplementedPolicyAssignmentControllerServer must be embedded to have forward compatible implementations.
type UnimplementedPolicyAssignmentControllerServer struct {
}

func (UnimplementedPolicyAssignmentControllerServer) EnableStaticRules(context.Context, *EnableStaticRuleRequest) (*orc8r.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableStaticRules not implemented")
}
func (UnimplementedPolicyAssignmentControllerServer) DisableStaticRules(context.Context, *DisableStaticRuleRequest) (*orc8r.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableStaticRules not implemented")
}
func (UnimplementedPolicyAssignmentControllerServer) mustEmbedUnimplementedPolicyAssignmentControllerServer() {
}

// UnsafePolicyAssignmentControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PolicyAssignmentControllerServer will
// result in compilation errors.
type UnsafePolicyAssignmentControllerServer interface {
	mustEmbedUnimplementedPolicyAssignmentControllerServer()
}

func RegisterPolicyAssignmentControllerServer(s grpc.ServiceRegistrar, srv PolicyAssignmentControllerServer) {
	s.RegisterService(&PolicyAssignmentController_ServiceDesc, srv)
}

func _PolicyAssignmentController_EnableStaticRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableStaticRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyAssignmentControllerServer).EnableStaticRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.PolicyAssignmentController/EnableStaticRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyAssignmentControllerServer).EnableStaticRules(ctx, req.(*EnableStaticRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyAssignmentController_DisableStaticRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableStaticRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyAssignmentControllerServer).DisableStaticRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.PolicyAssignmentController/DisableStaticRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyAssignmentControllerServer).DisableStaticRules(ctx, req.(*DisableStaticRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PolicyAssignmentController_ServiceDesc is the grpc.ServiceDesc for PolicyAssignmentController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PolicyAssignmentController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.PolicyAssignmentController",
	HandlerType: (*PolicyAssignmentControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnableStaticRules",
			Handler:    _PolicyAssignmentController_EnableStaticRules_Handler,
		},
		{
			MethodName: "DisableStaticRules",
			Handler:    _PolicyAssignmentController_DisableStaticRules_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "policydb.proto",
}

// PolicyDBClient is the client API for PolicyDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PolicyDBClient interface {
	// Immediately install the static policy for the IMSI
	// Also unassociate the static rule with the IMSI on orc8r
	//
	EnableStaticRules(ctx context.Context, in *EnableStaticRuleRequest, opts ...grpc.CallOption) (*orc8r.Void, error)
	// Immediately uninstall the static policy for the IMSI
	// Also unassociate the static rule with the IMSI on orc8r
	//
	DisableStaticRules(ctx context.Context, in *DisableStaticRuleRequest, opts ...grpc.CallOption) (*orc8r.Void, error)
}

type policyDBClient struct {
	cc grpc.ClientConnInterface
}

func NewPolicyDBClient(cc grpc.ClientConnInterface) PolicyDBClient {
	return &policyDBClient{cc}
}

func (c *policyDBClient) EnableStaticRules(ctx context.Context, in *EnableStaticRuleRequest, opts ...grpc.CallOption) (*orc8r.Void, error) {
	out := new(orc8r.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.PolicyDB/EnableStaticRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyDBClient) DisableStaticRules(ctx context.Context, in *DisableStaticRuleRequest, opts ...grpc.CallOption) (*orc8r.Void, error) {
	out := new(orc8r.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.PolicyDB/DisableStaticRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicyDBServer is the server API for PolicyDB service.
// All implementations must embed UnimplementedPolicyDBServer
// for forward compatibility
type PolicyDBServer interface {
	// Immediately install the static policy for the IMSI
	// Also unassociate the static rule with the IMSI on orc8r
	//
	EnableStaticRules(context.Context, *EnableStaticRuleRequest) (*orc8r.Void, error)
	// Immediately uninstall the static policy for the IMSI
	// Also unassociate the static rule with the IMSI on orc8r
	//
	DisableStaticRules(context.Context, *DisableStaticRuleRequest) (*orc8r.Void, error)
	mustEmbedUnimplementedPolicyDBServer()
}

// UnimplementedPolicyDBServer must be embedded to have forward compatible implementations.
type UnimplementedPolicyDBServer struct {
}

func (UnimplementedPolicyDBServer) EnableStaticRules(context.Context, *EnableStaticRuleRequest) (*orc8r.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableStaticRules not implemented")
}
func (UnimplementedPolicyDBServer) DisableStaticRules(context.Context, *DisableStaticRuleRequest) (*orc8r.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableStaticRules not implemented")
}
func (UnimplementedPolicyDBServer) mustEmbedUnimplementedPolicyDBServer() {}

// UnsafePolicyDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PolicyDBServer will
// result in compilation errors.
type UnsafePolicyDBServer interface {
	mustEmbedUnimplementedPolicyDBServer()
}

func RegisterPolicyDBServer(s grpc.ServiceRegistrar, srv PolicyDBServer) {
	s.RegisterService(&PolicyDB_ServiceDesc, srv)
}

func _PolicyDB_EnableStaticRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableStaticRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyDBServer).EnableStaticRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.PolicyDB/EnableStaticRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyDBServer).EnableStaticRules(ctx, req.(*EnableStaticRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyDB_DisableStaticRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableStaticRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyDBServer).DisableStaticRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.PolicyDB/DisableStaticRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyDBServer).DisableStaticRules(ctx, req.(*DisableStaticRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PolicyDB_ServiceDesc is the grpc.ServiceDesc for PolicyDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PolicyDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.PolicyDB",
	HandlerType: (*PolicyDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnableStaticRules",
			Handler:    _PolicyDB_EnableStaticRules_Handler,
		},
		{
			MethodName: "DisableStaticRules",
			Handler:    _PolicyDB_DisableStaticRules_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "policydb.proto",
}
