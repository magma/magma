// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protos "magma/orc8r/lib/go/protos"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceHealthClient is the client API for ServiceHealth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceHealthClient interface {
	// Disable service functionality for the time specified in the request
	Disable(ctx context.Context, in *DisableMessage, opts ...grpc.CallOption) (*protos.Void, error)
	// Enable service functionality
	Enable(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*protos.Void, error)
	// Get health status of the service
	GetHealthStatus(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*HealthStatus, error)
}

type serviceHealthClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceHealthClient(cc grpc.ClientConnInterface) ServiceHealthClient {
	return &serviceHealthClient{cc}
}

func (c *serviceHealthClient) Disable(ctx context.Context, in *DisableMessage, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.ServiceHealth/Disable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceHealthClient) Enable(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.ServiceHealth/Enable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceHealthClient) GetHealthStatus(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*HealthStatus, error) {
	out := new(HealthStatus)
	err := c.cc.Invoke(ctx, "/magma.feg.ServiceHealth/GetHealthStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceHealthServer is the server API for ServiceHealth service.
// All implementations should embed UnimplementedServiceHealthServer
// for forward compatibility
type ServiceHealthServer interface {
	// Disable service functionality for the time specified in the request
	Disable(context.Context, *DisableMessage) (*protos.Void, error)
	// Enable service functionality
	Enable(context.Context, *protos.Void) (*protos.Void, error)
	// Get health status of the service
	GetHealthStatus(context.Context, *protos.Void) (*HealthStatus, error)
}

// UnimplementedServiceHealthServer should be embedded to have forward compatible implementations.
type UnimplementedServiceHealthServer struct {
}

func (UnimplementedServiceHealthServer) Disable(context.Context, *DisableMessage) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (UnimplementedServiceHealthServer) Enable(context.Context, *protos.Void) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enable not implemented")
}
func (UnimplementedServiceHealthServer) GetHealthStatus(context.Context, *protos.Void) (*HealthStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealthStatus not implemented")
}

// UnsafeServiceHealthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceHealthServer will
// result in compilation errors.
type UnsafeServiceHealthServer interface {
	mustEmbedUnimplementedServiceHealthServer()
}

func RegisterServiceHealthServer(s grpc.ServiceRegistrar, srv ServiceHealthServer) {
	s.RegisterService(&ServiceHealth_ServiceDesc, srv)
}

func _ServiceHealth_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceHealthServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.ServiceHealth/Disable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceHealthServer).Disable(ctx, req.(*DisableMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceHealth_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceHealthServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.ServiceHealth/Enable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceHealthServer).Enable(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceHealth_GetHealthStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceHealthServer).GetHealthStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.ServiceHealth/GetHealthStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceHealthServer).GetHealthStatus(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceHealth_ServiceDesc is the grpc.ServiceDesc for ServiceHealth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceHealth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.feg.ServiceHealth",
	HandlerType: (*ServiceHealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Disable",
			Handler:    _ServiceHealth_Disable_Handler,
		},
		{
			MethodName: "Enable",
			Handler:    _ServiceHealth_Enable_Handler,
		},
		{
			MethodName: "GetHealthStatus",
			Handler:    _ServiceHealth_GetHealthStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feg/protos/service_health.proto",
}
