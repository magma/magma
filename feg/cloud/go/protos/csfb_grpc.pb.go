// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protos "magma/orc8r/lib/go/protos"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CSFBFedGWServiceClient is the client API for CSFBFedGWService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CSFBFedGWServiceClient interface {
	AlertAc(ctx context.Context, in *AlertAck, opts ...grpc.CallOption) (*protos.Void, error)
	AlertRej(ctx context.Context, in *AlertReject, opts ...grpc.CallOption) (*protos.Void, error)
	EPSDetachInd(ctx context.Context, in *EPSDetachIndication, opts ...grpc.CallOption) (*protos.Void, error)
	IMSIDetachInd(ctx context.Context, in *IMSIDetachIndication, opts ...grpc.CallOption) (*protos.Void, error)
	LocationUpdateReq(ctx context.Context, in *LocationUpdateRequest, opts ...grpc.CallOption) (*protos.Void, error)
	PagingRej(ctx context.Context, in *PagingReject, opts ...grpc.CallOption) (*protos.Void, error)
	ServiceReq(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*protos.Void, error)
	TMSIReallocationComp(ctx context.Context, in *TMSIReallocationComplete, opts ...grpc.CallOption) (*protos.Void, error)
	UEActivityInd(ctx context.Context, in *UEActivityIndication, opts ...grpc.CallOption) (*protos.Void, error)
	UEUnreach(ctx context.Context, in *UEUnreachable, opts ...grpc.CallOption) (*protos.Void, error)
	Uplink(ctx context.Context, in *UplinkUnitdata, opts ...grpc.CallOption) (*protos.Void, error)
	// messages that could be sent from both directions
	MMEResetAck(ctx context.Context, in *ResetAck, opts ...grpc.CallOption) (*protos.Void, error)
	MMEResetIndication(ctx context.Context, in *ResetIndication, opts ...grpc.CallOption) (*protos.Void, error)
	MMEStatus(ctx context.Context, in *Status, opts ...grpc.CallOption) (*protos.Void, error)
}

type cSFBFedGWServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCSFBFedGWServiceClient(cc grpc.ClientConnInterface) CSFBFedGWServiceClient {
	return &cSFBFedGWServiceClient{cc}
}

func (c *cSFBFedGWServiceClient) AlertAc(ctx context.Context, in *AlertAck, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.CSFBFedGWService/AlertAc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSFBFedGWServiceClient) AlertRej(ctx context.Context, in *AlertReject, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.CSFBFedGWService/AlertRej", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSFBFedGWServiceClient) EPSDetachInd(ctx context.Context, in *EPSDetachIndication, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.CSFBFedGWService/EPSDetachInd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSFBFedGWServiceClient) IMSIDetachInd(ctx context.Context, in *IMSIDetachIndication, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.CSFBFedGWService/IMSIDetachInd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSFBFedGWServiceClient) LocationUpdateReq(ctx context.Context, in *LocationUpdateRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.CSFBFedGWService/LocationUpdateReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSFBFedGWServiceClient) PagingRej(ctx context.Context, in *PagingReject, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.CSFBFedGWService/PagingRej", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSFBFedGWServiceClient) ServiceReq(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.CSFBFedGWService/ServiceReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSFBFedGWServiceClient) TMSIReallocationComp(ctx context.Context, in *TMSIReallocationComplete, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.CSFBFedGWService/TMSIReallocationComp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSFBFedGWServiceClient) UEActivityInd(ctx context.Context, in *UEActivityIndication, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.CSFBFedGWService/UEActivityInd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSFBFedGWServiceClient) UEUnreach(ctx context.Context, in *UEUnreachable, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.CSFBFedGWService/UEUnreach", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSFBFedGWServiceClient) Uplink(ctx context.Context, in *UplinkUnitdata, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.CSFBFedGWService/Uplink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSFBFedGWServiceClient) MMEResetAck(ctx context.Context, in *ResetAck, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.CSFBFedGWService/MMEResetAck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSFBFedGWServiceClient) MMEResetIndication(ctx context.Context, in *ResetIndication, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.CSFBFedGWService/MMEResetIndication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSFBFedGWServiceClient) MMEStatus(ctx context.Context, in *Status, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.CSFBFedGWService/MMEStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CSFBFedGWServiceServer is the server API for CSFBFedGWService service.
// All implementations should embed UnimplementedCSFBFedGWServiceServer
// for forward compatibility
type CSFBFedGWServiceServer interface {
	AlertAc(context.Context, *AlertAck) (*protos.Void, error)
	AlertRej(context.Context, *AlertReject) (*protos.Void, error)
	EPSDetachInd(context.Context, *EPSDetachIndication) (*protos.Void, error)
	IMSIDetachInd(context.Context, *IMSIDetachIndication) (*protos.Void, error)
	LocationUpdateReq(context.Context, *LocationUpdateRequest) (*protos.Void, error)
	PagingRej(context.Context, *PagingReject) (*protos.Void, error)
	ServiceReq(context.Context, *ServiceRequest) (*protos.Void, error)
	TMSIReallocationComp(context.Context, *TMSIReallocationComplete) (*protos.Void, error)
	UEActivityInd(context.Context, *UEActivityIndication) (*protos.Void, error)
	UEUnreach(context.Context, *UEUnreachable) (*protos.Void, error)
	Uplink(context.Context, *UplinkUnitdata) (*protos.Void, error)
	// messages that could be sent from both directions
	MMEResetAck(context.Context, *ResetAck) (*protos.Void, error)
	MMEResetIndication(context.Context, *ResetIndication) (*protos.Void, error)
	MMEStatus(context.Context, *Status) (*protos.Void, error)
}

// UnimplementedCSFBFedGWServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCSFBFedGWServiceServer struct {
}

func (UnimplementedCSFBFedGWServiceServer) AlertAc(context.Context, *AlertAck) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlertAc not implemented")
}
func (UnimplementedCSFBFedGWServiceServer) AlertRej(context.Context, *AlertReject) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlertRej not implemented")
}
func (UnimplementedCSFBFedGWServiceServer) EPSDetachInd(context.Context, *EPSDetachIndication) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EPSDetachInd not implemented")
}
func (UnimplementedCSFBFedGWServiceServer) IMSIDetachInd(context.Context, *IMSIDetachIndication) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IMSIDetachInd not implemented")
}
func (UnimplementedCSFBFedGWServiceServer) LocationUpdateReq(context.Context, *LocationUpdateRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocationUpdateReq not implemented")
}
func (UnimplementedCSFBFedGWServiceServer) PagingRej(context.Context, *PagingReject) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PagingRej not implemented")
}
func (UnimplementedCSFBFedGWServiceServer) ServiceReq(context.Context, *ServiceRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceReq not implemented")
}
func (UnimplementedCSFBFedGWServiceServer) TMSIReallocationComp(context.Context, *TMSIReallocationComplete) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TMSIReallocationComp not implemented")
}
func (UnimplementedCSFBFedGWServiceServer) UEActivityInd(context.Context, *UEActivityIndication) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UEActivityInd not implemented")
}
func (UnimplementedCSFBFedGWServiceServer) UEUnreach(context.Context, *UEUnreachable) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UEUnreach not implemented")
}
func (UnimplementedCSFBFedGWServiceServer) Uplink(context.Context, *UplinkUnitdata) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Uplink not implemented")
}
func (UnimplementedCSFBFedGWServiceServer) MMEResetAck(context.Context, *ResetAck) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MMEResetAck not implemented")
}
func (UnimplementedCSFBFedGWServiceServer) MMEResetIndication(context.Context, *ResetIndication) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MMEResetIndication not implemented")
}
func (UnimplementedCSFBFedGWServiceServer) MMEStatus(context.Context, *Status) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MMEStatus not implemented")
}

// UnsafeCSFBFedGWServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CSFBFedGWServiceServer will
// result in compilation errors.
type UnsafeCSFBFedGWServiceServer interface {
	mustEmbedUnimplementedCSFBFedGWServiceServer()
}

func RegisterCSFBFedGWServiceServer(s grpc.ServiceRegistrar, srv CSFBFedGWServiceServer) {
	s.RegisterService(&CSFBFedGWService_ServiceDesc, srv)
}

func _CSFBFedGWService_AlertAc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertAck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSFBFedGWServiceServer).AlertAc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.CSFBFedGWService/AlertAc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSFBFedGWServiceServer).AlertAc(ctx, req.(*AlertAck))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSFBFedGWService_AlertRej_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertReject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSFBFedGWServiceServer).AlertRej(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.CSFBFedGWService/AlertRej",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSFBFedGWServiceServer).AlertRej(ctx, req.(*AlertReject))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSFBFedGWService_EPSDetachInd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EPSDetachIndication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSFBFedGWServiceServer).EPSDetachInd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.CSFBFedGWService/EPSDetachInd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSFBFedGWServiceServer).EPSDetachInd(ctx, req.(*EPSDetachIndication))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSFBFedGWService_IMSIDetachInd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IMSIDetachIndication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSFBFedGWServiceServer).IMSIDetachInd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.CSFBFedGWService/IMSIDetachInd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSFBFedGWServiceServer).IMSIDetachInd(ctx, req.(*IMSIDetachIndication))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSFBFedGWService_LocationUpdateReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocationUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSFBFedGWServiceServer).LocationUpdateReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.CSFBFedGWService/LocationUpdateReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSFBFedGWServiceServer).LocationUpdateReq(ctx, req.(*LocationUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSFBFedGWService_PagingRej_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PagingReject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSFBFedGWServiceServer).PagingRej(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.CSFBFedGWService/PagingRej",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSFBFedGWServiceServer).PagingRej(ctx, req.(*PagingReject))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSFBFedGWService_ServiceReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSFBFedGWServiceServer).ServiceReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.CSFBFedGWService/ServiceReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSFBFedGWServiceServer).ServiceReq(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSFBFedGWService_TMSIReallocationComp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TMSIReallocationComplete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSFBFedGWServiceServer).TMSIReallocationComp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.CSFBFedGWService/TMSIReallocationComp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSFBFedGWServiceServer).TMSIReallocationComp(ctx, req.(*TMSIReallocationComplete))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSFBFedGWService_UEActivityInd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UEActivityIndication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSFBFedGWServiceServer).UEActivityInd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.CSFBFedGWService/UEActivityInd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSFBFedGWServiceServer).UEActivityInd(ctx, req.(*UEActivityIndication))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSFBFedGWService_UEUnreach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UEUnreachable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSFBFedGWServiceServer).UEUnreach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.CSFBFedGWService/UEUnreach",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSFBFedGWServiceServer).UEUnreach(ctx, req.(*UEUnreachable))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSFBFedGWService_Uplink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UplinkUnitdata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSFBFedGWServiceServer).Uplink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.CSFBFedGWService/Uplink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSFBFedGWServiceServer).Uplink(ctx, req.(*UplinkUnitdata))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSFBFedGWService_MMEResetAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetAck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSFBFedGWServiceServer).MMEResetAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.CSFBFedGWService/MMEResetAck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSFBFedGWServiceServer).MMEResetAck(ctx, req.(*ResetAck))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSFBFedGWService_MMEResetIndication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetIndication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSFBFedGWServiceServer).MMEResetIndication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.CSFBFedGWService/MMEResetIndication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSFBFedGWServiceServer).MMEResetIndication(ctx, req.(*ResetIndication))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSFBFedGWService_MMEStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Status)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSFBFedGWServiceServer).MMEStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.CSFBFedGWService/MMEStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSFBFedGWServiceServer).MMEStatus(ctx, req.(*Status))
	}
	return interceptor(ctx, in, info, handler)
}

// CSFBFedGWService_ServiceDesc is the grpc.ServiceDesc for CSFBFedGWService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CSFBFedGWService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.feg.CSFBFedGWService",
	HandlerType: (*CSFBFedGWServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AlertAc",
			Handler:    _CSFBFedGWService_AlertAc_Handler,
		},
		{
			MethodName: "AlertRej",
			Handler:    _CSFBFedGWService_AlertRej_Handler,
		},
		{
			MethodName: "EPSDetachInd",
			Handler:    _CSFBFedGWService_EPSDetachInd_Handler,
		},
		{
			MethodName: "IMSIDetachInd",
			Handler:    _CSFBFedGWService_IMSIDetachInd_Handler,
		},
		{
			MethodName: "LocationUpdateReq",
			Handler:    _CSFBFedGWService_LocationUpdateReq_Handler,
		},
		{
			MethodName: "PagingRej",
			Handler:    _CSFBFedGWService_PagingRej_Handler,
		},
		{
			MethodName: "ServiceReq",
			Handler:    _CSFBFedGWService_ServiceReq_Handler,
		},
		{
			MethodName: "TMSIReallocationComp",
			Handler:    _CSFBFedGWService_TMSIReallocationComp_Handler,
		},
		{
			MethodName: "UEActivityInd",
			Handler:    _CSFBFedGWService_UEActivityInd_Handler,
		},
		{
			MethodName: "UEUnreach",
			Handler:    _CSFBFedGWService_UEUnreach_Handler,
		},
		{
			MethodName: "Uplink",
			Handler:    _CSFBFedGWService_Uplink_Handler,
		},
		{
			MethodName: "MMEResetAck",
			Handler:    _CSFBFedGWService_MMEResetAck_Handler,
		},
		{
			MethodName: "MMEResetIndication",
			Handler:    _CSFBFedGWService_MMEResetIndication_Handler,
		},
		{
			MethodName: "MMEStatus",
			Handler:    _CSFBFedGWService_MMEStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feg/protos/csfb.proto",
}

// CSFBGatewayServiceClient is the client API for CSFBGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CSFBGatewayServiceClient interface {
	AlertReq(ctx context.Context, in *AlertRequest, opts ...grpc.CallOption) (*protos.Void, error)
	Downlink(ctx context.Context, in *DownlinkUnitdata, opts ...grpc.CallOption) (*protos.Void, error)
	EPSDetachAc(ctx context.Context, in *EPSDetachAck, opts ...grpc.CallOption) (*protos.Void, error)
	IMSIDetachAc(ctx context.Context, in *IMSIDetachAck, opts ...grpc.CallOption) (*protos.Void, error)
	LocationUpdateAcc(ctx context.Context, in *LocationUpdateAccept, opts ...grpc.CallOption) (*protos.Void, error)
	LocationUpdateRej(ctx context.Context, in *LocationUpdateReject, opts ...grpc.CallOption) (*protos.Void, error)
	MMInformationReq(ctx context.Context, in *MMInformationRequest, opts ...grpc.CallOption) (*protos.Void, error)
	PagingReq(ctx context.Context, in *PagingRequest, opts ...grpc.CallOption) (*protos.Void, error)
	ReleaseReq(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*protos.Void, error)
	ServiceAbort(ctx context.Context, in *ServiceAbortRequest, opts ...grpc.CallOption) (*protos.Void, error)
	// messages that could be sent from both directions
	VLRResetAck(ctx context.Context, in *ResetAck, opts ...grpc.CallOption) (*protos.Void, error)
	VLRResetIndication(ctx context.Context, in *ResetIndication, opts ...grpc.CallOption) (*protos.Void, error)
	VLRStatus(ctx context.Context, in *Status, opts ...grpc.CallOption) (*protos.Void, error)
}

type cSFBGatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCSFBGatewayServiceClient(cc grpc.ClientConnInterface) CSFBGatewayServiceClient {
	return &cSFBGatewayServiceClient{cc}
}

func (c *cSFBGatewayServiceClient) AlertReq(ctx context.Context, in *AlertRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.CSFBGatewayService/AlertReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSFBGatewayServiceClient) Downlink(ctx context.Context, in *DownlinkUnitdata, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.CSFBGatewayService/Downlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSFBGatewayServiceClient) EPSDetachAc(ctx context.Context, in *EPSDetachAck, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.CSFBGatewayService/EPSDetachAc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSFBGatewayServiceClient) IMSIDetachAc(ctx context.Context, in *IMSIDetachAck, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.CSFBGatewayService/IMSIDetachAc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSFBGatewayServiceClient) LocationUpdateAcc(ctx context.Context, in *LocationUpdateAccept, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.CSFBGatewayService/LocationUpdateAcc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSFBGatewayServiceClient) LocationUpdateRej(ctx context.Context, in *LocationUpdateReject, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.CSFBGatewayService/LocationUpdateRej", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSFBGatewayServiceClient) MMInformationReq(ctx context.Context, in *MMInformationRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.CSFBGatewayService/MMInformationReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSFBGatewayServiceClient) PagingReq(ctx context.Context, in *PagingRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.CSFBGatewayService/PagingReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSFBGatewayServiceClient) ReleaseReq(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.CSFBGatewayService/ReleaseReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSFBGatewayServiceClient) ServiceAbort(ctx context.Context, in *ServiceAbortRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.CSFBGatewayService/ServiceAbort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSFBGatewayServiceClient) VLRResetAck(ctx context.Context, in *ResetAck, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.CSFBGatewayService/VLRResetAck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSFBGatewayServiceClient) VLRResetIndication(ctx context.Context, in *ResetIndication, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.CSFBGatewayService/VLRResetIndication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSFBGatewayServiceClient) VLRStatus(ctx context.Context, in *Status, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.CSFBGatewayService/VLRStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CSFBGatewayServiceServer is the server API for CSFBGatewayService service.
// All implementations should embed UnimplementedCSFBGatewayServiceServer
// for forward compatibility
type CSFBGatewayServiceServer interface {
	AlertReq(context.Context, *AlertRequest) (*protos.Void, error)
	Downlink(context.Context, *DownlinkUnitdata) (*protos.Void, error)
	EPSDetachAc(context.Context, *EPSDetachAck) (*protos.Void, error)
	IMSIDetachAc(context.Context, *IMSIDetachAck) (*protos.Void, error)
	LocationUpdateAcc(context.Context, *LocationUpdateAccept) (*protos.Void, error)
	LocationUpdateRej(context.Context, *LocationUpdateReject) (*protos.Void, error)
	MMInformationReq(context.Context, *MMInformationRequest) (*protos.Void, error)
	PagingReq(context.Context, *PagingRequest) (*protos.Void, error)
	ReleaseReq(context.Context, *ReleaseRequest) (*protos.Void, error)
	ServiceAbort(context.Context, *ServiceAbortRequest) (*protos.Void, error)
	// messages that could be sent from both directions
	VLRResetAck(context.Context, *ResetAck) (*protos.Void, error)
	VLRResetIndication(context.Context, *ResetIndication) (*protos.Void, error)
	VLRStatus(context.Context, *Status) (*protos.Void, error)
}

// UnimplementedCSFBGatewayServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCSFBGatewayServiceServer struct {
}

func (UnimplementedCSFBGatewayServiceServer) AlertReq(context.Context, *AlertRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlertReq not implemented")
}
func (UnimplementedCSFBGatewayServiceServer) Downlink(context.Context, *DownlinkUnitdata) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Downlink not implemented")
}
func (UnimplementedCSFBGatewayServiceServer) EPSDetachAc(context.Context, *EPSDetachAck) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EPSDetachAc not implemented")
}
func (UnimplementedCSFBGatewayServiceServer) IMSIDetachAc(context.Context, *IMSIDetachAck) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IMSIDetachAc not implemented")
}
func (UnimplementedCSFBGatewayServiceServer) LocationUpdateAcc(context.Context, *LocationUpdateAccept) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocationUpdateAcc not implemented")
}
func (UnimplementedCSFBGatewayServiceServer) LocationUpdateRej(context.Context, *LocationUpdateReject) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocationUpdateRej not implemented")
}
func (UnimplementedCSFBGatewayServiceServer) MMInformationReq(context.Context, *MMInformationRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MMInformationReq not implemented")
}
func (UnimplementedCSFBGatewayServiceServer) PagingReq(context.Context, *PagingRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PagingReq not implemented")
}
func (UnimplementedCSFBGatewayServiceServer) ReleaseReq(context.Context, *ReleaseRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseReq not implemented")
}
func (UnimplementedCSFBGatewayServiceServer) ServiceAbort(context.Context, *ServiceAbortRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceAbort not implemented")
}
func (UnimplementedCSFBGatewayServiceServer) VLRResetAck(context.Context, *ResetAck) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VLRResetAck not implemented")
}
func (UnimplementedCSFBGatewayServiceServer) VLRResetIndication(context.Context, *ResetIndication) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VLRResetIndication not implemented")
}
func (UnimplementedCSFBGatewayServiceServer) VLRStatus(context.Context, *Status) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VLRStatus not implemented")
}

// UnsafeCSFBGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CSFBGatewayServiceServer will
// result in compilation errors.
type UnsafeCSFBGatewayServiceServer interface {
	mustEmbedUnimplementedCSFBGatewayServiceServer()
}

func RegisterCSFBGatewayServiceServer(s grpc.ServiceRegistrar, srv CSFBGatewayServiceServer) {
	s.RegisterService(&CSFBGatewayService_ServiceDesc, srv)
}

func _CSFBGatewayService_AlertReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSFBGatewayServiceServer).AlertReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.CSFBGatewayService/AlertReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSFBGatewayServiceServer).AlertReq(ctx, req.(*AlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSFBGatewayService_Downlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownlinkUnitdata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSFBGatewayServiceServer).Downlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.CSFBGatewayService/Downlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSFBGatewayServiceServer).Downlink(ctx, req.(*DownlinkUnitdata))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSFBGatewayService_EPSDetachAc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EPSDetachAck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSFBGatewayServiceServer).EPSDetachAc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.CSFBGatewayService/EPSDetachAc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSFBGatewayServiceServer).EPSDetachAc(ctx, req.(*EPSDetachAck))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSFBGatewayService_IMSIDetachAc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IMSIDetachAck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSFBGatewayServiceServer).IMSIDetachAc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.CSFBGatewayService/IMSIDetachAc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSFBGatewayServiceServer).IMSIDetachAc(ctx, req.(*IMSIDetachAck))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSFBGatewayService_LocationUpdateAcc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocationUpdateAccept)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSFBGatewayServiceServer).LocationUpdateAcc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.CSFBGatewayService/LocationUpdateAcc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSFBGatewayServiceServer).LocationUpdateAcc(ctx, req.(*LocationUpdateAccept))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSFBGatewayService_LocationUpdateRej_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocationUpdateReject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSFBGatewayServiceServer).LocationUpdateRej(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.CSFBGatewayService/LocationUpdateRej",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSFBGatewayServiceServer).LocationUpdateRej(ctx, req.(*LocationUpdateReject))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSFBGatewayService_MMInformationReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MMInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSFBGatewayServiceServer).MMInformationReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.CSFBGatewayService/MMInformationReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSFBGatewayServiceServer).MMInformationReq(ctx, req.(*MMInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSFBGatewayService_PagingReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSFBGatewayServiceServer).PagingReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.CSFBGatewayService/PagingReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSFBGatewayServiceServer).PagingReq(ctx, req.(*PagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSFBGatewayService_ReleaseReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSFBGatewayServiceServer).ReleaseReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.CSFBGatewayService/ReleaseReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSFBGatewayServiceServer).ReleaseReq(ctx, req.(*ReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSFBGatewayService_ServiceAbort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceAbortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSFBGatewayServiceServer).ServiceAbort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.CSFBGatewayService/ServiceAbort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSFBGatewayServiceServer).ServiceAbort(ctx, req.(*ServiceAbortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSFBGatewayService_VLRResetAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetAck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSFBGatewayServiceServer).VLRResetAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.CSFBGatewayService/VLRResetAck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSFBGatewayServiceServer).VLRResetAck(ctx, req.(*ResetAck))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSFBGatewayService_VLRResetIndication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetIndication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSFBGatewayServiceServer).VLRResetIndication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.CSFBGatewayService/VLRResetIndication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSFBGatewayServiceServer).VLRResetIndication(ctx, req.(*ResetIndication))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSFBGatewayService_VLRStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Status)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSFBGatewayServiceServer).VLRStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.CSFBGatewayService/VLRStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSFBGatewayServiceServer).VLRStatus(ctx, req.(*Status))
	}
	return interceptor(ctx, in, info, handler)
}

// CSFBGatewayService_ServiceDesc is the grpc.ServiceDesc for CSFBGatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CSFBGatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.feg.CSFBGatewayService",
	HandlerType: (*CSFBGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AlertReq",
			Handler:    _CSFBGatewayService_AlertReq_Handler,
		},
		{
			MethodName: "Downlink",
			Handler:    _CSFBGatewayService_Downlink_Handler,
		},
		{
			MethodName: "EPSDetachAc",
			Handler:    _CSFBGatewayService_EPSDetachAc_Handler,
		},
		{
			MethodName: "IMSIDetachAc",
			Handler:    _CSFBGatewayService_IMSIDetachAc_Handler,
		},
		{
			MethodName: "LocationUpdateAcc",
			Handler:    _CSFBGatewayService_LocationUpdateAcc_Handler,
		},
		{
			MethodName: "LocationUpdateRej",
			Handler:    _CSFBGatewayService_LocationUpdateRej_Handler,
		},
		{
			MethodName: "MMInformationReq",
			Handler:    _CSFBGatewayService_MMInformationReq_Handler,
		},
		{
			MethodName: "PagingReq",
			Handler:    _CSFBGatewayService_PagingReq_Handler,
		},
		{
			MethodName: "ReleaseReq",
			Handler:    _CSFBGatewayService_ReleaseReq_Handler,
		},
		{
			MethodName: "ServiceAbort",
			Handler:    _CSFBGatewayService_ServiceAbort_Handler,
		},
		{
			MethodName: "VLRResetAck",
			Handler:    _CSFBGatewayService_VLRResetAck_Handler,
		},
		{
			MethodName: "VLRResetIndication",
			Handler:    _CSFBGatewayService_VLRResetIndication_Handler,
		},
		{
			MethodName: "VLRStatus",
			Handler:    _CSFBGatewayService_VLRStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feg/protos/csfb.proto",
}
