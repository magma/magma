// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.10.0
// source: feg/protos/hlr/hlr_proxy.proto

package hlr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HlrProxyClient is the client API for HlrProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HlrProxyClient interface {
	AuthInfo(ctx context.Context, in *AuthInfoReq, opts ...grpc.CallOption) (*AuthInfoAns, error)
}

type hlrProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewHlrProxyClient(cc grpc.ClientConnInterface) HlrProxyClient {
	return &hlrProxyClient{cc}
}

func (c *hlrProxyClient) AuthInfo(ctx context.Context, in *AuthInfoReq, opts ...grpc.CallOption) (*AuthInfoAns, error) {
	out := new(AuthInfoAns)
	err := c.cc.Invoke(ctx, "/magma.feg.hlr.HlrProxy/AuthInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HlrProxyServer is the server API for HlrProxy service.
// All implementations must embed UnimplementedHlrProxyServer
// for forward compatibility
type HlrProxyServer interface {
	AuthInfo(context.Context, *AuthInfoReq) (*AuthInfoAns, error)
	mustEmbedUnimplementedHlrProxyServer()
}

// UnimplementedHlrProxyServer must be embedded to have forward compatible implementations.
type UnimplementedHlrProxyServer struct {
}

func (UnimplementedHlrProxyServer) AuthInfo(context.Context, *AuthInfoReq) (*AuthInfoAns, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthInfo not implemented")
}
func (UnimplementedHlrProxyServer) mustEmbedUnimplementedHlrProxyServer() {}

// UnsafeHlrProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HlrProxyServer will
// result in compilation errors.
type UnsafeHlrProxyServer interface {
	mustEmbedUnimplementedHlrProxyServer()
}

func RegisterHlrProxyServer(s grpc.ServiceRegistrar, srv HlrProxyServer) {
	s.RegisterService(&HlrProxy_ServiceDesc, srv)
}

func _HlrProxy_AuthInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HlrProxyServer).AuthInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.hlr.HlrProxy/AuthInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HlrProxyServer).AuthInfo(ctx, req.(*AuthInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// HlrProxy_ServiceDesc is the grpc.ServiceDesc for HlrProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HlrProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.feg.hlr.HlrProxy",
	HandlerType: (*HlrProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthInfo",
			Handler:    _HlrProxy_AuthInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feg/protos/hlr/hlr_proxy.proto",
}
