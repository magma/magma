//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.10.0
// source: feg/protos/s8_proxy.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	oai "magma/lte/cloud/go/protos/oai"
	protos "magma/orc8r/lib/go/protos"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PDNType int32

const (
	PDNType_UNUSED PDNType = 0
	PDNType_IPV4   PDNType = 1
	PDNType_IPV6   PDNType = 2
	PDNType_IPV4V6 PDNType = 3
	PDNType_NonIP  PDNType = 5
)

// Enum value maps for PDNType.
var (
	PDNType_name = map[int32]string{
		0: "UNUSED",
		1: "IPV4",
		2: "IPV6",
		3: "IPV4V6",
		5: "NonIP",
	}
	PDNType_value = map[string]int32{
		"UNUSED": 0,
		"IPV4":   1,
		"IPV6":   2,
		"IPV4V6": 3,
		"NonIP":  5,
	}
)

func (x PDNType) Enum() *PDNType {
	p := new(PDNType)
	*p = x
	return p
}

func (x PDNType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PDNType) Descriptor() protoreflect.EnumDescriptor {
	return file_feg_protos_s8_proxy_proto_enumTypes[0].Descriptor()
}

func (PDNType) Type() protoreflect.EnumType {
	return &file_feg_protos_s8_proxy_proto_enumTypes[0]
}

func (x PDNType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PDNType.Descriptor instead.
func (PDNType) EnumDescriptor() ([]byte, []int) {
	return file_feg_protos_s8_proxy_proto_rawDescGZIP(), []int{0}
}

type RATType int32

const (
	RATType_RESERVED      RATType = 0
	RATType_UTRAN         RATType = 1
	RATType_GERAN         RATType = 2
	RATType_WLAN          RATType = 3
	RATType_GAN           RATType = 4
	RATType_HSPA          RATType = 5
	RATType_EUTRAN        RATType = 6
	RATType_VIRTUAL       RATType = 7
	RATType_EUTRAN_NB_IOT RATType = 8
	RATType_LTE_M         RATType = 9
	RATType_NR            RATType = 10
)

// Enum value maps for RATType.
var (
	RATType_name = map[int32]string{
		0:  "RESERVED",
		1:  "UTRAN",
		2:  "GERAN",
		3:  "WLAN",
		4:  "GAN",
		5:  "HSPA",
		6:  "EUTRAN",
		7:  "VIRTUAL",
		8:  "EUTRAN_NB_IOT",
		9:  "LTE_M",
		10: "NR",
	}
	RATType_value = map[string]int32{
		"RESERVED":      0,
		"UTRAN":         1,
		"GERAN":         2,
		"WLAN":          3,
		"GAN":           4,
		"HSPA":          5,
		"EUTRAN":        6,
		"VIRTUAL":       7,
		"EUTRAN_NB_IOT": 8,
		"LTE_M":         9,
		"NR":            10,
	}
)

func (x RATType) Enum() *RATType {
	p := new(RATType)
	*p = x
	return p
}

func (x RATType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RATType) Descriptor() protoreflect.EnumDescriptor {
	return file_feg_protos_s8_proxy_proto_enumTypes[1].Descriptor()
}

func (RATType) Type() protoreflect.EnumType {
	return &file_feg_protos_s8_proxy_proto_enumTypes[1]
}

func (x RATType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RATType.Descriptor instead.
func (RATType) EnumDescriptor() ([]byte, []int) {
	return file_feg_protos_s8_proxy_proto_rawDescGZIP(), []int{1}
}

type SelectionModeType int32

const (
	SelectionModeType_APN_provided_subscription_verified    SelectionModeType = 0
	SelectionModeType_ms_APN_subscription_not_verified      SelectionModeType = 1
	SelectionModeType_network_APN_subscription_not_verified SelectionModeType = 2
)

// Enum value maps for SelectionModeType.
var (
	SelectionModeType_name = map[int32]string{
		0: "APN_provided_subscription_verified",
		1: "ms_APN_subscription_not_verified",
		2: "network_APN_subscription_not_verified",
	}
	SelectionModeType_value = map[string]int32{
		"APN_provided_subscription_verified":    0,
		"ms_APN_subscription_not_verified":      1,
		"network_APN_subscription_not_verified": 2,
	}
)

func (x SelectionModeType) Enum() *SelectionModeType {
	p := new(SelectionModeType)
	*p = x
	return p
}

func (x SelectionModeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SelectionModeType) Descriptor() protoreflect.EnumDescriptor {
	return file_feg_protos_s8_proxy_proto_enumTypes[2].Descriptor()
}

func (SelectionModeType) Type() protoreflect.EnumType {
	return &file_feg_protos_s8_proxy_proto_enumTypes[2]
}

func (x SelectionModeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SelectionModeType.Descriptor instead.
func (SelectionModeType) EnumDescriptor() ([]byte, []int) {
	return file_feg_protos_s8_proxy_proto_rawDescGZIP(), []int{2}
}

// 3GPP TS 29.274  (not all 3gpp create session fields are included)
type CreateSessionRequestPgw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ip:port of pgw to send the request.
	// If empty s8_proxy will use value in its config
	PgwAddrs       string                   `protobuf:"bytes,1,opt,name=pgwAddrs,proto3" json:"pgwAddrs,omitempty"`
	Imsi           string                   `protobuf:"bytes,2,opt,name=imsi,proto3" json:"imsi,omitempty"`
	Msisdn         string                   `protobuf:"bytes,3,opt,name=msisdn,proto3" json:"msisdn,omitempty"`
	Mei            string                   `protobuf:"bytes,4,opt,name=mei,proto3" json:"mei,omitempty"`
	ServingNetwork *ServingNetwork          `protobuf:"bytes,5,opt,name=serving_network,json=servingNetwork,proto3" json:"serving_network,omitempty"`
	Uli            *UserLocationInformation `protobuf:"bytes,6,opt,name=uli,proto3" json:"uli,omitempty"`
	RatType        RATType                  `protobuf:"varint,7,opt,name=rat_type,json=ratType,proto3,enum=magma.feg.RATType" json:"rat_type,omitempty"`
	PdnType        PDNType                  `protobuf:"varint,8,opt,name=pdn_type,json=pdnType,proto3,enum=magma.feg.PDNType" json:"pdn_type,omitempty"`
	Paa            *PdnAddressAllocation    `protobuf:"bytes,9,opt,name=paa,proto3" json:"paa,omitempty"`
	Apn            string                   `protobuf:"bytes,10,opt,name=apn,proto3" json:"apn,omitempty"`
	// Aggregate Maximum BitRate
	Ambr          *Ambr             `protobuf:"bytes,11,opt,name=ambr,proto3" json:"ambr,omitempty"`
	SelectionMode SelectionModeType `protobuf:"varint,12,opt,name=selection_mode,json=selectionMode,proto3,enum=magma.feg.SelectionModeType" json:"selection_mode,omitempty"`
	// Contains AGW user plane F-TEID
	BearerContext *BearerContext `protobuf:"bytes,13,opt,name=bearer_context,json=bearerContext,proto3" json:"bearer_context,omitempty"`
	// AGW control plane TEID (injected by feg relay)
	CAgwTeid                     uint32                        `protobuf:"varint,14,opt,name=c_agw_teid,json=cAgwTeid,proto3" json:"c_agw_teid,omitempty"`
	ProtocolConfigurationOptions *ProtocolConfigurationOptions `protobuf:"bytes,15,opt,name=protocol_configuration_options,json=protocolConfigurationOptions,proto3" json:"protocol_configuration_options,omitempty"`
	IndicationFlag               []byte                        `protobuf:"bytes,16,opt,name=indication_flag,json=indicationFlag,proto3" json:"indication_flag,omitempty"`
	ChargingCharacteristics      string                        `protobuf:"bytes,17,opt,name=charging_characteristics,json=chargingCharacteristics,proto3" json:"charging_characteristics,omitempty"`
	TimeZone                     *TimeZone                     `protobuf:"bytes,18,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
}

func (x *CreateSessionRequestPgw) Reset() {
	*x = CreateSessionRequestPgw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_s8_proxy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionRequestPgw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionRequestPgw) ProtoMessage() {}

func (x *CreateSessionRequestPgw) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_s8_proxy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionRequestPgw.ProtoReflect.Descriptor instead.
func (*CreateSessionRequestPgw) Descriptor() ([]byte, []int) {
	return file_feg_protos_s8_proxy_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSessionRequestPgw) GetPgwAddrs() string {
	if x != nil {
		return x.PgwAddrs
	}
	return ""
}

func (x *CreateSessionRequestPgw) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *CreateSessionRequestPgw) GetMsisdn() string {
	if x != nil {
		return x.Msisdn
	}
	return ""
}

func (x *CreateSessionRequestPgw) GetMei() string {
	if x != nil {
		return x.Mei
	}
	return ""
}

func (x *CreateSessionRequestPgw) GetServingNetwork() *ServingNetwork {
	if x != nil {
		return x.ServingNetwork
	}
	return nil
}

func (x *CreateSessionRequestPgw) GetUli() *UserLocationInformation {
	if x != nil {
		return x.Uli
	}
	return nil
}

func (x *CreateSessionRequestPgw) GetRatType() RATType {
	if x != nil {
		return x.RatType
	}
	return RATType_RESERVED
}

func (x *CreateSessionRequestPgw) GetPdnType() PDNType {
	if x != nil {
		return x.PdnType
	}
	return PDNType_UNUSED
}

func (x *CreateSessionRequestPgw) GetPaa() *PdnAddressAllocation {
	if x != nil {
		return x.Paa
	}
	return nil
}

func (x *CreateSessionRequestPgw) GetApn() string {
	if x != nil {
		return x.Apn
	}
	return ""
}

func (x *CreateSessionRequestPgw) GetAmbr() *Ambr {
	if x != nil {
		return x.Ambr
	}
	return nil
}

func (x *CreateSessionRequestPgw) GetSelectionMode() SelectionModeType {
	if x != nil {
		return x.SelectionMode
	}
	return SelectionModeType_APN_provided_subscription_verified
}

func (x *CreateSessionRequestPgw) GetBearerContext() *BearerContext {
	if x != nil {
		return x.BearerContext
	}
	return nil
}

func (x *CreateSessionRequestPgw) GetCAgwTeid() uint32 {
	if x != nil {
		return x.CAgwTeid
	}
	return 0
}

func (x *CreateSessionRequestPgw) GetProtocolConfigurationOptions() *ProtocolConfigurationOptions {
	if x != nil {
		return x.ProtocolConfigurationOptions
	}
	return nil
}

func (x *CreateSessionRequestPgw) GetIndicationFlag() []byte {
	if x != nil {
		return x.IndicationFlag
	}
	return nil
}

func (x *CreateSessionRequestPgw) GetChargingCharacteristics() string {
	if x != nil {
		return x.ChargingCharacteristics
	}
	return ""
}

func (x *CreateSessionRequestPgw) GetTimeZone() *TimeZone {
	if x != nil {
		return x.TimeZone
	}
	return nil
}

type UserLocationInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lac    uint32 `protobuf:"varint,1,opt,name=lac,proto3" json:"lac,omitempty"`
	Ci     uint32 `protobuf:"varint,2,opt,name=ci,proto3" json:"ci,omitempty"`
	Sac    uint32 `protobuf:"varint,3,opt,name=sac,proto3" json:"sac,omitempty"`
	Rac    uint32 `protobuf:"varint,4,opt,name=rac,proto3" json:"rac,omitempty"`
	Tac    uint32 `protobuf:"varint,5,opt,name=tac,proto3" json:"tac,omitempty"`       // used on magma
	Eci    uint32 `protobuf:"varint,6,opt,name=eci,proto3" json:"eci,omitempty"`       // used on magma
	MeNbi  uint32 `protobuf:"varint,7,opt,name=MeNbi,proto3" json:"MeNbi,omitempty"`   // Macro eNodeB ID field
	EMeNbi uint32 `protobuf:"varint,8,opt,name=EMeNbi,proto3" json:"EMeNbi,omitempty"` // Extended Macro eNodeB ID field
}

func (x *UserLocationInformation) Reset() {
	*x = UserLocationInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_s8_proxy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLocationInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLocationInformation) ProtoMessage() {}

func (x *UserLocationInformation) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_s8_proxy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLocationInformation.ProtoReflect.Descriptor instead.
func (*UserLocationInformation) Descriptor() ([]byte, []int) {
	return file_feg_protos_s8_proxy_proto_rawDescGZIP(), []int{1}
}

func (x *UserLocationInformation) GetLac() uint32 {
	if x != nil {
		return x.Lac
	}
	return 0
}

func (x *UserLocationInformation) GetCi() uint32 {
	if x != nil {
		return x.Ci
	}
	return 0
}

func (x *UserLocationInformation) GetSac() uint32 {
	if x != nil {
		return x.Sac
	}
	return 0
}

func (x *UserLocationInformation) GetRac() uint32 {
	if x != nil {
		return x.Rac
	}
	return 0
}

func (x *UserLocationInformation) GetTac() uint32 {
	if x != nil {
		return x.Tac
	}
	return 0
}

func (x *UserLocationInformation) GetEci() uint32 {
	if x != nil {
		return x.Eci
	}
	return 0
}

func (x *UserLocationInformation) GetMeNbi() uint32 {
	if x != nil {
		return x.MeNbi
	}
	return 0
}

func (x *UserLocationInformation) GetEMeNbi() uint32 {
	if x != nil {
		return x.EMeNbi
	}
	return 0
}

type ServingNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mcc string `protobuf:"bytes,1,opt,name=mcc,proto3" json:"mcc,omitempty"`
	Mnc string `protobuf:"bytes,2,opt,name=mnc,proto3" json:"mnc,omitempty"`
}

func (x *ServingNetwork) Reset() {
	*x = ServingNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_s8_proxy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServingNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServingNetwork) ProtoMessage() {}

func (x *ServingNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_s8_proxy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServingNetwork.ProtoReflect.Descriptor instead.
func (*ServingNetwork) Descriptor() ([]byte, []int) {
	return file_feg_protos_s8_proxy_proto_rawDescGZIP(), []int{2}
}

func (x *ServingNetwork) GetMcc() string {
	if x != nil {
		return x.Mcc
	}
	return ""
}

func (x *ServingNetwork) GetMnc() string {
	if x != nil {
		return x.Mnc
	}
	return ""
}

type ProtocolConfigurationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigProtocol     uint32                      `protobuf:"varint,1,opt,name=config_protocol,json=configProtocol,proto3" json:"config_protocol,omitempty"`
	ProtoOrContainerId []*PcoProtocolOrContainerId `protobuf:"bytes,2,rep,name=proto_or_container_id,json=protoOrContainerId,proto3" json:"proto_or_container_id,omitempty"`
}

func (x *ProtocolConfigurationOptions) Reset() {
	*x = ProtocolConfigurationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_s8_proxy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolConfigurationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolConfigurationOptions) ProtoMessage() {}

func (x *ProtocolConfigurationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_s8_proxy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolConfigurationOptions.ProtoReflect.Descriptor instead.
func (*ProtocolConfigurationOptions) Descriptor() ([]byte, []int) {
	return file_feg_protos_s8_proxy_proto_rawDescGZIP(), []int{3}
}

func (x *ProtocolConfigurationOptions) GetConfigProtocol() uint32 {
	if x != nil {
		return x.ConfigProtocol
	}
	return 0
}

func (x *ProtocolConfigurationOptions) GetProtoOrContainerId() []*PcoProtocolOrContainerId {
	if x != nil {
		return x.ProtoOrContainerId
	}
	return nil
}

type PcoProtocolOrContainerId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Contents []byte `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *PcoProtocolOrContainerId) Reset() {
	*x = PcoProtocolOrContainerId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_s8_proxy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PcoProtocolOrContainerId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PcoProtocolOrContainerId) ProtoMessage() {}

func (x *PcoProtocolOrContainerId) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_s8_proxy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PcoProtocolOrContainerId.ProtoReflect.Descriptor instead.
func (*PcoProtocolOrContainerId) Descriptor() ([]byte, []int) {
	return file_feg_protos_s8_proxy_proto_rawDescGZIP(), []int{4}
}

func (x *PcoProtocolOrContainerId) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PcoProtocolOrContainerId) GetContents() []byte {
	if x != nil {
		return x.Contents
	}
	return nil
}

type BearerContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint32                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserPlaneFteid *Fteid                   `protobuf:"bytes,2,opt,name=user_plane_fteid,json=userPlaneFteid,proto3" json:"user_plane_fteid,omitempty"`
	Qos            *QosInformation          `protobuf:"bytes,3,opt,name=qos,proto3" json:"qos,omitempty"`
	ChargingId     uint32                   `protobuf:"varint,4,opt,name=charging_id,json=chargingId,proto3" json:"charging_id,omitempty"`
	Tft            *oai.TrafficFlowTemplate `protobuf:"bytes,5,opt,name=tft,proto3" json:"tft,omitempty"`
	Cause          uint32                   `protobuf:"varint,6,opt,name=cause,proto3" json:"cause,omitempty"`
}

func (x *BearerContext) Reset() {
	*x = BearerContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_s8_proxy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BearerContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BearerContext) ProtoMessage() {}

func (x *BearerContext) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_s8_proxy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BearerContext.ProtoReflect.Descriptor instead.
func (*BearerContext) Descriptor() ([]byte, []int) {
	return file_feg_protos_s8_proxy_proto_rawDescGZIP(), []int{5}
}

func (x *BearerContext) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BearerContext) GetUserPlaneFteid() *Fteid {
	if x != nil {
		return x.UserPlaneFteid
	}
	return nil
}

func (x *BearerContext) GetQos() *QosInformation {
	if x != nil {
		return x.Qos
	}
	return nil
}

func (x *BearerContext) GetChargingId() uint32 {
	if x != nil {
		return x.ChargingId
	}
	return 0
}

func (x *BearerContext) GetTft() *oai.TrafficFlowTemplate {
	if x != nil {
		return x.Tft
	}
	return nil
}

func (x *BearerContext) GetCause() uint32 {
	if x != nil {
		return x.Cause
	}
	return 0
}

type QosInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pci                     uint32 `protobuf:"varint,1,opt,name=pci,proto3" json:"pci,omitempty"`
	PriorityLevel           uint32 `protobuf:"varint,2,opt,name=priority_level,json=priorityLevel,proto3" json:"priority_level,omitempty"`
	PreemptionCapability    uint32 `protobuf:"varint,3,opt,name=preemption_capability,json=preemptionCapability,proto3" json:"preemption_capability,omitempty"`
	PreemptionVulnerability uint32 `protobuf:"varint,4,opt,name=preemption_vulnerability,json=preemptionVulnerability,proto3" json:"preemption_vulnerability,omitempty"`
	Qci                     uint32 `protobuf:"varint,5,opt,name=qci,proto3" json:"qci,omitempty"`
	Gbr                     *Ambr  `protobuf:"bytes,6,opt,name=gbr,proto3" json:"gbr,omitempty"`
	Mbr                     *Ambr  `protobuf:"bytes,7,opt,name=mbr,proto3" json:"mbr,omitempty"`
}

func (x *QosInformation) Reset() {
	*x = QosInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_s8_proxy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QosInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QosInformation) ProtoMessage() {}

func (x *QosInformation) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_s8_proxy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QosInformation.ProtoReflect.Descriptor instead.
func (*QosInformation) Descriptor() ([]byte, []int) {
	return file_feg_protos_s8_proxy_proto_rawDescGZIP(), []int{6}
}

func (x *QosInformation) GetPci() uint32 {
	if x != nil {
		return x.Pci
	}
	return 0
}

func (x *QosInformation) GetPriorityLevel() uint32 {
	if x != nil {
		return x.PriorityLevel
	}
	return 0
}

func (x *QosInformation) GetPreemptionCapability() uint32 {
	if x != nil {
		return x.PreemptionCapability
	}
	return 0
}

func (x *QosInformation) GetPreemptionVulnerability() uint32 {
	if x != nil {
		return x.PreemptionVulnerability
	}
	return 0
}

func (x *QosInformation) GetQci() uint32 {
	if x != nil {
		return x.Qci
	}
	return 0
}

func (x *QosInformation) GetGbr() *Ambr {
	if x != nil {
		return x.Gbr
	}
	return nil
}

func (x *QosInformation) GetMbr() *Ambr {
	if x != nil {
		return x.Mbr
	}
	return nil
}

type Ambr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrUl uint64 `protobuf:"varint,1,opt,name=br_ul,json=brUl,proto3" json:"br_ul,omitempty"`
	BrDl uint64 `protobuf:"varint,2,opt,name=br_dl,json=brDl,proto3" json:"br_dl,omitempty"`
}

func (x *Ambr) Reset() {
	*x = Ambr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_s8_proxy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ambr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ambr) ProtoMessage() {}

func (x *Ambr) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_s8_proxy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ambr.ProtoReflect.Descriptor instead.
func (*Ambr) Descriptor() ([]byte, []int) {
	return file_feg_protos_s8_proxy_proto_rawDescGZIP(), []int{7}
}

func (x *Ambr) GetBrUl() uint64 {
	if x != nil {
		return x.BrUl
	}
	return 0
}

func (x *Ambr) GetBrDl() uint64 {
	if x != nil {
		return x.BrDl
	}
	return 0
}

type PdnAddressAllocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv4Address string `protobuf:"bytes,1,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv6Address string `protobuf:"bytes,2,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	Ipv6Prefix  uint32 `protobuf:"varint,3,opt,name=ipv6_prefix,json=ipv6Prefix,proto3" json:"ipv6_prefix,omitempty"`
}

func (x *PdnAddressAllocation) Reset() {
	*x = PdnAddressAllocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_s8_proxy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdnAddressAllocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdnAddressAllocation) ProtoMessage() {}

func (x *PdnAddressAllocation) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_s8_proxy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdnAddressAllocation.ProtoReflect.Descriptor instead.
func (*PdnAddressAllocation) Descriptor() ([]byte, []int) {
	return file_feg_protos_s8_proxy_proto_rawDescGZIP(), []int{8}
}

func (x *PdnAddressAllocation) GetIpv4Address() string {
	if x != nil {
		return x.Ipv4Address
	}
	return ""
}

func (x *PdnAddressAllocation) GetIpv6Address() string {
	if x != nil {
		return x.Ipv6Address
	}
	return ""
}

func (x *PdnAddressAllocation) GetIpv6Prefix() uint32 {
	if x != nil {
		return x.Ipv6Prefix
	}
	return 0
}

type TimeZone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// delta in seconds from UTC
	DeltaSeconds int32 `protobuf:"varint,1,opt,name=delta_seconds,json=deltaSeconds,proto3" json:"delta_seconds,omitempty"`
	// Set to 0 for non daylight savings
	DaylightSavingTime uint32 `protobuf:"varint,2,opt,name=daylight_saving_time,json=daylightSavingTime,proto3" json:"daylight_saving_time,omitempty"`
}

func (x *TimeZone) Reset() {
	*x = TimeZone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_s8_proxy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeZone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeZone) ProtoMessage() {}

func (x *TimeZone) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_s8_proxy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeZone.ProtoReflect.Descriptor instead.
func (*TimeZone) Descriptor() ([]byte, []int) {
	return file_feg_protos_s8_proxy_proto_rawDescGZIP(), []int{9}
}

func (x *TimeZone) GetDeltaSeconds() int32 {
	if x != nil {
		return x.DeltaSeconds
	}
	return 0
}

func (x *TimeZone) GetDaylightSavingTime() uint32 {
	if x != nil {
		return x.DaylightSavingTime
	}
	return 0
}

type Fteid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv4Address string `protobuf:"bytes,1,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv6Address string `protobuf:"bytes,2,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	Teid        uint32 `protobuf:"varint,3,opt,name=teid,proto3" json:"teid,omitempty"`
}

func (x *Fteid) Reset() {
	*x = Fteid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_s8_proxy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fteid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fteid) ProtoMessage() {}

func (x *Fteid) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_s8_proxy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fteid.ProtoReflect.Descriptor instead.
func (*Fteid) Descriptor() ([]byte, []int) {
	return file_feg_protos_s8_proxy_proto_rawDescGZIP(), []int{10}
}

func (x *Fteid) GetIpv4Address() string {
	if x != nil {
		return x.Ipv4Address
	}
	return ""
}

func (x *Fteid) GetIpv6Address() string {
	if x != nil {
		return x.Ipv6Address
	}
	return ""
}

func (x *Fteid) GetTeid() uint32 {
	if x != nil {
		return x.Teid
	}
	return 0
}

type CreateSessionResponsePgw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PdnType PDNType `protobuf:"varint,1,opt,name=pdn_type,json=pdnType,proto3,enum=magma.feg.PDNType" json:"pdn_type,omitempty"`
	// subscriber_ip
	Paa            *PdnAddressAllocation `protobuf:"bytes,2,opt,name=paa,proto3" json:"paa,omitempty"`
	ApnRestriction uint32                `protobuf:"varint,3,opt,name=apn_restriction,json=apnRestriction,proto3" json:"apn_restriction,omitempty"`
	// AGW control plane TEID (was injected by feg relay during create session)
	CAgwTeid                     uint32                        `protobuf:"varint,4,opt,name=c_agw_teid,json=cAgwTeid,proto3" json:"c_agw_teid,omitempty"`
	CPgwFteid                    *Fteid                        `protobuf:"bytes,5,opt,name=c_pgw_fteid,json=cPgwFteid,proto3" json:"c_pgw_fteid,omitempty"`
	BearerContext                *BearerContext                `protobuf:"bytes,6,opt,name=bearer_context,json=bearerContext,proto3" json:"bearer_context,omitempty"`
	ProtocolConfigurationOptions *ProtocolConfigurationOptions `protobuf:"bytes,7,opt,name=protocol_configuration_options,json=protocolConfigurationOptions,proto3" json:"protocol_configuration_options,omitempty"`
	GtpError                     *GtpError                     `protobuf:"bytes,8,opt,name=gtp_error,json=gtpError,proto3" json:"gtp_error,omitempty"`
	// AGW user plane TEID (was injected by feg relay during create session)
	UAgwTeid uint32 `protobuf:"varint,9,opt,name=u_agw_teid,json=uAgwTeid,proto3" json:"u_agw_teid,omitempty"`
}

func (x *CreateSessionResponsePgw) Reset() {
	*x = CreateSessionResponsePgw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_s8_proxy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionResponsePgw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionResponsePgw) ProtoMessage() {}

func (x *CreateSessionResponsePgw) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_s8_proxy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionResponsePgw.ProtoReflect.Descriptor instead.
func (*CreateSessionResponsePgw) Descriptor() ([]byte, []int) {
	return file_feg_protos_s8_proxy_proto_rawDescGZIP(), []int{11}
}

func (x *CreateSessionResponsePgw) GetPdnType() PDNType {
	if x != nil {
		return x.PdnType
	}
	return PDNType_UNUSED
}

func (x *CreateSessionResponsePgw) GetPaa() *PdnAddressAllocation {
	if x != nil {
		return x.Paa
	}
	return nil
}

func (x *CreateSessionResponsePgw) GetApnRestriction() uint32 {
	if x != nil {
		return x.ApnRestriction
	}
	return 0
}

func (x *CreateSessionResponsePgw) GetCAgwTeid() uint32 {
	if x != nil {
		return x.CAgwTeid
	}
	return 0
}

func (x *CreateSessionResponsePgw) GetCPgwFteid() *Fteid {
	if x != nil {
		return x.CPgwFteid
	}
	return nil
}

func (x *CreateSessionResponsePgw) GetBearerContext() *BearerContext {
	if x != nil {
		return x.BearerContext
	}
	return nil
}

func (x *CreateSessionResponsePgw) GetProtocolConfigurationOptions() *ProtocolConfigurationOptions {
	if x != nil {
		return x.ProtocolConfigurationOptions
	}
	return nil
}

func (x *CreateSessionResponsePgw) GetGtpError() *GtpError {
	if x != nil {
		return x.GtpError
	}
	return nil
}

func (x *CreateSessionResponsePgw) GetUAgwTeid() uint32 {
	if x != nil {
		return x.UAgwTeid
	}
	return 0
}

type DeleteSessionRequestPgw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PgwAddrs       string                   `protobuf:"bytes,1,opt,name=pgwAddrs,proto3" json:"pgwAddrs,omitempty"`
	Imsi           string                   `protobuf:"bytes,2,opt,name=imsi,proto3" json:"imsi,omitempty"`
	BearerId       uint32                   `protobuf:"varint,3,opt,name=bearer_id,json=bearerId,proto3" json:"bearer_id,omitempty"`
	CAgwTeid       uint32                   `protobuf:"varint,4,opt,name=c_agw_teid,json=cAgwTeid,proto3" json:"c_agw_teid,omitempty"` // AGW control plane TEID
	CPgwTeid       uint32                   `protobuf:"varint,5,opt,name=c_pgw_teid,json=cPgwTeid,proto3" json:"c_pgw_teid,omitempty"`
	ServingNetwork *ServingNetwork          `protobuf:"bytes,6,opt,name=serving_network,json=servingNetwork,proto3" json:"serving_network,omitempty"`
	Uli            *UserLocationInformation `protobuf:"bytes,7,opt,name=uli,proto3" json:"uli,omitempty"`
}

func (x *DeleteSessionRequestPgw) Reset() {
	*x = DeleteSessionRequestPgw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_s8_proxy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSessionRequestPgw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSessionRequestPgw) ProtoMessage() {}

func (x *DeleteSessionRequestPgw) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_s8_proxy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSessionRequestPgw.ProtoReflect.Descriptor instead.
func (*DeleteSessionRequestPgw) Descriptor() ([]byte, []int) {
	return file_feg_protos_s8_proxy_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteSessionRequestPgw) GetPgwAddrs() string {
	if x != nil {
		return x.PgwAddrs
	}
	return ""
}

func (x *DeleteSessionRequestPgw) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *DeleteSessionRequestPgw) GetBearerId() uint32 {
	if x != nil {
		return x.BearerId
	}
	return 0
}

func (x *DeleteSessionRequestPgw) GetCAgwTeid() uint32 {
	if x != nil {
		return x.CAgwTeid
	}
	return 0
}

func (x *DeleteSessionRequestPgw) GetCPgwTeid() uint32 {
	if x != nil {
		return x.CPgwTeid
	}
	return 0
}

func (x *DeleteSessionRequestPgw) GetServingNetwork() *ServingNetwork {
	if x != nil {
		return x.ServingNetwork
	}
	return nil
}

func (x *DeleteSessionRequestPgw) GetUli() *UserLocationInformation {
	if x != nil {
		return x.Uli
	}
	return nil
}

type DeleteSessionResponsePgw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GtpError *GtpError `protobuf:"bytes,1,opt,name=gtp_error,json=gtpError,proto3" json:"gtp_error,omitempty"`
}

func (x *DeleteSessionResponsePgw) Reset() {
	*x = DeleteSessionResponsePgw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_s8_proxy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSessionResponsePgw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSessionResponsePgw) ProtoMessage() {}

func (x *DeleteSessionResponsePgw) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_s8_proxy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSessionResponsePgw.ProtoReflect.Descriptor instead.
func (*DeleteSessionResponsePgw) Descriptor() ([]byte, []int) {
	return file_feg_protos_s8_proxy_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteSessionResponsePgw) GetGtpError() *GtpError {
	if x != nil {
		return x.GtpError
	}
	return nil
}

type CreateBearerRequestPgw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PgwAddrs       string `protobuf:"bytes,1,opt,name=pgwAddrs,proto3" json:"pgwAddrs,omitempty"`
	SequenceNumber uint32 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// control plane TEID given by AGW during CreateSession
	CAgwTeid                     uint32                        `protobuf:"varint,3,opt,name=c_agw_teid,json=cAgwTeid,proto3" json:"c_agw_teid,omitempty"`
	LinkedBearerId               uint32                        `protobuf:"varint,4,opt,name=linked_bearer_id,json=linkedBearerId,proto3" json:"linked_bearer_id,omitempty"`
	ProtocolConfigurationOptions *ProtocolConfigurationOptions `protobuf:"bytes,5,opt,name=protocol_configuration_options,json=protocolConfigurationOptions,proto3" json:"protocol_configuration_options,omitempty"`
	BearerContext                *BearerContext                `protobuf:"bytes,6,opt,name=bearer_context,json=bearerContext,proto3" json:"bearer_context,omitempty"`
	IndicationFlag               []byte                        `protobuf:"bytes,7,opt,name=indication_flag,json=indicationFlag,proto3" json:"indication_flag,omitempty"`
	// AGW user plane TEID (will be injected by feg relay)
	UAgwTeid uint32 `protobuf:"varint,8,opt,name=u_agw_teid,json=uAgwTeid,proto3" json:"u_agw_teid,omitempty"` // TODO: PGW-FQ-CSID-1
}

func (x *CreateBearerRequestPgw) Reset() {
	*x = CreateBearerRequestPgw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_s8_proxy_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBearerRequestPgw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBearerRequestPgw) ProtoMessage() {}

func (x *CreateBearerRequestPgw) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_s8_proxy_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBearerRequestPgw.ProtoReflect.Descriptor instead.
func (*CreateBearerRequestPgw) Descriptor() ([]byte, []int) {
	return file_feg_protos_s8_proxy_proto_rawDescGZIP(), []int{14}
}

func (x *CreateBearerRequestPgw) GetPgwAddrs() string {
	if x != nil {
		return x.PgwAddrs
	}
	return ""
}

func (x *CreateBearerRequestPgw) GetSequenceNumber() uint32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *CreateBearerRequestPgw) GetCAgwTeid() uint32 {
	if x != nil {
		return x.CAgwTeid
	}
	return 0
}

func (x *CreateBearerRequestPgw) GetLinkedBearerId() uint32 {
	if x != nil {
		return x.LinkedBearerId
	}
	return 0
}

func (x *CreateBearerRequestPgw) GetProtocolConfigurationOptions() *ProtocolConfigurationOptions {
	if x != nil {
		return x.ProtocolConfigurationOptions
	}
	return nil
}

func (x *CreateBearerRequestPgw) GetBearerContext() *BearerContext {
	if x != nil {
		return x.BearerContext
	}
	return nil
}

func (x *CreateBearerRequestPgw) GetIndicationFlag() []byte {
	if x != nil {
		return x.IndicationFlag
	}
	return nil
}

func (x *CreateBearerRequestPgw) GetUAgwTeid() uint32 {
	if x != nil {
		return x.UAgwTeid
	}
	return 0
}

type CreateBearerResponsePgw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// same as pgwAddr as in CreateBeaererRequest.pgwAddrs
	PgwAddrs       string `protobuf:"bytes,1,opt,name=pgwAddrs,proto3" json:"pgwAddrs,omitempty"`
	Imsi           string `protobuf:"bytes,2,opt,name=imsi,proto3" json:"imsi,omitempty"`
	SequenceNumber uint32 `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// control plane TEID given by PGW during CreateSession
	CPgwTeid uint32 `protobuf:"varint,4,opt,name=c_pgw_teid,json=cPgwTeid,proto3" json:"c_pgw_teid,omitempty"`
	// same as in CreateBearerRequestPgw.BearerContext.user_plane_fteid
	UPgwFteid                    *Fteid                        `protobuf:"bytes,5,opt,name=u_pgw_fteid,json=uPgwFteid,proto3" json:"u_pgw_fteid,omitempty"`
	ServingNetwork               *ServingNetwork               `protobuf:"bytes,6,opt,name=serving_network,json=servingNetwork,proto3" json:"serving_network,omitempty"`
	Cause                        uint32                        `protobuf:"varint,7,opt,name=cause,proto3" json:"cause,omitempty"`
	BearerContext                *BearerContext                `protobuf:"bytes,8,opt,name=bearer_context,json=bearerContext,proto3" json:"bearer_context,omitempty"`
	ProtocolConfigurationOptions *ProtocolConfigurationOptions `protobuf:"bytes,9,opt,name=protocol_configuration_options,json=protocolConfigurationOptions,proto3" json:"protocol_configuration_options,omitempty"`
	TimeZone                     *TimeZone                     `protobuf:"bytes,10,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	Uli                          *UserLocationInformation      `protobuf:"bytes,11,opt,name=uli,proto3" json:"uli,omitempty"` //TODO: SGW-FQ-CSID
}

func (x *CreateBearerResponsePgw) Reset() {
	*x = CreateBearerResponsePgw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_s8_proxy_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBearerResponsePgw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBearerResponsePgw) ProtoMessage() {}

func (x *CreateBearerResponsePgw) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_s8_proxy_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBearerResponsePgw.ProtoReflect.Descriptor instead.
func (*CreateBearerResponsePgw) Descriptor() ([]byte, []int) {
	return file_feg_protos_s8_proxy_proto_rawDescGZIP(), []int{15}
}

func (x *CreateBearerResponsePgw) GetPgwAddrs() string {
	if x != nil {
		return x.PgwAddrs
	}
	return ""
}

func (x *CreateBearerResponsePgw) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *CreateBearerResponsePgw) GetSequenceNumber() uint32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *CreateBearerResponsePgw) GetCPgwTeid() uint32 {
	if x != nil {
		return x.CPgwTeid
	}
	return 0
}

func (x *CreateBearerResponsePgw) GetUPgwFteid() *Fteid {
	if x != nil {
		return x.UPgwFteid
	}
	return nil
}

func (x *CreateBearerResponsePgw) GetServingNetwork() *ServingNetwork {
	if x != nil {
		return x.ServingNetwork
	}
	return nil
}

func (x *CreateBearerResponsePgw) GetCause() uint32 {
	if x != nil {
		return x.Cause
	}
	return 0
}

func (x *CreateBearerResponsePgw) GetBearerContext() *BearerContext {
	if x != nil {
		return x.BearerContext
	}
	return nil
}

func (x *CreateBearerResponsePgw) GetProtocolConfigurationOptions() *ProtocolConfigurationOptions {
	if x != nil {
		return x.ProtocolConfigurationOptions
	}
	return nil
}

func (x *CreateBearerResponsePgw) GetTimeZone() *TimeZone {
	if x != nil {
		return x.TimeZone
	}
	return nil
}

func (x *CreateBearerResponsePgw) GetUli() *UserLocationInformation {
	if x != nil {
		return x.Uli
	}
	return nil
}

type DeleteBearerRequestPgw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PgwAddrs       string `protobuf:"bytes,1,opt,name=pgwAddrs,proto3" json:"pgwAddrs,omitempty"`
	SequenceNumber uint32 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// control plane TEID given by AGW during CreateSession
	CAgwTeid uint32 `protobuf:"varint,3,opt,name=c_agw_teid,json=cAgwTeid,proto3" json:"c_agw_teid,omitempty"`
	// id of default bearer
	LinkedBearerId uint32 `protobuf:"varint,4,opt,name=linked_bearer_id,json=linkedBearerId,proto3" json:"linked_bearer_id,omitempty"`
	// id of dedicated bearers to delete
	EpsBearerId                  []uint32                      `protobuf:"varint,5,rep,packed,name=eps_bearer_id,json=epsBearerId,proto3" json:"eps_bearer_id,omitempty"`
	ProtocolConfigurationOptions *ProtocolConfigurationOptions `protobuf:"bytes,6,opt,name=protocol_configuration_options,json=protocolConfigurationOptions,proto3" json:"protocol_configuration_options,omitempty"`
}

func (x *DeleteBearerRequestPgw) Reset() {
	*x = DeleteBearerRequestPgw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_s8_proxy_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBearerRequestPgw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBearerRequestPgw) ProtoMessage() {}

func (x *DeleteBearerRequestPgw) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_s8_proxy_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBearerRequestPgw.ProtoReflect.Descriptor instead.
func (*DeleteBearerRequestPgw) Descriptor() ([]byte, []int) {
	return file_feg_protos_s8_proxy_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteBearerRequestPgw) GetPgwAddrs() string {
	if x != nil {
		return x.PgwAddrs
	}
	return ""
}

func (x *DeleteBearerRequestPgw) GetSequenceNumber() uint32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *DeleteBearerRequestPgw) GetCAgwTeid() uint32 {
	if x != nil {
		return x.CAgwTeid
	}
	return 0
}

func (x *DeleteBearerRequestPgw) GetLinkedBearerId() uint32 {
	if x != nil {
		return x.LinkedBearerId
	}
	return 0
}

func (x *DeleteBearerRequestPgw) GetEpsBearerId() []uint32 {
	if x != nil {
		return x.EpsBearerId
	}
	return nil
}

func (x *DeleteBearerRequestPgw) GetProtocolConfigurationOptions() *ProtocolConfigurationOptions {
	if x != nil {
		return x.ProtocolConfigurationOptions
	}
	return nil
}

type DeleteBearerResponsePgw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// same as pgwAddr as in CreateBeaererRequest.pgwAddrs
	PgwAddrs       string `protobuf:"bytes,1,opt,name=pgwAddrs,proto3" json:"pgwAddrs,omitempty"`
	Imsi           string `protobuf:"bytes,2,opt,name=imsi,proto3" json:"imsi,omitempty"`
	SequenceNumber uint32 `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// control plane TEID given by PGW during CreateSession
	CPgwTeid uint32 `protobuf:"varint,4,opt,name=c_pgw_teid,json=cPgwTeid,proto3" json:"c_pgw_teid,omitempty"`
	// control plane TEID given by PGW during CreateSession
	LinkedBearerId               uint32                        `protobuf:"varint,5,opt,name=linked_bearer_id,json=linkedBearerId,proto3" json:"linked_bearer_id,omitempty"`
	BearerContext                []*BearerContext              `protobuf:"bytes,6,rep,name=bearer_context,json=bearerContext,proto3" json:"bearer_context,omitempty"`
	ProtocolConfigurationOptions *ProtocolConfigurationOptions `protobuf:"bytes,7,opt,name=protocol_configuration_options,json=protocolConfigurationOptions,proto3" json:"protocol_configuration_options,omitempty"`
	Cause                        uint32                        `protobuf:"varint,8,opt,name=cause,proto3" json:"cause,omitempty"`
}

func (x *DeleteBearerResponsePgw) Reset() {
	*x = DeleteBearerResponsePgw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_s8_proxy_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBearerResponsePgw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBearerResponsePgw) ProtoMessage() {}

func (x *DeleteBearerResponsePgw) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_s8_proxy_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBearerResponsePgw.ProtoReflect.Descriptor instead.
func (*DeleteBearerResponsePgw) Descriptor() ([]byte, []int) {
	return file_feg_protos_s8_proxy_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteBearerResponsePgw) GetPgwAddrs() string {
	if x != nil {
		return x.PgwAddrs
	}
	return ""
}

func (x *DeleteBearerResponsePgw) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *DeleteBearerResponsePgw) GetSequenceNumber() uint32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *DeleteBearerResponsePgw) GetCPgwTeid() uint32 {
	if x != nil {
		return x.CPgwTeid
	}
	return 0
}

func (x *DeleteBearerResponsePgw) GetLinkedBearerId() uint32 {
	if x != nil {
		return x.LinkedBearerId
	}
	return 0
}

func (x *DeleteBearerResponsePgw) GetBearerContext() []*BearerContext {
	if x != nil {
		return x.BearerContext
	}
	return nil
}

func (x *DeleteBearerResponsePgw) GetProtocolConfigurationOptions() *ProtocolConfigurationOptions {
	if x != nil {
		return x.ProtocolConfigurationOptions
	}
	return nil
}

func (x *DeleteBearerResponsePgw) GetCause() uint32 {
	if x != nil {
		return x.Cause
	}
	return 0
}

type EchoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ip:port of pgw to send the request
	PgwAddrs string `protobuf:"bytes,1,opt,name=pgwAddrs,proto3" json:"pgwAddrs,omitempty"`
	// needed for nh in feg
	Imsi string `protobuf:"bytes,2,opt,name=imsi,proto3" json:"imsi,omitempty"`
}

func (x *EchoRequest) Reset() {
	*x = EchoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_s8_proxy_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoRequest) ProtoMessage() {}

func (x *EchoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_s8_proxy_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoRequest.ProtoReflect.Descriptor instead.
func (*EchoRequest) Descriptor() ([]byte, []int) {
	return file_feg_protos_s8_proxy_proto_rawDescGZIP(), []int{18}
}

func (x *EchoRequest) GetPgwAddrs() string {
	if x != nil {
		return x.PgwAddrs
	}
	return ""
}

func (x *EchoRequest) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

type EchoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EchoResponse) Reset() {
	*x = EchoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_s8_proxy_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoResponse) ProtoMessage() {}

func (x *EchoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_s8_proxy_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoResponse.ProtoReflect.Descriptor instead.
func (*EchoResponse) Descriptor() ([]byte, []int) {
	return file_feg_protos_s8_proxy_proto_rawDescGZIP(), []int{19}
}

type GtpError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cause uint32 `protobuf:"varint,1,opt,name=cause,proto3" json:"cause,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *GtpError) Reset() {
	*x = GtpError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_s8_proxy_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GtpError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GtpError) ProtoMessage() {}

func (x *GtpError) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_s8_proxy_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GtpError.ProtoReflect.Descriptor instead.
func (*GtpError) Descriptor() ([]byte, []int) {
	return file_feg_protos_s8_proxy_proto_rawDescGZIP(), []int{20}
}

func (x *GtpError) GetCause() uint32 {
	if x != nil {
		return x.Cause
	}
	return 0
}

func (x *GtpError) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_feg_protos_s8_proxy_proto protoreflect.FileDescriptor

var file_feg_protos_s8_proxy_proto_rawDesc = []byte{
	0x0a, 0x19, 0x66, 0x65, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x38, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x1a, 0x1f, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x6f, 0x61, 0x69, 0x2f, 0x73, 0x70, 0x67, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xde, 0x06, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x67, 0x77, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x67, 0x77, 0x41, 0x64, 0x64, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x67, 0x77, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d,
	0x73, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x65, 0x69, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x65, 0x69, 0x12, 0x42, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x6e, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x0e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x6e, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x34, 0x0a, 0x03,
	0x75, 0x6c, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x75,
	0x6c, 0x69, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67,
	0x2e, 0x52, 0x41, 0x54, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x72, 0x61, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x64, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e,
	0x50, 0x44, 0x4e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x64, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x31, 0x0a, 0x03, 0x70, 0x61, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x50, 0x64, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03,
	0x70, 0x61, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x61, 0x70, 0x6e, 0x12, 0x23, 0x0a, 0x04, 0x61, 0x6d, 0x62, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e,
	0x41, 0x6d, 0x62, 0x72, 0x52, 0x04, 0x61, 0x6d, 0x62, 0x72, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x3f, 0x0a, 0x0e, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x66, 0x65, 0x67, 0x2e, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x0d, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x1c, 0x0a, 0x0a, 0x63, 0x5f, 0x61, 0x67, 0x77, 0x5f, 0x74, 0x65, 0x69, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x41, 0x67, 0x77, 0x54, 0x65, 0x69, 0x64, 0x12, 0x6d,
	0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66,
	0x65, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x39, 0x0a, 0x18, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x67, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x30, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a,
	0x6f, 0x6e, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x61,
	0x63, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x63,
	0x69, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x73, 0x61, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x72, 0x61, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x74, 0x61, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x63, 0x69, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x63, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x65, 0x4e,
	0x62, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x65, 0x4e, 0x62, 0x69, 0x12,
	0x16, 0x0a, 0x06, 0x45, 0x4d, 0x65, 0x4e, 0x62, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x45, 0x4d, 0x65, 0x4e, 0x62, 0x69, 0x22, 0x34, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x6e, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x63, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x63, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x6e, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x6e, 0x63, 0x22, 0x9f, 0x01,
	0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x56, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66,
	0x65, 0x67, 0x2e, 0x50, 0x63, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x52, 0x12, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x4f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x46, 0x0a, 0x18, 0x50, 0x63, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xf5, 0x01, 0x0a, 0x0d, 0x42, 0x65, 0x61, 0x72,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x10, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x66, 0x74, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e,
	0x46, 0x74, 0x65, 0x69, 0x64, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x46, 0x74, 0x65, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x03, 0x71, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x51,
	0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x71,
	0x6f, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x67, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x74, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x6f, 0x61, 0x69,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x03, 0x74, 0x66, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x75,
	0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x22,
	0x91, 0x02, 0x0a, 0x0e, 0x51, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x63, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x70, 0x63, 0x69, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x33, 0x0a, 0x15, 0x70,
	0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x72, 0x65, 0x65,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x39, 0x0a, 0x18, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76,
	0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x17, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x75,
	0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x71,
	0x63, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x71, 0x63, 0x69, 0x12, 0x21, 0x0a,
	0x03, 0x67, 0x62, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x41, 0x6d, 0x62, 0x72, 0x52, 0x03, 0x67, 0x62, 0x72,
	0x12, 0x21, 0x0a, 0x03, 0x6d, 0x62, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x41, 0x6d, 0x62, 0x72, 0x52, 0x03,
	0x6d, 0x62, 0x72, 0x22, 0x30, 0x0a, 0x04, 0x41, 0x6d, 0x62, 0x72, 0x12, 0x13, 0x0a, 0x05, 0x62,
	0x72, 0x5f, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x62, 0x72, 0x55, 0x6c,
	0x12, 0x13, 0x0a, 0x05, 0x62, 0x72, 0x5f, 0x64, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x62, 0x72, 0x44, 0x6c, 0x22, 0x7d, 0x0a, 0x14, 0x50, 0x64, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x70, 0x76, 0x36, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x22, 0x61, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x61, 0x79, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x64, 0x61, 0x79, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x61, 0x76,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x61, 0x0a, 0x05, 0x46, 0x74, 0x65, 0x69, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x65, 0x69, 0x64, 0x22, 0xf5, 0x03, 0x0a, 0x18, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x67, 0x77, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x64, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x50, 0x44, 0x4e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70,
	0x64, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x03, 0x70, 0x61, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e,
	0x50, 0x64, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x70, 0x61, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x70, 0x6e,
	0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x61, 0x70, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x0a, 0x63, 0x5f, 0x61, 0x67, 0x77, 0x5f, 0x74, 0x65, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x41, 0x67, 0x77, 0x54, 0x65, 0x69, 0x64,
	0x12, 0x30, 0x0a, 0x0b, 0x63, 0x5f, 0x70, 0x67, 0x77, 0x5f, 0x66, 0x74, 0x65, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65,
	0x67, 0x2e, 0x46, 0x74, 0x65, 0x69, 0x64, 0x52, 0x09, 0x63, 0x50, 0x67, 0x77, 0x46, 0x74, 0x65,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x0e, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x0d, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x6d, 0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x67, 0x74, 0x70, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65,
	0x67, 0x2e, 0x47, 0x74, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x08, 0x67, 0x74, 0x70, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x0a, 0x75, 0x5f, 0x61, 0x67, 0x77, 0x5f, 0x74, 0x65,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x41, 0x67, 0x77, 0x54, 0x65,
	0x69, 0x64, 0x22, 0x9c, 0x02, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x67, 0x77, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x67, 0x77, 0x41, 0x64, 0x64, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x67, 0x77, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d,
	0x73, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x63,
	0x5f, 0x61, 0x67, 0x77, 0x5f, 0x74, 0x65, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x63, 0x41, 0x67, 0x77, 0x54, 0x65, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x63, 0x5f, 0x70,
	0x67, 0x77, 0x5f, 0x74, 0x65, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63,
	0x50, 0x67, 0x77, 0x54, 0x65, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x6e, 0x67, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x6e, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x0e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x6e, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x34, 0x0a, 0x03, 0x75,
	0x6c, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x66, 0x65, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x75, 0x6c,
	0x69, 0x22, 0x4c, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x67, 0x77, 0x12, 0x30, 0x0a,
	0x09, 0x67, 0x74, 0x70, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x47, 0x74, 0x70,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x08, 0x67, 0x74, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x9c, 0x03, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x67, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x67,
	0x77, 0x41, 0x64, 0x64, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x67,
	0x77, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x0a, 0x63, 0x5f, 0x61, 0x67, 0x77, 0x5f, 0x74, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x41, 0x67, 0x77, 0x54, 0x65, 0x69, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x42,
	0x65, 0x61, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x6d, 0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0e, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x42, 0x65, 0x61, 0x72, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0d, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x1c, 0x0a, 0x0a, 0x75, 0x5f, 0x61, 0x67, 0x77, 0x5f, 0x74, 0x65, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x41, 0x67, 0x77, 0x54, 0x65, 0x69, 0x64, 0x22, 0xb4,
	0x04, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x67, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x67,
	0x77, 0x41, 0x64, 0x64, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x67,
	0x77, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x0a, 0x63, 0x5f, 0x70, 0x67, 0x77, 0x5f, 0x74, 0x65, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x50, 0x67, 0x77, 0x54, 0x65, 0x69,
	0x64, 0x12, 0x30, 0x0a, 0x0b, 0x75, 0x5f, 0x70, 0x67, 0x77, 0x5f, 0x66, 0x74, 0x65, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66,
	0x65, 0x67, 0x2e, 0x46, 0x74, 0x65, 0x69, 0x64, 0x52, 0x09, 0x75, 0x50, 0x67, 0x77, 0x46, 0x74,
	0x65, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x12, 0x3f, 0x0a,
	0x0e, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65,
	0x67, 0x2e, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x0d, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x6d,
	0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66,
	0x65, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12,
	0x34, 0x0a, 0x03, 0x75, 0x6c, 0x69, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x03, 0x75, 0x6c, 0x69, 0x22, 0xb8, 0x02, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x67, 0x77,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x67, 0x77, 0x41, 0x64, 0x64, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x67, 0x77, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x0a, 0x63, 0x5f, 0x61, 0x67, 0x77, 0x5f, 0x74,
	0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x41, 0x67, 0x77, 0x54,
	0x65, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x65,
	0x61, 0x72, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x65, 0x70, 0x73, 0x5f, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x70, 0x73, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x6d, 0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x80, 0x03, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x65, 0x61, 0x72, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x67, 0x77, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x67, 0x77, 0x41, 0x64, 0x64, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x67, 0x77, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x0a, 0x63, 0x5f, 0x70, 0x67, 0x77, 0x5f, 0x74,
	0x65, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x50, 0x67, 0x77, 0x54,
	0x65, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x65,
	0x61, 0x72, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a,
	0x0e, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65,
	0x67, 0x2e, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x0d, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x6d,
	0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66,
	0x65, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x61,
	0x75, 0x73, 0x65, 0x22, 0x3d, 0x0a, 0x0b, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x67, 0x77, 0x41, 0x64, 0x64, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x67, 0x77, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d,
	0x73, 0x69, 0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x32, 0x0a, 0x08, 0x47, 0x74, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63,
	0x61, 0x75, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x2a, 0x40, 0x0a, 0x07, 0x50, 0x44, 0x4e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x55, 0x53, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x49, 0x50, 0x56, 0x34, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x36, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x50, 0x56, 0x34, 0x56, 0x36, 0x10, 0x03, 0x12, 0x09, 0x0a,
	0x05, 0x4e, 0x6f, 0x6e, 0x49, 0x50, 0x10, 0x05, 0x2a, 0x89, 0x01, 0x0a, 0x07, 0x52, 0x41, 0x54,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x54, 0x52, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x47, 0x45, 0x52, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x4c, 0x41, 0x4e,
	0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x41, 0x4e, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x48,
	0x53, 0x50, 0x41, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x55, 0x54, 0x52, 0x41, 0x4e, 0x10,
	0x06, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x10, 0x07, 0x12, 0x11,
	0x0a, 0x0d, 0x45, 0x55, 0x54, 0x52, 0x41, 0x4e, 0x5f, 0x4e, 0x42, 0x5f, 0x49, 0x4f, 0x54, 0x10,
	0x08, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x54, 0x45, 0x5f, 0x4d, 0x10, 0x09, 0x12, 0x06, 0x0a, 0x02,
	0x4e, 0x52, 0x10, 0x0a, 0x2a, 0x8c, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x50,
	0x4e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x6d, 0x73, 0x5f, 0x41, 0x50, 0x4e, 0x5f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x41, 0x50, 0x4e, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x10, 0x02, 0x32, 0xa2, 0x03, 0x0a, 0x07, 0x53, 0x38, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12,
	0x5a, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x67, 0x77, 0x1a, 0x23, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x67, 0x77, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x67, 0x77,
	0x1a, 0x23, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x67, 0x77, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x45,
	0x63, 0x68, 0x6f, 0x12, 0x16, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e,
	0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x67, 0x77, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72,
	0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x22, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x67, 0x77, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38,
	0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x32, 0xa9, 0x01, 0x0a, 0x10, 0x53, 0x38, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x46, 0x0a,
	0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x21, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x67, 0x77,
	0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56,
	0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x65, 0x61, 0x72, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x65, 0x61, 0x72, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x67, 0x77, 0x1a,
	0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f,
	0x69, 0x64, 0x22, 0x00, 0x42, 0x1b, 0x5a, 0x19, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f, 0x66, 0x65,
	0x67, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_feg_protos_s8_proxy_proto_rawDescOnce sync.Once
	file_feg_protos_s8_proxy_proto_rawDescData = file_feg_protos_s8_proxy_proto_rawDesc
)

func file_feg_protos_s8_proxy_proto_rawDescGZIP() []byte {
	file_feg_protos_s8_proxy_proto_rawDescOnce.Do(func() {
		file_feg_protos_s8_proxy_proto_rawDescData = protoimpl.X.CompressGZIP(file_feg_protos_s8_proxy_proto_rawDescData)
	})
	return file_feg_protos_s8_proxy_proto_rawDescData
}

var file_feg_protos_s8_proxy_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_feg_protos_s8_proxy_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_feg_protos_s8_proxy_proto_goTypes = []interface{}{
	(PDNType)(0),                         // 0: magma.feg.PDNType
	(RATType)(0),                         // 1: magma.feg.RATType
	(SelectionModeType)(0),               // 2: magma.feg.SelectionModeType
	(*CreateSessionRequestPgw)(nil),      // 3: magma.feg.CreateSessionRequestPgw
	(*UserLocationInformation)(nil),      // 4: magma.feg.UserLocationInformation
	(*ServingNetwork)(nil),               // 5: magma.feg.ServingNetwork
	(*ProtocolConfigurationOptions)(nil), // 6: magma.feg.ProtocolConfigurationOptions
	(*PcoProtocolOrContainerId)(nil),     // 7: magma.feg.PcoProtocolOrContainerId
	(*BearerContext)(nil),                // 8: magma.feg.BearerContext
	(*QosInformation)(nil),               // 9: magma.feg.QosInformation
	(*Ambr)(nil),                         // 10: magma.feg.Ambr
	(*PdnAddressAllocation)(nil),         // 11: magma.feg.PdnAddressAllocation
	(*TimeZone)(nil),                     // 12: magma.feg.TimeZone
	(*Fteid)(nil),                        // 13: magma.feg.Fteid
	(*CreateSessionResponsePgw)(nil),     // 14: magma.feg.CreateSessionResponsePgw
	(*DeleteSessionRequestPgw)(nil),      // 15: magma.feg.DeleteSessionRequestPgw
	(*DeleteSessionResponsePgw)(nil),     // 16: magma.feg.DeleteSessionResponsePgw
	(*CreateBearerRequestPgw)(nil),       // 17: magma.feg.CreateBearerRequestPgw
	(*CreateBearerResponsePgw)(nil),      // 18: magma.feg.CreateBearerResponsePgw
	(*DeleteBearerRequestPgw)(nil),       // 19: magma.feg.DeleteBearerRequestPgw
	(*DeleteBearerResponsePgw)(nil),      // 20: magma.feg.DeleteBearerResponsePgw
	(*EchoRequest)(nil),                  // 21: magma.feg.EchoRequest
	(*EchoResponse)(nil),                 // 22: magma.feg.EchoResponse
	(*GtpError)(nil),                     // 23: magma.feg.GtpError
	(*oai.TrafficFlowTemplate)(nil),      // 24: magma.lte.oai.TrafficFlowTemplate
	(*protos.Void)(nil),                  // 25: magma.orc8r.Void
}
var file_feg_protos_s8_proxy_proto_depIdxs = []int32{
	5,  // 0: magma.feg.CreateSessionRequestPgw.serving_network:type_name -> magma.feg.ServingNetwork
	4,  // 1: magma.feg.CreateSessionRequestPgw.uli:type_name -> magma.feg.UserLocationInformation
	1,  // 2: magma.feg.CreateSessionRequestPgw.rat_type:type_name -> magma.feg.RATType
	0,  // 3: magma.feg.CreateSessionRequestPgw.pdn_type:type_name -> magma.feg.PDNType
	11, // 4: magma.feg.CreateSessionRequestPgw.paa:type_name -> magma.feg.PdnAddressAllocation
	10, // 5: magma.feg.CreateSessionRequestPgw.ambr:type_name -> magma.feg.Ambr
	2,  // 6: magma.feg.CreateSessionRequestPgw.selection_mode:type_name -> magma.feg.SelectionModeType
	8,  // 7: magma.feg.CreateSessionRequestPgw.bearer_context:type_name -> magma.feg.BearerContext
	6,  // 8: magma.feg.CreateSessionRequestPgw.protocol_configuration_options:type_name -> magma.feg.ProtocolConfigurationOptions
	12, // 9: magma.feg.CreateSessionRequestPgw.time_zone:type_name -> magma.feg.TimeZone
	7,  // 10: magma.feg.ProtocolConfigurationOptions.proto_or_container_id:type_name -> magma.feg.PcoProtocolOrContainerId
	13, // 11: magma.feg.BearerContext.user_plane_fteid:type_name -> magma.feg.Fteid
	9,  // 12: magma.feg.BearerContext.qos:type_name -> magma.feg.QosInformation
	24, // 13: magma.feg.BearerContext.tft:type_name -> magma.lte.oai.TrafficFlowTemplate
	10, // 14: magma.feg.QosInformation.gbr:type_name -> magma.feg.Ambr
	10, // 15: magma.feg.QosInformation.mbr:type_name -> magma.feg.Ambr
	0,  // 16: magma.feg.CreateSessionResponsePgw.pdn_type:type_name -> magma.feg.PDNType
	11, // 17: magma.feg.CreateSessionResponsePgw.paa:type_name -> magma.feg.PdnAddressAllocation
	13, // 18: magma.feg.CreateSessionResponsePgw.c_pgw_fteid:type_name -> magma.feg.Fteid
	8,  // 19: magma.feg.CreateSessionResponsePgw.bearer_context:type_name -> magma.feg.BearerContext
	6,  // 20: magma.feg.CreateSessionResponsePgw.protocol_configuration_options:type_name -> magma.feg.ProtocolConfigurationOptions
	23, // 21: magma.feg.CreateSessionResponsePgw.gtp_error:type_name -> magma.feg.GtpError
	5,  // 22: magma.feg.DeleteSessionRequestPgw.serving_network:type_name -> magma.feg.ServingNetwork
	4,  // 23: magma.feg.DeleteSessionRequestPgw.uli:type_name -> magma.feg.UserLocationInformation
	23, // 24: magma.feg.DeleteSessionResponsePgw.gtp_error:type_name -> magma.feg.GtpError
	6,  // 25: magma.feg.CreateBearerRequestPgw.protocol_configuration_options:type_name -> magma.feg.ProtocolConfigurationOptions
	8,  // 26: magma.feg.CreateBearerRequestPgw.bearer_context:type_name -> magma.feg.BearerContext
	13, // 27: magma.feg.CreateBearerResponsePgw.u_pgw_fteid:type_name -> magma.feg.Fteid
	5,  // 28: magma.feg.CreateBearerResponsePgw.serving_network:type_name -> magma.feg.ServingNetwork
	8,  // 29: magma.feg.CreateBearerResponsePgw.bearer_context:type_name -> magma.feg.BearerContext
	6,  // 30: magma.feg.CreateBearerResponsePgw.protocol_configuration_options:type_name -> magma.feg.ProtocolConfigurationOptions
	12, // 31: magma.feg.CreateBearerResponsePgw.time_zone:type_name -> magma.feg.TimeZone
	4,  // 32: magma.feg.CreateBearerResponsePgw.uli:type_name -> magma.feg.UserLocationInformation
	6,  // 33: magma.feg.DeleteBearerRequestPgw.protocol_configuration_options:type_name -> magma.feg.ProtocolConfigurationOptions
	8,  // 34: magma.feg.DeleteBearerResponsePgw.bearer_context:type_name -> magma.feg.BearerContext
	6,  // 35: magma.feg.DeleteBearerResponsePgw.protocol_configuration_options:type_name -> magma.feg.ProtocolConfigurationOptions
	3,  // 36: magma.feg.S8Proxy.CreateSession:input_type -> magma.feg.CreateSessionRequestPgw
	15, // 37: magma.feg.S8Proxy.DeleteSession:input_type -> magma.feg.DeleteSessionRequestPgw
	21, // 38: magma.feg.S8Proxy.SendEcho:input_type -> magma.feg.EchoRequest
	18, // 39: magma.feg.S8Proxy.CreateBearerResponse:input_type -> magma.feg.CreateBearerResponsePgw
	20, // 40: magma.feg.S8Proxy.DeleteBearerResponse:input_type -> magma.feg.DeleteBearerResponsePgw
	17, // 41: magma.feg.S8ProxyResponder.CreateBearer:input_type -> magma.feg.CreateBearerRequestPgw
	19, // 42: magma.feg.S8ProxyResponder.DeleteBearerRequest:input_type -> magma.feg.DeleteBearerRequestPgw
	14, // 43: magma.feg.S8Proxy.CreateSession:output_type -> magma.feg.CreateSessionResponsePgw
	16, // 44: magma.feg.S8Proxy.DeleteSession:output_type -> magma.feg.DeleteSessionResponsePgw
	22, // 45: magma.feg.S8Proxy.SendEcho:output_type -> magma.feg.EchoResponse
	25, // 46: magma.feg.S8Proxy.CreateBearerResponse:output_type -> magma.orc8r.Void
	25, // 47: magma.feg.S8Proxy.DeleteBearerResponse:output_type -> magma.orc8r.Void
	25, // 48: magma.feg.S8ProxyResponder.CreateBearer:output_type -> magma.orc8r.Void
	25, // 49: magma.feg.S8ProxyResponder.DeleteBearerRequest:output_type -> magma.orc8r.Void
	43, // [43:50] is the sub-list for method output_type
	36, // [36:43] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_feg_protos_s8_proxy_proto_init() }
func file_feg_protos_s8_proxy_proto_init() {
	if File_feg_protos_s8_proxy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_feg_protos_s8_proxy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionRequestPgw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_s8_proxy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLocationInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_s8_proxy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServingNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_s8_proxy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolConfigurationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_s8_proxy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PcoProtocolOrContainerId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_s8_proxy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BearerContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_s8_proxy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QosInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_s8_proxy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ambr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_s8_proxy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdnAddressAllocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_s8_proxy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeZone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_s8_proxy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fteid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_s8_proxy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionResponsePgw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_s8_proxy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSessionRequestPgw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_s8_proxy_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSessionResponsePgw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_s8_proxy_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBearerRequestPgw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_s8_proxy_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBearerResponsePgw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_s8_proxy_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBearerRequestPgw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_s8_proxy_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBearerResponsePgw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_s8_proxy_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_s8_proxy_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_s8_proxy_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GtpError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_feg_protos_s8_proxy_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_feg_protos_s8_proxy_proto_goTypes,
		DependencyIndexes: file_feg_protos_s8_proxy_proto_depIdxs,
		EnumInfos:         file_feg_protos_s8_proxy_proto_enumTypes,
		MessageInfos:      file_feg_protos_s8_proxy_proto_msgTypes,
	}.Build()
	File_feg_protos_s8_proxy_proto = out.File
	file_feg_protos_s8_proxy_proto_rawDesc = nil
	file_feg_protos_s8_proxy_proto_goTypes = nil
	file_feg_protos_s8_proxy_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// S8ProxyClient is the client API for S8Proxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type S8ProxyClient interface {
	CreateSession(ctx context.Context, in *CreateSessionRequestPgw, opts ...grpc.CallOption) (*CreateSessionResponsePgw, error)
	DeleteSession(ctx context.Context, in *DeleteSessionRequestPgw, opts ...grpc.CallOption) (*DeleteSessionResponsePgw, error)
	SendEcho(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	CreateBearerResponse(ctx context.Context, in *CreateBearerResponsePgw, opts ...grpc.CallOption) (*protos.Void, error)
	DeleteBearerResponse(ctx context.Context, in *DeleteBearerResponsePgw, opts ...grpc.CallOption) (*protos.Void, error)
}

type s8ProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewS8ProxyClient(cc grpc.ClientConnInterface) S8ProxyClient {
	return &s8ProxyClient{cc}
}

func (c *s8ProxyClient) CreateSession(ctx context.Context, in *CreateSessionRequestPgw, opts ...grpc.CallOption) (*CreateSessionResponsePgw, error) {
	out := new(CreateSessionResponsePgw)
	err := c.cc.Invoke(ctx, "/magma.feg.S8Proxy/CreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s8ProxyClient) DeleteSession(ctx context.Context, in *DeleteSessionRequestPgw, opts ...grpc.CallOption) (*DeleteSessionResponsePgw, error) {
	out := new(DeleteSessionResponsePgw)
	err := c.cc.Invoke(ctx, "/magma.feg.S8Proxy/DeleteSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s8ProxyClient) SendEcho(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/magma.feg.S8Proxy/SendEcho", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s8ProxyClient) CreateBearerResponse(ctx context.Context, in *CreateBearerResponsePgw, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.S8Proxy/CreateBearerResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s8ProxyClient) DeleteBearerResponse(ctx context.Context, in *DeleteBearerResponsePgw, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.S8Proxy/DeleteBearerResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// S8ProxyServer is the server API for S8Proxy service.
type S8ProxyServer interface {
	CreateSession(context.Context, *CreateSessionRequestPgw) (*CreateSessionResponsePgw, error)
	DeleteSession(context.Context, *DeleteSessionRequestPgw) (*DeleteSessionResponsePgw, error)
	SendEcho(context.Context, *EchoRequest) (*EchoResponse, error)
	CreateBearerResponse(context.Context, *CreateBearerResponsePgw) (*protos.Void, error)
	DeleteBearerResponse(context.Context, *DeleteBearerResponsePgw) (*protos.Void, error)
}

// UnimplementedS8ProxyServer can be embedded to have forward compatible implementations.
type UnimplementedS8ProxyServer struct {
}

func (*UnimplementedS8ProxyServer) CreateSession(context.Context, *CreateSessionRequestPgw) (*CreateSessionResponsePgw, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (*UnimplementedS8ProxyServer) DeleteSession(context.Context, *DeleteSessionRequestPgw) (*DeleteSessionResponsePgw, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSession not implemented")
}
func (*UnimplementedS8ProxyServer) SendEcho(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEcho not implemented")
}
func (*UnimplementedS8ProxyServer) CreateBearerResponse(context.Context, *CreateBearerResponsePgw) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBearerResponse not implemented")
}
func (*UnimplementedS8ProxyServer) DeleteBearerResponse(context.Context, *DeleteBearerResponsePgw) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBearerResponse not implemented")
}

func RegisterS8ProxyServer(s *grpc.Server, srv S8ProxyServer) {
	s.RegisterService(&_S8Proxy_serviceDesc, srv)
}

func _S8Proxy_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequestPgw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S8ProxyServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.S8Proxy/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S8ProxyServer).CreateSession(ctx, req.(*CreateSessionRequestPgw))
	}
	return interceptor(ctx, in, info, handler)
}

func _S8Proxy_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSessionRequestPgw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S8ProxyServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.S8Proxy/DeleteSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S8ProxyServer).DeleteSession(ctx, req.(*DeleteSessionRequestPgw))
	}
	return interceptor(ctx, in, info, handler)
}

func _S8Proxy_SendEcho_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S8ProxyServer).SendEcho(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.S8Proxy/SendEcho",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S8ProxyServer).SendEcho(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _S8Proxy_CreateBearerResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBearerResponsePgw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S8ProxyServer).CreateBearerResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.S8Proxy/CreateBearerResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S8ProxyServer).CreateBearerResponse(ctx, req.(*CreateBearerResponsePgw))
	}
	return interceptor(ctx, in, info, handler)
}

func _S8Proxy_DeleteBearerResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBearerResponsePgw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S8ProxyServer).DeleteBearerResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.S8Proxy/DeleteBearerResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S8ProxyServer).DeleteBearerResponse(ctx, req.(*DeleteBearerResponsePgw))
	}
	return interceptor(ctx, in, info, handler)
}

var _S8Proxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.feg.S8Proxy",
	HandlerType: (*S8ProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _S8Proxy_CreateSession_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _S8Proxy_DeleteSession_Handler,
		},
		{
			MethodName: "SendEcho",
			Handler:    _S8Proxy_SendEcho_Handler,
		},
		{
			MethodName: "CreateBearerResponse",
			Handler:    _S8Proxy_CreateBearerResponse_Handler,
		},
		{
			MethodName: "DeleteBearerResponse",
			Handler:    _S8Proxy_DeleteBearerResponse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feg/protos/s8_proxy.proto",
}

// S8ProxyResponderClient is the client API for S8ProxyResponder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type S8ProxyResponderClient interface {
	CreateBearer(ctx context.Context, in *CreateBearerRequestPgw, opts ...grpc.CallOption) (*protos.Void, error)
	DeleteBearerRequest(ctx context.Context, in *DeleteBearerRequestPgw, opts ...grpc.CallOption) (*protos.Void, error)
}

type s8ProxyResponderClient struct {
	cc grpc.ClientConnInterface
}

func NewS8ProxyResponderClient(cc grpc.ClientConnInterface) S8ProxyResponderClient {
	return &s8ProxyResponderClient{cc}
}

func (c *s8ProxyResponderClient) CreateBearer(ctx context.Context, in *CreateBearerRequestPgw, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.S8ProxyResponder/CreateBearer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s8ProxyResponderClient) DeleteBearerRequest(ctx context.Context, in *DeleteBearerRequestPgw, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.S8ProxyResponder/DeleteBearerRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// S8ProxyResponderServer is the server API for S8ProxyResponder service.
type S8ProxyResponderServer interface {
	CreateBearer(context.Context, *CreateBearerRequestPgw) (*protos.Void, error)
	DeleteBearerRequest(context.Context, *DeleteBearerRequestPgw) (*protos.Void, error)
}

// UnimplementedS8ProxyResponderServer can be embedded to have forward compatible implementations.
type UnimplementedS8ProxyResponderServer struct {
}

func (*UnimplementedS8ProxyResponderServer) CreateBearer(context.Context, *CreateBearerRequestPgw) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBearer not implemented")
}
func (*UnimplementedS8ProxyResponderServer) DeleteBearerRequest(context.Context, *DeleteBearerRequestPgw) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBearerRequest not implemented")
}

func RegisterS8ProxyResponderServer(s *grpc.Server, srv S8ProxyResponderServer) {
	s.RegisterService(&_S8ProxyResponder_serviceDesc, srv)
}

func _S8ProxyResponder_CreateBearer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBearerRequestPgw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S8ProxyResponderServer).CreateBearer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.S8ProxyResponder/CreateBearer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S8ProxyResponderServer).CreateBearer(ctx, req.(*CreateBearerRequestPgw))
	}
	return interceptor(ctx, in, info, handler)
}

func _S8ProxyResponder_DeleteBearerRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBearerRequestPgw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S8ProxyResponderServer).DeleteBearerRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.S8ProxyResponder/DeleteBearerRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S8ProxyResponderServer).DeleteBearerRequest(ctx, req.(*DeleteBearerRequestPgw))
	}
	return interceptor(ctx, in, info, handler)
}

var _S8ProxyResponder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.feg.S8ProxyResponder",
	HandlerType: (*S8ProxyResponderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBearer",
			Handler:    _S8ProxyResponder_CreateBearer_Handler,
		},
		{
			MethodName: "DeleteBearerRequest",
			Handler:    _S8ProxyResponder_DeleteBearerRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feg/protos/s8_proxy.proto",
}
