// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protos "magma/lte/cloud/go/protos"
	protos1 "magma/orc8r/lib/go/protos"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HSSConfiguratorClient is the client API for HSSConfigurator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HSSConfiguratorClient interface {
	// Adds a new subscriber to the store.
	// Throws ALREADY_EXISTS if the subscriber already exists.
	//
	AddSubscriber(ctx context.Context, in *protos.SubscriberData, opts ...grpc.CallOption) (*protos1.Void, error)
	// Deletes an existing subscriber.
	// If the subscriber is not already present, this request is ignored.
	//
	DeleteSubscriber(ctx context.Context, in *protos.SubscriberID, opts ...grpc.CallOption) (*protos1.Void, error)
	// Updates an existing subscriber.
	// Throws NOT_FOUND if the subscriber is missing.
	//
	UpdateSubscriber(ctx context.Context, in *protos.SubscriberUpdate, opts ...grpc.CallOption) (*protos1.Void, error)
	// Returns the SubscriberData for a subscriber.
	// Throws NOT_FOUND if the subscriber is missing.
	//
	GetSubscriberData(ctx context.Context, in *protos.SubscriberID, opts ...grpc.CallOption) (*protos.SubscriberData, error)
	// List the subscribers in the store.
	//
	ListSubscribers(ctx context.Context, in *protos1.Void, opts ...grpc.CallOption) (*protos.SubscriberIDSet, error)
	// De-register an authenticated subscriber
	DeregisterSubscriber(ctx context.Context, in *protos.SubscriberID, opts ...grpc.CallOption) (*protos1.Void, error)
}

type hSSConfiguratorClient struct {
	cc grpc.ClientConnInterface
}

func NewHSSConfiguratorClient(cc grpc.ClientConnInterface) HSSConfiguratorClient {
	return &hSSConfiguratorClient{cc}
}

func (c *hSSConfiguratorClient) AddSubscriber(ctx context.Context, in *protos.SubscriberData, opts ...grpc.CallOption) (*protos1.Void, error) {
	out := new(protos1.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.HSSConfigurator/AddSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hSSConfiguratorClient) DeleteSubscriber(ctx context.Context, in *protos.SubscriberID, opts ...grpc.CallOption) (*protos1.Void, error) {
	out := new(protos1.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.HSSConfigurator/DeleteSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hSSConfiguratorClient) UpdateSubscriber(ctx context.Context, in *protos.SubscriberUpdate, opts ...grpc.CallOption) (*protos1.Void, error) {
	out := new(protos1.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.HSSConfigurator/UpdateSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hSSConfiguratorClient) GetSubscriberData(ctx context.Context, in *protos.SubscriberID, opts ...grpc.CallOption) (*protos.SubscriberData, error) {
	out := new(protos.SubscriberData)
	err := c.cc.Invoke(ctx, "/magma.feg.HSSConfigurator/GetSubscriberData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hSSConfiguratorClient) ListSubscribers(ctx context.Context, in *protos1.Void, opts ...grpc.CallOption) (*protos.SubscriberIDSet, error) {
	out := new(protos.SubscriberIDSet)
	err := c.cc.Invoke(ctx, "/magma.feg.HSSConfigurator/ListSubscribers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hSSConfiguratorClient) DeregisterSubscriber(ctx context.Context, in *protos.SubscriberID, opts ...grpc.CallOption) (*protos1.Void, error) {
	out := new(protos1.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.HSSConfigurator/DeregisterSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HSSConfiguratorServer is the server API for HSSConfigurator service.
// All implementations should embed UnimplementedHSSConfiguratorServer
// for forward compatibility
type HSSConfiguratorServer interface {
	// Adds a new subscriber to the store.
	// Throws ALREADY_EXISTS if the subscriber already exists.
	//
	AddSubscriber(context.Context, *protos.SubscriberData) (*protos1.Void, error)
	// Deletes an existing subscriber.
	// If the subscriber is not already present, this request is ignored.
	//
	DeleteSubscriber(context.Context, *protos.SubscriberID) (*protos1.Void, error)
	// Updates an existing subscriber.
	// Throws NOT_FOUND if the subscriber is missing.
	//
	UpdateSubscriber(context.Context, *protos.SubscriberUpdate) (*protos1.Void, error)
	// Returns the SubscriberData for a subscriber.
	// Throws NOT_FOUND if the subscriber is missing.
	//
	GetSubscriberData(context.Context, *protos.SubscriberID) (*protos.SubscriberData, error)
	// List the subscribers in the store.
	//
	ListSubscribers(context.Context, *protos1.Void) (*protos.SubscriberIDSet, error)
	// De-register an authenticated subscriber
	DeregisterSubscriber(context.Context, *protos.SubscriberID) (*protos1.Void, error)
}

// UnimplementedHSSConfiguratorServer should be embedded to have forward compatible implementations.
type UnimplementedHSSConfiguratorServer struct {
}

func (UnimplementedHSSConfiguratorServer) AddSubscriber(context.Context, *protos.SubscriberData) (*protos1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSubscriber not implemented")
}
func (UnimplementedHSSConfiguratorServer) DeleteSubscriber(context.Context, *protos.SubscriberID) (*protos1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubscriber not implemented")
}
func (UnimplementedHSSConfiguratorServer) UpdateSubscriber(context.Context, *protos.SubscriberUpdate) (*protos1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscriber not implemented")
}
func (UnimplementedHSSConfiguratorServer) GetSubscriberData(context.Context, *protos.SubscriberID) (*protos.SubscriberData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriberData not implemented")
}
func (UnimplementedHSSConfiguratorServer) ListSubscribers(context.Context, *protos1.Void) (*protos.SubscriberIDSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscribers not implemented")
}
func (UnimplementedHSSConfiguratorServer) DeregisterSubscriber(context.Context, *protos.SubscriberID) (*protos1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeregisterSubscriber not implemented")
}

// UnsafeHSSConfiguratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HSSConfiguratorServer will
// result in compilation errors.
type UnsafeHSSConfiguratorServer interface {
	mustEmbedUnimplementedHSSConfiguratorServer()
}

func RegisterHSSConfiguratorServer(s grpc.ServiceRegistrar, srv HSSConfiguratorServer) {
	s.RegisterService(&HSSConfigurator_ServiceDesc, srv)
}

func _HSSConfigurator_AddSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.SubscriberData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HSSConfiguratorServer).AddSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.HSSConfigurator/AddSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HSSConfiguratorServer).AddSubscriber(ctx, req.(*protos.SubscriberData))
	}
	return interceptor(ctx, in, info, handler)
}

func _HSSConfigurator_DeleteSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.SubscriberID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HSSConfiguratorServer).DeleteSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.HSSConfigurator/DeleteSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HSSConfiguratorServer).DeleteSubscriber(ctx, req.(*protos.SubscriberID))
	}
	return interceptor(ctx, in, info, handler)
}

func _HSSConfigurator_UpdateSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.SubscriberUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HSSConfiguratorServer).UpdateSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.HSSConfigurator/UpdateSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HSSConfiguratorServer).UpdateSubscriber(ctx, req.(*protos.SubscriberUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _HSSConfigurator_GetSubscriberData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.SubscriberID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HSSConfiguratorServer).GetSubscriberData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.HSSConfigurator/GetSubscriberData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HSSConfiguratorServer).GetSubscriberData(ctx, req.(*protos.SubscriberID))
	}
	return interceptor(ctx, in, info, handler)
}

func _HSSConfigurator_ListSubscribers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos1.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HSSConfiguratorServer).ListSubscribers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.HSSConfigurator/ListSubscribers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HSSConfiguratorServer).ListSubscribers(ctx, req.(*protos1.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _HSSConfigurator_DeregisterSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.SubscriberID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HSSConfiguratorServer).DeregisterSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.HSSConfigurator/DeregisterSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HSSConfiguratorServer).DeregisterSubscriber(ctx, req.(*protos.SubscriberID))
	}
	return interceptor(ctx, in, info, handler)
}

// HSSConfigurator_ServiceDesc is the grpc.ServiceDesc for HSSConfigurator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HSSConfigurator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.feg.HSSConfigurator",
	HandlerType: (*HSSConfiguratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSubscriber",
			Handler:    _HSSConfigurator_AddSubscriber_Handler,
		},
		{
			MethodName: "DeleteSubscriber",
			Handler:    _HSSConfigurator_DeleteSubscriber_Handler,
		},
		{
			MethodName: "UpdateSubscriber",
			Handler:    _HSSConfigurator_UpdateSubscriber_Handler,
		},
		{
			MethodName: "GetSubscriberData",
			Handler:    _HSSConfigurator_GetSubscriberData_Handler,
		},
		{
			MethodName: "ListSubscribers",
			Handler:    _HSSConfigurator_ListSubscribers_Handler,
		},
		{
			MethodName: "DeregisterSubscriber",
			Handler:    _HSSConfigurator_DeregisterSubscriber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feg/protos/hss_service.proto",
}
