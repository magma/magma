//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.10.0
// source: feg/protos/swx_proxy.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SwxErrorCode reflects Experimental-Result values which are 3GPP failures
// to be processed by EPC. Diameter Base Protocol errors are reflected in gRPC status code
type SwxErrorCode int32

const (
	SwxErrorCode_ERROR_UNDEFINED               SwxErrorCode = 0
	SwxErrorCode_IDENTITY_ALREADY_REGISTERED   SwxErrorCode = 5005
	SwxErrorCode_USER_NO_NON_3GPP_SUBSCRIPTION SwxErrorCode = 5450
)

// Enum value maps for SwxErrorCode.
var (
	SwxErrorCode_name = map[int32]string{
		0:    "ERROR_UNDEFINED",
		5005: "IDENTITY_ALREADY_REGISTERED",
		5450: "USER_NO_NON_3GPP_SUBSCRIPTION",
	}
	SwxErrorCode_value = map[string]int32{
		"ERROR_UNDEFINED":               0,
		"IDENTITY_ALREADY_REGISTERED":   5005,
		"USER_NO_NON_3GPP_SUBSCRIPTION": 5450,
	}
)

func (x SwxErrorCode) Enum() *SwxErrorCode {
	p := new(SwxErrorCode)
	*p = x
	return p
}

func (x SwxErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SwxErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_feg_protos_swx_proxy_proto_enumTypes[0].Descriptor()
}

func (SwxErrorCode) Type() protoreflect.EnumType {
	return &file_feg_protos_swx_proxy_proto_enumTypes[0]
}

func (x SwxErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SwxErrorCode.Descriptor instead.
func (SwxErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_feg_protos_swx_proxy_proto_rawDescGZIP(), []int{0}
}

type AuthenticationScheme int32

const (
	AuthenticationScheme_EAP_AKA       AuthenticationScheme = 0
	AuthenticationScheme_EAP_AKA_PRIME AuthenticationScheme = 1
)

// Enum value maps for AuthenticationScheme.
var (
	AuthenticationScheme_name = map[int32]string{
		0: "EAP_AKA",
		1: "EAP_AKA_PRIME",
	}
	AuthenticationScheme_value = map[string]int32{
		"EAP_AKA":       0,
		"EAP_AKA_PRIME": 1,
	}
)

func (x AuthenticationScheme) Enum() *AuthenticationScheme {
	p := new(AuthenticationScheme)
	*p = x
	return p
}

func (x AuthenticationScheme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthenticationScheme) Descriptor() protoreflect.EnumDescriptor {
	return file_feg_protos_swx_proxy_proto_enumTypes[1].Descriptor()
}

func (AuthenticationScheme) Type() protoreflect.EnumType {
	return &file_feg_protos_swx_proxy_proto_enumTypes[1]
}

func (x AuthenticationScheme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthenticationScheme.Descriptor instead.
func (AuthenticationScheme) EnumDescriptor() ([]byte, []int) {
	return file_feg_protos_swx_proxy_proto_rawDescGZIP(), []int{1}
}

// ReasonCode -> DeregistrationReason:ReasonCode
// see: https://www.etsi.org/deliver/etsi_ts/129200_129299/129229/10.05.00_60/ts_129229v100500p.pdf
type RegistrationTerminationRequest_ReasonCode int32

const (
	RegistrationTerminationRequest_PERMANENT_TERMINATION RegistrationTerminationRequest_ReasonCode = 0
	RegistrationTerminationRequest_NEW_SERVER_ASSIGNMENT RegistrationTerminationRequest_ReasonCode = 1
	RegistrationTerminationRequest_SERVER_CHANGE         RegistrationTerminationRequest_ReasonCode = 2
	RegistrationTerminationRequest_REMOVE_S_CSCF         RegistrationTerminationRequest_ReasonCode = 3
)

// Enum value maps for RegistrationTerminationRequest_ReasonCode.
var (
	RegistrationTerminationRequest_ReasonCode_name = map[int32]string{
		0: "PERMANENT_TERMINATION",
		1: "NEW_SERVER_ASSIGNMENT",
		2: "SERVER_CHANGE",
		3: "REMOVE_S_CSCF",
	}
	RegistrationTerminationRequest_ReasonCode_value = map[string]int32{
		"PERMANENT_TERMINATION": 0,
		"NEW_SERVER_ASSIGNMENT": 1,
		"SERVER_CHANGE":         2,
		"REMOVE_S_CSCF":         3,
	}
)

func (x RegistrationTerminationRequest_ReasonCode) Enum() *RegistrationTerminationRequest_ReasonCode {
	p := new(RegistrationTerminationRequest_ReasonCode)
	*p = x
	return p
}

func (x RegistrationTerminationRequest_ReasonCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegistrationTerminationRequest_ReasonCode) Descriptor() protoreflect.EnumDescriptor {
	return file_feg_protos_swx_proxy_proto_enumTypes[2].Descriptor()
}

func (RegistrationTerminationRequest_ReasonCode) Type() protoreflect.EnumType {
	return &file_feg_protos_swx_proxy_proto_enumTypes[2]
}

func (x RegistrationTerminationRequest_ReasonCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegistrationTerminationRequest_ReasonCode.Descriptor instead.
func (RegistrationTerminationRequest_ReasonCode) EnumDescriptor() ([]byte, []int) {
	return file_feg_protos_swx_proxy_proto_rawDescGZIP(), []int{4, 0}
}

// AuthenticationRequest (Section 8.2.2.1)
type AuthenticationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subscriber identifier
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// Number of authentication vectors requested
	SipNumAuthVectors uint32 `protobuf:"varint,2,opt,name=sip_num_auth_vectors,json=sipNumAuthVectors,proto3" json:"sip_num_auth_vectors,omitempty"`
	// EAP-AKA or EAP-AKA'
	AuthenticationScheme AuthenticationScheme `protobuf:"varint,3,opt,name=authentication_scheme,json=authenticationScheme,proto3,enum=magma.feg.AuthenticationScheme" json:"authentication_scheme,omitempty"`
	// Concatenation of RAND and AUTS in the case of resync
	ResyncInfo []byte `protobuf:"bytes,4,opt,name=resync_info,json=resyncInfo,proto3" json:"resync_info,omitempty"`
	// Send an additional SAR message to the HSS to retrieve user profile params
	RetrieveUserProfile bool `protobuf:"varint,5,opt,name=retrieve_user_profile,json=retrieveUserProfile,proto3" json:"retrieve_user_profile,omitempty"`
}

func (x *AuthenticationRequest) Reset() {
	*x = AuthenticationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_swx_proxy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationRequest) ProtoMessage() {}

func (x *AuthenticationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_swx_proxy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationRequest.ProtoReflect.Descriptor instead.
func (*AuthenticationRequest) Descriptor() ([]byte, []int) {
	return file_feg_protos_swx_proxy_proto_rawDescGZIP(), []int{0}
}

func (x *AuthenticationRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *AuthenticationRequest) GetSipNumAuthVectors() uint32 {
	if x != nil {
		return x.SipNumAuthVectors
	}
	return 0
}

func (x *AuthenticationRequest) GetAuthenticationScheme() AuthenticationScheme {
	if x != nil {
		return x.AuthenticationScheme
	}
	return AuthenticationScheme_EAP_AKA
}

func (x *AuthenticationRequest) GetResyncInfo() []byte {
	if x != nil {
		return x.ResyncInfo
	}
	return nil
}

func (x *AuthenticationRequest) GetRetrieveUserProfile() bool {
	if x != nil {
		return x.RetrieveUserProfile
	}
	return false
}

// MultimediaAuthenticationAnswer (Section 8.2.2.1)
type AuthenticationAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subscriber identifier
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// For details about fields read 3GPP 29.273
	SipAuthVectors []*AuthenticationAnswer_SIPAuthVector `protobuf:"bytes,2,rep,name=sip_auth_vectors,json=sipAuthVectors,proto3" json:"sip_auth_vectors,omitempty"`
	UserProfile    *AuthenticationAnswer_UserProfile     `protobuf:"bytes,3,opt,name=user_profile,json=userProfile,proto3" json:"user_profile,omitempty"`
	SessionId      string                                `protobuf:"bytes,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *AuthenticationAnswer) Reset() {
	*x = AuthenticationAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_swx_proxy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticationAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationAnswer) ProtoMessage() {}

func (x *AuthenticationAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_swx_proxy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationAnswer.ProtoReflect.Descriptor instead.
func (*AuthenticationAnswer) Descriptor() ([]byte, []int) {
	return file_feg_protos_swx_proxy_proto_rawDescGZIP(), []int{1}
}

func (x *AuthenticationAnswer) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *AuthenticationAnswer) GetSipAuthVectors() []*AuthenticationAnswer_SIPAuthVector {
	if x != nil {
		return x.SipAuthVectors
	}
	return nil
}

func (x *AuthenticationAnswer) GetUserProfile() *AuthenticationAnswer_UserProfile {
	if x != nil {
		return x.UserProfile
	}
	return nil
}

func (x *AuthenticationAnswer) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

// RegistrationRequest:
// ServerAssignmentRequest with ServerAssignmentType set to (DE)/REGISTRATION (Section 8.2.2.3)
type RegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subscriber identifier
	UserName  string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *RegistrationRequest) Reset() {
	*x = RegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_swx_proxy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationRequest) ProtoMessage() {}

func (x *RegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_swx_proxy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationRequest.ProtoReflect.Descriptor instead.
func (*RegistrationRequest) Descriptor() ([]byte, []int) {
	return file_feg_protos_swx_proxy_proto_rawDescGZIP(), []int{2}
}

func (x *RegistrationRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *RegistrationRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

// RegistrationAnswer:
// ServerAssignmentAnswer with ServerAssignmentType set to (DE)/REGISTRATION (Section 8.2.2.3)
type RegistrationAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *RegistrationAnswer) Reset() {
	*x = RegistrationAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_swx_proxy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrationAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationAnswer) ProtoMessage() {}

func (x *RegistrationAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_swx_proxy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationAnswer.ProtoReflect.Descriptor instead.
func (*RegistrationAnswer) Descriptor() ([]byte, []int) {
	return file_feg_protos_swx_proxy_proto_rawDescGZIP(), []int{3}
}

func (x *RegistrationAnswer) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

// RegistrationTerminationRequest, see: http://www.qtc.jp/3GPP/Specs/29273-920.pdf Section 8.2.2.4
type RegistrationTerminationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subscriber identifier
	UserName   string                                    `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	ReasonCode RegistrationTerminationRequest_ReasonCode `protobuf:"varint,2,opt,name=reason_code,json=reasonCode,proto3,enum=magma.feg.RegistrationTerminationRequest_ReasonCode" json:"reason_code,omitempty"`
	ReasonInfo string                                    `protobuf:"bytes,3,opt,name=reason_info,json=reasonInfo,proto3" json:"reason_info,omitempty"`
	SessionId  string                                    `protobuf:"bytes,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *RegistrationTerminationRequest) Reset() {
	*x = RegistrationTerminationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_swx_proxy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrationTerminationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationTerminationRequest) ProtoMessage() {}

func (x *RegistrationTerminationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_swx_proxy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationTerminationRequest.ProtoReflect.Descriptor instead.
func (*RegistrationTerminationRequest) Descriptor() ([]byte, []int) {
	return file_feg_protos_swx_proxy_proto_rawDescGZIP(), []int{4}
}

func (x *RegistrationTerminationRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *RegistrationTerminationRequest) GetReasonCode() RegistrationTerminationRequest_ReasonCode {
	if x != nil {
		return x.ReasonCode
	}
	return RegistrationTerminationRequest_PERMANENT_TERMINATION
}

func (x *RegistrationTerminationRequest) GetReasonInfo() string {
	if x != nil {
		return x.ReasonInfo
	}
	return ""
}

func (x *RegistrationTerminationRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

// Only for EAP-AKA/EAP-AKA'
type AuthenticationAnswer_SIPAuthVector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains one of EAP-AKA or EAP-AKA'
	AuthenticationScheme AuthenticationScheme `protobuf:"varint,1,opt,name=authentication_scheme,json=authenticationScheme,proto3,enum=magma.feg.AuthenticationScheme" json:"authentication_scheme,omitempty"`
	// Concatenation of challenge RAND and token AUTN
	RandAutn []byte `protobuf:"bytes,2,opt,name=rand_autn,json=randAutn,proto3" json:"rand_autn,omitempty"`
	// Expected response
	Xres []byte `protobuf:"bytes,3,opt,name=xres,proto3" json:"xres,omitempty"`
	// Confidentiality Key
	ConfidentialityKey []byte `protobuf:"bytes,4,opt,name=confidentiality_key,json=confidentialityKey,proto3" json:"confidentiality_key,omitempty"`
	// Integrity Key
	IntegrityKey []byte `protobuf:"bytes,5,opt,name=integrity_key,json=integrityKey,proto3" json:"integrity_key,omitempty"`
}

func (x *AuthenticationAnswer_SIPAuthVector) Reset() {
	*x = AuthenticationAnswer_SIPAuthVector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_swx_proxy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticationAnswer_SIPAuthVector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationAnswer_SIPAuthVector) ProtoMessage() {}

func (x *AuthenticationAnswer_SIPAuthVector) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_swx_proxy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationAnswer_SIPAuthVector.ProtoReflect.Descriptor instead.
func (*AuthenticationAnswer_SIPAuthVector) Descriptor() ([]byte, []int) {
	return file_feg_protos_swx_proxy_proto_rawDescGZIP(), []int{1, 0}
}

func (x *AuthenticationAnswer_SIPAuthVector) GetAuthenticationScheme() AuthenticationScheme {
	if x != nil {
		return x.AuthenticationScheme
	}
	return AuthenticationScheme_EAP_AKA
}

func (x *AuthenticationAnswer_SIPAuthVector) GetRandAutn() []byte {
	if x != nil {
		return x.RandAutn
	}
	return nil
}

func (x *AuthenticationAnswer_SIPAuthVector) GetXres() []byte {
	if x != nil {
		return x.Xres
	}
	return nil
}

func (x *AuthenticationAnswer_SIPAuthVector) GetConfidentialityKey() []byte {
	if x != nil {
		return x.ConfidentialityKey
	}
	return nil
}

func (x *AuthenticationAnswer_SIPAuthVector) GetIntegrityKey() []byte {
	if x != nil {
		return x.IntegrityKey
	}
	return nil
}

type AuthenticationAnswer_UserProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MSISDN from HSS
	Msisdn string `protobuf:"bytes,1,opt,name=msisdn,proto3" json:"msisdn,omitempty"`
}

func (x *AuthenticationAnswer_UserProfile) Reset() {
	*x = AuthenticationAnswer_UserProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_swx_proxy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticationAnswer_UserProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationAnswer_UserProfile) ProtoMessage() {}

func (x *AuthenticationAnswer_UserProfile) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_swx_proxy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationAnswer_UserProfile.ProtoReflect.Descriptor instead.
func (*AuthenticationAnswer_UserProfile) Descriptor() ([]byte, []int) {
	return file_feg_protos_swx_proxy_proto_rawDescGZIP(), []int{1, 1}
}

func (x *AuthenticationAnswer_UserProfile) GetMsisdn() string {
	if x != nil {
		return x.Msisdn
	}
	return ""
}

var File_feg_protos_swx_proxy_proto protoreflect.FileDescriptor

var file_feg_protos_swx_proxy_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x66, 0x65, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x77, 0x78,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x22, 0x90, 0x02, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f,
	0x0a, 0x14, 0x73, 0x69, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x69,
	0x70, 0x4e, 0x75, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x54, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52,
	0x14, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x79,
	0x6e, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x91, 0x04, 0x0a, 0x14, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x57, 0x0a, 0x10, 0x73, 0x69, 0x70, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x53, 0x49, 0x50, 0x41,
	0x75, 0x74, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0e, 0x73, 0x69, 0x70, 0x41, 0x75,
	0x74, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x4e, 0x0a, 0x0c, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0xec, 0x01, 0x0a, 0x0d, 0x53, 0x49, 0x50,
	0x41, 0x75, 0x74, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x54, 0x0a, 0x15, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x14, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x41, 0x75, 0x74, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x78, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x78, 0x72, 0x65,
	0x73, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4b,
	0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x1a, 0x25, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x22, 0x51,
	0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x33, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xbe, 0x02, 0x0a, 0x1e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x68, 0x0a,
	0x0a, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x50,
	0x45, 0x52, 0x4d, 0x41, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x45, 0x57, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x52, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x53,
	0x5f, 0x43, 0x53, 0x43, 0x46, 0x10, 0x03, 0x2a, 0x69, 0x0a, 0x0c, 0x53, 0x77, 0x78, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1b,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x8d, 0x27, 0x12, 0x22,
	0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x33, 0x47,
	0x50, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0xca, 0x2a, 0x2a, 0x36, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x41,
	0x50, 0x5f, 0x41, 0x4b, 0x41, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x41, 0x50, 0x5f, 0x41,
	0x4b, 0x41, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x45, 0x10, 0x01, 0x32, 0xfb, 0x01, 0x0a, 0x08, 0x53,
	0x77, 0x78, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x53, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x66, 0x65, 0x67, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x08,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x66, 0x65, 0x67, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x66, 0x65, 0x67, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0a, 0x44, 0x65, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x66, 0x65, 0x67, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x66, 0x65, 0x67, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x00, 0x32, 0x78, 0x0a, 0x11, 0x53, 0x77, 0x78, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x63, 0x0a,
	0x15, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66,
	0x65, 0x67, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x22, 0x00, 0x42, 0x1b, 0x5a, 0x19, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f, 0x66, 0x65, 0x67, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_feg_protos_swx_proxy_proto_rawDescOnce sync.Once
	file_feg_protos_swx_proxy_proto_rawDescData = file_feg_protos_swx_proxy_proto_rawDesc
)

func file_feg_protos_swx_proxy_proto_rawDescGZIP() []byte {
	file_feg_protos_swx_proxy_proto_rawDescOnce.Do(func() {
		file_feg_protos_swx_proxy_proto_rawDescData = protoimpl.X.CompressGZIP(file_feg_protos_swx_proxy_proto_rawDescData)
	})
	return file_feg_protos_swx_proxy_proto_rawDescData
}

var file_feg_protos_swx_proxy_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_feg_protos_swx_proxy_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_feg_protos_swx_proxy_proto_goTypes = []interface{}{
	(SwxErrorCode)(0),                              // 0: magma.feg.SwxErrorCode
	(AuthenticationScheme)(0),                      // 1: magma.feg.AuthenticationScheme
	(RegistrationTerminationRequest_ReasonCode)(0), // 2: magma.feg.RegistrationTerminationRequest.ReasonCode
	(*AuthenticationRequest)(nil),                  // 3: magma.feg.AuthenticationRequest
	(*AuthenticationAnswer)(nil),                   // 4: magma.feg.AuthenticationAnswer
	(*RegistrationRequest)(nil),                    // 5: magma.feg.RegistrationRequest
	(*RegistrationAnswer)(nil),                     // 6: magma.feg.RegistrationAnswer
	(*RegistrationTerminationRequest)(nil),         // 7: magma.feg.RegistrationTerminationRequest
	(*AuthenticationAnswer_SIPAuthVector)(nil),     // 8: magma.feg.AuthenticationAnswer.SIPAuthVector
	(*AuthenticationAnswer_UserProfile)(nil),       // 9: magma.feg.AuthenticationAnswer.UserProfile
}
var file_feg_protos_swx_proxy_proto_depIdxs = []int32{
	1, // 0: magma.feg.AuthenticationRequest.authentication_scheme:type_name -> magma.feg.AuthenticationScheme
	8, // 1: magma.feg.AuthenticationAnswer.sip_auth_vectors:type_name -> magma.feg.AuthenticationAnswer.SIPAuthVector
	9, // 2: magma.feg.AuthenticationAnswer.user_profile:type_name -> magma.feg.AuthenticationAnswer.UserProfile
	2, // 3: magma.feg.RegistrationTerminationRequest.reason_code:type_name -> magma.feg.RegistrationTerminationRequest.ReasonCode
	1, // 4: magma.feg.AuthenticationAnswer.SIPAuthVector.authentication_scheme:type_name -> magma.feg.AuthenticationScheme
	3, // 5: magma.feg.SwxProxy.Authenticate:input_type -> magma.feg.AuthenticationRequest
	5, // 6: magma.feg.SwxProxy.Register:input_type -> magma.feg.RegistrationRequest
	5, // 7: magma.feg.SwxProxy.Deregister:input_type -> magma.feg.RegistrationRequest
	7, // 8: magma.feg.SwxGatewayService.TerminateRegistration:input_type -> magma.feg.RegistrationTerminationRequest
	4, // 9: magma.feg.SwxProxy.Authenticate:output_type -> magma.feg.AuthenticationAnswer
	6, // 10: magma.feg.SwxProxy.Register:output_type -> magma.feg.RegistrationAnswer
	6, // 11: magma.feg.SwxProxy.Deregister:output_type -> magma.feg.RegistrationAnswer
	6, // 12: magma.feg.SwxGatewayService.TerminateRegistration:output_type -> magma.feg.RegistrationAnswer
	9, // [9:13] is the sub-list for method output_type
	5, // [5:9] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_feg_protos_swx_proxy_proto_init() }
func file_feg_protos_swx_proxy_proto_init() {
	if File_feg_protos_swx_proxy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_feg_protos_swx_proxy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_swx_proxy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticationAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_swx_proxy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_swx_proxy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistrationAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_swx_proxy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistrationTerminationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_swx_proxy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticationAnswer_SIPAuthVector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_swx_proxy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticationAnswer_UserProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_feg_protos_swx_proxy_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_feg_protos_swx_proxy_proto_goTypes,
		DependencyIndexes: file_feg_protos_swx_proxy_proto_depIdxs,
		EnumInfos:         file_feg_protos_swx_proxy_proto_enumTypes,
		MessageInfos:      file_feg_protos_swx_proxy_proto_msgTypes,
	}.Build()
	File_feg_protos_swx_proxy_proto = out.File
	file_feg_protos_swx_proxy_proto_rawDesc = nil
	file_feg_protos_swx_proxy_proto_goTypes = nil
	file_feg_protos_swx_proxy_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SwxProxyClient is the client API for SwxProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SwxProxyClient interface {
	// Retrieve authentication vectors from the HSS using MAR/MAA
	Authenticate(ctx context.Context, in *AuthenticationRequest, opts ...grpc.CallOption) (*AuthenticationAnswer, error)
	// Register the AAA server serving a user to the HSS using SAR/SAA
	Register(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationAnswer, error)
	// Deregister the AAA server serving a user to the HSS using SAR/SAA
	Deregister(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationAnswer, error)
}

type swxProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewSwxProxyClient(cc grpc.ClientConnInterface) SwxProxyClient {
	return &swxProxyClient{cc}
}

func (c *swxProxyClient) Authenticate(ctx context.Context, in *AuthenticationRequest, opts ...grpc.CallOption) (*AuthenticationAnswer, error) {
	out := new(AuthenticationAnswer)
	err := c.cc.Invoke(ctx, "/magma.feg.SwxProxy/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swxProxyClient) Register(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationAnswer, error) {
	out := new(RegistrationAnswer)
	err := c.cc.Invoke(ctx, "/magma.feg.SwxProxy/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swxProxyClient) Deregister(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationAnswer, error) {
	out := new(RegistrationAnswer)
	err := c.cc.Invoke(ctx, "/magma.feg.SwxProxy/Deregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwxProxyServer is the server API for SwxProxy service.
type SwxProxyServer interface {
	// Retrieve authentication vectors from the HSS using MAR/MAA
	Authenticate(context.Context, *AuthenticationRequest) (*AuthenticationAnswer, error)
	// Register the AAA server serving a user to the HSS using SAR/SAA
	Register(context.Context, *RegistrationRequest) (*RegistrationAnswer, error)
	// Deregister the AAA server serving a user to the HSS using SAR/SAA
	Deregister(context.Context, *RegistrationRequest) (*RegistrationAnswer, error)
}

// UnimplementedSwxProxyServer can be embedded to have forward compatible implementations.
type UnimplementedSwxProxyServer struct {
}

func (*UnimplementedSwxProxyServer) Authenticate(context.Context, *AuthenticationRequest) (*AuthenticationAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (*UnimplementedSwxProxyServer) Register(context.Context, *RegistrationRequest) (*RegistrationAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedSwxProxyServer) Deregister(context.Context, *RegistrationRequest) (*RegistrationAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deregister not implemented")
}

func RegisterSwxProxyServer(s *grpc.Server, srv SwxProxyServer) {
	s.RegisterService(&_SwxProxy_serviceDesc, srv)
}

func _SwxProxy_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwxProxyServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.SwxProxy/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwxProxyServer).Authenticate(ctx, req.(*AuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwxProxy_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwxProxyServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.SwxProxy/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwxProxyServer).Register(ctx, req.(*RegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwxProxy_Deregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwxProxyServer).Deregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.SwxProxy/Deregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwxProxyServer).Deregister(ctx, req.(*RegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SwxProxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.feg.SwxProxy",
	HandlerType: (*SwxProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _SwxProxy_Authenticate_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _SwxProxy_Register_Handler,
		},
		{
			MethodName: "Deregister",
			Handler:    _SwxProxy_Deregister_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feg/protos/swx_proxy.proto",
}

// SwxGatewayServiceClient is the client API for SwxGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SwxGatewayServiceClient interface {
	// TerminateRegistration - handler of SWx Registration-Termination,
	// see: http://www.qtc.jp/3GPP/Specs/29273-920.pdf Section 8.2.2.4
	TerminateRegistration(ctx context.Context, in *RegistrationTerminationRequest, opts ...grpc.CallOption) (*RegistrationAnswer, error)
}

type swxGatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSwxGatewayServiceClient(cc grpc.ClientConnInterface) SwxGatewayServiceClient {
	return &swxGatewayServiceClient{cc}
}

func (c *swxGatewayServiceClient) TerminateRegistration(ctx context.Context, in *RegistrationTerminationRequest, opts ...grpc.CallOption) (*RegistrationAnswer, error) {
	out := new(RegistrationAnswer)
	err := c.cc.Invoke(ctx, "/magma.feg.SwxGatewayService/TerminateRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwxGatewayServiceServer is the server API for SwxGatewayService service.
type SwxGatewayServiceServer interface {
	// TerminateRegistration - handler of SWx Registration-Termination,
	// see: http://www.qtc.jp/3GPP/Specs/29273-920.pdf Section 8.2.2.4
	TerminateRegistration(context.Context, *RegistrationTerminationRequest) (*RegistrationAnswer, error)
}

// UnimplementedSwxGatewayServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSwxGatewayServiceServer struct {
}

func (*UnimplementedSwxGatewayServiceServer) TerminateRegistration(context.Context, *RegistrationTerminationRequest) (*RegistrationAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateRegistration not implemented")
}

func RegisterSwxGatewayServiceServer(s *grpc.Server, srv SwxGatewayServiceServer) {
	s.RegisterService(&_SwxGatewayService_serviceDesc, srv)
}

func _SwxGatewayService_TerminateRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationTerminationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwxGatewayServiceServer).TerminateRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.SwxGatewayService/TerminateRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwxGatewayServiceServer).TerminateRegistration(ctx, req.(*RegistrationTerminationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SwxGatewayService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.feg.SwxGatewayService",
	HandlerType: (*SwxGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TerminateRegistration",
			Handler:    _SwxGatewayService_TerminateRegistration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feg/protos/swx_proxy.proto",
}
