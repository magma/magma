//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.10.0
// source: feg/protos/mock_core.proto

package protos

import (
	context "context"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	protos "magma/lte/cloud/go/protos"
	protos1 "magma/orc8r/lib/go/protos"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FinalUnitAction int32

const (
	FinalUnitAction_Terminate FinalUnitAction = 0
	FinalUnitAction_Redirect  FinalUnitAction = 1
	FinalUnitAction_Restrict  FinalUnitAction = 2
)

// Enum value maps for FinalUnitAction.
var (
	FinalUnitAction_name = map[int32]string{
		0: "Terminate",
		1: "Redirect",
		2: "Restrict",
	}
	FinalUnitAction_value = map[string]int32{
		"Terminate": 0,
		"Redirect":  1,
		"Restrict":  2,
	}
)

func (x FinalUnitAction) Enum() *FinalUnitAction {
	p := new(FinalUnitAction)
	*p = x
	return p
}

func (x FinalUnitAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FinalUnitAction) Descriptor() protoreflect.EnumDescriptor {
	return file_feg_protos_mock_core_proto_enumTypes[0].Descriptor()
}

func (FinalUnitAction) Type() protoreflect.EnumType {
	return &file_feg_protos_mock_core_proto_enumTypes[0]
}

func (x FinalUnitAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FinalUnitAction.Descriptor instead.
func (FinalUnitAction) EnumDescriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{0}
}

type MonitoringLevel int32

const (
	MonitoringLevel_SessionLevel MonitoringLevel = 0
	MonitoringLevel_RuleLevel    MonitoringLevel = 1
)

// Enum value maps for MonitoringLevel.
var (
	MonitoringLevel_name = map[int32]string{
		0: "SessionLevel",
		1: "RuleLevel",
	}
	MonitoringLevel_value = map[string]int32{
		"SessionLevel": 0,
		"RuleLevel":    1,
	}
)

func (x MonitoringLevel) Enum() *MonitoringLevel {
	p := new(MonitoringLevel)
	*p = x
	return p
}

func (x MonitoringLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MonitoringLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_feg_protos_mock_core_proto_enumTypes[1].Descriptor()
}

func (MonitoringLevel) Type() protoreflect.EnumType {
	return &file_feg_protos_mock_core_proto_enumTypes[1]
}

func (x MonitoringLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MonitoringLevel.Descriptor instead.
func (MonitoringLevel) EnumDescriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{1}
}

type CCRequestType int32

const (
	// proto3 requires enums to start at value 0. This should not be used.
	CCRequestType__INVALID    CCRequestType = 0
	CCRequestType_INITIAL     CCRequestType = 1
	CCRequestType_UPDATE      CCRequestType = 2
	CCRequestType_TERMINATION CCRequestType = 3
)

// Enum value maps for CCRequestType.
var (
	CCRequestType_name = map[int32]string{
		0: "_INVALID",
		1: "INITIAL",
		2: "UPDATE",
		3: "TERMINATION",
	}
	CCRequestType_value = map[string]int32{
		"_INVALID":    0,
		"INITIAL":     1,
		"UPDATE":      2,
		"TERMINATION": 3,
	}
)

func (x CCRequestType) Enum() *CCRequestType {
	p := new(CCRequestType)
	*p = x
	return p
}

func (x CCRequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CCRequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_feg_protos_mock_core_proto_enumTypes[2].Descriptor()
}

func (CCRequestType) Type() protoreflect.EnumType {
	return &file_feg_protos_mock_core_proto_enumTypes[2]
}

func (x CCRequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CCRequestType.Descriptor instead.
func (CCRequestType) EnumDescriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{2}
}

type UnexpectedRequestBehavior int32

const (
	// Answer with a permanent failure diameter code, then the session will
	// be terminated. This will be the default behavior unless a default answer
	// is specified
	UnexpectedRequestBehavior_CONTINUE_WITH_ERROR          UnexpectedRequestBehavior = 0
	UnexpectedRequestBehavior_CONTINUE_WITH_DEFAULT_ANSWER UnexpectedRequestBehavior = 1
)

// Enum value maps for UnexpectedRequestBehavior.
var (
	UnexpectedRequestBehavior_name = map[int32]string{
		0: "CONTINUE_WITH_ERROR",
		1: "CONTINUE_WITH_DEFAULT_ANSWER",
	}
	UnexpectedRequestBehavior_value = map[string]int32{
		"CONTINUE_WITH_ERROR":          0,
		"CONTINUE_WITH_DEFAULT_ANSWER": 1,
	}
)

func (x UnexpectedRequestBehavior) Enum() *UnexpectedRequestBehavior {
	p := new(UnexpectedRequestBehavior)
	*p = x
	return p
}

func (x UnexpectedRequestBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnexpectedRequestBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_feg_protos_mock_core_proto_enumTypes[3].Descriptor()
}

func (UnexpectedRequestBehavior) Type() protoreflect.EnumType {
	return &file_feg_protos_mock_core_proto_enumTypes[3]
}

func (x UnexpectedRequestBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnexpectedRequestBehavior.Descriptor instead.
func (UnexpectedRequestBehavior) EnumDescriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{3}
}

type AbortCauseType int32

const (
	AbortCauseType_BearerReleased              AbortCauseType = 0
	AbortCauseType_InsufficientServerResources AbortCauseType = 1
	AbortCauseType_InsufficientBearerResources AbortCauseType = 2
)

// Enum value maps for AbortCauseType.
var (
	AbortCauseType_name = map[int32]string{
		0: "BearerReleased",
		1: "InsufficientServerResources",
		2: "InsufficientBearerResources",
	}
	AbortCauseType_value = map[string]int32{
		"BearerReleased":              0,
		"InsufficientServerResources": 1,
		"InsufficientBearerResources": 2,
	}
)

func (x AbortCauseType) Enum() *AbortCauseType {
	p := new(AbortCauseType)
	*p = x
	return p
}

func (x AbortCauseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AbortCauseType) Descriptor() protoreflect.EnumDescriptor {
	return file_feg_protos_mock_core_proto_enumTypes[4].Descriptor()
}

func (AbortCauseType) Type() protoreflect.EnumType {
	return &file_feg_protos_mock_core_proto_enumTypes[4]
}

func (x AbortCauseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AbortCauseType.Descriptor instead.
func (AbortCauseType) EnumDescriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{4}
}

type Reply_ServerBehavior int32

const (
	Reply_REPLY_INSTANTLY Reply_ServerBehavior = 0
	Reply_REPLY_LATE      Reply_ServerBehavior = 1
	Reply_NO_REPLY        Reply_ServerBehavior = 2
)

// Enum value maps for Reply_ServerBehavior.
var (
	Reply_ServerBehavior_name = map[int32]string{
		0: "REPLY_INSTANTLY",
		1: "REPLY_LATE",
		2: "NO_REPLY",
	}
	Reply_ServerBehavior_value = map[string]int32{
		"REPLY_INSTANTLY": 0,
		"REPLY_LATE":      1,
		"NO_REPLY":        2,
	}
)

func (x Reply_ServerBehavior) Enum() *Reply_ServerBehavior {
	p := new(Reply_ServerBehavior)
	*p = x
	return p
}

func (x Reply_ServerBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Reply_ServerBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_feg_protos_mock_core_proto_enumTypes[5].Descriptor()
}

func (Reply_ServerBehavior) Type() protoreflect.EnumType {
	return &file_feg_protos_mock_core_proto_enumTypes[5]
}

func (x Reply_ServerBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Reply_ServerBehavior.Descriptor instead.
func (Reply_ServerBehavior) EnumDescriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{0, 0}
}

type OCSConfig_GrantType int32

const (
	OCSConfig_TotalOnly OCSConfig_GrantType = 0
	OCSConfig_TxOnly    OCSConfig_GrantType = 1 // output Octets
)

// Enum value maps for OCSConfig_GrantType.
var (
	OCSConfig_GrantType_name = map[int32]string{
		0: "TotalOnly",
		1: "TxOnly",
	}
	OCSConfig_GrantType_value = map[string]int32{
		"TotalOnly": 0,
		"TxOnly":    1,
	}
)

func (x OCSConfig_GrantType) Enum() *OCSConfig_GrantType {
	p := new(OCSConfig_GrantType)
	*p = x
	return p
}

func (x OCSConfig_GrantType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OCSConfig_GrantType) Descriptor() protoreflect.EnumDescriptor {
	return file_feg_protos_mock_core_proto_enumTypes[6].Descriptor()
}

func (OCSConfig_GrantType) Type() protoreflect.EnumType {
	return &file_feg_protos_mock_core_proto_enumTypes[6]
}

func (x OCSConfig_GrantType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OCSConfig_GrantType.Descriptor instead.
func (OCSConfig_GrantType) EnumDescriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{6, 0}
}

type CreditInfo_UnitType int32

const (
	CreditInfo_Bytes CreditInfo_UnitType = 0
	CreditInfo_Time  CreditInfo_UnitType = 1
)

// Enum value maps for CreditInfo_UnitType.
var (
	CreditInfo_UnitType_name = map[int32]string{
		0: "Bytes",
		1: "Time",
	}
	CreditInfo_UnitType_value = map[string]int32{
		"Bytes": 0,
		"Time":  1,
	}
)

func (x CreditInfo_UnitType) Enum() *CreditInfo_UnitType {
	p := new(CreditInfo_UnitType)
	*p = x
	return p
}

func (x CreditInfo_UnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreditInfo_UnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_feg_protos_mock_core_proto_enumTypes[7].Descriptor()
}

func (CreditInfo_UnitType) Type() protoreflect.EnumType {
	return &file_feg_protos_mock_core_proto_enumTypes[7]
}

func (x CreditInfo_UnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreditInfo_UnitType.Descriptor instead.
func (CreditInfo_UnitType) EnumDescriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{7, 0}
}

type N7Expectation_RequestType int32

const (
	N7Expectation_CREATE    N7Expectation_RequestType = 0
	N7Expectation_UPDATE    N7Expectation_RequestType = 1
	N7Expectation_TERMINATE N7Expectation_RequestType = 2
)

// Enum value maps for N7Expectation_RequestType.
var (
	N7Expectation_RequestType_name = map[int32]string{
		0: "CREATE",
		1: "UPDATE",
		2: "TERMINATE",
	}
	N7Expectation_RequestType_value = map[string]int32{
		"CREATE":    0,
		"UPDATE":    1,
		"TERMINATE": 2,
	}
)

func (x N7Expectation_RequestType) Enum() *N7Expectation_RequestType {
	p := new(N7Expectation_RequestType)
	*p = x
	return p
}

func (x N7Expectation_RequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (N7Expectation_RequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_feg_protos_mock_core_proto_enumTypes[8].Descriptor()
}

func (N7Expectation_RequestType) Type() protoreflect.EnumType {
	return &file_feg_protos_mock_core_proto_enumTypes[8]
}

func (x N7Expectation_RequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use N7Expectation_RequestType.Descriptor instead.
func (N7Expectation_RequestType) EnumDescriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{45, 0}
}

type Reply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerBehavior Reply_ServerBehavior `protobuf:"varint,1,opt,name=server_behavior,json=serverBehavior,proto3,enum=magma.feg.Reply_ServerBehavior" json:"server_behavior,omitempty"`
	// reply delaying time in sec
	ReplyDelay int32 `protobuf:"varint,2,opt,name=reply_delay,json=replyDelay,proto3" json:"reply_delay,omitempty"`
	// Types that are assignable to SgsMessage:
	//	*Reply_AlertRequest
	//	*Reply_DownlinkUnitdata
	//	*Reply_EpsDetachAck
	//	*Reply_ImsiDetachAck
	//	*Reply_LocationUpdateAccept
	//	*Reply_LocationUpdateReject
	//	*Reply_MmInformationRequest
	//	*Reply_PagingRequest
	//	*Reply_ReleaseRequest
	//	*Reply_ServiceAbortRequest
	//	*Reply_ResetAck
	//	*Reply_ResetIndication
	//	*Reply_Status
	SgsMessage isReply_SgsMessage `protobuf_oneof:"sgs_message"`
	// Types that are assignable to GxgyMessage:
	//	*Reply_CreateSessionResponse
	//	*Reply_UpdateSessionResponse
	//	*Reply_SessionTerminateResponse
	GxgyMessage isReply_GxgyMessage `protobuf_oneof:"gxgy_message"`
}

func (x *Reply) Reset() {
	*x = Reply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reply) ProtoMessage() {}

func (x *Reply) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reply.ProtoReflect.Descriptor instead.
func (*Reply) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{0}
}

func (x *Reply) GetServerBehavior() Reply_ServerBehavior {
	if x != nil {
		return x.ServerBehavior
	}
	return Reply_REPLY_INSTANTLY
}

func (x *Reply) GetReplyDelay() int32 {
	if x != nil {
		return x.ReplyDelay
	}
	return 0
}

func (m *Reply) GetSgsMessage() isReply_SgsMessage {
	if m != nil {
		return m.SgsMessage
	}
	return nil
}

func (x *Reply) GetAlertRequest() *AlertRequest {
	if x, ok := x.GetSgsMessage().(*Reply_AlertRequest); ok {
		return x.AlertRequest
	}
	return nil
}

func (x *Reply) GetDownlinkUnitdata() *DownlinkUnitdata {
	if x, ok := x.GetSgsMessage().(*Reply_DownlinkUnitdata); ok {
		return x.DownlinkUnitdata
	}
	return nil
}

func (x *Reply) GetEpsDetachAck() *EPSDetachAck {
	if x, ok := x.GetSgsMessage().(*Reply_EpsDetachAck); ok {
		return x.EpsDetachAck
	}
	return nil
}

func (x *Reply) GetImsiDetachAck() *IMSIDetachAck {
	if x, ok := x.GetSgsMessage().(*Reply_ImsiDetachAck); ok {
		return x.ImsiDetachAck
	}
	return nil
}

func (x *Reply) GetLocationUpdateAccept() *LocationUpdateAccept {
	if x, ok := x.GetSgsMessage().(*Reply_LocationUpdateAccept); ok {
		return x.LocationUpdateAccept
	}
	return nil
}

func (x *Reply) GetLocationUpdateReject() *LocationUpdateReject {
	if x, ok := x.GetSgsMessage().(*Reply_LocationUpdateReject); ok {
		return x.LocationUpdateReject
	}
	return nil
}

func (x *Reply) GetMmInformationRequest() *MMInformationRequest {
	if x, ok := x.GetSgsMessage().(*Reply_MmInformationRequest); ok {
		return x.MmInformationRequest
	}
	return nil
}

func (x *Reply) GetPagingRequest() *PagingRequest {
	if x, ok := x.GetSgsMessage().(*Reply_PagingRequest); ok {
		return x.PagingRequest
	}
	return nil
}

func (x *Reply) GetReleaseRequest() *ReleaseRequest {
	if x, ok := x.GetSgsMessage().(*Reply_ReleaseRequest); ok {
		return x.ReleaseRequest
	}
	return nil
}

func (x *Reply) GetServiceAbortRequest() *ServiceAbortRequest {
	if x, ok := x.GetSgsMessage().(*Reply_ServiceAbortRequest); ok {
		return x.ServiceAbortRequest
	}
	return nil
}

func (x *Reply) GetResetAck() *ResetAck {
	if x, ok := x.GetSgsMessage().(*Reply_ResetAck); ok {
		return x.ResetAck
	}
	return nil
}

func (x *Reply) GetResetIndication() *ResetIndication {
	if x, ok := x.GetSgsMessage().(*Reply_ResetIndication); ok {
		return x.ResetIndication
	}
	return nil
}

func (x *Reply) GetStatus() *Status {
	if x, ok := x.GetSgsMessage().(*Reply_Status); ok {
		return x.Status
	}
	return nil
}

func (m *Reply) GetGxgyMessage() isReply_GxgyMessage {
	if m != nil {
		return m.GxgyMessage
	}
	return nil
}

func (x *Reply) GetCreateSessionResponse() *protos.CreateSessionResponse {
	if x, ok := x.GetGxgyMessage().(*Reply_CreateSessionResponse); ok {
		return x.CreateSessionResponse
	}
	return nil
}

func (x *Reply) GetUpdateSessionResponse() *protos.UpdateSessionResponse {
	if x, ok := x.GetGxgyMessage().(*Reply_UpdateSessionResponse); ok {
		return x.UpdateSessionResponse
	}
	return nil
}

func (x *Reply) GetSessionTerminateResponse() *protos.SessionTerminateResponse {
	if x, ok := x.GetGxgyMessage().(*Reply_SessionTerminateResponse); ok {
		return x.SessionTerminateResponse
	}
	return nil
}

type isReply_SgsMessage interface {
	isReply_SgsMessage()
}

type Reply_AlertRequest struct {
	AlertRequest *AlertRequest `protobuf:"bytes,3,opt,name=alert_request,json=alertRequest,proto3,oneof"`
}

type Reply_DownlinkUnitdata struct {
	DownlinkUnitdata *DownlinkUnitdata `protobuf:"bytes,4,opt,name=downlink_unitdata,json=downlinkUnitdata,proto3,oneof"`
}

type Reply_EpsDetachAck struct {
	EpsDetachAck *EPSDetachAck `protobuf:"bytes,5,opt,name=eps_detach_ack,json=epsDetachAck,proto3,oneof"`
}

type Reply_ImsiDetachAck struct {
	ImsiDetachAck *IMSIDetachAck `protobuf:"bytes,6,opt,name=imsi_detach_ack,json=imsiDetachAck,proto3,oneof"`
}

type Reply_LocationUpdateAccept struct {
	LocationUpdateAccept *LocationUpdateAccept `protobuf:"bytes,7,opt,name=location_update_accept,json=locationUpdateAccept,proto3,oneof"`
}

type Reply_LocationUpdateReject struct {
	LocationUpdateReject *LocationUpdateReject `protobuf:"bytes,8,opt,name=location_update_reject,json=locationUpdateReject,proto3,oneof"`
}

type Reply_MmInformationRequest struct {
	MmInformationRequest *MMInformationRequest `protobuf:"bytes,9,opt,name=mm_information_request,json=mmInformationRequest,proto3,oneof"`
}

type Reply_PagingRequest struct {
	PagingRequest *PagingRequest `protobuf:"bytes,10,opt,name=paging_request,json=pagingRequest,proto3,oneof"`
}

type Reply_ReleaseRequest struct {
	ReleaseRequest *ReleaseRequest `protobuf:"bytes,11,opt,name=release_request,json=releaseRequest,proto3,oneof"`
}

type Reply_ServiceAbortRequest struct {
	ServiceAbortRequest *ServiceAbortRequest `protobuf:"bytes,12,opt,name=service_abort_request,json=serviceAbortRequest,proto3,oneof"`
}

type Reply_ResetAck struct {
	ResetAck *ResetAck `protobuf:"bytes,13,opt,name=reset_ack,json=resetAck,proto3,oneof"`
}

type Reply_ResetIndication struct {
	ResetIndication *ResetIndication `protobuf:"bytes,14,opt,name=reset_indication,json=resetIndication,proto3,oneof"`
}

type Reply_Status struct {
	Status *Status `protobuf:"bytes,15,opt,name=status,proto3,oneof"`
}

func (*Reply_AlertRequest) isReply_SgsMessage() {}

func (*Reply_DownlinkUnitdata) isReply_SgsMessage() {}

func (*Reply_EpsDetachAck) isReply_SgsMessage() {}

func (*Reply_ImsiDetachAck) isReply_SgsMessage() {}

func (*Reply_LocationUpdateAccept) isReply_SgsMessage() {}

func (*Reply_LocationUpdateReject) isReply_SgsMessage() {}

func (*Reply_MmInformationRequest) isReply_SgsMessage() {}

func (*Reply_PagingRequest) isReply_SgsMessage() {}

func (*Reply_ReleaseRequest) isReply_SgsMessage() {}

func (*Reply_ServiceAbortRequest) isReply_SgsMessage() {}

func (*Reply_ResetAck) isReply_SgsMessage() {}

func (*Reply_ResetIndication) isReply_SgsMessage() {}

func (*Reply_Status) isReply_SgsMessage() {}

type isReply_GxgyMessage interface {
	isReply_GxgyMessage()
}

type Reply_CreateSessionResponse struct {
	CreateSessionResponse *protos.CreateSessionResponse `protobuf:"bytes,16,opt,name=create_session_response,json=createSessionResponse,proto3,oneof"`
}

type Reply_UpdateSessionResponse struct {
	UpdateSessionResponse *protos.UpdateSessionResponse `protobuf:"bytes,17,opt,name=update_session_response,json=updateSessionResponse,proto3,oneof"`
}

type Reply_SessionTerminateResponse struct {
	SessionTerminateResponse *protos.SessionTerminateResponse `protobuf:"bytes,18,opt,name=session_terminate_response,json=sessionTerminateResponse,proto3,oneof"`
}

func (*Reply_CreateSessionResponse) isReply_GxgyMessage() {}

func (*Reply_UpdateSessionResponse) isReply_GxgyMessage() {}

func (*Reply_SessionTerminateResponse) isReply_GxgyMessage() {}

type ExpectedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SgsMessage:
	//	*ExpectedRequest_AlertAck
	//	*ExpectedRequest_AlertReject
	//	*ExpectedRequest_EpsDetachIndication
	//	*ExpectedRequest_ImsiDetachIndication
	//	*ExpectedRequest_LocationUpdateRequest
	//	*ExpectedRequest_PagingReject
	//	*ExpectedRequest_ServiceRequest
	//	*ExpectedRequest_TmsiReallocationComplete
	//	*ExpectedRequest_UeActivityIndication
	//	*ExpectedRequest_UeUnreachable
	//	*ExpectedRequest_UplinkUnitdata
	//	*ExpectedRequest_ResetAck
	//	*ExpectedRequest_ResetIndication
	//	*ExpectedRequest_Status
	SgsMessage isExpectedRequest_SgsMessage `protobuf_oneof:"sgs_message"`
	// Types that are assignable to GxgyMessage:
	//	*ExpectedRequest_CreateSessionRequest
	//	*ExpectedRequest_UpdateSessionRequest
	//	*ExpectedRequest_SessionTerminateRequest
	GxgyMessage isExpectedRequest_GxgyMessage `protobuf_oneof:"gxgy_message"`
}

func (x *ExpectedRequest) Reset() {
	*x = ExpectedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpectedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpectedRequest) ProtoMessage() {}

func (x *ExpectedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpectedRequest.ProtoReflect.Descriptor instead.
func (*ExpectedRequest) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{1}
}

func (m *ExpectedRequest) GetSgsMessage() isExpectedRequest_SgsMessage {
	if m != nil {
		return m.SgsMessage
	}
	return nil
}

func (x *ExpectedRequest) GetAlertAck() *AlertAck {
	if x, ok := x.GetSgsMessage().(*ExpectedRequest_AlertAck); ok {
		return x.AlertAck
	}
	return nil
}

func (x *ExpectedRequest) GetAlertReject() *AlertReject {
	if x, ok := x.GetSgsMessage().(*ExpectedRequest_AlertReject); ok {
		return x.AlertReject
	}
	return nil
}

func (x *ExpectedRequest) GetEpsDetachIndication() *EPSDetachIndication {
	if x, ok := x.GetSgsMessage().(*ExpectedRequest_EpsDetachIndication); ok {
		return x.EpsDetachIndication
	}
	return nil
}

func (x *ExpectedRequest) GetImsiDetachIndication() *IMSIDetachIndication {
	if x, ok := x.GetSgsMessage().(*ExpectedRequest_ImsiDetachIndication); ok {
		return x.ImsiDetachIndication
	}
	return nil
}

func (x *ExpectedRequest) GetLocationUpdateRequest() *LocationUpdateRequest {
	if x, ok := x.GetSgsMessage().(*ExpectedRequest_LocationUpdateRequest); ok {
		return x.LocationUpdateRequest
	}
	return nil
}

func (x *ExpectedRequest) GetPagingReject() *PagingReject {
	if x, ok := x.GetSgsMessage().(*ExpectedRequest_PagingReject); ok {
		return x.PagingReject
	}
	return nil
}

func (x *ExpectedRequest) GetServiceRequest() *ServiceRequest {
	if x, ok := x.GetSgsMessage().(*ExpectedRequest_ServiceRequest); ok {
		return x.ServiceRequest
	}
	return nil
}

func (x *ExpectedRequest) GetTmsiReallocationComplete() *TMSIReallocationComplete {
	if x, ok := x.GetSgsMessage().(*ExpectedRequest_TmsiReallocationComplete); ok {
		return x.TmsiReallocationComplete
	}
	return nil
}

func (x *ExpectedRequest) GetUeActivityIndication() *UEActivityIndication {
	if x, ok := x.GetSgsMessage().(*ExpectedRequest_UeActivityIndication); ok {
		return x.UeActivityIndication
	}
	return nil
}

func (x *ExpectedRequest) GetUeUnreachable() *UEUnreachable {
	if x, ok := x.GetSgsMessage().(*ExpectedRequest_UeUnreachable); ok {
		return x.UeUnreachable
	}
	return nil
}

func (x *ExpectedRequest) GetUplinkUnitdata() *UplinkUnitdata {
	if x, ok := x.GetSgsMessage().(*ExpectedRequest_UplinkUnitdata); ok {
		return x.UplinkUnitdata
	}
	return nil
}

func (x *ExpectedRequest) GetResetAck() *ResetAck {
	if x, ok := x.GetSgsMessage().(*ExpectedRequest_ResetAck); ok {
		return x.ResetAck
	}
	return nil
}

func (x *ExpectedRequest) GetResetIndication() *ResetIndication {
	if x, ok := x.GetSgsMessage().(*ExpectedRequest_ResetIndication); ok {
		return x.ResetIndication
	}
	return nil
}

func (x *ExpectedRequest) GetStatus() *Status {
	if x, ok := x.GetSgsMessage().(*ExpectedRequest_Status); ok {
		return x.Status
	}
	return nil
}

func (m *ExpectedRequest) GetGxgyMessage() isExpectedRequest_GxgyMessage {
	if m != nil {
		return m.GxgyMessage
	}
	return nil
}

func (x *ExpectedRequest) GetCreateSessionRequest() *protos.CreateSessionRequest {
	if x, ok := x.GetGxgyMessage().(*ExpectedRequest_CreateSessionRequest); ok {
		return x.CreateSessionRequest
	}
	return nil
}

func (x *ExpectedRequest) GetUpdateSessionRequest() *protos.UpdateSessionRequest {
	if x, ok := x.GetGxgyMessage().(*ExpectedRequest_UpdateSessionRequest); ok {
		return x.UpdateSessionRequest
	}
	return nil
}

func (x *ExpectedRequest) GetSessionTerminateRequest() *protos.SessionTerminateRequest {
	if x, ok := x.GetGxgyMessage().(*ExpectedRequest_SessionTerminateRequest); ok {
		return x.SessionTerminateRequest
	}
	return nil
}

type isExpectedRequest_SgsMessage interface {
	isExpectedRequest_SgsMessage()
}

type ExpectedRequest_AlertAck struct {
	AlertAck *AlertAck `protobuf:"bytes,1,opt,name=alert_ack,json=alertAck,proto3,oneof"`
}

type ExpectedRequest_AlertReject struct {
	AlertReject *AlertReject `protobuf:"bytes,2,opt,name=alert_reject,json=alertReject,proto3,oneof"`
}

type ExpectedRequest_EpsDetachIndication struct {
	EpsDetachIndication *EPSDetachIndication `protobuf:"bytes,3,opt,name=eps_detach_indication,json=epsDetachIndication,proto3,oneof"`
}

type ExpectedRequest_ImsiDetachIndication struct {
	ImsiDetachIndication *IMSIDetachIndication `protobuf:"bytes,4,opt,name=imsi_detach_indication,json=imsiDetachIndication,proto3,oneof"`
}

type ExpectedRequest_LocationUpdateRequest struct {
	LocationUpdateRequest *LocationUpdateRequest `protobuf:"bytes,5,opt,name=location_update_request,json=locationUpdateRequest,proto3,oneof"`
}

type ExpectedRequest_PagingReject struct {
	PagingReject *PagingReject `protobuf:"bytes,6,opt,name=paging_reject,json=pagingReject,proto3,oneof"`
}

type ExpectedRequest_ServiceRequest struct {
	ServiceRequest *ServiceRequest `protobuf:"bytes,7,opt,name=service_request,json=serviceRequest,proto3,oneof"`
}

type ExpectedRequest_TmsiReallocationComplete struct {
	TmsiReallocationComplete *TMSIReallocationComplete `protobuf:"bytes,8,opt,name=tmsi_reallocation_complete,json=tmsiReallocationComplete,proto3,oneof"`
}

type ExpectedRequest_UeActivityIndication struct {
	UeActivityIndication *UEActivityIndication `protobuf:"bytes,9,opt,name=ue_activity_indication,json=ueActivityIndication,proto3,oneof"`
}

type ExpectedRequest_UeUnreachable struct {
	UeUnreachable *UEUnreachable `protobuf:"bytes,10,opt,name=ue_unreachable,json=ueUnreachable,proto3,oneof"`
}

type ExpectedRequest_UplinkUnitdata struct {
	UplinkUnitdata *UplinkUnitdata `protobuf:"bytes,11,opt,name=uplink_unitdata,json=uplinkUnitdata,proto3,oneof"`
}

type ExpectedRequest_ResetAck struct {
	ResetAck *ResetAck `protobuf:"bytes,12,opt,name=reset_ack,json=resetAck,proto3,oneof"`
}

type ExpectedRequest_ResetIndication struct {
	ResetIndication *ResetIndication `protobuf:"bytes,13,opt,name=reset_indication,json=resetIndication,proto3,oneof"`
}

type ExpectedRequest_Status struct {
	Status *Status `protobuf:"bytes,14,opt,name=status,proto3,oneof"`
}

func (*ExpectedRequest_AlertAck) isExpectedRequest_SgsMessage() {}

func (*ExpectedRequest_AlertReject) isExpectedRequest_SgsMessage() {}

func (*ExpectedRequest_EpsDetachIndication) isExpectedRequest_SgsMessage() {}

func (*ExpectedRequest_ImsiDetachIndication) isExpectedRequest_SgsMessage() {}

func (*ExpectedRequest_LocationUpdateRequest) isExpectedRequest_SgsMessage() {}

func (*ExpectedRequest_PagingReject) isExpectedRequest_SgsMessage() {}

func (*ExpectedRequest_ServiceRequest) isExpectedRequest_SgsMessage() {}

func (*ExpectedRequest_TmsiReallocationComplete) isExpectedRequest_SgsMessage() {}

func (*ExpectedRequest_UeActivityIndication) isExpectedRequest_SgsMessage() {}

func (*ExpectedRequest_UeUnreachable) isExpectedRequest_SgsMessage() {}

func (*ExpectedRequest_UplinkUnitdata) isExpectedRequest_SgsMessage() {}

func (*ExpectedRequest_ResetAck) isExpectedRequest_SgsMessage() {}

func (*ExpectedRequest_ResetIndication) isExpectedRequest_SgsMessage() {}

func (*ExpectedRequest_Status) isExpectedRequest_SgsMessage() {}

type isExpectedRequest_GxgyMessage interface {
	isExpectedRequest_GxgyMessage()
}

type ExpectedRequest_CreateSessionRequest struct {
	CreateSessionRequest *protos.CreateSessionRequest `protobuf:"bytes,15,opt,name=create_session_request,json=createSessionRequest,proto3,oneof"`
}

type ExpectedRequest_UpdateSessionRequest struct {
	UpdateSessionRequest *protos.UpdateSessionRequest `protobuf:"bytes,16,opt,name=update_session_request,json=updateSessionRequest,proto3,oneof"`
}

type ExpectedRequest_SessionTerminateRequest struct {
	SessionTerminateRequest *protos.SessionTerminateRequest `protobuf:"bytes,17,opt,name=session_terminate_request,json=sessionTerminateRequest,proto3,oneof"`
}

func (*ExpectedRequest_CreateSessionRequest) isExpectedRequest_GxgyMessage() {}

func (*ExpectedRequest_UpdateSessionRequest) isExpectedRequest_GxgyMessage() {}

func (*ExpectedRequest_SessionTerminateRequest) isExpectedRequest_GxgyMessage() {}

type RequestReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *ExpectedRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Reply   *Reply           `protobuf:"bytes,2,opt,name=reply,proto3" json:"reply,omitempty"`
}

func (x *RequestReply) Reset() {
	*x = RequestReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestReply) ProtoMessage() {}

func (x *RequestReply) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestReply.ProtoReflect.Descriptor instead.
func (*RequestReply) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{2}
}

func (x *RequestReply) GetRequest() *ExpectedRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *RequestReply) GetReply() *Reply {
	if x != nil {
		return x.Reply
	}
	return nil
}

type ServerConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestReply []*RequestReply `protobuf:"bytes,1,rep,name=request_reply,json=requestReply,proto3" json:"request_reply,omitempty"`
}

func (x *ServerConfiguration) Reset() {
	*x = ServerConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerConfiguration) ProtoMessage() {}

func (x *ServerConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerConfiguration.ProtoReflect.Descriptor instead.
func (*ServerConfiguration) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{3}
}

func (x *ServerConfiguration) GetRequestReply() []*RequestReply {
	if x != nil {
		return x.RequestReply
	}
	return nil
}

type RedirectServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedirectServerAddress string `protobuf:"bytes,1,opt,name=RedirectServerAddress,proto3" json:"RedirectServerAddress,omitempty"`
}

func (x *RedirectServer) Reset() {
	*x = RedirectServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedirectServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedirectServer) ProtoMessage() {}

func (x *RedirectServer) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedirectServer.ProtoReflect.Descriptor instead.
func (*RedirectServer) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{4}
}

func (x *RedirectServer) GetRedirectServerAddress() string {
	if x != nil {
		return x.RedirectServerAddress
	}
	return ""
}

type FinalUnitIndication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedirectServer  *RedirectServer `protobuf:"bytes,1,opt,name=redirect_server,json=redirectServer,proto3" json:"redirect_server,omitempty"`
	FinalUnitAction FinalUnitAction `protobuf:"varint,2,opt,name=final_unit_action,json=finalUnitAction,proto3,enum=magma.feg.FinalUnitAction" json:"final_unit_action,omitempty"`
	RestrictRules   []string        `protobuf:"bytes,3,rep,name=restrict_rules,json=restrictRules,proto3" json:"restrict_rules,omitempty"`
}

func (x *FinalUnitIndication) Reset() {
	*x = FinalUnitIndication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalUnitIndication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalUnitIndication) ProtoMessage() {}

func (x *FinalUnitIndication) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalUnitIndication.ProtoReflect.Descriptor instead.
func (*FinalUnitIndication) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{5}
}

func (x *FinalUnitIndication) GetRedirectServer() *RedirectServer {
	if x != nil {
		return x.RedirectServer
	}
	return nil
}

func (x *FinalUnitIndication) GetFinalUnitAction() FinalUnitAction {
	if x != nil {
		return x.FinalUnitAction
	}
	return FinalUnitAction_Terminate
}

func (x *FinalUnitIndication) GetRestrictRules() []string {
	if x != nil {
		return x.RestrictRules
	}
	return nil
}

type OCSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxUsageOctets      *Octets              `protobuf:"bytes,1,opt,name=max_usage_octets,json=maxUsageOctets,proto3" json:"max_usage_octets,omitempty"`
	MaxUsageTime        uint32               `protobuf:"varint,2,opt,name=max_usage_time,json=maxUsageTime,proto3" json:"max_usage_time,omitempty"`
	ValidityTime        uint32               `protobuf:"varint,3,opt,name=validity_time,json=validityTime,proto3" json:"validity_time,omitempty"`
	UseMockDriver       bool                 `protobuf:"varint,4,opt,name=use_mock_driver,json=useMockDriver,proto3" json:"use_mock_driver,omitempty"`
	FinalUnitIndication *FinalUnitIndication `protobuf:"bytes,5,opt,name=final_unit_indication,json=finalUnitIndication,proto3" json:"final_unit_indication,omitempty"`
	// defines what field will OCS check. Only Total and TX are implemented
	GrantTypeProcedure OCSConfig_GrantType `protobuf:"varint,6,opt,name=grant_type_procedure,json=grantTypeProcedure,proto3,enum=magma.feg.OCSConfig_GrantType" json:"grant_type_procedure,omitempty"`
}

func (x *OCSConfig) Reset() {
	*x = OCSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCSConfig) ProtoMessage() {}

func (x *OCSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCSConfig.ProtoReflect.Descriptor instead.
func (*OCSConfig) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{6}
}

func (x *OCSConfig) GetMaxUsageOctets() *Octets {
	if x != nil {
		return x.MaxUsageOctets
	}
	return nil
}

func (x *OCSConfig) GetMaxUsageTime() uint32 {
	if x != nil {
		return x.MaxUsageTime
	}
	return 0
}

func (x *OCSConfig) GetValidityTime() uint32 {
	if x != nil {
		return x.ValidityTime
	}
	return 0
}

func (x *OCSConfig) GetUseMockDriver() bool {
	if x != nil {
		return x.UseMockDriver
	}
	return false
}

func (x *OCSConfig) GetFinalUnitIndication() *FinalUnitIndication {
	if x != nil {
		return x.FinalUnitIndication
	}
	return nil
}

func (x *OCSConfig) GetGrantTypeProcedure() OCSConfig_GrantType {
	if x != nil {
		return x.GrantTypeProcedure
	}
	return OCSConfig_TotalOnly
}

type CreditInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imsi        string              `protobuf:"bytes,1,opt,name=imsi,proto3" json:"imsi,omitempty"`
	ChargingKey uint32              `protobuf:"varint,2,opt,name=charging_key,json=chargingKey,proto3" json:"charging_key,omitempty"`
	Volume      *Octets             `protobuf:"bytes,3,opt,name=volume,proto3" json:"volume,omitempty"`
	UnitType    CreditInfo_UnitType `protobuf:"varint,4,opt,name=unit_type,json=unitType,proto3,enum=magma.feg.CreditInfo_UnitType" json:"unit_type,omitempty"`
}

func (x *CreditInfo) Reset() {
	*x = CreditInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditInfo) ProtoMessage() {}

func (x *CreditInfo) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditInfo.ProtoReflect.Descriptor instead.
func (*CreditInfo) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{7}
}

func (x *CreditInfo) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *CreditInfo) GetChargingKey() uint32 {
	if x != nil {
		return x.ChargingKey
	}
	return 0
}

func (x *CreditInfo) GetVolume() *Octets {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *CreditInfo) GetUnitType() CreditInfo_UnitType {
	if x != nil {
		return x.UnitType
	}
	return CreditInfo_Bytes
}

type CreditInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreditInformation map[uint32]*CreditInfo `protobuf:"bytes,1,rep,name=creditInformation,proto3" json:"creditInformation,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreditInfos) Reset() {
	*x = CreditInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditInfos) ProtoMessage() {}

func (x *CreditInfos) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditInfos.ProtoReflect.Descriptor instead.
func (*CreditInfos) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{8}
}

func (x *CreditInfos) GetCreditInformation() map[uint32]*CreditInfo {
	if x != nil {
		return x.CreditInformation
	}
	return nil
}

type ChargingReAuthTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imsi        string `protobuf:"bytes,1,opt,name=imsi,proto3" json:"imsi,omitempty"`
	RatingGroup uint32 `protobuf:"varint,2,opt,name=rating_group,json=ratingGroup,proto3" json:"rating_group,omitempty"`
}

func (x *ChargingReAuthTarget) Reset() {
	*x = ChargingReAuthTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargingReAuthTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargingReAuthTarget) ProtoMessage() {}

func (x *ChargingReAuthTarget) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargingReAuthTarget.ProtoReflect.Descriptor instead.
func (*ChargingReAuthTarget) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{9}
}

func (x *ChargingReAuthTarget) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *ChargingReAuthTarget) GetRatingGroup() uint32 {
	if x != nil {
		return x.RatingGroup
	}
	return 0
}

type ChargingReAuthAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId  string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ResultCode uint32 `protobuf:"varint,2,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`
}

func (x *ChargingReAuthAnswer) Reset() {
	*x = ChargingReAuthAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargingReAuthAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargingReAuthAnswer) ProtoMessage() {}

func (x *ChargingReAuthAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargingReAuthAnswer.ProtoReflect.Descriptor instead.
func (*ChargingReAuthAnswer) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{10}
}

func (x *ChargingReAuthAnswer) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ChargingReAuthAnswer) GetResultCode() uint32 {
	if x != nil {
		return x.ResultCode
	}
	return 0
}

type PCRFConfigs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseMockDriver bool `protobuf:"varint,1,opt,name=use_mock_driver,json=useMockDriver,proto3" json:"use_mock_driver,omitempty"`
}

func (x *PCRFConfigs) Reset() {
	*x = PCRFConfigs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PCRFConfigs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCRFConfigs) ProtoMessage() {}

func (x *PCRFConfigs) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PCRFConfigs.ProtoReflect.Descriptor instead.
func (*PCRFConfigs) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{11}
}

func (x *PCRFConfigs) GetUseMockDriver() bool {
	if x != nil {
		return x.UseMockDriver
	}
	return false
}

type AccountRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imsi                   string            `protobuf:"bytes,1,opt,name=imsi,proto3" json:"imsi,omitempty"`
	StaticRuleNames        []string          `protobuf:"bytes,2,rep,name=static_rule_names,json=staticRuleNames,proto3" json:"static_rule_names,omitempty"`
	StaticRuleBaseNames    []string          `protobuf:"bytes,3,rep,name=static_rule_base_names,json=staticRuleBaseNames,proto3" json:"static_rule_base_names,omitempty"`
	DynamicRuleDefinitions []*RuleDefinition `protobuf:"bytes,4,rep,name=dynamic_rule_definitions,json=dynamicRuleDefinitions,proto3" json:"dynamic_rule_definitions,omitempty"`
}

func (x *AccountRules) Reset() {
	*x = AccountRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountRules) ProtoMessage() {}

func (x *AccountRules) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountRules.ProtoReflect.Descriptor instead.
func (*AccountRules) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{12}
}

func (x *AccountRules) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *AccountRules) GetStaticRuleNames() []string {
	if x != nil {
		return x.StaticRuleNames
	}
	return nil
}

func (x *AccountRules) GetStaticRuleBaseNames() []string {
	if x != nil {
		return x.StaticRuleBaseNames
	}
	return nil
}

func (x *AccountRules) GetDynamicRuleDefinitions() []*RuleDefinition {
	if x != nil {
		return x.DynamicRuleDefinitions
	}
	return nil
}

type RuleDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleName            string                      `protobuf:"bytes,1,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
	RatingGroup         uint32                      `protobuf:"varint,2,opt,name=rating_group,json=ratingGroup,proto3" json:"rating_group,omitempty"`
	Precedence          uint32                      `protobuf:"varint,3,opt,name=precedence,proto3" json:"precedence,omitempty"`
	MonitoringKey       string                      `protobuf:"bytes,4,opt,name=monitoring_key,json=monitoringKey,proto3" json:"monitoring_key,omitempty"`
	FlowDescriptions    []string                    `protobuf:"bytes,5,rep,name=flow_descriptions,json=flowDescriptions,proto3" json:"flow_descriptions,omitempty"`
	RedirectInformation *protos.RedirectInformation `protobuf:"bytes,7,opt,name=redirect_information,json=redirectInformation,proto3" json:"redirect_information,omitempty"`
	QosInformation      *protos.FlowQos             `protobuf:"bytes,8,opt,name=qos_information,json=qosInformation,proto3" json:"qos_information,omitempty"`
}

func (x *RuleDefinition) Reset() {
	*x = RuleDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleDefinition) ProtoMessage() {}

func (x *RuleDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleDefinition.ProtoReflect.Descriptor instead.
func (*RuleDefinition) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{13}
}

func (x *RuleDefinition) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *RuleDefinition) GetRatingGroup() uint32 {
	if x != nil {
		return x.RatingGroup
	}
	return 0
}

func (x *RuleDefinition) GetPrecedence() uint32 {
	if x != nil {
		return x.Precedence
	}
	return 0
}

func (x *RuleDefinition) GetMonitoringKey() string {
	if x != nil {
		return x.MonitoringKey
	}
	return ""
}

func (x *RuleDefinition) GetFlowDescriptions() []string {
	if x != nil {
		return x.FlowDescriptions
	}
	return nil
}

func (x *RuleDefinition) GetRedirectInformation() *protos.RedirectInformation {
	if x != nil {
		return x.RedirectInformation
	}
	return nil
}

func (x *RuleDefinition) GetQosInformation() *protos.FlowQos {
	if x != nil {
		return x.QosInformation
	}
	return nil
}

type UsageMonitorConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imsi                string          `protobuf:"bytes,1,opt,name=imsi,proto3" json:"imsi,omitempty"`
	UsageMonitorCredits []*UsageMonitor `protobuf:"bytes,2,rep,name=usage_monitor_credits,json=usageMonitorCredits,proto3" json:"usage_monitor_credits,omitempty"`
}

func (x *UsageMonitorConfiguration) Reset() {
	*x = UsageMonitorConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageMonitorConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageMonitorConfiguration) ProtoMessage() {}

func (x *UsageMonitorConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageMonitorConfiguration.ProtoReflect.Descriptor instead.
func (*UsageMonitorConfiguration) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{14}
}

func (x *UsageMonitorConfiguration) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *UsageMonitorConfiguration) GetUsageMonitorCredits() []*UsageMonitor {
	if x != nil {
		return x.UsageMonitorCredits
	}
	return nil
}

type UsageMonitor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the usage monitoring information the PCRF sends per answer
	MonitorInfoPerRequest *UsageMonitoringInformation `protobuf:"bytes,1,opt,name=monitor_info_per_request,json=monitorInfoPerRequest,proto3" json:"monitor_info_per_request,omitempty"`
	// the total amount of quota assigned to the monitoring key
	TotalQuota *Octets `protobuf:"bytes,2,opt,name=total_quota,json=totalQuota,proto3" json:"total_quota,omitempty"`
}

func (x *UsageMonitor) Reset() {
	*x = UsageMonitor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageMonitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageMonitor) ProtoMessage() {}

func (x *UsageMonitor) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageMonitor.ProtoReflect.Descriptor instead.
func (*UsageMonitor) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{15}
}

func (x *UsageMonitor) GetMonitorInfoPerRequest() *UsageMonitoringInformation {
	if x != nil {
		return x.MonitorInfoPerRequest
	}
	return nil
}

func (x *UsageMonitor) GetTotalQuota() *Octets {
	if x != nil {
		return x.TotalQuota
	}
	return nil
}

type GxCreditControlExpectations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expectations              []*GxCreditControlExpectation `protobuf:"bytes,1,rep,name=expectations,proto3" json:"expectations,omitempty"`
	UnexpectedRequestBehavior UnexpectedRequestBehavior     `protobuf:"varint,2,opt,name=unexpected_request_behavior,json=unexpectedRequestBehavior,proto3,enum=magma.feg.UnexpectedRequestBehavior" json:"unexpected_request_behavior,omitempty"`
	GxDefaultCca              *GxCreditControlAnswer        `protobuf:"bytes,3,opt,name=gx_default_cca,json=gxDefaultCca,proto3" json:"gx_default_cca,omitempty"`
	TotalExpectedUsage        *Octets                       `protobuf:"bytes,4,opt,name=total_expected_usage,json=totalExpectedUsage,proto3" json:"total_expected_usage,omitempty"`
}

func (x *GxCreditControlExpectations) Reset() {
	*x = GxCreditControlExpectations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GxCreditControlExpectations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GxCreditControlExpectations) ProtoMessage() {}

func (x *GxCreditControlExpectations) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GxCreditControlExpectations.ProtoReflect.Descriptor instead.
func (*GxCreditControlExpectations) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{16}
}

func (x *GxCreditControlExpectations) GetExpectations() []*GxCreditControlExpectation {
	if x != nil {
		return x.Expectations
	}
	return nil
}

func (x *GxCreditControlExpectations) GetUnexpectedRequestBehavior() UnexpectedRequestBehavior {
	if x != nil {
		return x.UnexpectedRequestBehavior
	}
	return UnexpectedRequestBehavior_CONTINUE_WITH_ERROR
}

func (x *GxCreditControlExpectations) GetGxDefaultCca() *GxCreditControlAnswer {
	if x != nil {
		return x.GxDefaultCca
	}
	return nil
}

func (x *GxCreditControlExpectations) GetTotalExpectedUsage() *Octets {
	if x != nil {
		return x.TotalExpectedUsage
	}
	return nil
}

type GxCreditControlResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ExpectationResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Errors  []*ErrorByIndex      `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GxCreditControlResult) Reset() {
	*x = GxCreditControlResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GxCreditControlResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GxCreditControlResult) ProtoMessage() {}

func (x *GxCreditControlResult) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GxCreditControlResult.ProtoReflect.Descriptor instead.
func (*GxCreditControlResult) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{17}
}

func (x *GxCreditControlResult) GetResults() []*ExpectationResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *GxCreditControlResult) GetErrors() []*ErrorByIndex {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ErrorByIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int32  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ErrorByIndex) Reset() {
	*x = ErrorByIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorByIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorByIndex) ProtoMessage() {}

func (x *ErrorByIndex) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorByIndex.ProtoReflect.Descriptor instead.
func (*ErrorByIndex) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{18}
}

func (x *ErrorByIndex) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ErrorByIndex) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ExpectationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpectationIndex int32 `protobuf:"varint,1,opt,name=expectation_index,json=expectationIndex,proto3" json:"expectation_index,omitempty"`
	ExpectationMet   bool  `protobuf:"varint,2,opt,name=expectation_met,json=expectationMet,proto3" json:"expectation_met,omitempty"`
}

func (x *ExpectationResult) Reset() {
	*x = ExpectationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpectationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpectationResult) ProtoMessage() {}

func (x *ExpectationResult) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpectationResult.ProtoReflect.Descriptor instead.
func (*ExpectationResult) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{19}
}

func (x *ExpectationResult) GetExpectationIndex() int32 {
	if x != nil {
		return x.ExpectationIndex
	}
	return 0
}

func (x *ExpectationResult) GetExpectationMet() bool {
	if x != nil {
		return x.ExpectationMet
	}
	return false
}

type GxCreditControlExpectation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpectedRequest *GxCreditControlRequest `protobuf:"bytes,1,opt,name=expected_request,json=expectedRequest,proto3" json:"expected_request,omitempty"`
	Answer          *GxCreditControlAnswer  `protobuf:"bytes,2,opt,name=answer,proto3" json:"answer,omitempty"`
}

func (x *GxCreditControlExpectation) Reset() {
	*x = GxCreditControlExpectation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GxCreditControlExpectation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GxCreditControlExpectation) ProtoMessage() {}

func (x *GxCreditControlExpectation) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GxCreditControlExpectation.ProtoReflect.Descriptor instead.
func (*GxCreditControlExpectation) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{20}
}

func (x *GxCreditControlExpectation) GetExpectedRequest() *GxCreditControlRequest {
	if x != nil {
		return x.ExpectedRequest
	}
	return nil
}

func (x *GxCreditControlExpectation) GetAnswer() *GxCreditControlAnswer {
	if x != nil {
		return x.Answer
	}
	return nil
}

type GxCreditControlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imsi                   string                        `protobuf:"bytes,1,opt,name=imsi,proto3" json:"imsi,omitempty"`
	RequestType            CCRequestType                 `protobuf:"varint,2,opt,name=request_type,json=requestType,proto3,enum=magma.feg.CCRequestType" json:"request_type,omitempty"`
	RequestNumber          *wrappers.Int32Value          `protobuf:"bytes,3,opt,name=request_number,json=requestNumber,proto3" json:"request_number,omitempty"`
	UsageMonitoringReports []*UsageMonitoringInformation `protobuf:"bytes,11,rep,name=usage_monitoring_reports,json=usageMonitoringReports,proto3" json:"usage_monitoring_reports,omitempty"`
	// As long as we use real traffic for the test, usage reporting will differ
	// each time. So this field will specify the acceptable range for the
	// value. We will accept a request as matching if
	// (expected report - delta) < actual report < (expected report + delta)
	UsageReportDelta uint64               `protobuf:"varint,12,opt,name=usage_report_delta,json=usageReportDelta,proto3" json:"usage_report_delta,omitempty"`
	EventTrigger     *wrappers.Int32Value `protobuf:"bytes,13,opt,name=event_trigger,json=eventTrigger,proto3" json:"event_trigger,omitempty"`
}

func (x *GxCreditControlRequest) Reset() {
	*x = GxCreditControlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GxCreditControlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GxCreditControlRequest) ProtoMessage() {}

func (x *GxCreditControlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GxCreditControlRequest.ProtoReflect.Descriptor instead.
func (*GxCreditControlRequest) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{21}
}

func (x *GxCreditControlRequest) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *GxCreditControlRequest) GetRequestType() CCRequestType {
	if x != nil {
		return x.RequestType
	}
	return CCRequestType__INVALID
}

func (x *GxCreditControlRequest) GetRequestNumber() *wrappers.Int32Value {
	if x != nil {
		return x.RequestNumber
	}
	return nil
}

func (x *GxCreditControlRequest) GetUsageMonitoringReports() []*UsageMonitoringInformation {
	if x != nil {
		return x.UsageMonitoringReports
	}
	return nil
}

func (x *GxCreditControlRequest) GetUsageReportDelta() uint64 {
	if x != nil {
		return x.UsageReportDelta
	}
	return 0
}

func (x *GxCreditControlRequest) GetEventTrigger() *wrappers.Int32Value {
	if x != nil {
		return x.EventTrigger
	}
	return nil
}

type GxCreditControlAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// request type and request number will be taken from the request
	ResultCode           uint32                        `protobuf:"varint,1,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`
	UsageMonitoringInfos []*UsageMonitoringInformation `protobuf:"bytes,11,rep,name=usage_monitoring_infos,json=usageMonitoringInfos,proto3" json:"usage_monitoring_infos,omitempty"`
	RuleInstalls         *RuleInstalls                 `protobuf:"bytes,12,opt,name=rule_installs,json=ruleInstalls,proto3" json:"rule_installs,omitempty"`
	RuleRemovals         *RuleRemovals                 `protobuf:"bytes,13,opt,name=rule_removals,json=ruleRemovals,proto3" json:"rule_removals,omitempty"`
	EventTriggers        []uint32                      `protobuf:"varint,14,rep,packed,name=event_triggers,json=eventTriggers,proto3" json:"event_triggers,omitempty"`
	RevalidationTime     *timestamp.Timestamp          `protobuf:"bytes,15,opt,name=revalidation_time,json=revalidationTime,proto3" json:"revalidation_time,omitempty"`
}

func (x *GxCreditControlAnswer) Reset() {
	*x = GxCreditControlAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GxCreditControlAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GxCreditControlAnswer) ProtoMessage() {}

func (x *GxCreditControlAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GxCreditControlAnswer.ProtoReflect.Descriptor instead.
func (*GxCreditControlAnswer) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{22}
}

func (x *GxCreditControlAnswer) GetResultCode() uint32 {
	if x != nil {
		return x.ResultCode
	}
	return 0
}

func (x *GxCreditControlAnswer) GetUsageMonitoringInfos() []*UsageMonitoringInformation {
	if x != nil {
		return x.UsageMonitoringInfos
	}
	return nil
}

func (x *GxCreditControlAnswer) GetRuleInstalls() *RuleInstalls {
	if x != nil {
		return x.RuleInstalls
	}
	return nil
}

func (x *GxCreditControlAnswer) GetRuleRemovals() *RuleRemovals {
	if x != nil {
		return x.RuleRemovals
	}
	return nil
}

func (x *GxCreditControlAnswer) GetEventTriggers() []uint32 {
	if x != nil {
		return x.EventTriggers
	}
	return nil
}

func (x *GxCreditControlAnswer) GetRevalidationTime() *timestamp.Timestamp {
	if x != nil {
		return x.RevalidationTime
	}
	return nil
}

type GyCreditControlExpectations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expectations              []*GyCreditControlExpectation `protobuf:"bytes,1,rep,name=expectations,proto3" json:"expectations,omitempty"`
	UnexpectedRequestBehavior UnexpectedRequestBehavior     `protobuf:"varint,2,opt,name=unexpected_request_behavior,json=unexpectedRequestBehavior,proto3,enum=magma.feg.UnexpectedRequestBehavior" json:"unexpected_request_behavior,omitempty"`
	GyDefaultCca              *GyCreditControlAnswer        `protobuf:"bytes,3,opt,name=gy_default_cca,json=gyDefaultCca,proto3" json:"gy_default_cca,omitempty"`
}

func (x *GyCreditControlExpectations) Reset() {
	*x = GyCreditControlExpectations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GyCreditControlExpectations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GyCreditControlExpectations) ProtoMessage() {}

func (x *GyCreditControlExpectations) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GyCreditControlExpectations.ProtoReflect.Descriptor instead.
func (*GyCreditControlExpectations) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{23}
}

func (x *GyCreditControlExpectations) GetExpectations() []*GyCreditControlExpectation {
	if x != nil {
		return x.Expectations
	}
	return nil
}

func (x *GyCreditControlExpectations) GetUnexpectedRequestBehavior() UnexpectedRequestBehavior {
	if x != nil {
		return x.UnexpectedRequestBehavior
	}
	return UnexpectedRequestBehavior_CONTINUE_WITH_ERROR
}

func (x *GyCreditControlExpectations) GetGyDefaultCca() *GyCreditControlAnswer {
	if x != nil {
		return x.GyDefaultCca
	}
	return nil
}

type GyCreditControlResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ExpectationResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Errors  []*ErrorByIndex      `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GyCreditControlResult) Reset() {
	*x = GyCreditControlResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GyCreditControlResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GyCreditControlResult) ProtoMessage() {}

func (x *GyCreditControlResult) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GyCreditControlResult.ProtoReflect.Descriptor instead.
func (*GyCreditControlResult) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{24}
}

func (x *GyCreditControlResult) GetResults() []*ExpectationResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *GyCreditControlResult) GetErrors() []*ErrorByIndex {
	if x != nil {
		return x.Errors
	}
	return nil
}

type GyCreditControlExpectation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpectedRequest *GyCreditControlRequest `protobuf:"bytes,1,opt,name=expected_request,json=expectedRequest,proto3" json:"expected_request,omitempty"`
	Answer          *GyCreditControlAnswer  `protobuf:"bytes,2,opt,name=answer,proto3" json:"answer,omitempty"`
}

func (x *GyCreditControlExpectation) Reset() {
	*x = GyCreditControlExpectation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GyCreditControlExpectation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GyCreditControlExpectation) ProtoMessage() {}

func (x *GyCreditControlExpectation) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GyCreditControlExpectation.ProtoReflect.Descriptor instead.
func (*GyCreditControlExpectation) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{25}
}

func (x *GyCreditControlExpectation) GetExpectedRequest() *GyCreditControlRequest {
	if x != nil {
		return x.ExpectedRequest
	}
	return nil
}

func (x *GyCreditControlExpectation) GetAnswer() *GyCreditControlAnswer {
	if x != nil {
		return x.Answer
	}
	return nil
}

type GyCreditControlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imsi          string                           `protobuf:"bytes,1,opt,name=imsi,proto3" json:"imsi,omitempty"`
	RequestType   CCRequestType                    `protobuf:"varint,2,opt,name=request_type,json=requestType,proto3,enum=magma.feg.CCRequestType" json:"request_type,omitempty"`
	RequestNumber *wrappers.Int32Value             `protobuf:"bytes,3,opt,name=request_number,json=requestNumber,proto3" json:"request_number,omitempty"`
	QosInfo       *QosInfo                         `protobuf:"bytes,21,opt,name=qos_info,json=qosInfo,proto3" json:"qos_info,omitempty"`
	Mscc          []*MultipleServicesCreditControl `protobuf:"bytes,22,rep,name=mscc,proto3" json:"mscc,omitempty"`
	// As long as we use real traffic for the test, usage reporting will differ
	// each time. So this field will specify the acceptable range for the
	// value. We will accept a request as matching if
	// (expected report - delta) < actual report < (expected report + delta)
	UsageReportDelta uint64 `protobuf:"varint,12,opt,name=usage_report_delta,json=usageReportDelta,proto3" json:"usage_report_delta,omitempty"`
}

func (x *GyCreditControlRequest) Reset() {
	*x = GyCreditControlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GyCreditControlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GyCreditControlRequest) ProtoMessage() {}

func (x *GyCreditControlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GyCreditControlRequest.ProtoReflect.Descriptor instead.
func (*GyCreditControlRequest) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{26}
}

func (x *GyCreditControlRequest) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *GyCreditControlRequest) GetRequestType() CCRequestType {
	if x != nil {
		return x.RequestType
	}
	return CCRequestType__INVALID
}

func (x *GyCreditControlRequest) GetRequestNumber() *wrappers.Int32Value {
	if x != nil {
		return x.RequestNumber
	}
	return nil
}

func (x *GyCreditControlRequest) GetQosInfo() *QosInfo {
	if x != nil {
		return x.QosInfo
	}
	return nil
}

func (x *GyCreditControlRequest) GetMscc() []*MultipleServicesCreditControl {
	if x != nil {
		return x.Mscc
	}
	return nil
}

func (x *GyCreditControlRequest) GetUsageReportDelta() uint64 {
	if x != nil {
		return x.UsageReportDelta
	}
	return 0
}

type GyCreditControlAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestType   CCRequestType `protobuf:"varint,1,opt,name=request_type,json=requestType,proto3,enum=magma.feg.CCRequestType" json:"request_type,omitempty"`
	RequestNumber uint32        `protobuf:"varint,2,opt,name=request_number,json=requestNumber,proto3" json:"request_number,omitempty"`
	ResultCode    uint32        `protobuf:"varint,3,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`
	QuotaGrants   []*QuotaGrant `protobuf:"bytes,4,rep,name=quota_grants,json=quotaGrants,proto3" json:"quota_grants,omitempty"`
	LinkFailure   bool          `protobuf:"varint,5,opt,name=link_failure,json=linkFailure,proto3" json:"link_failure,omitempty"`
}

func (x *GyCreditControlAnswer) Reset() {
	*x = GyCreditControlAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GyCreditControlAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GyCreditControlAnswer) ProtoMessage() {}

func (x *GyCreditControlAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GyCreditControlAnswer.ProtoReflect.Descriptor instead.
func (*GyCreditControlAnswer) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{27}
}

func (x *GyCreditControlAnswer) GetRequestType() CCRequestType {
	if x != nil {
		return x.RequestType
	}
	return CCRequestType__INVALID
}

func (x *GyCreditControlAnswer) GetRequestNumber() uint32 {
	if x != nil {
		return x.RequestNumber
	}
	return 0
}

func (x *GyCreditControlAnswer) GetResultCode() uint32 {
	if x != nil {
		return x.ResultCode
	}
	return 0
}

func (x *GyCreditControlAnswer) GetQuotaGrants() []*QuotaGrant {
	if x != nil {
		return x.QuotaGrants
	}
	return nil
}

func (x *GyCreditControlAnswer) GetLinkFailure() bool {
	if x != nil {
		return x.LinkFailure
	}
	return false
}

type QuotaGrant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RatingGroup         uint32               `protobuf:"varint,1,opt,name=rating_group,json=ratingGroup,proto3" json:"rating_group,omitempty"`
	GrantedServiceUnit  *Octets              `protobuf:"bytes,2,opt,name=granted_service_unit,json=grantedServiceUnit,proto3" json:"granted_service_unit,omitempty"`
	ValidityTime        uint32               `protobuf:"varint,3,opt,name=validity_time,json=validityTime,proto3" json:"validity_time,omitempty"`
	ResultCode          uint32               `protobuf:"varint,4,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`
	IsFinalCredit       bool                 `protobuf:"varint,11,opt,name=is_final_credit,json=isFinalCredit,proto3" json:"is_final_credit,omitempty"`
	FinalUnitIndication *FinalUnitIndication `protobuf:"bytes,12,opt,name=final_unit_indication,json=finalUnitIndication,proto3" json:"final_unit_indication,omitempty"`
}

func (x *QuotaGrant) Reset() {
	*x = QuotaGrant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotaGrant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotaGrant) ProtoMessage() {}

func (x *QuotaGrant) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotaGrant.ProtoReflect.Descriptor instead.
func (*QuotaGrant) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{28}
}

func (x *QuotaGrant) GetRatingGroup() uint32 {
	if x != nil {
		return x.RatingGroup
	}
	return 0
}

func (x *QuotaGrant) GetGrantedServiceUnit() *Octets {
	if x != nil {
		return x.GrantedServiceUnit
	}
	return nil
}

func (x *QuotaGrant) GetValidityTime() uint32 {
	if x != nil {
		return x.ValidityTime
	}
	return 0
}

func (x *QuotaGrant) GetResultCode() uint32 {
	if x != nil {
		return x.ResultCode
	}
	return 0
}

func (x *QuotaGrant) GetIsFinalCredit() bool {
	if x != nil {
		return x.IsFinalCredit
	}
	return false
}

func (x *QuotaGrant) GetFinalUnitIndication() *FinalUnitIndication {
	if x != nil {
		return x.FinalUnitIndication
	}
	return nil
}

// AVP: 1067
type UsageMonitoringInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitoringKey   []byte          `protobuf:"bytes,1,opt,name=monitoring_key,json=monitoringKey,proto3" json:"monitoring_key,omitempty"`
	MonitoringLevel MonitoringLevel `protobuf:"varint,2,opt,name=monitoring_level,json=monitoringLevel,proto3,enum=magma.feg.MonitoringLevel" json:"monitoring_level,omitempty"`
	Octets          *Octets         `protobuf:"bytes,3,opt,name=octets,proto3" json:"octets,omitempty"`
}

func (x *UsageMonitoringInformation) Reset() {
	*x = UsageMonitoringInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageMonitoringInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageMonitoringInformation) ProtoMessage() {}

func (x *UsageMonitoringInformation) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageMonitoringInformation.ProtoReflect.Descriptor instead.
func (*UsageMonitoringInformation) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{29}
}

func (x *UsageMonitoringInformation) GetMonitoringKey() []byte {
	if x != nil {
		return x.MonitoringKey
	}
	return nil
}

func (x *UsageMonitoringInformation) GetMonitoringLevel() MonitoringLevel {
	if x != nil {
		return x.MonitoringLevel
	}
	return MonitoringLevel_SessionLevel
}

func (x *UsageMonitoringInformation) GetOctets() *Octets {
	if x != nil {
		return x.Octets
	}
	return nil
}

type MultipleServicesCreditControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RatingGroup     uint32  `protobuf:"varint,1,opt,name=rating_group,json=ratingGroup,proto3" json:"rating_group,omitempty"`
	UsedServiceUnit *Octets `protobuf:"bytes,2,opt,name=used_service_unit,json=usedServiceUnit,proto3" json:"used_service_unit,omitempty"`
	UpdateType      int32   `protobuf:"varint,3,opt,name=update_type,json=updateType,proto3" json:"update_type,omitempty"`
}

func (x *MultipleServicesCreditControl) Reset() {
	*x = MultipleServicesCreditControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipleServicesCreditControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipleServicesCreditControl) ProtoMessage() {}

func (x *MultipleServicesCreditControl) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipleServicesCreditControl.ProtoReflect.Descriptor instead.
func (*MultipleServicesCreditControl) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{30}
}

func (x *MultipleServicesCreditControl) GetRatingGroup() uint32 {
	if x != nil {
		return x.RatingGroup
	}
	return 0
}

func (x *MultipleServicesCreditControl) GetUsedServiceUnit() *Octets {
	if x != nil {
		return x.UsedServiceUnit
	}
	return nil
}

func (x *MultipleServicesCreditControl) GetUpdateType() int32 {
	if x != nil {
		return x.UpdateType
	}
	return 0
}

type QosInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AVP: 1041
	ApnAggMaxBitRateUl uint32 `protobuf:"varint,1,opt,name=apn_agg_max_bit_rate_ul,json=apnAggMaxBitRateUl,proto3" json:"apn_agg_max_bit_rate_ul,omitempty"`
	// AVP: 1040
	ApnAggMaxBitRateDl uint32 `protobuf:"varint,2,opt,name=apn_agg_max_bit_rate_dl,json=apnAggMaxBitRateDl,proto3" json:"apn_agg_max_bit_rate_dl,omitempty"`
}

func (x *QosInfo) Reset() {
	*x = QosInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QosInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QosInfo) ProtoMessage() {}

func (x *QosInfo) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QosInfo.ProtoReflect.Descriptor instead.
func (*QosInfo) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{31}
}

func (x *QosInfo) GetApnAggMaxBitRateUl() uint32 {
	if x != nil {
		return x.ApnAggMaxBitRateUl
	}
	return 0
}

func (x *QosInfo) GetApnAggMaxBitRateDl() uint32 {
	if x != nil {
		return x.ApnAggMaxBitRateDl
	}
	return 0
}

type RuleInstalls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleNames        []string             `protobuf:"bytes,1,rep,name=rule_names,json=ruleNames,proto3" json:"rule_names,omitempty"`
	RuleBaseNames    []string             `protobuf:"bytes,2,rep,name=rule_base_names,json=ruleBaseNames,proto3" json:"rule_base_names,omitempty"`
	RuleDefinitions  []*RuleDefinition    `protobuf:"bytes,3,rep,name=rule_definitions,json=ruleDefinitions,proto3" json:"rule_definitions,omitempty"`
	ActivationTime   *timestamp.Timestamp `protobuf:"bytes,4,opt,name=activation_time,json=activationTime,proto3" json:"activation_time,omitempty"`
	DeactivationTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=deactivation_time,json=deactivationTime,proto3" json:"deactivation_time,omitempty"`
}

func (x *RuleInstalls) Reset() {
	*x = RuleInstalls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleInstalls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleInstalls) ProtoMessage() {}

func (x *RuleInstalls) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleInstalls.ProtoReflect.Descriptor instead.
func (*RuleInstalls) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{32}
}

func (x *RuleInstalls) GetRuleNames() []string {
	if x != nil {
		return x.RuleNames
	}
	return nil
}

func (x *RuleInstalls) GetRuleBaseNames() []string {
	if x != nil {
		return x.RuleBaseNames
	}
	return nil
}

func (x *RuleInstalls) GetRuleDefinitions() []*RuleDefinition {
	if x != nil {
		return x.RuleDefinitions
	}
	return nil
}

func (x *RuleInstalls) GetActivationTime() *timestamp.Timestamp {
	if x != nil {
		return x.ActivationTime
	}
	return nil
}

func (x *RuleInstalls) GetDeactivationTime() *timestamp.Timestamp {
	if x != nil {
		return x.DeactivationTime
	}
	return nil
}

type RuleRemovals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleNames     []string `protobuf:"bytes,1,rep,name=rule_names,json=ruleNames,proto3" json:"rule_names,omitempty"`
	RuleBaseNames []string `protobuf:"bytes,2,rep,name=rule_base_names,json=ruleBaseNames,proto3" json:"rule_base_names,omitempty"`
}

func (x *RuleRemovals) Reset() {
	*x = RuleRemovals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleRemovals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleRemovals) ProtoMessage() {}

func (x *RuleRemovals) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleRemovals.ProtoReflect.Descriptor instead.
func (*RuleRemovals) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{33}
}

func (x *RuleRemovals) GetRuleNames() []string {
	if x != nil {
		return x.RuleNames
	}
	return nil
}

func (x *RuleRemovals) GetRuleBaseNames() []string {
	if x != nil {
		return x.RuleBaseNames
	}
	return nil
}

type Octets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalOctets  uint64 `protobuf:"varint,1,opt,name=total_octets,json=totalOctets,proto3" json:"total_octets,omitempty"`
	InputOctets  uint64 `protobuf:"varint,2,opt,name=input_octets,json=inputOctets,proto3" json:"input_octets,omitempty"`
	OutputOctets uint64 `protobuf:"varint,3,opt,name=output_octets,json=outputOctets,proto3" json:"output_octets,omitempty"`
}

func (x *Octets) Reset() {
	*x = Octets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Octets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Octets) ProtoMessage() {}

func (x *Octets) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Octets.ProtoReflect.Descriptor instead.
func (*Octets) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{34}
}

func (x *Octets) GetTotalOctets() uint64 {
	if x != nil {
		return x.TotalOctets
	}
	return 0
}

func (x *Octets) GetInputOctets() uint64 {
	if x != nil {
		return x.InputOctets
	}
	return 0
}

func (x *Octets) GetOutputOctets() uint64 {
	if x != nil {
		return x.OutputOctets
	}
	return 0
}

type PolicyReAuthTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imsi                 string                        `protobuf:"bytes,1,opt,name=imsi,proto3" json:"imsi,omitempty"`
	RulesToRemove        *RuleRemovals                 `protobuf:"bytes,2,opt,name=rules_to_remove,json=rulesToRemove,proto3" json:"rules_to_remove,omitempty"`
	RulesToInstall       *RuleInstalls                 `protobuf:"bytes,3,opt,name=rules_to_install,json=rulesToInstall,proto3" json:"rules_to_install,omitempty"`
	UsageMonitoringInfos []*UsageMonitoringInformation `protobuf:"bytes,4,rep,name=usage_monitoring_infos,json=usageMonitoringInfos,proto3" json:"usage_monitoring_infos,omitempty"`
}

func (x *PolicyReAuthTarget) Reset() {
	*x = PolicyReAuthTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyReAuthTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyReAuthTarget) ProtoMessage() {}

func (x *PolicyReAuthTarget) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyReAuthTarget.ProtoReflect.Descriptor instead.
func (*PolicyReAuthTarget) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{35}
}

func (x *PolicyReAuthTarget) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *PolicyReAuthTarget) GetRulesToRemove() *RuleRemovals {
	if x != nil {
		return x.RulesToRemove
	}
	return nil
}

func (x *PolicyReAuthTarget) GetRulesToInstall() *RuleInstalls {
	if x != nil {
		return x.RulesToInstall
	}
	return nil
}

func (x *PolicyReAuthTarget) GetUsageMonitoringInfos() []*UsageMonitoringInformation {
	if x != nil {
		return x.UsageMonitoringInfos
	}
	return nil
}

type PolicyReAuthAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId   string            `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ResultCode  uint32            `protobuf:"varint,2,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`
	FailedRules map[string]uint32 `protobuf:"bytes,3,rep,name=failed_rules,json=failedRules,proto3" json:"failed_rules,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *PolicyReAuthAnswer) Reset() {
	*x = PolicyReAuthAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyReAuthAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyReAuthAnswer) ProtoMessage() {}

func (x *PolicyReAuthAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyReAuthAnswer.ProtoReflect.Descriptor instead.
func (*PolicyReAuthAnswer) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{36}
}

func (x *PolicyReAuthAnswer) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *PolicyReAuthAnswer) GetResultCode() uint32 {
	if x != nil {
		return x.ResultCode
	}
	return 0
}

func (x *PolicyReAuthAnswer) GetFailedRules() map[string]uint32 {
	if x != nil {
		return x.FailedRules
	}
	return nil
}

type AbortSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imsi string `protobuf:"bytes,1,opt,name=imsi,proto3" json:"imsi,omitempty"`
}

func (x *AbortSessionRequest) Reset() {
	*x = AbortSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbortSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortSessionRequest) ProtoMessage() {}

func (x *AbortSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortSessionRequest.ProtoReflect.Descriptor instead.
func (*AbortSessionRequest) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{37}
}

func (x *AbortSessionRequest) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

type AbortSessionAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId    string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ResultCode   uint32 `protobuf:"varint,2,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`
	ErrorMessage string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *AbortSessionAnswer) Reset() {
	*x = AbortSessionAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbortSessionAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortSessionAnswer) ProtoMessage() {}

func (x *AbortSessionAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortSessionAnswer.ProtoReflect.Descriptor instead.
func (*AbortSessionAnswer) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{38}
}

func (x *AbortSessionAnswer) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *AbortSessionAnswer) GetResultCode() uint32 {
	if x != nil {
		return x.ResultCode
	}
	return 0
}

func (x *AbortSessionAnswer) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Configuration for PCF service
type PCFConfigs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseMockDriver bool `protobuf:"varint,1,opt,name=use_mock_driver,json=useMockDriver,proto3" json:"use_mock_driver,omitempty"`
}

func (x *PCFConfigs) Reset() {
	*x = PCFConfigs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PCFConfigs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCFConfigs) ProtoMessage() {}

func (x *PCFConfigs) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PCFConfigs.ProtoReflect.Descriptor instead.
func (*PCFConfigs) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{39}
}

func (x *PCFConfigs) GetUseMockDriver() bool {
	if x != nil {
		return x.UseMockDriver
	}
	return false
}

// Policy Decision that will be sent back to SMF during CreateSession, UpdateSession or UpdateNotify
type PolicyDecision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IMSI for which the PCF rule is applicable
	Imsi string `protobuf:"bytes,1,opt,name=imsi,proto3" json:"imsi,omitempty"`
	// PDU session ID for which the PCF rule is applicable. If this is set to 0, then the rule is applicable for all pdu_session ids.
	PduSessionId uint32 `protobuf:"varint,2,opt,name=pdu_session_id,json=pduSessionId,proto3" json:"pdu_session_id,omitempty"`
	// SmPolicyDecision in json string as defined in TS29512_Npcf_SMPpolicyControl.yaml
	PolicyDecisionJson string `protobuf:"bytes,3,opt,name=policy_decision_json,json=policyDecisionJson,proto3" json:"policy_decision_json,omitempty"`
}

func (x *PolicyDecision) Reset() {
	*x = PolicyDecision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyDecision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyDecision) ProtoMessage() {}

func (x *PolicyDecision) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyDecision.ProtoReflect.Descriptor instead.
func (*PolicyDecision) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{40}
}

func (x *PolicyDecision) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *PolicyDecision) GetPduSessionId() uint32 {
	if x != nil {
		return x.PduSessionId
	}
	return 0
}

func (x *PolicyDecision) GetPolicyDecisionJson() string {
	if x != nil {
		return x.PolicyDecisionJson
	}
	return ""
}

type UpdateNotificationAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HTTP status code received from SMF
	StatusCode uint32 `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	// Partial success report received from SMF in case of error when installing the rules
	PartialSuccessReportJson string `protobuf:"bytes,2,opt,name=partial_success_report_json,json=partialSuccessReportJson,proto3" json:"partial_success_report_json,omitempty"`
}

func (x *UpdateNotificationAnswer) Reset() {
	*x = UpdateNotificationAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNotificationAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNotificationAnswer) ProtoMessage() {}

func (x *UpdateNotificationAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNotificationAnswer.ProtoReflect.Descriptor instead.
func (*UpdateNotificationAnswer) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{41}
}

func (x *UpdateNotificationAnswer) GetStatusCode() uint32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *UpdateNotificationAnswer) GetPartialSuccessReportJson() string {
	if x != nil {
		return x.PartialSuccessReportJson
	}
	return ""
}

// Notification that will be sent to SMF for a PCF intitiated termination
type TerminateNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subscriber ID for which the terminate is to be sent
	Imsi string `protobuf:"bytes,1,opt,name=imsi,proto3" json:"imsi,omitempty"`
	// PDU session for which terminate is to be sent. If this is 0, Terminate is sent to all pdu sessions of this subscriber
	PduSessionId uint32 `protobuf:"varint,2,opt,name=pdu_session_id,json=pduSessionId,proto3" json:"pdu_session_id,omitempty"`
	// Release cause for Terminate as defined TS29507_Npcf_AMPolicyControl.yaml:PolicyAssociationReleaseCause
	ReleaseCause string `protobuf:"bytes,4,opt,name=release_cause,json=releaseCause,proto3" json:"release_cause,omitempty"`
}

func (x *TerminateNotification) Reset() {
	*x = TerminateNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminateNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateNotification) ProtoMessage() {}

func (x *TerminateNotification) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateNotification.ProtoReflect.Descriptor instead.
func (*TerminateNotification) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{42}
}

func (x *TerminateNotification) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *TerminateNotification) GetPduSessionId() uint32 {
	if x != nil {
		return x.PduSessionId
	}
	return 0
}

func (x *TerminateNotification) GetReleaseCause() string {
	if x != nil {
		return x.ReleaseCause
	}
	return ""
}

type TerminateNotificationAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HTTP status code received from SMF
	StatusCode uint32 `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
}

func (x *TerminateNotificationAnswer) Reset() {
	*x = TerminateNotificationAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminateNotificationAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateNotificationAnswer) ProtoMessage() {}

func (x *TerminateNotificationAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateNotificationAnswer.ProtoReflect.Descriptor instead.
func (*TerminateNotificationAnswer) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{43}
}

func (x *TerminateNotificationAnswer) GetStatusCode() uint32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

type N7Expectations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expectations              []*N7Expectation          `protobuf:"bytes,1,rep,name=expectations,proto3" json:"expectations,omitempty"`
	UnexpectedRequestBehavior UnexpectedRequestBehavior `protobuf:"varint,2,opt,name=unexpected_request_behavior,json=unexpectedRequestBehavior,proto3,enum=magma.feg.UnexpectedRequestBehavior" json:"unexpected_request_behavior,omitempty"`
	DefaultAnswer             string                    `protobuf:"bytes,3,opt,name=default_answer,json=defaultAnswer,proto3" json:"default_answer,omitempty"`
}

func (x *N7Expectations) Reset() {
	*x = N7Expectations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *N7Expectations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*N7Expectations) ProtoMessage() {}

func (x *N7Expectations) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use N7Expectations.ProtoReflect.Descriptor instead.
func (*N7Expectations) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{44}
}

func (x *N7Expectations) GetExpectations() []*N7Expectation {
	if x != nil {
		return x.Expectations
	}
	return nil
}

func (x *N7Expectations) GetUnexpectedRequestBehavior() UnexpectedRequestBehavior {
	if x != nil {
		return x.UnexpectedRequestBehavior
	}
	return UnexpectedRequestBehavior_CONTINUE_WITH_ERROR
}

func (x *N7Expectations) GetDefaultAnswer() string {
	if x != nil {
		return x.DefaultAnswer
	}
	return ""
}

type N7Expectation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestType     N7Expectation_RequestType `protobuf:"varint,1,opt,name=request_type,json=requestType,proto3,enum=magma.feg.N7Expectation_RequestType" json:"request_type,omitempty"`
	ExpectedRequest string                    `protobuf:"bytes,2,opt,name=expected_request,json=expectedRequest,proto3" json:"expected_request,omitempty"`
	Answer          string                    `protobuf:"bytes,3,opt,name=answer,proto3" json:"answer,omitempty"`
}

func (x *N7Expectation) Reset() {
	*x = N7Expectation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *N7Expectation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*N7Expectation) ProtoMessage() {}

func (x *N7Expectation) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use N7Expectation.ProtoReflect.Descriptor instead.
func (*N7Expectation) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{45}
}

func (x *N7Expectation) GetRequestType() N7Expectation_RequestType {
	if x != nil {
		return x.RequestType
	}
	return N7Expectation_CREATE
}

func (x *N7Expectation) GetExpectedRequest() string {
	if x != nil {
		return x.ExpectedRequest
	}
	return ""
}

func (x *N7Expectation) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

type N7ExpectationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ExpectationResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Errors  []*ErrorByIndex      `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *N7ExpectationResult) Reset() {
	*x = N7ExpectationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mock_core_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *N7ExpectationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*N7ExpectationResult) ProtoMessage() {}

func (x *N7ExpectationResult) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mock_core_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use N7ExpectationResult.ProtoReflect.Descriptor instead.
func (*N7ExpectationResult) Descriptor() ([]byte, []int) {
	return file_feg_protos_mock_core_proto_rawDescGZIP(), []int{46}
}

func (x *N7ExpectationResult) GetResults() []*ExpectationResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *N7ExpectationResult) GetErrors() []*ErrorByIndex {
	if x != nil {
		return x.Errors
	}
	return nil
}

var File_feg_protos_mock_core_proto protoreflect.FileDescriptor

var file_feg_protos_mock_core_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x66, 0x65, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x6f, 0x63,
	0x6b, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x1a, 0x19, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x15, 0x66, 0x65, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63,
	0x73, 0x66, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6c, 0x74, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x64, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x6c, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x64, 0x62, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x98, 0x0b, 0x0a, 0x05, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x48, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x3e, 0x0a, 0x0d, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x11, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66,
	0x65, 0x67, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x10, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x55,
	0x6e, 0x69, 0x74, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x65, 0x70, 0x73, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x45, 0x50, 0x53, 0x44,
	0x65, 0x74, 0x61, 0x63, 0x68, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x70, 0x73, 0x44,
	0x65, 0x74, 0x61, 0x63, 0x68, 0x41, 0x63, 0x6b, 0x12, 0x42, 0x0a, 0x0f, 0x69, 0x6d, 0x73, 0x69,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x49, 0x4d,
	0x53, 0x49, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0d, 0x69,
	0x6d, 0x73, 0x69, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x41, 0x63, 0x6b, 0x12, 0x57, 0x0a, 0x16,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52,
	0x14, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x57, 0x0a, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65,
	0x67, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x57,
	0x0a, 0x16, 0x6d, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x4d, 0x4d, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x14, 0x6d, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x54, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x62, 0x6f, 0x72,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f,
	0x61, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x63, 0x6b, 0x48, 0x00,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x74, 0x41, 0x63, 0x6b, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67,
	0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x5a, 0x0a, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x01, 0x52, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x17,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x01, 0x52, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x1a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x01, 0x52, 0x18, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x0a,
	0x0e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12,
	0x13, 0x0a, 0x0f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54,
	0x4c, 0x59, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4c, 0x41,
	0x54, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59,
	0x10, 0x02, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x67, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x67, 0x78, 0x67, 0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xb7, 0x0a, 0x0a, 0x0f, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x61,
	0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x66, 0x65, 0x67, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52,
	0x08, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x41, 0x63, 0x6b, 0x12, 0x3b, 0x0a, 0x0c, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x54, 0x0a, 0x15, 0x65, 0x70, 0x73, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65,
	0x67, 0x2e, 0x45, 0x50, 0x53, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x65, 0x70, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x63, 0x68, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x16,
	0x69, 0x6d, 0x73, 0x69, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x49, 0x4d, 0x53, 0x49, 0x44, 0x65, 0x74,
	0x61, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x14, 0x69, 0x6d, 0x73, 0x69, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66,
	0x65, 0x67, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x15, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x66, 0x65, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x44, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x1a, 0x74, 0x6d, 0x73, 0x69, 0x5f,
	0x72, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x54, 0x4d, 0x53, 0x49, 0x52, 0x65, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x18, 0x74, 0x6d, 0x73, 0x69, 0x52, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x57, 0x0a, 0x16,
	0x75, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x55, 0x45, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x14, 0x75, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0e, 0x75, 0x65, 0x5f, 0x75, 0x6e, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x55, 0x45, 0x55, 0x6e, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x75, 0x65, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x75, 0x70, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x55, 0x70,
	0x6c, 0x69, 0x6e, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0e,
	0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x74, 0x41,
	0x63, 0x6b, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x57, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x01, 0x52, 0x14, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x57, 0x0a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x01, 0x52, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x19, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x01, 0x52, 0x17, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x0d, 0x0a, 0x0b,
	0x73, 0x67, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x67,
	0x78, 0x67, 0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6c, 0x0a, 0x0c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x53, 0x0a, 0x13, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3c, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x66, 0x65, 0x67, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x46,
	0x0a, 0x0e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x34, 0x0a, 0x15, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42,
	0x0a, 0x0f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x66, 0x65, 0x67, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x0e, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x46, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x55,
	0x6e, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x55, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x22, 0x89, 0x03, 0x0a, 0x09, 0x4f, 0x43, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x3b, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x63, 0x74,
	0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x0e, 0x6d, 0x61,
	0x78, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e,
	0x6d, 0x61, 0x78, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x6d,
	0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x75, 0x73, 0x65, 0x4d, 0x6f, 0x63, 0x6b, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12,
	0x52, 0x0a, 0x15, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x14, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x4f, 0x43,
	0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x12, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x22, 0x26, 0x0a, 0x09, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x6e, 0x6c, 0x79, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x78, 0x4f, 0x6e, 0x6c, 0x79, 0x10, 0x01, 0x22, 0xcc, 0x01,
	0x0a, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x6d, 0x73, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67,
	0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e,
	0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x1f, 0x0a, 0x08, 0x55,
	0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x01, 0x22, 0xc7, 0x01, 0x0a,
	0x0b, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x5b, 0x0a, 0x11,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x66, 0x65, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x2e,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x5b, 0x0a, 0x16, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67,
	0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4d, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x41, 0x75, 0x74, 0x68, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d,
	0x73, 0x69, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x56, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x41, 0x75, 0x74, 0x68, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x35, 0x0a,
	0x0b, 0x50, 0x43, 0x52, 0x46, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x75, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x4d, 0x6f, 0x63, 0x6b, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x22, 0xd8, 0x01, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x75, 0x6c,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x18, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xd4, 0x02, 0x0a, 0x0e, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x51, 0x0a, 0x14, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0f, 0x71, 0x6f, 0x73,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x51, 0x6f, 0x73, 0x52, 0x0e, 0x71, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7c, 0x0a, 0x19, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x12, 0x4b, 0x0a, 0x15, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66,
	0x65, 0x67, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52,
	0x13, 0x75, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x0c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x5e, 0x0a, 0x18, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x66, 0x65, 0x67, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x71,
	0x75, 0x6f, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x22, 0xdb, 0x02, 0x0a, 0x1b, 0x47, 0x78,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x45, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49, 0x0a, 0x0c, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x47, 0x78, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x64, 0x0a, 0x1b, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52,
	0x19, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x0e, 0x67, 0x78,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x63, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x47,
	0x78, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x52, 0x0c, 0x67, 0x78, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43,
	0x63, 0x61, 0x12, 0x43, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x4f, 0x63, 0x74,
	0x65, 0x74, 0x73, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x15, 0x47, 0x78, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x45,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x3a, 0x0a, 0x0c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x42, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x69, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x22, 0xa4, 0x01, 0x0a, 0x1a, 0x47, 0x78, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4c, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x47, 0x78, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x47, 0x78, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0xfe, 0x02, 0x0a, 0x16, 0x47, 0x78, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x12, 0x3b, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x43, 0x43, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x5f, 0x0a, 0x18, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x16, 0x75, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x75, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x22, 0x81, 0x03, 0x0a, 0x15, 0x47, 0x78,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x5b, 0x0a, 0x16, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67,
	0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x66, 0x65, 0x67, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x73, 0x52, 0x0c, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x12,
	0x3c, 0x0a, 0x0d, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66,
	0x65, 0x67, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x73, 0x52,
	0x0c, 0x72, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x72, 0x65, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x72, 0x65, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x96, 0x02,
	0x0a, 0x1b, 0x47, 0x79, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49, 0x0a,
	0x0c, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e,
	0x47, 0x79, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x45,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x64, 0x0a, 0x1b, 0x75, 0x6e, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x52, 0x19, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x46,
	0x0a, 0x0e, 0x67, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x63, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66,
	0x65, 0x67, 0x2e, 0x47, 0x79, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x0c, 0x67, 0x79, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x43, 0x63, 0x61, 0x22, 0x80, 0x01, 0x0a, 0x15, 0x47, 0x79, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x45, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x66, 0x65, 0x67, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x79, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x1a, 0x47, 0x79,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x45, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x47,
	0x79, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66,
	0x65, 0x67, 0x2e, 0x47, 0x79, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x22, 0xc8, 0x02, 0x0a, 0x16, 0x47, 0x79, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x6d, 0x73, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x12,
	0x3b, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65,
	0x67, 0x2e, 0x43, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x2d, 0x0a, 0x08, 0x71, 0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x51,
	0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x71, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x3c, 0x0a, 0x04, 0x6d, 0x73, 0x63, 0x63, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x04, 0x6d, 0x73, 0x63, 0x63, 0x12, 0x2c, 0x0a,
	0x12, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x22, 0xf9, 0x01, 0x0a, 0x15,
	0x47, 0x79, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x43, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x6b,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x22, 0xb6, 0x02, 0x0a, 0x0a, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x43, 0x0a, 0x14, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x66, 0x65, 0x67, 0x2e, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x12, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69,
	0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x52, 0x0a, 0x15,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69,
	0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xb5, 0x01, 0x0a, 0x1a, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x0a, 0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x45, 0x0a, 0x10, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0f, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x29, 0x0a,
	0x06, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73,
	0x52, 0x06, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x1d, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3d, 0x0a,
	0x11, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x66, 0x65, 0x67, 0x2e, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x52, 0x0f, 0x75, 0x73, 0x65,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x73, 0x0a,
	0x07, 0x51, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x17, 0x61, 0x70, 0x6e, 0x5f,
	0x61, 0x67, 0x67, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x61, 0x70, 0x6e, 0x41, 0x67,
	0x67, 0x4d, 0x61, 0x78, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x55, 0x6c, 0x12, 0x33, 0x0a,
	0x17, 0x61, 0x70, 0x6e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x69, 0x74,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x61, 0x70, 0x6e, 0x41, 0x67, 0x67, 0x4d, 0x61, 0x78, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x44, 0x6c, 0x22, 0xa9, 0x02, 0x0a, 0x0c, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x75, 0x6c,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x72, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x43, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x64, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x55,
	0x0a, 0x0c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x75, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x73, 0x0a, 0x06, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x63, 0x74, 0x65,
	0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4f,
	0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x22, 0x89, 0x02, 0x0a, 0x12, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x41, 0x75, 0x74, 0x68, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x6d, 0x73, 0x69, 0x12, 0x3f, 0x0a, 0x0f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x73, 0x52, 0x0d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x41, 0x0a, 0x10, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f,
	0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x52, 0x75, 0x6c,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x0e, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x54, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x5b, 0x0a, 0x16, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x14, 0x75, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x12, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x41, 0x75, 0x74, 0x68, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x51, 0x0a,
	0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x41, 0x75, 0x74, 0x68, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x1a, 0x3e, 0x0a, 0x10, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x29, 0x0a, 0x13, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x22, 0x79, 0x0a, 0x12, 0x41,
	0x62, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x34, 0x0a, 0x0a, 0x50, 0x43, 0x46, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x63, 0x6b,
	0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75,
	0x73, 0x65, 0x4d, 0x6f, 0x63, 0x6b, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x22, 0x7c, 0x0a, 0x0e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d,
	0x73, 0x69, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x64, 0x75, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6a, 0x73, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x7a, 0x0a, 0x18, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x76, 0x0a, 0x15, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x6d, 0x73, 0x69, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x64, 0x75,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x61, 0x75, 0x73, 0x65, 0x22, 0x3e,
	0x0a, 0x1b, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xdb,
	0x01, 0x0a, 0x0e, 0x4e, 0x37, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x66, 0x65, 0x67, 0x2e, 0x4e, 0x37, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x64, 0x0a, 0x1b, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67,
	0x2e, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x19, 0x75, 0x6e, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0xd1, 0x01, 0x0a,
	0x0d, 0x4e, 0x37, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47,
	0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67,
	0x2e, 0x4e, 0x37, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x34, 0x0a, 0x0b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x10, 0x02,
	0x22, 0x7e, 0x0a, 0x13, 0x4e, 0x37, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x66, 0x65, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x2f, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x42, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x2a, 0x3c, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x10, 0x02, 0x2a, 0x32,
	0x0a, 0x0f, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x75, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x10, 0x01, 0x2a, 0x47, 0x0a, 0x0d, 0x43, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x45,
	0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a, 0x56, 0x0a, 0x19, 0x55,
	0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x54,
	0x49, 0x4e, 0x55, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x00, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45,
	0x52, 0x10, 0x01, 0x2a, 0x66, 0x0a, 0x0e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x75, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x6e, 0x73,
	0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x6e,
	0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x10, 0x02, 0x32, 0x8c, 0x01, 0x0a, 0x14,
	0x4d, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63,
	0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x05, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72,
	0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72,
	0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x32, 0xf7, 0x04, 0x0a, 0x07, 0x4d,
	0x6f, 0x63, 0x6b, 0x4f, 0x43, 0x53, 0x12, 0x3b, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x4f, 0x43, 0x53,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x14, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x66, 0x65, 0x67, 0x2e, 0x4f, 0x43, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x11,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69,
	0x64, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x12, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x49, 0x44, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f,
	0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x10, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f,
	0x69, 0x64, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72,
	0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x06, 0x52, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x12, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x41, 0x75, 0x74, 0x68, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x41, 0x75, 0x74, 0x68, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x73, 0x12, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0c, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66,
	0x65, 0x67, 0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66,
	0x65, 0x67, 0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x45, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x47, 0x79, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72,
	0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x65, 0x72,
	0x74, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x11, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64,
	0x1a, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x47, 0x79, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x32, 0x85, 0x05, 0x0a, 0x08, 0x4d, 0x6f, 0x63, 0x6b, 0x50, 0x43, 0x52,
	0x46, 0x12, 0x3d, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x50, 0x43, 0x52, 0x46, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x12, 0x16, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e,
	0x50, 0x43, 0x52, 0x46, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x1a, 0x11, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00,
	0x12, 0x3d, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x44, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12,
	0x38, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x17, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63,
	0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x10, 0x53, 0x65, 0x74,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x24, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38,
	0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x10, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x12, 0x11, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a,
	0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f,
	0x69, 0x64, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x06, 0x52, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1d,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x41, 0x75, 0x74, 0x68, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0x1d, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x41, 0x75, 0x74, 0x68, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x00, 0x12, 0x4f,
	0x0a, 0x0c, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x00, 0x12,
	0x4e, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x26, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x47,
	0x78, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x45, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12,
	0x4b, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72,
	0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x66, 0x65, 0x67, 0x2e, 0x47, 0x78, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x32, 0xcd, 0x04, 0x0a,
	0x07, 0x4d, 0x6f, 0x63, 0x6b, 0x50, 0x43, 0x46, 0x12, 0x3b, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x50,
	0x43, 0x46, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x50, 0x43, 0x46, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56,
	0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x44, 0x1a,
	0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f,
	0x69, 0x64, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x66, 0x65, 0x67, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72,
	0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x10, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x12, 0x11, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x11,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69,
	0x64, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x14, 0x53, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x19, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x23, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66,
	0x65, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x00, 0x12, 0x5f, 0x0a,
	0x11, 0x53, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x12, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x26, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67,
	0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x00, 0x12, 0x41,
	0x0a, 0x0f, 0x53, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x4e, 0x37,
	0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x11, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22,
	0x00, 0x12, 0x49, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x45, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x1e, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x4e, 0x37, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x42, 0x1b, 0x5a, 0x19,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f, 0x66, 0x65, 0x67, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_feg_protos_mock_core_proto_rawDescOnce sync.Once
	file_feg_protos_mock_core_proto_rawDescData = file_feg_protos_mock_core_proto_rawDesc
)

func file_feg_protos_mock_core_proto_rawDescGZIP() []byte {
	file_feg_protos_mock_core_proto_rawDescOnce.Do(func() {
		file_feg_protos_mock_core_proto_rawDescData = protoimpl.X.CompressGZIP(file_feg_protos_mock_core_proto_rawDescData)
	})
	return file_feg_protos_mock_core_proto_rawDescData
}

var file_feg_protos_mock_core_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_feg_protos_mock_core_proto_msgTypes = make([]protoimpl.MessageInfo, 49)
var file_feg_protos_mock_core_proto_goTypes = []interface{}{
	(FinalUnitAction)(0),                    // 0: magma.feg.FinalUnitAction
	(MonitoringLevel)(0),                    // 1: magma.feg.MonitoringLevel
	(CCRequestType)(0),                      // 2: magma.feg.CCRequestType
	(UnexpectedRequestBehavior)(0),          // 3: magma.feg.UnexpectedRequestBehavior
	(AbortCauseType)(0),                     // 4: magma.feg.AbortCauseType
	(Reply_ServerBehavior)(0),               // 5: magma.feg.Reply.ServerBehavior
	(OCSConfig_GrantType)(0),                // 6: magma.feg.OCSConfig.GrantType
	(CreditInfo_UnitType)(0),                // 7: magma.feg.CreditInfo.UnitType
	(N7Expectation_RequestType)(0),          // 8: magma.feg.N7Expectation.RequestType
	(*Reply)(nil),                           // 9: magma.feg.Reply
	(*ExpectedRequest)(nil),                 // 10: magma.feg.ExpectedRequest
	(*RequestReply)(nil),                    // 11: magma.feg.RequestReply
	(*ServerConfiguration)(nil),             // 12: magma.feg.ServerConfiguration
	(*RedirectServer)(nil),                  // 13: magma.feg.RedirectServer
	(*FinalUnitIndication)(nil),             // 14: magma.feg.FinalUnitIndication
	(*OCSConfig)(nil),                       // 15: magma.feg.OCSConfig
	(*CreditInfo)(nil),                      // 16: magma.feg.CreditInfo
	(*CreditInfos)(nil),                     // 17: magma.feg.CreditInfos
	(*ChargingReAuthTarget)(nil),            // 18: magma.feg.ChargingReAuthTarget
	(*ChargingReAuthAnswer)(nil),            // 19: magma.feg.ChargingReAuthAnswer
	(*PCRFConfigs)(nil),                     // 20: magma.feg.PCRFConfigs
	(*AccountRules)(nil),                    // 21: magma.feg.AccountRules
	(*RuleDefinition)(nil),                  // 22: magma.feg.RuleDefinition
	(*UsageMonitorConfiguration)(nil),       // 23: magma.feg.UsageMonitorConfiguration
	(*UsageMonitor)(nil),                    // 24: magma.feg.UsageMonitor
	(*GxCreditControlExpectations)(nil),     // 25: magma.feg.GxCreditControlExpectations
	(*GxCreditControlResult)(nil),           // 26: magma.feg.GxCreditControlResult
	(*ErrorByIndex)(nil),                    // 27: magma.feg.ErrorByIndex
	(*ExpectationResult)(nil),               // 28: magma.feg.ExpectationResult
	(*GxCreditControlExpectation)(nil),      // 29: magma.feg.GxCreditControlExpectation
	(*GxCreditControlRequest)(nil),          // 30: magma.feg.GxCreditControlRequest
	(*GxCreditControlAnswer)(nil),           // 31: magma.feg.GxCreditControlAnswer
	(*GyCreditControlExpectations)(nil),     // 32: magma.feg.GyCreditControlExpectations
	(*GyCreditControlResult)(nil),           // 33: magma.feg.GyCreditControlResult
	(*GyCreditControlExpectation)(nil),      // 34: magma.feg.GyCreditControlExpectation
	(*GyCreditControlRequest)(nil),          // 35: magma.feg.GyCreditControlRequest
	(*GyCreditControlAnswer)(nil),           // 36: magma.feg.GyCreditControlAnswer
	(*QuotaGrant)(nil),                      // 37: magma.feg.QuotaGrant
	(*UsageMonitoringInformation)(nil),      // 38: magma.feg.UsageMonitoringInformation
	(*MultipleServicesCreditControl)(nil),   // 39: magma.feg.MultipleServicesCreditControl
	(*QosInfo)(nil),                         // 40: magma.feg.QosInfo
	(*RuleInstalls)(nil),                    // 41: magma.feg.RuleInstalls
	(*RuleRemovals)(nil),                    // 42: magma.feg.RuleRemovals
	(*Octets)(nil),                          // 43: magma.feg.Octets
	(*PolicyReAuthTarget)(nil),              // 44: magma.feg.PolicyReAuthTarget
	(*PolicyReAuthAnswer)(nil),              // 45: magma.feg.PolicyReAuthAnswer
	(*AbortSessionRequest)(nil),             // 46: magma.feg.AbortSessionRequest
	(*AbortSessionAnswer)(nil),              // 47: magma.feg.AbortSessionAnswer
	(*PCFConfigs)(nil),                      // 48: magma.feg.PCFConfigs
	(*PolicyDecision)(nil),                  // 49: magma.feg.PolicyDecision
	(*UpdateNotificationAnswer)(nil),        // 50: magma.feg.UpdateNotificationAnswer
	(*TerminateNotification)(nil),           // 51: magma.feg.TerminateNotification
	(*TerminateNotificationAnswer)(nil),     // 52: magma.feg.TerminateNotificationAnswer
	(*N7Expectations)(nil),                  // 53: magma.feg.N7Expectations
	(*N7Expectation)(nil),                   // 54: magma.feg.N7Expectation
	(*N7ExpectationResult)(nil),             // 55: magma.feg.N7ExpectationResult
	nil,                                     // 56: magma.feg.CreditInfos.CreditInformationEntry
	nil,                                     // 57: magma.feg.PolicyReAuthAnswer.FailedRulesEntry
	(*AlertRequest)(nil),                    // 58: magma.feg.AlertRequest
	(*DownlinkUnitdata)(nil),                // 59: magma.feg.DownlinkUnitdata
	(*EPSDetachAck)(nil),                    // 60: magma.feg.EPSDetachAck
	(*IMSIDetachAck)(nil),                   // 61: magma.feg.IMSIDetachAck
	(*LocationUpdateAccept)(nil),            // 62: magma.feg.LocationUpdateAccept
	(*LocationUpdateReject)(nil),            // 63: magma.feg.LocationUpdateReject
	(*MMInformationRequest)(nil),            // 64: magma.feg.MMInformationRequest
	(*PagingRequest)(nil),                   // 65: magma.feg.PagingRequest
	(*ReleaseRequest)(nil),                  // 66: magma.feg.ReleaseRequest
	(*ServiceAbortRequest)(nil),             // 67: magma.feg.ServiceAbortRequest
	(*ResetAck)(nil),                        // 68: magma.feg.ResetAck
	(*ResetIndication)(nil),                 // 69: magma.feg.ResetIndication
	(*Status)(nil),                          // 70: magma.feg.Status
	(*protos.CreateSessionResponse)(nil),    // 71: magma.lte.CreateSessionResponse
	(*protos.UpdateSessionResponse)(nil),    // 72: magma.lte.UpdateSessionResponse
	(*protos.SessionTerminateResponse)(nil), // 73: magma.lte.SessionTerminateResponse
	(*AlertAck)(nil),                        // 74: magma.feg.AlertAck
	(*AlertReject)(nil),                     // 75: magma.feg.AlertReject
	(*EPSDetachIndication)(nil),             // 76: magma.feg.EPSDetachIndication
	(*IMSIDetachIndication)(nil),            // 77: magma.feg.IMSIDetachIndication
	(*LocationUpdateRequest)(nil),           // 78: magma.feg.LocationUpdateRequest
	(*PagingReject)(nil),                    // 79: magma.feg.PagingReject
	(*ServiceRequest)(nil),                  // 80: magma.feg.ServiceRequest
	(*TMSIReallocationComplete)(nil),        // 81: magma.feg.TMSIReallocationComplete
	(*UEActivityIndication)(nil),            // 82: magma.feg.UEActivityIndication
	(*UEUnreachable)(nil),                   // 83: magma.feg.UEUnreachable
	(*UplinkUnitdata)(nil),                  // 84: magma.feg.UplinkUnitdata
	(*protos.CreateSessionRequest)(nil),     // 85: magma.lte.CreateSessionRequest
	(*protos.UpdateSessionRequest)(nil),     // 86: magma.lte.UpdateSessionRequest
	(*protos.SessionTerminateRequest)(nil),  // 87: magma.lte.SessionTerminateRequest
	(*protos.RedirectInformation)(nil),      // 88: magma.lte.RedirectInformation
	(*protos.FlowQos)(nil),                  // 89: magma.lte.FlowQos
	(*wrappers.Int32Value)(nil),             // 90: google.protobuf.Int32Value
	(*timestamp.Timestamp)(nil),             // 91: google.protobuf.Timestamp
	(*protos1.Void)(nil),                    // 92: magma.orc8r.Void
	(*protos.SubscriberID)(nil),             // 93: magma.lte.SubscriberID
}
var file_feg_protos_mock_core_proto_depIdxs = []int32{
	5,   // 0: magma.feg.Reply.server_behavior:type_name -> magma.feg.Reply.ServerBehavior
	58,  // 1: magma.feg.Reply.alert_request:type_name -> magma.feg.AlertRequest
	59,  // 2: magma.feg.Reply.downlink_unitdata:type_name -> magma.feg.DownlinkUnitdata
	60,  // 3: magma.feg.Reply.eps_detach_ack:type_name -> magma.feg.EPSDetachAck
	61,  // 4: magma.feg.Reply.imsi_detach_ack:type_name -> magma.feg.IMSIDetachAck
	62,  // 5: magma.feg.Reply.location_update_accept:type_name -> magma.feg.LocationUpdateAccept
	63,  // 6: magma.feg.Reply.location_update_reject:type_name -> magma.feg.LocationUpdateReject
	64,  // 7: magma.feg.Reply.mm_information_request:type_name -> magma.feg.MMInformationRequest
	65,  // 8: magma.feg.Reply.paging_request:type_name -> magma.feg.PagingRequest
	66,  // 9: magma.feg.Reply.release_request:type_name -> magma.feg.ReleaseRequest
	67,  // 10: magma.feg.Reply.service_abort_request:type_name -> magma.feg.ServiceAbortRequest
	68,  // 11: magma.feg.Reply.reset_ack:type_name -> magma.feg.ResetAck
	69,  // 12: magma.feg.Reply.reset_indication:type_name -> magma.feg.ResetIndication
	70,  // 13: magma.feg.Reply.status:type_name -> magma.feg.Status
	71,  // 14: magma.feg.Reply.create_session_response:type_name -> magma.lte.CreateSessionResponse
	72,  // 15: magma.feg.Reply.update_session_response:type_name -> magma.lte.UpdateSessionResponse
	73,  // 16: magma.feg.Reply.session_terminate_response:type_name -> magma.lte.SessionTerminateResponse
	74,  // 17: magma.feg.ExpectedRequest.alert_ack:type_name -> magma.feg.AlertAck
	75,  // 18: magma.feg.ExpectedRequest.alert_reject:type_name -> magma.feg.AlertReject
	76,  // 19: magma.feg.ExpectedRequest.eps_detach_indication:type_name -> magma.feg.EPSDetachIndication
	77,  // 20: magma.feg.ExpectedRequest.imsi_detach_indication:type_name -> magma.feg.IMSIDetachIndication
	78,  // 21: magma.feg.ExpectedRequest.location_update_request:type_name -> magma.feg.LocationUpdateRequest
	79,  // 22: magma.feg.ExpectedRequest.paging_reject:type_name -> magma.feg.PagingReject
	80,  // 23: magma.feg.ExpectedRequest.service_request:type_name -> magma.feg.ServiceRequest
	81,  // 24: magma.feg.ExpectedRequest.tmsi_reallocation_complete:type_name -> magma.feg.TMSIReallocationComplete
	82,  // 25: magma.feg.ExpectedRequest.ue_activity_indication:type_name -> magma.feg.UEActivityIndication
	83,  // 26: magma.feg.ExpectedRequest.ue_unreachable:type_name -> magma.feg.UEUnreachable
	84,  // 27: magma.feg.ExpectedRequest.uplink_unitdata:type_name -> magma.feg.UplinkUnitdata
	68,  // 28: magma.feg.ExpectedRequest.reset_ack:type_name -> magma.feg.ResetAck
	69,  // 29: magma.feg.ExpectedRequest.reset_indication:type_name -> magma.feg.ResetIndication
	70,  // 30: magma.feg.ExpectedRequest.status:type_name -> magma.feg.Status
	85,  // 31: magma.feg.ExpectedRequest.create_session_request:type_name -> magma.lte.CreateSessionRequest
	86,  // 32: magma.feg.ExpectedRequest.update_session_request:type_name -> magma.lte.UpdateSessionRequest
	87,  // 33: magma.feg.ExpectedRequest.session_terminate_request:type_name -> magma.lte.SessionTerminateRequest
	10,  // 34: magma.feg.RequestReply.request:type_name -> magma.feg.ExpectedRequest
	9,   // 35: magma.feg.RequestReply.reply:type_name -> magma.feg.Reply
	11,  // 36: magma.feg.ServerConfiguration.request_reply:type_name -> magma.feg.RequestReply
	13,  // 37: magma.feg.FinalUnitIndication.redirect_server:type_name -> magma.feg.RedirectServer
	0,   // 38: magma.feg.FinalUnitIndication.final_unit_action:type_name -> magma.feg.FinalUnitAction
	43,  // 39: magma.feg.OCSConfig.max_usage_octets:type_name -> magma.feg.Octets
	14,  // 40: magma.feg.OCSConfig.final_unit_indication:type_name -> magma.feg.FinalUnitIndication
	6,   // 41: magma.feg.OCSConfig.grant_type_procedure:type_name -> magma.feg.OCSConfig.GrantType
	43,  // 42: magma.feg.CreditInfo.volume:type_name -> magma.feg.Octets
	7,   // 43: magma.feg.CreditInfo.unit_type:type_name -> magma.feg.CreditInfo.UnitType
	56,  // 44: magma.feg.CreditInfos.creditInformation:type_name -> magma.feg.CreditInfos.CreditInformationEntry
	22,  // 45: magma.feg.AccountRules.dynamic_rule_definitions:type_name -> magma.feg.RuleDefinition
	88,  // 46: magma.feg.RuleDefinition.redirect_information:type_name -> magma.lte.RedirectInformation
	89,  // 47: magma.feg.RuleDefinition.qos_information:type_name -> magma.lte.FlowQos
	24,  // 48: magma.feg.UsageMonitorConfiguration.usage_monitor_credits:type_name -> magma.feg.UsageMonitor
	38,  // 49: magma.feg.UsageMonitor.monitor_info_per_request:type_name -> magma.feg.UsageMonitoringInformation
	43,  // 50: magma.feg.UsageMonitor.total_quota:type_name -> magma.feg.Octets
	29,  // 51: magma.feg.GxCreditControlExpectations.expectations:type_name -> magma.feg.GxCreditControlExpectation
	3,   // 52: magma.feg.GxCreditControlExpectations.unexpected_request_behavior:type_name -> magma.feg.UnexpectedRequestBehavior
	31,  // 53: magma.feg.GxCreditControlExpectations.gx_default_cca:type_name -> magma.feg.GxCreditControlAnswer
	43,  // 54: magma.feg.GxCreditControlExpectations.total_expected_usage:type_name -> magma.feg.Octets
	28,  // 55: magma.feg.GxCreditControlResult.results:type_name -> magma.feg.ExpectationResult
	27,  // 56: magma.feg.GxCreditControlResult.errors:type_name -> magma.feg.ErrorByIndex
	30,  // 57: magma.feg.GxCreditControlExpectation.expected_request:type_name -> magma.feg.GxCreditControlRequest
	31,  // 58: magma.feg.GxCreditControlExpectation.answer:type_name -> magma.feg.GxCreditControlAnswer
	2,   // 59: magma.feg.GxCreditControlRequest.request_type:type_name -> magma.feg.CCRequestType
	90,  // 60: magma.feg.GxCreditControlRequest.request_number:type_name -> google.protobuf.Int32Value
	38,  // 61: magma.feg.GxCreditControlRequest.usage_monitoring_reports:type_name -> magma.feg.UsageMonitoringInformation
	90,  // 62: magma.feg.GxCreditControlRequest.event_trigger:type_name -> google.protobuf.Int32Value
	38,  // 63: magma.feg.GxCreditControlAnswer.usage_monitoring_infos:type_name -> magma.feg.UsageMonitoringInformation
	41,  // 64: magma.feg.GxCreditControlAnswer.rule_installs:type_name -> magma.feg.RuleInstalls
	42,  // 65: magma.feg.GxCreditControlAnswer.rule_removals:type_name -> magma.feg.RuleRemovals
	91,  // 66: magma.feg.GxCreditControlAnswer.revalidation_time:type_name -> google.protobuf.Timestamp
	34,  // 67: magma.feg.GyCreditControlExpectations.expectations:type_name -> magma.feg.GyCreditControlExpectation
	3,   // 68: magma.feg.GyCreditControlExpectations.unexpected_request_behavior:type_name -> magma.feg.UnexpectedRequestBehavior
	36,  // 69: magma.feg.GyCreditControlExpectations.gy_default_cca:type_name -> magma.feg.GyCreditControlAnswer
	28,  // 70: magma.feg.GyCreditControlResult.results:type_name -> magma.feg.ExpectationResult
	27,  // 71: magma.feg.GyCreditControlResult.errors:type_name -> magma.feg.ErrorByIndex
	35,  // 72: magma.feg.GyCreditControlExpectation.expected_request:type_name -> magma.feg.GyCreditControlRequest
	36,  // 73: magma.feg.GyCreditControlExpectation.answer:type_name -> magma.feg.GyCreditControlAnswer
	2,   // 74: magma.feg.GyCreditControlRequest.request_type:type_name -> magma.feg.CCRequestType
	90,  // 75: magma.feg.GyCreditControlRequest.request_number:type_name -> google.protobuf.Int32Value
	40,  // 76: magma.feg.GyCreditControlRequest.qos_info:type_name -> magma.feg.QosInfo
	39,  // 77: magma.feg.GyCreditControlRequest.mscc:type_name -> magma.feg.MultipleServicesCreditControl
	2,   // 78: magma.feg.GyCreditControlAnswer.request_type:type_name -> magma.feg.CCRequestType
	37,  // 79: magma.feg.GyCreditControlAnswer.quota_grants:type_name -> magma.feg.QuotaGrant
	43,  // 80: magma.feg.QuotaGrant.granted_service_unit:type_name -> magma.feg.Octets
	14,  // 81: magma.feg.QuotaGrant.final_unit_indication:type_name -> magma.feg.FinalUnitIndication
	1,   // 82: magma.feg.UsageMonitoringInformation.monitoring_level:type_name -> magma.feg.MonitoringLevel
	43,  // 83: magma.feg.UsageMonitoringInformation.octets:type_name -> magma.feg.Octets
	43,  // 84: magma.feg.MultipleServicesCreditControl.used_service_unit:type_name -> magma.feg.Octets
	22,  // 85: magma.feg.RuleInstalls.rule_definitions:type_name -> magma.feg.RuleDefinition
	91,  // 86: magma.feg.RuleInstalls.activation_time:type_name -> google.protobuf.Timestamp
	91,  // 87: magma.feg.RuleInstalls.deactivation_time:type_name -> google.protobuf.Timestamp
	42,  // 88: magma.feg.PolicyReAuthTarget.rules_to_remove:type_name -> magma.feg.RuleRemovals
	41,  // 89: magma.feg.PolicyReAuthTarget.rules_to_install:type_name -> magma.feg.RuleInstalls
	38,  // 90: magma.feg.PolicyReAuthTarget.usage_monitoring_infos:type_name -> magma.feg.UsageMonitoringInformation
	57,  // 91: magma.feg.PolicyReAuthAnswer.failed_rules:type_name -> magma.feg.PolicyReAuthAnswer.FailedRulesEntry
	54,  // 92: magma.feg.N7Expectations.expectations:type_name -> magma.feg.N7Expectation
	3,   // 93: magma.feg.N7Expectations.unexpected_request_behavior:type_name -> magma.feg.UnexpectedRequestBehavior
	8,   // 94: magma.feg.N7Expectation.request_type:type_name -> magma.feg.N7Expectation.RequestType
	28,  // 95: magma.feg.N7ExpectationResult.results:type_name -> magma.feg.ExpectationResult
	27,  // 96: magma.feg.N7ExpectationResult.errors:type_name -> magma.feg.ErrorByIndex
	16,  // 97: magma.feg.CreditInfos.CreditInformationEntry.value:type_name -> magma.feg.CreditInfo
	12,  // 98: magma.feg.MockCoreConfigurator.ConfigServer:input_type -> magma.feg.ServerConfiguration
	92,  // 99: magma.feg.MockCoreConfigurator.Reset:input_type -> magma.orc8r.Void
	15,  // 100: magma.feg.MockOCS.SetOCSSettings:input_type -> magma.feg.OCSConfig
	16,  // 101: magma.feg.MockOCS.SetCredit:input_type -> magma.feg.CreditInfo
	93,  // 102: magma.feg.MockOCS.CreateAccount:input_type -> magma.lte.SubscriberID
	92,  // 103: magma.feg.MockOCS.ClearSubscribers:input_type -> magma.orc8r.Void
	18,  // 104: magma.feg.MockOCS.ReAuth:input_type -> magma.feg.ChargingReAuthTarget
	93,  // 105: magma.feg.MockOCS.GetCredits:input_type -> magma.lte.SubscriberID
	46,  // 106: magma.feg.MockOCS.AbortSession:input_type -> magma.feg.AbortSessionRequest
	32,  // 107: magma.feg.MockOCS.SetExpectations:input_type -> magma.feg.GyCreditControlExpectations
	92,  // 108: magma.feg.MockOCS.AssertExpectations:input_type -> magma.orc8r.Void
	20,  // 109: magma.feg.MockPCRF.SetPCRFConfigs:input_type -> magma.feg.PCRFConfigs
	93,  // 110: magma.feg.MockPCRF.CreateAccount:input_type -> magma.lte.SubscriberID
	21,  // 111: magma.feg.MockPCRF.SetRules:input_type -> magma.feg.AccountRules
	23,  // 112: magma.feg.MockPCRF.SetUsageMonitors:input_type -> magma.feg.UsageMonitorConfiguration
	92,  // 113: magma.feg.MockPCRF.ClearSubscribers:input_type -> magma.orc8r.Void
	44,  // 114: magma.feg.MockPCRF.ReAuth:input_type -> magma.feg.PolicyReAuthTarget
	46,  // 115: magma.feg.MockPCRF.AbortSession:input_type -> magma.feg.AbortSessionRequest
	25,  // 116: magma.feg.MockPCRF.SetExpectations:input_type -> magma.feg.GxCreditControlExpectations
	92,  // 117: magma.feg.MockPCRF.AssertExpectations:input_type -> magma.orc8r.Void
	48,  // 118: magma.feg.MockPCF.SetPCFConfigs:input_type -> magma.feg.PCFConfigs
	93,  // 119: magma.feg.MockPCF.CreateAccount:input_type -> magma.lte.SubscriberID
	49,  // 120: magma.feg.MockPCF.SetAccountRules:input_type -> magma.feg.PolicyDecision
	92,  // 121: magma.feg.MockPCF.ClearSubscribers:input_type -> magma.orc8r.Void
	49,  // 122: magma.feg.MockPCF.SmPolicyUpdateNotify:input_type -> magma.feg.PolicyDecision
	51,  // 123: magma.feg.MockPCF.SmPolicyTerminate:input_type -> magma.feg.TerminateNotification
	53,  // 124: magma.feg.MockPCF.SetExpectations:input_type -> magma.feg.N7Expectations
	92,  // 125: magma.feg.MockPCF.AssertExpectations:input_type -> magma.orc8r.Void
	92,  // 126: magma.feg.MockCoreConfigurator.ConfigServer:output_type -> magma.orc8r.Void
	92,  // 127: magma.feg.MockCoreConfigurator.Reset:output_type -> magma.orc8r.Void
	92,  // 128: magma.feg.MockOCS.SetOCSSettings:output_type -> magma.orc8r.Void
	92,  // 129: magma.feg.MockOCS.SetCredit:output_type -> magma.orc8r.Void
	92,  // 130: magma.feg.MockOCS.CreateAccount:output_type -> magma.orc8r.Void
	92,  // 131: magma.feg.MockOCS.ClearSubscribers:output_type -> magma.orc8r.Void
	19,  // 132: magma.feg.MockOCS.ReAuth:output_type -> magma.feg.ChargingReAuthAnswer
	17,  // 133: magma.feg.MockOCS.GetCredits:output_type -> magma.feg.CreditInfos
	47,  // 134: magma.feg.MockOCS.AbortSession:output_type -> magma.feg.AbortSessionAnswer
	92,  // 135: magma.feg.MockOCS.SetExpectations:output_type -> magma.orc8r.Void
	33,  // 136: magma.feg.MockOCS.AssertExpectations:output_type -> magma.feg.GyCreditControlResult
	92,  // 137: magma.feg.MockPCRF.SetPCRFConfigs:output_type -> magma.orc8r.Void
	92,  // 138: magma.feg.MockPCRF.CreateAccount:output_type -> magma.orc8r.Void
	92,  // 139: magma.feg.MockPCRF.SetRules:output_type -> magma.orc8r.Void
	92,  // 140: magma.feg.MockPCRF.SetUsageMonitors:output_type -> magma.orc8r.Void
	92,  // 141: magma.feg.MockPCRF.ClearSubscribers:output_type -> magma.orc8r.Void
	45,  // 142: magma.feg.MockPCRF.ReAuth:output_type -> magma.feg.PolicyReAuthAnswer
	47,  // 143: magma.feg.MockPCRF.AbortSession:output_type -> magma.feg.AbortSessionAnswer
	92,  // 144: magma.feg.MockPCRF.SetExpectations:output_type -> magma.orc8r.Void
	26,  // 145: magma.feg.MockPCRF.AssertExpectations:output_type -> magma.feg.GxCreditControlResult
	92,  // 146: magma.feg.MockPCF.SetPCFConfigs:output_type -> magma.orc8r.Void
	92,  // 147: magma.feg.MockPCF.CreateAccount:output_type -> magma.orc8r.Void
	92,  // 148: magma.feg.MockPCF.SetAccountRules:output_type -> magma.orc8r.Void
	92,  // 149: magma.feg.MockPCF.ClearSubscribers:output_type -> magma.orc8r.Void
	50,  // 150: magma.feg.MockPCF.SmPolicyUpdateNotify:output_type -> magma.feg.UpdateNotificationAnswer
	52,  // 151: magma.feg.MockPCF.SmPolicyTerminate:output_type -> magma.feg.TerminateNotificationAnswer
	92,  // 152: magma.feg.MockPCF.SetExpectations:output_type -> magma.orc8r.Void
	55,  // 153: magma.feg.MockPCF.AssertExpectations:output_type -> magma.feg.N7ExpectationResult
	126, // [126:154] is the sub-list for method output_type
	98,  // [98:126] is the sub-list for method input_type
	98,  // [98:98] is the sub-list for extension type_name
	98,  // [98:98] is the sub-list for extension extendee
	0,   // [0:98] is the sub-list for field type_name
}

func init() { file_feg_protos_mock_core_proto_init() }
func file_feg_protos_mock_core_proto_init() {
	if File_feg_protos_mock_core_proto != nil {
		return
	}
	file_feg_protos_csfb_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_feg_protos_mock_core_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpectedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedirectServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalUnitIndication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargingReAuthTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargingReAuthAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PCRFConfigs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageMonitorConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageMonitor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GxCreditControlExpectations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GxCreditControlResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorByIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpectationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GxCreditControlExpectation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GxCreditControlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GxCreditControlAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GyCreditControlExpectations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GyCreditControlResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GyCreditControlExpectation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GyCreditControlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GyCreditControlAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotaGrant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageMonitoringInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultipleServicesCreditControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QosInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleInstalls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleRemovals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Octets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyReAuthTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyReAuthAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbortSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbortSessionAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PCFConfigs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyDecision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNotificationAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminateNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminateNotificationAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*N7Expectations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*N7Expectation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mock_core_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*N7ExpectationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_feg_protos_mock_core_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Reply_AlertRequest)(nil),
		(*Reply_DownlinkUnitdata)(nil),
		(*Reply_EpsDetachAck)(nil),
		(*Reply_ImsiDetachAck)(nil),
		(*Reply_LocationUpdateAccept)(nil),
		(*Reply_LocationUpdateReject)(nil),
		(*Reply_MmInformationRequest)(nil),
		(*Reply_PagingRequest)(nil),
		(*Reply_ReleaseRequest)(nil),
		(*Reply_ServiceAbortRequest)(nil),
		(*Reply_ResetAck)(nil),
		(*Reply_ResetIndication)(nil),
		(*Reply_Status)(nil),
		(*Reply_CreateSessionResponse)(nil),
		(*Reply_UpdateSessionResponse)(nil),
		(*Reply_SessionTerminateResponse)(nil),
	}
	file_feg_protos_mock_core_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ExpectedRequest_AlertAck)(nil),
		(*ExpectedRequest_AlertReject)(nil),
		(*ExpectedRequest_EpsDetachIndication)(nil),
		(*ExpectedRequest_ImsiDetachIndication)(nil),
		(*ExpectedRequest_LocationUpdateRequest)(nil),
		(*ExpectedRequest_PagingReject)(nil),
		(*ExpectedRequest_ServiceRequest)(nil),
		(*ExpectedRequest_TmsiReallocationComplete)(nil),
		(*ExpectedRequest_UeActivityIndication)(nil),
		(*ExpectedRequest_UeUnreachable)(nil),
		(*ExpectedRequest_UplinkUnitdata)(nil),
		(*ExpectedRequest_ResetAck)(nil),
		(*ExpectedRequest_ResetIndication)(nil),
		(*ExpectedRequest_Status)(nil),
		(*ExpectedRequest_CreateSessionRequest)(nil),
		(*ExpectedRequest_UpdateSessionRequest)(nil),
		(*ExpectedRequest_SessionTerminateRequest)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_feg_protos_mock_core_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   49,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_feg_protos_mock_core_proto_goTypes,
		DependencyIndexes: file_feg_protos_mock_core_proto_depIdxs,
		EnumInfos:         file_feg_protos_mock_core_proto_enumTypes,
		MessageInfos:      file_feg_protos_mock_core_proto_msgTypes,
	}.Build()
	File_feg_protos_mock_core_proto = out.File
	file_feg_protos_mock_core_proto_rawDesc = nil
	file_feg_protos_mock_core_proto_goTypes = nil
	file_feg_protos_mock_core_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MockCoreConfiguratorClient is the client API for MockCoreConfigurator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MockCoreConfiguratorClient interface {
	ConfigServer(ctx context.Context, in *ServerConfiguration, opts ...grpc.CallOption) (*protos1.Void, error)
	Reset(ctx context.Context, in *protos1.Void, opts ...grpc.CallOption) (*protos1.Void, error)
}

type mockCoreConfiguratorClient struct {
	cc grpc.ClientConnInterface
}

func NewMockCoreConfiguratorClient(cc grpc.ClientConnInterface) MockCoreConfiguratorClient {
	return &mockCoreConfiguratorClient{cc}
}

func (c *mockCoreConfiguratorClient) ConfigServer(ctx context.Context, in *ServerConfiguration, opts ...grpc.CallOption) (*protos1.Void, error) {
	out := new(protos1.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.MockCoreConfigurator/ConfigServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockCoreConfiguratorClient) Reset(ctx context.Context, in *protos1.Void, opts ...grpc.CallOption) (*protos1.Void, error) {
	out := new(protos1.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.MockCoreConfigurator/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MockCoreConfiguratorServer is the server API for MockCoreConfigurator service.
type MockCoreConfiguratorServer interface {
	ConfigServer(context.Context, *ServerConfiguration) (*protos1.Void, error)
	Reset(context.Context, *protos1.Void) (*protos1.Void, error)
}

// UnimplementedMockCoreConfiguratorServer can be embedded to have forward compatible implementations.
type UnimplementedMockCoreConfiguratorServer struct {
}

func (*UnimplementedMockCoreConfiguratorServer) ConfigServer(context.Context, *ServerConfiguration) (*protos1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigServer not implemented")
}
func (*UnimplementedMockCoreConfiguratorServer) Reset(context.Context, *protos1.Void) (*protos1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}

func RegisterMockCoreConfiguratorServer(s *grpc.Server, srv MockCoreConfiguratorServer) {
	s.RegisterService(&_MockCoreConfigurator_serviceDesc, srv)
}

func _MockCoreConfigurator_ConfigServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockCoreConfiguratorServer).ConfigServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.MockCoreConfigurator/ConfigServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockCoreConfiguratorServer).ConfigServer(ctx, req.(*ServerConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockCoreConfigurator_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos1.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockCoreConfiguratorServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.MockCoreConfigurator/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockCoreConfiguratorServer).Reset(ctx, req.(*protos1.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _MockCoreConfigurator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.feg.MockCoreConfigurator",
	HandlerType: (*MockCoreConfiguratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigServer",
			Handler:    _MockCoreConfigurator_ConfigServer_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _MockCoreConfigurator_Reset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feg/protos/mock_core.proto",
}

// MockOCSClient is the client API for MockOCS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MockOCSClient interface {
	SetOCSSettings(ctx context.Context, in *OCSConfig, opts ...grpc.CallOption) (*protos1.Void, error)
	SetCredit(ctx context.Context, in *CreditInfo, opts ...grpc.CallOption) (*protos1.Void, error)
	CreateAccount(ctx context.Context, in *protos.SubscriberID, opts ...grpc.CallOption) (*protos1.Void, error)
	ClearSubscribers(ctx context.Context, in *protos1.Void, opts ...grpc.CallOption) (*protos1.Void, error)
	ReAuth(ctx context.Context, in *ChargingReAuthTarget, opts ...grpc.CallOption) (*ChargingReAuthAnswer, error)
	GetCredits(ctx context.Context, in *protos.SubscriberID, opts ...grpc.CallOption) (*CreditInfos, error)
	AbortSession(ctx context.Context, in *AbortSessionRequest, opts ...grpc.CallOption) (*AbortSessionAnswer, error)
	// Todo
	SetExpectations(ctx context.Context, in *GyCreditControlExpectations, opts ...grpc.CallOption) (*protos1.Void, error)
	AssertExpectations(ctx context.Context, in *protos1.Void, opts ...grpc.CallOption) (*GyCreditControlResult, error)
}

type mockOCSClient struct {
	cc grpc.ClientConnInterface
}

func NewMockOCSClient(cc grpc.ClientConnInterface) MockOCSClient {
	return &mockOCSClient{cc}
}

func (c *mockOCSClient) SetOCSSettings(ctx context.Context, in *OCSConfig, opts ...grpc.CallOption) (*protos1.Void, error) {
	out := new(protos1.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.MockOCS/SetOCSSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockOCSClient) SetCredit(ctx context.Context, in *CreditInfo, opts ...grpc.CallOption) (*protos1.Void, error) {
	out := new(protos1.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.MockOCS/SetCredit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockOCSClient) CreateAccount(ctx context.Context, in *protos.SubscriberID, opts ...grpc.CallOption) (*protos1.Void, error) {
	out := new(protos1.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.MockOCS/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockOCSClient) ClearSubscribers(ctx context.Context, in *protos1.Void, opts ...grpc.CallOption) (*protos1.Void, error) {
	out := new(protos1.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.MockOCS/ClearSubscribers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockOCSClient) ReAuth(ctx context.Context, in *ChargingReAuthTarget, opts ...grpc.CallOption) (*ChargingReAuthAnswer, error) {
	out := new(ChargingReAuthAnswer)
	err := c.cc.Invoke(ctx, "/magma.feg.MockOCS/ReAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockOCSClient) GetCredits(ctx context.Context, in *protos.SubscriberID, opts ...grpc.CallOption) (*CreditInfos, error) {
	out := new(CreditInfos)
	err := c.cc.Invoke(ctx, "/magma.feg.MockOCS/GetCredits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockOCSClient) AbortSession(ctx context.Context, in *AbortSessionRequest, opts ...grpc.CallOption) (*AbortSessionAnswer, error) {
	out := new(AbortSessionAnswer)
	err := c.cc.Invoke(ctx, "/magma.feg.MockOCS/AbortSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockOCSClient) SetExpectations(ctx context.Context, in *GyCreditControlExpectations, opts ...grpc.CallOption) (*protos1.Void, error) {
	out := new(protos1.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.MockOCS/SetExpectations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockOCSClient) AssertExpectations(ctx context.Context, in *protos1.Void, opts ...grpc.CallOption) (*GyCreditControlResult, error) {
	out := new(GyCreditControlResult)
	err := c.cc.Invoke(ctx, "/magma.feg.MockOCS/AssertExpectations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MockOCSServer is the server API for MockOCS service.
type MockOCSServer interface {
	SetOCSSettings(context.Context, *OCSConfig) (*protos1.Void, error)
	SetCredit(context.Context, *CreditInfo) (*protos1.Void, error)
	CreateAccount(context.Context, *protos.SubscriberID) (*protos1.Void, error)
	ClearSubscribers(context.Context, *protos1.Void) (*protos1.Void, error)
	ReAuth(context.Context, *ChargingReAuthTarget) (*ChargingReAuthAnswer, error)
	GetCredits(context.Context, *protos.SubscriberID) (*CreditInfos, error)
	AbortSession(context.Context, *AbortSessionRequest) (*AbortSessionAnswer, error)
	// Todo
	SetExpectations(context.Context, *GyCreditControlExpectations) (*protos1.Void, error)
	AssertExpectations(context.Context, *protos1.Void) (*GyCreditControlResult, error)
}

// UnimplementedMockOCSServer can be embedded to have forward compatible implementations.
type UnimplementedMockOCSServer struct {
}

func (*UnimplementedMockOCSServer) SetOCSSettings(context.Context, *OCSConfig) (*protos1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOCSSettings not implemented")
}
func (*UnimplementedMockOCSServer) SetCredit(context.Context, *CreditInfo) (*protos1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCredit not implemented")
}
func (*UnimplementedMockOCSServer) CreateAccount(context.Context, *protos.SubscriberID) (*protos1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (*UnimplementedMockOCSServer) ClearSubscribers(context.Context, *protos1.Void) (*protos1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearSubscribers not implemented")
}
func (*UnimplementedMockOCSServer) ReAuth(context.Context, *ChargingReAuthTarget) (*ChargingReAuthAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReAuth not implemented")
}
func (*UnimplementedMockOCSServer) GetCredits(context.Context, *protos.SubscriberID) (*CreditInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredits not implemented")
}
func (*UnimplementedMockOCSServer) AbortSession(context.Context, *AbortSessionRequest) (*AbortSessionAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortSession not implemented")
}
func (*UnimplementedMockOCSServer) SetExpectations(context.Context, *GyCreditControlExpectations) (*protos1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetExpectations not implemented")
}
func (*UnimplementedMockOCSServer) AssertExpectations(context.Context, *protos1.Void) (*GyCreditControlResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssertExpectations not implemented")
}

func RegisterMockOCSServer(s *grpc.Server, srv MockOCSServer) {
	s.RegisterService(&_MockOCS_serviceDesc, srv)
}

func _MockOCS_SetOCSSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OCSConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockOCSServer).SetOCSSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.MockOCS/SetOCSSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockOCSServer).SetOCSSettings(ctx, req.(*OCSConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockOCS_SetCredit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreditInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockOCSServer).SetCredit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.MockOCS/SetCredit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockOCSServer).SetCredit(ctx, req.(*CreditInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockOCS_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.SubscriberID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockOCSServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.MockOCS/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockOCSServer).CreateAccount(ctx, req.(*protos.SubscriberID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockOCS_ClearSubscribers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos1.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockOCSServer).ClearSubscribers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.MockOCS/ClearSubscribers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockOCSServer).ClearSubscribers(ctx, req.(*protos1.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockOCS_ReAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChargingReAuthTarget)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockOCSServer).ReAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.MockOCS/ReAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockOCSServer).ReAuth(ctx, req.(*ChargingReAuthTarget))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockOCS_GetCredits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.SubscriberID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockOCSServer).GetCredits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.MockOCS/GetCredits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockOCSServer).GetCredits(ctx, req.(*protos.SubscriberID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockOCS_AbortSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockOCSServer).AbortSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.MockOCS/AbortSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockOCSServer).AbortSession(ctx, req.(*AbortSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockOCS_SetExpectations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GyCreditControlExpectations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockOCSServer).SetExpectations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.MockOCS/SetExpectations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockOCSServer).SetExpectations(ctx, req.(*GyCreditControlExpectations))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockOCS_AssertExpectations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos1.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockOCSServer).AssertExpectations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.MockOCS/AssertExpectations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockOCSServer).AssertExpectations(ctx, req.(*protos1.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _MockOCS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.feg.MockOCS",
	HandlerType: (*MockOCSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetOCSSettings",
			Handler:    _MockOCS_SetOCSSettings_Handler,
		},
		{
			MethodName: "SetCredit",
			Handler:    _MockOCS_SetCredit_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _MockOCS_CreateAccount_Handler,
		},
		{
			MethodName: "ClearSubscribers",
			Handler:    _MockOCS_ClearSubscribers_Handler,
		},
		{
			MethodName: "ReAuth",
			Handler:    _MockOCS_ReAuth_Handler,
		},
		{
			MethodName: "GetCredits",
			Handler:    _MockOCS_GetCredits_Handler,
		},
		{
			MethodName: "AbortSession",
			Handler:    _MockOCS_AbortSession_Handler,
		},
		{
			MethodName: "SetExpectations",
			Handler:    _MockOCS_SetExpectations_Handler,
		},
		{
			MethodName: "AssertExpectations",
			Handler:    _MockOCS_AssertExpectations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feg/protos/mock_core.proto",
}

// MockPCRFClient is the client API for MockPCRF service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MockPCRFClient interface {
	SetPCRFConfigs(ctx context.Context, in *PCRFConfigs, opts ...grpc.CallOption) (*protos1.Void, error)
	CreateAccount(ctx context.Context, in *protos.SubscriberID, opts ...grpc.CallOption) (*protos1.Void, error)
	SetRules(ctx context.Context, in *AccountRules, opts ...grpc.CallOption) (*protos1.Void, error)
	SetUsageMonitors(ctx context.Context, in *UsageMonitorConfiguration, opts ...grpc.CallOption) (*protos1.Void, error)
	ClearSubscribers(ctx context.Context, in *protos1.Void, opts ...grpc.CallOption) (*protos1.Void, error)
	ReAuth(ctx context.Context, in *PolicyReAuthTarget, opts ...grpc.CallOption) (*PolicyReAuthAnswer, error)
	AbortSession(ctx context.Context, in *AbortSessionRequest, opts ...grpc.CallOption) (*AbortSessionAnswer, error)
	SetExpectations(ctx context.Context, in *GxCreditControlExpectations, opts ...grpc.CallOption) (*protos1.Void, error)
	AssertExpectations(ctx context.Context, in *protos1.Void, opts ...grpc.CallOption) (*GxCreditControlResult, error)
}

type mockPCRFClient struct {
	cc grpc.ClientConnInterface
}

func NewMockPCRFClient(cc grpc.ClientConnInterface) MockPCRFClient {
	return &mockPCRFClient{cc}
}

func (c *mockPCRFClient) SetPCRFConfigs(ctx context.Context, in *PCRFConfigs, opts ...grpc.CallOption) (*protos1.Void, error) {
	out := new(protos1.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.MockPCRF/SetPCRFConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockPCRFClient) CreateAccount(ctx context.Context, in *protos.SubscriberID, opts ...grpc.CallOption) (*protos1.Void, error) {
	out := new(protos1.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.MockPCRF/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockPCRFClient) SetRules(ctx context.Context, in *AccountRules, opts ...grpc.CallOption) (*protos1.Void, error) {
	out := new(protos1.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.MockPCRF/SetRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockPCRFClient) SetUsageMonitors(ctx context.Context, in *UsageMonitorConfiguration, opts ...grpc.CallOption) (*protos1.Void, error) {
	out := new(protos1.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.MockPCRF/SetUsageMonitors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockPCRFClient) ClearSubscribers(ctx context.Context, in *protos1.Void, opts ...grpc.CallOption) (*protos1.Void, error) {
	out := new(protos1.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.MockPCRF/ClearSubscribers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockPCRFClient) ReAuth(ctx context.Context, in *PolicyReAuthTarget, opts ...grpc.CallOption) (*PolicyReAuthAnswer, error) {
	out := new(PolicyReAuthAnswer)
	err := c.cc.Invoke(ctx, "/magma.feg.MockPCRF/ReAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockPCRFClient) AbortSession(ctx context.Context, in *AbortSessionRequest, opts ...grpc.CallOption) (*AbortSessionAnswer, error) {
	out := new(AbortSessionAnswer)
	err := c.cc.Invoke(ctx, "/magma.feg.MockPCRF/AbortSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockPCRFClient) SetExpectations(ctx context.Context, in *GxCreditControlExpectations, opts ...grpc.CallOption) (*protos1.Void, error) {
	out := new(protos1.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.MockPCRF/SetExpectations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockPCRFClient) AssertExpectations(ctx context.Context, in *protos1.Void, opts ...grpc.CallOption) (*GxCreditControlResult, error) {
	out := new(GxCreditControlResult)
	err := c.cc.Invoke(ctx, "/magma.feg.MockPCRF/AssertExpectations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MockPCRFServer is the server API for MockPCRF service.
type MockPCRFServer interface {
	SetPCRFConfigs(context.Context, *PCRFConfigs) (*protos1.Void, error)
	CreateAccount(context.Context, *protos.SubscriberID) (*protos1.Void, error)
	SetRules(context.Context, *AccountRules) (*protos1.Void, error)
	SetUsageMonitors(context.Context, *UsageMonitorConfiguration) (*protos1.Void, error)
	ClearSubscribers(context.Context, *protos1.Void) (*protos1.Void, error)
	ReAuth(context.Context, *PolicyReAuthTarget) (*PolicyReAuthAnswer, error)
	AbortSession(context.Context, *AbortSessionRequest) (*AbortSessionAnswer, error)
	SetExpectations(context.Context, *GxCreditControlExpectations) (*protos1.Void, error)
	AssertExpectations(context.Context, *protos1.Void) (*GxCreditControlResult, error)
}

// UnimplementedMockPCRFServer can be embedded to have forward compatible implementations.
type UnimplementedMockPCRFServer struct {
}

func (*UnimplementedMockPCRFServer) SetPCRFConfigs(context.Context, *PCRFConfigs) (*protos1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPCRFConfigs not implemented")
}
func (*UnimplementedMockPCRFServer) CreateAccount(context.Context, *protos.SubscriberID) (*protos1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (*UnimplementedMockPCRFServer) SetRules(context.Context, *AccountRules) (*protos1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRules not implemented")
}
func (*UnimplementedMockPCRFServer) SetUsageMonitors(context.Context, *UsageMonitorConfiguration) (*protos1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUsageMonitors not implemented")
}
func (*UnimplementedMockPCRFServer) ClearSubscribers(context.Context, *protos1.Void) (*protos1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearSubscribers not implemented")
}
func (*UnimplementedMockPCRFServer) ReAuth(context.Context, *PolicyReAuthTarget) (*PolicyReAuthAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReAuth not implemented")
}
func (*UnimplementedMockPCRFServer) AbortSession(context.Context, *AbortSessionRequest) (*AbortSessionAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortSession not implemented")
}
func (*UnimplementedMockPCRFServer) SetExpectations(context.Context, *GxCreditControlExpectations) (*protos1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetExpectations not implemented")
}
func (*UnimplementedMockPCRFServer) AssertExpectations(context.Context, *protos1.Void) (*GxCreditControlResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssertExpectations not implemented")
}

func RegisterMockPCRFServer(s *grpc.Server, srv MockPCRFServer) {
	s.RegisterService(&_MockPCRF_serviceDesc, srv)
}

func _MockPCRF_SetPCRFConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PCRFConfigs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockPCRFServer).SetPCRFConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.MockPCRF/SetPCRFConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockPCRFServer).SetPCRFConfigs(ctx, req.(*PCRFConfigs))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockPCRF_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.SubscriberID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockPCRFServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.MockPCRF/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockPCRFServer).CreateAccount(ctx, req.(*protos.SubscriberID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockPCRF_SetRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRules)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockPCRFServer).SetRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.MockPCRF/SetRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockPCRFServer).SetRules(ctx, req.(*AccountRules))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockPCRF_SetUsageMonitors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsageMonitorConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockPCRFServer).SetUsageMonitors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.MockPCRF/SetUsageMonitors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockPCRFServer).SetUsageMonitors(ctx, req.(*UsageMonitorConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockPCRF_ClearSubscribers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos1.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockPCRFServer).ClearSubscribers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.MockPCRF/ClearSubscribers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockPCRFServer).ClearSubscribers(ctx, req.(*protos1.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockPCRF_ReAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyReAuthTarget)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockPCRFServer).ReAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.MockPCRF/ReAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockPCRFServer).ReAuth(ctx, req.(*PolicyReAuthTarget))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockPCRF_AbortSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockPCRFServer).AbortSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.MockPCRF/AbortSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockPCRFServer).AbortSession(ctx, req.(*AbortSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockPCRF_SetExpectations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GxCreditControlExpectations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockPCRFServer).SetExpectations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.MockPCRF/SetExpectations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockPCRFServer).SetExpectations(ctx, req.(*GxCreditControlExpectations))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockPCRF_AssertExpectations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos1.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockPCRFServer).AssertExpectations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.MockPCRF/AssertExpectations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockPCRFServer).AssertExpectations(ctx, req.(*protos1.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _MockPCRF_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.feg.MockPCRF",
	HandlerType: (*MockPCRFServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetPCRFConfigs",
			Handler:    _MockPCRF_SetPCRFConfigs_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _MockPCRF_CreateAccount_Handler,
		},
		{
			MethodName: "SetRules",
			Handler:    _MockPCRF_SetRules_Handler,
		},
		{
			MethodName: "SetUsageMonitors",
			Handler:    _MockPCRF_SetUsageMonitors_Handler,
		},
		{
			MethodName: "ClearSubscribers",
			Handler:    _MockPCRF_ClearSubscribers_Handler,
		},
		{
			MethodName: "ReAuth",
			Handler:    _MockPCRF_ReAuth_Handler,
		},
		{
			MethodName: "AbortSession",
			Handler:    _MockPCRF_AbortSession_Handler,
		},
		{
			MethodName: "SetExpectations",
			Handler:    _MockPCRF_SetExpectations_Handler,
		},
		{
			MethodName: "AssertExpectations",
			Handler:    _MockPCRF_AssertExpectations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feg/protos/mock_core.proto",
}

// MockPCFClient is the client API for MockPCF service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MockPCFClient interface {
	SetPCFConfigs(ctx context.Context, in *PCFConfigs, opts ...grpc.CallOption) (*protos1.Void, error)
	CreateAccount(ctx context.Context, in *protos.SubscriberID, opts ...grpc.CallOption) (*protos1.Void, error)
	SetAccountRules(ctx context.Context, in *PolicyDecision, opts ...grpc.CallOption) (*protos1.Void, error)
	ClearSubscribers(ctx context.Context, in *protos1.Void, opts ...grpc.CallOption) (*protos1.Void, error)
	SmPolicyUpdateNotify(ctx context.Context, in *PolicyDecision, opts ...grpc.CallOption) (*UpdateNotificationAnswer, error)
	SmPolicyTerminate(ctx context.Context, in *TerminateNotification, opts ...grpc.CallOption) (*TerminateNotificationAnswer, error)
	SetExpectations(ctx context.Context, in *N7Expectations, opts ...grpc.CallOption) (*protos1.Void, error)
	AssertExpectations(ctx context.Context, in *protos1.Void, opts ...grpc.CallOption) (*N7ExpectationResult, error)
}

type mockPCFClient struct {
	cc grpc.ClientConnInterface
}

func NewMockPCFClient(cc grpc.ClientConnInterface) MockPCFClient {
	return &mockPCFClient{cc}
}

func (c *mockPCFClient) SetPCFConfigs(ctx context.Context, in *PCFConfigs, opts ...grpc.CallOption) (*protos1.Void, error) {
	out := new(protos1.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.MockPCF/SetPCFConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockPCFClient) CreateAccount(ctx context.Context, in *protos.SubscriberID, opts ...grpc.CallOption) (*protos1.Void, error) {
	out := new(protos1.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.MockPCF/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockPCFClient) SetAccountRules(ctx context.Context, in *PolicyDecision, opts ...grpc.CallOption) (*protos1.Void, error) {
	out := new(protos1.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.MockPCF/SetAccountRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockPCFClient) ClearSubscribers(ctx context.Context, in *protos1.Void, opts ...grpc.CallOption) (*protos1.Void, error) {
	out := new(protos1.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.MockPCF/ClearSubscribers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockPCFClient) SmPolicyUpdateNotify(ctx context.Context, in *PolicyDecision, opts ...grpc.CallOption) (*UpdateNotificationAnswer, error) {
	out := new(UpdateNotificationAnswer)
	err := c.cc.Invoke(ctx, "/magma.feg.MockPCF/SmPolicyUpdateNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockPCFClient) SmPolicyTerminate(ctx context.Context, in *TerminateNotification, opts ...grpc.CallOption) (*TerminateNotificationAnswer, error) {
	out := new(TerminateNotificationAnswer)
	err := c.cc.Invoke(ctx, "/magma.feg.MockPCF/SmPolicyTerminate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockPCFClient) SetExpectations(ctx context.Context, in *N7Expectations, opts ...grpc.CallOption) (*protos1.Void, error) {
	out := new(protos1.Void)
	err := c.cc.Invoke(ctx, "/magma.feg.MockPCF/SetExpectations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockPCFClient) AssertExpectations(ctx context.Context, in *protos1.Void, opts ...grpc.CallOption) (*N7ExpectationResult, error) {
	out := new(N7ExpectationResult)
	err := c.cc.Invoke(ctx, "/magma.feg.MockPCF/AssertExpectations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MockPCFServer is the server API for MockPCF service.
type MockPCFServer interface {
	SetPCFConfigs(context.Context, *PCFConfigs) (*protos1.Void, error)
	CreateAccount(context.Context, *protos.SubscriberID) (*protos1.Void, error)
	SetAccountRules(context.Context, *PolicyDecision) (*protos1.Void, error)
	ClearSubscribers(context.Context, *protos1.Void) (*protos1.Void, error)
	SmPolicyUpdateNotify(context.Context, *PolicyDecision) (*UpdateNotificationAnswer, error)
	SmPolicyTerminate(context.Context, *TerminateNotification) (*TerminateNotificationAnswer, error)
	SetExpectations(context.Context, *N7Expectations) (*protos1.Void, error)
	AssertExpectations(context.Context, *protos1.Void) (*N7ExpectationResult, error)
}

// UnimplementedMockPCFServer can be embedded to have forward compatible implementations.
type UnimplementedMockPCFServer struct {
}

func (*UnimplementedMockPCFServer) SetPCFConfigs(context.Context, *PCFConfigs) (*protos1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPCFConfigs not implemented")
}
func (*UnimplementedMockPCFServer) CreateAccount(context.Context, *protos.SubscriberID) (*protos1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (*UnimplementedMockPCFServer) SetAccountRules(context.Context, *PolicyDecision) (*protos1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAccountRules not implemented")
}
func (*UnimplementedMockPCFServer) ClearSubscribers(context.Context, *protos1.Void) (*protos1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearSubscribers not implemented")
}
func (*UnimplementedMockPCFServer) SmPolicyUpdateNotify(context.Context, *PolicyDecision) (*UpdateNotificationAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmPolicyUpdateNotify not implemented")
}
func (*UnimplementedMockPCFServer) SmPolicyTerminate(context.Context, *TerminateNotification) (*TerminateNotificationAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmPolicyTerminate not implemented")
}
func (*UnimplementedMockPCFServer) SetExpectations(context.Context, *N7Expectations) (*protos1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetExpectations not implemented")
}
func (*UnimplementedMockPCFServer) AssertExpectations(context.Context, *protos1.Void) (*N7ExpectationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssertExpectations not implemented")
}

func RegisterMockPCFServer(s *grpc.Server, srv MockPCFServer) {
	s.RegisterService(&_MockPCF_serviceDesc, srv)
}

func _MockPCF_SetPCFConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PCFConfigs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockPCFServer).SetPCFConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.MockPCF/SetPCFConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockPCFServer).SetPCFConfigs(ctx, req.(*PCFConfigs))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockPCF_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.SubscriberID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockPCFServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.MockPCF/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockPCFServer).CreateAccount(ctx, req.(*protos.SubscriberID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockPCF_SetAccountRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyDecision)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockPCFServer).SetAccountRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.MockPCF/SetAccountRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockPCFServer).SetAccountRules(ctx, req.(*PolicyDecision))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockPCF_ClearSubscribers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos1.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockPCFServer).ClearSubscribers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.MockPCF/ClearSubscribers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockPCFServer).ClearSubscribers(ctx, req.(*protos1.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockPCF_SmPolicyUpdateNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyDecision)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockPCFServer).SmPolicyUpdateNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.MockPCF/SmPolicyUpdateNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockPCFServer).SmPolicyUpdateNotify(ctx, req.(*PolicyDecision))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockPCF_SmPolicyTerminate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockPCFServer).SmPolicyTerminate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.MockPCF/SmPolicyTerminate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockPCFServer).SmPolicyTerminate(ctx, req.(*TerminateNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockPCF_SetExpectations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(N7Expectations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockPCFServer).SetExpectations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.MockPCF/SetExpectations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockPCFServer).SetExpectations(ctx, req.(*N7Expectations))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockPCF_AssertExpectations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos1.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockPCFServer).AssertExpectations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.MockPCF/AssertExpectations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockPCFServer).AssertExpectations(ctx, req.(*protos1.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _MockPCF_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.feg.MockPCF",
	HandlerType: (*MockPCFServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetPCFConfigs",
			Handler:    _MockPCF_SetPCFConfigs_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _MockPCF_CreateAccount_Handler,
		},
		{
			MethodName: "SetAccountRules",
			Handler:    _MockPCF_SetAccountRules_Handler,
		},
		{
			MethodName: "ClearSubscribers",
			Handler:    _MockPCF_ClearSubscribers_Handler,
		},
		{
			MethodName: "SmPolicyUpdateNotify",
			Handler:    _MockPCF_SmPolicyUpdateNotify_Handler,
		},
		{
			MethodName: "SmPolicyTerminate",
			Handler:    _MockPCF_SmPolicyTerminate_Handler,
		},
		{
			MethodName: "SetExpectations",
			Handler:    _MockPCF_SetExpectations_Handler,
		},
		{
			MethodName: "AssertExpectations",
			Handler:    _MockPCF_AssertExpectations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feg/protos/mock_core.proto",
}
