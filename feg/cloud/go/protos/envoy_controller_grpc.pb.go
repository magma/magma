// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.10.0
// source: feg/protos/envoy_controller.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EnvoyControllerClient is the client API for EnvoyController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvoyControllerClient interface {
	// Add UE to the header enrichment configuration
	AddUEHeaderEnrichment(ctx context.Context, in *AddUEHeaderEnrichmentRequest, opts ...grpc.CallOption) (*AddUEHeaderEnrichmentResult, error)
	// Remove UE from the header enrichment configuration
	DeactivateUEHeaderEnrichment(ctx context.Context, in *DeactivateUEHeaderEnrichmentRequest, opts ...grpc.CallOption) (*DeactivateUEHeaderEnrichmentResult, error)
}

type envoyControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvoyControllerClient(cc grpc.ClientConnInterface) EnvoyControllerClient {
	return &envoyControllerClient{cc}
}

func (c *envoyControllerClient) AddUEHeaderEnrichment(ctx context.Context, in *AddUEHeaderEnrichmentRequest, opts ...grpc.CallOption) (*AddUEHeaderEnrichmentResult, error) {
	out := new(AddUEHeaderEnrichmentResult)
	err := c.cc.Invoke(ctx, "/magma.feg.EnvoyController/AddUEHeaderEnrichment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envoyControllerClient) DeactivateUEHeaderEnrichment(ctx context.Context, in *DeactivateUEHeaderEnrichmentRequest, opts ...grpc.CallOption) (*DeactivateUEHeaderEnrichmentResult, error) {
	out := new(DeactivateUEHeaderEnrichmentResult)
	err := c.cc.Invoke(ctx, "/magma.feg.EnvoyController/DeactivateUEHeaderEnrichment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvoyControllerServer is the server API for EnvoyController service.
// All implementations must embed UnimplementedEnvoyControllerServer
// for forward compatibility
type EnvoyControllerServer interface {
	// Add UE to the header enrichment configuration
	AddUEHeaderEnrichment(context.Context, *AddUEHeaderEnrichmentRequest) (*AddUEHeaderEnrichmentResult, error)
	// Remove UE from the header enrichment configuration
	DeactivateUEHeaderEnrichment(context.Context, *DeactivateUEHeaderEnrichmentRequest) (*DeactivateUEHeaderEnrichmentResult, error)
	mustEmbedUnimplementedEnvoyControllerServer()
}

// UnimplementedEnvoyControllerServer must be embedded to have forward compatible implementations.
type UnimplementedEnvoyControllerServer struct {
}

func (UnimplementedEnvoyControllerServer) AddUEHeaderEnrichment(context.Context, *AddUEHeaderEnrichmentRequest) (*AddUEHeaderEnrichmentResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUEHeaderEnrichment not implemented")
}
func (UnimplementedEnvoyControllerServer) DeactivateUEHeaderEnrichment(context.Context, *DeactivateUEHeaderEnrichmentRequest) (*DeactivateUEHeaderEnrichmentResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateUEHeaderEnrichment not implemented")
}
func (UnimplementedEnvoyControllerServer) mustEmbedUnimplementedEnvoyControllerServer() {}

// UnsafeEnvoyControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvoyControllerServer will
// result in compilation errors.
type UnsafeEnvoyControllerServer interface {
	mustEmbedUnimplementedEnvoyControllerServer()
}

func RegisterEnvoyControllerServer(s grpc.ServiceRegistrar, srv EnvoyControllerServer) {
	s.RegisterService(&EnvoyController_ServiceDesc, srv)
}

func _EnvoyController_AddUEHeaderEnrichment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUEHeaderEnrichmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvoyControllerServer).AddUEHeaderEnrichment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.EnvoyController/AddUEHeaderEnrichment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvoyControllerServer).AddUEHeaderEnrichment(ctx, req.(*AddUEHeaderEnrichmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvoyController_DeactivateUEHeaderEnrichment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateUEHeaderEnrichmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvoyControllerServer).DeactivateUEHeaderEnrichment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.EnvoyController/DeactivateUEHeaderEnrichment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvoyControllerServer).DeactivateUEHeaderEnrichment(ctx, req.(*DeactivateUEHeaderEnrichmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnvoyController_ServiceDesc is the grpc.ServiceDesc for EnvoyController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnvoyController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.feg.EnvoyController",
	HandlerType: (*EnvoyControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUEHeaderEnrichment",
			Handler:    _EnvoyController_AddUEHeaderEnrichment_Handler,
		},
		{
			MethodName: "DeactivateUEHeaderEnrichment",
			Handler:    _EnvoyController_DeactivateUEHeaderEnrichment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feg/protos/envoy_controller.proto",
}
