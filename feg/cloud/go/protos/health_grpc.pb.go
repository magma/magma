// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.10.0
// source: feg/protos/health.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HealthClient is the client API for Health service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthClient interface {
	// Update the cloud representation of gateway health
	UpdateHealth(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type healthClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthClient(cc grpc.ClientConnInterface) HealthClient {
	return &healthClient{cc}
}

func (c *healthClient) UpdateHealth(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/magma.feg.Health/UpdateHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthServer is the server API for Health service.
// All implementations must embed UnimplementedHealthServer
// for forward compatibility
type HealthServer interface {
	// Update the cloud representation of gateway health
	UpdateHealth(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedHealthServer()
}

// UnimplementedHealthServer must be embedded to have forward compatible implementations.
type UnimplementedHealthServer struct {
}

func (UnimplementedHealthServer) UpdateHealth(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHealth not implemented")
}
func (UnimplementedHealthServer) mustEmbedUnimplementedHealthServer() {}

// UnsafeHealthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthServer will
// result in compilation errors.
type UnsafeHealthServer interface {
	mustEmbedUnimplementedHealthServer()
}

func RegisterHealthServer(s grpc.ServiceRegistrar, srv HealthServer) {
	s.RegisterService(&Health_ServiceDesc, srv)
}

func _Health_UpdateHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServer).UpdateHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.Health/UpdateHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServer).UpdateHealth(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Health_ServiceDesc is the grpc.ServiceDesc for Health service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Health_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.feg.Health",
	HandlerType: (*HealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateHealth",
			Handler:    _Health_UpdateHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feg/protos/health.proto",
}

// CloudHealthClient is the client API for CloudHealth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudHealthClient interface {
	// Get the health statistics of a gateway
	GetHealth(ctx context.Context, in *GatewayStatusRequest, opts ...grpc.CallOption) (*HealthStats, error)
	// Get cluster state for (networkID, clusterID) tuple
	GetClusterState(ctx context.Context, in *ClusterStateRequest, opts ...grpc.CallOption) (*ClusterState, error)
}

type cloudHealthClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudHealthClient(cc grpc.ClientConnInterface) CloudHealthClient {
	return &cloudHealthClient{cc}
}

func (c *cloudHealthClient) GetHealth(ctx context.Context, in *GatewayStatusRequest, opts ...grpc.CallOption) (*HealthStats, error) {
	out := new(HealthStats)
	err := c.cc.Invoke(ctx, "/magma.feg.CloudHealth/GetHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHealthClient) GetClusterState(ctx context.Context, in *ClusterStateRequest, opts ...grpc.CallOption) (*ClusterState, error) {
	out := new(ClusterState)
	err := c.cc.Invoke(ctx, "/magma.feg.CloudHealth/GetClusterState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudHealthServer is the server API for CloudHealth service.
// All implementations must embed UnimplementedCloudHealthServer
// for forward compatibility
type CloudHealthServer interface {
	// Get the health statistics of a gateway
	GetHealth(context.Context, *GatewayStatusRequest) (*HealthStats, error)
	// Get cluster state for (networkID, clusterID) tuple
	GetClusterState(context.Context, *ClusterStateRequest) (*ClusterState, error)
	mustEmbedUnimplementedCloudHealthServer()
}

// UnimplementedCloudHealthServer must be embedded to have forward compatible implementations.
type UnimplementedCloudHealthServer struct {
}

func (UnimplementedCloudHealthServer) GetHealth(context.Context, *GatewayStatusRequest) (*HealthStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (UnimplementedCloudHealthServer) GetClusterState(context.Context, *ClusterStateRequest) (*ClusterState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterState not implemented")
}
func (UnimplementedCloudHealthServer) mustEmbedUnimplementedCloudHealthServer() {}

// UnsafeCloudHealthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudHealthServer will
// result in compilation errors.
type UnsafeCloudHealthServer interface {
	mustEmbedUnimplementedCloudHealthServer()
}

func RegisterCloudHealthServer(s grpc.ServiceRegistrar, srv CloudHealthServer) {
	s.RegisterService(&CloudHealth_ServiceDesc, srv)
}

func _CloudHealth_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHealthServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.CloudHealth/GetHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHealthServer).GetHealth(ctx, req.(*GatewayStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHealth_GetClusterState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHealthServer).GetClusterState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.CloudHealth/GetClusterState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHealthServer).GetClusterState(ctx, req.(*ClusterStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudHealth_ServiceDesc is the grpc.ServiceDesc for CloudHealth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudHealth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.feg.CloudHealth",
	HandlerType: (*CloudHealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHealth",
			Handler:    _CloudHealth_GetHealth_Handler,
		},
		{
			MethodName: "GetClusterState",
			Handler:    _CloudHealth_GetClusterState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feg/protos/health.proto",
}
