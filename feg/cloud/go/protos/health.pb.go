//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.10.0
// source: feg/protos/health.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServiceHealthStats_ServiceState int32

const (
	ServiceHealthStats_AVAILABLE   ServiceHealthStats_ServiceState = 0
	ServiceHealthStats_UNAVAILABLE ServiceHealthStats_ServiceState = 1
)

// Enum value maps for ServiceHealthStats_ServiceState.
var (
	ServiceHealthStats_ServiceState_name = map[int32]string{
		0: "AVAILABLE",
		1: "UNAVAILABLE",
	}
	ServiceHealthStats_ServiceState_value = map[string]int32{
		"AVAILABLE":   0,
		"UNAVAILABLE": 1,
	}
)

func (x ServiceHealthStats_ServiceState) Enum() *ServiceHealthStats_ServiceState {
	p := new(ServiceHealthStats_ServiceState)
	*p = x
	return p
}

func (x ServiceHealthStats_ServiceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceHealthStats_ServiceState) Descriptor() protoreflect.EnumDescriptor {
	return file_feg_protos_health_proto_enumTypes[0].Descriptor()
}

func (ServiceHealthStats_ServiceState) Type() protoreflect.EnumType {
	return &file_feg_protos_health_proto_enumTypes[0]
}

func (x ServiceHealthStats_ServiceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceHealthStats_ServiceState.Descriptor instead.
func (ServiceHealthStats_ServiceState) EnumDescriptor() ([]byte, []int) {
	return file_feg_protos_health_proto_rawDescGZIP(), []int{3, 0}
}

type HealthStatus_HealthState int32

const (
	HealthStatus_HEALTHY   HealthStatus_HealthState = 0
	HealthStatus_UNHEALTHY HealthStatus_HealthState = 1
)

// Enum value maps for HealthStatus_HealthState.
var (
	HealthStatus_HealthState_name = map[int32]string{
		0: "HEALTHY",
		1: "UNHEALTHY",
	}
	HealthStatus_HealthState_value = map[string]int32{
		"HEALTHY":   0,
		"UNHEALTHY": 1,
	}
)

func (x HealthStatus_HealthState) Enum() *HealthStatus_HealthState {
	p := new(HealthStatus_HealthState)
	*p = x
	return p
}

func (x HealthStatus_HealthState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthStatus_HealthState) Descriptor() protoreflect.EnumDescriptor {
	return file_feg_protos_health_proto_enumTypes[1].Descriptor()
}

func (HealthStatus_HealthState) Type() protoreflect.EnumType {
	return &file_feg_protos_health_proto_enumTypes[1]
}

func (x HealthStatus_HealthState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthStatus_HealthState.Descriptor instead.
func (HealthStatus_HealthState) EnumDescriptor() ([]byte, []int) {
	return file_feg_protos_health_proto_rawDescGZIP(), []int{4, 0}
}

type HealthResponse_RequestedAction int32

const (
	HealthResponse_NONE        HealthResponse_RequestedAction = 0 // Everything is OK, do nothing
	HealthResponse_SYSTEM_DOWN HealthResponse_RequestedAction = 1
	HealthResponse_SYSTEM_UP   HealthResponse_RequestedAction = 2
)

// Enum value maps for HealthResponse_RequestedAction.
var (
	HealthResponse_RequestedAction_name = map[int32]string{
		0: "NONE",
		1: "SYSTEM_DOWN",
		2: "SYSTEM_UP",
	}
	HealthResponse_RequestedAction_value = map[string]int32{
		"NONE":        0,
		"SYSTEM_DOWN": 1,
		"SYSTEM_UP":   2,
	}
)

func (x HealthResponse_RequestedAction) Enum() *HealthResponse_RequestedAction {
	p := new(HealthResponse_RequestedAction)
	*p = x
	return p
}

func (x HealthResponse_RequestedAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthResponse_RequestedAction) Descriptor() protoreflect.EnumDescriptor {
	return file_feg_protos_health_proto_enumTypes[2].Descriptor()
}

func (HealthResponse_RequestedAction) Type() protoreflect.EnumType {
	return &file_feg_protos_health_proto_enumTypes[2]
}

func (x HealthResponse_RequestedAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthResponse_RequestedAction.Descriptor instead.
func (HealthResponse_RequestedAction) EnumDescriptor() ([]byte, []int) {
	return file_feg_protos_health_proto_rawDescGZIP(), []int{5, 0}
}

type HealthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HealthStats *HealthStats `protobuf:"bytes,1,opt,name=health_stats,json=healthStats,proto3" json:"health_stats,omitempty"`
}

func (x *HealthRequest) Reset() {
	*x = HealthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_health_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthRequest) ProtoMessage() {}

func (x *HealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_health_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthRequest.ProtoReflect.Descriptor instead.
func (*HealthRequest) Descriptor() ([]byte, []int) {
	return file_feg_protos_health_proto_rawDescGZIP(), []int{0}
}

func (x *HealthRequest) GetHealthStats() *HealthStats {
	if x != nil {
		return x.HealthStats
	}
	return nil
}

// Object to be stored in the health service's database
type HealthStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// System resources, cpu, memory, etc.
	SystemStatus *SystemHealthStats `protobuf:"bytes,1,opt,name=system_status,json=systemStatus,proto3" json:"system_status,omitempty"`
	// ServiceType name mapped to service stats
	ServiceStatus map[string]*ServiceHealthStats `protobuf:"bytes,2,rep,name=service_status,json=serviceStatus,proto3" json:"service_status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Gateway's perceived health of itself
	Health *HealthStatus `protobuf:"bytes,3,opt,name=health,proto3" json:"health,omitempty"`
	// Unix time of when this object is stored
	Time uint64 `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *HealthStats) Reset() {
	*x = HealthStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_health_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthStats) ProtoMessage() {}

func (x *HealthStats) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_health_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthStats.ProtoReflect.Descriptor instead.
func (*HealthStats) Descriptor() ([]byte, []int) {
	return file_feg_protos_health_proto_rawDescGZIP(), []int{1}
}

func (x *HealthStats) GetSystemStatus() *SystemHealthStats {
	if x != nil {
		return x.SystemStatus
	}
	return nil
}

func (x *HealthStats) GetServiceStatus() map[string]*ServiceHealthStats {
	if x != nil {
		return x.ServiceStatus
	}
	return nil
}

func (x *HealthStats) GetHealth() *HealthStatus {
	if x != nil {
		return x.Health
	}
	return nil
}

func (x *HealthStats) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type SystemHealthStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unix time on the gateway
	Time uint64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	// Total cpu utilization system-wide (as a percentage)
	CpuUtilPct float32 `protobuf:"fixed32,2,opt,name=cpu_util_pct,json=cpuUtilPct,proto3" json:"cpu_util_pct,omitempty"`
	// Total physical memory on the system
	MemTotalBytes uint64 `protobuf:"varint,3,opt,name=mem_total_bytes,json=memTotalBytes,proto3" json:"mem_total_bytes,omitempty"`
	// Total memory available
	MemAvailableBytes uint64 `protobuf:"varint,4,opt,name=mem_available_bytes,json=memAvailableBytes,proto3" json:"mem_available_bytes,omitempty"`
}

func (x *SystemHealthStats) Reset() {
	*x = SystemHealthStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_health_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemHealthStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemHealthStats) ProtoMessage() {}

func (x *SystemHealthStats) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_health_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemHealthStats.ProtoReflect.Descriptor instead.
func (*SystemHealthStats) Descriptor() ([]byte, []int) {
	return file_feg_protos_health_proto_rawDescGZIP(), []int{2}
}

func (x *SystemHealthStats) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SystemHealthStats) GetCpuUtilPct() float32 {
	if x != nil {
		return x.CpuUtilPct
	}
	return 0
}

func (x *SystemHealthStats) GetMemTotalBytes() uint64 {
	if x != nil {
		return x.MemTotalBytes
	}
	return 0
}

func (x *SystemHealthStats) GetMemAvailableBytes() uint64 {
	if x != nil {
		return x.MemAvailableBytes
	}
	return 0
}

type ServiceHealthStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceState        ServiceHealthStats_ServiceState `protobuf:"varint,1,opt,name=service_state,json=serviceState,proto3,enum=magma.feg.ServiceHealthStats_ServiceState" json:"service_state,omitempty"`
	ServiceHealthStatus *HealthStatus                   `protobuf:"bytes,2,opt,name=service_health_status,json=serviceHealthStatus,proto3" json:"service_health_status,omitempty"`
}

func (x *ServiceHealthStats) Reset() {
	*x = ServiceHealthStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_health_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceHealthStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceHealthStats) ProtoMessage() {}

func (x *ServiceHealthStats) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_health_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceHealthStats.ProtoReflect.Descriptor instead.
func (*ServiceHealthStats) Descriptor() ([]byte, []int) {
	return file_feg_protos_health_proto_rawDescGZIP(), []int{3}
}

func (x *ServiceHealthStats) GetServiceState() ServiceHealthStats_ServiceState {
	if x != nil {
		return x.ServiceState
	}
	return ServiceHealthStats_AVAILABLE
}

func (x *ServiceHealthStats) GetServiceHealthStatus() *HealthStatus {
	if x != nil {
		return x.ServiceHealthStatus
	}
	return nil
}

type HealthStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Health HealthStatus_HealthState `protobuf:"varint,1,opt,name=health,proto3,enum=magma.feg.HealthStatus_HealthState" json:"health,omitempty"`
	// String to provide description for health status
	HealthMessage string `protobuf:"bytes,2,opt,name=health_message,json=healthMessage,proto3" json:"health_message,omitempty"`
}

func (x *HealthStatus) Reset() {
	*x = HealthStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_health_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthStatus) ProtoMessage() {}

func (x *HealthStatus) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_health_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthStatus.ProtoReflect.Descriptor instead.
func (*HealthStatus) Descriptor() ([]byte, []int) {
	return file_feg_protos_health_proto_rawDescGZIP(), []int{4}
}

func (x *HealthStatus) GetHealth() HealthStatus_HealthState {
	if x != nil {
		return x.Health
	}
	return HealthStatus_HEALTHY
}

func (x *HealthStatus) GetHealthMessage() string {
	if x != nil {
		return x.HealthMessage
	}
	return ""
}

type HealthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action HealthResponse_RequestedAction `protobuf:"varint,1,opt,name=action,proto3,enum=magma.feg.HealthResponse_RequestedAction" json:"action,omitempty"`
	// Unix time of when the update occurred
	Time uint64 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *HealthResponse) Reset() {
	*x = HealthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_health_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthResponse) ProtoMessage() {}

func (x *HealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_health_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthResponse.ProtoReflect.Descriptor instead.
func (*HealthResponse) Descriptor() ([]byte, []int) {
	return file_feg_protos_health_proto_rawDescGZIP(), []int{5}
}

func (x *HealthResponse) GetAction() HealthResponse_RequestedAction {
	if x != nil {
		return x.Action
	}
	return HealthResponse_NONE
}

func (x *HealthResponse) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type ClusterState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The logical id of the currently active gateway
	ActiveGatewayLogicalId string `protobuf:"bytes,1,opt,name=active_gateway_logical_id,json=activeGatewayLogicalId,proto3" json:"active_gateway_logical_id,omitempty"`
	// Unix time of when the cluster state update occurred
	Time uint64 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ClusterState) Reset() {
	*x = ClusterState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_health_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterState) ProtoMessage() {}

func (x *ClusterState) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_health_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterState.ProtoReflect.Descriptor instead.
func (*ClusterState) Descriptor() ([]byte, []int) {
	return file_feg_protos_health_proto_rawDescGZIP(), []int{6}
}

func (x *ClusterState) GetActiveGatewayLogicalId() string {
	if x != nil {
		return x.ActiveGatewayLogicalId
	}
	return ""
}

func (x *ClusterState) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type ClusterStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NetworkID that the cluster is registered in
	NetworkId string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// Cluster's clusterID
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *ClusterStateRequest) Reset() {
	*x = ClusterStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_health_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterStateRequest) ProtoMessage() {}

func (x *ClusterStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_health_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterStateRequest.ProtoReflect.Descriptor instead.
func (*ClusterStateRequest) Descriptor() ([]byte, []int) {
	return file_feg_protos_health_proto_rawDescGZIP(), []int{7}
}

func (x *ClusterStateRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *ClusterStateRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type GatewayStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gateway's network id
	NetworkId string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// Gateway's logical id
	LogicalId string `protobuf:"bytes,2,opt,name=logical_id,json=logicalId,proto3" json:"logical_id,omitempty"`
}

func (x *GatewayStatusRequest) Reset() {
	*x = GatewayStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_health_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayStatusRequest) ProtoMessage() {}

func (x *GatewayStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_health_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayStatusRequest.ProtoReflect.Descriptor instead.
func (*GatewayStatusRequest) Descriptor() ([]byte, []int) {
	return file_feg_protos_health_proto_rawDescGZIP(), []int{8}
}

func (x *GatewayStatusRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *GatewayStatusRequest) GetLogicalId() string {
	if x != nil {
		return x.LogicalId
	}
	return ""
}

var File_feg_protos_health_proto protoreflect.FileDescriptor

var file_feg_protos_health_proto_rawDesc = []byte{
	0x0a, 0x17, 0x66, 0x65, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x66, 0x65, 0x67, 0x22, 0x4a, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x22, 0xc8, 0x02, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x41, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x66, 0x65, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65,
	0x67, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x5f, 0x0a, 0x12, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa1, 0x01, 0x0a, 0x11,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x74, 0x69,
	0x6c, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x70, 0x75,
	0x55, 0x74, 0x69, 0x6c, 0x50, 0x63, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x6d, 0x65, 0x6d, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x65,
	0x6d, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22,
	0xe2, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66,
	0x65, 0x67, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x2e, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x01, 0x22, 0x9d, 0x01, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65,
	0x67, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x29, 0x0a, 0x0b, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x45, 0x41, 0x4c,
	0x54, 0x48, 0x59, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54,
	0x48, 0x59, 0x10, 0x01, 0x22, 0xa4, 0x01, 0x0a, 0x0e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x66, 0x65, 0x67, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x3b,
	0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x55, 0x50, 0x10, 0x02, 0x22, 0x5d, 0x0a, 0x0c, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x53, 0x0a, 0x13, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x54, 0x0a, 0x14, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x49, 0x64, 0x32, 0x4f, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12,
	0x45, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12,
	0x18, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xa3, 0x01, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x46, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x12, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67,
	0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x00, 0x12, 0x4c,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x66, 0x65, 0x67, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x00, 0x42, 0x1b, 0x5a, 0x19,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f, 0x66, 0x65, 0x67, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_feg_protos_health_proto_rawDescOnce sync.Once
	file_feg_protos_health_proto_rawDescData = file_feg_protos_health_proto_rawDesc
)

func file_feg_protos_health_proto_rawDescGZIP() []byte {
	file_feg_protos_health_proto_rawDescOnce.Do(func() {
		file_feg_protos_health_proto_rawDescData = protoimpl.X.CompressGZIP(file_feg_protos_health_proto_rawDescData)
	})
	return file_feg_protos_health_proto_rawDescData
}

var file_feg_protos_health_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_feg_protos_health_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_feg_protos_health_proto_goTypes = []interface{}{
	(ServiceHealthStats_ServiceState)(0), // 0: magma.feg.ServiceHealthStats.ServiceState
	(HealthStatus_HealthState)(0),        // 1: magma.feg.HealthStatus.HealthState
	(HealthResponse_RequestedAction)(0),  // 2: magma.feg.HealthResponse.RequestedAction
	(*HealthRequest)(nil),                // 3: magma.feg.HealthRequest
	(*HealthStats)(nil),                  // 4: magma.feg.HealthStats
	(*SystemHealthStats)(nil),            // 5: magma.feg.SystemHealthStats
	(*ServiceHealthStats)(nil),           // 6: magma.feg.ServiceHealthStats
	(*HealthStatus)(nil),                 // 7: magma.feg.HealthStatus
	(*HealthResponse)(nil),               // 8: magma.feg.HealthResponse
	(*ClusterState)(nil),                 // 9: magma.feg.ClusterState
	(*ClusterStateRequest)(nil),          // 10: magma.feg.ClusterStateRequest
	(*GatewayStatusRequest)(nil),         // 11: magma.feg.GatewayStatusRequest
	nil,                                  // 12: magma.feg.HealthStats.ServiceStatusEntry
}
var file_feg_protos_health_proto_depIdxs = []int32{
	4,  // 0: magma.feg.HealthRequest.health_stats:type_name -> magma.feg.HealthStats
	5,  // 1: magma.feg.HealthStats.system_status:type_name -> magma.feg.SystemHealthStats
	12, // 2: magma.feg.HealthStats.service_status:type_name -> magma.feg.HealthStats.ServiceStatusEntry
	7,  // 3: magma.feg.HealthStats.health:type_name -> magma.feg.HealthStatus
	0,  // 4: magma.feg.ServiceHealthStats.service_state:type_name -> magma.feg.ServiceHealthStats.ServiceState
	7,  // 5: magma.feg.ServiceHealthStats.service_health_status:type_name -> magma.feg.HealthStatus
	1,  // 6: magma.feg.HealthStatus.health:type_name -> magma.feg.HealthStatus.HealthState
	2,  // 7: magma.feg.HealthResponse.action:type_name -> magma.feg.HealthResponse.RequestedAction
	6,  // 8: magma.feg.HealthStats.ServiceStatusEntry.value:type_name -> magma.feg.ServiceHealthStats
	3,  // 9: magma.feg.Health.UpdateHealth:input_type -> magma.feg.HealthRequest
	11, // 10: magma.feg.CloudHealth.GetHealth:input_type -> magma.feg.GatewayStatusRequest
	10, // 11: magma.feg.CloudHealth.GetClusterState:input_type -> magma.feg.ClusterStateRequest
	8,  // 12: magma.feg.Health.UpdateHealth:output_type -> magma.feg.HealthResponse
	4,  // 13: magma.feg.CloudHealth.GetHealth:output_type -> magma.feg.HealthStats
	9,  // 14: magma.feg.CloudHealth.GetClusterState:output_type -> magma.feg.ClusterState
	12, // [12:15] is the sub-list for method output_type
	9,  // [9:12] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_feg_protos_health_proto_init() }
func file_feg_protos_health_proto_init() {
	if File_feg_protos_health_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_feg_protos_health_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_health_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_health_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemHealthStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_health_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceHealthStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_health_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_health_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_health_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_health_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_health_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_feg_protos_health_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_feg_protos_health_proto_goTypes,
		DependencyIndexes: file_feg_protos_health_proto_depIdxs,
		EnumInfos:         file_feg_protos_health_proto_enumTypes,
		MessageInfos:      file_feg_protos_health_proto_msgTypes,
	}.Build()
	File_feg_protos_health_proto = out.File
	file_feg_protos_health_proto_rawDesc = nil
	file_feg_protos_health_proto_goTypes = nil
	file_feg_protos_health_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HealthClient is the client API for Health service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HealthClient interface {
	// Update the cloud representation of gateway health
	UpdateHealth(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type healthClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthClient(cc grpc.ClientConnInterface) HealthClient {
	return &healthClient{cc}
}

func (c *healthClient) UpdateHealth(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/magma.feg.Health/UpdateHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthServer is the server API for Health service.
type HealthServer interface {
	// Update the cloud representation of gateway health
	UpdateHealth(context.Context, *HealthRequest) (*HealthResponse, error)
}

// UnimplementedHealthServer can be embedded to have forward compatible implementations.
type UnimplementedHealthServer struct {
}

func (*UnimplementedHealthServer) UpdateHealth(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHealth not implemented")
}

func RegisterHealthServer(s *grpc.Server, srv HealthServer) {
	s.RegisterService(&_Health_serviceDesc, srv)
}

func _Health_UpdateHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServer).UpdateHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.Health/UpdateHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServer).UpdateHealth(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Health_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.feg.Health",
	HandlerType: (*HealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateHealth",
			Handler:    _Health_UpdateHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feg/protos/health.proto",
}

// CloudHealthClient is the client API for CloudHealth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CloudHealthClient interface {
	// Get the health statistics of a gateway
	GetHealth(ctx context.Context, in *GatewayStatusRequest, opts ...grpc.CallOption) (*HealthStats, error)
	// Get cluster state for (networkID, clusterID) tuple
	GetClusterState(ctx context.Context, in *ClusterStateRequest, opts ...grpc.CallOption) (*ClusterState, error)
}

type cloudHealthClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudHealthClient(cc grpc.ClientConnInterface) CloudHealthClient {
	return &cloudHealthClient{cc}
}

func (c *cloudHealthClient) GetHealth(ctx context.Context, in *GatewayStatusRequest, opts ...grpc.CallOption) (*HealthStats, error) {
	out := new(HealthStats)
	err := c.cc.Invoke(ctx, "/magma.feg.CloudHealth/GetHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHealthClient) GetClusterState(ctx context.Context, in *ClusterStateRequest, opts ...grpc.CallOption) (*ClusterState, error) {
	out := new(ClusterState)
	err := c.cc.Invoke(ctx, "/magma.feg.CloudHealth/GetClusterState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudHealthServer is the server API for CloudHealth service.
type CloudHealthServer interface {
	// Get the health statistics of a gateway
	GetHealth(context.Context, *GatewayStatusRequest) (*HealthStats, error)
	// Get cluster state for (networkID, clusterID) tuple
	GetClusterState(context.Context, *ClusterStateRequest) (*ClusterState, error)
}

// UnimplementedCloudHealthServer can be embedded to have forward compatible implementations.
type UnimplementedCloudHealthServer struct {
}

func (*UnimplementedCloudHealthServer) GetHealth(context.Context, *GatewayStatusRequest) (*HealthStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (*UnimplementedCloudHealthServer) GetClusterState(context.Context, *ClusterStateRequest) (*ClusterState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterState not implemented")
}

func RegisterCloudHealthServer(s *grpc.Server, srv CloudHealthServer) {
	s.RegisterService(&_CloudHealth_serviceDesc, srv)
}

func _CloudHealth_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHealthServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.CloudHealth/GetHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHealthServer).GetHealth(ctx, req.(*GatewayStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHealth_GetClusterState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHealthServer).GetClusterState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.CloudHealth/GetClusterState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHealthServer).GetClusterState(ctx, req.(*ClusterStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudHealth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.feg.CloudHealth",
	HandlerType: (*CloudHealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHealth",
			Handler:    _CloudHealth_GetHealth_Handler,
		},
		{
			MethodName: "GetClusterState",
			Handler:    _CloudHealth_GetClusterState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feg/protos/health.proto",
}
