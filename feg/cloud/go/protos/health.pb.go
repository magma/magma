// Code generated by protoc-gen-go. DO NOT EDIT.
// source: feg/protos/health.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ServiceHealthStats_ServiceState int32

const (
	ServiceHealthStats_AVAILABLE   ServiceHealthStats_ServiceState = 0
	ServiceHealthStats_UNAVAILABLE ServiceHealthStats_ServiceState = 1
)

var ServiceHealthStats_ServiceState_name = map[int32]string{
	0: "AVAILABLE",
	1: "UNAVAILABLE",
}

var ServiceHealthStats_ServiceState_value = map[string]int32{
	"AVAILABLE":   0,
	"UNAVAILABLE": 1,
}

func (x ServiceHealthStats_ServiceState) String() string {
	return proto.EnumName(ServiceHealthStats_ServiceState_name, int32(x))
}

func (ServiceHealthStats_ServiceState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cfb4500c35b642ae, []int{3, 0}
}

type HealthStatus_HealthState int32

const (
	HealthStatus_HEALTHY   HealthStatus_HealthState = 0
	HealthStatus_UNHEALTHY HealthStatus_HealthState = 1
)

var HealthStatus_HealthState_name = map[int32]string{
	0: "HEALTHY",
	1: "UNHEALTHY",
}

var HealthStatus_HealthState_value = map[string]int32{
	"HEALTHY":   0,
	"UNHEALTHY": 1,
}

func (x HealthStatus_HealthState) String() string {
	return proto.EnumName(HealthStatus_HealthState_name, int32(x))
}

func (HealthStatus_HealthState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cfb4500c35b642ae, []int{4, 0}
}

type HealthResponse_RequestedAction int32

const (
	HealthResponse_NONE        HealthResponse_RequestedAction = 0
	HealthResponse_SYSTEM_DOWN HealthResponse_RequestedAction = 1
	HealthResponse_SYSTEM_UP   HealthResponse_RequestedAction = 2
)

var HealthResponse_RequestedAction_name = map[int32]string{
	0: "NONE",
	1: "SYSTEM_DOWN",
	2: "SYSTEM_UP",
}

var HealthResponse_RequestedAction_value = map[string]int32{
	"NONE":        0,
	"SYSTEM_DOWN": 1,
	"SYSTEM_UP":   2,
}

func (x HealthResponse_RequestedAction) String() string {
	return proto.EnumName(HealthResponse_RequestedAction_name, int32(x))
}

func (HealthResponse_RequestedAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cfb4500c35b642ae, []int{5, 0}
}

type HealthRequest struct {
	HealthStats          *HealthStats `protobuf:"bytes,1,opt,name=health_stats,json=healthStats,proto3" json:"health_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *HealthRequest) Reset()         { *m = HealthRequest{} }
func (m *HealthRequest) String() string { return proto.CompactTextString(m) }
func (*HealthRequest) ProtoMessage()    {}
func (*HealthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfb4500c35b642ae, []int{0}
}

func (m *HealthRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthRequest.Unmarshal(m, b)
}
func (m *HealthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthRequest.Marshal(b, m, deterministic)
}
func (m *HealthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthRequest.Merge(m, src)
}
func (m *HealthRequest) XXX_Size() int {
	return xxx_messageInfo_HealthRequest.Size(m)
}
func (m *HealthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HealthRequest proto.InternalMessageInfo

func (m *HealthRequest) GetHealthStats() *HealthStats {
	if m != nil {
		return m.HealthStats
	}
	return nil
}

// Object to be stored in the health service's database
type HealthStats struct {
	// System resources, cpu, memory, etc.
	SystemStatus *SystemHealthStats `protobuf:"bytes,1,opt,name=system_status,json=systemStatus,proto3" json:"system_status,omitempty"`
	// ServiceType name mapped to service stats
	ServiceStatus map[string]*ServiceHealthStats `protobuf:"bytes,2,rep,name=service_status,json=serviceStatus,proto3" json:"service_status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Gateway's perceived health of itself
	Health *HealthStatus `protobuf:"bytes,3,opt,name=health,proto3" json:"health,omitempty"`
	// Unix time of when this object is stored
	Time                 uint64   `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthStats) Reset()         { *m = HealthStats{} }
func (m *HealthStats) String() string { return proto.CompactTextString(m) }
func (*HealthStats) ProtoMessage()    {}
func (*HealthStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfb4500c35b642ae, []int{1}
}

func (m *HealthStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthStats.Unmarshal(m, b)
}
func (m *HealthStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthStats.Marshal(b, m, deterministic)
}
func (m *HealthStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthStats.Merge(m, src)
}
func (m *HealthStats) XXX_Size() int {
	return xxx_messageInfo_HealthStats.Size(m)
}
func (m *HealthStats) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthStats.DiscardUnknown(m)
}

var xxx_messageInfo_HealthStats proto.InternalMessageInfo

func (m *HealthStats) GetSystemStatus() *SystemHealthStats {
	if m != nil {
		return m.SystemStatus
	}
	return nil
}

func (m *HealthStats) GetServiceStatus() map[string]*ServiceHealthStats {
	if m != nil {
		return m.ServiceStatus
	}
	return nil
}

func (m *HealthStats) GetHealth() *HealthStatus {
	if m != nil {
		return m.Health
	}
	return nil
}

func (m *HealthStats) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type SystemHealthStats struct {
	// Unix time on the gateway
	Time uint64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	// Total cpu utilization system-wide (as a percentage)
	CpuUtilPct float32 `protobuf:"fixed32,2,opt,name=cpu_util_pct,json=cpuUtilPct,proto3" json:"cpu_util_pct,omitempty"`
	// Total physical memory on the system
	MemTotalBytes uint64 `protobuf:"varint,3,opt,name=mem_total_bytes,json=memTotalBytes,proto3" json:"mem_total_bytes,omitempty"`
	// Total memory available
	MemAvailableBytes    uint64   `protobuf:"varint,4,opt,name=mem_available_bytes,json=memAvailableBytes,proto3" json:"mem_available_bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SystemHealthStats) Reset()         { *m = SystemHealthStats{} }
func (m *SystemHealthStats) String() string { return proto.CompactTextString(m) }
func (*SystemHealthStats) ProtoMessage()    {}
func (*SystemHealthStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfb4500c35b642ae, []int{2}
}

func (m *SystemHealthStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SystemHealthStats.Unmarshal(m, b)
}
func (m *SystemHealthStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SystemHealthStats.Marshal(b, m, deterministic)
}
func (m *SystemHealthStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemHealthStats.Merge(m, src)
}
func (m *SystemHealthStats) XXX_Size() int {
	return xxx_messageInfo_SystemHealthStats.Size(m)
}
func (m *SystemHealthStats) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemHealthStats.DiscardUnknown(m)
}

var xxx_messageInfo_SystemHealthStats proto.InternalMessageInfo

func (m *SystemHealthStats) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *SystemHealthStats) GetCpuUtilPct() float32 {
	if m != nil {
		return m.CpuUtilPct
	}
	return 0
}

func (m *SystemHealthStats) GetMemTotalBytes() uint64 {
	if m != nil {
		return m.MemTotalBytes
	}
	return 0
}

func (m *SystemHealthStats) GetMemAvailableBytes() uint64 {
	if m != nil {
		return m.MemAvailableBytes
	}
	return 0
}

type ServiceHealthStats struct {
	ServiceState         ServiceHealthStats_ServiceState `protobuf:"varint,1,opt,name=service_state,json=serviceState,proto3,enum=magma.feg.ServiceHealthStats_ServiceState" json:"service_state,omitempty"`
	ServiceHealthStatus  *HealthStatus                   `protobuf:"bytes,2,opt,name=service_health_status,json=serviceHealthStatus,proto3" json:"service_health_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *ServiceHealthStats) Reset()         { *m = ServiceHealthStats{} }
func (m *ServiceHealthStats) String() string { return proto.CompactTextString(m) }
func (*ServiceHealthStats) ProtoMessage()    {}
func (*ServiceHealthStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfb4500c35b642ae, []int{3}
}

func (m *ServiceHealthStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceHealthStats.Unmarshal(m, b)
}
func (m *ServiceHealthStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceHealthStats.Marshal(b, m, deterministic)
}
func (m *ServiceHealthStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceHealthStats.Merge(m, src)
}
func (m *ServiceHealthStats) XXX_Size() int {
	return xxx_messageInfo_ServiceHealthStats.Size(m)
}
func (m *ServiceHealthStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceHealthStats.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceHealthStats proto.InternalMessageInfo

func (m *ServiceHealthStats) GetServiceState() ServiceHealthStats_ServiceState {
	if m != nil {
		return m.ServiceState
	}
	return ServiceHealthStats_AVAILABLE
}

func (m *ServiceHealthStats) GetServiceHealthStatus() *HealthStatus {
	if m != nil {
		return m.ServiceHealthStatus
	}
	return nil
}

type HealthStatus struct {
	Health HealthStatus_HealthState `protobuf:"varint,1,opt,name=health,proto3,enum=magma.feg.HealthStatus_HealthState" json:"health,omitempty"`
	// String to provide description for health status
	HealthMessage        string   `protobuf:"bytes,2,opt,name=health_message,json=healthMessage,proto3" json:"health_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthStatus) Reset()         { *m = HealthStatus{} }
func (m *HealthStatus) String() string { return proto.CompactTextString(m) }
func (*HealthStatus) ProtoMessage()    {}
func (*HealthStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfb4500c35b642ae, []int{4}
}

func (m *HealthStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthStatus.Unmarshal(m, b)
}
func (m *HealthStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthStatus.Marshal(b, m, deterministic)
}
func (m *HealthStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthStatus.Merge(m, src)
}
func (m *HealthStatus) XXX_Size() int {
	return xxx_messageInfo_HealthStatus.Size(m)
}
func (m *HealthStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthStatus.DiscardUnknown(m)
}

var xxx_messageInfo_HealthStatus proto.InternalMessageInfo

func (m *HealthStatus) GetHealth() HealthStatus_HealthState {
	if m != nil {
		return m.Health
	}
	return HealthStatus_HEALTHY
}

func (m *HealthStatus) GetHealthMessage() string {
	if m != nil {
		return m.HealthMessage
	}
	return ""
}

type HealthResponse struct {
	Action HealthResponse_RequestedAction `protobuf:"varint,1,opt,name=action,proto3,enum=magma.feg.HealthResponse_RequestedAction" json:"action,omitempty"`
	// Unix time of when the update occurred
	Time                 uint64   `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthResponse) Reset()         { *m = HealthResponse{} }
func (m *HealthResponse) String() string { return proto.CompactTextString(m) }
func (*HealthResponse) ProtoMessage()    {}
func (*HealthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfb4500c35b642ae, []int{5}
}

func (m *HealthResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthResponse.Unmarshal(m, b)
}
func (m *HealthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthResponse.Marshal(b, m, deterministic)
}
func (m *HealthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthResponse.Merge(m, src)
}
func (m *HealthResponse) XXX_Size() int {
	return xxx_messageInfo_HealthResponse.Size(m)
}
func (m *HealthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HealthResponse proto.InternalMessageInfo

func (m *HealthResponse) GetAction() HealthResponse_RequestedAction {
	if m != nil {
		return m.Action
	}
	return HealthResponse_NONE
}

func (m *HealthResponse) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type ClusterState struct {
	// The logical id of the currently active gateway
	ActiveGatewayLogicalId string `protobuf:"bytes,1,opt,name=active_gateway_logical_id,json=activeGatewayLogicalId,proto3" json:"active_gateway_logical_id,omitempty"`
	// Unix time of when the cluster state update occurred
	Time                 uint64   `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterState) Reset()         { *m = ClusterState{} }
func (m *ClusterState) String() string { return proto.CompactTextString(m) }
func (*ClusterState) ProtoMessage()    {}
func (*ClusterState) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfb4500c35b642ae, []int{6}
}

func (m *ClusterState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterState.Unmarshal(m, b)
}
func (m *ClusterState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterState.Marshal(b, m, deterministic)
}
func (m *ClusterState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterState.Merge(m, src)
}
func (m *ClusterState) XXX_Size() int {
	return xxx_messageInfo_ClusterState.Size(m)
}
func (m *ClusterState) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterState.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterState proto.InternalMessageInfo

func (m *ClusterState) GetActiveGatewayLogicalId() string {
	if m != nil {
		return m.ActiveGatewayLogicalId
	}
	return ""
}

func (m *ClusterState) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type ClusterStateRequest struct {
	// NetworkID that the cluster is registered in
	NetworkId string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// Cluster's clusterID
	ClusterId            string   `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterStateRequest) Reset()         { *m = ClusterStateRequest{} }
func (m *ClusterStateRequest) String() string { return proto.CompactTextString(m) }
func (*ClusterStateRequest) ProtoMessage()    {}
func (*ClusterStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfb4500c35b642ae, []int{7}
}

func (m *ClusterStateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterStateRequest.Unmarshal(m, b)
}
func (m *ClusterStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterStateRequest.Marshal(b, m, deterministic)
}
func (m *ClusterStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterStateRequest.Merge(m, src)
}
func (m *ClusterStateRequest) XXX_Size() int {
	return xxx_messageInfo_ClusterStateRequest.Size(m)
}
func (m *ClusterStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterStateRequest proto.InternalMessageInfo

func (m *ClusterStateRequest) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *ClusterStateRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type GatewayStatusRequest struct {
	// Gateway's network id
	NetworkId string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// Gateway's logical id
	LogicalId            string   `protobuf:"bytes,2,opt,name=logical_id,json=logicalId,proto3" json:"logical_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewayStatusRequest) Reset()         { *m = GatewayStatusRequest{} }
func (m *GatewayStatusRequest) String() string { return proto.CompactTextString(m) }
func (*GatewayStatusRequest) ProtoMessage()    {}
func (*GatewayStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfb4500c35b642ae, []int{8}
}

func (m *GatewayStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayStatusRequest.Unmarshal(m, b)
}
func (m *GatewayStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayStatusRequest.Marshal(b, m, deterministic)
}
func (m *GatewayStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayStatusRequest.Merge(m, src)
}
func (m *GatewayStatusRequest) XXX_Size() int {
	return xxx_messageInfo_GatewayStatusRequest.Size(m)
}
func (m *GatewayStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayStatusRequest proto.InternalMessageInfo

func (m *GatewayStatusRequest) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *GatewayStatusRequest) GetLogicalId() string {
	if m != nil {
		return m.LogicalId
	}
	return ""
}

func init() {
	proto.RegisterEnum("magma.feg.ServiceHealthStats_ServiceState", ServiceHealthStats_ServiceState_name, ServiceHealthStats_ServiceState_value)
	proto.RegisterEnum("magma.feg.HealthStatus_HealthState", HealthStatus_HealthState_name, HealthStatus_HealthState_value)
	proto.RegisterEnum("magma.feg.HealthResponse_RequestedAction", HealthResponse_RequestedAction_name, HealthResponse_RequestedAction_value)
	proto.RegisterType((*HealthRequest)(nil), "magma.feg.HealthRequest")
	proto.RegisterType((*HealthStats)(nil), "magma.feg.HealthStats")
	proto.RegisterMapType((map[string]*ServiceHealthStats)(nil), "magma.feg.HealthStats.ServiceStatusEntry")
	proto.RegisterType((*SystemHealthStats)(nil), "magma.feg.SystemHealthStats")
	proto.RegisterType((*ServiceHealthStats)(nil), "magma.feg.ServiceHealthStats")
	proto.RegisterType((*HealthStatus)(nil), "magma.feg.HealthStatus")
	proto.RegisterType((*HealthResponse)(nil), "magma.feg.HealthResponse")
	proto.RegisterType((*ClusterState)(nil), "magma.feg.ClusterState")
	proto.RegisterType((*ClusterStateRequest)(nil), "magma.feg.ClusterStateRequest")
	proto.RegisterType((*GatewayStatusRequest)(nil), "magma.feg.GatewayStatusRequest")
}

func init() { proto.RegisterFile("feg/protos/health.proto", fileDescriptor_cfb4500c35b642ae) }

var fileDescriptor_cfb4500c35b642ae = []byte{
	// 755 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x5f, 0x6f, 0xda, 0x48,
	0x10, 0xc7, 0x84, 0xe3, 0x8e, 0xc1, 0xfc, 0xc9, 0xe6, 0x2e, 0x21, 0xdc, 0xe5, 0x0e, 0xf9, 0x74,
	0xa7, 0xe4, 0x1e, 0x8c, 0x44, 0x5e, 0x2e, 0xcd, 0x93, 0x93, 0xd2, 0x84, 0x96, 0x40, 0x64, 0xa0,
	0x55, 0x2a, 0x55, 0xd6, 0xc6, 0x6c, 0x88, 0x15, 0x1b, 0x53, 0x76, 0x4d, 0xc4, 0x87, 0xe9, 0x43,
	0xd5, 0x7e, 0x98, 0x7e, 0x8e, 0x7e, 0x92, 0xca, 0xbb, 0x6b, 0xd8, 0x26, 0x10, 0xf5, 0xc9, 0xde,
	0x99, 0xdf, 0xfc, 0xe6, 0x37, 0x3b, 0x33, 0x36, 0xec, 0xdc, 0x90, 0x51, 0x7d, 0x32, 0x0d, 0x59,
	0x48, 0xeb, 0xb7, 0x04, 0xfb, 0xec, 0xd6, 0xe4, 0x27, 0x94, 0x0b, 0xf0, 0x28, 0xc0, 0xe6, 0x0d,
	0x19, 0x19, 0x2f, 0xa1, 0x70, 0xce, 0x5d, 0x36, 0x79, 0x1f, 0x11, 0xca, 0xd0, 0x11, 0xe8, 0x02,
	0xeb, 0x50, 0x86, 0x19, 0xad, 0x68, 0x35, 0x6d, 0x3f, 0xdf, 0xd8, 0x36, 0x17, 0x21, 0xa6, 0xc0,
	0xf7, 0x62, 0xaf, 0x9d, 0xbf, 0x5d, 0x1e, 0x8c, 0x2f, 0x69, 0xc8, 0x2b, 0x4e, 0x64, 0x41, 0x81,
	0xce, 0x29, 0x23, 0x01, 0xa7, 0x8a, 0x12, 0xae, 0x3f, 0x14, 0xae, 0x1e, 0xf7, 0xab, 0x8c, 0xba,
	0x08, 0xe9, 0xf1, 0x08, 0x74, 0x09, 0x45, 0x4a, 0xa6, 0x33, 0xcf, 0x25, 0x09, 0x47, 0xba, 0xb6,
	0xb1, 0x9f, 0x6f, 0x1c, 0xac, 0xd6, 0x63, 0xf6, 0x04, 0x58, 0x44, 0x37, 0xc7, 0x6c, 0x3a, 0xb7,
	0x0b, 0x54, 0xb5, 0xa1, 0x3a, 0x64, 0x85, 0xe6, 0xca, 0x06, 0x57, 0xb3, 0xb3, 0x92, 0x29, 0xa2,
	0xb6, 0x84, 0x21, 0x04, 0x19, 0xe6, 0x05, 0xa4, 0x92, 0xa9, 0x69, 0xfb, 0x19, 0x9b, 0xbf, 0x57,
	0x1d, 0x40, 0x8f, 0x33, 0xa1, 0x32, 0x6c, 0xdc, 0x91, 0x39, 0xaf, 0x32, 0x67, 0xc7, 0xaf, 0xe8,
	0x10, 0x7e, 0x9a, 0x61, 0x3f, 0x22, 0x95, 0x34, 0xcf, 0xb5, 0xa7, 0x56, 0x2e, 0xe2, 0xd5, 0xd2,
	0x05, 0xf6, 0x59, 0xfa, 0x7f, 0xcd, 0xf8, 0xa8, 0xc1, 0xe6, 0xa3, 0xbb, 0x59, 0x48, 0xd1, 0x96,
	0x52, 0x50, 0x0d, 0x74, 0x77, 0x12, 0x39, 0x11, 0xf3, 0x7c, 0x67, 0xe2, 0x32, 0x9e, 0x29, 0x6d,
	0x83, 0x3b, 0x89, 0x06, 0xcc, 0xf3, 0x2f, 0x5d, 0x86, 0xfe, 0x85, 0x52, 0x40, 0x02, 0x87, 0x85,
	0x0c, 0xfb, 0xce, 0xf5, 0x9c, 0x11, 0xca, 0x4b, 0xcf, 0xd8, 0x85, 0x80, 0x04, 0xfd, 0xd8, 0x7a,
	0x12, 0x1b, 0x91, 0x09, 0x5b, 0x31, 0x0e, 0xcf, 0xb0, 0xe7, 0xe3, 0x6b, 0x9f, 0x48, 0xac, 0xa8,
	0x7b, 0x33, 0x20, 0x81, 0x95, 0x78, 0x38, 0xde, 0xf8, 0xaa, 0x2d, 0x6e, 0x41, 0x15, 0xd9, 0x85,
	0x82, 0xda, 0x32, 0xa1, 0xb6, 0xd8, 0xf8, 0xef, 0xc9, 0xda, 0xd5, 0xc6, 0x11, 0x5b, 0x57, 0x5a,
	0x46, 0xd0, 0x2b, 0xf8, 0x2d, 0x21, 0x54, 0x26, 0x93, 0x8f, 0xc2, 0x93, 0x0d, 0xdc, 0xa2, 0x0f,
	0xd3, 0x44, 0xd4, 0x30, 0x41, 0x57, 0x53, 0xa1, 0x02, 0xe4, 0xac, 0xd7, 0x56, 0xab, 0x6d, 0x9d,
	0xb4, 0x9b, 0xe5, 0x14, 0x2a, 0x41, 0x7e, 0xd0, 0x59, 0x1a, 0x34, 0xe3, 0x83, 0x06, 0xba, 0x4a,
	0x80, 0x8e, 0x17, 0xf3, 0x23, 0xea, 0xfa, 0x7b, 0x4d, 0x7a, 0xe5, 0x40, 0x16, 0xb3, 0xf4, 0x0f,
	0x14, 0x65, 0x09, 0x01, 0xa1, 0x14, 0x8f, 0xc4, 0x60, 0xe4, 0xec, 0x82, 0xb0, 0x5e, 0x08, 0xa3,
	0x71, 0xa0, 0xee, 0x11, 0x41, 0x79, 0xf8, 0xf9, 0xbc, 0x69, 0xb5, 0xfb, 0xe7, 0x57, 0xe5, 0x54,
	0x2c, 0x78, 0xd0, 0x49, 0x8e, 0x9a, 0xf1, 0x59, 0x83, 0x62, 0xb2, 0xc0, 0x74, 0x12, 0x8e, 0x29,
	0x41, 0x16, 0x64, 0xb1, 0xcb, 0xbc, 0x70, 0x2c, 0x15, 0x3e, 0xde, 0x95, 0x04, 0x6a, 0xca, 0xa5,
	0x27, 0x43, 0x8b, 0x07, 0xd8, 0x32, 0x70, 0x31, 0x68, 0xe9, 0xe5, 0xa0, 0x19, 0xc7, 0x50, 0x7a,
	0x00, 0x47, 0xbf, 0x40, 0xa6, 0xd3, 0xed, 0xc8, 0x7b, 0xeb, 0x5d, 0xf5, 0xfa, 0xcd, 0x0b, 0xe7,
	0x79, 0xf7, 0x4d, 0xa7, 0xac, 0xc5, 0x32, 0xa5, 0x61, 0x70, 0x59, 0x4e, 0x1b, 0xef, 0x40, 0x3f,
	0xf5, 0x23, 0xca, 0xc8, 0x54, 0x94, 0x74, 0x04, 0xbb, 0x71, 0xaa, 0x19, 0x71, 0x46, 0x98, 0x91,
	0x7b, 0x3c, 0x77, 0xfc, 0x70, 0xe4, 0xb9, 0xd8, 0x77, 0xbc, 0xa1, 0x5c, 0xa0, 0x6d, 0x01, 0x38,
	0x13, 0xfe, 0xb6, 0x70, 0xb7, 0x86, 0x2b, 0xb5, 0xf5, 0x60, 0x4b, 0xa5, 0x4f, 0xbe, 0x65, 0x7b,
	0x00, 0x63, 0xc2, 0xee, 0xc3, 0xe9, 0xdd, 0x92, 0x36, 0x27, 0x2d, 0xad, 0x61, 0xec, 0x76, 0x45,
	0x54, 0xec, 0x16, 0x9d, 0xc8, 0x49, 0x4b, 0x6b, 0x68, 0xf4, 0xe1, 0x57, 0x99, 0x5c, 0x0e, 0xd4,
	0x0f, 0xb3, 0x2a, 0xb5, 0x48, 0x56, 0x3f, 0x91, 0xdf, 0xe8, 0x42, 0x56, 0x34, 0x01, 0x35, 0x41,
	0x1f, 0x4c, 0x86, 0x98, 0xc9, 0x01, 0x45, 0x95, 0x15, 0x7d, 0xe2, 0x19, 0xab, 0xbb, 0x6b, 0x3b,
	0x68, 0xa4, 0x1a, 0x9f, 0x34, 0xc8, 0x9f, 0xfa, 0x61, 0x34, 0x94, 0x34, 0x2f, 0x20, 0x77, 0x46,
	0x98, 0x3c, 0xfc, 0xa5, 0x44, 0xae, 0x2a, 0xa6, 0xba, 0xe6, 0xc3, 0x6e, 0xa4, 0x50, 0x1b, 0x4a,
	0x67, 0x84, 0x7d, 0xd7, 0xb5, 0x3f, 0x15, 0xf0, 0x8a, 0xfb, 0xae, 0xee, 0xac, 0xf1, 0x1b, 0xa9,
	0x93, 0xdf, 0xdf, 0xee, 0x72, 0x5f, 0x3d, 0xfe, 0x27, 0xb9, 0xb1, 0xdc, 0xfa, 0x28, 0x94, 0x3f,
	0xa7, 0xeb, 0x2c, 0x7f, 0x1e, 0x7e, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x91, 0xbf, 0xaa, 0x84, 0xb1,
	0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HealthClient is the client API for Health service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HealthClient interface {
	// Update the cloud representation of gateway health
	UpdateHealth(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type healthClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthClient(cc grpc.ClientConnInterface) HealthClient {
	return &healthClient{cc}
}

func (c *healthClient) UpdateHealth(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/magma.feg.Health/UpdateHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthServer is the server API for Health service.
type HealthServer interface {
	// Update the cloud representation of gateway health
	UpdateHealth(context.Context, *HealthRequest) (*HealthResponse, error)
}

// UnimplementedHealthServer can be embedded to have forward compatible implementations.
type UnimplementedHealthServer struct {
}

func (*UnimplementedHealthServer) UpdateHealth(ctx context.Context, req *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHealth not implemented")
}

func RegisterHealthServer(s *grpc.Server, srv HealthServer) {
	s.RegisterService(&_Health_serviceDesc, srv)
}

func _Health_UpdateHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServer).UpdateHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.Health/UpdateHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServer).UpdateHealth(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Health_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.feg.Health",
	HandlerType: (*HealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateHealth",
			Handler:    _Health_UpdateHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feg/protos/health.proto",
}

// CloudHealthClient is the client API for CloudHealth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CloudHealthClient interface {
	// Get the health statistics of a gateway
	GetHealth(ctx context.Context, in *GatewayStatusRequest, opts ...grpc.CallOption) (*HealthStats, error)
	// Get cluster state for (networkID, clusterID) tuple
	GetClusterState(ctx context.Context, in *ClusterStateRequest, opts ...grpc.CallOption) (*ClusterState, error)
}

type cloudHealthClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudHealthClient(cc grpc.ClientConnInterface) CloudHealthClient {
	return &cloudHealthClient{cc}
}

func (c *cloudHealthClient) GetHealth(ctx context.Context, in *GatewayStatusRequest, opts ...grpc.CallOption) (*HealthStats, error) {
	out := new(HealthStats)
	err := c.cc.Invoke(ctx, "/magma.feg.CloudHealth/GetHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHealthClient) GetClusterState(ctx context.Context, in *ClusterStateRequest, opts ...grpc.CallOption) (*ClusterState, error) {
	out := new(ClusterState)
	err := c.cc.Invoke(ctx, "/magma.feg.CloudHealth/GetClusterState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudHealthServer is the server API for CloudHealth service.
type CloudHealthServer interface {
	// Get the health statistics of a gateway
	GetHealth(context.Context, *GatewayStatusRequest) (*HealthStats, error)
	// Get cluster state for (networkID, clusterID) tuple
	GetClusterState(context.Context, *ClusterStateRequest) (*ClusterState, error)
}

// UnimplementedCloudHealthServer can be embedded to have forward compatible implementations.
type UnimplementedCloudHealthServer struct {
}

func (*UnimplementedCloudHealthServer) GetHealth(ctx context.Context, req *GatewayStatusRequest) (*HealthStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (*UnimplementedCloudHealthServer) GetClusterState(ctx context.Context, req *ClusterStateRequest) (*ClusterState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterState not implemented")
}

func RegisterCloudHealthServer(s *grpc.Server, srv CloudHealthServer) {
	s.RegisterService(&_CloudHealth_serviceDesc, srv)
}

func _CloudHealth_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHealthServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.CloudHealth/GetHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHealthServer).GetHealth(ctx, req.(*GatewayStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHealth_GetClusterState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHealthServer).GetClusterState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.CloudHealth/GetClusterState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHealthServer).GetClusterState(ctx, req.(*ClusterStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudHealth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.feg.CloudHealth",
	HandlerType: (*CloudHealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHealth",
			Handler:    _CloudHealth_GetHealth_Handler,
		},
		{
			MethodName: "GetClusterState",
			Handler:    _CloudHealth_GetClusterState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feg/protos/health.proto",
}
