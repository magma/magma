// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SwxProxyClient is the client API for SwxProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SwxProxyClient interface {
	// Retrieve authentication vectors from the HSS using MAR/MAA
	Authenticate(ctx context.Context, in *AuthenticationRequest, opts ...grpc.CallOption) (*AuthenticationAnswer, error)
	// Register the AAA server serving a user to the HSS using SAR/SAA
	Register(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationAnswer, error)
	// Deregister the AAA server serving a user to the HSS using SAR/SAA
	Deregister(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationAnswer, error)
}

type swxProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewSwxProxyClient(cc grpc.ClientConnInterface) SwxProxyClient {
	return &swxProxyClient{cc}
}

func (c *swxProxyClient) Authenticate(ctx context.Context, in *AuthenticationRequest, opts ...grpc.CallOption) (*AuthenticationAnswer, error) {
	out := new(AuthenticationAnswer)
	err := c.cc.Invoke(ctx, "/magma.feg.SwxProxy/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swxProxyClient) Register(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationAnswer, error) {
	out := new(RegistrationAnswer)
	err := c.cc.Invoke(ctx, "/magma.feg.SwxProxy/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swxProxyClient) Deregister(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationAnswer, error) {
	out := new(RegistrationAnswer)
	err := c.cc.Invoke(ctx, "/magma.feg.SwxProxy/Deregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwxProxyServer is the server API for SwxProxy service.
// All implementations should embed UnimplementedSwxProxyServer
// for forward compatibility
type SwxProxyServer interface {
	// Retrieve authentication vectors from the HSS using MAR/MAA
	Authenticate(context.Context, *AuthenticationRequest) (*AuthenticationAnswer, error)
	// Register the AAA server serving a user to the HSS using SAR/SAA
	Register(context.Context, *RegistrationRequest) (*RegistrationAnswer, error)
	// Deregister the AAA server serving a user to the HSS using SAR/SAA
	Deregister(context.Context, *RegistrationRequest) (*RegistrationAnswer, error)
}

// UnimplementedSwxProxyServer should be embedded to have forward compatible implementations.
type UnimplementedSwxProxyServer struct {
}

func (UnimplementedSwxProxyServer) Authenticate(context.Context, *AuthenticationRequest) (*AuthenticationAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedSwxProxyServer) Register(context.Context, *RegistrationRequest) (*RegistrationAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedSwxProxyServer) Deregister(context.Context, *RegistrationRequest) (*RegistrationAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deregister not implemented")
}

// UnsafeSwxProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SwxProxyServer will
// result in compilation errors.
type UnsafeSwxProxyServer interface {
	mustEmbedUnimplementedSwxProxyServer()
}

func RegisterSwxProxyServer(s grpc.ServiceRegistrar, srv SwxProxyServer) {
	s.RegisterService(&SwxProxy_ServiceDesc, srv)
}

func _SwxProxy_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwxProxyServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.SwxProxy/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwxProxyServer).Authenticate(ctx, req.(*AuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwxProxy_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwxProxyServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.SwxProxy/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwxProxyServer).Register(ctx, req.(*RegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwxProxy_Deregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwxProxyServer).Deregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.SwxProxy/Deregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwxProxyServer).Deregister(ctx, req.(*RegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SwxProxy_ServiceDesc is the grpc.ServiceDesc for SwxProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SwxProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.feg.SwxProxy",
	HandlerType: (*SwxProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _SwxProxy_Authenticate_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _SwxProxy_Register_Handler,
		},
		{
			MethodName: "Deregister",
			Handler:    _SwxProxy_Deregister_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feg/protos/swx_proxy.proto",
}

// SwxGatewayServiceClient is the client API for SwxGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SwxGatewayServiceClient interface {
	// TerminateRegistration - handler of SWx Registration-Termination,
	// see: http://www.qtc.jp/3GPP/Specs/29273-920.pdf Section 8.2.2.4
	TerminateRegistration(ctx context.Context, in *RegistrationTerminationRequest, opts ...grpc.CallOption) (*RegistrationAnswer, error)
}

type swxGatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSwxGatewayServiceClient(cc grpc.ClientConnInterface) SwxGatewayServiceClient {
	return &swxGatewayServiceClient{cc}
}

func (c *swxGatewayServiceClient) TerminateRegistration(ctx context.Context, in *RegistrationTerminationRequest, opts ...grpc.CallOption) (*RegistrationAnswer, error) {
	out := new(RegistrationAnswer)
	err := c.cc.Invoke(ctx, "/magma.feg.SwxGatewayService/TerminateRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwxGatewayServiceServer is the server API for SwxGatewayService service.
// All implementations should embed UnimplementedSwxGatewayServiceServer
// for forward compatibility
type SwxGatewayServiceServer interface {
	// TerminateRegistration - handler of SWx Registration-Termination,
	// see: http://www.qtc.jp/3GPP/Specs/29273-920.pdf Section 8.2.2.4
	TerminateRegistration(context.Context, *RegistrationTerminationRequest) (*RegistrationAnswer, error)
}

// UnimplementedSwxGatewayServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSwxGatewayServiceServer struct {
}

func (UnimplementedSwxGatewayServiceServer) TerminateRegistration(context.Context, *RegistrationTerminationRequest) (*RegistrationAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateRegistration not implemented")
}

// UnsafeSwxGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SwxGatewayServiceServer will
// result in compilation errors.
type UnsafeSwxGatewayServiceServer interface {
	mustEmbedUnimplementedSwxGatewayServiceServer()
}

func RegisterSwxGatewayServiceServer(s grpc.ServiceRegistrar, srv SwxGatewayServiceServer) {
	s.RegisterService(&SwxGatewayService_ServiceDesc, srv)
}

func _SwxGatewayService_TerminateRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationTerminationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwxGatewayServiceServer).TerminateRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.SwxGatewayService/TerminateRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwxGatewayServiceServer).TerminateRegistration(ctx, req.(*RegistrationTerminationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SwxGatewayService_ServiceDesc is the grpc.ServiceDesc for SwxGatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SwxGatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.feg.SwxGatewayService",
	HandlerType: (*SwxGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TerminateRegistration",
			Handler:    _SwxGatewayService_TerminateRegistration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feg/protos/swx_proxy.proto",
}
