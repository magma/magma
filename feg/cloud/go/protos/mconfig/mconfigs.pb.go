//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.10.0
// source: feg/protos/mconfig/mconfigs.proto

package mconfig

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	protos "magma/orc8r/lib/go/protos"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GyInitMethod int32

const (
	GyInitMethod_RESERVED    GyInitMethod = 0 // proto enums must start with 0
	GyInitMethod_PER_SESSION GyInitMethod = 1
	GyInitMethod_PER_KEY     GyInitMethod = 2
)

// Enum value maps for GyInitMethod.
var (
	GyInitMethod_name = map[int32]string{
		0: "RESERVED",
		1: "PER_SESSION",
		2: "PER_KEY",
	}
	GyInitMethod_value = map[string]int32{
		"RESERVED":    0,
		"PER_SESSION": 1,
		"PER_KEY":     2,
	}
)

func (x GyInitMethod) Enum() *GyInitMethod {
	p := new(GyInitMethod)
	*p = x
	return p
}

func (x GyInitMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GyInitMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_feg_protos_mconfig_mconfigs_proto_enumTypes[0].Descriptor()
}

func (GyInitMethod) Type() protoreflect.EnumType {
	return &file_feg_protos_mconfig_mconfigs_proto_enumTypes[0]
}

func (x GyInitMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GyInitMethod.Descriptor instead.
func (GyInitMethod) EnumDescriptor() ([]byte, []int) {
	return file_feg_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{0}
}

//------------------------------------------------------------------------------
// FeG configs
//------------------------------------------------------------------------------
type DiamClientConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol          string `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"` // tcp/sctp/...
	Address           string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`   // server's host:port
	Retransmits       uint32 `protobuf:"varint,3,opt,name=retransmits,proto3" json:"retransmits,omitempty"`
	WatchdogInterval  uint32 `protobuf:"varint,4,opt,name=watchdog_interval,json=watchdogInterval,proto3" json:"watchdog_interval,omitempty"`
	RetryCount        uint32 `protobuf:"varint,5,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`
	LocalAddress      string `protobuf:"bytes,6,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"` // client's local address to bind socket to IP:port OR :port
	ProductName       string `protobuf:"bytes,7,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	Realm             string `protobuf:"bytes,8,opt,name=realm,proto3" json:"realm,omitempty"`                                                      // diameter realm
	Host              string `protobuf:"bytes,9,opt,name=host,proto3" json:"host,omitempty"`                                                        // diameter host
	DestRealm         string `protobuf:"bytes,10,opt,name=dest_realm,json=destRealm,proto3" json:"dest_realm,omitempty"`                            // server diameter realm
	DestHost          string `protobuf:"bytes,11,opt,name=dest_host,json=destHost,proto3" json:"dest_host,omitempty"`                               // server diameter host
	DisableDestHost   bool   `protobuf:"varint,12,opt,name=disable_dest_host,json=disableDestHost,proto3" json:"disable_dest_host,omitempty"`       // don't include dest_host AVP in diameter requests
	OverwriteDestHost bool   `protobuf:"varint,13,opt,name=overwrite_dest_host,json=overwriteDestHost,proto3" json:"overwrite_dest_host,omitempty"` // overwrite dest_host AVP in diameter requests even if the message includes it
	RequestTimeout    uint32 `protobuf:"varint,14,opt,name=request_timeout,json=requestTimeout,proto3" json:"request_timeout,omitempty"`            // timeout to wait before ignore response
}

func (x *DiamClientConfig) Reset() {
	*x = DiamClientConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiamClientConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiamClientConfig) ProtoMessage() {}

func (x *DiamClientConfig) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiamClientConfig.ProtoReflect.Descriptor instead.
func (*DiamClientConfig) Descriptor() ([]byte, []int) {
	return file_feg_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{0}
}

func (x *DiamClientConfig) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *DiamClientConfig) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DiamClientConfig) GetRetransmits() uint32 {
	if x != nil {
		return x.Retransmits
	}
	return 0
}

func (x *DiamClientConfig) GetWatchdogInterval() uint32 {
	if x != nil {
		return x.WatchdogInterval
	}
	return 0
}

func (x *DiamClientConfig) GetRetryCount() uint32 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *DiamClientConfig) GetLocalAddress() string {
	if x != nil {
		return x.LocalAddress
	}
	return ""
}

func (x *DiamClientConfig) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *DiamClientConfig) GetRealm() string {
	if x != nil {
		return x.Realm
	}
	return ""
}

func (x *DiamClientConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DiamClientConfig) GetDestRealm() string {
	if x != nil {
		return x.DestRealm
	}
	return ""
}

func (x *DiamClientConfig) GetDestHost() string {
	if x != nil {
		return x.DestHost
	}
	return ""
}

func (x *DiamClientConfig) GetDisableDestHost() bool {
	if x != nil {
		return x.DisableDestHost
	}
	return false
}

func (x *DiamClientConfig) GetOverwriteDestHost() bool {
	if x != nil {
		return x.OverwriteDestHost
	}
	return false
}

func (x *DiamClientConfig) GetRequestTimeout() uint32 {
	if x != nil {
		return x.RequestTimeout
	}
	return 0
}

type DiamServerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol     string `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`                             // tcp/sctp/...
	Address      string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`                               // host:port
	LocalAddress string `protobuf:"bytes,3,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"` // IP:port or :port
	DestHost     string `protobuf:"bytes,4,opt,name=dest_host,json=destHost,proto3" json:"dest_host,omitempty"`             // diameter host
	DestRealm    string `protobuf:"bytes,5,opt,name=dest_realm,json=destRealm,proto3" json:"dest_realm,omitempty"`          // diameter realm
}

func (x *DiamServerConfig) Reset() {
	*x = DiamServerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiamServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiamServerConfig) ProtoMessage() {}

func (x *DiamServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiamServerConfig.ProtoReflect.Descriptor instead.
func (*DiamServerConfig) Descriptor() ([]byte, []int) {
	return file_feg_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{1}
}

func (x *DiamServerConfig) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *DiamServerConfig) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DiamServerConfig) GetLocalAddress() string {
	if x != nil {
		return x.LocalAddress
	}
	return ""
}

func (x *DiamServerConfig) GetDestHost() string {
	if x != nil {
		return x.DestHost
	}
	return ""
}

func (x *DiamServerConfig) GetDestRealm() string {
	if x != nil {
		return x.DestRealm
	}
	return ""
}

type S6AConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel protos.LogLevel   `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	Server   *DiamClientConfig `protobuf:"bytes,5,opt,name=server,proto3" json:"server,omitempty"`
	// Percentage of request failures considered to be unhealthy
	RequestFailureThreshold float32 `protobuf:"fixed32,6,opt,name=request_failure_threshold,json=requestFailureThreshold,proto3" json:"request_failure_threshold,omitempty"`
	// Minimum number of requests necessary to consider a metrics snapshot valid
	MinimumRequestThreshold uint32   `protobuf:"varint,7,opt,name=minimum_request_threshold,json=minimumRequestThreshold,proto3" json:"minimum_request_threshold,omitempty"`
	PlmnIds                 []string `protobuf:"bytes,8,rep,name=PlmnIds,proto3" json:"PlmnIds,omitempty"`
}

func (x *S6AConfig) Reset() {
	*x = S6AConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S6AConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S6AConfig) ProtoMessage() {}

func (x *S6AConfig) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S6AConfig.ProtoReflect.Descriptor instead.
func (*S6AConfig) Descriptor() ([]byte, []int) {
	return file_feg_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{2}
}

func (x *S6AConfig) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel(0)
}

func (x *S6AConfig) GetServer() *DiamClientConfig {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *S6AConfig) GetRequestFailureThreshold() float32 {
	if x != nil {
		return x.RequestFailureThreshold
	}
	return 0
}

func (x *S6AConfig) GetMinimumRequestThreshold() uint32 {
	if x != nil {
		return x.MinimumRequestThreshold
	}
	return 0
}

func (x *S6AConfig) GetPlmnIds() []string {
	if x != nil {
		return x.PlmnIds
	}
	return nil
}

type VirtualApnRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// apn_filter is a Regex to match APN values
	ApnFilter string `protobuf:"bytes,1,opt,name=apn_filter,json=apnFilter,proto3" json:"apn_filter,omitempty"`
	// apn_overwrite is the new APN to overwrite with when filters match
	ApnOverwrite string `protobuf:"bytes,2,opt,name=apn_overwrite,json=apnOverwrite,proto3" json:"apn_overwrite,omitempty"`
	// charging_characteristics_filter is a Regex to match
	// ChargingCharacteristics values
	ChargingCharacteristicsFilter string `protobuf:"bytes,3,opt,name=charging_characteristics_filter,json=chargingCharacteristicsFilter,proto3" json:"charging_characteristics_filter,omitempty"`
}

func (x *VirtualApnRule) Reset() {
	*x = VirtualApnRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualApnRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualApnRule) ProtoMessage() {}

func (x *VirtualApnRule) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualApnRule.ProtoReflect.Descriptor instead.
func (*VirtualApnRule) Descriptor() ([]byte, []int) {
	return file_feg_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{3}
}

func (x *VirtualApnRule) GetApnFilter() string {
	if x != nil {
		return x.ApnFilter
	}
	return ""
}

func (x *VirtualApnRule) GetApnOverwrite() string {
	if x != nil {
		return x.ApnOverwrite
	}
	return ""
}

func (x *VirtualApnRule) GetChargingCharacteristicsFilter() string {
	if x != nil {
		return x.ChargingCharacteristicsFilter
	}
	return ""
}

type GxConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server          *DiamClientConfig   `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	OverwriteApn    string              `protobuf:"bytes,2,opt,name=OverwriteApn,proto3" json:"OverwriteApn,omitempty"` // Deprecated
	Servers         []*DiamClientConfig `protobuf:"bytes,3,rep,name=servers,proto3" json:"servers,omitempty"`
	DisableGx       bool                `protobuf:"varint,4,opt,name=DisableGx,proto3" json:"DisableGx,omitempty"`
	VirtualApnRules []*VirtualApnRule   `protobuf:"bytes,5,rep,name=virtual_apn_rules,json=virtualApnRules,proto3" json:"virtual_apn_rules,omitempty"`
}

func (x *GxConfig) Reset() {
	*x = GxConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GxConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GxConfig) ProtoMessage() {}

func (x *GxConfig) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GxConfig.ProtoReflect.Descriptor instead.
func (*GxConfig) Descriptor() ([]byte, []int) {
	return file_feg_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{4}
}

func (x *GxConfig) GetServer() *DiamClientConfig {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *GxConfig) GetOverwriteApn() string {
	if x != nil {
		return x.OverwriteApn
	}
	return ""
}

func (x *GxConfig) GetServers() []*DiamClientConfig {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *GxConfig) GetDisableGx() bool {
	if x != nil {
		return x.DisableGx
	}
	return false
}

func (x *GxConfig) GetVirtualApnRules() []*VirtualApnRule {
	if x != nil {
		return x.VirtualApnRules
	}
	return nil
}

type GyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server          *DiamClientConfig   `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	InitMethod      GyInitMethod        `protobuf:"varint,2,opt,name=init_method,json=initMethod,proto3,enum=magma.mconfig.GyInitMethod" json:"init_method,omitempty"`
	OverwriteApn    string              `protobuf:"bytes,3,opt,name=OverwriteApn,proto3" json:"OverwriteApn,omitempty"`
	Servers         []*DiamClientConfig `protobuf:"bytes,4,rep,name=servers,proto3" json:"servers,omitempty"`
	DisableGy       bool                `protobuf:"varint,5,opt,name=DisableGy,proto3" json:"DisableGy,omitempty"`
	VirtualApnRules []*VirtualApnRule   `protobuf:"bytes,6,rep,name=virtual_apn_rules,json=virtualApnRules,proto3" json:"virtual_apn_rules,omitempty"`
}

func (x *GyConfig) Reset() {
	*x = GyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GyConfig) ProtoMessage() {}

func (x *GyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GyConfig.ProtoReflect.Descriptor instead.
func (*GyConfig) Descriptor() ([]byte, []int) {
	return file_feg_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{5}
}

func (x *GyConfig) GetServer() *DiamClientConfig {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *GyConfig) GetInitMethod() GyInitMethod {
	if x != nil {
		return x.InitMethod
	}
	return GyInitMethod_RESERVED
}

func (x *GyConfig) GetOverwriteApn() string {
	if x != nil {
		return x.OverwriteApn
	}
	return ""
}

func (x *GyConfig) GetServers() []*DiamClientConfig {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *GyConfig) GetDisableGy() bool {
	if x != nil {
		return x.DisableGy
	}
	return false
}

func (x *GyConfig) GetVirtualApnRules() []*VirtualApnRule {
	if x != nil {
		return x.VirtualApnRules
	}
	return nil
}

type SessionProxyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	Gx       *GxConfig       `protobuf:"bytes,5,opt,name=gx,proto3" json:"gx,omitempty"`
	Gy       *GyConfig       `protobuf:"bytes,6,opt,name=gy,proto3" json:"gy,omitempty"`
	// Percentage of request failures considered to be unhealthy
	RequestFailureThreshold float32 `protobuf:"fixed32,7,opt,name=request_failure_threshold,json=requestFailureThreshold,proto3" json:"request_failure_threshold,omitempty"`
	// Minimum number of requests necessary to consider a metrics snapshot valid
	MinimumRequestThreshold uint32 `protobuf:"varint,8,opt,name=minimum_request_threshold,json=minimumRequestThreshold,proto3" json:"minimum_request_threshold,omitempty"`
}

func (x *SessionProxyConfig) Reset() {
	*x = SessionProxyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionProxyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionProxyConfig) ProtoMessage() {}

func (x *SessionProxyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionProxyConfig.ProtoReflect.Descriptor instead.
func (*SessionProxyConfig) Descriptor() ([]byte, []int) {
	return file_feg_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{6}
}

func (x *SessionProxyConfig) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel(0)
}

func (x *SessionProxyConfig) GetGx() *GxConfig {
	if x != nil {
		return x.Gx
	}
	return nil
}

func (x *SessionProxyConfig) GetGy() *GyConfig {
	if x != nil {
		return x.Gy
	}
	return nil
}

func (x *SessionProxyConfig) GetRequestFailureThreshold() float32 {
	if x != nil {
		return x.RequestFailureThreshold
	}
	return 0
}

func (x *SessionProxyConfig) GetMinimumRequestThreshold() uint32 {
	if x != nil {
		return x.MinimumRequestThreshold
	}
	return 0
}

type SwxConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel protos.LogLevel   `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	Server   *DiamClientConfig `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
	// Flag to ensure that a user is authorized for Non-3GPP IP Access
	VerifyAuthorization bool   `protobuf:"varint,3,opt,name=verify_authorization,json=verifyAuthorization,proto3" json:"verify_authorization,omitempty"`
	CacheTTLSeconds     uint32 `protobuf:"varint,4,opt,name=CacheTTLSeconds,proto3" json:"CacheTTLSeconds,omitempty"`
	// Percentage of request failures considered to be unhealthy
	RequestFailureThreshold float32 `protobuf:"fixed32,5,opt,name=request_failure_threshold,json=requestFailureThreshold,proto3" json:"request_failure_threshold,omitempty"`
	// Minimum number of requests necessary to consider a metrics snapshot valid
	MinimumRequestThreshold uint32 `protobuf:"varint,6,opt,name=minimum_request_threshold,json=minimumRequestThreshold,proto3" json:"minimum_request_threshold,omitempty"`
	// Flag to ensure that we send SAR with REGISTER following successful MAA
	RegisterOnAuth bool `protobuf:"varint,7,opt,name=register_on_auth,json=registerOnAuth,proto3" json:"register_on_auth,omitempty"`
	// use returned maa.AAAServerName to derive Origin Realm from
	DeriveUnregisterRealm bool `protobuf:"varint,8,opt,name=derive_unregister_realm,json=deriveUnregisterRealm,proto3" json:"derive_unregister_realm,omitempty"`
	// PLMN IDs served by HLR
	HlrPlmnIds []string `protobuf:"bytes,9,rep,name=hlr_plmn_ids,json=hlrPlmnIds,proto3" json:"hlr_plmn_ids,omitempty"`
	// Server where SWx points to (can be one or more than one)
	Servers []*DiamClientConfig `protobuf:"bytes,10,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (x *SwxConfig) Reset() {
	*x = SwxConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwxConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwxConfig) ProtoMessage() {}

func (x *SwxConfig) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwxConfig.ProtoReflect.Descriptor instead.
func (*SwxConfig) Descriptor() ([]byte, []int) {
	return file_feg_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{7}
}

func (x *SwxConfig) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel(0)
}

func (x *SwxConfig) GetServer() *DiamClientConfig {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *SwxConfig) GetVerifyAuthorization() bool {
	if x != nil {
		return x.VerifyAuthorization
	}
	return false
}

func (x *SwxConfig) GetCacheTTLSeconds() uint32 {
	if x != nil {
		return x.CacheTTLSeconds
	}
	return 0
}

func (x *SwxConfig) GetRequestFailureThreshold() float32 {
	if x != nil {
		return x.RequestFailureThreshold
	}
	return 0
}

func (x *SwxConfig) GetMinimumRequestThreshold() uint32 {
	if x != nil {
		return x.MinimumRequestThreshold
	}
	return 0
}

func (x *SwxConfig) GetRegisterOnAuth() bool {
	if x != nil {
		return x.RegisterOnAuth
	}
	return false
}

func (x *SwxConfig) GetDeriveUnregisterRealm() bool {
	if x != nil {
		return x.DeriveUnregisterRealm
	}
	return false
}

func (x *SwxConfig) GetHlrPlmnIds() []string {
	if x != nil {
		return x.HlrPlmnIds
	}
	return nil
}

func (x *SwxConfig) GetServers() []*DiamClientConfig {
	if x != nil {
		return x.Servers
	}
	return nil
}

type EapAkaConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel protos.LogLevel        `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	Timeout  *EapAkaConfig_Timeouts `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	PlmnIds  []string               `protobuf:"bytes,3,rep,name=PlmnIds,proto3" json:"PlmnIds,omitempty"`
	UseS6A   bool                   `protobuf:"varint,4,opt,name=UseS6a,proto3" json:"UseS6a,omitempty"`
	MncLen   int32                  `protobuf:"varint,5,opt,name=MncLen,proto3" json:"MncLen,omitempty"`
}

func (x *EapAkaConfig) Reset() {
	*x = EapAkaConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EapAkaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EapAkaConfig) ProtoMessage() {}

func (x *EapAkaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EapAkaConfig.ProtoReflect.Descriptor instead.
func (*EapAkaConfig) Descriptor() ([]byte, []int) {
	return file_feg_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{8}
}

func (x *EapAkaConfig) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel(0)
}

func (x *EapAkaConfig) GetTimeout() *EapAkaConfig_Timeouts {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *EapAkaConfig) GetPlmnIds() []string {
	if x != nil {
		return x.PlmnIds
	}
	return nil
}

func (x *EapAkaConfig) GetUseS6A() bool {
	if x != nil {
		return x.UseS6A
	}
	return false
}

func (x *EapAkaConfig) GetMncLen() int32 {
	if x != nil {
		return x.MncLen
	}
	return 0
}

// EapProviderTimeouts is a generic EAP provider timeout config for all new providers
// TODO: It should eventually replace EapAkaConfig as well, but due to the braking nature
//       of the switch farther planning is required
type EapProviderTimeouts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeMs            uint32 `protobuf:"varint,1,opt,name=ChallengeMs,proto3" json:"ChallengeMs,omitempty"`
	ErrorNotificationMs    uint32 `protobuf:"varint,2,opt,name=ErrorNotificationMs,proto3" json:"ErrorNotificationMs,omitempty"`
	SessionMs              uint32 `protobuf:"varint,3,opt,name=SessionMs,proto3" json:"SessionMs,omitempty"`
	SessionAuthenticatedMs uint32 `protobuf:"varint,4,opt,name=SessionAuthenticatedMs,proto3" json:"SessionAuthenticatedMs,omitempty"`
}

func (x *EapProviderTimeouts) Reset() {
	*x = EapProviderTimeouts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EapProviderTimeouts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EapProviderTimeouts) ProtoMessage() {}

func (x *EapProviderTimeouts) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EapProviderTimeouts.ProtoReflect.Descriptor instead.
func (*EapProviderTimeouts) Descriptor() ([]byte, []int) {
	return file_feg_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{9}
}

func (x *EapProviderTimeouts) GetChallengeMs() uint32 {
	if x != nil {
		return x.ChallengeMs
	}
	return 0
}

func (x *EapProviderTimeouts) GetErrorNotificationMs() uint32 {
	if x != nil {
		return x.ErrorNotificationMs
	}
	return 0
}

func (x *EapProviderTimeouts) GetSessionMs() uint32 {
	if x != nil {
		return x.SessionMs
	}
	return 0
}

func (x *EapProviderTimeouts) GetSessionAuthenticatedMs() uint32 {
	if x != nil {
		return x.SessionAuthenticatedMs
	}
	return 0
}

type EapSimConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel protos.LogLevel      `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	Timeout  *EapProviderTimeouts `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	PlmnIds  []string             `protobuf:"bytes,3,rep,name=PlmnIds,proto3" json:"PlmnIds,omitempty"`
	UseS6A   bool                 `protobuf:"varint,4,opt,name=UseS6a,proto3" json:"UseS6a,omitempty"`
	MncLen   int32                `protobuf:"varint,5,opt,name=MncLen,proto3" json:"MncLen,omitempty"`
}

func (x *EapSimConfig) Reset() {
	*x = EapSimConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EapSimConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EapSimConfig) ProtoMessage() {}

func (x *EapSimConfig) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EapSimConfig.ProtoReflect.Descriptor instead.
func (*EapSimConfig) Descriptor() ([]byte, []int) {
	return file_feg_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{10}
}

func (x *EapSimConfig) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel(0)
}

func (x *EapSimConfig) GetTimeout() *EapProviderTimeouts {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *EapSimConfig) GetPlmnIds() []string {
	if x != nil {
		return x.PlmnIds
	}
	return nil
}

func (x *EapSimConfig) GetUseS6A() bool {
	if x != nil {
		return x.UseS6A
	}
	return false
}

func (x *EapSimConfig) GetMncLen() int32 {
	if x != nil {
		return x.MncLen
	}
	return 0
}

type AAAConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	// Idle session TTL
	IdleSessionTimeoutMs uint32 `protobuf:"varint,2,opt,name=IdleSessionTimeoutMs,proto3" json:"IdleSessionTimeoutMs,omitempty"`
	// enable accounting & maintain long term user sessions
	AccountingEnabled bool `protobuf:"varint,3,opt,name=AccountingEnabled,proto3" json:"AccountingEnabled,omitempty"`
	// Postpone Auth success until successful accounting CreateSession completion
	CreateSessionOnAuth bool `protobuf:"varint,4,opt,name=CreateSessionOnAuth,proto3" json:"CreateSessionOnAuth,omitempty"`
	// enable event logging for aaa events
	EventLoggingEnabled bool          `protobuf:"varint,5,opt,name=EventLoggingEnabled,proto3" json:"EventLoggingEnabled,omitempty"`
	RadiusConfig        *RadiusConfig `protobuf:"bytes,6,opt,name=RadiusConfig,proto3" json:"RadiusConfig,omitempty"`
	// Enable accounting reporting to the module's orc8r service
	AcctReportingEnabled bool `protobuf:"varint,7,opt,name=AcctReportingEnabled,proto3" json:"AcctReportingEnabled,omitempty"`
}

func (x *AAAConfig) Reset() {
	*x = AAAConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AAAConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AAAConfig) ProtoMessage() {}

func (x *AAAConfig) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AAAConfig.ProtoReflect.Descriptor instead.
func (*AAAConfig) Descriptor() ([]byte, []int) {
	return file_feg_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{11}
}

func (x *AAAConfig) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel(0)
}

func (x *AAAConfig) GetIdleSessionTimeoutMs() uint32 {
	if x != nil {
		return x.IdleSessionTimeoutMs
	}
	return 0
}

func (x *AAAConfig) GetAccountingEnabled() bool {
	if x != nil {
		return x.AccountingEnabled
	}
	return false
}

func (x *AAAConfig) GetCreateSessionOnAuth() bool {
	if x != nil {
		return x.CreateSessionOnAuth
	}
	return false
}

func (x *AAAConfig) GetEventLoggingEnabled() bool {
	if x != nil {
		return x.EventLoggingEnabled
	}
	return false
}

func (x *AAAConfig) GetRadiusConfig() *RadiusConfig {
	if x != nil {
		return x.RadiusConfig
	}
	return nil
}

func (x *AAAConfig) GetAcctReportingEnabled() bool {
	if x != nil {
		return x.AcctReportingEnabled
	}
	return false
}

type RadiusConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Radius server secret
	Secret []byte `protobuf:"bytes,1,opt,name=Secret,proto3" json:"Secret,omitempty"`
	// Radius server network (udp/tcp/etc.
	Network string `protobuf:"bytes,2,opt,name=Network,proto3" json:"Network,omitempty"`
	// Authentication Radius server address
	AuthAddr string `protobuf:"bytes,3,opt,name=AuthAddr,proto3" json:"AuthAddr,omitempty"`
	// Accounting Radius server address
	AcctAddr string `protobuf:"bytes,4,opt,name=AcctAddr,proto3" json:"AcctAddr,omitempty"`
	// DAE server Address
	DAEAddr string `protobuf:"bytes,5,opt,name=DAEAddr,proto3" json:"DAEAddr,omitempty"`
}

func (x *RadiusConfig) Reset() {
	*x = RadiusConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadiusConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadiusConfig) ProtoMessage() {}

func (x *RadiusConfig) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadiusConfig.ProtoReflect.Descriptor instead.
func (*RadiusConfig) Descriptor() ([]byte, []int) {
	return file_feg_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{12}
}

func (x *RadiusConfig) GetSecret() []byte {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *RadiusConfig) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *RadiusConfig) GetAuthAddr() string {
	if x != nil {
		return x.AuthAddr
	}
	return ""
}

func (x *RadiusConfig) GetAcctAddr() string {
	if x != nil {
		return x.AcctAddr
	}
	return ""
}

func (x *RadiusConfig) GetDAEAddr() string {
	if x != nil {
		return x.DAEAddr
	}
	return ""
}

type GatewayHealthConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequiredServices          []string `protobuf:"bytes,1,rep,name=required_services,json=requiredServices,proto3" json:"required_services,omitempty"`
	UpdateIntervalSecs        uint32   `protobuf:"varint,2,opt,name=update_interval_secs,json=updateIntervalSecs,proto3" json:"update_interval_secs,omitempty"`
	UpdateFailureThreshold    uint32   `protobuf:"varint,3,opt,name=update_failure_threshold,json=updateFailureThreshold,proto3" json:"update_failure_threshold,omitempty"`
	CloudDisconnectPeriodSecs uint32   `protobuf:"varint,4,opt,name=cloud_disconnect_period_secs,json=cloudDisconnectPeriodSecs,proto3" json:"cloud_disconnect_period_secs,omitempty"`
	LocalDisconnectPeriodSecs uint32   `protobuf:"varint,5,opt,name=local_disconnect_period_secs,json=localDisconnectPeriodSecs,proto3" json:"local_disconnect_period_secs,omitempty"`
}

func (x *GatewayHealthConfig) Reset() {
	*x = GatewayHealthConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayHealthConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayHealthConfig) ProtoMessage() {}

func (x *GatewayHealthConfig) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayHealthConfig.ProtoReflect.Descriptor instead.
func (*GatewayHealthConfig) Descriptor() ([]byte, []int) {
	return file_feg_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{13}
}

func (x *GatewayHealthConfig) GetRequiredServices() []string {
	if x != nil {
		return x.RequiredServices
	}
	return nil
}

func (x *GatewayHealthConfig) GetUpdateIntervalSecs() uint32 {
	if x != nil {
		return x.UpdateIntervalSecs
	}
	return 0
}

func (x *GatewayHealthConfig) GetUpdateFailureThreshold() uint32 {
	if x != nil {
		return x.UpdateFailureThreshold
	}
	return 0
}

func (x *GatewayHealthConfig) GetCloudDisconnectPeriodSecs() uint32 {
	if x != nil {
		return x.CloudDisconnectPeriodSecs
	}
	return 0
}

func (x *GatewayHealthConfig) GetLocalDisconnectPeriodSecs() uint32 {
	if x != nil {
		return x.LocalDisconnectPeriodSecs
	}
	return 0
}

type HSSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server *DiamServerConfig `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	// Operator configuration field for LTE.
	LteAuthOp []byte `protobuf:"bytes,2,opt,name=lte_auth_op,json=lteAuthOp,proto3" json:"lte_auth_op,omitempty"`
	// Authentication management field for LTE.
	LteAuthAmf []byte `protobuf:"bytes,3,opt,name=lte_auth_amf,json=lteAuthAmf,proto3" json:"lte_auth_amf,omitempty"`
	// Maps from IMSI to SubscriptionProfile.
	SubProfiles map[string]*HSSConfig_SubscriptionProfile `protobuf:"bytes,4,rep,name=sub_profiles,json=subProfiles,proto3" json:"sub_profiles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// If an IMSI if not found in sub_profiles, the default profile is used instead.
	DefaultSubProfile *HSSConfig_SubscriptionProfile `protobuf:"bytes,5,opt,name=default_sub_profile,json=defaultSubProfile,proto3" json:"default_sub_profile,omitempty"`
	// Whether to stream subscribers from the cloud subscriberdb service.
	StreamSubscribers bool `protobuf:"varint,6,opt,name=stream_subscribers,json=streamSubscribers,proto3" json:"stream_subscribers,omitempty"`
}

func (x *HSSConfig) Reset() {
	*x = HSSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HSSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HSSConfig) ProtoMessage() {}

func (x *HSSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HSSConfig.ProtoReflect.Descriptor instead.
func (*HSSConfig) Descriptor() ([]byte, []int) {
	return file_feg_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{14}
}

func (x *HSSConfig) GetServer() *DiamServerConfig {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *HSSConfig) GetLteAuthOp() []byte {
	if x != nil {
		return x.LteAuthOp
	}
	return nil
}

func (x *HSSConfig) GetLteAuthAmf() []byte {
	if x != nil {
		return x.LteAuthAmf
	}
	return nil
}

func (x *HSSConfig) GetSubProfiles() map[string]*HSSConfig_SubscriptionProfile {
	if x != nil {
		return x.SubProfiles
	}
	return nil
}

func (x *HSSConfig) GetDefaultSubProfile() *HSSConfig_SubscriptionProfile {
	if x != nil {
		return x.DefaultSubProfile
	}
	return nil
}

func (x *HSSConfig) GetStreamSubscribers() bool {
	if x != nil {
		return x.StreamSubscribers
	}
	return false
}

type RadiusdConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Port the metrics server is running on
	RadiusMetricsPort uint32 `protobuf:"varint,1,opt,name=radius_metrics_port,json=radiusMetricsPort,proto3" json:"radius_metrics_port,omitempty"`
	// The path to access the prometheus metrics on the server
	RadiusMetricsPath string `protobuf:"bytes,2,opt,name=radius_metrics_path,json=radiusMetricsPath,proto3" json:"radius_metrics_path,omitempty"`
	// Interval in seconds between fetching and updating metrics
	UpdateIntervalSecs uint32 `protobuf:"varint,3,opt,name=update_interval_secs,json=updateIntervalSecs,proto3" json:"update_interval_secs,omitempty"`
	// Hostname for prometheus metrics
	RadiusMetricsHost string `protobuf:"bytes,4,opt,name=radius_metrics_host,json=radiusMetricsHost,proto3" json:"radius_metrics_host,omitempty"`
}

func (x *RadiusdConfig) Reset() {
	*x = RadiusdConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadiusdConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadiusdConfig) ProtoMessage() {}

func (x *RadiusdConfig) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadiusdConfig.ProtoReflect.Descriptor instead.
func (*RadiusdConfig) Descriptor() ([]byte, []int) {
	return file_feg_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{15}
}

func (x *RadiusdConfig) GetRadiusMetricsPort() uint32 {
	if x != nil {
		return x.RadiusMetricsPort
	}
	return 0
}

func (x *RadiusdConfig) GetRadiusMetricsPath() string {
	if x != nil {
		return x.RadiusMetricsPath
	}
	return ""
}

func (x *RadiusdConfig) GetUpdateIntervalSecs() uint32 {
	if x != nil {
		return x.UpdateIntervalSecs
	}
	return 0
}

func (x *RadiusdConfig) GetRadiusMetricsHost() string {
	if x != nil {
		return x.RadiusMetricsHost
	}
	return ""
}

type SCTPClientConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerAddress string `protobuf:"bytes,1,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"` // server's host:port
	LocalAddress  string `protobuf:"bytes,2,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`    // client's local address to bind socket to IP:port OR :port
}

func (x *SCTPClientConfig) Reset() {
	*x = SCTPClientConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCTPClientConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCTPClientConfig) ProtoMessage() {}

func (x *SCTPClientConfig) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCTPClientConfig.ProtoReflect.Descriptor instead.
func (*SCTPClientConfig) Descriptor() ([]byte, []int) {
	return file_feg_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{16}
}

func (x *SCTPClientConfig) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

func (x *SCTPClientConfig) GetLocalAddress() string {
	if x != nil {
		return x.LocalAddress
	}
	return ""
}

type CsfbConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel protos.LogLevel   `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	Client   *SCTPClientConfig `protobuf:"bytes,2,opt,name=client,proto3" json:"client,omitempty"`
}

func (x *CsfbConfig) Reset() {
	*x = CsfbConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsfbConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsfbConfig) ProtoMessage() {}

func (x *CsfbConfig) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsfbConfig.ProtoReflect.Descriptor instead.
func (*CsfbConfig) Descriptor() ([]byte, []int) {
	return file_feg_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{17}
}

func (x *CsfbConfig) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel(0)
}

func (x *CsfbConfig) GetClient() *SCTPClientConfig {
	if x != nil {
		return x.Client
	}
	return nil
}

type EnvoyControllerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
}

func (x *EnvoyControllerConfig) Reset() {
	*x = EnvoyControllerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvoyControllerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvoyControllerConfig) ProtoMessage() {}

func (x *EnvoyControllerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvoyControllerConfig.ProtoReflect.Descriptor instead.
func (*EnvoyControllerConfig) Descriptor() ([]byte, []int) {
	return file_feg_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{18}
}

func (x *EnvoyControllerConfig) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel(0)
}

type S8Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel          protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	LocalAddress      string          `protobuf:"bytes,2,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
	PgwAddress        string          `protobuf:"bytes,3,opt,name=pgw_address,json=pgwAddress,proto3" json:"pgw_address,omitempty"`
	ApnOperatorSuffix string          `protobuf:"bytes,4,opt,name=apn_operator_suffix,json=apnOperatorSuffix,proto3" json:"apn_operator_suffix,omitempty"`
	// Percentage of request failures considered to be unhealthy
	RequestFailureThreshold float32 `protobuf:"fixed32,5,opt,name=request_failure_threshold,json=requestFailureThreshold,proto3" json:"request_failure_threshold,omitempty"`
	// Minimum number of requests necessary to consider a metrics snapshot valid
	MinimumRequestThreshold uint32 `protobuf:"varint,6,opt,name=minimum_request_threshold,json=minimumRequestThreshold,proto3" json:"minimum_request_threshold,omitempty"`
}

func (x *S8Config) Reset() {
	*x = S8Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S8Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S8Config) ProtoMessage() {}

func (x *S8Config) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S8Config.ProtoReflect.Descriptor instead.
func (*S8Config) Descriptor() ([]byte, []int) {
	return file_feg_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{19}
}

func (x *S8Config) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel(0)
}

func (x *S8Config) GetLocalAddress() string {
	if x != nil {
		return x.LocalAddress
	}
	return ""
}

func (x *S8Config) GetPgwAddress() string {
	if x != nil {
		return x.PgwAddress
	}
	return ""
}

func (x *S8Config) GetApnOperatorSuffix() string {
	if x != nil {
		return x.ApnOperatorSuffix
	}
	return ""
}

func (x *S8Config) GetRequestFailureThreshold() float32 {
	if x != nil {
		return x.RequestFailureThreshold
	}
	return 0
}

func (x *S8Config) GetMinimumRequestThreshold() uint32 {
	if x != nil {
		return x.MinimumRequestThreshold
	}
	return 0
}

type SbiServerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Base URL pointing to the HTTP2 SBI server
	ApiRoot string `protobuf:"bytes,1,opt,name=api_root,json=apiRoot,proto3" json:"api_root,omitempty"`
	// Token URL for getting the OAuth2 token
	TokenUrl string `protobuf:"bytes,2,opt,name=token_url,json=tokenUrl,proto3" json:"token_url,omitempty"`
	// OAuth2 Client ID that will be used for getting the bearer token
	ClientId string `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// OAuth2 Client secret used for getting the bearer token
	ClientSecret string `protobuf:"bytes,4,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
}

func (x *SbiServerConfig) Reset() {
	*x = SbiServerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SbiServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SbiServerConfig) ProtoMessage() {}

func (x *SbiServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SbiServerConfig.ProtoReflect.Descriptor instead.
func (*SbiServerConfig) Descriptor() ([]byte, []int) {
	return file_feg_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{20}
}

func (x *SbiServerConfig) GetApiRoot() string {
	if x != nil {
		return x.ApiRoot
	}
	return ""
}

func (x *SbiServerConfig) GetTokenUrl() string {
	if x != nil {
		return x.TokenUrl
	}
	return ""
}

func (x *SbiServerConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *SbiServerConfig) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

type N7ClientConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LocalAddr on which the notification listener listens
	LocalAddr string `protobuf:"bytes,1,opt,name=local_addr,json=localAddr,proto3" json:"local_addr,omitempty"`
	// Notification API Root on which the notification will be invoked
	NotifyApiRoot string `protobuf:"bytes,2,opt,name=notify_api_root,json=notifyApiRoot,proto3" json:"notify_api_root,omitempty"`
}

func (x *N7ClientConfig) Reset() {
	*x = N7ClientConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *N7ClientConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*N7ClientConfig) ProtoMessage() {}

func (x *N7ClientConfig) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use N7ClientConfig.ProtoReflect.Descriptor instead.
func (*N7ClientConfig) Descriptor() ([]byte, []int) {
	return file_feg_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{21}
}

func (x *N7ClientConfig) GetLocalAddr() string {
	if x != nil {
		return x.LocalAddr
	}
	return ""
}

func (x *N7ClientConfig) GetNotifyApiRoot() string {
	if x != nil {
		return x.NotifyApiRoot
	}
	return ""
}

type N7Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Disables N7 interface
	DisableN7 bool `protobuf:"varint,1,opt,name=disable_n7,json=disableN7,proto3" json:"disable_n7,omitempty"`
	// PCF configuration
	Server *SbiServerConfig `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
	// N7 consumer config for handling notifications
	Client *N7ClientConfig `protobuf:"bytes,3,opt,name=client,proto3" json:"client,omitempty"`
}

func (x *N7Config) Reset() {
	*x = N7Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *N7Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*N7Config) ProtoMessage() {}

func (x *N7Config) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use N7Config.ProtoReflect.Descriptor instead.
func (*N7Config) Descriptor() ([]byte, []int) {
	return file_feg_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{22}
}

func (x *N7Config) GetDisableN7() bool {
	if x != nil {
		return x.DisableN7
	}
	return false
}

func (x *N7Config) GetServer() *SbiServerConfig {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *N7Config) GetClient() *N7ClientConfig {
	if x != nil {
		return x.Client
	}
	return nil
}

type N7N40ProxyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Service log level
	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	// N7 Interface configuration
	N7Config *N7Config `protobuf:"bytes,2,opt,name=n7_config,json=n7Config,proto3" json:"n7_config,omitempty"`
	// Percentage of request failures considered to be unhealthy
	RequestFailureThreshold float32 `protobuf:"fixed32,3,opt,name=request_failure_threshold,json=requestFailureThreshold,proto3" json:"request_failure_threshold,omitempty"`
	// Minimum number of requests necessary to consider a metrics snapshot valid
	MinimumRequestThreshold uint32 `protobuf:"varint,4,opt,name=minimum_request_threshold,json=minimumRequestThreshold,proto3" json:"minimum_request_threshold,omitempty"`
}

func (x *N7N40ProxyConfig) Reset() {
	*x = N7N40ProxyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *N7N40ProxyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*N7N40ProxyConfig) ProtoMessage() {}

func (x *N7N40ProxyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use N7N40ProxyConfig.ProtoReflect.Descriptor instead.
func (*N7N40ProxyConfig) Descriptor() ([]byte, []int) {
	return file_feg_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{23}
}

func (x *N7N40ProxyConfig) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel(0)
}

func (x *N7N40ProxyConfig) GetN7Config() *N7Config {
	if x != nil {
		return x.N7Config
	}
	return nil
}

func (x *N7N40ProxyConfig) GetRequestFailureThreshold() float32 {
	if x != nil {
		return x.RequestFailureThreshold
	}
	return 0
}

func (x *N7N40ProxyConfig) GetMinimumRequestThreshold() uint32 {
	if x != nil {
		return x.MinimumRequestThreshold
	}
	return 0
}

type EapAkaConfig_Timeouts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeMs            uint32 `protobuf:"varint,1,opt,name=ChallengeMs,proto3" json:"ChallengeMs,omitempty"`
	ErrorNotificationMs    uint32 `protobuf:"varint,2,opt,name=ErrorNotificationMs,proto3" json:"ErrorNotificationMs,omitempty"`
	SessionMs              uint32 `protobuf:"varint,3,opt,name=SessionMs,proto3" json:"SessionMs,omitempty"`
	SessionAuthenticatedMs uint32 `protobuf:"varint,4,opt,name=SessionAuthenticatedMs,proto3" json:"SessionAuthenticatedMs,omitempty"`
}

func (x *EapAkaConfig_Timeouts) Reset() {
	*x = EapAkaConfig_Timeouts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EapAkaConfig_Timeouts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EapAkaConfig_Timeouts) ProtoMessage() {}

func (x *EapAkaConfig_Timeouts) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EapAkaConfig_Timeouts.ProtoReflect.Descriptor instead.
func (*EapAkaConfig_Timeouts) Descriptor() ([]byte, []int) {
	return file_feg_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{8, 0}
}

func (x *EapAkaConfig_Timeouts) GetChallengeMs() uint32 {
	if x != nil {
		return x.ChallengeMs
	}
	return 0
}

func (x *EapAkaConfig_Timeouts) GetErrorNotificationMs() uint32 {
	if x != nil {
		return x.ErrorNotificationMs
	}
	return 0
}

func (x *EapAkaConfig_Timeouts) GetSessionMs() uint32 {
	if x != nil {
		return x.SessionMs
	}
	return 0
}

func (x *EapAkaConfig_Timeouts) GetSessionAuthenticatedMs() uint32 {
	if x != nil {
		return x.SessionAuthenticatedMs
	}
	return 0
}

type HSSConfig_SubscriptionProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum uplink bit rate (AMBR-UL)
	MaxUlBitRate uint64 `protobuf:"varint,1,opt,name=max_ul_bit_rate,json=maxUlBitRate,proto3" json:"max_ul_bit_rate,omitempty"`
	// Maximum downlink bit rate (AMBR-DL)
	MaxDlBitRate uint64 `protobuf:"varint,2,opt,name=max_dl_bit_rate,json=maxDlBitRate,proto3" json:"max_dl_bit_rate,omitempty"`
}

func (x *HSSConfig_SubscriptionProfile) Reset() {
	*x = HSSConfig_SubscriptionProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HSSConfig_SubscriptionProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HSSConfig_SubscriptionProfile) ProtoMessage() {}

func (x *HSSConfig_SubscriptionProfile) ProtoReflect() protoreflect.Message {
	mi := &file_feg_protos_mconfig_mconfigs_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HSSConfig_SubscriptionProfile.ProtoReflect.Descriptor instead.
func (*HSSConfig_SubscriptionProfile) Descriptor() ([]byte, []int) {
	return file_feg_protos_mconfig_mconfigs_proto_rawDescGZIP(), []int{14, 0}
}

func (x *HSSConfig_SubscriptionProfile) GetMaxUlBitRate() uint64 {
	if x != nil {
		return x.MaxUlBitRate
	}
	return 0
}

func (x *HSSConfig_SubscriptionProfile) GetMaxDlBitRate() uint64 {
	if x != nil {
		return x.MaxDlBitRate
	}
	return 0
}

var File_feg_protos_mconfig_mconfigs_proto protoreflect.FileDescriptor

var file_feg_protos_mconfig_mconfigs_proto_rawDesc = []byte{
	0x0a, 0x21, 0x66, 0x65, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x1a, 0x19, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xeb, 0x03,
	0x0a, 0x10, 0x44, 0x69, 0x61, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72,
	0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x65, 0x73, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73,
	0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x74, 0x48, 0x6f,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x64, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x48, 0x6f,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0xa9, 0x01, 0x0a, 0x10,
	0x44, 0x69, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x65, 0x73, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x65, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x22, 0x8a, 0x02, 0x0a, 0x09, 0x53, 0x36, 0x61, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x69, 0x61, 0x6d, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3a,
	0x0a, 0x19, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x17, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x6c,
	0x6d, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x50, 0x6c, 0x6d,
	0x6e, 0x49, 0x64, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x0e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x41, 0x70, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x70, 0x6e, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x6e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x70, 0x6e, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x70, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x1f, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0x8b, 0x02, 0x0a, 0x08, 0x47, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x37, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x44, 0x69, 0x61, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x76, 0x65,
	0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x41, 0x70, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x41, 0x70, 0x6e, 0x12, 0x39, 0x0a,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44,
	0x69, 0x61, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x47, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x47, 0x78, 0x12, 0x49, 0x0a, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x61, 0x70, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x6e, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x6e, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x22, 0xc9, 0x02, 0x0a, 0x08, 0x47, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37,
	0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44,
	0x69, 0x61, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x5f,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x79, 0x49,
	0x6e, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x41, 0x70, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4f, 0x76, 0x65,
	0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x41, 0x70, 0x6e, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x69, 0x61, 0x6d, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x47,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x47, 0x79, 0x12, 0x49, 0x0a, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x70,
	0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0f, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x92, 0x02,
	0x0a, 0x12, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08,
	0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x02, 0x67, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x02, 0x67,
	0x78, 0x12, 0x27, 0x0a, 0x02, 0x67, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x02, 0x67, 0x79, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x22, 0x8c, 0x04, 0x0a, 0x09, 0x53, 0x77, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38,
	0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x69, 0x61, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x31, 0x0a,
	0x14, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x0f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x54, 0x4c, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x54, 0x54, 0x4c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6f,
	0x6e, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x17,
	0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x64,
	0x65, 0x72, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x61, 0x6c, 0x6d, 0x12, 0x20, 0x0a, 0x0c, 0x68, 0x6c, 0x72, 0x5f, 0x70, 0x6c, 0x6d, 0x6e,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6c, 0x72, 0x50,
	0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x69, 0x61, 0x6d, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x22, 0x83, 0x03, 0x0a, 0x0c, 0x45, 0x61, 0x70, 0x41, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72,
	0x63, 0x38, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f,
	0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3e, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x61, 0x70, 0x41, 0x6b, 0x61, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x53, 0x36, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x53, 0x36, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x6e, 0x63, 0x4c,
	0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x6e, 0x63, 0x4c, 0x65, 0x6e,
	0x1a, 0xb4, 0x01, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x73, 0x12,
	0x30, 0x0a, 0x13, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12,
	0x36, 0x0a, 0x16, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x16, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x13, 0x45, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d,
	0x73, 0x12, 0x30, 0x0a, 0x13, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d,
	0x73, 0x12, 0x36, 0x0a, 0x16, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x16, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x0c, 0x45, 0x61,
	0x70, 0x53, 0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f,
	0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3c,
	0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x45, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x73, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x50,
	0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x53, 0x36, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x55, 0x73, 0x65, 0x53, 0x36, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x4d, 0x6e, 0x63, 0x4c, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x4d, 0x6e, 0x63, 0x4c, 0x65, 0x6e, 0x22, 0xfa, 0x02, 0x0a, 0x09, 0x41, 0x41, 0x41, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08,
	0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x14, 0x49, 0x64, 0x6c, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x49, 0x64, 0x6c, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x41, 0x75, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x13,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3f,
	0x0a, 0x0c, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0c, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x32, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x41,
	0x63, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x0c, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68, 0x41, 0x64,
	0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41, 0x75, 0x74, 0x68, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x63, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41, 0x63, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x44, 0x41, 0x45, 0x41, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x44, 0x41, 0x45, 0x41, 0x64, 0x64, 0x72, 0x22, 0xb0, 0x02, 0x0a, 0x13, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x73, 0x12,
	0x38, 0x0a, 0x18, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x19, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x73, 0x22, 0xb4, 0x04, 0x0a, 0x09,
	0x48, 0x53, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x69, 0x61, 0x6d, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x6c, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6f,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6c, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x4f, 0x70, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x61,
	0x6d, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x74, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x41, 0x6d, 0x66, 0x12, 0x4c, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x53, 0x53, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x5c, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x75,
	0x62, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x48, 0x53, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x11, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x2d, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x1a,
	0x63, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x6c,
	0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x6d, 0x61, 0x78, 0x55, 0x6c, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a,
	0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x6c, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x44, 0x6c, 0x42, 0x69, 0x74,
	0x52, 0x61, 0x74, 0x65, 0x1a, 0x6c, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x53, 0x53, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xd1, 0x01, 0x0a, 0x0d, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x53, 0x65, 0x63, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x22, 0x5e, 0x0a, 0x10, 0x53, 0x43, 0x54, 0x50, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x79, 0x0a, 0x0a, 0x43, 0x73, 0x66, 0x62, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08,
	0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x37, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x43, 0x54, 0x50, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x22, 0x4b, 0x0a, 0x15, 0x45, 0x6e, 0x76, 0x6f, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f,
	0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xac,
	0x02, 0x0a, 0x08, 0x53, 0x38, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x09, 0x6c,
	0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4c, 0x6f, 0x67,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x67, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x67, 0x77, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x70, 0x6e, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x61, 0x70, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x3a, 0x0a, 0x19, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x8b, 0x01,
	0x0a, 0x0f, 0x53, 0x62, 0x69, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x69, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x57, 0x0a, 0x0e, 0x4e,
	0x37, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a,
	0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x70, 0x69,
	0x52, 0x6f, 0x6f, 0x74, 0x22, 0x98, 0x01, 0x0a, 0x08, 0x4e, 0x37, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x37, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x37,
	0x12, 0x36, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x62, 0x69, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x37, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22,
	0xf4, 0x01, 0x0a, 0x10, 0x4e, 0x37, 0x4e, 0x34, 0x30, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08,
	0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x09, 0x6e, 0x37, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x37, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x6e, 0x37, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a,
	0x0a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2a, 0x3a, 0x0a, 0x0c, 0x47, 0x79, 0x49, 0x6e, 0x69, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x52, 0x5f, 0x4b, 0x45, 0x59,
	0x10, 0x02, 0x42, 0x23, 0x5a, 0x21, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f, 0x66, 0x65, 0x67, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_feg_protos_mconfig_mconfigs_proto_rawDescOnce sync.Once
	file_feg_protos_mconfig_mconfigs_proto_rawDescData = file_feg_protos_mconfig_mconfigs_proto_rawDesc
)

func file_feg_protos_mconfig_mconfigs_proto_rawDescGZIP() []byte {
	file_feg_protos_mconfig_mconfigs_proto_rawDescOnce.Do(func() {
		file_feg_protos_mconfig_mconfigs_proto_rawDescData = protoimpl.X.CompressGZIP(file_feg_protos_mconfig_mconfigs_proto_rawDescData)
	})
	return file_feg_protos_mconfig_mconfigs_proto_rawDescData
}

var file_feg_protos_mconfig_mconfigs_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_feg_protos_mconfig_mconfigs_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_feg_protos_mconfig_mconfigs_proto_goTypes = []interface{}{
	(GyInitMethod)(0),                     // 0: magma.mconfig.GyInitMethod
	(*DiamClientConfig)(nil),              // 1: magma.mconfig.DiamClientConfig
	(*DiamServerConfig)(nil),              // 2: magma.mconfig.DiamServerConfig
	(*S6AConfig)(nil),                     // 3: magma.mconfig.S6aConfig
	(*VirtualApnRule)(nil),                // 4: magma.mconfig.VirtualApnRule
	(*GxConfig)(nil),                      // 5: magma.mconfig.GxConfig
	(*GyConfig)(nil),                      // 6: magma.mconfig.GyConfig
	(*SessionProxyConfig)(nil),            // 7: magma.mconfig.SessionProxyConfig
	(*SwxConfig)(nil),                     // 8: magma.mconfig.SwxConfig
	(*EapAkaConfig)(nil),                  // 9: magma.mconfig.EapAkaConfig
	(*EapProviderTimeouts)(nil),           // 10: magma.mconfig.EapProviderTimeouts
	(*EapSimConfig)(nil),                  // 11: magma.mconfig.EapSimConfig
	(*AAAConfig)(nil),                     // 12: magma.mconfig.AAAConfig
	(*RadiusConfig)(nil),                  // 13: magma.mconfig.RadiusConfig
	(*GatewayHealthConfig)(nil),           // 14: magma.mconfig.GatewayHealthConfig
	(*HSSConfig)(nil),                     // 15: magma.mconfig.HSSConfig
	(*RadiusdConfig)(nil),                 // 16: magma.mconfig.RadiusdConfig
	(*SCTPClientConfig)(nil),              // 17: magma.mconfig.SCTPClientConfig
	(*CsfbConfig)(nil),                    // 18: magma.mconfig.CsfbConfig
	(*EnvoyControllerConfig)(nil),         // 19: magma.mconfig.EnvoyControllerConfig
	(*S8Config)(nil),                      // 20: magma.mconfig.S8Config
	(*SbiServerConfig)(nil),               // 21: magma.mconfig.SbiServerConfig
	(*N7ClientConfig)(nil),                // 22: magma.mconfig.N7ClientConfig
	(*N7Config)(nil),                      // 23: magma.mconfig.N7Config
	(*N7N40ProxyConfig)(nil),              // 24: magma.mconfig.N7N40ProxyConfig
	(*EapAkaConfig_Timeouts)(nil),         // 25: magma.mconfig.EapAkaConfig.Timeouts
	(*HSSConfig_SubscriptionProfile)(nil), // 26: magma.mconfig.HSSConfig.SubscriptionProfile
	nil,                                   // 27: magma.mconfig.HSSConfig.SubProfilesEntry
	(protos.LogLevel)(0),                  // 28: magma.orc8r.LogLevel
}
var file_feg_protos_mconfig_mconfigs_proto_depIdxs = []int32{
	28, // 0: magma.mconfig.S6aConfig.log_level:type_name -> magma.orc8r.LogLevel
	1,  // 1: magma.mconfig.S6aConfig.server:type_name -> magma.mconfig.DiamClientConfig
	1,  // 2: magma.mconfig.GxConfig.server:type_name -> magma.mconfig.DiamClientConfig
	1,  // 3: magma.mconfig.GxConfig.servers:type_name -> magma.mconfig.DiamClientConfig
	4,  // 4: magma.mconfig.GxConfig.virtual_apn_rules:type_name -> magma.mconfig.VirtualApnRule
	1,  // 5: magma.mconfig.GyConfig.server:type_name -> magma.mconfig.DiamClientConfig
	0,  // 6: magma.mconfig.GyConfig.init_method:type_name -> magma.mconfig.GyInitMethod
	1,  // 7: magma.mconfig.GyConfig.servers:type_name -> magma.mconfig.DiamClientConfig
	4,  // 8: magma.mconfig.GyConfig.virtual_apn_rules:type_name -> magma.mconfig.VirtualApnRule
	28, // 9: magma.mconfig.SessionProxyConfig.log_level:type_name -> magma.orc8r.LogLevel
	5,  // 10: magma.mconfig.SessionProxyConfig.gx:type_name -> magma.mconfig.GxConfig
	6,  // 11: magma.mconfig.SessionProxyConfig.gy:type_name -> magma.mconfig.GyConfig
	28, // 12: magma.mconfig.SwxConfig.log_level:type_name -> magma.orc8r.LogLevel
	1,  // 13: magma.mconfig.SwxConfig.server:type_name -> magma.mconfig.DiamClientConfig
	1,  // 14: magma.mconfig.SwxConfig.servers:type_name -> magma.mconfig.DiamClientConfig
	28, // 15: magma.mconfig.EapAkaConfig.log_level:type_name -> magma.orc8r.LogLevel
	25, // 16: magma.mconfig.EapAkaConfig.timeout:type_name -> magma.mconfig.EapAkaConfig.Timeouts
	28, // 17: magma.mconfig.EapSimConfig.log_level:type_name -> magma.orc8r.LogLevel
	10, // 18: magma.mconfig.EapSimConfig.timeout:type_name -> magma.mconfig.EapProviderTimeouts
	28, // 19: magma.mconfig.AAAConfig.log_level:type_name -> magma.orc8r.LogLevel
	13, // 20: magma.mconfig.AAAConfig.RadiusConfig:type_name -> magma.mconfig.RadiusConfig
	2,  // 21: magma.mconfig.HSSConfig.server:type_name -> magma.mconfig.DiamServerConfig
	27, // 22: magma.mconfig.HSSConfig.sub_profiles:type_name -> magma.mconfig.HSSConfig.SubProfilesEntry
	26, // 23: magma.mconfig.HSSConfig.default_sub_profile:type_name -> magma.mconfig.HSSConfig.SubscriptionProfile
	28, // 24: magma.mconfig.CsfbConfig.log_level:type_name -> magma.orc8r.LogLevel
	17, // 25: magma.mconfig.CsfbConfig.client:type_name -> magma.mconfig.SCTPClientConfig
	28, // 26: magma.mconfig.EnvoyControllerConfig.log_level:type_name -> magma.orc8r.LogLevel
	28, // 27: magma.mconfig.S8Config.log_level:type_name -> magma.orc8r.LogLevel
	21, // 28: magma.mconfig.N7Config.server:type_name -> magma.mconfig.SbiServerConfig
	22, // 29: magma.mconfig.N7Config.client:type_name -> magma.mconfig.N7ClientConfig
	28, // 30: magma.mconfig.N7N40ProxyConfig.log_level:type_name -> magma.orc8r.LogLevel
	23, // 31: magma.mconfig.N7N40ProxyConfig.n7_config:type_name -> magma.mconfig.N7Config
	26, // 32: magma.mconfig.HSSConfig.SubProfilesEntry.value:type_name -> magma.mconfig.HSSConfig.SubscriptionProfile
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_feg_protos_mconfig_mconfigs_proto_init() }
func file_feg_protos_mconfig_mconfigs_proto_init() {
	if File_feg_protos_mconfig_mconfigs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_feg_protos_mconfig_mconfigs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiamClientConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mconfig_mconfigs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiamServerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mconfig_mconfigs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S6AConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mconfig_mconfigs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualApnRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mconfig_mconfigs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GxConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mconfig_mconfigs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mconfig_mconfigs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionProxyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mconfig_mconfigs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwxConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mconfig_mconfigs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EapAkaConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mconfig_mconfigs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EapProviderTimeouts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mconfig_mconfigs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EapSimConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mconfig_mconfigs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AAAConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mconfig_mconfigs_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadiusConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mconfig_mconfigs_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayHealthConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mconfig_mconfigs_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HSSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mconfig_mconfigs_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadiusdConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mconfig_mconfigs_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCTPClientConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mconfig_mconfigs_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsfbConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mconfig_mconfigs_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvoyControllerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mconfig_mconfigs_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S8Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mconfig_mconfigs_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SbiServerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mconfig_mconfigs_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*N7ClientConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mconfig_mconfigs_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*N7Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mconfig_mconfigs_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*N7N40ProxyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mconfig_mconfigs_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EapAkaConfig_Timeouts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feg_protos_mconfig_mconfigs_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HSSConfig_SubscriptionProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_feg_protos_mconfig_mconfigs_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_feg_protos_mconfig_mconfigs_proto_goTypes,
		DependencyIndexes: file_feg_protos_mconfig_mconfigs_proto_depIdxs,
		EnumInfos:         file_feg_protos_mconfig_mconfigs_proto_enumTypes,
		MessageInfos:      file_feg_protos_mconfig_mconfigs_proto_msgTypes,
	}.Build()
	File_feg_protos_mconfig_mconfigs_proto = out.File
	file_feg_protos_mconfig_mconfigs_proto_rawDesc = nil
	file_feg_protos_mconfig_mconfigs_proto_goTypes = nil
	file_feg_protos_mconfig_mconfigs_proto_depIdxs = nil
}
