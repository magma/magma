// Code generated by protoc-gen-go. DO NOT EDIT.
// source: feg/cloud/go/services/health/protos/health.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protos "magma/feg/cloud/go/protos"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ClusterState struct {
	// The logical id of the currently active gateway
	ActiveGatewayLogicalId string `protobuf:"bytes,1,opt,name=active_gateway_logical_id,json=activeGatewayLogicalId,proto3" json:"active_gateway_logical_id,omitempty"`
	// Unix time of when the cluster state update occurred
	Time                 uint64   `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterState) Reset()         { *m = ClusterState{} }
func (m *ClusterState) String() string { return proto.CompactTextString(m) }
func (*ClusterState) ProtoMessage()    {}
func (*ClusterState) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa97e112436e4739, []int{0}
}

func (m *ClusterState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterState.Unmarshal(m, b)
}
func (m *ClusterState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterState.Marshal(b, m, deterministic)
}
func (m *ClusterState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterState.Merge(m, src)
}
func (m *ClusterState) XXX_Size() int {
	return xxx_messageInfo_ClusterState.Size(m)
}
func (m *ClusterState) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterState.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterState proto.InternalMessageInfo

func (m *ClusterState) GetActiveGatewayLogicalId() string {
	if m != nil {
		return m.ActiveGatewayLogicalId
	}
	return ""
}

func (m *ClusterState) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type ClusterStateRequest struct {
	// NetworkID that the cluster is registered in
	NetworkId string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// Cluster's clusterID
	ClusterId            string   `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterStateRequest) Reset()         { *m = ClusterStateRequest{} }
func (m *ClusterStateRequest) String() string { return proto.CompactTextString(m) }
func (*ClusterStateRequest) ProtoMessage()    {}
func (*ClusterStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa97e112436e4739, []int{1}
}

func (m *ClusterStateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterStateRequest.Unmarshal(m, b)
}
func (m *ClusterStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterStateRequest.Marshal(b, m, deterministic)
}
func (m *ClusterStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterStateRequest.Merge(m, src)
}
func (m *ClusterStateRequest) XXX_Size() int {
	return xxx_messageInfo_ClusterStateRequest.Size(m)
}
func (m *ClusterStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterStateRequest proto.InternalMessageInfo

func (m *ClusterStateRequest) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *ClusterStateRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type GatewayStatusRequest struct {
	// Gateway's network id
	NetworkId string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// Gateway's logical id
	LogicalId            string   `protobuf:"bytes,2,opt,name=logical_id,json=logicalId,proto3" json:"logical_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewayStatusRequest) Reset()         { *m = GatewayStatusRequest{} }
func (m *GatewayStatusRequest) String() string { return proto.CompactTextString(m) }
func (*GatewayStatusRequest) ProtoMessage()    {}
func (*GatewayStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa97e112436e4739, []int{2}
}

func (m *GatewayStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayStatusRequest.Unmarshal(m, b)
}
func (m *GatewayStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayStatusRequest.Marshal(b, m, deterministic)
}
func (m *GatewayStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayStatusRequest.Merge(m, src)
}
func (m *GatewayStatusRequest) XXX_Size() int {
	return xxx_messageInfo_GatewayStatusRequest.Size(m)
}
func (m *GatewayStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayStatusRequest proto.InternalMessageInfo

func (m *GatewayStatusRequest) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *GatewayStatusRequest) GetLogicalId() string {
	if m != nil {
		return m.LogicalId
	}
	return ""
}

func init() {
	proto.RegisterType((*ClusterState)(nil), "magma.feg.ClusterState")
	proto.RegisterType((*ClusterStateRequest)(nil), "magma.feg.ClusterStateRequest")
	proto.RegisterType((*GatewayStatusRequest)(nil), "magma.feg.GatewayStatusRequest")
}

func init() {
	proto.RegisterFile("feg/cloud/go/services/health/protos/health.proto", fileDescriptor_fa97e112436e4739)
}

var fileDescriptor_fa97e112436e4739 = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x9b, 0x52, 0x84, 0x0c, 0xa2, 0xb0, 0x4a, 0x5b, 0x0b, 0x6a, 0xc9, 0xa9, 0x22, 0x64,
	0x45, 0x4f, 0x5e, 0x15, 0xac, 0x81, 0x9e, 0x5a, 0x4f, 0x82, 0x84, 0x35, 0x99, 0x6e, 0x83, 0x9b,
	0xac, 0x66, 0x27, 0x2d, 0xfe, 0x21, 0x7f, 0xa7, 0x24, 0x9b, 0x6a, 0x84, 0x08, 0x3d, 0x25, 0x33,
	0xdf, 0x9b, 0x37, 0xbb, 0x8f, 0x85, 0xab, 0x25, 0x4a, 0x1e, 0x29, 0x5d, 0xc4, 0x5c, 0x6a, 0x6e,
	0x30, 0x5f, 0x27, 0x11, 0x1a, 0xbe, 0x42, 0xa1, 0x68, 0xc5, 0xdf, 0x73, 0x4d, 0x7a, 0x5b, 0xf9,
	0x55, 0xc5, 0xdc, 0x54, 0xc8, 0x54, 0xf8, 0x4b, 0x94, 0xa3, 0x41, 0x39, 0xdc, 0xa2, 0xf1, 0x5e,
	0x60, 0xff, 0x5e, 0x15, 0x86, 0x30, 0x5f, 0x90, 0x20, 0x64, 0xb7, 0x70, 0x22, 0x22, 0x4a, 0xd6,
	0x18, 0x4a, 0x41, 0xb8, 0x11, 0x9f, 0xa1, 0xd2, 0x32, 0x89, 0x84, 0x0a, 0x93, 0x78, 0xe8, 0x8c,
	0x9d, 0x89, 0x3b, 0xef, 0x5b, 0xc1, 0xd4, 0xf2, 0x99, 0xc5, 0x41, 0xcc, 0x18, 0xf4, 0x28, 0x49,
	0x71, 0xd8, 0x1d, 0x3b, 0x93, 0xde, 0xbc, 0xfa, 0xf7, 0x16, 0x70, 0xd4, 0xb4, 0x9f, 0xe3, 0x47,
	0x81, 0x86, 0xd8, 0x29, 0x40, 0x86, 0xb4, 0xd1, 0xf9, 0xdb, 0xaf, 0xad, 0x5b, 0x77, 0x82, 0xb8,
	0xc4, 0x91, 0x9d, 0x2a, 0x71, 0xd7, 0xe2, 0xba, 0x13, 0xc4, 0xde, 0x13, 0x1c, 0xd7, 0xcb, 0x4b,
	0xd3, 0xc2, 0xec, 0xee, 0xda, 0xb8, 0x4b, 0xed, 0xaa, 0xb6, 0xc7, 0xbf, 0xfe, 0x72, 0xe0, 0xe0,
	0xb1, 0x8a, 0x26, 0xc8, 0x08, 0xf3, 0x4c, 0x28, 0xf6, 0x00, 0xee, 0x14, 0xc9, 0x36, 0xd9, 0xb9,
	0xff, 0x13, 0xa7, 0xdf, 0xb6, 0x7e, 0xd4, 0x6f, 0x08, 0xec, 0x4c, 0xc9, 0x8d, 0xd7, 0x61, 0x33,
	0x38, 0x9c, 0x22, 0xfd, 0xc9, 0xf9, 0xac, 0x21, 0x6e, 0x49, 0x68, 0x34, 0xf8, 0x87, 0x7b, 0x9d,
	0xbb, 0xcb, 0xe7, 0x8b, 0x8a, 0xf1, 0x1d, 0x1e, 0xc4, 0xeb, 0x5e, 0xf5, 0xbd, 0xf9, 0x0e, 0x00,
	0x00, 0xff, 0xff, 0x04, 0x9e, 0xa5, 0x24, 0x3e, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HealthInternalClient is the client API for HealthInternal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HealthInternalClient interface {
	// Get the health statistics of a gateway
	GetHealth(ctx context.Context, in *GatewayStatusRequest, opts ...grpc.CallOption) (*protos.HealthStats, error)
	// Get cluster state for (networkID, clusterID) tuple
	GetClusterState(ctx context.Context, in *ClusterStateRequest, opts ...grpc.CallOption) (*ClusterState, error)
}

type healthInternalClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthInternalClient(cc grpc.ClientConnInterface) HealthInternalClient {
	return &healthInternalClient{cc}
}

func (c *healthInternalClient) GetHealth(ctx context.Context, in *GatewayStatusRequest, opts ...grpc.CallOption) (*protos.HealthStats, error) {
	out := new(protos.HealthStats)
	err := c.cc.Invoke(ctx, "/magma.feg.HealthInternal/GetHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthInternalClient) GetClusterState(ctx context.Context, in *ClusterStateRequest, opts ...grpc.CallOption) (*ClusterState, error) {
	out := new(ClusterState)
	err := c.cc.Invoke(ctx, "/magma.feg.HealthInternal/GetClusterState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthInternalServer is the server API for HealthInternal service.
type HealthInternalServer interface {
	// Get the health statistics of a gateway
	GetHealth(context.Context, *GatewayStatusRequest) (*protos.HealthStats, error)
	// Get cluster state for (networkID, clusterID) tuple
	GetClusterState(context.Context, *ClusterStateRequest) (*ClusterState, error)
}

// UnimplementedHealthInternalServer can be embedded to have forward compatible implementations.
type UnimplementedHealthInternalServer struct {
}

func (*UnimplementedHealthInternalServer) GetHealth(ctx context.Context, req *GatewayStatusRequest) (*protos.HealthStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (*UnimplementedHealthInternalServer) GetClusterState(ctx context.Context, req *ClusterStateRequest) (*ClusterState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterState not implemented")
}

func RegisterHealthInternalServer(s *grpc.Server, srv HealthInternalServer) {
	s.RegisterService(&_HealthInternal_serviceDesc, srv)
}

func _HealthInternal_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthInternalServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.HealthInternal/GetHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthInternalServer).GetHealth(ctx, req.(*GatewayStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthInternal_GetClusterState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthInternalServer).GetClusterState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.feg.HealthInternal/GetClusterState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthInternalServer).GetClusterState(ctx, req.(*ClusterStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HealthInternal_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.feg.HealthInternal",
	HandlerType: (*HealthInternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHealth",
			Handler:    _HealthInternal_GetHealth_Handler,
		},
		{
			MethodName: "GetClusterState",
			Handler:    _HealthInternal_GetClusterState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feg/cloud/go/services/health/protos/health.proto",
}
