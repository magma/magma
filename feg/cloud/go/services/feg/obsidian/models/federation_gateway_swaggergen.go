// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	models4 "magma/orc8r/cloud/go/models"
	models5 "magma/orc8r/cloud/go/services/orchestrator/obsidian/models"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FederationGateway Full description of a federation gateway
//
// swagger:model federation_gateway
type FederationGateway struct {

	// description
	// Required: true
	Description models4.GatewayDescription `json:"description"`

	// device
	Device *models5.GatewayDevice `json:"device,omitempty"`

	// federation
	// Required: true
	Federation *GatewayFederationConfigs `json:"federation"`

	// id
	// Required: true
	ID models4.GatewayID `json:"id"`

	// magmad
	// Required: true
	Magmad *models5.MagmadGatewayConfigs `json:"magmad"`

	// name
	// Required: true
	Name models4.GatewayName `json:"name"`

	// registration info
	RegistrationInfo *models4.RegistrationInfo `json:"registration_info,omitempty"`

	// status
	Status *models5.GatewayStatus `json:"status,omitempty"`

	// tier
	// Required: true
	Tier models5.TierID `json:"tier"`
}

// Validate validates this federation gateway
func (m *FederationGateway) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFederation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMagmad(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrationInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FederationGateway) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", models4.GatewayDescription(m.Description)); err != nil {
		return err
	}

	if err := m.Description.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("description")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("description")
		}
		return err
	}

	return nil
}

func (m *FederationGateway) validateDevice(formats strfmt.Registry) error {
	if swag.IsZero(m.Device) { // not required
		return nil
	}

	if m.Device != nil {
		if err := m.Device.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device")
			}
			return err
		}
	}

	return nil
}

func (m *FederationGateway) validateFederation(formats strfmt.Registry) error {

	if err := validate.Required("federation", "body", m.Federation); err != nil {
		return err
	}

	if m.Federation != nil {
		if err := m.Federation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("federation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("federation")
			}
			return err
		}
	}

	return nil
}

func (m *FederationGateway) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", models4.GatewayID(m.ID)); err != nil {
		return err
	}

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *FederationGateway) validateMagmad(formats strfmt.Registry) error {

	if err := validate.Required("magmad", "body", m.Magmad); err != nil {
		return err
	}

	if m.Magmad != nil {
		if err := m.Magmad.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("magmad")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("magmad")
			}
			return err
		}
	}

	return nil
}

func (m *FederationGateway) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", models4.GatewayName(m.Name)); err != nil {
		return err
	}

	if err := m.Name.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("name")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("name")
		}
		return err
	}

	return nil
}

func (m *FederationGateway) validateRegistrationInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.RegistrationInfo) { // not required
		return nil
	}

	if m.RegistrationInfo != nil {
		if err := m.RegistrationInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registration_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registration_info")
			}
			return err
		}
	}

	return nil
}

func (m *FederationGateway) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *FederationGateway) validateTier(formats strfmt.Registry) error {

	if err := validate.Required("tier", "body", models5.TierID(m.Tier)); err != nil {
		return err
	}

	if err := m.Tier.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tier")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("tier")
		}
		return err
	}

	return nil
}

// ContextValidate validate this federation gateway based on the context it is used
func (m *FederationGateway) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDevice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFederation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMagmad(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegistrationInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FederationGateway) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Description.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("description")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("description")
		}
		return err
	}

	return nil
}

func (m *FederationGateway) contextValidateDevice(ctx context.Context, formats strfmt.Registry) error {

	if m.Device != nil {
		if err := m.Device.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device")
			}
			return err
		}
	}

	return nil
}

func (m *FederationGateway) contextValidateFederation(ctx context.Context, formats strfmt.Registry) error {

	if m.Federation != nil {
		if err := m.Federation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("federation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("federation")
			}
			return err
		}
	}

	return nil
}

func (m *FederationGateway) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *FederationGateway) contextValidateMagmad(ctx context.Context, formats strfmt.Registry) error {

	if m.Magmad != nil {
		if err := m.Magmad.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("magmad")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("magmad")
			}
			return err
		}
	}

	return nil
}

func (m *FederationGateway) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Name.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("name")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("name")
		}
		return err
	}

	return nil
}

func (m *FederationGateway) contextValidateRegistrationInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.RegistrationInfo != nil {
		if err := m.RegistrationInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registration_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registration_info")
			}
			return err
		}
	}

	return nil
}

func (m *FederationGateway) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *FederationGateway) contextValidateTier(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Tier.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tier")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("tier")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FederationGateway) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FederationGateway) UnmarshalBinary(b []byte) error {
	var res FederationGateway
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
