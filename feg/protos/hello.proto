/*
Copyright 2020 The Magma Authors.

This source code is licensed under the BSD-style license found in the
LICENSE file in the root directory of this source tree.

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

import "google/protobuf/timestamp.proto";

package magma.feg;
option go_package = "magma/feg/cloud/go/protos";

message HelloRequest {
  string greeting = 1;
  // A grpc_err_code is an unsigned 32-bit error code as defined in the gRPC
  // spec.
  //	OK Code = 0
  //	Canceled Code = 1
  //	Unknown Code = 2
  //	InvalidArgument Code = 3
  //	DeadlineExceeded Code = 4
  //	NotFound Code = 5
  //	AlreadyExists Code = 6
  //	PermissionDenied Code = 7
  //	ResourceExhausted Code = 8
  //	FailedPrecondition Code = 9
  //	Aborted Code = 10
  //	OutOfRange Code = 11
  //	Unimplemented Code = 12
  //	Internal Code = 13
  //	Unavailable Code = 14
  //	DataLoss Code = 15
  //	Unauthenticated Code = 16
  // See https://github.com/grpc/grpc-go/blob/master/codes/codes.go for details
  // This field lets user request for a grpc err code, and expect server to
  // successfully send back this err code. If something goes wrong in the path,
  // the error code will likely come back different.
  uint32 grpc_err_code = 2;
  // timestamp that will be injected by the feg_relay
  google.protobuf.Timestamp agw_to_feg_relay_timestamp = 3;
}

message HelloReply {
  string greeting = 1;
  ResponseTimestamps timestamps = 2;
}

message ResponseTimestamps {
  // timestamp coming from HelloRequest
  google.protobuf.Timestamp agw_to_feg_relay_timestamp = 1;
  // timestamp of the reception at feg
  google.protobuf.Timestamp feg_timestamp = 2;
  // timestamp injected by feg_relay
  google.protobuf.Timestamp feg_relay_to_agw_timestamp = 3;
}

// --------------------------------------------------------------------------
// Hello service definition
// --------------------------------------------------------------------------
service Hello {

  // Sample rpc for Hello service
  //
  rpc SayHello (HelloRequest) returns (HelloReply) {}
}
