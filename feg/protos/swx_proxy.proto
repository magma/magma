/*
Copyright 2020 The Magma Authors.

This source code is licensed under the BSD-style license found in the
LICENSE file in the root directory of this source tree.

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
//
syntax = "proto3";

package magma.feg;
option go_package = "magma/feg/cloud/go/protos";

// SwxErrorCode reflects Experimental-Result values which are 3GPP failures
// to be processed by EPC. Diameter Base Protocol errors are reflected in gRPC status code
enum SwxErrorCode {
    ERROR_UNDEFINED = 0;

    IDENTITY_ALREADY_REGISTERED = 5005;
    USER_NO_NON_3GPP_SUBSCRIPTION = 5450;
}

service SwxProxy {
    // Retrieve authentication vectors from the HSS using MAR/MAA
    rpc Authenticate (AuthenticationRequest) returns (AuthenticationAnswer) {}
    // Register the AAA server serving a user to the HSS using SAR/SAA
    rpc Register (RegistrationRequest) returns (RegistrationAnswer) {}
    // Deregister the AAA server serving a user to the HSS using SAR/SAA
    rpc Deregister (RegistrationRequest) returns (RegistrationAnswer) {}
}

service SwxGatewayService {
    // TerminateRegistration - handler of SWx Registration-Termination,
    // see: http://www.qtc.jp/3GPP/Specs/29273-920.pdf Section 8.2.2.4
    rpc TerminateRegistration(RegistrationTerminationRequest) returns (RegistrationAnswer) {}
}

// AuthenticationRequest (Section 8.2.2.1)
message AuthenticationRequest {
    // Subscriber identifier
    string user_name = 1;

    // Number of authentication vectors requested
    uint32 sip_num_auth_vectors = 2;

    // EAP-AKA or EAP-AKA'
    AuthenticationScheme authentication_scheme = 3;

    // Concatenation of RAND and AUTS in the case of resync
    bytes resync_info = 4;

    // Send an additional SAR message to the HSS to retrieve user profile params
    bool retrieve_user_profile = 5;
}

enum AuthenticationScheme {
    EAP_AKA = 0;
    EAP_AKA_PRIME = 1;
}

// MultimediaAuthenticationAnswer (Section 8.2.2.1)
message AuthenticationAnswer {
    // Subscriber identifier
    string user_name = 1;

    // Only for EAP-AKA/EAP-AKA'
    message SIPAuthVector {
        // Contains one of EAP-AKA or EAP-AKA'
        AuthenticationScheme authentication_scheme = 1;
        // Concatenation of challenge RAND and token AUTN
        bytes rand_autn = 2;
        // Expected response
        bytes xres = 3;
        // Confidentiality Key
        bytes confidentiality_key = 4;
        // Integrity Key
        bytes integrity_key = 5;
    }
    // For details about fields read 3GPP 29.273
    repeated SIPAuthVector sip_auth_vectors = 2;

    message UserProfile {
        // MSISDN from HSS
        string msisdn = 1;
    }
    UserProfile user_profile = 3;

    string session_id = 4;
}

// RegistrationRequest:
// ServerAssignmentRequest with ServerAssignmentType set to (DE)/REGISTRATION (Section 8.2.2.3)
message RegistrationRequest {
    // Subscriber identifier
    string user_name = 1;
    string session_id = 2;
}

// RegistrationAnswer:
// ServerAssignmentAnswer with ServerAssignmentType set to (DE)/REGISTRATION (Section 8.2.2.3)
message RegistrationAnswer {
    string session_id = 1;
}

// RegistrationTerminationRequest, see: http://www.qtc.jp/3GPP/Specs/29273-920.pdf Section 8.2.2.4
message RegistrationTerminationRequest {
    // Subscriber identifier
    string user_name = 1;
    // ReasonCode -> DeregistrationReason:ReasonCode
    // see: https://www.etsi.org/deliver/etsi_ts/129200_129299/129229/10.05.00_60/ts_129229v100500p.pdf
    enum ReasonCode {
        PERMANENT_TERMINATION = 0;
        NEW_SERVER_ASSIGNMENT = 1;
        SERVER_CHANGE = 2;
        REMOVE_S_CSCF = 3;
    }
    ReasonCode reason_code = 2;
    string reason_info = 3;
    string session_id = 4;
}
