//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: accounting.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StopRequestTerminateCause int32

const (
	StopRequest_UNDEFINED           StopRequestTerminateCause = 0
	StopRequest_USER_REQUEST        StopRequestTerminateCause = 1  // User Request
	StopRequest_LOST_CARRIER        StopRequestTerminateCause = 2  // Lost Carrier
	StopRequest_LOST_SERVICE        StopRequestTerminateCause = 3  // Lost Service
	StopRequest_IDLE_TIMEOUT        StopRequestTerminateCause = 4  // Idle Timeout
	StopRequest_SESSION_TIMEOUT     StopRequestTerminateCause = 5  // Session Timeout
	StopRequest_ADMIN_RESET         StopRequestTerminateCause = 6  // Admin Reset
	StopRequest_ADMIN_REBOOT        StopRequestTerminateCause = 7  // Admin Reboot
	StopRequest_PORT_ERROR          StopRequestTerminateCause = 8  // Port Error
	StopRequest_NAS_ERROR           StopRequestTerminateCause = 9  // NAS Error
	StopRequest_NAS_REQUEST         StopRequestTerminateCause = 10 // NAS Request
	StopRequest_NAS_REBOOT          StopRequestTerminateCause = 11 // NAS Reboot
	StopRequest_PORT_UNNEEDED       StopRequestTerminateCause = 12 // Port Unneeded
	StopRequest_PORT_PREEMPTED      StopRequestTerminateCause = 13 // Port Preempted
	StopRequest_PORT_SUSPENDED      StopRequestTerminateCause = 14 // Port Suspended
	StopRequest_SERVICE_UNAVAILABLE StopRequestTerminateCause = 15 // Service Unavailable
	StopRequest_CALLBACK            StopRequestTerminateCause = 16 // Callback
	StopRequest_USER_ERROR          StopRequestTerminateCause = 17 // User Error
	StopRequest_HOST_REQUEST        StopRequestTerminateCause = 18 // Host Request
)

// Enum value maps for StopRequestTerminateCause.
var (
	StopRequestTerminateCause_name = map[int32]string{
		0:  "UNDEFINED",
		1:  "USER_REQUEST",
		2:  "LOST_CARRIER",
		3:  "LOST_SERVICE",
		4:  "IDLE_TIMEOUT",
		5:  "SESSION_TIMEOUT",
		6:  "ADMIN_RESET",
		7:  "ADMIN_REBOOT",
		8:  "PORT_ERROR",
		9:  "NAS_ERROR",
		10: "NAS_REQUEST",
		11: "NAS_REBOOT",
		12: "PORT_UNNEEDED",
		13: "PORT_PREEMPTED",
		14: "PORT_SUSPENDED",
		15: "SERVICE_UNAVAILABLE",
		16: "CALLBACK",
		17: "USER_ERROR",
		18: "HOST_REQUEST",
	}
	StopRequestTerminateCause_value = map[string]int32{
		"UNDEFINED":           0,
		"USER_REQUEST":        1,
		"LOST_CARRIER":        2,
		"LOST_SERVICE":        3,
		"IDLE_TIMEOUT":        4,
		"SESSION_TIMEOUT":     5,
		"ADMIN_RESET":         6,
		"ADMIN_REBOOT":        7,
		"PORT_ERROR":          8,
		"NAS_ERROR":           9,
		"NAS_REQUEST":         10,
		"NAS_REBOOT":          11,
		"PORT_UNNEEDED":       12,
		"PORT_PREEMPTED":      13,
		"PORT_SUSPENDED":      14,
		"SERVICE_UNAVAILABLE": 15,
		"CALLBACK":            16,
		"USER_ERROR":          17,
		"HOST_REQUEST":        18,
	}
)

func (x StopRequestTerminateCause) Enum() *StopRequestTerminateCause {
	p := new(StopRequestTerminateCause)
	*p = x
	return p
}

func (x StopRequestTerminateCause) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StopRequestTerminateCause) Descriptor() protoreflect.EnumDescriptor {
	return file_accounting_proto_enumTypes[0].Descriptor()
}

func (StopRequestTerminateCause) Type() protoreflect.EnumType {
	return &file_accounting_proto_enumTypes[0]
}

func (x StopRequestTerminateCause) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StopRequestTerminateCause.Descriptor instead.
func (StopRequestTerminateCause) EnumDescriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{1, 0}
}

// update_request with usages & included context
type UpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OctetsIn   uint32   `protobuf:"varint,1,opt,name=octets_in,json=octetsIn,proto3" json:"octets_in,omitempty"`
	OctetsOut  uint32   `protobuf:"varint,2,opt,name=octets_out,json=octetsOut,proto3" json:"octets_out,omitempty"`
	PacketsIn  uint32   `protobuf:"varint,3,opt,name=packets_in,json=packetsIn,proto3" json:"packets_in,omitempty"`
	PacketsOut uint32   `protobuf:"varint,4,opt,name=packets_out,json=packetsOut,proto3" json:"packets_out,omitempty"`
	Ctx        *Context `protobuf:"bytes,5,opt,name=ctx,proto3" json:"ctx,omitempty"`
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateRequest) GetOctetsIn() uint32 {
	if x != nil {
		return x.OctetsIn
	}
	return 0
}

func (x *UpdateRequest) GetOctetsOut() uint32 {
	if x != nil {
		return x.OctetsOut
	}
	return 0
}

func (x *UpdateRequest) GetPacketsIn() uint32 {
	if x != nil {
		return x.PacketsIn
	}
	return 0
}

func (x *UpdateRequest) GetPacketsOut() uint32 {
	if x != nil {
		return x.PacketsOut
	}
	return 0
}

func (x *UpdateRequest) GetCtx() *Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

// stop_request - ctx with termination cause: https://tools.ietf.org/html/rfc2866#page-20
type StopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cause     StopRequestTerminateCause `protobuf:"varint,1,opt,name=cause,proto3,enum=aaa.protos.StopRequestTerminateCause" json:"cause,omitempty"`
	Ctx       *Context                  `protobuf:"bytes,2,opt,name=ctx,proto3" json:"ctx,omitempty"`
	OctetsIn  uint32                    `protobuf:"varint,3,opt,name=octets_in,json=octetsIn,proto3" json:"octets_in,omitempty"`
	OctetsOut uint32                    `protobuf:"varint,4,opt,name=octets_out,json=octetsOut,proto3" json:"octets_out,omitempty"`
}

func (x *StopRequest) Reset() {
	*x = StopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRequest) ProtoMessage() {}

func (x *StopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRequest.ProtoReflect.Descriptor instead.
func (*StopRequest) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{1}
}

func (x *StopRequest) GetCause() StopRequestTerminateCause {
	if x != nil {
		return x.Cause
	}
	return StopRequest_UNDEFINED
}

func (x *StopRequest) GetCtx() *Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *StopRequest) GetOctetsIn() uint32 {
	if x != nil {
		return x.OctetsIn
	}
	return 0
}

func (x *StopRequest) GetOctetsOut() uint32 {
	if x != nil {
		return x.OctetsOut
	}
	return 0
}

// acct_resp message - RPC message definition for Accounting-Response (currently empty)
// see: https://tools.ietf.org/html/rfc2866#section-4.2
type AcctResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AcctResp) Reset() {
	*x = AcctResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctResp) ProtoMessage() {}

func (x *AcctResp) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctResp.ProtoReflect.Descriptor instead.
func (*AcctResp) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{2}
}

type CreateSessionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *CreateSessionResp) Reset() {
	*x = CreateSessionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionResp) ProtoMessage() {}

func (x *CreateSessionResp) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionResp.ProtoReflect.Descriptor instead.
func (*CreateSessionResp) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{3}
}

func (x *CreateSessionResp) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type TerminateSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RadiusSessionId string `protobuf:"bytes,1,opt,name=radius_session_id,json=radiusSessionId,proto3" json:"radius_session_id,omitempty"`
	Imsi            string `protobuf:"bytes,2,opt,name=imsi,proto3" json:"imsi,omitempty"`
}

func (x *TerminateSessionRequest) Reset() {
	*x = TerminateSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateSessionRequest) ProtoMessage() {}

func (x *TerminateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateSessionRequest.ProtoReflect.Descriptor instead.
func (*TerminateSessionRequest) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{4}
}

func (x *TerminateSessionRequest) GetRadiusSessionId() string {
	if x != nil {
		return x.RadiusSessionId
	}
	return ""
}

func (x *TerminateSessionRequest) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

type AddSessionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sessions []*Context `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
}

func (x *AddSessionsRequest) Reset() {
	*x = AddSessionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSessionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSessionsRequest) ProtoMessage() {}

func (x *AddSessionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSessionsRequest.ProtoReflect.Descriptor instead.
func (*AddSessionsRequest) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{5}
}

func (x *AddSessionsRequest) GetSessions() []*Context {
	if x != nil {
		return x.Sessions
	}
	return nil
}

var File_accounting_proto protoreflect.FileDescriptor

var file_accounting_proto_rawDesc = []byte{
	0x0a, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x61, 0x61, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x1a, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb3, 0x01,
	0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x03,
	0x63, 0x74, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x61, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x22, 0x98, 0x04, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x61, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x52, 0x05, 0x63,
	0x61, 0x75, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x61, 0x61, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x6f,
	0x63, 0x74, 0x65, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x63, 0x74, 0x65,
	0x74, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x63,
	0x74, 0x65, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x22, 0xe4, 0x02, 0x0a, 0x0f, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55,
	0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x4c, 0x4f, 0x53, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x52, 0x49, 0x45, 0x52, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x4c, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x03,
	0x12, 0x10, 0x0a, 0x0c, 0x49, 0x44, 0x4c, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54,
	0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x44, 0x4d, 0x49, 0x4e,
	0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x44, 0x4d, 0x49,
	0x4e, 0x5f, 0x52, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x41,
	0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x41, 0x53,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x41,
	0x53, 0x5f, 0x52, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x55, 0x4e, 0x4e, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x12, 0x0a,
	0x0e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x45, 0x4d, 0x50, 0x54, 0x45, 0x44, 0x10,
	0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e,
	0x44, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0f, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x10, 0x12, 0x0e, 0x0a, 0x0a,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x11, 0x12, 0x10, 0x0a, 0x0c,
	0x48, 0x4f, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x12, 0x22, 0x0b,
	0x0a, 0x09, 0x61, 0x63, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x22, 0x34, 0x0a, 0x13, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x5b, 0x0a, 0x19, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d,
	0x73, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x22, 0x47,
	0x0a, 0x14, 0x61, 0x64, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x61, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x08, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0xaf, 0x03, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x13, 0x2e, 0x61, 0x61, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x61, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x61, 0x63, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x45, 0x0a,
	0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x2e, 0x61, 0x61, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x61,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x63, 0x63, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x18, 0x2e, 0x61,
	0x61, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x61, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x61, 0x63, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x48, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x13, 0x2e, 0x61, 0x61, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x61, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x11, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x2e, 0x61, 0x61, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x61, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x61, 0x63, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x49,
	0x0a, 0x0c, 0x61, 0x64, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20,
	0x2e, 0x61, 0x61, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x64, 0x64, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x61, 0x61, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x63,
	0x63, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x27, 0x5a, 0x25, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2f, 0x66, 0x65, 0x67, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x61, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_accounting_proto_rawDescOnce sync.Once
	file_accounting_proto_rawDescData = file_accounting_proto_rawDesc
)

func file_accounting_proto_rawDescGZIP() []byte {
	file_accounting_proto_rawDescOnce.Do(func() {
		file_accounting_proto_rawDescData = protoimpl.X.CompressGZIP(file_accounting_proto_rawDescData)
	})
	return file_accounting_proto_rawDescData
}

var file_accounting_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_accounting_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_accounting_proto_goTypes = []interface{}{
	(StopRequestTerminateCause)(0),  // 0: aaa.protos.stop_request.terminate_cause
	(*UpdateRequest)(nil),           // 1: aaa.protos.update_request
	(*StopRequest)(nil),             // 2: aaa.protos.stop_request
	(*AcctResp)(nil),                // 3: aaa.protos.acct_resp
	(*CreateSessionResp)(nil),       // 4: aaa.protos.create_session_resp
	(*TerminateSessionRequest)(nil), // 5: aaa.protos.terminate_session_request
	(*AddSessionsRequest)(nil),      // 6: aaa.protos.add_sessions_request
	(*Context)(nil),                 // 7: aaa.protos.context
}
var file_accounting_proto_depIdxs = []int32{
	7,  // 0: aaa.protos.update_request.ctx:type_name -> aaa.protos.context
	0,  // 1: aaa.protos.stop_request.cause:type_name -> aaa.protos.stop_request.terminate_cause
	7,  // 2: aaa.protos.stop_request.ctx:type_name -> aaa.protos.context
	7,  // 3: aaa.protos.add_sessions_request.sessions:type_name -> aaa.protos.context
	7,  // 4: aaa.protos.accounting.start:input_type -> aaa.protos.context
	1,  // 5: aaa.protos.accounting.interim_update:input_type -> aaa.protos.update_request
	2,  // 6: aaa.protos.accounting.stop:input_type -> aaa.protos.stop_request
	7,  // 7: aaa.protos.accounting.create_session:input_type -> aaa.protos.context
	5,  // 8: aaa.protos.accounting.terminate_session:input_type -> aaa.protos.terminate_session_request
	6,  // 9: aaa.protos.accounting.add_sessions:input_type -> aaa.protos.add_sessions_request
	3,  // 10: aaa.protos.accounting.start:output_type -> aaa.protos.acct_resp
	3,  // 11: aaa.protos.accounting.interim_update:output_type -> aaa.protos.acct_resp
	3,  // 12: aaa.protos.accounting.stop:output_type -> aaa.protos.acct_resp
	4,  // 13: aaa.protos.accounting.create_session:output_type -> aaa.protos.create_session_resp
	3,  // 14: aaa.protos.accounting.terminate_session:output_type -> aaa.protos.acct_resp
	3,  // 15: aaa.protos.accounting.add_sessions:output_type -> aaa.protos.acct_resp
	10, // [10:16] is the sub-list for method output_type
	4,  // [4:10] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_accounting_proto_init() }
func file_accounting_proto_init() {
	if File_accounting_proto != nil {
		return
	}
	file_context_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_accounting_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminateSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSessionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_accounting_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_accounting_proto_goTypes,
		DependencyIndexes: file_accounting_proto_depIdxs,
		EnumInfos:         file_accounting_proto_enumTypes,
		MessageInfos:      file_accounting_proto_msgTypes,
	}.Build()
	File_accounting_proto = out.File
	file_accounting_proto_rawDesc = nil
	file_accounting_proto_goTypes = nil
	file_accounting_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AccountingClient is the client API for Accounting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccountingClient interface {
	// External Radius Server RPCs
	//
	// Acct-Status-Type Start
	Start(ctx context.Context, in *Context, opts ...grpc.CallOption) (*AcctResp, error)
	// Accounting Interim-Update
	InterimUpdate(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*AcctResp, error)
	// Acct-Status-Type Stop
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*AcctResp, error)
	// Local Session Management RPCs
	//
	// create_session is an "outbound" RPC for session manager which can be called from start()
	CreateSession(ctx context.Context, in *Context, opts ...grpc.CallOption) (*CreateSessionResp, error)
	// terminate_session is an "inbound" RPC from session manager to notify accounting of a client session termination
	TerminateSession(ctx context.Context, in *TerminateSessionRequest, opts ...grpc.CallOption) (*AcctResp, error)
	// add_sessions is an "inbound" RPC from session manager to bulk add existing sessions
	AddSessions(ctx context.Context, in *AddSessionsRequest, opts ...grpc.CallOption) (*AcctResp, error)
}

type accountingClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountingClient(cc grpc.ClientConnInterface) AccountingClient {
	return &accountingClient{cc}
}

func (c *accountingClient) Start(ctx context.Context, in *Context, opts ...grpc.CallOption) (*AcctResp, error) {
	out := new(AcctResp)
	err := c.cc.Invoke(ctx, "/aaa.protos.accounting/start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingClient) InterimUpdate(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*AcctResp, error) {
	out := new(AcctResp)
	err := c.cc.Invoke(ctx, "/aaa.protos.accounting/interim_update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*AcctResp, error) {
	out := new(AcctResp)
	err := c.cc.Invoke(ctx, "/aaa.protos.accounting/stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingClient) CreateSession(ctx context.Context, in *Context, opts ...grpc.CallOption) (*CreateSessionResp, error) {
	out := new(CreateSessionResp)
	err := c.cc.Invoke(ctx, "/aaa.protos.accounting/create_session", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingClient) TerminateSession(ctx context.Context, in *TerminateSessionRequest, opts ...grpc.CallOption) (*AcctResp, error) {
	out := new(AcctResp)
	err := c.cc.Invoke(ctx, "/aaa.protos.accounting/terminate_session", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingClient) AddSessions(ctx context.Context, in *AddSessionsRequest, opts ...grpc.CallOption) (*AcctResp, error) {
	out := new(AcctResp)
	err := c.cc.Invoke(ctx, "/aaa.protos.accounting/add_sessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountingServer is the server API for Accounting service.
type AccountingServer interface {
	// External Radius Server RPCs
	//
	// Acct-Status-Type Start
	Start(context.Context, *Context) (*AcctResp, error)
	// Accounting Interim-Update
	InterimUpdate(context.Context, *UpdateRequest) (*AcctResp, error)
	// Acct-Status-Type Stop
	Stop(context.Context, *StopRequest) (*AcctResp, error)
	// Local Session Management RPCs
	//
	// create_session is an "outbound" RPC for session manager which can be called from start()
	CreateSession(context.Context, *Context) (*CreateSessionResp, error)
	// terminate_session is an "inbound" RPC from session manager to notify accounting of a client session termination
	TerminateSession(context.Context, *TerminateSessionRequest) (*AcctResp, error)
	// add_sessions is an "inbound" RPC from session manager to bulk add existing sessions
	AddSessions(context.Context, *AddSessionsRequest) (*AcctResp, error)
}

// UnimplementedAccountingServer can be embedded to have forward compatible implementations.
type UnimplementedAccountingServer struct {
}

func (*UnimplementedAccountingServer) Start(context.Context, *Context) (*AcctResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedAccountingServer) InterimUpdate(context.Context, *UpdateRequest) (*AcctResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InterimUpdate not implemented")
}
func (*UnimplementedAccountingServer) Stop(context.Context, *StopRequest) (*AcctResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedAccountingServer) CreateSession(context.Context, *Context) (*CreateSessionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (*UnimplementedAccountingServer) TerminateSession(context.Context, *TerminateSessionRequest) (*AcctResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateSession not implemented")
}
func (*UnimplementedAccountingServer) AddSessions(context.Context, *AddSessionsRequest) (*AcctResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSessions not implemented")
}

func RegisterAccountingServer(s *grpc.Server, srv AccountingServer) {
	s.RegisterService(&_Accounting_serviceDesc, srv)
}

func _Accounting_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Context)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aaa.protos.accounting/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServer).Start(ctx, req.(*Context))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounting_InterimUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServer).InterimUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aaa.protos.accounting/InterimUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServer).InterimUpdate(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounting_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aaa.protos.accounting/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounting_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Context)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aaa.protos.accounting/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServer).CreateSession(ctx, req.(*Context))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounting_TerminateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServer).TerminateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aaa.protos.accounting/TerminateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServer).TerminateSession(ctx, req.(*TerminateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounting_AddSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServer).AddSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aaa.protos.accounting/AddSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServer).AddSessions(ctx, req.(*AddSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Accounting_serviceDesc = grpc.ServiceDesc{
	ServiceName: "aaa.protos.accounting",
	HandlerType: (*AccountingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "start",
			Handler:    _Accounting_Start_Handler,
		},
		{
			MethodName: "interim_update",
			Handler:    _Accounting_InterimUpdate_Handler,
		},
		{
			MethodName: "stop",
			Handler:    _Accounting_Stop_Handler,
		},
		{
			MethodName: "create_session",
			Handler:    _Accounting_CreateSession_Handler,
		},
		{
			MethodName: "terminate_session",
			Handler:    _Accounting_TerminateSession_Handler,
		},
		{
			MethodName: "add_sessions",
			Handler:    _Accounting_AddSessions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accounting.proto",
}
