/*
Copyright 2020 The Magma Authors.

This source code is licensed under the BSD-style license found in the
LICENSE file in the root directory of this source tree.

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package gx_test

import (
	"bytes"
	"errors"
	"fmt"
	"testing"

	"github.com/fiorix/go-diameter/v4/diam"
	"github.com/fiorix/go-diameter/v4/diam/dict"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"

	policydb_mocks "magma/feg/gateway/policydb/mocks"
	"magma/feg/gateway/services/session_proxy/credit_control/gx"
	relay_mocks "magma/feg/gateway/services/session_proxy/relay/mocks"
	"magma/lte/cloud/go/protos"
)

// Tests data flow from feg to/from SessionProxyResponder. Protobuf conversion
// is tested separately.
func TestReAuthRelay(t *testing.T) {
	sm, cloudRegistry := relay_mocks.StartMockSessionProxyResponder(t)
	mockPolicyClient := &policydb_mocks.PolicyDBClient{}
	handler := gx.GetGxReAuthHandler(cloudRegistry, mockPolicyClient)

	imsi := "IMSI000000000000001"
	sessionID := fmt.Sprintf("%s-%d", imsi, 1234)
	// We're not putting any rules in the request, those code paths are covered
	// by model conversion tests
	mockPolicyClient.On("GetRuleIDsForBaseNames", mock.Anything).Return([]string{})

	// Happy path
	req := &gx.PolicyReAuthRequest{SessionID: sessionID}
	sm.On("PolicyReAuth", mock.Anything, &protos.PolicyReAuthRequest{SessionId: sessionID, Imsi: imsi}).
		Return(&protos.PolicyReAuthAnswer{SessionId: "mock_ret"}, nil).Once()
	actual := handler(req)
	// Handler should use session ID from request instead of response
	assert.Equal(t, &gx.PolicyReAuthAnswer{SessionID: sessionID, ResultCode: diam.Success, RuleReports: []*gx.ChargingRuleReport{}}, actual)

	// Bad session ID
	req = &gx.PolicyReAuthRequest{SessionID: "bad"}
	actual = handler(req)
	assert.Equal(t, &gx.PolicyReAuthAnswer{SessionID: "bad", ResultCode: diam.UnknownSessionID}, actual)

	// Error from client
	req = &gx.PolicyReAuthRequest{SessionID: sessionID}
	sm.On("PolicyReAuth", mock.Anything, &protos.PolicyReAuthRequest{SessionId: sessionID, Imsi: imsi}).
		Return(nil, errors.New("oops")).Once()
	actual = handler(req)
	assert.Equal(t, &gx.PolicyReAuthAnswer{SessionID: sessionID, ResultCode: diam.UnableToDeliver}, actual)
	sm.AssertExpectations(t)
}

var gxReauthMessage = []byte{
	0x01, 0x00, 0x02, 0xfc, 0xc0, 0x00, 0x01, 0x02,
	0x01, 0x00, 0x00, 0x16, 0x05, 0x20, 0x03, 0x2e,
	0xdb, 0x52, 0x03, 0x2e, 0x00, 0x00, 0x01, 0x07,
	0x40, 0x00, 0x00, 0x45, 0x65, 0x70, 0x63, 0x2e,
	0x6d, 0x6e, 0x63, 0x30, 0x30, 0x31, 0x2e, 0x6d,
	0x63, 0x63, 0x30, 0x30, 0x31, 0x2e, 0x33, 0x67,
	0x70, 0x70, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x6f, 0x72, 0x67, 0x3b, 0x36, 0x39,
	0x38, 0x3b, 0x37, 0x32, 0x39, 0x3b, 0x49, 0x4d,
	0x53, 0x49, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x32,
	0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02,
	0x40, 0x00, 0x00, 0x0c, 0x01, 0x00, 0x00, 0x16,
	0x00, 0x00, 0x01, 0x1d, 0x40, 0x00, 0x00, 0x0c,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xee,
	0xc0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x28, 0xaf,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xee,
	0xc0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x28, 0xaf,
	0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x03, 0xe9,
	0xc0, 0x00, 0x01, 0x50, 0x00, 0x00, 0x28, 0xaf,
	0x00, 0x00, 0x03, 0xeb, 0xc0, 0x00, 0x01, 0x44,
	0x00, 0x00, 0x28, 0xaf, 0x00, 0x00, 0x03, 0xed,
	0xc0, 0x00, 0x00, 0x27, 0x00, 0x00, 0x28, 0xaf,
	0x44, 0x65, 0x64, 0x69, 0x20, 0x62, 0x65, 0x61,
	0x72, 0x65, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61,
	0x20, 0x51, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x32, 0x31, 0x32, 0x00, 0x00, 0x00, 0x01, 0xfb,
	0xc0, 0x00, 0x00, 0x32, 0x00, 0x00, 0x28, 0xaf,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x20, 0x69,
	0x6e, 0x20, 0x69, 0x70, 0x20, 0x66, 0x72, 0x6f,
	0x6d, 0x20, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2e,
	0x30, 0x2f, 0x30, 0x20, 0x74, 0x6f, 0x20, 0x34,
	0x2e, 0x32, 0x2e, 0x32, 0x2e, 0x34, 0x00, 0x00,
	0x00, 0x00, 0x01, 0xfb, 0xc0, 0x00, 0x00, 0x33,
	0x00, 0x00, 0x28, 0xaf, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x69,
	0x70, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x34,
	0x2e, 0x32, 0x2e, 0x32, 0x2e, 0x34, 0x20, 0x74,
	0x6f, 0x20, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2e,
	0x30, 0x2f, 0x30, 0x00, 0x00, 0x00, 0x03, 0xf2,
	0xc0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x28, 0xaf,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf8,
	0xc0, 0x00, 0x00, 0x98, 0x00, 0x00, 0x28, 0xaf,
	0x00, 0x00, 0x04, 0x04, 0xc0, 0x00, 0x00, 0x10,
	0x00, 0x00, 0x28, 0xaf, 0x00, 0x00, 0x00, 0x05,
	0x00, 0x00, 0x02, 0x04, 0xc0, 0x00, 0x00, 0x10,
	0x00, 0x00, 0x28, 0xaf, 0x00, 0x01, 0x86, 0xa0,
	0x00, 0x00, 0x02, 0x03, 0xc0, 0x00, 0x00, 0x10,
	0x00, 0x00, 0x28, 0xaf, 0x00, 0x01, 0x86, 0xa0,
	0x00, 0x00, 0x04, 0x02, 0xc0, 0x00, 0x00, 0x10,
	0x00, 0x00, 0x28, 0xaf, 0x00, 0x01, 0x86, 0xa0,
	0x00, 0x00, 0x04, 0x01, 0xc0, 0x00, 0x00, 0x10,
	0x00, 0x00, 0x28, 0xaf, 0x00, 0x01, 0x86, 0xa0,
	0x00, 0x00, 0x04, 0x0a, 0xc0, 0x00, 0x00, 0x3c,
	0x00, 0x00, 0x28, 0xaf, 0x00, 0x00, 0x04, 0x16,
	0x80, 0x00, 0x00, 0x10, 0x00, 0x00, 0x28, 0xaf,
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x04, 0x17,
	0x80, 0x00, 0x00, 0x10, 0x00, 0x00, 0x28, 0xaf,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x04, 0x18,
	0x80, 0x00, 0x00, 0x10, 0x00, 0x00, 0x28, 0xaf,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf8,
	0xc0, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x28, 0xaf,
	0x00, 0x00, 0x04, 0x04, 0xc0, 0x00, 0x00, 0x10,
	0x00, 0x00, 0x28, 0xaf, 0x00, 0x00, 0x00, 0x05,
	0x00, 0x00, 0x02, 0x04, 0xc0, 0x00, 0x00, 0x10,
	0x00, 0x00, 0x28, 0xaf, 0x00, 0x01, 0x86, 0xa0,
	0x00, 0x00, 0x02, 0x03, 0xc0, 0x00, 0x00, 0x10,
	0x00, 0x00, 0x28, 0xaf, 0x00, 0x01, 0x86, 0xa0,
	0x00, 0x00, 0x04, 0x02, 0xc0, 0x00, 0x00, 0x10,
	0x00, 0x00, 0x28, 0xaf, 0x00, 0x01, 0x86, 0xa0,
	0x00, 0x00, 0x04, 0x01, 0xc0, 0x00, 0x00, 0x10,
	0x00, 0x00, 0x28, 0xaf, 0x00, 0x01, 0x86, 0xa0,
	0x00, 0x00, 0x01, 0x08, 0x40, 0x00, 0x00, 0x2e,
	0x70, 0x63, 0x72, 0x66, 0x2e, 0x65, 0x70, 0x63,
	0x2e, 0x6d, 0x6e, 0x63, 0x30, 0x30, 0x31, 0x2e,
	0x6d, 0x63, 0x63, 0x30, 0x30, 0x31, 0x2e, 0x33,
	0x67, 0x70, 0x70, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x6f, 0x72, 0x67, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x28, 0x40, 0x00, 0x00, 0x29,
	0x65, 0x70, 0x63, 0x2e, 0x6d, 0x6e, 0x63, 0x30,
	0x30, 0x31, 0x2e, 0x6d, 0x63, 0x63, 0x30, 0x30,
	0x31, 0x2e, 0x33, 0x67, 0x70, 0x70, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x72,
	0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x1b,
	0x40, 0x00, 0x00, 0x29, 0x65, 0x70, 0x63, 0x2e,
	0x6d, 0x6e, 0x63, 0x30, 0x30, 0x31, 0x2e, 0x6d,
	0x63, 0x63, 0x30, 0x30, 0x31, 0x2e, 0x33, 0x67,
	0x70, 0x70, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x6f, 0x72, 0x67, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x25, 0x40, 0x00, 0x00, 0x32,
	0x66, 0x65, 0x67, 0x2d, 0x73, 0x70, 0x67, 0x77,
	0x2e, 0x65, 0x70, 0x63, 0x2e, 0x6d, 0x6e, 0x63,
	0x30, 0x30, 0x31, 0x2e, 0x6d, 0x63, 0x63, 0x30,
	0x30, 0x31, 0x2e, 0x33, 0x67, 0x70, 0x70, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f,
	0x72, 0x67, 0x00, 0x00}

func TestGxReauthConversions(t *testing.T) {
	msg, err := diam.ReadMessage(bytes.NewReader(gxReauthMessage), dict.Default)
	if err != nil {
		t.Fatal(err)
	}
	reauthReq := &gx.PolicyReAuthRequest{}
	if err := msg.Unmarshal(reauthReq); err != nil {
		t.Fatal(err)
	}

	var (
		ptrVal uint32 = 100000
		qci    uint32 = 5
	)
	expected := &gx.PolicyReAuthRequest{
		SessionID:  "epc.mnc001.mcc001.3gppnetwork.org;698;729;IMSI001010000000122",
		OriginHost: "pcrf.epc.mnc001.mcc001.3gppnetwork.org",
		RulesToInstall: []*gx.RuleInstallAVP{
			{
				RuleDefinitions: []*gx.RuleDefinition{
					{
						RuleName: "Dedi bearer data Q100000212",
						FlowDescriptions: []string{
							"permit in ip from 0.0.0.0/0 to 4.2.2.4",
							"permit out ip from 4.2.2.4 to 0.0.0.0/0",
						},
						Qos: &gx.QosInformation{
							MaxReqBwUL: &ptrVal,
							MaxReqBwDL: &ptrVal,
							GbrDL:      &ptrVal,
							GbrUL:      &ptrVal,
							Qci:        &qci,
						},
					},
				},
			},
		},
		Qos: &gx.QosInformation{
			MaxReqBwUL: &ptrVal,
			MaxReqBwDL: &ptrVal,
			GbrDL:      &ptrVal,
			GbrUL:      &ptrVal,
			Qci:        &qci,
		},
		EventTriggers: []gx.EventTrigger{1, 20},
	}
	assert.Equal(t, expected, reauthReq)
}
