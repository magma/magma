// Code generated by mockery v1.0.0. DO NOT EDIT.

// Run make gen at FEG to re-generate

package mocks

import (
	context "context"
	TS29512NpcfSMPolicyControl "magma/feg/gateway/sbi/specs/TS29512NpcfSMPolicyControl"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// ClientWithResponsesInterface is an autogenerated mock type for the ClientWithResponsesInterface type
type ClientWithResponsesInterface struct {
	mock.Mock
}

// GetSmPoliciesSmPolicyIdWithResponse provides a mock function with given fields: ctx, smPolicyId, reqEditors
func (_m *ClientWithResponsesInterface) GetSmPoliciesSmPolicyIdWithResponse(ctx context.Context, smPolicyId string, reqEditors ...TS29512NpcfSMPolicyControl.RequestEditorFn) (*TS29512NpcfSMPolicyControl.GetSmPoliciesSmPolicyIdResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, smPolicyId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *TS29512NpcfSMPolicyControl.GetSmPoliciesSmPolicyIdResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...TS29512NpcfSMPolicyControl.RequestEditorFn) *TS29512NpcfSMPolicyControl.GetSmPoliciesSmPolicyIdResponse); ok {
		r0 = rf(ctx, smPolicyId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TS29512NpcfSMPolicyControl.GetSmPoliciesSmPolicyIdResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...TS29512NpcfSMPolicyControl.RequestEditorFn) error); ok {
		r1 = rf(ctx, smPolicyId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostSmPoliciesSmPolicyIdDeleteWithBodyWithResponse provides a mock function with given fields: ctx, smPolicyId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) PostSmPoliciesSmPolicyIdDeleteWithBodyWithResponse(ctx context.Context, smPolicyId string, contentType string, body io.Reader, reqEditors ...TS29512NpcfSMPolicyControl.RequestEditorFn) (*TS29512NpcfSMPolicyControl.PostSmPoliciesSmPolicyIdDeleteResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, smPolicyId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *TS29512NpcfSMPolicyControl.PostSmPoliciesSmPolicyIdDeleteResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...TS29512NpcfSMPolicyControl.RequestEditorFn) *TS29512NpcfSMPolicyControl.PostSmPoliciesSmPolicyIdDeleteResponse); ok {
		r0 = rf(ctx, smPolicyId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TS29512NpcfSMPolicyControl.PostSmPoliciesSmPolicyIdDeleteResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...TS29512NpcfSMPolicyControl.RequestEditorFn) error); ok {
		r1 = rf(ctx, smPolicyId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostSmPoliciesSmPolicyIdDeleteWithResponse provides a mock function with given fields: ctx, smPolicyId, body, reqEditors
func (_m *ClientWithResponsesInterface) PostSmPoliciesSmPolicyIdDeleteWithResponse(ctx context.Context, smPolicyId string, body TS29512NpcfSMPolicyControl.PostSmPoliciesSmPolicyIdDeleteJSONRequestBody, reqEditors ...TS29512NpcfSMPolicyControl.RequestEditorFn) (*TS29512NpcfSMPolicyControl.PostSmPoliciesSmPolicyIdDeleteResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, smPolicyId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *TS29512NpcfSMPolicyControl.PostSmPoliciesSmPolicyIdDeleteResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, TS29512NpcfSMPolicyControl.PostSmPoliciesSmPolicyIdDeleteJSONRequestBody, ...TS29512NpcfSMPolicyControl.RequestEditorFn) *TS29512NpcfSMPolicyControl.PostSmPoliciesSmPolicyIdDeleteResponse); ok {
		r0 = rf(ctx, smPolicyId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TS29512NpcfSMPolicyControl.PostSmPoliciesSmPolicyIdDeleteResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, TS29512NpcfSMPolicyControl.PostSmPoliciesSmPolicyIdDeleteJSONRequestBody, ...TS29512NpcfSMPolicyControl.RequestEditorFn) error); ok {
		r1 = rf(ctx, smPolicyId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostSmPoliciesSmPolicyIdUpdateWithBodyWithResponse provides a mock function with given fields: ctx, smPolicyId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) PostSmPoliciesSmPolicyIdUpdateWithBodyWithResponse(ctx context.Context, smPolicyId string, contentType string, body io.Reader, reqEditors ...TS29512NpcfSMPolicyControl.RequestEditorFn) (*TS29512NpcfSMPolicyControl.PostSmPoliciesSmPolicyIdUpdateResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, smPolicyId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *TS29512NpcfSMPolicyControl.PostSmPoliciesSmPolicyIdUpdateResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...TS29512NpcfSMPolicyControl.RequestEditorFn) *TS29512NpcfSMPolicyControl.PostSmPoliciesSmPolicyIdUpdateResponse); ok {
		r0 = rf(ctx, smPolicyId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TS29512NpcfSMPolicyControl.PostSmPoliciesSmPolicyIdUpdateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...TS29512NpcfSMPolicyControl.RequestEditorFn) error); ok {
		r1 = rf(ctx, smPolicyId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostSmPoliciesSmPolicyIdUpdateWithResponse provides a mock function with given fields: ctx, smPolicyId, body, reqEditors
func (_m *ClientWithResponsesInterface) PostSmPoliciesSmPolicyIdUpdateWithResponse(ctx context.Context, smPolicyId string, body TS29512NpcfSMPolicyControl.PostSmPoliciesSmPolicyIdUpdateJSONRequestBody, reqEditors ...TS29512NpcfSMPolicyControl.RequestEditorFn) (*TS29512NpcfSMPolicyControl.PostSmPoliciesSmPolicyIdUpdateResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, smPolicyId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *TS29512NpcfSMPolicyControl.PostSmPoliciesSmPolicyIdUpdateResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, TS29512NpcfSMPolicyControl.PostSmPoliciesSmPolicyIdUpdateJSONRequestBody, ...TS29512NpcfSMPolicyControl.RequestEditorFn) *TS29512NpcfSMPolicyControl.PostSmPoliciesSmPolicyIdUpdateResponse); ok {
		r0 = rf(ctx, smPolicyId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TS29512NpcfSMPolicyControl.PostSmPoliciesSmPolicyIdUpdateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, TS29512NpcfSMPolicyControl.PostSmPoliciesSmPolicyIdUpdateJSONRequestBody, ...TS29512NpcfSMPolicyControl.RequestEditorFn) error); ok {
		r1 = rf(ctx, smPolicyId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostSmPoliciesWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) PostSmPoliciesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...TS29512NpcfSMPolicyControl.RequestEditorFn) (*TS29512NpcfSMPolicyControl.PostSmPoliciesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *TS29512NpcfSMPolicyControl.PostSmPoliciesResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...TS29512NpcfSMPolicyControl.RequestEditorFn) *TS29512NpcfSMPolicyControl.PostSmPoliciesResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TS29512NpcfSMPolicyControl.PostSmPoliciesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...TS29512NpcfSMPolicyControl.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostSmPoliciesWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) PostSmPoliciesWithResponse(ctx context.Context, body TS29512NpcfSMPolicyControl.PostSmPoliciesJSONRequestBody, reqEditors ...TS29512NpcfSMPolicyControl.RequestEditorFn) (*TS29512NpcfSMPolicyControl.PostSmPoliciesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *TS29512NpcfSMPolicyControl.PostSmPoliciesResponse
	if rf, ok := ret.Get(0).(func(context.Context, TS29512NpcfSMPolicyControl.PostSmPoliciesJSONRequestBody, ...TS29512NpcfSMPolicyControl.RequestEditorFn) *TS29512NpcfSMPolicyControl.PostSmPoliciesResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TS29512NpcfSMPolicyControl.PostSmPoliciesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, TS29512NpcfSMPolicyControl.PostSmPoliciesJSONRequestBody, ...TS29512NpcfSMPolicyControl.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
