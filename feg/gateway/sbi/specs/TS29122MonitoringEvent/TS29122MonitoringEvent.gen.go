// Package TS29122MonitoringEvent provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package TS29122MonitoringEvent

import (
	externalRef0 "magma/feg/gateway/sbi/specs/TS29122CommonData"
	externalRef2 "magma/feg/gateway/sbi/specs/TS29572NlmfLocation"
)

const (
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
)

// Possible values are - CGI_ECGI: The SCS/AS requests to be notified at cell level location accuracy. - ENODEB: The SCS/AS requests to be notified at eNodeB level location accuracy. - TA_RA: The SCS/AS requests to be notified at TA/RA level location accuracy. - PLMN: The SCS/AS requests to be notified at PLMN level location accuracy. - TWAN_ID: The SCS/AS requests to be notified at TWAN identifier level location accuracy. - GEO_AREA: The SCS/AS requests to be notified of the geographical area accuracy.
type Accuracy interface{}

// Possible values are - IMEI: The value shall be used when the change of IMSI-IMEI association shall be detected - IMEISV: The value shall be used when the change of IMSI-IMEISV association shall be detected
type AssociationType interface{}

// FailureCause defines model for FailureCause.
type FailureCause struct {
	// Identifies a non-transparent copy of the BSSGP cause code. Refer to 3GPP TS 29.128 [12].
	BssgpCause *int `json:"bssgpCause,omitempty"`

	// Identify the type of the S1AP-Cause. Refer to 3GPP TS 29.128 [12].
	CauseType *int `json:"causeType,omitempty"`

	// Identifies a non-transparent copy of the GMM cause code. Refer to 3GPP TS 29.128 [12].
	GmmCause *int `json:"gmmCause,omitempty"`

	// Indicates RAN and/or NAS release cause code information, TWAN release cause code information or untrusted WLAN release cause code information. Refer to 3GPP TS 29.214 [10].
	RanNasCause *string `json:"ranNasCause,omitempty"`

	// Identifies a non-transparent copy of the RANAP cause code. Refer to 3GPP TS 29.128 [12].
	RanapCause *int `json:"ranapCause,omitempty"`

	// Identifies a non-transparent copy of the S1AP cause code. Refer to 3GPP TS 29.128 [12].
	S1ApCause *int `json:"s1ApCause,omitempty"`

	// Identifies a non-transparent copy of the SM cause code. Refer to 3GPP TS 29.128 [12].
	SmCause *int `json:"smCause,omitempty"`
}

// IdleStatusInfo defines model for IdleStatusInfo.
type IdleStatusInfo struct {
	// Unsigned integer identifying a period of time in units of seconds.
	ActiveTime      *externalRef0.DurationSec `json:"activeTime,omitempty"`
	EdrxCycleLength *float32                  `json:"edrxCycleLength,omitempty"`

	// string with format "date-time" as defined in OpenAPI.
	IdleStatusTimestamp *externalRef0.DateTime `json:"idleStatusTimestamp,omitempty"`

	// Unsigned integer identifying a period of time in units of seconds.
	PeriodicAUTimer *externalRef0.DurationSec `json:"periodicAUTimer,omitempty"`

	// Identifies the number of packets shall be buffered in the serving gateway. It shall be present if the idle status indication is requested by the SCS/AS with "idleStatusIndication" in the "monitoringEventSubscription" sets to "true".
	SuggestedNumberOfDlPackets *int `json:"suggestedNumberOfDlPackets,omitempty"`
}

// LocationInfo defines model for LocationInfo.
type LocationInfo struct {
	// Unsigned integer identifying a period of time in units of minutes.
	AgeOfLocationInfo *externalRef0.DurationMin `json:"ageOfLocationInfo,omitempty"`

	// Indicates the Cell Global Identification of the user which identifies the cell the UE is registered.
	CellId *string `json:"cellId,omitempty"`

	// Indicates the eNodeB in which the UE is currently located.
	EnodeBId       *string                      `json:"enodeBId,omitempty"`
	GeographicArea *externalRef2.GeographicArea `json:"geographicArea,omitempty"`

	// Identifies the PLMN Identity of the user where the UE is located.
	PlmnId *string `json:"plmnId,omitempty"`

	// Identifies the Routing Area Identity of the user where the UE is located.
	RoutingAreaId *string `json:"routingAreaId,omitempty"`

	// Identifies the Tracking Area Identity of the user where the UE is located.
	TrackingAreaId *string `json:"trackingAreaId,omitempty"`

	// Identifies the TWAN Identity of the user where the UE is located.
	TwanId *string `json:"twanId,omitempty"`
}

// Possible values are - CURRENT_LOCATION: The SCS/AS requests to be notified for current location - LAST_KNOWN_LOCATION: The SCS/AS requests to be notified for last known location
type LocationType interface{}

// MonitoringEventReport defines model for MonitoringEventReport.
type MonitoringEventReport struct {
	// string with format "date-time" as defined in OpenAPI.
	EventTime *externalRef0.DateTime `json:"eventTime,omitempty"`

	// string containing a local identifier followed by "@" and a domain identifier. Both the local identifier and the domain identifier shall be encoded as strings that do not contain any "@" characters. See Clause 4.6.2 of 3GPP TS 23.682 for more information.
	ExternalId     *externalRef0.ExternalId `json:"externalId,omitempty"`
	FailureCause   *FailureCause            `json:"failureCause,omitempty"`
	IdleStatusInfo *IdleStatusInfo          `json:"idleStatusInfo,omitempty"`

	// Possible values are - IMEI: The value shall be used when the change of IMSI-IMEI association shall be detected - IMEISV: The value shall be used when the change of IMSI-IMEISV association shall be detected
	ImeiChange   *AssociationType `json:"imeiChange,omitempty"`
	LocationInfo *LocationInfo    `json:"locationInfo,omitempty"`

	// If "monitoring-Type" is "LOSS_OF_CONNECTIVITY", this parameter shall be included if available to identify the reason why loss of connectivity is reported. Refer to 3GPP TS 29.336 [11] Subclause 8.4.58.
	LossOfConnectReason *int `json:"lossOfConnectReason,omitempty"`

	// string with format "date-time" as defined in OpenAPI.
	MaxUEAvailabilityTime *externalRef0.DateTime `json:"maxUEAvailabilityTime,omitempty"`

	// Possible values are - LOSS_OF_CONNECTIVITY: The SCS/AS requests to be notified when the 3GPP network detects that the UE is no longer reachable for signalling or user plane communication - UE_REACHABILITY: The SCS/AS requests to be notified when the UE becomes reachable for sending either SMS or downlink data to the UE - LOCATION_REPORTING: The SCS/AS requests to be notified of the current location or the last known location of the UE - CHANGE_OF_IMSI_IMEI_ASSOCIATION: The SCS/AS requests to be notified when the association of an ME (IMEI(SV)) that uses a specific subscription (IMSI) is changed - ROAMING_STATUS: The SCS/AS queries the UE's current roaming status and requests to get notified when the status changes - COMMUNICATION_FAILURE: The SCS/AS requests to be notified of communication failure events - AVAILABILITY_AFTER_DDN_FAILURE: The SCS/AS requests to be notified when the UE has become available after a DDN failure - NUMBER_OF_UES_IN_AN_AREA: The SCS/AS requests to be notified the number of UEs in a given geographic area
	MonitoringType MonitoringType `json:"monitoringType"`

	// string formatted according to subclause 3.3 of 3GPP TS 23.003 that describes an MSISDN.
	Msisdn *externalRef0.Msisdn `json:"msisdn,omitempty"`
	PlmnId *externalRef0.PlmnId `json:"plmnId,omitempty"`

	// Possible values are - SMS : The SCS/AS requests to be notified when the UE becomes reachable for sending SMS to the UE - DATA: The SCS/AS requests to be notified when the UE becomes reachable for sending downlink data to the UE
	ReachabilityType *ReachabilityType `json:"reachabilityType,omitempty"`

	// If "monitoringType" is "ROAMING_STATUS", this parameter shall be set to "true" if the UE is on roaming status. Set to false or omitted otherwise.
	RoamingStatus       *bool                `json:"roamingStatus,omitempty"`
	UePerLocationReport *UePerLocationReport `json:"uePerLocationReport,omitempty"`
}

// MonitoringEventSubscription defines model for MonitoringEventSubscription.
type MonitoringEventSubscription interface{}

// MonitoringNotification defines model for MonitoringNotification.
type MonitoringNotification struct {
	// Indicates whether to request to cancel the corresponding monitoring subscription. Set to false or omitted otherwise.
	CancelInd *bool `json:"cancelInd,omitempty"`

	// Each element identifies a notification of grouping configuration result.
	ConfigResults *[]externalRef0.ConfigResult `json:"configResults,omitempty"`

	// Monitoring event reports.
	MonitoringEventReports *[]MonitoringEventReport `json:"monitoringEventReports,omitempty"`

	// string formatted according to IETF RFC 3986 identifying a referenced resource.
	Subscription externalRef0.Link `json:"subscription"`
}

// Possible values are - LOSS_OF_CONNECTIVITY: The SCS/AS requests to be notified when the 3GPP network detects that the UE is no longer reachable for signalling or user plane communication - UE_REACHABILITY: The SCS/AS requests to be notified when the UE becomes reachable for sending either SMS or downlink data to the UE - LOCATION_REPORTING: The SCS/AS requests to be notified of the current location or the last known location of the UE - CHANGE_OF_IMSI_IMEI_ASSOCIATION: The SCS/AS requests to be notified when the association of an ME (IMEI(SV)) that uses a specific subscription (IMSI) is changed - ROAMING_STATUS: The SCS/AS queries the UE's current roaming status and requests to get notified when the status changes - COMMUNICATION_FAILURE: The SCS/AS requests to be notified of communication failure events - AVAILABILITY_AFTER_DDN_FAILURE: The SCS/AS requests to be notified when the UE has become available after a DDN failure - NUMBER_OF_UES_IN_AN_AREA: The SCS/AS requests to be notified the number of UEs in a given geographic area
type MonitoringType interface{}

// Possible values are - SMS : The SCS/AS requests to be notified when the UE becomes reachable for sending SMS to the UE - DATA: The SCS/AS requests to be notified when the UE becomes reachable for sending downlink data to the UE
type ReachabilityType interface{}

// UePerLocationReport defines model for UePerLocationReport.
type UePerLocationReport struct {
	// Each element uniquely identifies a user.
	ExternalIds *[]externalRef0.ExternalId `json:"externalIds,omitempty"`

	// Each element identifies the MS internal PSTN/ISDN number allocated for a UE.
	Msisdns *[]externalRef0.Msisdn `json:"msisdns,omitempty"`

	// Identifies the number of UEs.
	UeCount int `json:"ueCount"`
}

// PostScsAsIdSubscriptionsJSONBody defines parameters for PostScsAsIdSubscriptions.
type PostScsAsIdSubscriptionsJSONBody MonitoringEventSubscription

// PutScsAsIdSubscriptionsSubscriptionIdJSONBody defines parameters for PutScsAsIdSubscriptionsSubscriptionId.
type PutScsAsIdSubscriptionsSubscriptionIdJSONBody MonitoringEventSubscription

// PostScsAsIdSubscriptionsJSONRequestBody defines body for PostScsAsIdSubscriptions for application/json ContentType.
type PostScsAsIdSubscriptionsJSONRequestBody PostScsAsIdSubscriptionsJSONBody

// PutScsAsIdSubscriptionsSubscriptionIdJSONRequestBody defines body for PutScsAsIdSubscriptionsSubscriptionId for application/json ContentType.
type PutScsAsIdSubscriptionsSubscriptionIdJSONRequestBody PutScsAsIdSubscriptionsSubscriptionIdJSONBody
