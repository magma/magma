// Package TS29510NnrfNFManagement provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package TS29510NnrfNFManagement

import (
	"encoding/json"
	"fmt"

	externalRef0 "magma/feg/gateway/sbi/specs/TS29122CommonData"
	externalRef1 "magma/feg/gateway/sbi/specs/TS29571CommonData"
)

const (
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
)

// Defines values for NfGroupCondNfType.
const (
	NfGroupCondNfTypeAUSF NfGroupCondNfType = "AUSF"

	NfGroupCondNfTypeUDM NfGroupCondNfType = "UDM"

	NfGroupCondNfTypeUDR NfGroupCondNfType = "UDR"
)

// AmfCond defines model for AmfCond.
type AmfCond interface{}

// AmfInfo defines model for AmfInfo.
type AmfInfo struct {
	AmfRegionId          externalRef1.AmfRegionId `json:"amfRegionId"`
	AmfSetId             externalRef1.AmfSetId    `json:"amfSetId"`
	BackupInfoAmfFailure *[]externalRef1.Guami    `json:"backupInfoAmfFailure,omitempty"`
	BackupInfoAmfRemoval *[]externalRef1.Guami    `json:"backupInfoAmfRemoval,omitempty"`
	GuamiList            []externalRef1.Guami     `json:"guamiList"`
	N2InterfaceAmfInfo   *N2InterfaceAmfInfo      `json:"n2InterfaceAmfInfo,omitempty"`
	TaiList              *[]externalRef1.Tai      `json:"taiList,omitempty"`
	TaiRangeList         *[]TaiRange              `json:"taiRangeList,omitempty"`
}

// AusfInfo defines model for AusfInfo.
type AusfInfo struct {
	GroupId           *externalRef1.NfGroupId `json:"groupId,omitempty"`
	RoutingIndicators *[]string               `json:"routingIndicators,omitempty"`
	SupiRanges        *[]SupiRange            `json:"supiRanges,omitempty"`
}

// BsfInfo defines model for BsfInfo.
type BsfInfo struct {
	DnnList           *[]externalRef1.Dnn `json:"dnnList,omitempty"`
	IpDomainList      *[]string           `json:"ipDomainList,omitempty"`
	Ipv4AddressRanges *[]Ipv4AddressRange `json:"ipv4AddressRanges,omitempty"`
	Ipv6PrefixRanges  *[]Ipv6PrefixRange  `json:"ipv6PrefixRanges,omitempty"`
}

// ChfInfo defines model for ChfInfo.
type ChfInfo struct {
	GpsiRangeList *[]IdentityRange `json:"gpsiRangeList,omitempty"`
	PlmnRangeList *[]PlmnRange     `json:"plmnRangeList,omitempty"`
	SupiRangeList *[]SupiRange     `json:"supiRangeList,omitempty"`
}

// ChfServiceInfo defines model for ChfServiceInfo.
type ChfServiceInfo struct {
	PrimaryChfServiceInstance   *string `json:"primaryChfServiceInstance,omitempty"`
	SecondaryChfServiceInstance *string `json:"secondaryChfServiceInstance,omitempty"`
}

// DataSetId defines model for DataSetId.
type DataSetId interface{}

// DefaultNotificationSubscription defines model for DefaultNotificationSubscription.
type DefaultNotificationSubscription struct {
	CallbackUri        externalRef1.Uri                 `json:"callbackUri"`
	N1MessageClass     *externalRef0.N1MessageClass     `json:"n1MessageClass,omitempty"`
	N2InformationClass *externalRef0.N2InformationClass `json:"n2InformationClass,omitempty"`
	NotificationType   NotificationType                 `json:"notificationType"`
}

// DnnSmfInfoItem defines model for DnnSmfInfoItem.
type DnnSmfInfoItem struct {
	Dnn externalRef1.Dnn `json:"dnn"`
}

// DnnUpfInfoItem defines model for DnnUpfInfoItem.
type DnnUpfInfoItem struct {
	DnaiList          *[]externalRef1.Dnai           `json:"dnaiList,omitempty"`
	Dnn               externalRef1.Dnn               `json:"dnn"`
	Ipv4AddressRanges *[]Ipv4AddressRange            `json:"ipv4AddressRanges,omitempty"`
	Ipv6PrefixRanges  *[]Ipv6PrefixRange             `json:"ipv6PrefixRanges,omitempty"`
	PduSessionTypes   *[]externalRef1.PduSessionType `json:"pduSessionTypes,omitempty"`
}

// Fqdn defines model for Fqdn.
type Fqdn string

// GuamiListCond defines model for GuamiListCond.
type GuamiListCond struct {
	GuamiList []externalRef1.Guami `json:"guamiList"`
}

// IdentityRange defines model for IdentityRange.
type IdentityRange struct {
	End     *string `json:"end,omitempty"`
	Pattern *string `json:"pattern,omitempty"`
	Start   *string `json:"start,omitempty"`
}

// InterfaceUpfInfoItem defines model for InterfaceUpfInfoItem.
type InterfaceUpfInfoItem struct {
	EndpointFqdn          *Fqdn                    `json:"endpointFqdn,omitempty"`
	InterfaceType         UPInterfaceType          `json:"interfaceType"`
	Ipv4EndpointAddresses *[]externalRef1.Ipv4Addr `json:"ipv4EndpointAddresses,omitempty"`
	Ipv6EndpointAddresses *[]externalRef1.Ipv6Addr `json:"ipv6EndpointAddresses,omitempty"`
	NetworkInstance       *string                  `json:"networkInstance,omitempty"`
}

// IpEndPoint defines model for IpEndPoint.
type IpEndPoint struct {
	Ipv4Address *externalRef1.Ipv4Addr `json:"ipv4Address,omitempty"`
	Ipv6Address *externalRef1.Ipv6Addr `json:"ipv6Address,omitempty"`
	Port        *int                   `json:"port,omitempty"`
	Transport   *TransportProtocol     `json:"transport,omitempty"`
}

// Ipv4AddressRange defines model for Ipv4AddressRange.
type Ipv4AddressRange struct {
	End   *externalRef1.Ipv4Addr `json:"end,omitempty"`
	Start *externalRef1.Ipv4Addr `json:"start,omitempty"`
}

// Ipv6PrefixRange defines model for Ipv6PrefixRange.
type Ipv6PrefixRange struct {
	End   *externalRef1.Ipv6Prefix `json:"end,omitempty"`
	Start *externalRef1.Ipv6Prefix `json:"start,omitempty"`
}

// N2InterfaceAmfInfo defines model for N2InterfaceAmfInfo.
type N2InterfaceAmfInfo struct {
	AmfName             *externalRef1.AmfName    `json:"amfName,omitempty"`
	Ipv4EndpointAddress *[]externalRef1.Ipv4Addr `json:"ipv4EndpointAddress,omitempty"`
	Ipv6EndpointAddress *[]externalRef1.Ipv6Addr `json:"ipv6EndpointAddress,omitempty"`
}

// NFProfile defines model for NFProfile.
type NFProfile interface{}

// NFService defines model for NFService.
type NFService struct {
	AllowedNfDomains                 *[]string                          `json:"allowedNfDomains,omitempty"`
	AllowedNfTypes                   *[]NFType                          `json:"allowedNfTypes,omitempty"`
	AllowedNssais                    *[]externalRef1.Snssai             `json:"allowedNssais,omitempty"`
	AllowedPlmns                     *[]externalRef1.PlmnId             `json:"allowedPlmns,omitempty"`
	ApiPrefix                        *string                            `json:"apiPrefix,omitempty"`
	Capacity                         *int                               `json:"capacity,omitempty"`
	ChfServiceInfo                   *ChfServiceInfo                    `json:"chfServiceInfo,omitempty"`
	DefaultNotificationSubscriptions *[]DefaultNotificationSubscription `json:"defaultNotificationSubscriptions,omitempty"`
	Fqdn                             *Fqdn                              `json:"fqdn,omitempty"`
	InterPlmnFqdn                    *Fqdn                              `json:"interPlmnFqdn,omitempty"`
	IpEndPoints                      *[]IpEndPoint                      `json:"ipEndPoints,omitempty"`
	Load                             *int                               `json:"load,omitempty"`
	NfServiceStatus                  NFServiceStatus                    `json:"nfServiceStatus"`
	Priority                         *int                               `json:"priority,omitempty"`
	RecoveryTime                     *externalRef1.DateTime             `json:"recoveryTime,omitempty"`
	Scheme                           externalRef1.UriScheme             `json:"scheme"`
	ServiceInstanceId                string                             `json:"serviceInstanceId"`
	ServiceName                      ServiceName                        `json:"serviceName"`
	SupportedFeatures                *externalRef1.SupportedFeatures    `json:"supportedFeatures,omitempty"`
	Versions                         []NFServiceVersion                 `json:"versions"`
}

// NFServiceStatus defines model for NFServiceStatus.
type NFServiceStatus interface{}

// NFServiceVersion defines model for NFServiceVersion.
type NFServiceVersion struct {
	ApiFullVersion  string                 `json:"apiFullVersion"`
	ApiVersionInUri string                 `json:"apiVersionInUri"`
	Expiry          *externalRef1.DateTime `json:"expiry,omitempty"`
}

// NFStatus defines model for NFStatus.
type NFStatus interface{}

// NFType defines model for NFType.
type NFType interface{}

// NetworkSliceCond defines model for NetworkSliceCond.
type NetworkSliceCond struct {
	NsiList    *[]string             `json:"nsiList,omitempty"`
	SnssaiList []externalRef1.Snssai `json:"snssaiList"`
}

// NfGroupCond defines model for NfGroupCond.
type NfGroupCond struct {
	NfGroupId externalRef1.NfGroupId `json:"nfGroupId"`
	NfType    NfGroupCondNfType      `json:"nfType"`
}

// NfGroupCondNfType defines model for NfGroupCond.NfType.
type NfGroupCondNfType string

// NfInstanceIdCond defines model for NfInstanceIdCond.
type NfInstanceIdCond struct {
	NfInstanceId externalRef1.NfInstanceId `json:"nfInstanceId"`
}

// NfTypeCond defines model for NfTypeCond.
type NfTypeCond struct {
	NfType NFType `json:"nfType"`
}

// NotifCondition defines model for NotifCondition.
type NotifCondition struct {
	MonitoredAttributes   *[]string `json:"monitoredAttributes,omitempty"`
	UnmonitoredAttributes *[]string `json:"unmonitoredAttributes,omitempty"`
}

// NotificationData defines model for NotificationData.
type NotificationData struct {
	// Embedded fields due to inline allOf schema
	// Embedded fields due to inline allOf schema
}

// NotificationEventType defines model for NotificationEventType.
type NotificationEventType interface{}

// NotificationType defines model for NotificationType.
type NotificationType interface{}

// NrfInfo defines model for NrfInfo.
type NrfInfo struct {
	ServedAmfInfo  *NrfInfo_ServedAmfInfo  `json:"servedAmfInfo,omitempty"`
	ServedAusfInfo *NrfInfo_ServedAusfInfo `json:"servedAusfInfo,omitempty"`
	ServedBsfInfo  *NrfInfo_ServedBsfInfo  `json:"servedBsfInfo,omitempty"`
	ServedChfInfo  *NrfInfo_ServedChfInfo  `json:"servedChfInfo,omitempty"`
	ServedPcfInfo  *NrfInfo_ServedPcfInfo  `json:"servedPcfInfo,omitempty"`
	ServedSmfInfo  *NrfInfo_ServedSmfInfo  `json:"servedSmfInfo,omitempty"`
	ServedUdmInfo  *NrfInfo_ServedUdmInfo  `json:"servedUdmInfo,omitempty"`
	ServedUdrInfo  *NrfInfo_ServedUdrInfo  `json:"servedUdrInfo,omitempty"`
	ServedUpfInfo  *NrfInfo_ServedUpfInfo  `json:"servedUpfInfo,omitempty"`
}

// NrfInfo_ServedAmfInfo defines model for NrfInfo.ServedAmfInfo.
type NrfInfo_ServedAmfInfo struct {
	AdditionalProperties map[string]AmfInfo `json:"-"`
}

// NrfInfo_ServedAusfInfo defines model for NrfInfo.ServedAusfInfo.
type NrfInfo_ServedAusfInfo struct {
	AdditionalProperties map[string]AusfInfo `json:"-"`
}

// NrfInfo_ServedBsfInfo defines model for NrfInfo.ServedBsfInfo.
type NrfInfo_ServedBsfInfo struct {
	AdditionalProperties map[string]BsfInfo `json:"-"`
}

// NrfInfo_ServedChfInfo defines model for NrfInfo.ServedChfInfo.
type NrfInfo_ServedChfInfo struct {
	AdditionalProperties map[string]ChfInfo `json:"-"`
}

// NrfInfo_ServedPcfInfo defines model for NrfInfo.ServedPcfInfo.
type NrfInfo_ServedPcfInfo struct {
	AdditionalProperties map[string]PcfInfo `json:"-"`
}

// NrfInfo_ServedSmfInfo defines model for NrfInfo.ServedSmfInfo.
type NrfInfo_ServedSmfInfo struct {
	AdditionalProperties map[string]SmfInfo `json:"-"`
}

// NrfInfo_ServedUdmInfo defines model for NrfInfo.ServedUdmInfo.
type NrfInfo_ServedUdmInfo struct {
	AdditionalProperties map[string]UdmInfo `json:"-"`
}

// NrfInfo_ServedUdrInfo defines model for NrfInfo.ServedUdrInfo.
type NrfInfo_ServedUdrInfo struct {
	AdditionalProperties map[string]UdrInfo `json:"-"`
}

// NrfInfo_ServedUpfInfo defines model for NrfInfo.ServedUpfInfo.
type NrfInfo_ServedUpfInfo struct {
	AdditionalProperties map[string]UpfInfo `json:"-"`
}

// PcfInfo defines model for PcfInfo.
type PcfInfo struct {
	DnnList     *[]externalRef1.Dnn            `json:"dnnList,omitempty"`
	RxDiamHost  *externalRef1.DiameterIdentity `json:"rxDiamHost,omitempty"`
	RxDiamRealm *externalRef1.DiameterIdentity `json:"rxDiamRealm,omitempty"`
	SupiRanges  *[]SupiRange                   `json:"supiRanges,omitempty"`
}

// PlmnRange defines model for PlmnRange.
type PlmnRange struct {
	End     *string `json:"end,omitempty"`
	Pattern *string `json:"pattern,omitempty"`
	Start   *string `json:"start,omitempty"`
}

// PlmnSnssai defines model for PlmnSnssai.
type PlmnSnssai struct {
	PlmnId     externalRef1.PlmnId   `json:"plmnId"`
	SNssaiList []externalRef1.Snssai `json:"sNssaiList"`
}

// ServiceName defines model for ServiceName.
type ServiceName interface{}

// ServiceNameCond defines model for ServiceNameCond.
type ServiceNameCond struct {
	ServiceName ServiceName `json:"serviceName"`
}

// SmfInfo defines model for SmfInfo.
type SmfInfo struct {
	AccessType        *[]externalRef1.AccessType `json:"accessType,omitempty"`
	PgwFqdn           *Fqdn                      `json:"pgwFqdn,omitempty"`
	SNssaiSmfInfoList []SnssaiSmfInfoItem        `json:"sNssaiSmfInfoList"`
	TaiList           *[]externalRef1.Tai        `json:"taiList,omitempty"`
	TaiRangeList      *[]TaiRange                `json:"taiRangeList,omitempty"`
}

// SnssaiSmfInfoItem defines model for SnssaiSmfInfoItem.
type SnssaiSmfInfoItem struct {
	DnnSmfInfoList []DnnSmfInfoItem    `json:"dnnSmfInfoList"`
	SNssai         externalRef1.Snssai `json:"sNssai"`
}

// SnssaiUpfInfoItem defines model for SnssaiUpfInfoItem.
type SnssaiUpfInfoItem struct {
	DnnUpfInfoList []DnnUpfInfoItem    `json:"dnnUpfInfoList"`
	SNssai         externalRef1.Snssai `json:"sNssai"`
}

// SubscriptionData defines model for SubscriptionData.
type SubscriptionData struct {
	NfStatusNotificationUri string                   `json:"nfStatusNotificationUri"`
	NotifCondition          *NotifCondition          `json:"notifCondition,omitempty"`
	PlmnId                  *externalRef1.PlmnId     `json:"plmnId,omitempty"`
	ReqNfFqdn               *Fqdn                    `json:"reqNfFqdn,omitempty"`
	ReqNfType               *NFType                  `json:"reqNfType,omitempty"`
	ReqNotifEvents          *[]NotificationEventType `json:"reqNotifEvents,omitempty"`
	ReqSnssais              *[]externalRef1.Snssai   `json:"reqSnssais,omitempty"`
	SubscrCond              *interface{}             `json:"subscrCond,omitempty"`
	SubscriptionId          string                   `json:"subscriptionId"`
	ValidityTime            *externalRef1.DateTime   `json:"validityTime,omitempty"`
}

// SupiRange defines model for SupiRange.
type SupiRange struct {
	End     *string `json:"end,omitempty"`
	Pattern *string `json:"pattern,omitempty"`
	Start   *string `json:"start,omitempty"`
}

// TacRange defines model for TacRange.
type TacRange struct {
	End     *string `json:"end,omitempty"`
	Pattern *string `json:"pattern,omitempty"`
	Start   *string `json:"start,omitempty"`
}

// TaiRange defines model for TaiRange.
type TaiRange struct {
	PlmnId       externalRef1.PlmnId `json:"plmnId"`
	TacRangeList []TacRange          `json:"tacRangeList"`
}

// TransportProtocol defines model for TransportProtocol.
type TransportProtocol interface{}

// UPInterfaceType defines model for UPInterfaceType.
type UPInterfaceType interface{}

// UdmInfo defines model for UdmInfo.
type UdmInfo struct {
	ExternalGroupIdentifiersRanges *[]IdentityRange        `json:"externalGroupIdentifiersRanges,omitempty"`
	GpsiRanges                     *[]IdentityRange        `json:"gpsiRanges,omitempty"`
	GroupId                        *externalRef1.NfGroupId `json:"groupId,omitempty"`
	RoutingIndicators              *[]string               `json:"routingIndicators,omitempty"`
	SupiRanges                     *[]SupiRange            `json:"supiRanges,omitempty"`
}

// UdrInfo defines model for UdrInfo.
type UdrInfo struct {
	ExternalGroupIdentifiersRanges *[]IdentityRange        `json:"externalGroupIdentifiersRanges,omitempty"`
	GpsiRanges                     *[]IdentityRange        `json:"gpsiRanges,omitempty"`
	GroupId                        *externalRef1.NfGroupId `json:"groupId,omitempty"`
	SupiRanges                     *[]SupiRange            `json:"supiRanges,omitempty"`
	SupportedDataSets              *[]DataSetId            `json:"supportedDataSets,omitempty"`
}

// UpfInfo defines model for UpfInfo.
type UpfInfo struct {
	InterfaceUpfInfoList *[]InterfaceUpfInfoItem        `json:"interfaceUpfInfoList,omitempty"`
	IwkEpsInd            *bool                          `json:"iwkEpsInd,omitempty"`
	PduSessionTypes      *[]externalRef1.PduSessionType `json:"pduSessionTypes,omitempty"`
	SNssaiUpfInfoList    []SnssaiUpfInfoItem            `json:"sNssaiUpfInfoList"`
	SmfServingArea       *[]string                      `json:"smfServingArea,omitempty"`
}

// GetNFInstancesParams defines parameters for GetNFInstances.
type GetNFInstancesParams struct {
	// Type of NF
	NfType *NFType `json:"nf-type,omitempty"`

	// How many items to return at one time
	Limit *int `json:"limit,omitempty"`
}

// RegisterNFInstanceJSONBody defines parameters for RegisterNFInstance.
type RegisterNFInstanceJSONBody NFProfile

// RegisterNFInstanceParams defines parameters for RegisterNFInstance.
type RegisterNFInstanceParams struct {
	// Content-Encoding, described in IETF RFC 7231
	ContentEncoding *string `json:"Content-Encoding,omitempty"`
}

// CreateSubscriptionJSONBody defines parameters for CreateSubscription.
type CreateSubscriptionJSONBody SubscriptionData

// RegisterNFInstanceJSONRequestBody defines body for RegisterNFInstance for application/json ContentType.
type RegisterNFInstanceJSONRequestBody RegisterNFInstanceJSONBody

// CreateSubscriptionJSONRequestBody defines body for CreateSubscription for application/json ContentType.
type CreateSubscriptionJSONRequestBody CreateSubscriptionJSONBody

// Getter for additional properties for NrfInfo_ServedAmfInfo. Returns the specified
// element and whether it was found
func (a NrfInfo_ServedAmfInfo) Get(fieldName string) (value AmfInfo, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NrfInfo_ServedAmfInfo
func (a *NrfInfo_ServedAmfInfo) Set(fieldName string, value AmfInfo) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AmfInfo)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NrfInfo_ServedAmfInfo to handle AdditionalProperties
func (a *NrfInfo_ServedAmfInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AmfInfo)
		for fieldName, fieldBuf := range object {
			var fieldVal AmfInfo
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NrfInfo_ServedAmfInfo to handle AdditionalProperties
func (a NrfInfo_ServedAmfInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NrfInfo_ServedAusfInfo. Returns the specified
// element and whether it was found
func (a NrfInfo_ServedAusfInfo) Get(fieldName string) (value AusfInfo, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NrfInfo_ServedAusfInfo
func (a *NrfInfo_ServedAusfInfo) Set(fieldName string, value AusfInfo) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AusfInfo)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NrfInfo_ServedAusfInfo to handle AdditionalProperties
func (a *NrfInfo_ServedAusfInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AusfInfo)
		for fieldName, fieldBuf := range object {
			var fieldVal AusfInfo
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NrfInfo_ServedAusfInfo to handle AdditionalProperties
func (a NrfInfo_ServedAusfInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NrfInfo_ServedBsfInfo. Returns the specified
// element and whether it was found
func (a NrfInfo_ServedBsfInfo) Get(fieldName string) (value BsfInfo, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NrfInfo_ServedBsfInfo
func (a *NrfInfo_ServedBsfInfo) Set(fieldName string, value BsfInfo) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]BsfInfo)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NrfInfo_ServedBsfInfo to handle AdditionalProperties
func (a *NrfInfo_ServedBsfInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]BsfInfo)
		for fieldName, fieldBuf := range object {
			var fieldVal BsfInfo
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NrfInfo_ServedBsfInfo to handle AdditionalProperties
func (a NrfInfo_ServedBsfInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NrfInfo_ServedChfInfo. Returns the specified
// element and whether it was found
func (a NrfInfo_ServedChfInfo) Get(fieldName string) (value ChfInfo, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NrfInfo_ServedChfInfo
func (a *NrfInfo_ServedChfInfo) Set(fieldName string, value ChfInfo) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]ChfInfo)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NrfInfo_ServedChfInfo to handle AdditionalProperties
func (a *NrfInfo_ServedChfInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]ChfInfo)
		for fieldName, fieldBuf := range object {
			var fieldVal ChfInfo
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NrfInfo_ServedChfInfo to handle AdditionalProperties
func (a NrfInfo_ServedChfInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NrfInfo_ServedPcfInfo. Returns the specified
// element and whether it was found
func (a NrfInfo_ServedPcfInfo) Get(fieldName string) (value PcfInfo, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NrfInfo_ServedPcfInfo
func (a *NrfInfo_ServedPcfInfo) Set(fieldName string, value PcfInfo) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]PcfInfo)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NrfInfo_ServedPcfInfo to handle AdditionalProperties
func (a *NrfInfo_ServedPcfInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]PcfInfo)
		for fieldName, fieldBuf := range object {
			var fieldVal PcfInfo
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NrfInfo_ServedPcfInfo to handle AdditionalProperties
func (a NrfInfo_ServedPcfInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NrfInfo_ServedSmfInfo. Returns the specified
// element and whether it was found
func (a NrfInfo_ServedSmfInfo) Get(fieldName string) (value SmfInfo, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NrfInfo_ServedSmfInfo
func (a *NrfInfo_ServedSmfInfo) Set(fieldName string, value SmfInfo) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]SmfInfo)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NrfInfo_ServedSmfInfo to handle AdditionalProperties
func (a *NrfInfo_ServedSmfInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]SmfInfo)
		for fieldName, fieldBuf := range object {
			var fieldVal SmfInfo
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NrfInfo_ServedSmfInfo to handle AdditionalProperties
func (a NrfInfo_ServedSmfInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NrfInfo_ServedUdmInfo. Returns the specified
// element and whether it was found
func (a NrfInfo_ServedUdmInfo) Get(fieldName string) (value UdmInfo, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NrfInfo_ServedUdmInfo
func (a *NrfInfo_ServedUdmInfo) Set(fieldName string, value UdmInfo) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]UdmInfo)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NrfInfo_ServedUdmInfo to handle AdditionalProperties
func (a *NrfInfo_ServedUdmInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]UdmInfo)
		for fieldName, fieldBuf := range object {
			var fieldVal UdmInfo
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NrfInfo_ServedUdmInfo to handle AdditionalProperties
func (a NrfInfo_ServedUdmInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NrfInfo_ServedUdrInfo. Returns the specified
// element and whether it was found
func (a NrfInfo_ServedUdrInfo) Get(fieldName string) (value UdrInfo, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NrfInfo_ServedUdrInfo
func (a *NrfInfo_ServedUdrInfo) Set(fieldName string, value UdrInfo) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]UdrInfo)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NrfInfo_ServedUdrInfo to handle AdditionalProperties
func (a *NrfInfo_ServedUdrInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]UdrInfo)
		for fieldName, fieldBuf := range object {
			var fieldVal UdrInfo
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NrfInfo_ServedUdrInfo to handle AdditionalProperties
func (a NrfInfo_ServedUdrInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NrfInfo_ServedUpfInfo. Returns the specified
// element and whether it was found
func (a NrfInfo_ServedUpfInfo) Get(fieldName string) (value UpfInfo, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NrfInfo_ServedUpfInfo
func (a *NrfInfo_ServedUpfInfo) Set(fieldName string, value UpfInfo) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]UpfInfo)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NrfInfo_ServedUpfInfo to handle AdditionalProperties
func (a *NrfInfo_ServedUpfInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]UpfInfo)
		for fieldName, fieldBuf := range object {
			var fieldVal UpfInfo
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NrfInfo_ServedUpfInfo to handle AdditionalProperties
func (a NrfInfo_ServedUpfInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
