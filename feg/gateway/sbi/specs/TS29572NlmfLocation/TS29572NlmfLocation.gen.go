// Package TS29572NlmfLocation provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package TS29572NlmfLocation

import (
	externalRef0 "magma/feg/gateway/sbi/specs/TS29571CommonData"
)

const (
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
)

// Defines values for VerticalDirection.
const (
	VerticalDirectionDOWNWARD VerticalDirection = "DOWNWARD"

	VerticalDirectionUPWARD VerticalDirection = "UPWARD"
)

// Accuracy defines model for Accuracy.
type Accuracy float32

// AccuracyFulfilmentIndicator defines model for AccuracyFulfilmentIndicator.
type AccuracyFulfilmentIndicator interface{}

// AgeOfLocationEstimate defines model for AgeOfLocationEstimate.
type AgeOfLocationEstimate int

// Altitude defines model for Altitude.
type Altitude float32

// Angle defines model for Angle.
type Angle int

// BarometricPressure defines model for BarometricPressure.
type BarometricPressure int

// CivicAddress defines model for CivicAddress.
type CivicAddress struct {
	A1      *string `json:"A1,omitempty"`
	A2      *string `json:"A2,omitempty"`
	A3      *string `json:"A3,omitempty"`
	A4      *string `json:"A4,omitempty"`
	A5      *string `json:"A5,omitempty"`
	A6      *string `json:"A6,omitempty"`
	ADDCODE *string `json:"ADDCODE,omitempty"`
	BLD     *string `json:"BLD,omitempty"`
	FLR     *string `json:"FLR,omitempty"`
	HNO     *string `json:"HNO,omitempty"`
	HNS     *string `json:"HNS,omitempty"`
	LMK     *string `json:"LMK,omitempty"`
	LOC     *string `json:"LOC,omitempty"`
	NAM     *string `json:"NAM,omitempty"`
	PC      *string `json:"PC,omitempty"`
	PCN     *string `json:"PCN,omitempty"`
	PLC     *string `json:"PLC,omitempty"`
	POBOX   *string `json:"POBOX,omitempty"`
	POD     *string `json:"POD,omitempty"`
	POM     *string `json:"POM,omitempty"`
	PRD     *string `json:"PRD,omitempty"`
	PRM     *string `json:"PRM,omitempty"`
	RD      *string `json:"RD,omitempty"`
	RDBR    *string `json:"RDBR,omitempty"`
	RDSEC   *string `json:"RDSEC,omitempty"`
	RDSUBBR *string `json:"RDSUBBR,omitempty"`
	ROOM    *string `json:"ROOM,omitempty"`
	SEAT    *string `json:"SEAT,omitempty"`
	STS     *string `json:"STS,omitempty"`
	UNIT    *string `json:"UNIT,omitempty"`
	Country *string `json:"country,omitempty"`
}

// Confidence defines model for Confidence.
type Confidence int

// CorrelationID defines model for CorrelationID.
type CorrelationID string

// EllipsoidArc defines model for EllipsoidArc.
type EllipsoidArc struct {
	// Embedded struct due to allOf(#/components/schemas/GADShape)
	GADShape `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Confidence        Confidence              `json:"confidence"`
	IncludedAngle     Angle                   `json:"includedAngle"`
	InnerRadius       InnerRadius             `json:"innerRadius"`
	OffsetAngle       Angle                   `json:"offsetAngle"`
	Point             GeographicalCoordinates `json:"point"`
	UncertaintyRadius Uncertainty             `json:"uncertaintyRadius"`
}

// ExternalClientType defines model for ExternalClientType.
type ExternalClientType interface{}

// GADShape defines model for GADShape.
type GADShape struct {
	Shape SupportedGADShapes `json:"shape"`
}

// GeographicArea defines model for GeographicArea.
type GeographicArea interface{}

// GeographicalCoordinates defines model for GeographicalCoordinates.
type GeographicalCoordinates struct {
	Lat float32 `json:"lat"`
	Lon float32 `json:"lon"`
}

// GnssId defines model for GnssId.
type GnssId interface{}

// GnssPositioningMethodAndUsage defines model for GnssPositioningMethodAndUsage.
type GnssPositioningMethodAndUsage struct {
	Gnss  GnssId          `json:"gnss"`
	Mode  PositioningMode `json:"mode"`
	Usage Usage           `json:"usage"`
}

// HorizontalSpeed defines model for HorizontalSpeed.
type HorizontalSpeed float32

// HorizontalVelocity defines model for HorizontalVelocity.
type HorizontalVelocity struct {
	Bearing Angle           `json:"bearing"`
	HSpeed  HorizontalSpeed `json:"hSpeed"`
}

// HorizontalVelocityWithUncertainty defines model for HorizontalVelocityWithUncertainty.
type HorizontalVelocityWithUncertainty struct {
	Bearing      Angle            `json:"bearing"`
	HSpeed       HorizontalSpeed  `json:"hSpeed"`
	HUncertainty SpeedUncertainty `json:"hUncertainty"`
}

// HorizontalWithVerticalVelocity defines model for HorizontalWithVerticalVelocity.
type HorizontalWithVerticalVelocity struct {
	Bearing    Angle             `json:"bearing"`
	HSpeed     HorizontalSpeed   `json:"hSpeed"`
	VDirection VerticalDirection `json:"vDirection"`
	VSpeed     VerticalSpeed     `json:"vSpeed"`
}

// HorizontalWithVerticalVelocityAndUncertainty defines model for HorizontalWithVerticalVelocityAndUncertainty.
type HorizontalWithVerticalVelocityAndUncertainty struct {
	Bearing      Angle             `json:"bearing"`
	HSpeed       HorizontalSpeed   `json:"hSpeed"`
	HUncertainty SpeedUncertainty  `json:"hUncertainty"`
	VDirection   VerticalDirection `json:"vDirection"`
	VSpeed       VerticalSpeed     `json:"vSpeed"`
	VUncertainty SpeedUncertainty  `json:"vUncertainty"`
}

// InnerRadius defines model for InnerRadius.
type InnerRadius int32

// InputData defines model for InputData.
type InputData struct {
	AmfId              *externalRef0.NfInstanceId `json:"amfId,omitempty"`
	CorrelationID      *CorrelationID             `json:"correlationID,omitempty"`
	Ecgi               *externalRef0.Ecgi         `json:"ecgi,omitempty"`
	ExternalClientType *ExternalClientType        `json:"externalClientType,omitempty"`
	Gpsi               *externalRef0.Gpsi         `json:"gpsi,omitempty"`
	LocationQoS        *LocationQoS               `json:"locationQoS,omitempty"`
	Ncgi               *externalRef0.Ncgi         `json:"ncgi,omitempty"`
	Pei                *externalRef0.Pei          `json:"pei,omitempty"`
	Priority           *LcsPriority               `json:"priority,omitempty"`
	Supi               *externalRef0.Supi         `json:"supi,omitempty"`
	SupportedGADShapes *[]SupportedGADShapes      `json:"supportedGADShapes,omitempty"`
	UeLcsCap           *UeLcsCapability           `json:"ueLcsCap,omitempty"`
	VelocityRequested  *VelocityRequested         `json:"velocityRequested,omitempty"`
}

// LcsPriority defines model for LcsPriority.
type LcsPriority interface{}

// LocationData defines model for LocationData.
type LocationData struct {
	AccuracyFulfilmentIndicator *AccuracyFulfilmentIndicator     `json:"accuracyFulfilmentIndicator,omitempty"`
	AgeOfLocationEstimate       *AgeOfLocationEstimate           `json:"ageOfLocationEstimate,omitempty"`
	Altitude                    *Altitude                        `json:"altitude,omitempty"`
	BarometricPressure          *BarometricPressure              `json:"barometricPressure,omitempty"`
	CivicAddress                *CivicAddress                    `json:"civicAddress,omitempty"`
	Ecgi                        *externalRef0.Ecgi               `json:"ecgi,omitempty"`
	GnssPositioningDataList     *[]GnssPositioningMethodAndUsage `json:"gnssPositioningDataList,omitempty"`
	LocationEstimate            GeographicArea                   `json:"locationEstimate"`
	Ncgi                        *externalRef0.Ncgi               `json:"ncgi,omitempty"`
	PositioningDataList         *[]PositioningMethodAndUsage     `json:"positioningDataList,omitempty"`
	VelocityEstimate            *VelocityEstimate                `json:"velocityEstimate,omitempty"`
}

// LocationQoS defines model for LocationQoS.
type LocationQoS struct {
	HAccuracy         *Accuracy     `json:"hAccuracy,omitempty"`
	ResponseTime      *ResponseTime `json:"responseTime,omitempty"`
	VAccuracy         *Accuracy     `json:"vAccuracy,omitempty"`
	VerticalRequested *bool         `json:"verticalRequested,omitempty"`
}

// Orientation defines model for Orientation.
type Orientation int

// Point defines model for Point.
type Point struct {
	// Embedded struct due to allOf(#/components/schemas/GADShape)
	GADShape `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Point GeographicalCoordinates `json:"point"`
}

// PointAltitude defines model for PointAltitude.
type PointAltitude struct {
	// Embedded struct due to allOf(#/components/schemas/GADShape)
	GADShape `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Altitude Altitude                `json:"altitude"`
	Point    GeographicalCoordinates `json:"point"`
}

// PointAltitudeUncertainty defines model for PointAltitudeUncertainty.
type PointAltitudeUncertainty struct {
	// Embedded struct due to allOf(#/components/schemas/GADShape)
	GADShape `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Altitude            Altitude                `json:"altitude"`
	Confidence          Confidence              `json:"confidence"`
	Point               GeographicalCoordinates `json:"point"`
	UncertaintyAltitude Uncertainty             `json:"uncertaintyAltitude"`
	UncertaintyEllipse  UncertaintyEllipse      `json:"uncertaintyEllipse"`
}

// PointList defines model for PointList.
type PointList []GeographicalCoordinates

// PointUncertaintyCircle defines model for PointUncertaintyCircle.
type PointUncertaintyCircle struct {
	// Embedded struct due to allOf(#/components/schemas/GADShape)
	GADShape `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Point       GeographicalCoordinates `json:"point"`
	Uncertainty Uncertainty             `json:"uncertainty"`
}

// PointUncertaintyEllipse defines model for PointUncertaintyEllipse.
type PointUncertaintyEllipse struct {
	// Embedded struct due to allOf(#/components/schemas/GADShape)
	GADShape `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Confidence         Confidence              `json:"confidence"`
	Point              GeographicalCoordinates `json:"point"`
	UncertaintyEllipse UncertaintyEllipse      `json:"uncertaintyEllipse"`
}

// Polygon defines model for Polygon.
type Polygon struct {
	// Embedded struct due to allOf(#/components/schemas/GADShape)
	GADShape `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	PointList PointList `json:"pointList"`
}

// PositioningMethod defines model for PositioningMethod.
type PositioningMethod interface{}

// PositioningMethodAndUsage defines model for PositioningMethodAndUsage.
type PositioningMethodAndUsage struct {
	Method PositioningMethod `json:"method"`
	Mode   PositioningMode   `json:"mode"`
	Usage  Usage             `json:"usage"`
}

// PositioningMode defines model for PositioningMode.
type PositioningMode interface{}

// ResponseTime defines model for ResponseTime.
type ResponseTime interface{}

// SpeedUncertainty defines model for SpeedUncertainty.
type SpeedUncertainty float32

// SupportedGADShapes defines model for SupportedGADShapes.
type SupportedGADShapes interface{}

// UeLcsCapability defines model for UeLcsCapability.
type UeLcsCapability struct {
	LppSupport *bool `json:"lppSupport,omitempty"`
}

// Uncertainty defines model for Uncertainty.
type Uncertainty float32

// UncertaintyEllipse defines model for UncertaintyEllipse.
type UncertaintyEllipse struct {
	OrientationMajor Orientation `json:"orientationMajor"`
	SemiMajor        Uncertainty `json:"semiMajor"`
	SemiMinor        Uncertainty `json:"semiMinor"`
}

// Usage defines model for Usage.
type Usage interface{}

// VelocityEstimate defines model for VelocityEstimate.
type VelocityEstimate interface{}

// VelocityRequested defines model for VelocityRequested.
type VelocityRequested interface{}

// VerticalDirection defines model for VerticalDirection.
type VerticalDirection string

// VerticalSpeed defines model for VerticalSpeed.
type VerticalSpeed float32

// DetermineLocationJSONBody defines parameters for DetermineLocation.
type DetermineLocationJSONBody InputData

// DetermineLocationJSONRequestBody defines body for DetermineLocation for application/json ContentType.
type DetermineLocationJSONRequestBody DetermineLocationJSONBody
