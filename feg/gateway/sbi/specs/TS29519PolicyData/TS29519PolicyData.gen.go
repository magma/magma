// Package TS29519PolicyData provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package TS29519PolicyData

import (
	"encoding/json"
	"fmt"

	externalRef0 "magma/feg/gateway/sbi/specs/TS29122CommonData"
	externalRef1 "magma/feg/gateway/sbi/specs/TS29505SubscriptionData"
	externalRef2 "magma/feg/gateway/sbi/specs/TS29554NpcfBDTPolicyControl"
	externalRef3 "magma/feg/gateway/sbi/specs/TS29571CommonData"
)

// Contains the AM policy data for a given subscriber.
type AmPolicyData struct {
	PraInfos  *AmPolicyData_PraInfos `json:"praInfos,omitempty"`
	SubscCats *[]string              `json:"subscCats,omitempty"`
}

// AmPolicyData_PraInfos defines model for AmPolicyData.PraInfos.
type AmPolicyData_PraInfos struct {
	AdditionalProperties map[string]externalRef3.PresenceInfo `json:"-"`
}

// Contains the background data transfer data.
type BdtData struct {
	AspId    string                 `json:"aspId"`
	BdtRefId *string                `json:"bdtRefId,omitempty"`
	NumOfUes *externalRef3.Uinteger `json:"numOfUes,omitempty"`

	// Describes a network area information in which the NF service consumer requests the number of UEs.
	NwAreaInfo *externalRef0.NetworkAreaInfo `json:"nwAreaInfo,omitempty"`

	// Describes a transfer policy.
	TransPolicy externalRef2.TransferPolicy  `json:"transPolicy"`
	VolPerUe    *externalRef0.UsageThreshold `json:"volPerUe,omitempty"`
}

// Contains the route selector parameters (PDU session types and SSC modes) per DNN
type DnnRouteSelectionDescriptor struct {
	Dnn          externalRef3.Dnn               `json:"dnn"`
	PduSessTypes *[]externalRef3.PduSessionType `json:"pduSessTypes,omitempty"`
	SscModes     *[]externalRef3.SscMode        `json:"sscModes,omitempty"`
}

// IpIndex defines model for IpIndex.
type IpIndex int

// Contains the limit identifier and the corresponding monitoring key for a given S-NSSAI and DNN.
type LimitIdToMonitoringKey struct {
	LimitId string    `json:"limitId"`
	Monkey  *[]string `json:"monkey,omitempty"`
}

// OsId defines model for OsId.
type OsId string

// Periodicity defines model for Periodicity.
type Periodicity interface{}

// Contains the route selection descriptors (combinations of SNSSAI, DNNs, PDU session types, and SSC modes) allowed by subscription to the UE for a serving PLMN
type PlmnRouteSelectionDescriptor struct {
	ServingPlmn         externalRef3.PlmnId               `json:"servingPlmn"`
	SnssaiRouteSelDescs *[]SnssaiRouteSelectionDescriptor `json:"snssaiRouteSelDescs,omitempty"`
}

// Contains changed policy data for which notification was requested.
type PolicyDataChangeNotification struct {
	// Contains the sponsored data connectivity related information for a sponsor identifier.
	SponsorConnectivityData *SponsorConnectivityData `json:"SponsorConnectivityData,omitempty"`

	// Contains the AM policy data for a given subscriber.
	AmPolicyData *AmPolicyData `json:"amPolicyData,omitempty"`

	// Contains the background data transfer data.
	BdtData       *BdtData                                    `json:"bdtData,omitempty"`
	BdtRefId      *string                                     `json:"bdtRefId,omitempty"`
	DelResources  *[]externalRef3.Uri                         `json:"delResources,omitempty"`
	OpSpecData    *externalRef1.OperatorSpecificDataContainer `json:"opSpecData,omitempty"`
	OpSpecDataMap *PolicyDataChangeNotification_OpSpecDataMap `json:"opSpecDataMap,omitempty"`
	PlmnId        *externalRef3.PlmnId                        `json:"plmnId,omitempty"`

	// Contains the UE policy data for a given subscriber.
	PlmnUePolicySet *UePolicySet `json:"plmnUePolicySet,omitempty"`

	// Contains the SM policy data for a given subscriber.
	SmPolicyData *SmPolicyData         `json:"smPolicyData,omitempty"`
	SponsorId    *string               `json:"sponsorId,omitempty"`
	UeId         *externalRef3.VarUeId `json:"ueId,omitempty"`

	// Contains the UE policy data for a given subscriber.
	UePolicySet *UePolicySet `json:"uePolicySet,omitempty"`

	// Contains remain allowed usage data for a subscriber.
	UsageMonData *UsageMonData `json:"usageMonData,omitempty"`
	UsageMonId   *string       `json:"usageMonId,omitempty"`
}

// PolicyDataChangeNotification_OpSpecDataMap defines model for PolicyDataChangeNotification.OpSpecDataMap.
type PolicyDataChangeNotification_OpSpecDataMap struct {
	AdditionalProperties map[string]externalRef1.OperatorSpecificDataContainer `json:"-"`
}

// Identifies a subscription to policy data change notification.
type PolicyDataSubscription struct {
	Expiry                *externalRef3.DateTime          `json:"expiry,omitempty"`
	MonitoredResourceUris []externalRef3.Uri              `json:"monitoredResourceUris"`
	NotificationUri       externalRef3.Uri                `json:"notificationUri"`
	SupportedFeatures     *externalRef3.SupportedFeatures `json:"supportedFeatures,omitempty"`
}

// Contains the SM policy data for a given subscriber.
type SmPolicyData struct {
	SmPolicySnssaiData SmPolicyData_SmPolicySnssaiData `json:"smPolicySnssaiData"`
	UmData             *SmPolicyData_UmData            `json:"umData,omitempty"`
	UmDataLimits       *SmPolicyData_UmDataLimits      `json:"umDataLimits,omitempty"`
}

// SmPolicyData_SmPolicySnssaiData defines model for SmPolicyData.SmPolicySnssaiData.
type SmPolicyData_SmPolicySnssaiData struct {
	AdditionalProperties map[string]SmPolicySnssaiData `json:"-"`
}

// SmPolicyData_UmData defines model for SmPolicyData.UmData.
type SmPolicyData_UmData struct {
	AdditionalProperties map[string]UsageMonData `json:"-"`
}

// SmPolicyData_UmDataLimits defines model for SmPolicyData.UmDataLimits.
type SmPolicyData_UmDataLimits struct {
	AdditionalProperties map[string]UsageMonDataLimit `json:"-"`
}

// Contains the SM policy data for a given DNN (and S-NSSAI).
type SmPolicyDnnData struct {
	AdcSupport          *bool                              `json:"adcSupport,omitempty"`
	AllowedServices     *[]string                          `json:"allowedServices,omitempty"`
	ChfInfo             *externalRef0.ChargingInformation  `json:"chfInfo,omitempty"`
	Dnn                 externalRef3.Dnn                   `json:"dnn"`
	GbrDl               *externalRef3.BitRate              `json:"gbrDl,omitempty"`
	GbrUl               *externalRef3.BitRate              `json:"gbrUl,omitempty"`
	ImsSignallingPrio   *bool                              `json:"imsSignallingPrio,omitempty"`
	Ipv4Index           *IpIndex                           `json:"ipv4Index,omitempty"`
	Ipv6Index           *IpIndex                           `json:"ipv6Index,omitempty"`
	MpsPriority         *bool                              `json:"mpsPriority,omitempty"`
	MpsPriorityLevel    *int                               `json:"mpsPriorityLevel,omitempty"`
	Offline             *bool                              `json:"offline,omitempty"`
	Online              *bool                              `json:"online,omitempty"`
	PraInfos            *SmPolicyDnnData_PraInfos          `json:"praInfos,omitempty"`
	RefUmDataLimitIds   *SmPolicyDnnData_RefUmDataLimitIds `json:"refUmDataLimitIds,omitempty"`
	SubscCats           *[]string                          `json:"subscCats,omitempty"`
	SubscSpendingLimits *bool                              `json:"subscSpendingLimits,omitempty"`
}

// SmPolicyDnnData_PraInfos defines model for SmPolicyDnnData.PraInfos.
type SmPolicyDnnData_PraInfos struct {
	AdditionalProperties map[string]externalRef3.PresenceInfo `json:"-"`
}

// SmPolicyDnnData_RefUmDataLimitIds defines model for SmPolicyDnnData.RefUmDataLimitIds.
type SmPolicyDnnData_RefUmDataLimitIds struct {
	AdditionalProperties map[string]LimitIdToMonitoringKey `json:"-"`
}

// Contains the SM policy data for a given subscriber and S-NSSAI.
type SmPolicySnssaiData struct {
	SmPolicyDnnData *SmPolicySnssaiData_SmPolicyDnnData `json:"smPolicyDnnData,omitempty"`
	Snssai          externalRef3.Snssai                 `json:"snssai"`
}

// SmPolicySnssaiData_SmPolicyDnnData defines model for SmPolicySnssaiData.SmPolicyDnnData.
type SmPolicySnssaiData_SmPolicyDnnData struct {
	AdditionalProperties map[string]SmPolicyDnnData `json:"-"`
}

// Contains the route selector parameters (DNNs, PDU session types and SSC modes) per SNSSAI
type SnssaiRouteSelectionDescriptor struct {
	DnnRouteSelDescs *[]DnnRouteSelectionDescriptor `json:"dnnRouteSelDescs,omitempty"`
	Snssai           externalRef3.Snssai            `json:"snssai"`
}

// Contains the sponsored data connectivity related information for a sponsor identifier.
type SponsorConnectivityData struct {
	AspIds []string `json:"aspIds"`
}

// Contains the periodicity for the defined usage monitoring data limits.
type TimePeriod struct {
	MaxNumPeriod *externalRef3.Uinteger `json:"maxNumPeriod,omitempty"`
	Period       Periodicity            `json:"period"`
}

// Contains the UE policy section.
type UePolicySection struct {
	UePolicySectionInfo externalRef3.Bytes `json:"uePolicySectionInfo"`
	Upsi                string             `json:"upsi"`
}

// Contains the UE policy data for a given subscriber.
type UePolicySet struct {
	AllowedRouteSelDescs *UePolicySet_AllowedRouteSelDescs `json:"allowedRouteSelDescs,omitempty"`
	AndspInd             *bool                             `json:"andspInd,omitempty"`
	OsIds                *[]OsId                           `json:"osIds,omitempty"`
	Pei                  *externalRef3.Pei                 `json:"pei,omitempty"`
	PraInfos             *UePolicySet_PraInfos             `json:"praInfos,omitempty"`
	SubscCats            *[]string                         `json:"subscCats,omitempty"`
	UePolicySections     *UePolicySet_UePolicySections     `json:"uePolicySections,omitempty"`
	Upsis                *[]string                         `json:"upsis,omitempty"`
}

// UePolicySet_AllowedRouteSelDescs defines model for UePolicySet.AllowedRouteSelDescs.
type UePolicySet_AllowedRouteSelDescs struct {
	AdditionalProperties map[string]PlmnRouteSelectionDescriptor `json:"-"`
}

// UePolicySet_PraInfos defines model for UePolicySet.PraInfos.
type UePolicySet_PraInfos struct {
	AdditionalProperties map[string]externalRef3.PresenceInfo `json:"-"`
}

// UePolicySet_UePolicySections defines model for UePolicySet.UePolicySections.
type UePolicySet_UePolicySections struct {
	AdditionalProperties map[string]UePolicySection `json:"-"`
}

// Contains the UE policy set for a given subscriber.
type UePolicySetPatch struct {
	AndspInd         *bool                              `json:"andspInd,omitempty"`
	OsIds            *[]OsId                            `json:"osIds,omitempty"`
	Pei              *externalRef3.Pei                  `json:"pei,omitempty"`
	UePolicySections *UePolicySetPatch_UePolicySections `json:"uePolicySections,omitempty"`
	Upsis            *[]string                          `json:"upsis,omitempty"`
}

// UePolicySetPatch_UePolicySections defines model for UePolicySetPatch.UePolicySections.
type UePolicySetPatch_UePolicySections struct {
	AdditionalProperties map[string]UePolicySection `json:"-"`
}

// Contains remain allowed usage data for a subscriber.
type UsageMonData struct {
	AllowedUsage *externalRef0.UsageThreshold `json:"allowedUsage,omitempty"`
	LimitId      string                       `json:"limitId"`

	// Contains the periodicity for the defined usage monitoring data limits.
	ResetTime *TimePeriod          `json:"resetTime,omitempty"`
	Scopes    *UsageMonData_Scopes `json:"scopes,omitempty"`
	UmLevel   *UsageMonLevel       `json:"umLevel,omitempty"`
}

// UsageMonData_Scopes defines model for UsageMonData.Scopes.
type UsageMonData_Scopes struct {
	AdditionalProperties map[string]UsageMonDataScope `json:"-"`
}

// Contains usage monitoring control data for a subscriber.
type UsageMonDataLimit struct {
	EndDate     *externalRef3.DateTime       `json:"endDate,omitempty"`
	LimitId     string                       `json:"limitId"`
	ResetPeriod *externalRef3.DateTime       `json:"resetPeriod,omitempty"`
	Scopes      *UsageMonDataLimit_Scopes    `json:"scopes,omitempty"`
	StartDate   *externalRef3.DateTime       `json:"startDate,omitempty"`
	UmLevel     *UsageMonLevel               `json:"umLevel,omitempty"`
	UsageLimit  *externalRef0.UsageThreshold `json:"usageLimit,omitempty"`
}

// UsageMonDataLimit_Scopes defines model for UsageMonDataLimit.Scopes.
type UsageMonDataLimit_Scopes struct {
	AdditionalProperties map[string]UsageMonDataScope `json:"-"`
}

// Contains a SNSSAI and DNN combinations to which the UsageMonData instance belongs to.
type UsageMonDataScope struct {
	Dnn    *[]externalRef3.Dnn `json:"dnn,omitempty"`
	Snssai externalRef3.Snssai `json:"snssai"`
}

// UsageMonLevel defines model for UsageMonLevel.
type UsageMonLevel interface{}

// CreateIndividualBdtDataJSONBody defines parameters for CreateIndividualBdtData.
type CreateIndividualBdtDataJSONBody BdtData

// CreateIndividualPolicyDataSubscriptionJSONBody defines parameters for CreateIndividualPolicyDataSubscription.
type CreateIndividualPolicyDataSubscriptionJSONBody PolicyDataSubscription

// ReplaceIndividualPolicyDataSubscriptionJSONBody defines parameters for ReplaceIndividualPolicyDataSubscription.
type ReplaceIndividualPolicyDataSubscriptionJSONBody PolicyDataSubscription

// ReadOperatorSpecificDataParams defines parameters for ReadOperatorSpecificData.
type ReadOperatorSpecificDataParams struct {
	// attributes to be retrieved
	Fields *[]string `json:"fields,omitempty"`
}

// ReplaceOperatorSpecificDataJSONBody defines parameters for ReplaceOperatorSpecificData.
type ReplaceOperatorSpecificDataJSONBody struct {
	AdditionalProperties map[string]externalRef1.OperatorSpecificDataContainer `json:"-"`
}

// ReadSessionManagementPolicyDataParams defines parameters for ReadSessionManagementPolicyData.
type ReadSessionManagementPolicyDataParams struct {
	Snssai *externalRef3.Snssai `json:"snssai,omitempty"`
	Dnn    *externalRef3.Dnn    `json:"dnn,omitempty"`

	// attributes to be retrieved
	Fields *[]string `json:"fields,omitempty"`
}

// CreateUsageMonitoringResourceJSONBody defines parameters for CreateUsageMonitoringResource.
type CreateUsageMonitoringResourceJSONBody UsageMonData

// CreateOrReplaceUEPolicySetJSONBody defines parameters for CreateOrReplaceUEPolicySet.
type CreateOrReplaceUEPolicySetJSONBody UePolicySet

// CreateIndividualBdtDataJSONRequestBody defines body for CreateIndividualBdtData for application/json ContentType.
type CreateIndividualBdtDataJSONRequestBody CreateIndividualBdtDataJSONBody

// CreateIndividualPolicyDataSubscriptionJSONRequestBody defines body for CreateIndividualPolicyDataSubscription for application/json ContentType.
type CreateIndividualPolicyDataSubscriptionJSONRequestBody CreateIndividualPolicyDataSubscriptionJSONBody

// ReplaceIndividualPolicyDataSubscriptionJSONRequestBody defines body for ReplaceIndividualPolicyDataSubscription for application/json ContentType.
type ReplaceIndividualPolicyDataSubscriptionJSONRequestBody ReplaceIndividualPolicyDataSubscriptionJSONBody

// ReplaceOperatorSpecificDataJSONRequestBody defines body for ReplaceOperatorSpecificData for application/json ContentType.
type ReplaceOperatorSpecificDataJSONRequestBody ReplaceOperatorSpecificDataJSONBody

// CreateUsageMonitoringResourceJSONRequestBody defines body for CreateUsageMonitoringResource for application/json ContentType.
type CreateUsageMonitoringResourceJSONRequestBody CreateUsageMonitoringResourceJSONBody

// CreateOrReplaceUEPolicySetJSONRequestBody defines body for CreateOrReplaceUEPolicySet for application/json ContentType.
type CreateOrReplaceUEPolicySetJSONRequestBody CreateOrReplaceUEPolicySetJSONBody

// Getter for additional properties for ReplaceOperatorSpecificDataJSONBody. Returns the specified
// element and whether it was found
func (a ReplaceOperatorSpecificDataJSONBody) Get(fieldName string) (value externalRef1.OperatorSpecificDataContainer, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ReplaceOperatorSpecificDataJSONBody
func (a *ReplaceOperatorSpecificDataJSONBody) Set(fieldName string, value externalRef1.OperatorSpecificDataContainer) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]externalRef1.OperatorSpecificDataContainer)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ReplaceOperatorSpecificDataJSONBody to handle AdditionalProperties
func (a *ReplaceOperatorSpecificDataJSONBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]externalRef1.OperatorSpecificDataContainer)
		for fieldName, fieldBuf := range object {
			var fieldVal externalRef1.OperatorSpecificDataContainer
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ReplaceOperatorSpecificDataJSONBody to handle AdditionalProperties
func (a ReplaceOperatorSpecificDataJSONBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmPolicyData_PraInfos. Returns the specified
// element and whether it was found
func (a AmPolicyData_PraInfos) Get(fieldName string) (value externalRef3.PresenceInfo, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmPolicyData_PraInfos
func (a *AmPolicyData_PraInfos) Set(fieldName string, value externalRef3.PresenceInfo) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]externalRef3.PresenceInfo)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmPolicyData_PraInfos to handle AdditionalProperties
func (a *AmPolicyData_PraInfos) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]externalRef3.PresenceInfo)
		for fieldName, fieldBuf := range object {
			var fieldVal externalRef3.PresenceInfo
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmPolicyData_PraInfos to handle AdditionalProperties
func (a AmPolicyData_PraInfos) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PolicyDataChangeNotification_OpSpecDataMap. Returns the specified
// element and whether it was found
func (a PolicyDataChangeNotification_OpSpecDataMap) Get(fieldName string) (value externalRef1.OperatorSpecificDataContainer, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PolicyDataChangeNotification_OpSpecDataMap
func (a *PolicyDataChangeNotification_OpSpecDataMap) Set(fieldName string, value externalRef1.OperatorSpecificDataContainer) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]externalRef1.OperatorSpecificDataContainer)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PolicyDataChangeNotification_OpSpecDataMap to handle AdditionalProperties
func (a *PolicyDataChangeNotification_OpSpecDataMap) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]externalRef1.OperatorSpecificDataContainer)
		for fieldName, fieldBuf := range object {
			var fieldVal externalRef1.OperatorSpecificDataContainer
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PolicyDataChangeNotification_OpSpecDataMap to handle AdditionalProperties
func (a PolicyDataChangeNotification_OpSpecDataMap) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmPolicyData_SmPolicySnssaiData. Returns the specified
// element and whether it was found
func (a SmPolicyData_SmPolicySnssaiData) Get(fieldName string) (value SmPolicySnssaiData, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmPolicyData_SmPolicySnssaiData
func (a *SmPolicyData_SmPolicySnssaiData) Set(fieldName string, value SmPolicySnssaiData) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]SmPolicySnssaiData)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmPolicyData_SmPolicySnssaiData to handle AdditionalProperties
func (a *SmPolicyData_SmPolicySnssaiData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]SmPolicySnssaiData)
		for fieldName, fieldBuf := range object {
			var fieldVal SmPolicySnssaiData
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmPolicyData_SmPolicySnssaiData to handle AdditionalProperties
func (a SmPolicyData_SmPolicySnssaiData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmPolicyData_UmData. Returns the specified
// element and whether it was found
func (a SmPolicyData_UmData) Get(fieldName string) (value UsageMonData, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmPolicyData_UmData
func (a *SmPolicyData_UmData) Set(fieldName string, value UsageMonData) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]UsageMonData)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmPolicyData_UmData to handle AdditionalProperties
func (a *SmPolicyData_UmData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]UsageMonData)
		for fieldName, fieldBuf := range object {
			var fieldVal UsageMonData
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmPolicyData_UmData to handle AdditionalProperties
func (a SmPolicyData_UmData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmPolicyData_UmDataLimits. Returns the specified
// element and whether it was found
func (a SmPolicyData_UmDataLimits) Get(fieldName string) (value UsageMonDataLimit, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmPolicyData_UmDataLimits
func (a *SmPolicyData_UmDataLimits) Set(fieldName string, value UsageMonDataLimit) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]UsageMonDataLimit)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmPolicyData_UmDataLimits to handle AdditionalProperties
func (a *SmPolicyData_UmDataLimits) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]UsageMonDataLimit)
		for fieldName, fieldBuf := range object {
			var fieldVal UsageMonDataLimit
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmPolicyData_UmDataLimits to handle AdditionalProperties
func (a SmPolicyData_UmDataLimits) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmPolicyDnnData_PraInfos. Returns the specified
// element and whether it was found
func (a SmPolicyDnnData_PraInfos) Get(fieldName string) (value externalRef3.PresenceInfo, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmPolicyDnnData_PraInfos
func (a *SmPolicyDnnData_PraInfos) Set(fieldName string, value externalRef3.PresenceInfo) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]externalRef3.PresenceInfo)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmPolicyDnnData_PraInfos to handle AdditionalProperties
func (a *SmPolicyDnnData_PraInfos) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]externalRef3.PresenceInfo)
		for fieldName, fieldBuf := range object {
			var fieldVal externalRef3.PresenceInfo
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmPolicyDnnData_PraInfos to handle AdditionalProperties
func (a SmPolicyDnnData_PraInfos) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmPolicyDnnData_RefUmDataLimitIds. Returns the specified
// element and whether it was found
func (a SmPolicyDnnData_RefUmDataLimitIds) Get(fieldName string) (value LimitIdToMonitoringKey, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmPolicyDnnData_RefUmDataLimitIds
func (a *SmPolicyDnnData_RefUmDataLimitIds) Set(fieldName string, value LimitIdToMonitoringKey) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]LimitIdToMonitoringKey)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmPolicyDnnData_RefUmDataLimitIds to handle AdditionalProperties
func (a *SmPolicyDnnData_RefUmDataLimitIds) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]LimitIdToMonitoringKey)
		for fieldName, fieldBuf := range object {
			var fieldVal LimitIdToMonitoringKey
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmPolicyDnnData_RefUmDataLimitIds to handle AdditionalProperties
func (a SmPolicyDnnData_RefUmDataLimitIds) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmPolicySnssaiData_SmPolicyDnnData. Returns the specified
// element and whether it was found
func (a SmPolicySnssaiData_SmPolicyDnnData) Get(fieldName string) (value SmPolicyDnnData, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmPolicySnssaiData_SmPolicyDnnData
func (a *SmPolicySnssaiData_SmPolicyDnnData) Set(fieldName string, value SmPolicyDnnData) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]SmPolicyDnnData)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmPolicySnssaiData_SmPolicyDnnData to handle AdditionalProperties
func (a *SmPolicySnssaiData_SmPolicyDnnData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]SmPolicyDnnData)
		for fieldName, fieldBuf := range object {
			var fieldVal SmPolicyDnnData
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmPolicySnssaiData_SmPolicyDnnData to handle AdditionalProperties
func (a SmPolicySnssaiData_SmPolicyDnnData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UePolicySet_AllowedRouteSelDescs. Returns the specified
// element and whether it was found
func (a UePolicySet_AllowedRouteSelDescs) Get(fieldName string) (value PlmnRouteSelectionDescriptor, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UePolicySet_AllowedRouteSelDescs
func (a *UePolicySet_AllowedRouteSelDescs) Set(fieldName string, value PlmnRouteSelectionDescriptor) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]PlmnRouteSelectionDescriptor)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UePolicySet_AllowedRouteSelDescs to handle AdditionalProperties
func (a *UePolicySet_AllowedRouteSelDescs) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]PlmnRouteSelectionDescriptor)
		for fieldName, fieldBuf := range object {
			var fieldVal PlmnRouteSelectionDescriptor
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UePolicySet_AllowedRouteSelDescs to handle AdditionalProperties
func (a UePolicySet_AllowedRouteSelDescs) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UePolicySet_PraInfos. Returns the specified
// element and whether it was found
func (a UePolicySet_PraInfos) Get(fieldName string) (value externalRef3.PresenceInfo, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UePolicySet_PraInfos
func (a *UePolicySet_PraInfos) Set(fieldName string, value externalRef3.PresenceInfo) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]externalRef3.PresenceInfo)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UePolicySet_PraInfos to handle AdditionalProperties
func (a *UePolicySet_PraInfos) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]externalRef3.PresenceInfo)
		for fieldName, fieldBuf := range object {
			var fieldVal externalRef3.PresenceInfo
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UePolicySet_PraInfos to handle AdditionalProperties
func (a UePolicySet_PraInfos) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UePolicySet_UePolicySections. Returns the specified
// element and whether it was found
func (a UePolicySet_UePolicySections) Get(fieldName string) (value UePolicySection, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UePolicySet_UePolicySections
func (a *UePolicySet_UePolicySections) Set(fieldName string, value UePolicySection) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]UePolicySection)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UePolicySet_UePolicySections to handle AdditionalProperties
func (a *UePolicySet_UePolicySections) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]UePolicySection)
		for fieldName, fieldBuf := range object {
			var fieldVal UePolicySection
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UePolicySet_UePolicySections to handle AdditionalProperties
func (a UePolicySet_UePolicySections) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UePolicySetPatch_UePolicySections. Returns the specified
// element and whether it was found
func (a UePolicySetPatch_UePolicySections) Get(fieldName string) (value UePolicySection, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UePolicySetPatch_UePolicySections
func (a *UePolicySetPatch_UePolicySections) Set(fieldName string, value UePolicySection) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]UePolicySection)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UePolicySetPatch_UePolicySections to handle AdditionalProperties
func (a *UePolicySetPatch_UePolicySections) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]UePolicySection)
		for fieldName, fieldBuf := range object {
			var fieldVal UePolicySection
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UePolicySetPatch_UePolicySections to handle AdditionalProperties
func (a UePolicySetPatch_UePolicySections) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UsageMonData_Scopes. Returns the specified
// element and whether it was found
func (a UsageMonData_Scopes) Get(fieldName string) (value UsageMonDataScope, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UsageMonData_Scopes
func (a *UsageMonData_Scopes) Set(fieldName string, value UsageMonDataScope) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]UsageMonDataScope)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UsageMonData_Scopes to handle AdditionalProperties
func (a *UsageMonData_Scopes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]UsageMonDataScope)
		for fieldName, fieldBuf := range object {
			var fieldVal UsageMonDataScope
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UsageMonData_Scopes to handle AdditionalProperties
func (a UsageMonData_Scopes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UsageMonDataLimit_Scopes. Returns the specified
// element and whether it was found
func (a UsageMonDataLimit_Scopes) Get(fieldName string) (value UsageMonDataScope, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UsageMonDataLimit_Scopes
func (a *UsageMonDataLimit_Scopes) Set(fieldName string, value UsageMonDataScope) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]UsageMonDataScope)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UsageMonDataLimit_Scopes to handle AdditionalProperties
func (a *UsageMonDataLimit_Scopes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]UsageMonDataScope)
		for fieldName, fieldBuf := range object {
			var fieldVal UsageMonDataScope
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UsageMonDataLimit_Scopes to handle AdditionalProperties
func (a UsageMonDataLimit_Scopes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
