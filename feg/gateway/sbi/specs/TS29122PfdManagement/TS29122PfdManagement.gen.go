// Package TS29122PfdManagement provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package TS29122PfdManagement

import (
	"encoding/json"
	"fmt"

	externalRef0 "magma/feg/gateway/sbi/specs/TS29122CommonData"
	externalRef1 "magma/feg/gateway/sbi/specs/TS29571CommonData"
)

const (
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
)

// Possible values are - MALFUNCTION: This value indicates that something functions wrongly in PFD provisioning or the PFD provisioning does not function at all. - RESOURCE_LIMITATION: This value indicates there is resource limitation for PFD storage. - SHORT_DELAY: This value indicates that the allowed delay is too short and PFD(s) are not stored. - APP_ID_DUPLICATED: The received external application identifier(s) are already provisioned. - OTHER_REASON: Other reason unspecified.
type FailureCode interface{}

// Pfd defines model for Pfd.
type Pfd struct {
	// Indicates an FQDN or a regular expression as a domain name matching criteria.
	DomainNames *[]string `json:"domainNames,omitempty"`

	// Represents a 3-tuple with protocol, server ip and server port for UL/DL application traffic. The content of the string has the same encoding as the IPFilterRule AVP value as defined in IETF RFC 6733.
	FlowDescriptions *[]string `json:"flowDescriptions,omitempty"`

	// Identifies a PDF of an application identifier.
	PfdId string `json:"pfdId"`

	// Indicates a URL or a regular expression which is used to match the significant parts of the URL.
	Urls *[]string `json:"urls,omitempty"`
}

// PfdData defines model for PfdData.
type PfdData struct {
	// Unsigned integer identifying a period of time in units of seconds with "nullable=true" property.
	AllowedDelay *externalRef0.DurationSecRm `json:"allowedDelay"`

	// Unsigned integer identifying a period of time in units of seconds with "readOnly=true" property.
	CachingTime *externalRef0.DurationSecRo `json:"cachingTime,omitempty"`

	// Each element uniquely external application identifier
	ExternalAppId string `json:"externalAppId"`

	// Contains the PFDs of the external application identifier. Each PFD is identified in the map via a key containing the PFD identifier.
	Pfds PfdData_Pfds `json:"pfds"`

	// string formatted according to IETF RFC 3986 identifying a referenced resource.
	Self *externalRef0.Link `json:"self,omitempty"`
}

// Contains the PFDs of the external application identifier. Each PFD is identified in the map via a key containing the PFD identifier.
type PfdData_Pfds struct {
	AdditionalProperties map[string]Pfd `json:"-"`
}

// PfdManagement defines model for PfdManagement.
type PfdManagement struct {
	// Each element uniquely identifies the PFDs for an external application identifier. Each element is identified in the map via an external application identifier as key. The response shall include successfully provisioned PFD data of application(s).
	PfdDatas PfdManagement_PfdDatas `json:"pfdDatas"`

	// Supplied by the SCEF and contains the external application identifiers for which PFD(s) are not added or modified successfully. The failure reason is also included. Each element provides the related information for one or more external application identifier(s) and is identified in the map via the failure identifier as key.
	PfdReports *PfdManagement_PfdReports `json:"pfdReports,omitempty"`

	// string formatted according to IETF RFC 3986 identifying a referenced resource.
	Self              *externalRef0.Link              `json:"self,omitempty"`
	SupportedFeatures *externalRef1.SupportedFeatures `json:"supportedFeatures,omitempty"`
}

// Each element uniquely identifies the PFDs for an external application identifier. Each element is identified in the map via an external application identifier as key. The response shall include successfully provisioned PFD data of application(s).
type PfdManagement_PfdDatas struct {
	AdditionalProperties map[string]PfdData `json:"-"`
}

// Supplied by the SCEF and contains the external application identifiers for which PFD(s) are not added or modified successfully. The failure reason is also included. Each element provides the related information for one or more external application identifier(s) and is identified in the map via the failure identifier as key.
type PfdManagement_PfdReports struct {
	AdditionalProperties map[string]PfdReport `json:"-"`
}

// PfdReport defines model for PfdReport.
type PfdReport struct {
	// Unsigned integer identifying a period of time in units of seconds.
	CachingTime *externalRef0.DurationSec `json:"cachingTime,omitempty"`

	// Identifies the external application identifier(s) which PFD(s) are not added or modified successfully
	ExternalAppIds []string `json:"externalAppIds"`

	// Possible values are - MALFUNCTION: This value indicates that something functions wrongly in PFD provisioning or the PFD provisioning does not function at all. - RESOURCE_LIMITATION: This value indicates there is resource limitation for PFD storage. - SHORT_DELAY: This value indicates that the allowed delay is too short and PFD(s) are not stored. - APP_ID_DUPLICATED: The received external application identifier(s) are already provisioned. - OTHER_REASON: Other reason unspecified.
	FailureCode FailureCode `json:"failureCode"`
}

// PostScsAsIdTransactionsJSONBody defines parameters for PostScsAsIdTransactions.
type PostScsAsIdTransactionsJSONBody PfdManagement

// PutScsAsIdTransactionsTransactionIdJSONBody defines parameters for PutScsAsIdTransactionsTransactionId.
type PutScsAsIdTransactionsTransactionIdJSONBody PfdManagement

// PutScsAsIdTransactionsTransactionIdApplicationsAppIdJSONBody defines parameters for PutScsAsIdTransactionsTransactionIdApplicationsAppId.
type PutScsAsIdTransactionsTransactionIdApplicationsAppIdJSONBody PfdData

// PostScsAsIdTransactionsJSONRequestBody defines body for PostScsAsIdTransactions for application/json ContentType.
type PostScsAsIdTransactionsJSONRequestBody PostScsAsIdTransactionsJSONBody

// PutScsAsIdTransactionsTransactionIdJSONRequestBody defines body for PutScsAsIdTransactionsTransactionId for application/json ContentType.
type PutScsAsIdTransactionsTransactionIdJSONRequestBody PutScsAsIdTransactionsTransactionIdJSONBody

// PutScsAsIdTransactionsTransactionIdApplicationsAppIdJSONRequestBody defines body for PutScsAsIdTransactionsTransactionIdApplicationsAppId for application/json ContentType.
type PutScsAsIdTransactionsTransactionIdApplicationsAppIdJSONRequestBody PutScsAsIdTransactionsTransactionIdApplicationsAppIdJSONBody

// Getter for additional properties for PfdData_Pfds. Returns the specified
// element and whether it was found
func (a PfdData_Pfds) Get(fieldName string) (value Pfd, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PfdData_Pfds
func (a *PfdData_Pfds) Set(fieldName string, value Pfd) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]Pfd)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PfdData_Pfds to handle AdditionalProperties
func (a *PfdData_Pfds) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]Pfd)
		for fieldName, fieldBuf := range object {
			var fieldVal Pfd
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PfdData_Pfds to handle AdditionalProperties
func (a PfdData_Pfds) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PfdManagement_PfdDatas. Returns the specified
// element and whether it was found
func (a PfdManagement_PfdDatas) Get(fieldName string) (value PfdData, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PfdManagement_PfdDatas
func (a *PfdManagement_PfdDatas) Set(fieldName string, value PfdData) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]PfdData)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PfdManagement_PfdDatas to handle AdditionalProperties
func (a *PfdManagement_PfdDatas) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]PfdData)
		for fieldName, fieldBuf := range object {
			var fieldVal PfdData
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PfdManagement_PfdDatas to handle AdditionalProperties
func (a PfdManagement_PfdDatas) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PfdManagement_PfdReports. Returns the specified
// element and whether it was found
func (a PfdManagement_PfdReports) Get(fieldName string) (value PfdReport, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PfdManagement_PfdReports
func (a *PfdManagement_PfdReports) Set(fieldName string, value PfdReport) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]PfdReport)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PfdManagement_PfdReports to handle AdditionalProperties
func (a *PfdManagement_PfdReports) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]PfdReport)
		for fieldName, fieldBuf := range object {
			var fieldVal PfdReport
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PfdManagement_PfdReports to handle AdditionalProperties
func (a PfdManagement_PfdReports) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
