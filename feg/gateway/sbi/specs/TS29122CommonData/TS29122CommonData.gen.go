// Package TS29122CommonData provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package TS29122CommonData

import (
	externalRef0 "magma/feg/gateway/sbi/specs/TS29571CommonData"
	externalRef1 "magma/feg/gateway/sbi/specs/TS29572NlmfLocation"
)

// AccumulatedUsage defines model for AccumulatedUsage.
type AccumulatedUsage struct {
	// Unsigned integer identifying a volume in units of bytes.
	DownlinkVolume *Volume `json:"downlinkVolume,omitempty"`

	// Unsigned integer identifying a period of time in units of seconds.
	Duration *DurationSec `json:"duration,omitempty"`

	// Unsigned integer identifying a volume in units of bytes.
	TotalVolume *Volume `json:"totalVolume,omitempty"`

	// Unsigned integer identifying a volume in units of bytes.
	UplinkVolume *Volume `json:"uplinkVolume,omitempty"`
}

// Acknowledgement defines model for Acknowledgement.
type Acknowledgement struct {
	// A human-readable explanation specific to this successful acknowledgement
	Details string `json:"details"`
}

// integer indicating a bandwidth in bits per second.
type Bandwidth int

// string identifying a BDT Reference ID as defined in subclause 5.3.3 of 3GPP TS 29.154.
type BdtReferenceId string

// string with format "binary" as defined in OpenAPI Specification.
type Binary string

// String with format "byte" as defined in OpenAPI Specification, i.e, base64-encoded characters.
type Bytes string

// ChargingInformation defines model for ChargingInformation.
type ChargingInformation struct {
	PrimaryChfAddress   externalRef0.Uri `json:"primaryChfAddress"`
	SecondaryChfAddress externalRef0.Uri `json:"secondaryChfAddress"`
}

// ConfigResult defines model for ConfigResult.
type ConfigResult interface{}

// string with format "date-time" as defined in OpenAPI.
type DateTime string

// string with format "date-time" as defined in OpenAPI with "nullable=true" property.
type DateTimeRm string

// string with format "date-time" as defined in OpenAPI with "readOnly=true" property.
type DateTimeRo string

// integer between and including 1 and 7 denoting a weekday. 1 shall indicate Monday, and the subsequent weekdays shall be indicated with the next higher numbers. 7 shall indicate Sunday.
type DayOfWeek int

// Unsigned integer identifying a period of time in units of minutes.
type DurationMin int32

// Unsigned integer identifying a period of time in units of seconds.
type DurationSec int

// Unsigned integer identifying a period of time in units of seconds with "nullable=true" property.
type DurationSecRm int

// Unsigned integer identifying a period of time in units of seconds with "readOnly=true" property.
type DurationSecRo int

// Possible values are - SESSION_TERMINATION: Indicates that Rx session is terminated. - LOSS_OF_BEARER : Indicates a loss of a bearer. - RECOVERY_OF_BEARER: Indicates a recovery of a bearer. - RELEASE_OF_BEARER: Indicates a release of a bearer. - USAGE_REPORT: Indicates the usage report event.
type Event interface{}

// EventReport defines model for EventReport.
type EventReport struct {
	AccumulatedUsage *AccumulatedUsage `json:"accumulatedUsage,omitempty"`

	// Possible values are - SESSION_TERMINATION: Indicates that Rx session is terminated. - LOSS_OF_BEARER : Indicates a loss of a bearer. - RECOVERY_OF_BEARER: Indicates a recovery of a bearer. - RELEASE_OF_BEARER: Indicates a release of a bearer. - USAGE_REPORT: Indicates the usage report event.
	Event Event `json:"event"`

	// Identifies the IP flows that were sent during event subscription
	FlowIds *[]int `json:"flowIds,omitempty"`
}

// string containing a local identifier followed by "@" and a domain identifier. Both the local identifier and the domain identifier shall be encoded as strings that do not contain any "@" characters. See Clauses 4.6.2 and 4.6.3 of 3GPP TS 23.682 for more information.
type ExternalGroupId string

// string containing a local identifier followed by "@" and a domain identifier. Both the local identifier and the domain identifier shall be encoded as strings that do not contain any "@" characters. See Clause 4.6.2 of 3GPP TS 23.682 for more information.
type ExternalId string

// FinalUnitAction defines model for FinalUnitAction.
type FinalUnitAction interface{}

// Possible values are - DOWNLINK: The corresponding filter applies for traffic to the UE. - UPLINK: The corresponding filter applies for traffic from the UE. - BIDIRECTIONAL: The corresponding filter applies for traffic both to and from the UE. - UNSPECIFIED: The corresponding filter applies for traffic to the UE (downlink), but has no specific direction declared. The service data flow detection shall apply the filter for uplink traffic as if the filter was bidirectional. The PCF shall not use the value UNSPECIFIED in filters created by the network in NW-initiated procedures. The PCF shall only include the value UNSPECIFIED in filters in UE-initiated procedures if the same value is received from the SMF.
type FlowDirection interface{}

// FlowInfo defines model for FlowInfo.
type FlowInfo struct {
	// Indicates the packet filters of the IP flow. Refer to subclause 5.3.8 of 3GPP TS 29.214 for encoding. It shall contain UL and/or DL IP flow description.
	FlowDescriptions *[]string `json:"flowDescriptions,omitempty"`

	// Indicates the IP flow.
	FlowId int `json:"flowId"`
}

// InvalidParam defines model for InvalidParam.
type InvalidParam struct {
	// Attribute's name encoded as a JSON Pointer, or header's name.
	Param string `json:"param"`

	// A human-readable reason, e.g. "must be a positive integer".
	Reason *string `json:"reason,omitempty"`
}

// string identifying a Ipv4 address formatted in the "dotted decimal" notation as defined in IETF RFC 1166.
type Ipv4Addr string

// string identifying a Ipv4 address formatted in the "dotted decimal" notation as defined in IETF RFC 1166, with "readOnly=true" property.
type Ipv4AddrRo string

// string identifying a Ipv6 address formatted according to clause 4 in IETF RFC 5952. The mixed Ipv4 Ipv6 notation according to clause 5 of IETF RFC 5952 shall not be used.
type Ipv6Addr string

// string identifying a Ipv6 address formatted according to clause 4 in IETF RFC 5952, with "readOnly=true" property. The mixed Ipv4 Ipv6 notation according to clause 5 of IETF RFC 5952 shall not be used.
type Ipv6AddrRo string

// string formatted according to IETF RFC 3986 identifying a referenced resource.
type Link string

// LocationArea defines model for LocationArea.
type LocationArea struct {
	// Indicates a list of Cell Global Identities of the user which identifies the cell the UE is registered.
	CellIds *[]string `json:"cellIds,omitempty"`

	// Identifies a list of civic addresses of the user where the UE is located.
	CivicAddresses *[]externalRef1.CivicAddress `json:"civicAddresses,omitempty"`

	// Indicates a list of eNodeB identities in which the UE is currently located.
	EnodeBIds *[]string `json:"enodeBIds,omitempty"`

	// Identifies a list of geographic area of the user where the UE is located.
	GeographicAreas *[]externalRef1.GeographicArea `json:"geographicAreas,omitempty"`

	// Identifies a list of Routing Area Identities of the user where the UE is located.
	RoutingAreaIds *[]string `json:"routingAreaIds,omitempty"`

	// Identifies a list of Tracking Area Identities of the user where the UE is located.
	TrackingAreaIds *[]string `json:"trackingAreaIds,omitempty"`
}

// LocationArea5G defines model for LocationArea5G.
type LocationArea5G struct {
	// Identifies a list of civic addresses of the user where the UE is located.
	CivicAddresses *[]externalRef1.CivicAddress `json:"civicAddresses,omitempty"`

	// Identifies a list of geographic area of the user where the UE is located.
	GeographicAreas *[]externalRef1.GeographicArea `json:"geographicAreas,omitempty"`

	// Describes a network area information in which the NF service consumer requests the number of UEs.
	NwAreaInfo *NetworkAreaInfo `json:"nwAreaInfo,omitempty"`
}

// String encoding a Mobile Country Code part of the PLMN, comprising 3 digits, as defined in 3GPP TS 38.413.
type Mcc string

// String encoding a Mobile Network Code part of the PLMN, comprising 2 or 3 digits, as defined in 3GPP TS 38.413.
type Mnc string

// string formatted according to subclause 3.3 of 3GPP TS 23.003 that describes an MSISDN.
type Msisdn string

// N1MessageClass defines model for N1MessageClass.
type N1MessageClass interface{}

// N2InformationClass defines model for N2InformationClass.
type N2InformationClass interface{}

// Describes a network area information in which the NF service consumer requests the number of UEs.
type NetworkAreaInfo struct {
	// Contains a list of E-UTRA cell identities.
	Ecgis *[]externalRef0.Ecgi `json:"ecgis,omitempty"`

	// Contains a list of NG RAN nodes.
	GRanNodeIds *[]externalRef0.GlobalRanNodeId `json:"gRanNodeIds,omitempty"`

	// Contains a list of NR cell identities.
	Ncgis *[]externalRef0.Ncgi `json:"ncgis,omitempty"`

	// Contains a list of tracking area identities.
	Tais *[]externalRef0.Tai `json:"tais,omitempty"`
}

// NgRanTargetId defines model for NgRanTargetId.
type NgRanTargetId struct {
	RanNodeId externalRef0.GlobalRanNodeId `json:"ranNodeId"`
	Tai       externalRef0.Tai             `json:"tai"`
}

// NotificationData defines model for NotificationData.
type NotificationData struct {
	// Contains the reported event and applicable information
	EventReports []EventReport `json:"eventReports"`

	// string formatted according to IETF RFC 3986 identifying a referenced resource.
	Transaction Link `json:"transaction"`
}

// PlmnId defines model for PlmnId.
type PlmnId struct {
	// String encoding a Mobile Country Code part of the PLMN, comprising 3 digits, as defined in 3GPP TS 38.413.
	Mcc Mcc `json:"mcc"`

	// String encoding a Mobile Network Code part of the PLMN, comprising 2 or 3 digits, as defined in 3GPP TS 38.413.
	Mnc Mnc `json:"mnc"`
}

// Unsigned integer with valid values between 0 and 65535.
type Port int

// Unsigned integer with valid values between 0 and 65535, with "readOnly=true" property.
type PortRo int

// ProblemDetails defines model for ProblemDetails.
type ProblemDetails struct {
	// A machine-readable application error cause specific to this occurrence of the problem. This IE should be present and provide application-related error information, if available.
	Cause *string `json:"cause,omitempty"`

	// A human-readable explanation specific to this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`

	// string providing an URI formatted according to IETF RFC 3986.
	Instance *Uri `json:"instance,omitempty"`

	// Description of invalid parameters, for a request rejected due to invalid parameters.
	InvalidParams *[]InvalidParam `json:"invalidParams,omitempty"`

	// The HTTP status code for this occurrence of the problem.
	Status *int `json:"status,omitempty"`

	// A short, human-readable summary of the problem type. It should not change from occurrence to occurrence of the problem.
	Title *string `json:"title,omitempty"`

	// string providing an URI formatted according to IETF RFC 3986.
	Type *Uri `json:"type,omitempty"`
}

// string chosen by the SCEF to serve as identifier in a resource URI.
type ResourceId string

// Possible values are - ROAMING_NOT_ALLOWED: Identifies the configuration parameters are not allowed by roaming agreement. - OTHER_REASON: Identifies the configuration parameters are not configured due to other reason.
type ResultReason interface{}

// string that identifies an SCS/AS.
type ScsAsId string

// SponsorInformation defines model for SponsorInformation.
type SponsorInformation struct {
	// It indicates Application Service Provider ID.
	AspId string `json:"aspId"`

	// It indicates Sponsor ID.
	SponsorId string `json:"sponsorId"`
}

// TestNotification defines model for TestNotification.
type TestNotification struct {
	// string formatted according to IETF RFC 3986 identifying a referenced resource.
	Subscription Link `json:"subscription"`
}

// String with format partial-time or full-time as defined in subclause 5.6 of IETF RFC 3339. Examples, 20:15:00, 20:15:00-08:00 (for 8 hours behind UTC).
type TimeOfDay string

// TimeWindow defines model for TimeWindow.
type TimeWindow struct {
	// string with format "date-time" as defined in OpenAPI.
	StartTime DateTime `json:"startTime"`

	// string with format "date-time" as defined in OpenAPI.
	StopTime DateTime `json:"stopTime"`
}

// UpPathChgEvent defines model for UpPathChgEvent.
type UpPathChgEvent struct {
	// Possible values are - EARLY: Early notification of UP path reconfiguration. - EARLY_LATE: Early and late notification of UP path reconfiguration. This value shall only be present in the subscription to the DNAI change event. - LATE: Late notification of UP path reconfiguration.
	DnaiChgType externalRef0.DnaiChangeType `json:"dnaiChgType"`

	// It is used to set the value of Notification Correlation ID in the notification sent by the SMF.
	NotifCorreId    string           `json:"notifCorreId"`
	NotificationUri externalRef0.Uri `json:"notificationUri"`
}

// string providing an URI formatted according to IETF RFC 3986.
type Uri string

// UsageThreshold defines model for UsageThreshold.
type UsageThreshold struct {
	// Unsigned integer identifying a volume in units of bytes.
	DownlinkVolume *Volume `json:"downlinkVolume,omitempty"`

	// Unsigned integer identifying a period of time in units of seconds.
	Duration *DurationSec `json:"duration,omitempty"`

	// Unsigned integer identifying a volume in units of bytes.
	TotalVolume *Volume `json:"totalVolume,omitempty"`

	// Unsigned integer identifying a volume in units of bytes.
	UplinkVolume *Volume `json:"uplinkVolume,omitempty"`
}

// UsageThresholdRm defines model for UsageThresholdRm.
type UsageThresholdRm struct {
	// Unsigned integer identifying a volume in units of bytes with "nullable=true" property.
	DownlinkVolume *VolumeRm `json:"downlinkVolume"`

	// Unsigned integer identifying a period of time in units of seconds with "nullable=true" property.
	Duration *DurationSecRm `json:"duration"`

	// Unsigned integer identifying a volume in units of bytes with "nullable=true" property.
	TotalVolume *VolumeRm `json:"totalVolume"`

	// Unsigned integer identifying a volume in units of bytes with "nullable=true" property.
	UplinkVolume *VolumeRm `json:"uplinkVolume"`
}

// Unsigned integer identifying a volume in units of bytes.
type Volume int64

// Unsigned integer identifying a volume in units of bytes with "nullable=true" property.
type VolumeRm int64

// WebsockNotifConfig defines model for WebsockNotifConfig.
type WebsockNotifConfig struct {
	// Set by the SCS/AS to indicate that the Websocket delivery is requested.
	RequestWebsocketUri *bool `json:"requestWebsocketUri,omitempty"`

	// string formatted according to IETF RFC 3986 identifying a referenced resource.
	WebsocketUri *Link `json:"websocketUri,omitempty"`
}
