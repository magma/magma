// Package TS29507NpcfAMPolicyControl provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package TS29507NpcfAMPolicyControl

import (
	"encoding/json"
	"fmt"

	externalRef0 "magma/feg/gateway/sbi/specs/TS29571CommonData"
)

const (
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
)

// PolicyAssociation defines model for PolicyAssociation.
type PolicyAssociation struct {
	Pras        *PolicyAssociation_Pras              `json:"pras,omitempty"`
	Request     *PolicyAssociationRequest            `json:"request,omitempty"`
	Rfsp        *externalRef0.RfspIndex              `json:"rfsp,omitempty"`
	ServAreaRes *externalRef0.ServiceAreaRestriction `json:"servAreaRes,omitempty"`
	SuppFeat    externalRef0.SupportedFeatures       `json:"suppFeat"`

	// Request Triggers that the PCF subscribes. Only values "LOC_CH" and "PRA_CH" are permitted.
	Triggers *[]RequestTrigger `json:"triggers,omitempty"`
}

// PolicyAssociation_Pras defines model for PolicyAssociation.Pras.
type PolicyAssociation_Pras struct {
	AdditionalProperties map[string]externalRef0.PresenceInfo `json:"-"`
}

// Possible values are - UNSPECIFIED: This value is used for unspecified reasons. - UE_SUBSCRIPTION: This value is used to indicate that the session needs to be terminated because the subscription of UE has changed (e.g. was removed). - INSUFFICIENT_RES: This value is used to indicate that the server is overloaded and needs to abort the session.
type PolicyAssociationReleaseCause interface{}

// PolicyAssociationRequest defines model for PolicyAssociationRequest.
type PolicyAssociationRequest struct {
	AccessType *externalRef0.AccessType `json:"accessType,omitempty"`

	// Alternate or backup IPv4 Address(es) where to send Notifications.
	AltNotifIpv4Addrs *[]externalRef0.Ipv4Addr `json:"altNotifIpv4Addrs,omitempty"`

	// Alternate or backup IPv6 Address(es) where to send Notifications.
	AltNotifIpv6Addrs *[]externalRef0.Ipv6Addr             `json:"altNotifIpv6Addrs,omitempty"`
	Gpsi              *externalRef0.Gpsi                   `json:"gpsi,omitempty"`
	GroupIds          *[]externalRef0.GroupId              `json:"groupIds,omitempty"`
	Guami             *externalRef0.Guami                  `json:"guami,omitempty"`
	NotificationUri   externalRef0.Uri                     `json:"notificationUri"`
	Pei               *externalRef0.Pei                    `json:"pei,omitempty"`
	RatType           *externalRef0.RatType                `json:"ratType,omitempty"`
	Rfsp              *externalRef0.RfspIndex              `json:"rfsp,omitempty"`
	ServAreaRes       *externalRef0.ServiceAreaRestriction `json:"servAreaRes,omitempty"`
	ServingPlmn       *externalRef0.NetworkId              `json:"servingPlmn,omitempty"`

	// If the NF service consumer is an AMF, it should provide the name of a service produced by the AMF that makes use of information received within the Npcf_AMPolicyControl_UpdateNotify service operation. It corresponds to serviceName in the main body.
	ServiveName *string                        `json:"serviveName,omitempty"`
	Supi        externalRef0.Supi              `json:"supi"`
	SuppFeat    externalRef0.SupportedFeatures `json:"suppFeat"`
	TimeZone    *externalRef0.TimeZone         `json:"timeZone,omitempty"`
	TraceReq    *externalRef0.TraceData        `json:"traceReq"`
	UserLoc     *externalRef0.UserLocation     `json:"userLoc,omitempty"`
}

// PolicyAssociationUpdateRequest defines model for PolicyAssociationUpdateRequest.
type PolicyAssociationUpdateRequest struct {
	// Alternate or backup IPv4 Address(es) where to send Notifications.
	AltNotifIpv4Addrs *[]externalRef0.Ipv4Addr `json:"altNotifIpv4Addrs,omitempty"`

	// Alternate or backup IPv6 Address(es) where to send Notifications.
	AltNotifIpv6Addrs *[]externalRef0.Ipv6Addr `json:"altNotifIpv6Addrs,omitempty"`
	Guami             *externalRef0.Guami      `json:"guami,omitempty"`
	NotificationUri   *externalRef0.Uri        `json:"notificationUri,omitempty"`

	// Map of PRA status information.
	PraStatuses *PolicyAssociationUpdateRequest_PraStatuses `json:"praStatuses,omitempty"`
	Rfsp        *externalRef0.RfspIndex                     `json:"rfsp,omitempty"`
	ServAreaRes *externalRef0.ServiceAreaRestriction        `json:"servAreaRes,omitempty"`
	TraceReq    *externalRef0.TraceData                     `json:"traceReq"`

	// Request Triggers that the NF service consumer observes.
	Triggers *[]RequestTrigger          `json:"triggers,omitempty"`
	UserLoc  *externalRef0.UserLocation `json:"userLoc,omitempty"`
}

// Map of PRA status information.
type PolicyAssociationUpdateRequest_PraStatuses struct {
	AdditionalProperties map[string]externalRef0.PresenceInfo `json:"-"`
}

// PolicyUpdate defines model for PolicyUpdate.
type PolicyUpdate struct {
	// Map of PRA information.
	Pras        *PolicyUpdate_Pras                   `json:"pras"`
	ResourceUri externalRef0.Uri                     `json:"resourceUri"`
	Rfsp        *externalRef0.RfspIndex              `json:"rfsp,omitempty"`
	ServAreaRes *externalRef0.ServiceAreaRestriction `json:"servAreaRes,omitempty"`

	// Request Triggers that the PCF subscribes. Only values "LOC_CH" and "PRA_CH" are permitted.
	Triggers *[]RequestTrigger `json:"triggers"`
}

// Map of PRA information.
type PolicyUpdate_Pras struct {
	AdditionalProperties map[string]externalRef0.PresenceInfoRm `json:"-"`
}

// Possible values are - LOC_CH: Location change (tracking area). The tracking area of the UE has changed. - PRA_CH: Change of UE presence in PRA. The AMF reports the current presence status of the UE in a Presence Reporting Area, and notifies that the UE enters/leaves the Presence Reporting Area. - SERV_AREA_CH: Service Area Restriction change. The UDM notifies the AMF that the subscribed service area restriction information has changed. - RFSP_CH: RFSP index change. The UDM notifies the AMF that the subscribed RFSP index has changed.
type RequestTrigger interface{}

// TerminationNotification defines model for TerminationNotification.
type TerminationNotification struct {
	// Possible values are - UNSPECIFIED: This value is used for unspecified reasons. - UE_SUBSCRIPTION: This value is used to indicate that the session needs to be terminated because the subscription of UE has changed (e.g. was removed). - INSUFFICIENT_RES: This value is used to indicate that the server is overloaded and needs to abort the session.
	Cause       PolicyAssociationReleaseCause `json:"cause"`
	ResourceUri externalRef0.Uri              `json:"resourceUri"`
}

// PostPoliciesJSONBody defines parameters for PostPolicies.
type PostPoliciesJSONBody PolicyAssociationRequest

// PostPoliciesPolAssoIdUpdateJSONBody defines parameters for PostPoliciesPolAssoIdUpdate.
type PostPoliciesPolAssoIdUpdateJSONBody PolicyAssociationUpdateRequest

// PostPoliciesJSONRequestBody defines body for PostPolicies for application/json ContentType.
type PostPoliciesJSONRequestBody PostPoliciesJSONBody

// PostPoliciesPolAssoIdUpdateJSONRequestBody defines body for PostPoliciesPolAssoIdUpdate for application/json ContentType.
type PostPoliciesPolAssoIdUpdateJSONRequestBody PostPoliciesPolAssoIdUpdateJSONBody

// Getter for additional properties for PolicyAssociation_Pras. Returns the specified
// element and whether it was found
func (a PolicyAssociation_Pras) Get(fieldName string) (value externalRef0.PresenceInfo, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PolicyAssociation_Pras
func (a *PolicyAssociation_Pras) Set(fieldName string, value externalRef0.PresenceInfo) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]externalRef0.PresenceInfo)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PolicyAssociation_Pras to handle AdditionalProperties
func (a *PolicyAssociation_Pras) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]externalRef0.PresenceInfo)
		for fieldName, fieldBuf := range object {
			var fieldVal externalRef0.PresenceInfo
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PolicyAssociation_Pras to handle AdditionalProperties
func (a PolicyAssociation_Pras) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PolicyAssociationUpdateRequest_PraStatuses. Returns the specified
// element and whether it was found
func (a PolicyAssociationUpdateRequest_PraStatuses) Get(fieldName string) (value externalRef0.PresenceInfo, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PolicyAssociationUpdateRequest_PraStatuses
func (a *PolicyAssociationUpdateRequest_PraStatuses) Set(fieldName string, value externalRef0.PresenceInfo) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]externalRef0.PresenceInfo)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PolicyAssociationUpdateRequest_PraStatuses to handle AdditionalProperties
func (a *PolicyAssociationUpdateRequest_PraStatuses) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]externalRef0.PresenceInfo)
		for fieldName, fieldBuf := range object {
			var fieldVal externalRef0.PresenceInfo
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PolicyAssociationUpdateRequest_PraStatuses to handle AdditionalProperties
func (a PolicyAssociationUpdateRequest_PraStatuses) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PolicyUpdate_Pras. Returns the specified
// element and whether it was found
func (a PolicyUpdate_Pras) Get(fieldName string) (value externalRef0.PresenceInfoRm, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PolicyUpdate_Pras
func (a *PolicyUpdate_Pras) Set(fieldName string, value externalRef0.PresenceInfoRm) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]externalRef0.PresenceInfoRm)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PolicyUpdate_Pras to handle AdditionalProperties
func (a *PolicyUpdate_Pras) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]externalRef0.PresenceInfoRm)
		for fieldName, fieldBuf := range object {
			var fieldVal externalRef0.PresenceInfoRm
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PolicyUpdate_Pras to handle AdditionalProperties
func (a PolicyUpdate_Pras) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
