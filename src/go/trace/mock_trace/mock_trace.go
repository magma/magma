// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/magma/magma/src/go/trace (interfaces: Trace)

// Package mock_trace is a generated GoMock package.
package mock_trace

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	trace "github.com/magma/magma/src/go/trace"
)

// MockTrace is a mock of Trace interface.
type MockTrace struct {
	ctrl     *gomock.Controller
	recorder *MockTraceMockRecorder
}

// MockTraceMockRecorder is the mock recorder for MockTrace.
type MockTraceMockRecorder struct {
	mock *MockTrace
}

// NewMockTrace creates a new mock instance.
func NewMockTrace(ctrl *gomock.Controller) *MockTrace {
	mock := &MockTrace{ctrl: ctrl}
	mock.recorder = &MockTraceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrace) EXPECT() *MockTraceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockTrace) Add(arg0 string) trace.Span {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(trace.Span)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockTraceMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTrace)(nil).Add), arg0)
}

// Finish mocks base method.
func (m *MockTrace) Finish() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Finish")
}

// Finish indicates an expected call of Finish.
func (mr *MockTraceMockRecorder) Finish() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finish", reflect.TypeOf((*MockTrace)(nil).Finish))
}

// SetTag mocks base method.
func (m *MockTrace) SetTag(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTag", arg0, arg1)
}

// SetTag indicates an expected call of SetTag.
func (mr *MockTraceMockRecorder) SetTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTag", reflect.TypeOf((*MockTrace)(nil).SetTag), arg0, arg1)
}
