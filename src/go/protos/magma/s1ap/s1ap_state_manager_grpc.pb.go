// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package s1ap

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// S1ApStateManagerServiceClient is the client API for S1ApStateManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type S1ApStateManagerServiceClient interface {
	// Connect handles an S1AP Connection Request
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error)
	// Disconnect handles an S1AP Disconnection Request
	Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectResponse, error)
}

type s1ApStateManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewS1ApStateManagerServiceClient(cc grpc.ClientConnInterface) S1ApStateManagerServiceClient {
	return &s1ApStateManagerServiceClient{cc}
}

func (c *s1ApStateManagerServiceClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error) {
	out := new(ConnectResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.S1apStateManagerService/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s1ApStateManagerServiceClient) Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectResponse, error) {
	out := new(DisconnectResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.S1apStateManagerService/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// S1ApStateManagerServiceServer is the server API for S1ApStateManagerService service.
// All implementations must embed UnimplementedS1ApStateManagerServiceServer
// for forward compatibility
type S1ApStateManagerServiceServer interface {
	// Connect handles an S1AP Connection Request
	Connect(context.Context, *ConnectRequest) (*ConnectResponse, error)
	// Disconnect handles an S1AP Disconnection Request
	Disconnect(context.Context, *DisconnectRequest) (*DisconnectResponse, error)
	mustEmbedUnimplementedS1ApStateManagerServiceServer()
}

// UnimplementedS1ApStateManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedS1ApStateManagerServiceServer struct {
}

func (UnimplementedS1ApStateManagerServiceServer) Connect(context.Context, *ConnectRequest) (*ConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedS1ApStateManagerServiceServer) Disconnect(context.Context, *DisconnectRequest) (*DisconnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (UnimplementedS1ApStateManagerServiceServer) mustEmbedUnimplementedS1ApStateManagerServiceServer() {
}

// UnsafeS1ApStateManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to S1ApStateManagerServiceServer will
// result in compilation errors.
type UnsafeS1ApStateManagerServiceServer interface {
	mustEmbedUnimplementedS1ApStateManagerServiceServer()
}

func RegisterS1ApStateManagerServiceServer(s grpc.ServiceRegistrar, srv S1ApStateManagerServiceServer) {
	s.RegisterService(&S1ApStateManagerService_ServiceDesc, srv)
}

func _S1ApStateManagerService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S1ApStateManagerServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.S1apStateManagerService/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S1ApStateManagerServiceServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _S1ApStateManagerService_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S1ApStateManagerServiceServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.S1apStateManagerService/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S1ApStateManagerServiceServer).Disconnect(ctx, req.(*DisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// S1ApStateManagerService_ServiceDesc is the grpc.ServiceDesc for S1ApStateManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var S1ApStateManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.S1apStateManagerService",
	HandlerType: (*S1ApStateManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _S1ApStateManagerService_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _S1ApStateManagerService_Disconnect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "s1ap_state_manager.proto",
}
