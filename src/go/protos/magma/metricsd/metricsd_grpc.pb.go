// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package metricsd

import (
	context "context"
	orc8r "github.com/magma/magma/src/go/protos/magma/orc8r"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetricsControllerClient is the client API for MetricsController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsControllerClient interface {
	// Report a collection of metrics from a service
	Collect(ctx context.Context, in *MetricsContainer, opts ...grpc.CallOption) (*orc8r.Void, error)
	// Push a collection of metrics to metricsd
	Push(ctx context.Context, in *PushedMetricsContainer, opts ...grpc.CallOption) (*orc8r.Void, error)
}

type metricsControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsControllerClient(cc grpc.ClientConnInterface) MetricsControllerClient {
	return &metricsControllerClient{cc}
}

func (c *metricsControllerClient) Collect(ctx context.Context, in *MetricsContainer, opts ...grpc.CallOption) (*orc8r.Void, error) {
	out := new(orc8r.Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.MetricsController/Collect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsControllerClient) Push(ctx context.Context, in *PushedMetricsContainer, opts ...grpc.CallOption) (*orc8r.Void, error) {
	out := new(orc8r.Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.MetricsController/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsControllerServer is the server API for MetricsController service.
// All implementations must embed UnimplementedMetricsControllerServer
// for forward compatibility
type MetricsControllerServer interface {
	// Report a collection of metrics from a service
	Collect(context.Context, *MetricsContainer) (*orc8r.Void, error)
	// Push a collection of metrics to metricsd
	Push(context.Context, *PushedMetricsContainer) (*orc8r.Void, error)
	mustEmbedUnimplementedMetricsControllerServer()
}

// UnimplementedMetricsControllerServer must be embedded to have forward compatible implementations.
type UnimplementedMetricsControllerServer struct {
}

func (UnimplementedMetricsControllerServer) Collect(context.Context, *MetricsContainer) (*orc8r.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Collect not implemented")
}
func (UnimplementedMetricsControllerServer) Push(context.Context, *PushedMetricsContainer) (*orc8r.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedMetricsControllerServer) mustEmbedUnimplementedMetricsControllerServer() {}

// UnsafeMetricsControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsControllerServer will
// result in compilation errors.
type UnsafeMetricsControllerServer interface {
	mustEmbedUnimplementedMetricsControllerServer()
}

func RegisterMetricsControllerServer(s grpc.ServiceRegistrar, srv MetricsControllerServer) {
	s.RegisterService(&MetricsController_ServiceDesc, srv)
}

func _MetricsController_Collect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsContainer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsControllerServer).Collect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.MetricsController/Collect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsControllerServer).Collect(ctx, req.(*MetricsContainer))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsController_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushedMetricsContainer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsControllerServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.MetricsController/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsControllerServer).Push(ctx, req.(*PushedMetricsContainer))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricsController_ServiceDesc is the grpc.ServiceDesc for MetricsController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.MetricsController",
	HandlerType: (*MetricsControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Collect",
			Handler:    _MetricsController_Collect_Handler,
		},
		{
			MethodName: "Push",
			Handler:    _MetricsController_Push_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metricsd.proto",
}
