// Code generated by MockGen. DO NOT EDIT.
// Source: magma/metricsd/metricsd_grpc.pb.go

// Package mock_metricsd is a generated GoMock package.
package mock_metricsd

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	metricsd "github.com/magma/magma/src/go/protos/magma/metricsd"
	orc8r "github.com/magma/magma/src/go/protos/magma/orc8r"
	grpc "google.golang.org/grpc"
)

// MockMetricsControllerClient is a mock of MetricsControllerClient interface.
type MockMetricsControllerClient struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsControllerClientMockRecorder
}

// MockMetricsControllerClientMockRecorder is the mock recorder for MockMetricsControllerClient.
type MockMetricsControllerClientMockRecorder struct {
	mock *MockMetricsControllerClient
}

// NewMockMetricsControllerClient creates a new mock instance.
func NewMockMetricsControllerClient(ctrl *gomock.Controller) *MockMetricsControllerClient {
	mock := &MockMetricsControllerClient{ctrl: ctrl}
	mock.recorder = &MockMetricsControllerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsControllerClient) EXPECT() *MockMetricsControllerClientMockRecorder {
	return m.recorder
}

// Collect mocks base method.
func (m *MockMetricsControllerClient) Collect(ctx context.Context, in *metricsd.MetricsContainer, opts ...grpc.CallOption) (*orc8r.Void, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Collect", varargs...)
	ret0, _ := ret[0].(*orc8r.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Collect indicates an expected call of Collect.
func (mr *MockMetricsControllerClientMockRecorder) Collect(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collect", reflect.TypeOf((*MockMetricsControllerClient)(nil).Collect), varargs...)
}

// Push mocks base method.
func (m *MockMetricsControllerClient) Push(ctx context.Context, in *metricsd.PushedMetricsContainer, opts ...grpc.CallOption) (*orc8r.Void, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Push", varargs...)
	ret0, _ := ret[0].(*orc8r.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Push indicates an expected call of Push.
func (mr *MockMetricsControllerClientMockRecorder) Push(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockMetricsControllerClient)(nil).Push), varargs...)
}

// MockMetricsControllerServer is a mock of MetricsControllerServer interface.
type MockMetricsControllerServer struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsControllerServerMockRecorder
}

// MockMetricsControllerServerMockRecorder is the mock recorder for MockMetricsControllerServer.
type MockMetricsControllerServerMockRecorder struct {
	mock *MockMetricsControllerServer
}

// NewMockMetricsControllerServer creates a new mock instance.
func NewMockMetricsControllerServer(ctrl *gomock.Controller) *MockMetricsControllerServer {
	mock := &MockMetricsControllerServer{ctrl: ctrl}
	mock.recorder = &MockMetricsControllerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsControllerServer) EXPECT() *MockMetricsControllerServerMockRecorder {
	return m.recorder
}

// Collect mocks base method.
func (m *MockMetricsControllerServer) Collect(arg0 context.Context, arg1 *metricsd.MetricsContainer) (*orc8r.Void, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collect", arg0, arg1)
	ret0, _ := ret[0].(*orc8r.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Collect indicates an expected call of Collect.
func (mr *MockMetricsControllerServerMockRecorder) Collect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collect", reflect.TypeOf((*MockMetricsControllerServer)(nil).Collect), arg0, arg1)
}

// Push mocks base method.
func (m *MockMetricsControllerServer) Push(arg0 context.Context, arg1 *metricsd.PushedMetricsContainer) (*orc8r.Void, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", arg0, arg1)
	ret0, _ := ret[0].(*orc8r.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Push indicates an expected call of Push.
func (mr *MockMetricsControllerServerMockRecorder) Push(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockMetricsControllerServer)(nil).Push), arg0, arg1)
}

// mustEmbedUnimplementedMetricsControllerServer mocks base method.
func (m *MockMetricsControllerServer) mustEmbedUnimplementedMetricsControllerServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMetricsControllerServer")
}

// mustEmbedUnimplementedMetricsControllerServer indicates an expected call of mustEmbedUnimplementedMetricsControllerServer.
func (mr *MockMetricsControllerServerMockRecorder) mustEmbedUnimplementedMetricsControllerServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMetricsControllerServer", reflect.TypeOf((*MockMetricsControllerServer)(nil).mustEmbedUnimplementedMetricsControllerServer))
}

// MockUnsafeMetricsControllerServer is a mock of UnsafeMetricsControllerServer interface.
type MockUnsafeMetricsControllerServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeMetricsControllerServerMockRecorder
}

// MockUnsafeMetricsControllerServerMockRecorder is the mock recorder for MockUnsafeMetricsControllerServer.
type MockUnsafeMetricsControllerServerMockRecorder struct {
	mock *MockUnsafeMetricsControllerServer
}

// NewMockUnsafeMetricsControllerServer creates a new mock instance.
func NewMockUnsafeMetricsControllerServer(ctrl *gomock.Controller) *MockUnsafeMetricsControllerServer {
	mock := &MockUnsafeMetricsControllerServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeMetricsControllerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeMetricsControllerServer) EXPECT() *MockUnsafeMetricsControllerServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedMetricsControllerServer mocks base method.
func (m *MockUnsafeMetricsControllerServer) mustEmbedUnimplementedMetricsControllerServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMetricsControllerServer")
}

// mustEmbedUnimplementedMetricsControllerServer indicates an expected call of mustEmbedUnimplementedMetricsControllerServer.
func (mr *MockUnsafeMetricsControllerServerMockRecorder) mustEmbedUnimplementedMetricsControllerServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMetricsControllerServer", reflect.TypeOf((*MockUnsafeMetricsControllerServer)(nil).mustEmbedUnimplementedMetricsControllerServer))
}
