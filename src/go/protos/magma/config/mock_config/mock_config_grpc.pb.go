// Code generated by MockGen. DO NOT EDIT.
// Source: magma/config/config_grpc.pb.go

// Package mock_config is a generated GoMock package.
package mock_config

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "github.com/magma/magma/src/go/protos/magma/config"
	grpc "google.golang.org/grpc"
)

// MockConfigClient is a mock of ConfigClient interface.
type MockConfigClient struct {
	ctrl     *gomock.Controller
	recorder *MockConfigClientMockRecorder
}

// MockConfigClientMockRecorder is the mock recorder for MockConfigClient.
type MockConfigClientMockRecorder struct {
	mock *MockConfigClient
}

// NewMockConfigClient creates a new mock instance.
func NewMockConfigClient(ctrl *gomock.Controller) *MockConfigClient {
	mock := &MockConfigClient{ctrl: ctrl}
	mock.recorder = &MockConfigClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigClient) EXPECT() *MockConfigClientMockRecorder {
	return m.recorder
}

// GetConfig mocks base method.
func (m *MockConfigClient) GetConfig(ctx context.Context, in *config.GetConfigRequest, opts ...grpc.CallOption) (*config.GetConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConfig", varargs...)
	ret0, _ := ret[0].(*config.GetConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockConfigClientMockRecorder) GetConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockConfigClient)(nil).GetConfig), varargs...)
}

// ReplaceConfig mocks base method.
func (m *MockConfigClient) ReplaceConfig(ctx context.Context, in *config.ReplaceConfigRequest, opts ...grpc.CallOption) (*config.ReplaceConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReplaceConfig", varargs...)
	ret0, _ := ret[0].(*config.ReplaceConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceConfig indicates an expected call of ReplaceConfig.
func (mr *MockConfigClientMockRecorder) ReplaceConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceConfig", reflect.TypeOf((*MockConfigClient)(nil).ReplaceConfig), varargs...)
}

// UpdateConfig mocks base method.
func (m *MockConfigClient) UpdateConfig(ctx context.Context, in *config.UpdateConfigRequest, opts ...grpc.CallOption) (*config.UpdateConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConfig", varargs...)
	ret0, _ := ret[0].(*config.UpdateConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfig indicates an expected call of UpdateConfig.
func (mr *MockConfigClientMockRecorder) UpdateConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfig", reflect.TypeOf((*MockConfigClient)(nil).UpdateConfig), varargs...)
}

// MockConfigServer is a mock of ConfigServer interface.
type MockConfigServer struct {
	ctrl     *gomock.Controller
	recorder *MockConfigServerMockRecorder
}

// MockConfigServerMockRecorder is the mock recorder for MockConfigServer.
type MockConfigServerMockRecorder struct {
	mock *MockConfigServer
}

// NewMockConfigServer creates a new mock instance.
func NewMockConfigServer(ctrl *gomock.Controller) *MockConfigServer {
	mock := &MockConfigServer{ctrl: ctrl}
	mock.recorder = &MockConfigServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigServer) EXPECT() *MockConfigServerMockRecorder {
	return m.recorder
}

// GetConfig mocks base method.
func (m *MockConfigServer) GetConfig(arg0 context.Context, arg1 *config.GetConfigRequest) (*config.GetConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", arg0, arg1)
	ret0, _ := ret[0].(*config.GetConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockConfigServerMockRecorder) GetConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockConfigServer)(nil).GetConfig), arg0, arg1)
}

// ReplaceConfig mocks base method.
func (m *MockConfigServer) ReplaceConfig(arg0 context.Context, arg1 *config.ReplaceConfigRequest) (*config.ReplaceConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceConfig", arg0, arg1)
	ret0, _ := ret[0].(*config.ReplaceConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceConfig indicates an expected call of ReplaceConfig.
func (mr *MockConfigServerMockRecorder) ReplaceConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceConfig", reflect.TypeOf((*MockConfigServer)(nil).ReplaceConfig), arg0, arg1)
}

// UpdateConfig mocks base method.
func (m *MockConfigServer) UpdateConfig(arg0 context.Context, arg1 *config.UpdateConfigRequest) (*config.UpdateConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfig", arg0, arg1)
	ret0, _ := ret[0].(*config.UpdateConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfig indicates an expected call of UpdateConfig.
func (mr *MockConfigServerMockRecorder) UpdateConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfig", reflect.TypeOf((*MockConfigServer)(nil).UpdateConfig), arg0, arg1)
}

// mustEmbedUnimplementedConfigServer mocks base method.
func (m *MockConfigServer) mustEmbedUnimplementedConfigServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedConfigServer")
}

// mustEmbedUnimplementedConfigServer indicates an expected call of mustEmbedUnimplementedConfigServer.
func (mr *MockConfigServerMockRecorder) mustEmbedUnimplementedConfigServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedConfigServer", reflect.TypeOf((*MockConfigServer)(nil).mustEmbedUnimplementedConfigServer))
}

// MockUnsafeConfigServer is a mock of UnsafeConfigServer interface.
type MockUnsafeConfigServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeConfigServerMockRecorder
}

// MockUnsafeConfigServerMockRecorder is the mock recorder for MockUnsafeConfigServer.
type MockUnsafeConfigServerMockRecorder struct {
	mock *MockUnsafeConfigServer
}

// NewMockUnsafeConfigServer creates a new mock instance.
func NewMockUnsafeConfigServer(ctrl *gomock.Controller) *MockUnsafeConfigServer {
	mock := &MockUnsafeConfigServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeConfigServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeConfigServer) EXPECT() *MockUnsafeConfigServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedConfigServer mocks base method.
func (m *MockUnsafeConfigServer) mustEmbedUnimplementedConfigServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedConfigServer")
}

// mustEmbedUnimplementedConfigServer indicates an expected call of mustEmbedUnimplementedConfigServer.
func (mr *MockUnsafeConfigServerMockRecorder) mustEmbedUnimplementedConfigServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedConfigServer", reflect.TypeOf((*MockUnsafeConfigServer)(nil).mustEmbedUnimplementedConfigServer))
}
