/*
Copyright 2022 The Magma Authors.

This source code is licensed under the BSD-style license found in the
LICENSE file in the root directory of this source tree.

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
syntax = "proto3";

import "google/protobuf/wrappers.proto";

option go_package = "magma/dp/cloud/go/active_mode_controller/protos/active_mode";

service ActiveModeController {
  rpc GetState(GetStateRequest) returns (State) {}
  rpc DeleteCbsd(DeleteCbsdRequest) returns (DeleteCbsdResponse) {}
}

message GetStateRequest {}

message State {
  repeated ActiveModeConfig active_mode_configs = 1;
}

message ActiveModeConfig {
  CbsdState desired_state = 1;
  Cbsd cbsd = 2;
}

enum CbsdState {
  Unregistered = 0;
  Registered = 1;
}

message Cbsd {
  string id = 1;
  string user_id = 2;
  string fcc_id = 3;
  string serial_number = 4;
  CbsdState state = 5;
  repeated Grant grants = 6;
  repeated Channel channels = 7;
  repeated Request pending_requests = 8;
  int64 last_seen_timestamp = 9;
  EirpCapabilities eirp_capabilities = 10;
  bool is_deleted = 11;
}

message Grant {
  string id = 1;
  GrantState state = 2;
  int64 heartbeat_interval_sec = 3;
  int64 last_heartbeat_timestamp = 4;
}

enum GrantState {
  Granted = 0;
  Authorized = 1;
  Unsync = 2;
}

message Channel {
  FrequencyRange frequency_range = 1;
  google.protobuf.FloatValue max_eirp = 2;
  google.protobuf.FloatValue last_eirp = 3;
}

message FrequencyRange {
  int64 low = 1;
  int64 high = 2;
}

message Request {
  RequestsType type = 1;
  string payload = 2;
}

enum RequestsType {
  RegistrationRequest = 0;
  SpectrumInquiryRequest = 1;
  GrantRequest = 2;
  HeartbeatRequest = 3;
  RelinquishmentRequest = 4;
  DeregistrationRequest = 5;
}

message EirpCapabilities {
  float min_power = 1;
  float max_power = 2;
  float antenna_gain = 3;
  int32 number_of_ports = 4;
}

message DeleteCbsdRequest {
  string serial_number = 1;
}

message DeleteCbsdResponse {}
