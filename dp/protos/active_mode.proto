/*
Copyright 2022 The Magma Authors.

This source code is licensed under the BSD-style license found in the
LICENSE file in the root directory of this source tree.

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

option go_package = "magma/dp/cloud/go/active_mode_controller/protos/active_mode";

service ActiveModeController {
  rpc GetState(GetStateRequest) returns (State) {}
  rpc DeleteCbsd(DeleteCbsdRequest) returns (google.protobuf.Empty) {}
  rpc AcknowledgeCbsdUpdate(AcknowledgeCbsdUpdateRequest) returns (google.protobuf.Empty) {}
}

message GetStateRequest {}

message State {
  repeated Cbsd cbsds = 1;
}

message Cbsd {
  string cbsd_id = 1;
  CbsdState state = 2;
  CbsdState desired_state = 3;
  repeated Grant grants = 4;
  repeated Channel channels = 5;
  int64 last_seen_timestamp = 6;
  int32 grant_attempts = 7;
  SasSettings sas_settings = 8;
  InstallationParams installation_params = 9;
  EirpCapabilities eirp_capabilities = 10;
  DatabaseCbsd db_data = 11;
  FrequencyPreferences preferences = 12;
}

message SasSettings {
  bool single_step_enabled = 1;
  string cbsd_category = 2;
  string serial_number = 3;
  string fcc_id = 4;
  string user_id = 5;
}

message InstallationParams {
  float latitude_deg = 1;
  float longitude_deg = 2;
  float height_m = 3;
  string height_type = 4;
  bool indoor_deployment = 5;
  float antenna_gain_dbi = 6;
}

enum CbsdState {
  Unregistered = 0;
  Registered = 1;
}

message Grant {
  string id = 1;
  GrantState state = 2;
  int64 heartbeat_interval_sec = 3;
  int64 last_heartbeat_timestamp = 4;
}

enum GrantState {
  Granted = 0;
  Authorized = 1;
  Unsync = 2;
}

message Channel {
  int64 low_frequency_hz = 1;
  int64 high_frequency_hz = 2;
  google.protobuf.FloatValue max_eirp = 3;
}

message EirpCapabilities {
  float min_power = 1;
  float max_power = 2;
  int32 number_of_ports = 3;
}

message DatabaseCbsd {
  int64 id = 1;
  bool should_deregister = 2;
  bool is_deleted = 3;
}

message FrequencyPreferences {
  int32 bandwidth_mhz = 1;
  repeated int32 frequencies_mhz = 2;
}

message DeleteCbsdRequest {
  int64 id = 1;
}

message AcknowledgeCbsdUpdateRequest {
  int64 id = 1;
}
