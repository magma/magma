// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Log log
//
// swagger:model log
type Log struct {

	// Body of log
	// Example: {[{\"registrationRequest\":{\"cbsdSerialNumber\":\"some_serial_number\"}}]}
	// Required: true
	Body string `json:"body"`

	// Fcc Id of cbsd involved in log
	// Example: some_fcc_id
	// Required: true
	FccID string `json:"fcc_id"`

	// log origin
	// Required: true
	// Enum: [SAS DP CBSD]
	From string `json:"from"`

	// Serial number of cbsd involved in log
	// Example: some_serial_number
	// Required: true
	SerialNumber string `json:"serial_number"`

	// Datetime of log
	// Required: true
	// Format: date-time
	Time strfmt.DateTime `json:"time"`

	// log destination
	// Required: true
	// Enum: [SAS DP CBSD]
	To string `json:"to"`

	// Type of log
	// Required: true
	Type string `json:"type"`
}

// Validate validates this log
func (m *Log) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFccID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSerialNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Log) validateBody(formats strfmt.Registry) error {

	if err := validate.RequiredString("body", "body", m.Body); err != nil {
		return err
	}

	return nil
}

func (m *Log) validateFccID(formats strfmt.Registry) error {

	if err := validate.RequiredString("fcc_id", "body", m.FccID); err != nil {
		return err
	}

	return nil
}

var logTypeFromPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SAS","DP","CBSD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		logTypeFromPropEnum = append(logTypeFromPropEnum, v)
	}
}

const (

	// LogFromSAS captures enum value "SAS"
	LogFromSAS string = "SAS"

	// LogFromDP captures enum value "DP"
	LogFromDP string = "DP"

	// LogFromCBSD captures enum value "CBSD"
	LogFromCBSD string = "CBSD"
)

// prop value enum
func (m *Log) validateFromEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, logTypeFromPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Log) validateFrom(formats strfmt.Registry) error {

	if err := validate.RequiredString("from", "body", m.From); err != nil {
		return err
	}

	// value enum
	if err := m.validateFromEnum("from", "body", m.From); err != nil {
		return err
	}

	return nil
}

func (m *Log) validateSerialNumber(formats strfmt.Registry) error {

	if err := validate.RequiredString("serial_number", "body", m.SerialNumber); err != nil {
		return err
	}

	return nil
}

func (m *Log) validateTime(formats strfmt.Registry) error {

	if err := validate.Required("time", "body", strfmt.DateTime(m.Time)); err != nil {
		return err
	}

	if err := validate.FormatOf("time", "body", "date-time", m.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

var logTypeToPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SAS","DP","CBSD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		logTypeToPropEnum = append(logTypeToPropEnum, v)
	}
}

const (

	// LogToSAS captures enum value "SAS"
	LogToSAS string = "SAS"

	// LogToDP captures enum value "DP"
	LogToDP string = "DP"

	// LogToCBSD captures enum value "CBSD"
	LogToCBSD string = "CBSD"
)

// prop value enum
func (m *Log) validateToEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, logTypeToPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Log) validateTo(formats strfmt.Registry) error {

	if err := validate.RequiredString("to", "body", m.To); err != nil {
		return err
	}

	// value enum
	if err := m.validateToEnum("to", "body", m.To); err != nil {
		return err
	}

	return nil
}

func (m *Log) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this log based on context it is used
func (m *Log) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Log) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Log) UnmarshalBinary(b []byte) error {
	var res Log
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
