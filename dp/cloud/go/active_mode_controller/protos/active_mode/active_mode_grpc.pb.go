// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.10.0
// source: dp/protos/active_mode.proto

package active_mode

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ActiveModeControllerClient is the client API for ActiveModeController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActiveModeControllerClient interface {
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*State, error)
	DeleteCbsd(ctx context.Context, in *DeleteCbsdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	AcknowledgeCbsdUpdate(ctx context.Context, in *AcknowledgeCbsdUpdateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type activeModeControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewActiveModeControllerClient(cc grpc.ClientConnInterface) ActiveModeControllerClient {
	return &activeModeControllerClient{cc}
}

func (c *activeModeControllerClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := c.cc.Invoke(ctx, "/ActiveModeController/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeModeControllerClient) DeleteCbsd(ctx context.Context, in *DeleteCbsdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ActiveModeController/DeleteCbsd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeModeControllerClient) AcknowledgeCbsdUpdate(ctx context.Context, in *AcknowledgeCbsdUpdateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ActiveModeController/AcknowledgeCbsdUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActiveModeControllerServer is the server API for ActiveModeController service.
// All implementations must embed UnimplementedActiveModeControllerServer
// for forward compatibility
type ActiveModeControllerServer interface {
	GetState(context.Context, *GetStateRequest) (*State, error)
	DeleteCbsd(context.Context, *DeleteCbsdRequest) (*empty.Empty, error)
	AcknowledgeCbsdUpdate(context.Context, *AcknowledgeCbsdUpdateRequest) (*empty.Empty, error)
	mustEmbedUnimplementedActiveModeControllerServer()
}

// UnimplementedActiveModeControllerServer must be embedded to have forward compatible implementations.
type UnimplementedActiveModeControllerServer struct {
}

func (UnimplementedActiveModeControllerServer) GetState(context.Context, *GetStateRequest) (*State, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedActiveModeControllerServer) DeleteCbsd(context.Context, *DeleteCbsdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCbsd not implemented")
}
func (UnimplementedActiveModeControllerServer) AcknowledgeCbsdUpdate(context.Context, *AcknowledgeCbsdUpdateRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcknowledgeCbsdUpdate not implemented")
}
func (UnimplementedActiveModeControllerServer) mustEmbedUnimplementedActiveModeControllerServer() {}

// UnsafeActiveModeControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActiveModeControllerServer will
// result in compilation errors.
type UnsafeActiveModeControllerServer interface {
	mustEmbedUnimplementedActiveModeControllerServer()
}

func RegisterActiveModeControllerServer(s grpc.ServiceRegistrar, srv ActiveModeControllerServer) {
	s.RegisterService(&ActiveModeController_ServiceDesc, srv)
}

func _ActiveModeController_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveModeControllerServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ActiveModeController/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveModeControllerServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveModeController_DeleteCbsd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCbsdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveModeControllerServer).DeleteCbsd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ActiveModeController/DeleteCbsd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveModeControllerServer).DeleteCbsd(ctx, req.(*DeleteCbsdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveModeController_AcknowledgeCbsdUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcknowledgeCbsdUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveModeControllerServer).AcknowledgeCbsdUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ActiveModeController/AcknowledgeCbsdUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveModeControllerServer).AcknowledgeCbsdUpdate(ctx, req.(*AcknowledgeCbsdUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActiveModeController_ServiceDesc is the grpc.ServiceDesc for ActiveModeController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActiveModeController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ActiveModeController",
	HandlerType: (*ActiveModeControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _ActiveModeController_GetState_Handler,
		},
		{
			MethodName: "DeleteCbsd",
			Handler:    _ActiveModeController_DeleteCbsd_Handler,
		},
		{
			MethodName: "AcknowledgeCbsdUpdate",
			Handler:    _ActiveModeController_AcknowledgeCbsdUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dp/protos/active_mode.proto",
}
