// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package requests

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RadioControllerClient is the client API for RadioController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RadioControllerClient interface {
	UploadRequests(ctx context.Context, in *RequestPayload, opts ...grpc.CallOption) (*RequestDbIds, error)
	GetResponse(ctx context.Context, in *RequestDbId, opts ...grpc.CallOption) (*ResponsePayload, error)
}

type radioControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewRadioControllerClient(cc grpc.ClientConnInterface) RadioControllerClient {
	return &radioControllerClient{cc}
}

func (c *radioControllerClient) UploadRequests(ctx context.Context, in *RequestPayload, opts ...grpc.CallOption) (*RequestDbIds, error) {
	out := new(RequestDbIds)
	err := c.cc.Invoke(ctx, "/RadioController/UploadRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radioControllerClient) GetResponse(ctx context.Context, in *RequestDbId, opts ...grpc.CallOption) (*ResponsePayload, error) {
	out := new(ResponsePayload)
	err := c.cc.Invoke(ctx, "/RadioController/GetResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RadioControllerServer is the server API for RadioController service.
// All implementations must embed UnimplementedRadioControllerServer
// for forward compatibility
type RadioControllerServer interface {
	UploadRequests(context.Context, *RequestPayload) (*RequestDbIds, error)
	GetResponse(context.Context, *RequestDbId) (*ResponsePayload, error)
	mustEmbedUnimplementedRadioControllerServer()
}

// UnimplementedRadioControllerServer must be embedded to have forward compatible implementations.
type UnimplementedRadioControllerServer struct {
}

func (UnimplementedRadioControllerServer) UploadRequests(context.Context, *RequestPayload) (*RequestDbIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadRequests not implemented")
}
func (UnimplementedRadioControllerServer) GetResponse(context.Context, *RequestDbId) (*ResponsePayload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResponse not implemented")
}
func (UnimplementedRadioControllerServer) mustEmbedUnimplementedRadioControllerServer() {}

// UnsafeRadioControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RadioControllerServer will
// result in compilation errors.
type UnsafeRadioControllerServer interface {
	mustEmbedUnimplementedRadioControllerServer()
}

func RegisterRadioControllerServer(s grpc.ServiceRegistrar, srv RadioControllerServer) {
	s.RegisterService(&RadioController_ServiceDesc, srv)
}

func _RadioController_UploadRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadioControllerServer).UploadRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RadioController/UploadRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadioControllerServer).UploadRequests(ctx, req.(*RequestPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _RadioController_GetResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDbId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadioControllerServer).GetResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RadioController/GetResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadioControllerServer).GetResponse(ctx, req.(*RequestDbId))
	}
	return interceptor(ctx, in, info, handler)
}

// RadioController_ServiceDesc is the grpc.ServiceDesc for RadioController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RadioController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RadioController",
	HandlerType: (*RadioControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadRequests",
			Handler:    _RadioController_UploadRequests_Handler,
		},
		{
			MethodName: "GetResponse",
			Handler:    _RadioController_GetResponse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dp/protos/requests.proto",
}
